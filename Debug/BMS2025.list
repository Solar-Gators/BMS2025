
BMS2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001210c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  080122c0  080122c0  000132c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012810  08012810  000142e0  2**0
                  CONTENTS
  4 .ARM          00000008  08012810  08012810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012818  08012818  000142e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012818  08012818  00013818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012820  08012820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e0  20000000  08012824  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044ec  200002e0  08012b04  000142e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200047cc  08012b04  000147cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033365  00000000  00000000  00014310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068bb  00000000  00000000  00047675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024d8  00000000  00000000  0004df30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c36  00000000  00000000  00050408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003260f  00000000  00000000  0005203e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c3a0  00000000  00000000  0008464d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a03c  00000000  00000000  000b09ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001caa29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aaf0  00000000  00000000  001caa6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001d555c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e0 	.word	0x200002e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080122a4 	.word	0x080122a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002e4 	.word	0x200002e4
 80001ec:	080122a4 	.word	0x080122a4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <_ZN7ADS7138C1Ev>:
#include "ADS7138.h"

/**
 * @brief Instantiates a new ADS7138 class.
 */
ADS7138::ADS7138() {}
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh>:
 * @brief Sets up the I2C connection.
 *
 * @param hi2c Pointer to the HAL I2C handle.
 * @param deviceAddress The 7-bit I2C address of the ADS7138.
 */
void ADS7138::begin(I2C_HandleTypeDef* hi2c, uint8_t deviceAddress) {
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71fb      	strb	r3, [r7, #7]
    _i2cHandle = hi2c;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	601a      	str	r2, [r3, #0]
    _deviceAddress = (deviceAddress != 0) ? deviceAddress << 1 : (ADS7138_I2CADDR_DEFAULT << 1); // STM32 expects 8-bit address
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh+0x22>
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	e000      	b.n	8000c42 <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh+0x24>
 8000c40:	2220      	movs	r2, #32
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	711a      	strb	r2, [r3, #4]
    _currentOsr = OSR_1;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	731a      	strb	r2, [r3, #12]
    _referenceVoltage = 3300; // default in mV
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000c52:	609a      	str	r2, [r3, #8]
    _currentChannel = MANUAL_CHID_AIN0;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2200      	movs	r2, #0
 8000c58:	735a      	strb	r2, [r3, #13]
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_ZN7ADS713819setReferenceVoltageEm>:

void ADS7138::setReferenceVoltage(uint32_t reference) {
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
    _referenceVoltage = reference;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	609a      	str	r2, [r3, #8]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_ZN7ADS713814writeRegister8Ehh>:

void ADS7138::writeRegister8(uint8_t registerAddress, uint8_t value) {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af02      	add	r7, sp, #8
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	70fb      	strb	r3, [r7, #3]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	70bb      	strb	r3, [r7, #2]
    uint8_t data[3] = { SINGLE_REGISTER_WRITE, registerAddress, value };
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2100      	movs	r1, #0
 8000c98:	460a      	mov	r2, r1
 8000c9a:	801a      	strh	r2, [r3, #0]
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	709a      	strb	r2, [r3, #2]
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	733b      	strb	r3, [r7, #12]
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	737b      	strb	r3, [r7, #13]
 8000ca8:	78bb      	ldrb	r3, [r7, #2]
 8000caa:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(_i2cHandle, _deviceAddress, data, 3, HAL_MAX_DELAY);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	791b      	ldrb	r3, [r3, #4]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f107 020c 	add.w	r2, r7, #12
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	f003 fad5 	bl	8004270 <HAL_I2C_Master_Transmit>
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZN7ADS713815configureOpModeE16ADS7138__OSC_SEL18ADS7138__CONV_MODE20ADS7138__CONV_ON_ERR>:

void ADS7138::configureOpMode(ADS7138__OSC_SEL oscSel, ADS7138__CONV_MODE convMode, ADS7138__CONV_ON_ERR convOnErr) {
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	4611      	mov	r1, r2
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4603      	mov	r3, r0
 8000cde:	70fb      	strb	r3, [r7, #3]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	70bb      	strb	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	707b      	strb	r3, [r7, #1]
    uint8_t config = (0x00 & CLK_DIV_MASK) | (oscSel & OSC_SEL_MASK) | (convMode & CONV_MODE_MASK) | (convOnErr & CONV_ON_ERR_MASK);
 8000ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	b25a      	sxtb	r2, r3
 8000cf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000cf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b25a      	sxtb	r2, r3
 8000d00:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000d04:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	73fb      	strb	r3, [r7, #15]
    writeRegister8(OPMODE_CFG_ADDRESS, config);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	461a      	mov	r2, r3
 8000d14:	2104      	movs	r1, #4
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffb3 	bl	8000c82 <_ZN7ADS713814writeRegister8Ehh>
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN7ADS713821configureSequenceModeE17ADS7138__SEQ_MODE18ADS7138__SEQ_START>:

void ADS7138::configureSequenceMode(ADS7138__SEQ_MODE seqMode, ADS7138__SEQ_START seqStart) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
 8000d30:	4613      	mov	r3, r2
 8000d32:	70bb      	strb	r3, [r7, #2]
    uint8_t config = (seqMode & SEQ_MODE_MASK) | (seqStart & SEQ_START_MASK);
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	78bb      	ldrb	r3, [r7, #2]
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	73fb      	strb	r3, [r7, #15]
    writeRegister8(SEQUENCE_CFG_ADDRESS, config);
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff97 	bl	8000c82 <_ZN7ADS713814writeRegister8Ehh>
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_ZN7ADS713812configureOsrE12ADS7138__OSR>:

void ADS7138::configureOsr(ADS7138__OSR osr) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
    _currentOsr = osr;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	78fa      	ldrb	r2, [r7, #3]
 8000d6c:	731a      	strb	r2, [r3, #12]
    writeRegister8(OSR_CFG_ADDRESS, osr & OSR_MASK);
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	2103      	movs	r1, #3
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ff81 	bl	8000c82 <_ZN7ADS713814writeRegister8Ehh>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_ZN7ADS713813selectChannelE20ADS7138__MANUAL_CHID>:

void ADS7138::selectChannel(ADS7138__MANUAL_CHID channel) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
    _currentChannel = channel;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	78fa      	ldrb	r2, [r7, #3]
 8000d98:	735a      	strb	r2, [r3, #13]
    writeRegister8(MANUAL_CH_SEL_ADDRESS, channel & MANUAL_CHID_MASK);
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	f003 030f 	and.w	r3, r3, #15
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	2111      	movs	r1, #17
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ff6b 	bl	8000c82 <_ZN7ADS713814writeRegister8Ehh>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_ZN7ADS71384readEv>:

uint16_t ADS7138::read() {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	6078      	str	r0, [r7, #4]
    uint8_t buf[2] = {0};
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	81bb      	strh	r3, [r7, #12]
    HAL_I2C_Master_Receive(_i2cHandle, _deviceAddress, buf, 2, HAL_MAX_DELAY);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	791b      	ldrb	r3, [r3, #4]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f107 020c 	add.w	r2, r7, #12
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f003 fb63 	bl	80044a0 <HAL_I2C_Master_Receive>

    uint16_t value = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	81fb      	strh	r3, [r7, #14]
    if (_currentOsr != OSR_1) {
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7b1b      	ldrb	r3, [r3, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00a      	beq.n	8000dfc <_ZN7ADS71384readEv+0x48>
        value = (buf[0] << 4) | (buf[1] >> 4);
 8000de6:	7b3b      	ldrb	r3, [r7, #12]
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	7b7b      	ldrb	r3, [r7, #13]
 8000dee:	091b      	lsrs	r3, r3, #4
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	4313      	orrs	r3, r2
 8000df6:	b21b      	sxth	r3, r3
 8000df8:	81fb      	strh	r3, [r7, #14]
 8000dfa:	e007      	b.n	8000e0c <_ZN7ADS71384readEv+0x58>
    } else {
        value = (buf[0] << 8) | buf[1];
 8000dfc:	7b3b      	ldrb	r3, [r7, #12]
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	b21a      	sxth	r2, r3
 8000e02:	7b7b      	ldrb	r3, [r7, #13]
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	81fb      	strh	r3, [r7, #14]
    }
    return value;
 8000e0c:	89fb      	ldrh	r3, [r7, #14]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <_ZN7ADS713811readVoltageEv>:
        selectChannel(channel);
    }
    return read();
}

uint32_t ADS7138::readVoltage() {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    uint16_t raw = read();
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ffc7 	bl	8000db4 <_ZN7ADS71384readEv>
 8000e26:	4603      	mov	r3, r0
 8000e28:	81fb      	strh	r3, [r7, #14]
    return (static_cast<uint32_t>(raw) * _referenceVoltage) / 4095;
 8000e2a:	89fb      	ldrh	r3, [r7, #14]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	6892      	ldr	r2, [r2, #8]
 8000e30:	fb03 f202 	mul.w	r2, r3, r2
 8000e34:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <_ZN7ADS713811readVoltageEv+0x34>)
 8000e36:	fba3 1302 	umull	r1, r3, r3, r2
 8000e3a:	1ad2      	subs	r2, r2, r3
 8000e3c:	0852      	lsrs	r2, r2, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	0adb      	lsrs	r3, r3, #11
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	00100101 	.word	0x00100101

08000e50 <_ZN7ADS713818readChannelVoltageE20ADS7138__MANUAL_CHID>:

uint32_t ADS7138::readChannelVoltage(ADS7138__MANUAL_CHID channel) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
    if (channel != _currentChannel) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7b5b      	ldrb	r3, [r3, #13]
 8000e60:	78fa      	ldrb	r2, [r7, #3]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d004      	beq.n	8000e70 <_ZN7ADS713818readChannelVoltageE20ADS7138__MANUAL_CHID+0x20>
        selectChannel(channel);
 8000e66:	78fb      	ldrb	r3, [r7, #3]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff8c 	bl	8000d88 <_ZN7ADS713813selectChannelE20ADS7138__MANUAL_CHID>
    }
    return readVoltage();
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ffd1 	bl	8000e18 <_ZN7ADS713811readVoltageEv>
 8000e76:	4603      	mov	r3, r0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_ZN7BQ7695215CELL_NO_TO_ADDREh>:
    int16_t GetHighCellVoltage();
    int16_t GetLowCellVoltage();
    int16_t GetPackCurrent();
    bool GetConfigUpdateStatus();

    constexpr uint8_t CELL_NO_TO_ADDR(uint8_t cell_no) { return BQ769X2_CMD_VOLTAGE_CELL_1 + ((cell_no-1)*2); }
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	3309      	adds	r3, #9
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_ZN7BQ76952C1Ev>:
#include <stdbool.h>

#ifndef BQ76952_
#define BQ76952_

BQ76952::BQ76952(){
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3308      	adds	r3, #8
 8000eae:	2220      	movs	r2, #32
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00f fa7d 	bl	80103b2 <memset>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	865a      	strh	r2, [r3, #50]	@ 0x32
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3334      	adds	r3, #52	@ 0x34
 8000ee0:	2224      	movs	r2, #36	@ 0x24
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f00f fa64 	bl	80103b2 <memset>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	659a      	str	r2, [r3, #88]	@ 0x58
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	661a      	str	r2, [r3, #96]	@ 0x60
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	665a      	str	r2, [r3, #100]	@ 0x64
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f

}
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_ZN7BQ769524InitEP19__I2C_HandleTypeDefh>:

HAL_StatusTypeDef BQ76952::Init(I2C_HandleTypeDef *hi2c, uint8_t i2cAddress){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	71fb      	strb	r3, [r7, #7]
    hi2c_ = hi2c;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	605a      	str	r2, [r3, #4]
    i2cAddressWrite = i2cAddress;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	701a      	strb	r2, [r3, #0]
    i2cAddressRead = i2cAddress+1;
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	3301      	adds	r3, #1
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	705a      	strb	r2, [r3, #1]

    Reset();
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f000 f81d 	bl	8000fb8 <_ZN7BQ769525ResetEv>
    volatile uint32_t delay = 100000;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <_ZN7BQ769524InitEP19__I2C_HandleTypeDefh+0x60>)
 8000f80:	617b      	str	r3, [r7, #20]
    while(delay--);
 8000f82:	bf00      	nop
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	617a      	str	r2, [r7, #20]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	bf14      	ite	ne
 8000f8e:	2301      	movne	r3, #1
 8000f90:	2300      	moveq	r3, #0
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f5      	bne.n	8000f84 <_ZN7BQ769524InitEP19__I2C_HandleTypeDefh+0x30>

    // DatamemWriteU1(BQ769X2_SET_PROT_ENABLED_A, 12);

    return HAL_I2C_IsDeviceReady(hi2c_, i2cAddressWrite, 100, 50);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6858      	ldr	r0, [r3, #4]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2332      	movs	r3, #50	@ 0x32
 8000fa4:	2264      	movs	r2, #100	@ 0x64
 8000fa6:	f003 fb71 	bl	800468c <HAL_I2C_IsDeviceReady>
 8000faa:	4603      	mov	r3, r0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	000186a0 	.word	0x000186a0

08000fb8 <_ZN7BQ769525ResetEv>:

HAL_StatusTypeDef BQ76952::Init(I2C_HandleTypeDef *hi2c){
	return Init(hi2c, BQ_I2C_ADDR_WRITE);
}

HAL_StatusTypeDef BQ76952::Reset() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    return SubcmdCmdOnly(BQ769X2_SUBCMD_RESET);
 8000fc0:	2112      	movs	r1, #18
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f9f2 	bl	80013ac <_ZN7BQ7695213SubcmdCmdOnlyEt>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_ZN7BQ7695212ReadVoltagesEv>:

HAL_StatusTypeDef BQ76952::ConfigureVoltageRegs() {
    return HAL_OK;
}

HAL_StatusTypeDef BQ76952::ReadVoltages() {
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	75fb      	strb	r3, [r7, #23]

    int16_t voltage_sum = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	82bb      	strh	r3, [r7, #20]
    low_cell_voltage_ = INT16_MAX;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000fe8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    high_cell_voltage_ = INT16_MIN;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    for (int i = 0; i < 16; i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	e0a1      	b.n	800113c <_ZN7BQ7695212ReadVoltagesEv+0x16a>

    	if((i == 0) || (i == 1) || (i == 15)){
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d005      	beq.n	800100a <_ZN7BQ7695212ReadVoltagesEv+0x38>
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d002      	beq.n	800100a <_ZN7BQ7695212ReadVoltagesEv+0x38>
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	2b0f      	cmp	r3, #15
 8001008:	d14c      	bne.n	80010a4 <_ZN7BQ7695212ReadVoltagesEv+0xd2>
    		for (int retry = 0; retry < 3; retry++) {
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e02b      	b.n	8001068 <_ZN7BQ7695212ReadVoltagesEv+0x96>
				status = DirectReadI2(CELL_NO_TO_ADDR(i+1), &cell_voltages_[i]);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3301      	adds	r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff30 	bl	8000e80 <_ZN7BQ7695215CELL_NO_TO_ADDREh>
 8001020:	4603      	mov	r3, r0
 8001022:	4619      	mov	r1, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	3304      	adds	r3, #4
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	461a      	mov	r2, r3
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f91c 	bl	800126e <_ZN7BQ7695212DirectReadI2EhPs>
 8001036:	4603      	mov	r3, r0
 8001038:	75fb      	strb	r3, [r7, #23]
				if (status == HAL_OK && cell_voltages_[i] < 5000 && cell_voltages_[i] > 1000) break;  // 1V to 5V is reasonable
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d110      	bne.n	8001062 <_ZN7BQ7695212ReadVoltagesEv+0x90>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	3204      	adds	r2, #4
 8001046:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800104a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800104e:	4293      	cmp	r3, r2
 8001050:	dc07      	bgt.n	8001062 <_ZN7BQ7695212ReadVoltagesEv+0x90>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	3204      	adds	r2, #4
 8001058:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800105c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001060:	dc06      	bgt.n	8001070 <_ZN7BQ7695212ReadVoltagesEv+0x9e>
    		for (int retry = 0; retry < 3; retry++) {
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b02      	cmp	r3, #2
 800106c:	ddd0      	ble.n	8001010 <_ZN7BQ7695212ReadVoltagesEv+0x3e>
 800106e:	e000      	b.n	8001072 <_ZN7BQ7695212ReadVoltagesEv+0xa0>
				if (status == HAL_OK && cell_voltages_[i] < 5000 && cell_voltages_[i] > 1000) break;  // 1V to 5V is reasonable
 8001070:	bf00      	nop
    		}
    		if(cell_voltages_[i] > 5000 || cell_voltages_[i] < 1000){
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	3204      	adds	r2, #4
 8001078:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800107c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001080:	4293      	cmp	r3, r2
 8001082:	dc07      	bgt.n	8001094 <_ZN7BQ7695212ReadVoltagesEv+0xc2>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	3204      	adds	r2, #4
 800108a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800108e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001092:	da1d      	bge.n	80010d0 <_ZN7BQ7695212ReadVoltagesEv+0xfe>
    			cell_voltages_[i] = 3600;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	3204      	adds	r2, #4
 800109a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800109e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    		}
    	}else{
 80010a2:	e015      	b.n	80010d0 <_ZN7BQ7695212ReadVoltagesEv+0xfe>
    		status = DirectReadI2(CELL_NO_TO_ADDR(i+1), &cell_voltages_[i]);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	3301      	adds	r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4619      	mov	r1, r3
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fee6 	bl	8000e80 <_ZN7BQ7695215CELL_NO_TO_ADDREh>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4619      	mov	r1, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	3304      	adds	r3, #4
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	461a      	mov	r2, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f8d2 	bl	800126e <_ZN7BQ7695212DirectReadI2EhPs>
 80010ca:	4603      	mov	r3, r0
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	e000      	b.n	80010d2 <_ZN7BQ7695212ReadVoltagesEv+0x100>
    	}else{
 80010d0:	bf00      	nop
    	}
        if (status != HAL_OK) { return status; }
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <_ZN7BQ7695212ReadVoltagesEv+0x10a>
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	e06f      	b.n	80011bc <_ZN7BQ7695212ReadVoltagesEv+0x1ea>

        if (cell_voltages_[i] > high_cell_voltage_) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	3204      	adds	r2, #4
 80010e2:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dd07      	ble.n	8001100 <_ZN7BQ7695212ReadVoltagesEv+0x12e>
            high_cell_voltage_ = cell_voltages_[i];
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	3204      	adds	r2, #4
 80010f6:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80010fe:	e010      	b.n	8001122 <_ZN7BQ7695212ReadVoltagesEv+0x150>
        }
        else if (cell_voltages_[i] < low_cell_voltage_) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	3204      	adds	r2, #4
 8001106:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001110:	429a      	cmp	r2, r3
 8001112:	da06      	bge.n	8001122 <_ZN7BQ7695212ReadVoltagesEv+0x150>
            low_cell_voltage_ = cell_voltages_[i];
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	3204      	adds	r2, #4
 800111a:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	859a      	strh	r2, [r3, #44]	@ 0x2c
        }

        voltage_sum += cell_voltages_[i];
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	3204      	adds	r2, #4
 8001128:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800112c:	b29a      	uxth	r2, r3
 800112e:	8abb      	ldrh	r3, [r7, #20]
 8001130:	4413      	add	r3, r2
 8001132:	b29b      	uxth	r3, r3
 8001134:	82bb      	strh	r3, [r7, #20]
    for (int i = 0; i < 16; i++) {
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	3301      	adds	r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	f77f af5a 	ble.w	8000ff8 <_ZN7BQ7695212ReadVoltagesEv+0x26>
    }

    avg_cell_voltage_ = voltage_sum / 16;
 8001144:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001148:	2b00      	cmp	r3, #0
 800114a:	da00      	bge.n	800114e <_ZN7BQ7695212ReadVoltagesEv+0x17c>
 800114c:	330f      	adds	r3, #15
 800114e:	111b      	asrs	r3, r3, #4
 8001150:	b21a      	sxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	851a      	strh	r2, [r3, #40]	@ 0x28

    int16_t pack_voltage_temp; // this number will be in userV, by default 1 userV = 10 mV
    status = DirectReadI2(BQ769X2_CMD_VOLTAGE_PACK, &pack_voltage_temp);
 8001156:	f107 030a 	add.w	r3, r7, #10
 800115a:	461a      	mov	r2, r3
 800115c:	2136      	movs	r1, #54	@ 0x36
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f885 	bl	800126e <_ZN7BQ7695212DirectReadI2EhPs>
 8001164:	4603      	mov	r3, r0
 8001166:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) { return status; }
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <_ZN7BQ7695212ReadVoltagesEv+0x1a0>
 800116e:	7dfb      	ldrb	r3, [r7, #23]
 8001170:	e024      	b.n	80011bc <_ZN7BQ7695212ReadVoltagesEv+0x1ea>
    pack_voltage_ = pack_voltage_temp*10; // pack_voltage_ is in mV
 8001172:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001176:	b29b      	uxth	r3, r3
 8001178:	461a      	mov	r2, r3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4413      	add	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	b29b      	uxth	r3, r3
 8001182:	b21a      	sxth	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	861a      	strh	r2, [r3, #48]	@ 0x30


    int16_t stack_voltage_temp; // this number will be in userV, by default 1 userV = 10 mV
    status = DirectReadI2(BQ769X2_CMD_VOLTAGE_STACK, &stack_voltage_temp);
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	461a      	mov	r2, r3
 800118e:	2134      	movs	r1, #52	@ 0x34
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f86c 	bl	800126e <_ZN7BQ7695212DirectReadI2EhPs>
 8001196:	4603      	mov	r3, r0
 8001198:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) { return status; }
 800119a:	7dfb      	ldrb	r3, [r7, #23]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <_ZN7BQ7695212ReadVoltagesEv+0x1d2>
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	e00b      	b.n	80011bc <_ZN7BQ7695212ReadVoltagesEv+0x1ea>
    stack_voltage_ = stack_voltage_temp*10; //stack_voltage_ is in mV
 80011a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	865a      	strh	r2, [r3, #50]	@ 0x32

    return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_ZN7BQ7695210WriteBytesEhPKhj>:

bool BQ76952::GetConfigUpdateStatus(){
    return current_mode_ == BQ_MODE_CONFIGUPDATE;
}

HAL_StatusTypeDef BQ76952::WriteBytes(const uint8_t reg_addr, const uint8_t *data, const size_t num_bytes) {
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b089      	sub	sp, #36	@ 0x24
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	460b      	mov	r3, r1
 80011d2:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[5];

    if (num_bytes > 4){
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d901      	bls.n	80011de <_ZN7BQ7695210WriteBytesEhPKhj+0x1a>
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e01c      	b.n	8001218 <_ZN7BQ7695210WriteBytesEhPKhj+0x54>
    }

    buf[0] = reg_addr;
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	743b      	strb	r3, [r7, #16]
    memcpy(buf + 1, data, num_bytes);
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	3301      	adds	r3, #1
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f00f f9b6 	bl	801055e <memcpy>

    return HAL_I2C_Master_Transmit(hi2c_, i2cAddressWrite, buf, num_bytes + 1, 1000);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6858      	ldr	r0, [r3, #4]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461c      	mov	r4, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	3301      	adds	r3, #1
 8001202:	b29b      	uxth	r3, r3
 8001204:	f107 0210 	add.w	r2, r7, #16
 8001208:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800120c:	9100      	str	r1, [sp, #0]
 800120e:	4621      	mov	r1, r4
 8001210:	f003 f82e 	bl	8004270 <HAL_I2C_Master_Transmit>
 8001214:	4603      	mov	r3, r0
 8001216:	bf00      	nop
}
 8001218:	4618      	mov	r0, r3
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}

08001220 <_ZN7BQ769529ReadBytesEhPhj>:

HAL_StatusTypeDef BQ76952::ReadBytes(uint8_t reg_addr, uint8_t *data, const size_t num_bytes) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af02      	add	r7, sp, #8
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	460b      	mov	r3, r1
 800122e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(hi2c_, i2cAddressRead, &reg_addr, 1, 1000);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6858      	ldr	r0, [r3, #4]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	4619      	mov	r1, r3
 800123a:	f107 020b 	add.w	r2, r7, #11
 800123e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	f003 f813 	bl	8004270 <HAL_I2C_Master_Transmit>
    
    return HAL_I2C_Master_Receive(hi2c_, i2cAddressRead, data, num_bytes, 1000);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6858      	ldr	r0, [r3, #4]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	4619      	mov	r1, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b29b      	uxth	r3, r3
 8001258:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800125c:	9200      	str	r2, [sp, #0]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	f003 f91e 	bl	80044a0 <HAL_I2C_Master_Receive>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_ZN7BQ7695212DirectReadI2EhPs>:
    *value = (buf[1] << 8) | buf[0];

    return HAL_OK;
}

HAL_StatusTypeDef BQ76952::DirectReadI2(const uint8_t reg_addr, int16_t *value) {
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	460b      	mov	r3, r1
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[2];

    HAL_StatusTypeDef status = ReadBytes(reg_addr, buf, 2);
 800127c:	f107 0214 	add.w	r2, r7, #20
 8001280:	7af9      	ldrb	r1, [r7, #11]
 8001282:	2302      	movs	r3, #2
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f7ff ffcb 	bl	8001220 <_ZN7BQ769529ReadBytesEhPhj>
 800128a:	4603      	mov	r3, r0
 800128c:	75fb      	strb	r3, [r7, #23]

    if (status != HAL_OK) 
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <_ZN7BQ7695212DirectReadI2EhPs+0x2a>
        return status;
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	e009      	b.n	80012ac <_ZN7BQ7695212DirectReadI2EhPs+0x3e>

    *value = (int16_t)((buf[1] << 8) | buf[0]);
 8001298:	7d7b      	ldrb	r3, [r7, #21]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b21a      	sxth	r2, r3
 800129e:	7d3b      	ldrb	r3, [r7, #20]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_ZN7BQ7695211SubcmdWriteEtmj>:

    *value = f32;
    return HAL_OK;
}

HAL_StatusTypeDef BQ76952::SubcmdWrite(const uint16_t subcmd, const uint32_t value, const size_t num_bytes) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	460b      	mov	r3, r1
 80012c2:	817b      	strh	r3, [r7, #10]
    uint8_t buf_data[4];
    uint8_t buf_subcmd[2] = { (uint8_t)(subcmd & 0x00FF), (uint8_t)(subcmd >> 8) };
 80012c4:	897b      	ldrh	r3, [r7, #10]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	763b      	strb	r3, [r7, #24]
 80012ca:	897b      	ldrh	r3, [r7, #10]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	767b      	strb	r3, [r7, #25]
    uint8_t buf_len_and_check[2];

    HAL_StatusTypeDef status = WriteBytes(BQ769X2_CMD_SUBCMD_LOWER, buf_subcmd, 2);
 80012d4:	f107 0218 	add.w	r2, r7, #24
 80012d8:	2302      	movs	r3, #2
 80012da:	213e      	movs	r1, #62	@ 0x3e
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f7ff ff71 	bl	80011c4 <_ZN7BQ7695210WriteBytesEhPKhj>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if(status != HAL_OK)
 80012e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <_ZN7BQ7695211SubcmdWriteEtmj+0x42>
        return status;
 80012f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012f4:	e056      	b.n	80013a4 <_ZN7BQ7695211SubcmdWriteEtmj+0xf0>

    if (num_bytes > 4){
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d901      	bls.n	8001300 <_ZN7BQ7695211SubcmdWriteEtmj+0x4c>
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e051      	b.n	80013a4 <_ZN7BQ7695211SubcmdWriteEtmj+0xf0>
    }

    uint8_t checksum = (uint8_t)(buf_subcmd[0] + buf_subcmd[1]);
 8001300:	7e3a      	ldrb	r2, [r7, #24]
 8001302:	7e7b      	ldrb	r3, [r7, #25]
 8001304:	4413      	add	r3, r2
 8001306:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (num_bytes > 0){
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d029      	beq.n	8001364 <_ZN7BQ7695211SubcmdWriteEtmj+0xb0>
        for(int i = 0; i < (int)num_bytes; i++){
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
 8001314:	e018      	b.n	8001348 <_ZN7BQ7695211SubcmdWriteEtmj+0x94>
            buf_data[i] = (value >> (i * 8) & 0x000000FF);
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
 8001320:	b2d9      	uxtb	r1, r3
 8001322:	f107 021c 	add.w	r2, r7, #28
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	4413      	add	r3, r2
 800132a:	460a      	mov	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
            checksum = (uint8_t)(checksum + buf_data[i]);
 800132e:	f107 021c 	add.w	r2, r7, #28
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	4413      	add	r3, r2
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800133c:	4413      	add	r3, r2
 800133e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for(int i = 0; i < (int)num_bytes; i++){
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	3301      	adds	r3, #1
 8001346:	623b      	str	r3, [r7, #32]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	6a3a      	ldr	r2, [r7, #32]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbe2      	blt.n	8001316 <_ZN7BQ7695211SubcmdWriteEtmj+0x62>
        }
        status = WriteBytes(BQ769X2_SUBCMD_DATA_START, buf_data, num_bytes);
 8001350:	f107 021c 	add.w	r2, r7, #28
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2140      	movs	r1, #64	@ 0x40
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f7ff ff33 	bl	80011c4 <_ZN7BQ7695210WriteBytesEhPKhj>
 800135e:	4603      	mov	r3, r0
 8001360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    checksum = ~checksum;
 8001364:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001368:	43db      	mvns	r3, r3
 800136a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (status != HAL_OK)
 800136e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <_ZN7BQ7695211SubcmdWriteEtmj+0xc8>
    	return status;
 8001376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800137a:	e013      	b.n	80013a4 <_ZN7BQ7695211SubcmdWriteEtmj+0xf0>

    buf_len_and_check[1] = num_bytes + 4;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	3304      	adds	r3, #4
 8001382:	b2db      	uxtb	r3, r3
 8001384:	757b      	strb	r3, [r7, #21]
    buf_len_and_check[0] = checksum;
 8001386:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800138a:	753b      	strb	r3, [r7, #20]

    status = WriteBytes(BQ769X2_SUBCMD_DATA_CHECKSUM, buf_len_and_check, 2);
 800138c:	f107 0214 	add.w	r2, r7, #20
 8001390:	2302      	movs	r3, #2
 8001392:	2160      	movs	r1, #96	@ 0x60
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f7ff ff15 	bl	80011c4 <_ZN7BQ7695210WriteBytesEhPKhj>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    return status;
 80013a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3728      	adds	r7, #40	@ 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_ZN7BQ7695213SubcmdCmdOnlyEt>:

HAL_StatusTypeDef BQ76952::SubcmdCmdOnly(const uint16_t subcmd) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
    return SubcmdWrite(subcmd, 0, 0);
 80013b8:	8879      	ldrh	r1, [r7, #2]
 80013ba:	2300      	movs	r3, #0
 80013bc:	2200      	movs	r2, #0
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ff78 	bl	80012b4 <_ZN7BQ7695211SubcmdWriteEtmj>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_ZN7BQChipsC1EP7BQ76952S1_>:
#ifndef BQCHIPS_
#define BQCHIPS_

#include <BQChips.hpp>

BQChips::BQChips(BQ76952 *chip1, BQ76952 *chip2){
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4618      	mov	r0, r3
 80013de:	2340      	movs	r3, #64	@ 0x40
 80013e0:	461a      	mov	r2, r3
 80013e2:	2100      	movs	r1, #0
 80013e4:	f00e ffe5 	bl	80103b2 <memset>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	pChip1 = chip1;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	649a      	str	r2, [r3, #72]	@ 0x48
	pChip2 = chip2;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_ZN7BQChips12readVoltagesEv>:

// read functions
HAL_StatusTypeDef BQChips::readVoltages(){
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = pChip1 -> ReadVoltages();
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fdd1 	bl	8000fd2 <_ZN7BQ7695212ReadVoltagesEv>
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)	{return status;}
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <_ZN7BQChips12readVoltagesEv+0x20>
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	e082      	b.n	8001544 <_ZN7BQChips12readVoltagesEv+0x126>

	status = pChip2 -> ReadVoltages();
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fdc5 	bl	8000fd2 <_ZN7BQ7695212ReadVoltagesEv>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)	{return status;}
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <_ZN7BQChips12readVoltagesEv+0x38>
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	e076      	b.n	8001544 <_ZN7BQChips12readVoltagesEv+0x126>

	for (int i = 0; i < 16; i++){
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e00c      	b.n	8001476 <_ZN7BQChips12readVoltagesEv+0x58>
		cellVoltages[i] = pChip1 -> cell_voltages_[i];
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	3204      	adds	r2, #4
 8001464:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 16; i++){
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	ddef      	ble.n	800145c <_ZN7BQChips12readVoltagesEv+0x3e>
	}
	for (int j = 0; j < 16; j++){
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	e00d      	b.n	800149e <_ZN7BQChips12readVoltagesEv+0x80>
		cellVoltages[j+16] = pChip2 -> cell_voltages_[j];
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	3210      	adds	r2, #16
 800148a:	6939      	ldr	r1, [r7, #16]
 800148c:	3104      	adds	r1, #4
 800148e:	f933 1011 	ldrsh.w	r1, [r3, r1, lsl #1]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int j = 0; j < 16; j++){
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	3301      	adds	r3, #1
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	ddee      	ble.n	8001482 <_ZN7BQChips12readVoltagesEv+0x64>
	}

	totalVoltage = (pChip1 -> stack_voltage_) + (pChip2 -> stack_voltage_); // check that this shouldn't be pack_voltage
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4413      	add	r3, r2
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	b21a      	sxth	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	averageVoltage = ((pChip1 -> avg_cell_voltage_) + (pChip2 -> avg_cell_voltage_))/2;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80014cc:	461a      	mov	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80014d6:	4413      	add	r3, r2
 80014d8:	0fda      	lsrs	r2, r3, #31
 80014da:	4413      	add	r3, r2
 80014dc:	105b      	asrs	r3, r3, #1
 80014de:	b21a      	sxth	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	maxVoltage = pChip1 -> high_cell_voltage_;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ea:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	if (pChip2 -> high_cell_voltage_ > maxVoltage){
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f8:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001502:	429a      	cmp	r2, r3
 8001504:	dd06      	ble.n	8001514 <_ZN7BQChips12readVoltagesEv+0xf6>
		maxVoltage = pChip2 -> high_cell_voltage_;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150a:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	}

	minVoltage = pChip1 -> low_cell_voltage_;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001518:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		if (pChip2 -> low_cell_voltage_ < minVoltage){
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001530:	429a      	cmp	r2, r3
 8001532:	da06      	bge.n	8001542 <_ZN7BQChips12readVoltagesEv+0x124>
			minVoltage = pChip2 -> low_cell_voltage_;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		}

	return status;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_ZN7BQChips14getCellVoltageEi>:

//voltages
int16_t BQChips::getCellVoltage(int cellID){
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	return cellVoltages[cellID];
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_ZN7BQChips20getAll32CellVoltagesEPs>:

void BQChips::getAll32CellVoltages(int16_t arrData[]){
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 32; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e00b      	b.n	8001592 <_ZN7BQChips20getAll32CellVoltagesEPs+0x28>
		arrData[i] = cellVoltages[i];
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	4413      	add	r3, r2
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68f9      	ldr	r1, [r7, #12]
 8001586:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800158a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 32; i++){
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b1f      	cmp	r3, #31
 8001596:	ddf0      	ble.n	800157a <_ZN7BQChips20getAll32CellVoltagesEPs+0x10>
	}
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80015b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80015b4:	eef0 7ae7 	vabs.f32	s15, s15
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_ZN7BMSDataC1Ev>:
enum chargeState{
	discharging,
	charging
};

struct BMSData {
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80015d4:	2220      	movs	r2, #32
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f00e feea 	bl	80103b2 <memset>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80015fc:	2220      	movs	r2, #32
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f00e fed6 	bl	80103b2 <memset>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2153 	strb.w	r2, [r3, #339]	@ 0x153
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_Z13CPP_UserSetupv>:
    uint32_t temp_exclusions;      // 32 bits for temperature exclusions
} Exclusion_Data_t;



void CPP_UserSetup(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
    // Make sure that timer priorities are configured correctly
    HAL_Delay(10);
 800162e:	200a      	movs	r0, #10
 8001630:	f001 fcda 	bl	8002fe8 <HAL_Delay>

    debug = false;
 8001634:	4b51      	ldr	r3, [pc, #324]	@ (800177c <_Z13CPP_UserSetupv+0x154>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]

    //set contactor pins low
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	2101      	movs	r1, #1
 800163e:	4850      	ldr	r0, [pc, #320]	@ (8001780 <_Z13CPP_UserSetupv+0x158>)
 8001640:	f002 fd26 	bl	8004090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001644:	2201      	movs	r2, #1
 8001646:	2120      	movs	r1, #32
 8001648:	484e      	ldr	r0, [pc, #312]	@ (8001784 <_Z13CPP_UserSetupv+0x15c>)
 800164a:	f002 fd21 	bl	8004090 <HAL_GPIO_WritePin>
    //set power mux
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800164e:	2201      	movs	r2, #1
 8001650:	2180      	movs	r1, #128	@ 0x80
 8001652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001656:	f002 fd1b 	bl	8004090 <HAL_GPIO_WritePin>

    //toggle BQ reset
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	2140      	movs	r1, #64	@ 0x40
 800165e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001662:	f002 fd15 	bl	8004090 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001666:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800166a:	f001 fcbd 	bl	8002fe8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2140      	movs	r1, #64	@ 0x40
 8001672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001676:	f002 fd0b 	bl	8004090 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 800167a:	20c8      	movs	r0, #200	@ 0xc8
 800167c:	f001 fcb4 	bl	8002fe8 <HAL_Delay>

    //toggle BQ reset
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	2104      	movs	r1, #4
 8001684:	483f      	ldr	r0, [pc, #252]	@ (8001784 <_Z13CPP_UserSetupv+0x15c>)
 8001686:	f002 fd03 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800168a:	200a      	movs	r0, #10
 800168c:	f001 fcac 	bl	8002fe8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2104      	movs	r1, #4
 8001694:	483b      	ldr	r0, [pc, #236]	@ (8001784 <_Z13CPP_UserSetupv+0x15c>)
 8001696:	f002 fcfb 	bl	8004090 <HAL_GPIO_WritePin>

	//initalize BMS ICs
	HAL_StatusTypeDef status;
	status = bqChip2.Init(&hi2c4, bqChipI2CAddress);
 800169a:	2210      	movs	r2, #16
 800169c:	493a      	ldr	r1, [pc, #232]	@ (8001788 <_Z13CPP_UserSetupv+0x160>)
 800169e:	483b      	ldr	r0, [pc, #236]	@ (800178c <_Z13CPP_UserSetupv+0x164>)
 80016a0:	f7ff fc58 	bl	8000f54 <_ZN7BQ769524InitEP19__I2C_HandleTypeDefh>
 80016a4:	4603      	mov	r3, r0
 80016a6:	70fb      	strb	r3, [r7, #3]
	status = bqChip1.Init(&hi2c3, bqChipI2CAddress);
 80016a8:	2210      	movs	r2, #16
 80016aa:	4939      	ldr	r1, [pc, #228]	@ (8001790 <_Z13CPP_UserSetupv+0x168>)
 80016ac:	4839      	ldr	r0, [pc, #228]	@ (8001794 <_Z13CPP_UserSetupv+0x16c>)
 80016ae:	f7ff fc51 	bl	8000f54 <_ZN7BQ769524InitEP19__I2C_HandleTypeDefh>
 80016b2:	4603      	mov	r3, r0
 80016b4:	70fb      	strb	r3, [r7, #3]


	//initalize current ADC
	current_adc.begin(&hi2c2, 0x10); // Default address: 0x10
 80016b6:	2210      	movs	r2, #16
 80016b8:	4937      	ldr	r1, [pc, #220]	@ (8001798 <_Z13CPP_UserSetupv+0x170>)
 80016ba:	4838      	ldr	r0, [pc, #224]	@ (800179c <_Z13CPP_UserSetupv+0x174>)
 80016bc:	f7ff faaf 	bl	8000c1e <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh>
	// Configure operating mode (example: internal oscillator, manual mode)
	current_adc.configureOpMode(OSC_SEL_LOW_POWER, CONV_MODE_MANUAL, CONV_ON_ERR_CONTINUE);
 80016c0:	2300      	movs	r3, #0
 80016c2:	2200      	movs	r2, #0
 80016c4:	2110      	movs	r1, #16
 80016c6:	4835      	ldr	r0, [pc, #212]	@ (800179c <_Z13CPP_UserSetupv+0x174>)
 80016c8:	f7ff fb01 	bl	8000cce <_ZN7ADS713815configureOpModeE16ADS7138__OSC_SEL18ADS7138__CONV_MODE20ADS7138__CONV_ON_ERR>
	// Use manual channel selection
	current_adc.configureSequenceMode(SEQ_MODE_MANUAL, SEQ_START_END);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	4832      	ldr	r0, [pc, #200]	@ (800179c <_Z13CPP_UserSetupv+0x174>)
 80016d2:	f7ff fb27 	bl	8000d24 <_ZN7ADS713821configureSequenceModeE17ADS7138__SEQ_MODE18ADS7138__SEQ_START>
	// Set oversampling to 1 (no averaging)
	current_adc.configureOsr(OSR_1);
 80016d6:	2100      	movs	r1, #0
 80016d8:	4830      	ldr	r0, [pc, #192]	@ (800179c <_Z13CPP_UserSetupv+0x174>)
 80016da:	f7ff fb3f 	bl	8000d5c <_ZN7ADS713812configureOsrE12ADS7138__OSR>
	// Set reference voltage (e.g., 3300 mV if powered from 3.3 V)
	current_adc.setReferenceVoltage(3300);
 80016de:	f640 41e4 	movw	r1, #3300	@ 0xce4
 80016e2:	482e      	ldr	r0, [pc, #184]	@ (800179c <_Z13CPP_UserSetupv+0x174>)
 80016e4:	f7ff fabf 	bl	8000c66 <_ZN7ADS713819setReferenceVoltageEm>

    //temp sensor inits
    for (int i = 0; i < 4; i++) {
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	e031      	b.n	8001752 <_Z13CPP_UserSetupv+0x12a>
    	temp_adcs[i].begin(&hi2c2, 0x14+i);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	4a2b      	ldr	r2, [pc, #172]	@ (80017a0 <_Z13CPP_UserSetupv+0x178>)
 80016f4:	1898      	adds	r0, r3, r2
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	3314      	adds	r3, #20
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	4925      	ldr	r1, [pc, #148]	@ (8001798 <_Z13CPP_UserSetupv+0x170>)
 8001702:	f7ff fa8c 	bl	8000c1e <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh>
    	temp_adcs[i].configureOpMode(OSC_SEL_LOW_POWER, CONV_MODE_MANUAL, CONV_ON_ERR_CONTINUE);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	4a25      	ldr	r2, [pc, #148]	@ (80017a0 <_Z13CPP_UserSetupv+0x178>)
 800170c:	1898      	adds	r0, r3, r2
 800170e:	2300      	movs	r3, #0
 8001710:	2200      	movs	r2, #0
 8001712:	2110      	movs	r1, #16
 8001714:	f7ff fadb 	bl	8000cce <_ZN7ADS713815configureOpModeE16ADS7138__OSC_SEL18ADS7138__CONV_MODE20ADS7138__CONV_ON_ERR>
    	temp_adcs[i].configureSequenceMode(SEQ_MODE_MANUAL, SEQ_START_END);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	4a20      	ldr	r2, [pc, #128]	@ (80017a0 <_Z13CPP_UserSetupv+0x178>)
 800171e:	4413      	add	r3, r2
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fafd 	bl	8000d24 <_ZN7ADS713821configureSequenceModeE17ADS7138__SEQ_MODE18ADS7138__SEQ_START>
    	temp_adcs[i].configureOsr(OSR_1);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	4a1c      	ldr	r2, [pc, #112]	@ (80017a0 <_Z13CPP_UserSetupv+0x178>)
 8001730:	4413      	add	r3, r2
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fb11 	bl	8000d5c <_ZN7ADS713812configureOsrE12ADS7138__OSR>
    	temp_adcs[i].setReferenceVoltage(3300);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4a18      	ldr	r2, [pc, #96]	@ (80017a0 <_Z13CPP_UserSetupv+0x178>)
 8001740:	4413      	add	r3, r2
 8001742:	f640 41e4 	movw	r1, #3300	@ 0xce4
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fa8d 	bl	8000c66 <_ZN7ADS713819setReferenceVoltageEm>
    for (int i = 0; i < 4; i++) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3301      	adds	r3, #1
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b03      	cmp	r3, #3
 8001756:	ddca      	ble.n	80016ee <_Z13CPP_UserSetupv+0xc6>
    }

    HAL_TIM_Base_Start(&htim2);
 8001758:	4812      	ldr	r0, [pc, #72]	@ (80017a4 <_Z13CPP_UserSetupv+0x17c>)
 800175a:	f006 f94f 	bl	80079fc <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim3);
 800175e:	4812      	ldr	r0, [pc, #72]	@ (80017a8 <_Z13CPP_UserSetupv+0x180>)
 8001760:	f006 f94c 	bl	80079fc <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001764:	2100      	movs	r1, #0
 8001766:	480f      	ldr	r0, [pc, #60]	@ (80017a4 <_Z13CPP_UserSetupv+0x17c>)
 8001768:	f006 fa78 	bl	8007c5c <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800176c:	2100      	movs	r1, #0
 800176e:	480e      	ldr	r0, [pc, #56]	@ (80017a8 <_Z13CPP_UserSetupv+0x180>)
 8001770:	f006 fa74 	bl	8007c5c <HAL_TIM_PWM_Start>

}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000320 	.word	0x20000320
 8001780:	48000400 	.word	0x48000400
 8001784:	48000800 	.word	0x48000800
 8001788:	200007d0 	.word	0x200007d0
 800178c:	20000610 	.word	0x20000610
 8001790:	2000077c 	.word	0x2000077c
 8001794:	200005a0 	.word	0x200005a0
 8001798:	20000728 	.word	0x20000728
 800179c:	20000328 	.word	0x20000328
 80017a0:	20000338 	.word	0x20000338
 80017a4:	20000824 	.word	0x20000824
 80017a8:	20000870 	.word	0x20000870

080017ac <_Z16StartDefaultTaskPv>:


void StartDefaultTask(void *argument)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80017b4:	2102      	movs	r1, #2
 80017b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ba:	f002 fc81 	bl	80040c0 <HAL_GPIO_TogglePin>
    osDelay(500);
 80017be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017c2:	f00a fd63 	bl	800c28c <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80017c6:	bf00      	nop
 80017c8:	e7f4      	b.n	80017b4 <_Z16StartDefaultTaskPv+0x8>
	...

080017cc <_Z11StartTask02Pv>:
  /* USER CODE END 5 */
}

// CURRENT MONITORING TASK
void StartTask02(void *argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	float low;

	for (;;)
	{

		if(hi2c2.State == HAL_I2C_STATE_READY){
 80017d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001888 <_Z11StartTask02Pv+0xbc>)
 80017d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b20      	cmp	r3, #32
 80017de:	bf0c      	ite	eq
 80017e0:	2301      	moveq	r3, #1
 80017e2:	2300      	movne	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d043      	beq.n	8001872 <_Z11StartTask02Pv+0xa6>

			rawData = current_adc.readChannelVoltage((ADS7138__MANUAL_CHID)(MANUAL_CHID_AIN0));
 80017ea:	2100      	movs	r1, #0
 80017ec:	4827      	ldr	r0, [pc, #156]	@ (800188c <_Z11StartTask02Pv+0xc0>)
 80017ee:	f7ff fb2f 	bl	8000e50 <_ZN7ADS713818readChannelVoltageE20ADS7138__MANUAL_CHID>
 80017f2:	60b8      	str	r0, [r7, #8]
			low  = ADCToCurrentL(rawData);
 80017f4:	68b8      	ldr	r0, [r7, #8]
 80017f6:	f000 fb3b 	bl	8001e70 <_Z13ADCToCurrentLm>
 80017fa:	ed87 0a03 	vstr	s0, [r7, #12]

			if(abs(low) == low){
 80017fe:	ed97 0a03 	vldr	s0, [r7, #12]
 8001802:	f7ff fed0 	bl	80015a6 <_ZSt3absf>
 8001806:	eeb0 7a40 	vmov.f32	s14, s0
 800180a:	edd7 7a03 	vldr	s15, [r7, #12]
 800180e:	eef4 7a47 	vcmp.f32	s15, s14
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	bf0c      	ite	eq
 8001818:	2301      	moveq	r3, #1
 800181a:	2300      	movne	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00f      	beq.n	8001842 <_Z11StartTask02Pv+0x76>
				currentDirrection = discharging;
 8001822:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <_Z11StartTask02Pv+0xc4>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
				if(low > 26){
 8001828:	edd7 7a03 	vldr	s15, [r7, #12]
 800182c:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8001830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	dd1b      	ble.n	8001872 <_Z11StartTask02Pv+0xa6>
					faultCondition = overCurrentCharge;
 800183a:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <_Z11StartTask02Pv+0xc8>)
 800183c:	2205      	movs	r2, #5
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e017      	b.n	8001872 <_Z11StartTask02Pv+0xa6>

				}
			}else{
				currentDirrection = charging;
 8001842:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <_Z11StartTask02Pv+0xc4>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
				if(abs(low) > 60){
 8001848:	ed97 0a03 	vldr	s0, [r7, #12]
 800184c:	f7ff feab 	bl	80015a6 <_ZSt3absf>
 8001850:	eef0 7a40 	vmov.f32	s15, s0
 8001854:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001898 <_Z11StartTask02Pv+0xcc>
 8001858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	bfcc      	ite	gt
 8001862:	2301      	movgt	r3, #1
 8001864:	2300      	movle	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <_Z11StartTask02Pv+0xa6>
					faultCondition = overCurrentDischarge;
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <_Z11StartTask02Pv+0xc8>)
 800186e:	2206      	movs	r2, #6
 8001870:	701a      	strb	r2, [r3, #0]

				}

			}
		}
		BMS.lowCurrent_A = low;
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <_Z11StartTask02Pv+0xd0>)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6213      	str	r3, [r2, #32]
		fb.value = low;
 8001878:	4a09      	ldr	r2, [pc, #36]	@ (80018a0 <_Z11StartTask02Pv+0xd4>)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6013      	str	r3, [r2, #0]


		osDelay(50);
 800187e:	2032      	movs	r0, #50	@ 0x32
 8001880:	f00a fd04 	bl	800c28c <osDelay>
		if(hi2c2.State == HAL_I2C_STATE_READY){
 8001884:	e7a6      	b.n	80017d4 <_Z11StartTask02Pv+0x8>
 8001886:	bf00      	nop
 8001888:	20000728 	.word	0x20000728
 800188c:	20000328 	.word	0x20000328
 8001890:	20000323 	.word	0x20000323
 8001894:	20000322 	.word	0x20000322
 8001898:	42700000 	.word	0x42700000
 800189c:	20000378 	.word	0x20000378
 80018a0:	200006d0 	.word	0x200006d0

080018a4 <_Z11StartTask03Pv>:
	}

}
// VOLTAGE MONITORING TASK
void StartTask03(void *argument)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b096      	sub	sp, #88	@ 0x58
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    int16_t cellVoltages[32] = {0};
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	2240      	movs	r2, #64	@ 0x40
 80018b2:	2100      	movs	r1, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f00e fd7c 	bl	80103b2 <memset>
    uint16_t highestCell = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint16_t lowestCell = 10000;
 80018c0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80018c4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    BMS.highVoltage_index = 0;
 80018c8:	4b4c      	ldr	r3, [pc, #304]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	731a      	strb	r2, [r3, #12]
    BMS.lowVoltage_index = 0;
 80018ce:	4b4b      	ldr	r3, [pc, #300]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	735a      	strb	r2, [r3, #13]
    uint32_t total = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	653b      	str	r3, [r7, #80]	@ 0x50
    uint8_t active_cell_count = 0;  // Count of non-excluded cells
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    for(;;)
    {
        total = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	653b      	str	r3, [r7, #80]	@ 0x50
        highestCell = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        lowestCell = 10000;
 80018e8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80018ec:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        active_cell_count = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        bqChips.readVoltages();
 80018f6:	4842      	ldr	r0, [pc, #264]	@ (8001a00 <_Z11StartTask03Pv+0x15c>)
 80018f8:	f7ff fd91 	bl	800141e <_ZN7BQChips12readVoltagesEv>
        bqChips.getAll32CellVoltages(cellVoltages);
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	4619      	mov	r1, r3
 8001902:	483f      	ldr	r0, [pc, #252]	@ (8001a00 <_Z11StartTask03Pv+0x15c>)
 8001904:	f7ff fe31 	bl	800156a <_ZN7BQChips20getAll32CellVoltagesEPs>

        for(int i = 0; i < 29; i++) {
 8001908:	2300      	movs	r3, #0
 800190a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800190c:	e043      	b.n	8001996 <_Z11StartTask03Pv+0xf2>
            // Skip if cell is excluded from voltage monitoring


            BMS.cellVoltages[i] = bqChips.getCellVoltage(i);
 800190e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001910:	483b      	ldr	r0, [pc, #236]	@ (8001a00 <_Z11StartTask03Pv+0x15c>)
 8001912:	f7ff fe1b 	bl	800154c <_ZN7BQChips14getCellVoltageEi>
 8001916:	4603      	mov	r3, r0
 8001918:	b299      	uxth	r1, r3
 800191a:	4a38      	ldr	r2, [pc, #224]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 800191c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800191e:	3314      	adds	r3, #20
 8001920:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

            if(BMS.cellVoltages[i] > highestCell) {
 8001924:	4a35      	ldr	r2, [pc, #212]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 8001926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001928:	3314      	adds	r3, #20
 800192a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800192e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8001932:	429a      	cmp	r2, r3
 8001934:	d20a      	bcs.n	800194c <_Z11StartTask03Pv+0xa8>
                highestCell = BMS.cellVoltages[i];
 8001936:	4a31      	ldr	r2, [pc, #196]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 8001938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800193a:	3314      	adds	r3, #20
 800193c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001940:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                BMS.highVoltage_index = i;
 8001944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b2c      	ldr	r3, [pc, #176]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 800194a:	731a      	strb	r2, [r3, #12]
            }
            if(BMS.cellVoltages[i] < lowestCell) {
 800194c:	4a2b      	ldr	r2, [pc, #172]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 800194e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001950:	3314      	adds	r3, #20
 8001952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001956:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800195a:	429a      	cmp	r2, r3
 800195c:	d90a      	bls.n	8001974 <_Z11StartTask03Pv+0xd0>
                lowestCell = BMS.cellVoltages[i];
 800195e:	4a27      	ldr	r2, [pc, #156]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 8001960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001962:	3314      	adds	r3, #20
 8001964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001968:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
                BMS.lowVoltage_index = i;
 800196c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 8001972:	735a      	strb	r2, [r3, #13]
            }
            total += BMS.cellVoltages[i];
 8001974:	4a21      	ldr	r2, [pc, #132]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 8001976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001978:	3314      	adds	r3, #20
 800197a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800197e:	461a      	mov	r2, r3
 8001980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001982:	4413      	add	r3, r2
 8001984:	653b      	str	r3, [r7, #80]	@ 0x50
            active_cell_count++;
 8001986:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800198a:	3301      	adds	r3, #1
 800198c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        for(int i = 0; i < 29; i++) {
 8001990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001992:	3301      	adds	r3, #1
 8001994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001998:	2b1c      	cmp	r3, #28
 800199a:	ddb8      	ble.n	800190e <_Z11StartTask03Pv+0x6a>
        }

        // Only calculate average if we have active cells
        if(active_cell_count > 0) {
 800199c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d027      	beq.n	80019f4 <_Z11StartTask03Pv+0x150>
            BMS.totalVoltage_mV = total;
 80019a4:	4a15      	ldr	r2, [pc, #84]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 80019a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019a8:	6093      	str	r3, [r2, #8]
            BMS.avgVoltage_mV = (uint16_t)(total/active_cell_count);
 80019aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80019ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 80019b8:	809a      	strh	r2, [r3, #4]
            BMS.lowVoltage_mV = lowestCell;
 80019ba:	4a10      	ldr	r2, [pc, #64]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 80019bc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80019c0:	8053      	strh	r3, [r2, #2]
            BMS.highVoltage_mV = highestCell;
 80019c2:	4a0e      	ldr	r2, [pc, #56]	@ (80019fc <_Z11StartTask03Pv+0x158>)
 80019c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80019c8:	8013      	strh	r3, [r2, #0]

            numBytes.value = total;
 80019ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001a04 <_Z11StartTask03Pv+0x160>)
 80019cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019ce:	6013      	str	r3, [r2, #0]

            // Only check voltage limits for non-excluded cells
            if(lowestCell < 2500) {
 80019d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80019d4:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80019d8:	4293      	cmp	r3, r2
 80019da:	d802      	bhi.n	80019e2 <_Z11StartTask03Pv+0x13e>
                faultCondition = lowCellVoltage;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <_Z11StartTask03Pv+0x164>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
            }
            if(highestCell > 4200) {
 80019e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80019e6:	f241 0268 	movw	r2, #4200	@ 0x1068
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d902      	bls.n	80019f4 <_Z11StartTask03Pv+0x150>
                faultCondition = highCellVoltage;
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <_Z11StartTask03Pv+0x164>)
 80019f0:	2202      	movs	r2, #2
 80019f2:	701a      	strb	r2, [r3, #0]
            }
        }

        osDelay(100);
 80019f4:	2064      	movs	r0, #100	@ 0x64
 80019f6:	f00a fc49 	bl	800c28c <osDelay>
    }
 80019fa:	e770      	b.n	80018de <_Z11StartTask03Pv+0x3a>
 80019fc:	20000378 	.word	0x20000378
 8001a00:	20000680 	.word	0x20000680
 8001a04:	200006d4 	.word	0x200006d4
 8001a08:	20000322 	.word	0x20000322

08001a0c <_Z11StartTask04Pv>:
}
// TEMPERATURE MONITORING TASK
void StartTask04(void *argument)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b0a9      	sub	sp, #164	@ 0xa4
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
    uint32_t rawData[32];
    float highestCell = 0.0;
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float lowestCell = 1000.0;
 8001a1c:	4b83      	ldr	r3, [pc, #524]	@ (8001c2c <_Z11StartTask04Pv+0x220>)
 8001a1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    BMS.highTemp_index = 0;
 8001a22:	4b83      	ldr	r3, [pc, #524]	@ (8001c30 <_Z11StartTask04Pv+0x224>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	839a      	strh	r2, [r3, #28]
    BMS.lowTemp_index = 0;
 8001a28:	4b81      	ldr	r3, [pc, #516]	@ (8001c30 <_Z11StartTask04Pv+0x224>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	83da      	strh	r2, [r3, #30]
    float total = 0;
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t active_temp_count = 0;  // Count of non-excluded temperature sensors
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

    for(;;)
    {
        total = 0;
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        highestCell = 0.0;
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        lowestCell = 1000.0;
 8001a4c:	4b77      	ldr	r3, [pc, #476]	@ (8001c2c <_Z11StartTask04Pv+0x220>)
 8001a4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        active_temp_count = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

        for (int i = 0; i < 4; i++) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001a5e:	e0a2      	b.n	8001ba6 <_Z11StartTask04Pv+0x19a>
            for (uint8_t ch = 0; ch < 8; ch++) {
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 8001a66:	e094      	b.n	8001b92 <_Z11StartTask04Pv+0x186>
                uint8_t sensor_index = i*8 + ch;
 8001a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001a76:	4413      	add	r3, r2
 8001a78:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a




                if(hi2c2.State == HAL_I2C_STATE_READY) {
 8001a7c:	4b6d      	ldr	r3, [pc, #436]	@ (8001c34 <_Z11StartTask04Pv+0x228>)
 8001a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	bf0c      	ite	eq
 8001a88:	2301      	moveq	r3, #1
 8001a8a:	2300      	movne	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d07a      	beq.n	8001b88 <_Z11StartTask04Pv+0x17c>
                    rawData[sensor_index] = temp_adcs[i].readChannelVoltage((ADS7138__MANUAL_CHID)(MANUAL_CHID_AIN0 + ch));
 8001a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	4a67      	ldr	r2, [pc, #412]	@ (8001c38 <_Z11StartTask04Pv+0x22c>)
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f897 408a 	ldrb.w	r4, [r7, #138]	@ 0x8a
 8001aa0:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f9d2 	bl	8000e50 <_ZN7ADS713818readChannelVoltageE20ADS7138__MANUAL_CHID>
 8001aac:	4602      	mov	r2, r0
 8001aae:	00a3      	lsls	r3, r4, #2
 8001ab0:	33a0      	adds	r3, #160	@ 0xa0
 8001ab2:	443b      	add	r3, r7
 8001ab4:	f843 2c98 	str.w	r2, [r3, #-152]
                    BMS.allTempatues[sensor_index] = ADCToTemp(rawData[sensor_index]);
 8001ab8:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	33a0      	adds	r3, #160	@ 0xa0
 8001ac0:	443b      	add	r3, r7
 8001ac2:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8001ac6:	f897 408a 	ldrb.w	r4, [r7, #138]	@ 0x8a
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f9ec 	bl	8001ea8 <_Z9ADCToTempm>
 8001ad0:	eef0 7a40 	vmov.f32	s15, s0
 8001ad4:	4a56      	ldr	r2, [pc, #344]	@ (8001c30 <_Z11StartTask04Pv+0x224>)
 8001ad6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	3304      	adds	r3, #4
 8001ae0:	edc3 7a00 	vstr	s15, [r3]

                    if(BMS.allTempatues[sensor_index] > highestCell) {
 8001ae4:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001ae8:	4a51      	ldr	r2, [pc, #324]	@ (8001c30 <_Z11StartTask04Pv+0x224>)
 8001aea:	3328      	adds	r3, #40	@ 0x28
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	3304      	adds	r3, #4
 8001af2:	edd3 7a00 	vldr	s15, [r3]
 8001af6:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8001afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b02:	d50e      	bpl.n	8001b22 <_Z11StartTask04Pv+0x116>
                        highestCell = BMS.allTempatues[sensor_index];
 8001b04:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001b08:	4a49      	ldr	r2, [pc, #292]	@ (8001c30 <_Z11StartTask04Pv+0x224>)
 8001b0a:	3328      	adds	r3, #40	@ 0x28
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3304      	adds	r3, #4
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                        BMS.highTemp_index = sensor_index;
 8001b18:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b44      	ldr	r3, [pc, #272]	@ (8001c30 <_Z11StartTask04Pv+0x224>)
 8001b20:	839a      	strh	r2, [r3, #28]
                    }
                    if(BMS.allTempatues[sensor_index] < lowestCell) {
 8001b22:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001b26:	4a42      	ldr	r2, [pc, #264]	@ (8001c30 <_Z11StartTask04Pv+0x224>)
 8001b28:	3328      	adds	r3, #40	@ 0x28
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3304      	adds	r3, #4
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001b38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b40:	dd0e      	ble.n	8001b60 <_Z11StartTask04Pv+0x154>
                        lowestCell = BMS.allTempatues[sensor_index];
 8001b42:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001b46:	4a3a      	ldr	r2, [pc, #232]	@ (8001c30 <_Z11StartTask04Pv+0x224>)
 8001b48:	3328      	adds	r3, #40	@ 0x28
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3304      	adds	r3, #4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                        BMS.lowTemp_index = sensor_index;
 8001b56:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	4b34      	ldr	r3, [pc, #208]	@ (8001c30 <_Z11StartTask04Pv+0x224>)
 8001b5e:	83da      	strh	r2, [r3, #30]
                    }
                    total += BMS.allTempatues[sensor_index];
 8001b60:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001b64:	4a32      	ldr	r2, [pc, #200]	@ (8001c30 <_Z11StartTask04Pv+0x224>)
 8001b66:	3328      	adds	r3, #40	@ 0x28
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
                    active_temp_count++;
 8001b7e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001b82:	3301      	adds	r3, #1
 8001b84:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            for (uint8_t ch = 0; ch < 8; ch++) {
 8001b88:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 8001b92:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001b96:	2b07      	cmp	r3, #7
 8001b98:	f67f af66 	bls.w	8001a68 <_Z11StartTask04Pv+0x5c>
        for (int i = 0; i < 4; i++) {
 8001b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	f77f af58 	ble.w	8001a60 <_Z11StartTask04Pv+0x54>
                }
            }
        }

        // Only calculate average if we have active temperature sensors
        if(active_temp_count > 0) {
 8001bb0:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d034      	beq.n	8001c22 <_Z11StartTask04Pv+0x216>
            BMS.avgTemp = total/active_temp_count;
 8001bb8:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001bbc:	ee07 3a90 	vmov	s15, r3
 8001bc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc4:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 8001bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bcc:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <_Z11StartTask04Pv+0x224>)
 8001bce:	edc3 7a06 	vstr	s15, [r3, #24]
            BMS.lowTemp = lowestCell;
 8001bd2:	4a17      	ldr	r2, [pc, #92]	@ (8001c30 <_Z11StartTask04Pv+0x224>)
 8001bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bd8:	6153      	str	r3, [r2, #20]
            BMS.highTemp = highestCell;
 8001bda:	4a15      	ldr	r2, [pc, #84]	@ (8001c30 <_Z11StartTask04Pv+0x224>)
 8001bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001be0:	6113      	str	r3, [r2, #16]

            // Only check temperature limits for non-excluded sensors
            if(currentDirrection == charging) {
 8001be2:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <_Z11StartTask04Pv+0x230>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10b      	bne.n	8001c02 <_Z11StartTask04Pv+0x1f6>
                if(highestCell > 45) {
 8001bea:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001bee:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001c40 <_Z11StartTask04Pv+0x234>
 8001bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	dd02      	ble.n	8001c02 <_Z11StartTask04Pv+0x1f6>
                    faultCondition = overTempCharge;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <_Z11StartTask04Pv+0x238>)
 8001bfe:	2203      	movs	r2, #3
 8001c00:	701a      	strb	r2, [r3, #0]
                }
            }
            if(currentDirrection == discharging) {
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <_Z11StartTask04Pv+0x230>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10b      	bne.n	8001c22 <_Z11StartTask04Pv+0x216>
                if(highestCell > 60) {
 8001c0a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001c0e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001c48 <_Z11StartTask04Pv+0x23c>
 8001c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	dd02      	ble.n	8001c22 <_Z11StartTask04Pv+0x216>
                    faultCondition = overTempDischarge;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <_Z11StartTask04Pv+0x238>)
 8001c1e:	2204      	movs	r2, #4
 8001c20:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        osDelay(1000);
 8001c22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c26:	f00a fb31 	bl	800c28c <osDelay>
    }
 8001c2a:	e707      	b.n	8001a3c <_Z11StartTask04Pv+0x30>
 8001c2c:	447a0000 	.word	0x447a0000
 8001c30:	20000378 	.word	0x20000378
 8001c34:	20000728 	.word	0x20000728
 8001c38:	20000338 	.word	0x20000338
 8001c3c:	20000323 	.word	0x20000323
 8001c40:	42340000 	.word	0x42340000
 8001c44:	20000322 	.word	0x20000322
 8001c48:	42700000 	.word	0x42700000

08001c4c <_Z11StartTask05Pv>:
}

void StartTask05(void *argument)
{
 8001c4c:	b5b0      	push	{r4, r5, r7, lr}
 8001c4e:	b090      	sub	sp, #64	@ 0x40
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
// CAN DATA TRANSMISSION TASK

  CAN_TxHeaderTypeDef TxHeader;
  uint8_t TxData[8] = { 0 };
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
  uint32_t TxMailbox = { 0 };
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  int HAL_CAN_BUSY = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t messages_sent = 0;
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  for(;;)
  {



	  TxData[0] = fb.bytes[0];
 8001c70:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <_Z11StartTask05Pv+0xa0>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	733b      	strb	r3, [r7, #12]
	  TxData[1] = fb.bytes[1];
 8001c76:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <_Z11StartTask05Pv+0xa0>)
 8001c78:	785b      	ldrb	r3, [r3, #1]
 8001c7a:	737b      	strb	r3, [r7, #13]
	  TxData[2] = fb.bytes[2];
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <_Z11StartTask05Pv+0xa0>)
 8001c7e:	789b      	ldrb	r3, [r3, #2]
 8001c80:	73bb      	strb	r3, [r7, #14]
	  TxData[3] = fb.bytes[3];
 8001c82:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <_Z11StartTask05Pv+0xa0>)
 8001c84:	78db      	ldrb	r3, [r3, #3]
 8001c86:	73fb      	strb	r3, [r7, #15]

	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001c88:	bf00      	nop
 8001c8a:	4819      	ldr	r0, [pc, #100]	@ (8001cf0 <_Z11StartTask05Pv+0xa4>)
 8001c8c:	f001 fbdf 	bl	800344e <HAL_CAN_GetTxMailboxesFreeLevel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bf0c      	ite	eq
 8001c96:	2301      	moveq	r3, #1
 8001c98:	2300      	movne	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f4      	bne.n	8001c8a <_Z11StartTask05Pv+0x3e>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001ca0:	f107 0308 	add.w	r3, r7, #8
 8001ca4:	f107 020c 	add.w	r2, r7, #12
 8001ca8:	f107 0114 	add.w	r1, r7, #20
 8001cac:	4810      	ldr	r0, [pc, #64]	@ (8001cf0 <_Z11StartTask05Pv+0xa4>)
 8001cae:	f001 fafe 	bl	80032ae <HAL_CAN_AddTxMessage>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  messages_sent++;
 8001cb8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cbc:	1c54      	adds	r4, r2, #1
 8001cbe:	f143 0500 	adc.w	r5, r3, #0
 8001cc2:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	  if (status == HAL_ERROR)
 8001cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d102      	bne.n	8001cd4 <_Z11StartTask05Pv+0x88>
	  {
		  Error_Handler();
 8001cce:	f000 fd49 	bl	8002764 <Error_Handler>
 8001cd2:	e006      	b.n	8001ce2 <_Z11StartTask05Pv+0x96>
	  }
	  else if (status == HAL_BUSY)
 8001cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d102      	bne.n	8001ce2 <_Z11StartTask05Pv+0x96>
	  {
	  HAL_CAN_BUSY++;
 8001cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cde:	3301      	adds	r3, #1
 8001ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  }

	  //send_bms_data(BMS.cellVoltages, BMS.allTempatues, BMS.lowCurrent_A);


    osDelay(100);
 8001ce2:	2064      	movs	r0, #100	@ 0x64
 8001ce4:	f00a fad2 	bl	800c28c <osDelay>
  }
 8001ce8:	e7c2      	b.n	8001c70 <_Z11StartTask05Pv+0x24>
 8001cea:	bf00      	nop
 8001cec:	200006d0 	.word	0x200006d0
 8001cf0:	200006d8 	.word	0x200006d8

08001cf4 <_Z11StartTask06Pv>:

  /* USER CODE END StartTask05 */
}

void StartTask06(void *argument)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  //control contactors
	  if((debug == true || faultCondition == noFault) && shutdown == false){
 8001cfc:	4b30      	ldr	r3, [pc, #192]	@ (8001dc0 <_Z11StartTask06Pv+0xcc>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d003      	beq.n	8001d0c <_Z11StartTask06Pv+0x18>
 8001d04:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc4 <_Z11StartTask06Pv+0xd0>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d112      	bne.n	8001d32 <_Z11StartTask06Pv+0x3e>
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc8 <_Z11StartTask06Pv+0xd4>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10e      	bne.n	8001d32 <_Z11StartTask06Pv+0x3e>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2101      	movs	r1, #1
 8001d18:	482c      	ldr	r0, [pc, #176]	@ (8001dcc <_Z11StartTask06Pv+0xd8>)
 8001d1a:	f002 f9b9 	bl	8004090 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001d1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d22:	f001 f961 	bl	8002fe8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2120      	movs	r1, #32
 8001d2a:	4829      	ldr	r0, [pc, #164]	@ (8001dd0 <_Z11StartTask06Pv+0xdc>)
 8001d2c:	f002 f9b0 	bl	8004090 <HAL_GPIO_WritePin>
 8001d30:	e00d      	b.n	8001d4e <_Z11StartTask06Pv+0x5a>
	  }else{

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001d32:	2201      	movs	r2, #1
 8001d34:	2101      	movs	r1, #1
 8001d36:	4825      	ldr	r0, [pc, #148]	@ (8001dcc <_Z11StartTask06Pv+0xd8>)
 8001d38:	f002 f9aa 	bl	8004090 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001d3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d40:	f001 f952 	bl	8002fe8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001d44:	2201      	movs	r2, #1
 8001d46:	2120      	movs	r1, #32
 8001d48:	4821      	ldr	r0, [pc, #132]	@ (8001dd0 <_Z11StartTask06Pv+0xdc>)
 8001d4a:	f002 f9a1 	bl	8004090 <HAL_GPIO_WritePin>
	  }
	  fanSpeedPrecentage = 50;
 8001d4e:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <_Z11StartTask06Pv+0xe0>)
 8001d50:	2232      	movs	r2, #50	@ 0x32
 8001d52:	701a      	strb	r2, [r3, #0]
	  //set fan speeds
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, fanSpeedPrecentage/2.5);
 8001d54:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd4 <_Z11StartTask06Pv+0xe0>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fbf3 	bl	8000544 <__aeabi_i2d>
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <_Z11StartTask06Pv+0xe4>)
 8001d64:	f7fe fd82 	bl	800086c <__aeabi_ddiv>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	491b      	ldr	r1, [pc, #108]	@ (8001ddc <_Z11StartTask06Pv+0xe8>)
 8001d6e:	680c      	ldr	r4, [r1, #0]
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f7fe ff28 	bl	8000bc8 <__aeabi_d2uiz>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	6363      	str	r3, [r4, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, fanSpeedPrecentage/2.5);
 8001d7c:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <_Z11StartTask06Pv+0xe0>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fbdf 	bl	8000544 <__aeabi_i2d>
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <_Z11StartTask06Pv+0xe4>)
 8001d8c:	f7fe fd6e 	bl	800086c <__aeabi_ddiv>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4912      	ldr	r1, [pc, #72]	@ (8001de0 <_Z11StartTask06Pv+0xec>)
 8001d96:	680c      	ldr	r4, [r1, #0]
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f7fe ff14 	bl	8000bc8 <__aeabi_d2uiz>
 8001da0:	4603      	mov	r3, r0
 8001da2:	6363      	str	r3, [r4, #52]	@ 0x34

	  send_bms_data(BMS.cellVoltages, BMS.allTempatues, BMS.lowCurrent_A);
 8001da4:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <_Z11StartTask06Pv+0xf0>)
 8001da6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001daa:	eeb0 0a67 	vmov.f32	s0, s15
 8001dae:	490e      	ldr	r1, [pc, #56]	@ (8001de8 <_Z11StartTask06Pv+0xf4>)
 8001db0:	480e      	ldr	r0, [pc, #56]	@ (8001dec <_Z11StartTask06Pv+0xf8>)
 8001db2:	f000 f895 	bl	8001ee0 <_Z13send_bms_dataPtPff>



      osDelay(100);
 8001db6:	2064      	movs	r0, #100	@ 0x64
 8001db8:	f00a fa68 	bl	800c28c <osDelay>
	  if((debug == true || faultCondition == noFault) && shutdown == false){
 8001dbc:	e79e      	b.n	8001cfc <_Z11StartTask06Pv+0x8>
 8001dbe:	bf00      	nop
 8001dc0:	20000320 	.word	0x20000320
 8001dc4:	20000322 	.word	0x20000322
 8001dc8:	20000321 	.word	0x20000321
 8001dcc:	48000400 	.word	0x48000400
 8001dd0:	48000800 	.word	0x48000800
 8001dd4:	20000324 	.word	0x20000324
 8001dd8:	40040000 	.word	0x40040000
 8001ddc:	20000824 	.word	0x20000824
 8001de0:	20000870 	.word	0x20000870
 8001de4:	20000378 	.word	0x20000378
 8001de8:	2000041c 	.word	0x2000041c
 8001dec:	200003a0 	.word	0x200003a0

08001df0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END StartTask06 */
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001df8:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8001e64 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f001 fb5a 	bl	80034b8 <HAL_CAN_GetRxMessage>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf14      	ite	ne
 8001e0a:	2301      	movne	r3, #1
 8001e0c:	2300      	moveq	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
  {
    Error_Handler();
 8001e14:	f000 fca6 	bl	8002764 <Error_Handler>
  }

  if (RxHeader.StdId == 0x7FF){
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d118      	bne.n	8001e56 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
	  if(RxData[0] == 1){
 8001e24:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d114      	bne.n	8001e56 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
		  //byte 1
		  //ignition switch
		  if((RxData[1] & 0x80) != 0x00){
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001e2e:	785b      	ldrb	r3, [r3, #1]
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	da02      	bge.n	8001e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			  shutdown = true;
 8001e36:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x08) != 0x00){
 8001e3c:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001e3e:	785b      	ldrb	r3, [r3, #1]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
			  debug = true;
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
		  }


	  }
  }
}
 8001e4e:	e002      	b.n	8001e56 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
			  debug = false;
 8001e50:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000318 	.word	0x20000318
 8001e64:	200002fc 	.word	0x200002fc
 8001e68:	20000321 	.word	0x20000321
 8001e6c:	20000320 	.word	0x20000320

08001e70 <_Z13ADCToCurrentLm>:

float ADCToCurrentL(uint32_t adc_val) {
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

    // Constant offset for linear estimator
    static constexpr float b = -62.87;

    // Convert ADC value to current
    return (float)adc_val * m + b;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e82:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001ea0 <_Z13ADCToCurrentLm+0x30>
 8001e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001ea4 <_Z13ADCToCurrentLm+0x34>
 8001e8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8001e92:	eeb0 0a67 	vmov.f32	s0, s15
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	3af84018 	.word	0x3af84018
 8001ea4:	427b7ae1 	.word	0x427b7ae1

08001ea8 <_Z9ADCToTempm>:
	float x = ((float)adc_val) * (3.3/4096.0);

	return (thermCoeffA * x*x) + (thermCoeffB * x) + thermCoeffC;
}

float ADCToTemp(uint32_t adc_val) {
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

    // Constant offset for linear estimator
    static constexpr float b = 19000.0 / 1180;

    // Convert ADC value to temperature
    return (float)adc_val * m + b;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eba:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001ed8 <_Z9ADCToTempm+0x30>
 8001ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001edc <_Z9ADCToTempm+0x34>
 8001ec6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	3a5e27eb 	.word	0x3a5e27eb
 8001edc:	4180d045 	.word	0x4180d045

08001ee0 <_Z13send_bms_dataPtPff>:

	data[0] = faultCondition;

}

void send_bms_data(uint16_t* cell_voltages, float* temperatures, float current) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	ed87 0a01 	vstr	s0, [r7, #4]


    // Copy data into structure
    for(int i = 0; i < 32; i++) {
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e016      	b.n	8001f22 <_Z13send_bms_dataPtPff+0x42>
        data.voltages[i] = cell_voltages[i];
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	8819      	ldrh	r1, [r3, #0]
 8001efe:	4a10      	ldr	r2, [pc, #64]	@ (8001f40 <_Z13send_bms_dataPtPff+0x60>)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        data.temperatures[i] = temperatures[i];
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	490b      	ldr	r1, [pc, #44]	@ (8001f40 <_Z13send_bms_dataPtPff+0x60>)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3310      	adds	r3, #16
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 32; i++) {
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b1f      	cmp	r3, #31
 8001f26:	dde5      	ble.n	8001ef4 <_Z13send_bms_dataPtPff+0x14>
    }
    data.current = current;
 8001f28:	4a05      	ldr	r2, [pc, #20]	@ (8001f40 <_Z13send_bms_dataPtPff+0x60>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

    // Send the entire structure as raw data
    CDC_Transmit_FS((uint8_t*)&data, sizeof(BMS_Data_t));
 8001f30:	21c4      	movs	r1, #196	@ 0xc4
 8001f32:	4803      	ldr	r0, [pc, #12]	@ (8001f40 <_Z13send_bms_dataPtPff+0x60>)
 8001f34:	f00c ff52 	bl	800eddc <CDC_Transmit_FS>
}
 8001f38:	bf00      	nop
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200004dc 	.word	0x200004dc

08001f44 <_Z41__static_initialization_and_destruction_0ii>:
 8001f44:	b5b0      	push	{r4, r5, r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d120      	bne.n	8001f96 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d11b      	bne.n	8001f96 <_Z41__static_initialization_and_destruction_0ii+0x52>
ADS7138 current_adc;
 8001f5e:	4810      	ldr	r0, [pc, #64]	@ (8001fa0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001f60:	f7fe fe52 	bl	8000c08 <_ZN7ADS7138C1Ev>
ADS7138 temp_adcs[4];
 8001f64:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001f66:	2403      	movs	r4, #3
 8001f68:	461d      	mov	r5, r3
 8001f6a:	e004      	b.n	8001f76 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	f7fe fe4b 	bl	8000c08 <_ZN7ADS7138C1Ev>
 8001f72:	3c01      	subs	r4, #1
 8001f74:	3510      	adds	r5, #16
 8001f76:	2c00      	cmp	r4, #0
 8001f78:	daf8      	bge.n	8001f6c <_Z41__static_initialization_and_destruction_0ii+0x28>
BMSData BMS;
 8001f7a:	480b      	ldr	r0, [pc, #44]	@ (8001fa8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001f7c:	f7ff fb23 	bl	80015c6 <_ZN7BMSDataC1Ev>
BQ76952 bqChip1 = BQ76952(); // 16 cells = i2c4
 8001f80:	480a      	ldr	r0, [pc, #40]	@ (8001fac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001f82:	f7fe ff8e 	bl	8000ea2 <_ZN7BQ76952C1Ev>
BQ76952 bqChip2 = BQ76952(); // 13 cells = i2c3
 8001f86:	480a      	ldr	r0, [pc, #40]	@ (8001fb0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001f88:	f7fe ff8b 	bl	8000ea2 <_ZN7BQ76952C1Ev>
BQChips bqChips = BQChips(&bqChip1, &bqChip2);
 8001f8c:	4a08      	ldr	r2, [pc, #32]	@ (8001fb0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001f8e:	4907      	ldr	r1, [pc, #28]	@ (8001fac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001f90:	4808      	ldr	r0, [pc, #32]	@ (8001fb4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001f92:	f7ff fa1c 	bl	80013ce <_ZN7BQChipsC1EP7BQ76952S1_>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000328 	.word	0x20000328
 8001fa4:	20000338 	.word	0x20000338
 8001fa8:	20000378 	.word	0x20000378
 8001fac:	200005a0 	.word	0x200005a0
 8001fb0:	20000610 	.word	0x20000610
 8001fb4:	20000680 	.word	0x20000680

08001fb8 <_GLOBAL__sub_I_RxHeader>:
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f7ff ffbf 	bl	8001f44 <_Z41__static_initialization_and_destruction_0ii>
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fcc:	f000 ffd3 	bl	8002f76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd0:	f000 f882 	bl	80020d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd4:	f000 fb06 	bl	80025e4 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8001fd8:	f000 f8d6 	bl	8002188 <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 8001fdc:	f000 f90e 	bl	80021fc <_ZL12MX_CAN2_Initv>
  MX_I2C2_Init();
 8001fe0:	f000 f946 	bl	8002270 <_ZL12MX_I2C2_Initv>
  MX_I2C3_Init();
 8001fe4:	f000 f992 	bl	800230c <_ZL12MX_I2C3_Initv>
  MX_I2C4_Init();
 8001fe8:	f000 f9de 	bl	80023a8 <_ZL12MX_I2C4_Initv>
  MX_TIM2_Init();
 8001fec:	f000 fa2a 	bl	8002444 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001ff0:	f000 fa90 	bl	8002514 <_ZL12MX_TIM3_Initv>


  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8001ff4:	f00c fe20 	bl	800ec38 <MX_USB_DEVICE_Init>

  HAL_CAN_Start(&hcan1);
 8001ff8:	4824      	ldr	r0, [pc, #144]	@ (800208c <main+0xc4>)
 8001ffa:	f001 f914 	bl	8003226 <HAL_CAN_Start>



  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001ffe:	2102      	movs	r1, #2
 8002000:	4822      	ldr	r0, [pc, #136]	@ (800208c <main+0xc4>)
 8002002:	f001 fb7b 	bl	80036fc <HAL_CAN_ActivateNotification>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <main+0x52>
  {
	  Error_Handler();
 8002016:	f000 fba5 	bl	8002764 <Error_Handler>
  }

  CPP_UserSetup();
 800201a:	f7ff fb05 	bl	8001628 <_Z13CPP_UserSetupv>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800201e:	f00a f859 	bl	800c0d4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002022:	4a1b      	ldr	r2, [pc, #108]	@ (8002090 <main+0xc8>)
 8002024:	2100      	movs	r1, #0
 8002026:	481b      	ldr	r0, [pc, #108]	@ (8002094 <main+0xcc>)
 8002028:	f00a f89e 	bl	800c168 <osThreadNew>
 800202c:	4603      	mov	r3, r0
 800202e:	4a1a      	ldr	r2, [pc, #104]	@ (8002098 <main+0xd0>)
 8002030:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(StartTask02, NULL, &Voltage_Monitor_attributes);
 8002032:	4a1a      	ldr	r2, [pc, #104]	@ (800209c <main+0xd4>)
 8002034:	2100      	movs	r1, #0
 8002036:	481a      	ldr	r0, [pc, #104]	@ (80020a0 <main+0xd8>)
 8002038:	f00a f896 	bl	800c168 <osThreadNew>
 800203c:	4603      	mov	r3, r0
 800203e:	4a19      	ldr	r2, [pc, #100]	@ (80020a4 <main+0xdc>)
 8002040:	6013      	str	r3, [r2, #0]

  /* creation of Temp_Monitoring */
  Temp_MonitoringHandle = osThreadNew(StartTask03, NULL, &Temp_Monitoring_attributes);
 8002042:	4a19      	ldr	r2, [pc, #100]	@ (80020a8 <main+0xe0>)
 8002044:	2100      	movs	r1, #0
 8002046:	4819      	ldr	r0, [pc, #100]	@ (80020ac <main+0xe4>)
 8002048:	f00a f88e 	bl	800c168 <osThreadNew>
 800204c:	4603      	mov	r3, r0
 800204e:	4a18      	ldr	r2, [pc, #96]	@ (80020b0 <main+0xe8>)
 8002050:	6013      	str	r3, [r2, #0]

  /* creation of Current_Monitor */
  Current_MonitorHandle = osThreadNew(StartTask04, NULL, &Current_Monitor_attributes);
 8002052:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <main+0xec>)
 8002054:	2100      	movs	r1, #0
 8002056:	4818      	ldr	r0, [pc, #96]	@ (80020b8 <main+0xf0>)
 8002058:	f00a f886 	bl	800c168 <osThreadNew>
 800205c:	4603      	mov	r3, r0
 800205e:	4a17      	ldr	r2, [pc, #92]	@ (80020bc <main+0xf4>)
 8002060:	6013      	str	r3, [r2, #0]

  /* creation of Battery_Data_Tr */
  Battery_Data_TrHandle = osThreadNew(StartTask05, NULL, &Battery_Data_Tr_attributes);
 8002062:	4a17      	ldr	r2, [pc, #92]	@ (80020c0 <main+0xf8>)
 8002064:	2100      	movs	r1, #0
 8002066:	4817      	ldr	r0, [pc, #92]	@ (80020c4 <main+0xfc>)
 8002068:	f00a f87e 	bl	800c168 <osThreadNew>
 800206c:	4603      	mov	r3, r0
 800206e:	4a16      	ldr	r2, [pc, #88]	@ (80020c8 <main+0x100>)
 8002070:	6013      	str	r3, [r2, #0]

  /* creation of Update_Fan_Spee */
  Update_Fan_SpeeHandle = osThreadNew(StartTask06, NULL, &Update_Fan_Spee_attributes);
 8002072:	4a16      	ldr	r2, [pc, #88]	@ (80020cc <main+0x104>)
 8002074:	2100      	movs	r1, #0
 8002076:	4816      	ldr	r0, [pc, #88]	@ (80020d0 <main+0x108>)
 8002078:	f00a f876 	bl	800c168 <osThreadNew>
 800207c:	4603      	mov	r3, r0
 800207e:	4a15      	ldr	r2, [pc, #84]	@ (80020d4 <main+0x10c>)
 8002080:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002082:	f00a f84b 	bl	800c11c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002086:	bf00      	nop
 8002088:	e7fd      	b.n	8002086 <main+0xbe>
 800208a:	bf00      	nop
 800208c:	200006d8 	.word	0x200006d8
 8002090:	0801237c 	.word	0x0801237c
 8002094:	080017ad 	.word	0x080017ad
 8002098:	200008bc 	.word	0x200008bc
 800209c:	080123a0 	.word	0x080123a0
 80020a0:	080017cd 	.word	0x080017cd
 80020a4:	200008c0 	.word	0x200008c0
 80020a8:	080123c4 	.word	0x080123c4
 80020ac:	080018a5 	.word	0x080018a5
 80020b0:	200008c4 	.word	0x200008c4
 80020b4:	080123e8 	.word	0x080123e8
 80020b8:	08001a0d 	.word	0x08001a0d
 80020bc:	200008c8 	.word	0x200008c8
 80020c0:	0801240c 	.word	0x0801240c
 80020c4:	08001c4d 	.word	0x08001c4d
 80020c8:	200008cc 	.word	0x200008cc
 80020cc:	08012430 	.word	0x08012430
 80020d0:	08001cf5 	.word	0x08001cf5
 80020d4:	200008d0 	.word	0x200008d0

080020d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b096      	sub	sp, #88	@ 0x58
 80020dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	2244      	movs	r2, #68	@ 0x44
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f00e f963 	bl	80103b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ec:	463b      	mov	r3, r7
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
 80020f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020fe:	f004 f893 	bl	8006228 <HAL_PWREx_ControlVoltageScaling>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf14      	ite	ne
 8002108:	2301      	movne	r3, #1
 800210a:	2300      	moveq	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002112:	f000 fb27 	bl	8002764 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8002116:	2322      	movs	r3, #34	@ 0x22
 8002118:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800211a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800211e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002120:	2301      	movs	r3, #1
 8002122:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002124:	2340      	movs	r3, #64	@ 0x40
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002128:	2300      	movs	r3, #0
 800212a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4618      	mov	r0, r3
 8002132:	f004 f8df 	bl	80062f4 <HAL_RCC_OscConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf14      	ite	ne
 800213c:	2301      	movne	r3, #1
 800213e:	2300      	moveq	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <_Z18SystemClock_Configv+0x72>
  {
    Error_Handler();
 8002146:	f000 fb0d 	bl	8002764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800214a:	230f      	movs	r3, #15
 800214c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800214e:	2301      	movs	r3, #1
 8002150:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002156:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800215a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800215c:	2300      	movs	r3, #0
 800215e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002160:	463b      	mov	r3, r7
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f004 fcdf 	bl	8006b28 <HAL_RCC_ClockConfig>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800217a:	f000 faf3 	bl	8002764 <Error_Handler>
  }
}
 800217e:	bf00      	nop
 8002180:	3758      	adds	r7, #88	@ 0x58
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800218c:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <_ZL12MX_CAN1_Initv+0x6c>)
 800218e:	4a1a      	ldr	r2, [pc, #104]	@ (80021f8 <_ZL12MX_CAN1_Initv+0x70>)
 8002190:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8002192:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <_ZL12MX_CAN1_Initv+0x6c>)
 8002194:	2201      	movs	r2, #1
 8002196:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002198:	4b16      	ldr	r3, [pc, #88]	@ (80021f4 <_ZL12MX_CAN1_Initv+0x6c>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800219e:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <_ZL12MX_CAN1_Initv+0x6c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80021a4:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <_ZL12MX_CAN1_Initv+0x6c>)
 80021a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80021aa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80021ac:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <_ZL12MX_CAN1_Initv+0x6c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80021b2:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <_ZL12MX_CAN1_Initv+0x6c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80021b8:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <_ZL12MX_CAN1_Initv+0x6c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <_ZL12MX_CAN1_Initv+0x6c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <_ZL12MX_CAN1_Initv+0x6c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <_ZL12MX_CAN1_Initv+0x6c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80021d0:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <_ZL12MX_CAN1_Initv+0x6c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80021d6:	4807      	ldr	r0, [pc, #28]	@ (80021f4 <_ZL12MX_CAN1_Initv+0x6c>)
 80021d8:	f000 ff2a 	bl	8003030 <HAL_CAN_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 80021ec:	f000 faba 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	200006d8 	.word	0x200006d8
 80021f8:	40006400 	.word	0x40006400

080021fc <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002200:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <_ZL12MX_CAN2_Initv+0x6c>)
 8002202:	4a1a      	ldr	r2, [pc, #104]	@ (800226c <_ZL12MX_CAN2_Initv+0x70>)
 8002204:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 1;
 8002206:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <_ZL12MX_CAN2_Initv+0x6c>)
 8002208:	2201      	movs	r2, #1
 800220a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800220c:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <_ZL12MX_CAN2_Initv+0x6c>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <_ZL12MX_CAN2_Initv+0x6c>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002218:	4b13      	ldr	r3, [pc, #76]	@ (8002268 <_ZL12MX_CAN2_Initv+0x6c>)
 800221a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800221e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002220:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <_ZL12MX_CAN2_Initv+0x6c>)
 8002222:	2200      	movs	r2, #0
 8002224:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002226:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <_ZL12MX_CAN2_Initv+0x6c>)
 8002228:	2200      	movs	r2, #0
 800222a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800222c:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <_ZL12MX_CAN2_Initv+0x6c>)
 800222e:	2200      	movs	r2, #0
 8002230:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002232:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <_ZL12MX_CAN2_Initv+0x6c>)
 8002234:	2200      	movs	r2, #0
 8002236:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002238:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <_ZL12MX_CAN2_Initv+0x6c>)
 800223a:	2200      	movs	r2, #0
 800223c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800223e:	4b0a      	ldr	r3, [pc, #40]	@ (8002268 <_ZL12MX_CAN2_Initv+0x6c>)
 8002240:	2200      	movs	r2, #0
 8002242:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002244:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <_ZL12MX_CAN2_Initv+0x6c>)
 8002246:	2200      	movs	r2, #0
 8002248:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800224a:	4807      	ldr	r0, [pc, #28]	@ (8002268 <_ZL12MX_CAN2_Initv+0x6c>)
 800224c:	f000 fef0 	bl	8003030 <HAL_CAN_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf14      	ite	ne
 8002256:	2301      	movne	r3, #1
 8002258:	2300      	moveq	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 8002260:	f000 fa80 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000700 	.word	0x20000700
 800226c:	40006800 	.word	0x40006800

08002270 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002274:	4b22      	ldr	r3, [pc, #136]	@ (8002300 <_ZL12MX_I2C2_Initv+0x90>)
 8002276:	4a23      	ldr	r2, [pc, #140]	@ (8002304 <_ZL12MX_I2C2_Initv+0x94>)
 8002278:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 800227a:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <_ZL12MX_I2C2_Initv+0x90>)
 800227c:	4a22      	ldr	r2, [pc, #136]	@ (8002308 <_ZL12MX_I2C2_Initv+0x98>)
 800227e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002280:	4b1f      	ldr	r3, [pc, #124]	@ (8002300 <_ZL12MX_I2C2_Initv+0x90>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002286:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <_ZL12MX_I2C2_Initv+0x90>)
 8002288:	2201      	movs	r2, #1
 800228a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800228c:	4b1c      	ldr	r3, [pc, #112]	@ (8002300 <_ZL12MX_I2C2_Initv+0x90>)
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002292:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <_ZL12MX_I2C2_Initv+0x90>)
 8002294:	2200      	movs	r2, #0
 8002296:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <_ZL12MX_I2C2_Initv+0x90>)
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800229e:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <_ZL12MX_I2C2_Initv+0x90>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022a4:	4b16      	ldr	r3, [pc, #88]	@ (8002300 <_ZL12MX_I2C2_Initv+0x90>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022aa:	4815      	ldr	r0, [pc, #84]	@ (8002300 <_ZL12MX_I2C2_Initv+0x90>)
 80022ac:	f001 ff45 	bl	800413a <HAL_I2C_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bf14      	ite	ne
 80022b6:	2301      	movne	r3, #1
 80022b8:	2300      	moveq	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 80022c0:	f000 fa50 	bl	8002764 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022c4:	2100      	movs	r1, #0
 80022c6:	480e      	ldr	r0, [pc, #56]	@ (8002300 <_ZL12MX_I2C2_Initv+0x90>)
 80022c8:	f002 fd72 	bl	8004db0 <HAL_I2CEx_ConfigAnalogFilter>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf14      	ite	ne
 80022d2:	2301      	movne	r3, #1
 80022d4:	2300      	moveq	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 80022dc:	f000 fa42 	bl	8002764 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80022e0:	2100      	movs	r1, #0
 80022e2:	4807      	ldr	r0, [pc, #28]	@ (8002300 <_ZL12MX_I2C2_Initv+0x90>)
 80022e4:	f002 fdaf 	bl	8004e46 <HAL_I2CEx_ConfigDigitalFilter>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf14      	ite	ne
 80022ee:	2301      	movne	r3, #1
 80022f0:	2300      	moveq	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 80022f8:	f000 fa34 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000728 	.word	0x20000728
 8002304:	40005800 	.word	0x40005800
 8002308:	00100d14 	.word	0x00100d14

0800230c <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002310:	4b22      	ldr	r3, [pc, #136]	@ (800239c <_ZL12MX_I2C3_Initv+0x90>)
 8002312:	4a23      	ldr	r2, [pc, #140]	@ (80023a0 <_ZL12MX_I2C3_Initv+0x94>)
 8002314:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100D14;
 8002316:	4b21      	ldr	r3, [pc, #132]	@ (800239c <_ZL12MX_I2C3_Initv+0x90>)
 8002318:	4a22      	ldr	r2, [pc, #136]	@ (80023a4 <_ZL12MX_I2C3_Initv+0x98>)
 800231a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800231c:	4b1f      	ldr	r3, [pc, #124]	@ (800239c <_ZL12MX_I2C3_Initv+0x90>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002322:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <_ZL12MX_I2C3_Initv+0x90>)
 8002324:	2201      	movs	r2, #1
 8002326:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002328:	4b1c      	ldr	r3, [pc, #112]	@ (800239c <_ZL12MX_I2C3_Initv+0x90>)
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800232e:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <_ZL12MX_I2C3_Initv+0x90>)
 8002330:	2200      	movs	r2, #0
 8002332:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002334:	4b19      	ldr	r3, [pc, #100]	@ (800239c <_ZL12MX_I2C3_Initv+0x90>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800233a:	4b18      	ldr	r3, [pc, #96]	@ (800239c <_ZL12MX_I2C3_Initv+0x90>)
 800233c:	2200      	movs	r2, #0
 800233e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002340:	4b16      	ldr	r3, [pc, #88]	@ (800239c <_ZL12MX_I2C3_Initv+0x90>)
 8002342:	2200      	movs	r2, #0
 8002344:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002346:	4815      	ldr	r0, [pc, #84]	@ (800239c <_ZL12MX_I2C3_Initv+0x90>)
 8002348:	f001 fef7 	bl	800413a <HAL_I2C_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 800235c:	f000 fa02 	bl	8002764 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002360:	2100      	movs	r1, #0
 8002362:	480e      	ldr	r0, [pc, #56]	@ (800239c <_ZL12MX_I2C3_Initv+0x90>)
 8002364:	f002 fd24 	bl	8004db0 <HAL_I2CEx_ConfigAnalogFilter>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf14      	ite	ne
 800236e:	2301      	movne	r3, #1
 8002370:	2300      	moveq	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8002378:	f000 f9f4 	bl	8002764 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800237c:	2100      	movs	r1, #0
 800237e:	4807      	ldr	r0, [pc, #28]	@ (800239c <_ZL12MX_I2C3_Initv+0x90>)
 8002380:	f002 fd61 	bl	8004e46 <HAL_I2CEx_ConfigDigitalFilter>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf14      	ite	ne
 800238a:	2301      	movne	r3, #1
 800238c:	2300      	moveq	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8002394:	f000 f9e6 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	2000077c 	.word	0x2000077c
 80023a0:	40005c00 	.word	0x40005c00
 80023a4:	00100d14 	.word	0x00100d14

080023a8 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80023ac:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <_ZL12MX_I2C4_Initv+0x90>)
 80023ae:	4a23      	ldr	r2, [pc, #140]	@ (800243c <_ZL12MX_I2C4_Initv+0x94>)
 80023b0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 80023b2:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <_ZL12MX_I2C4_Initv+0x90>)
 80023b4:	4a22      	ldr	r2, [pc, #136]	@ (8002440 <_ZL12MX_I2C4_Initv+0x98>)
 80023b6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80023b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <_ZL12MX_I2C4_Initv+0x90>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023be:	4b1e      	ldr	r3, [pc, #120]	@ (8002438 <_ZL12MX_I2C4_Initv+0x90>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <_ZL12MX_I2C4_Initv+0x90>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80023ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <_ZL12MX_I2C4_Initv+0x90>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023d0:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <_ZL12MX_I2C4_Initv+0x90>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023d6:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <_ZL12MX_I2C4_Initv+0x90>)
 80023d8:	2200      	movs	r2, #0
 80023da:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023dc:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <_ZL12MX_I2C4_Initv+0x90>)
 80023de:	2200      	movs	r2, #0
 80023e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80023e2:	4815      	ldr	r0, [pc, #84]	@ (8002438 <_ZL12MX_I2C4_Initv+0x90>)
 80023e4:	f001 fea9 	bl	800413a <HAL_I2C_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf14      	ite	ne
 80023ee:	2301      	movne	r3, #1
 80023f0:	2300      	moveq	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 80023f8:	f000 f9b4 	bl	8002764 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023fc:	2100      	movs	r1, #0
 80023fe:	480e      	ldr	r0, [pc, #56]	@ (8002438 <_ZL12MX_I2C4_Initv+0x90>)
 8002400:	f002 fcd6 	bl	8004db0 <HAL_I2CEx_ConfigAnalogFilter>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8002414:	f000 f9a6 	bl	8002764 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002418:	2100      	movs	r1, #0
 800241a:	4807      	ldr	r0, [pc, #28]	@ (8002438 <_ZL12MX_I2C4_Initv+0x90>)
 800241c:	f002 fd13 	bl	8004e46 <HAL_I2CEx_ConfigDigitalFilter>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf14      	ite	ne
 8002426:	2301      	movne	r3, #1
 8002428:	2300      	moveq	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8002430:	f000 f998 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200007d0 	.word	0x200007d0
 800243c:	40008400 	.word	0x40008400
 8002440:	00100d14 	.word	0x00100d14

08002444 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	@ 0x28
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244a:	f107 031c 	add.w	r3, r7, #28
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002456:	463b      	mov	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
 8002464:	615a      	str	r2, [r3, #20]
 8002466:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002468:	4b29      	ldr	r3, [pc, #164]	@ (8002510 <_ZL12MX_TIM2_Initv+0xcc>)
 800246a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800246e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8002470:	4b27      	ldr	r3, [pc, #156]	@ (8002510 <_ZL12MX_TIM2_Initv+0xcc>)
 8002472:	2203      	movs	r2, #3
 8002474:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002476:	4b26      	ldr	r3, [pc, #152]	@ (8002510 <_ZL12MX_TIM2_Initv+0xcc>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40-1;
 800247c:	4b24      	ldr	r3, [pc, #144]	@ (8002510 <_ZL12MX_TIM2_Initv+0xcc>)
 800247e:	2227      	movs	r2, #39	@ 0x27
 8002480:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002482:	4b23      	ldr	r3, [pc, #140]	@ (8002510 <_ZL12MX_TIM2_Initv+0xcc>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002488:	4b21      	ldr	r3, [pc, #132]	@ (8002510 <_ZL12MX_TIM2_Initv+0xcc>)
 800248a:	2200      	movs	r2, #0
 800248c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800248e:	4820      	ldr	r0, [pc, #128]	@ (8002510 <_ZL12MX_TIM2_Initv+0xcc>)
 8002490:	f005 fb8c 	bl	8007bac <HAL_TIM_PWM_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	bf14      	ite	ne
 800249a:	2301      	movne	r3, #1
 800249c:	2300      	moveq	r3, #0
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 80024a4:	f000 f95e 	bl	8002764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4619      	mov	r1, r3
 80024b6:	4816      	ldr	r0, [pc, #88]	@ (8002510 <_ZL12MX_TIM2_Initv+0xcc>)
 80024b8:	f006 fabc 	bl	8008a34 <HAL_TIMEx_MasterConfigSynchronization>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf14      	ite	ne
 80024c2:	2301      	movne	r3, #1
 80024c4:	2300      	moveq	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 80024cc:	f000 f94a 	bl	8002764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d0:	2360      	movs	r3, #96	@ 0x60
 80024d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e0:	463b      	mov	r3, r7
 80024e2:	2200      	movs	r2, #0
 80024e4:	4619      	mov	r1, r3
 80024e6:	480a      	ldr	r0, [pc, #40]	@ (8002510 <_ZL12MX_TIM2_Initv+0xcc>)
 80024e8:	f005 fdc6 	bl	8008078 <HAL_TIM_PWM_ConfigChannel>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bf14      	ite	ne
 80024f2:	2301      	movne	r3, #1
 80024f4:	2300      	moveq	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 80024fc:	f000 f932 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002500:	4803      	ldr	r0, [pc, #12]	@ (8002510 <_ZL12MX_TIM2_Initv+0xcc>)
 8002502:	f000 fb25 	bl	8002b50 <HAL_TIM_MspPostInit>

}
 8002506:	bf00      	nop
 8002508:	3728      	adds	r7, #40	@ 0x28
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000824 	.word	0x20000824

08002514 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	@ 0x28
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251a:	f107 031c 	add.w	r3, r7, #28
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002526:	463b      	mov	r3, r7
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
 8002534:	615a      	str	r2, [r3, #20]
 8002536:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002538:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <_ZL12MX_TIM3_Initv+0xc8>)
 800253a:	4a29      	ldr	r2, [pc, #164]	@ (80025e0 <_ZL12MX_TIM3_Initv+0xcc>)
 800253c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 800253e:	4b27      	ldr	r3, [pc, #156]	@ (80025dc <_ZL12MX_TIM3_Initv+0xc8>)
 8002540:	2203      	movs	r2, #3
 8002542:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002544:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <_ZL12MX_TIM3_Initv+0xc8>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 800254a:	4b24      	ldr	r3, [pc, #144]	@ (80025dc <_ZL12MX_TIM3_Initv+0xc8>)
 800254c:	2227      	movs	r2, #39	@ 0x27
 800254e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002550:	4b22      	ldr	r3, [pc, #136]	@ (80025dc <_ZL12MX_TIM3_Initv+0xc8>)
 8002552:	2200      	movs	r2, #0
 8002554:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002556:	4b21      	ldr	r3, [pc, #132]	@ (80025dc <_ZL12MX_TIM3_Initv+0xc8>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800255c:	481f      	ldr	r0, [pc, #124]	@ (80025dc <_ZL12MX_TIM3_Initv+0xc8>)
 800255e:	f005 fb25 	bl	8007bac <HAL_TIM_PWM_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8002572:	f000 f8f7 	bl	8002764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800257e:	f107 031c 	add.w	r3, r7, #28
 8002582:	4619      	mov	r1, r3
 8002584:	4815      	ldr	r0, [pc, #84]	@ (80025dc <_ZL12MX_TIM3_Initv+0xc8>)
 8002586:	f006 fa55 	bl	8008a34 <HAL_TIMEx_MasterConfigSynchronization>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 800259a:	f000 f8e3 	bl	8002764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800259e:	2360      	movs	r3, #96	@ 0x60
 80025a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ae:	463b      	mov	r3, r7
 80025b0:	2200      	movs	r2, #0
 80025b2:	4619      	mov	r1, r3
 80025b4:	4809      	ldr	r0, [pc, #36]	@ (80025dc <_ZL12MX_TIM3_Initv+0xc8>)
 80025b6:	f005 fd5f 	bl	8008078 <HAL_TIM_PWM_ConfigChannel>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 80025ca:	f000 f8cb 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025ce:	4803      	ldr	r0, [pc, #12]	@ (80025dc <_ZL12MX_TIM3_Initv+0xc8>)
 80025d0:	f000 fabe 	bl	8002b50 <HAL_TIM_MspPostInit>

}
 80025d4:	bf00      	nop
 80025d6:	3728      	adds	r7, #40	@ 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000870 	.word	0x20000870
 80025e0:	40000400 	.word	0x40000400

080025e4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	@ 0x28
 80025e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
 80025f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002734 <_ZL12MX_GPIO_Initv+0x150>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fe:	4a4d      	ldr	r2, [pc, #308]	@ (8002734 <_ZL12MX_GPIO_Initv+0x150>)
 8002600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002606:	4b4b      	ldr	r3, [pc, #300]	@ (8002734 <_ZL12MX_GPIO_Initv+0x150>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002612:	4b48      	ldr	r3, [pc, #288]	@ (8002734 <_ZL12MX_GPIO_Initv+0x150>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	4a47      	ldr	r2, [pc, #284]	@ (8002734 <_ZL12MX_GPIO_Initv+0x150>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261e:	4b45      	ldr	r3, [pc, #276]	@ (8002734 <_ZL12MX_GPIO_Initv+0x150>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b42      	ldr	r3, [pc, #264]	@ (8002734 <_ZL12MX_GPIO_Initv+0x150>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262e:	4a41      	ldr	r2, [pc, #260]	@ (8002734 <_ZL12MX_GPIO_Initv+0x150>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002636:	4b3f      	ldr	r3, [pc, #252]	@ (8002734 <_ZL12MX_GPIO_Initv+0x150>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	4b3c      	ldr	r3, [pc, #240]	@ (8002734 <_ZL12MX_GPIO_Initv+0x150>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002646:	4a3b      	ldr	r2, [pc, #236]	@ (8002734 <_ZL12MX_GPIO_Initv+0x150>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800264e:	4b39      	ldr	r3, [pc, #228]	@ (8002734 <_ZL12MX_GPIO_Initv+0x150>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800265a:	2200      	movs	r2, #0
 800265c:	2134      	movs	r1, #52	@ 0x34
 800265e:	4836      	ldr	r0, [pc, #216]	@ (8002738 <_ZL12MX_GPIO_Initv+0x154>)
 8002660:	f001 fd16 	bl	8004090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 8002664:	2200      	movs	r2, #0
 8002666:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 800266a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800266e:	f001 fd0f 	bl	8004090 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8002672:	2200      	movs	r2, #0
 8002674:	2107      	movs	r1, #7
 8002676:	4831      	ldr	r0, [pc, #196]	@ (800273c <_ZL12MX_GPIO_Initv+0x158>)
 8002678:	f001 fd0a 	bl	8004090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 800267c:	2334      	movs	r3, #52	@ 0x34
 800267e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002680:	2301      	movs	r3, #1
 8002682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4619      	mov	r1, r3
 8002692:	4829      	ldr	r0, [pc, #164]	@ (8002738 <_ZL12MX_GPIO_Initv+0x154>)
 8002694:	f001 fb6a 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002698:	2308      	movs	r3, #8
 800269a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800269c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4619      	mov	r1, r3
 80026ac:	4822      	ldr	r0, [pc, #136]	@ (8002738 <_ZL12MX_GPIO_Initv+0x154>)
 80026ae:	f001 fb5d 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 PA7
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 80026b2:	f240 43c3 	movw	r3, #1219	@ 0x4c3
 80026b6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b8:	2301      	movs	r3, #1
 80026ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4619      	mov	r1, r3
 80026ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ce:	f001 fb4d 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026d2:	2320      	movs	r3, #32
 80026d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	4619      	mov	r1, r3
 80026e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ea:	f001 fb3f 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80026ee:	2307      	movs	r3, #7
 80026f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f2:	2301      	movs	r3, #1
 80026f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	480d      	ldr	r0, [pc, #52]	@ (800273c <_ZL12MX_GPIO_Initv+0x158>)
 8002706:	f001 fb31 	bl	8003d6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2105      	movs	r1, #5
 800270e:	2009      	movs	r0, #9
 8002710:	f001 fb02 	bl	8003d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002714:	2009      	movs	r0, #9
 8002716:	f001 fb1b 	bl	8003d50 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2105      	movs	r1, #5
 800271e:	2017      	movs	r0, #23
 8002720:	f001 fafa 	bl	8003d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002724:	2017      	movs	r0, #23
 8002726:	f001 fb13 	bl	8003d50 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800272a:	bf00      	nop
 800272c:	3728      	adds	r7, #40	@ 0x28
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	48000800 	.word	0x48000800
 800273c:	48000400 	.word	0x48000400

08002740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a04      	ldr	r2, [pc, #16]	@ (8002760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002752:	f000 fc29 	bl	8002fa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40012c00 	.word	0x40012c00

08002764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002768:	b672      	cpsid	i
}
 800276a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <Error_Handler+0x8>

08002770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002776:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <HAL_MspInit+0x4c>)
 8002778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277a:	4a10      	ldr	r2, [pc, #64]	@ (80027bc <HAL_MspInit+0x4c>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6613      	str	r3, [r2, #96]	@ 0x60
 8002782:	4b0e      	ldr	r3, [pc, #56]	@ (80027bc <HAL_MspInit+0x4c>)
 8002784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <HAL_MspInit+0x4c>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002792:	4a0a      	ldr	r2, [pc, #40]	@ (80027bc <HAL_MspInit+0x4c>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002798:	6593      	str	r3, [r2, #88]	@ 0x58
 800279a:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <HAL_MspInit+0x4c>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	210f      	movs	r1, #15
 80027aa:	f06f 0001 	mvn.w	r0, #1
 80027ae:	f001 fab3 	bl	8003d18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000

080027c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	@ 0x30
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a49      	ldr	r2, [pc, #292]	@ (8002904 <HAL_CAN_MspInit+0x144>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d13a      	bne.n	8002858 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80027e2:	4b49      	ldr	r3, [pc, #292]	@ (8002908 <HAL_CAN_MspInit+0x148>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	4a47      	ldr	r2, [pc, #284]	@ (8002908 <HAL_CAN_MspInit+0x148>)
 80027ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80027ec:	4b46      	ldr	r3, [pc, #280]	@ (8002908 <HAL_CAN_MspInit+0x148>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d10b      	bne.n	800280c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80027f4:	4b45      	ldr	r3, [pc, #276]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f8:	4a44      	ldr	r2, [pc, #272]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 80027fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002800:	4b42      	ldr	r3, [pc, #264]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280c:	4b3f      	ldr	r3, [pc, #252]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 800280e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002810:	4a3e      	ldr	r2, [pc, #248]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 8002812:	f043 0302 	orr.w	r3, r3, #2
 8002816:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002818:	4b3c      	ldr	r3, [pc, #240]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 800281a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002824:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002832:	2303      	movs	r3, #3
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002836:	2309      	movs	r3, #9
 8002838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	4619      	mov	r1, r3
 8002840:	4833      	ldr	r0, [pc, #204]	@ (8002910 <HAL_CAN_MspInit+0x150>)
 8002842:	f001 fa93 	bl	8003d6c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	2105      	movs	r1, #5
 800284a:	2014      	movs	r0, #20
 800284c:	f001 fa64 	bl	8003d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002850:	2014      	movs	r0, #20
 8002852:	f001 fa7d 	bl	8003d50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002856:	e051      	b.n	80028fc <HAL_CAN_MspInit+0x13c>
  else if(hcan->Instance==CAN2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2d      	ldr	r2, [pc, #180]	@ (8002914 <HAL_CAN_MspInit+0x154>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d14c      	bne.n	80028fc <HAL_CAN_MspInit+0x13c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002862:	4b2a      	ldr	r3, [pc, #168]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002866:	4a29      	ldr	r2, [pc, #164]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 8002868:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800286c:	6593      	str	r3, [r2, #88]	@ 0x58
 800286e:	4b27      	ldr	r3, [pc, #156]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 8002870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002872:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800287a:	4b23      	ldr	r3, [pc, #140]	@ (8002908 <HAL_CAN_MspInit+0x148>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	3301      	adds	r3, #1
 8002880:	4a21      	ldr	r2, [pc, #132]	@ (8002908 <HAL_CAN_MspInit+0x148>)
 8002882:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002884:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <HAL_CAN_MspInit+0x148>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d10b      	bne.n	80028a4 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800288c:	4b1f      	ldr	r3, [pc, #124]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002890:	4a1e      	ldr	r2, [pc, #120]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 8002892:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002896:	6593      	str	r3, [r2, #88]	@ 0x58
 8002898:	4b1c      	ldr	r3, [pc, #112]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a4:	4b19      	ldr	r3, [pc, #100]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 80028a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a8:	4a18      	ldr	r2, [pc, #96]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 80028aa:	f043 0302 	orr.w	r3, r3, #2
 80028ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028b0:	4b16      	ldr	r3, [pc, #88]	@ (800290c <HAL_CAN_MspInit+0x14c>)
 80028b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028bc:	2320      	movs	r3, #32
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 80028cc:	2303      	movs	r3, #3
 80028ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	4619      	mov	r1, r3
 80028d6:	480e      	ldr	r0, [pc, #56]	@ (8002910 <HAL_CAN_MspInit+0x150>)
 80028d8:	f001 fa48 	bl	8003d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028dc:	2340      	movs	r3, #64	@ 0x40
 80028de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e8:	2303      	movs	r3, #3
 80028ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 80028ec:	2308      	movs	r3, #8
 80028ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	4619      	mov	r1, r3
 80028f6:	4806      	ldr	r0, [pc, #24]	@ (8002910 <HAL_CAN_MspInit+0x150>)
 80028f8:	f001 fa38 	bl	8003d6c <HAL_GPIO_Init>
}
 80028fc:	bf00      	nop
 80028fe:	3730      	adds	r7, #48	@ 0x30
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40006400 	.word	0x40006400
 8002908:	200008d4 	.word	0x200008d4
 800290c:	40021000 	.word	0x40021000
 8002910:	48000400 	.word	0x48000400
 8002914:	40006800 	.word	0x40006800

08002918 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b0b0      	sub	sp, #192	@ 0xc0
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002930:	f107 0320 	add.w	r3, r7, #32
 8002934:	228c      	movs	r2, #140	@ 0x8c
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f00d fd3a 	bl	80103b2 <memset>
  if(hi2c->Instance==I2C2)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a64      	ldr	r2, [pc, #400]	@ (8002ad4 <HAL_I2C_MspInit+0x1bc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d13c      	bne.n	80029c2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800294c:	2300      	movs	r3, #0
 800294e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002950:	f107 0320 	add.w	r3, r7, #32
 8002954:	4618      	mov	r0, r3
 8002956:	f004 fb25 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002960:	f7ff ff00 	bl	8002764 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002964:	4b5c      	ldr	r3, [pc, #368]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 8002966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002968:	4a5b      	ldr	r2, [pc, #364]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 800296a:	f043 0302 	orr.w	r3, r3, #2
 800296e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002970:	4b59      	ldr	r3, [pc, #356]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 8002972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	69fb      	ldr	r3, [r7, #28]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800297c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002980:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002984:	2312      	movs	r3, #18
 8002986:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002990:	2303      	movs	r3, #3
 8002992:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002996:	2304      	movs	r3, #4
 8002998:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80029a0:	4619      	mov	r1, r3
 80029a2:	484e      	ldr	r0, [pc, #312]	@ (8002adc <HAL_I2C_MspInit+0x1c4>)
 80029a4:	f001 f9e2 	bl	8003d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029a8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 80029aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ac:	4a4a      	ldr	r2, [pc, #296]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 80029ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80029b4:	4b48      	ldr	r3, [pc, #288]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80029c0:	e083      	b.n	8002aca <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C3)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a46      	ldr	r2, [pc, #280]	@ (8002ae0 <HAL_I2C_MspInit+0x1c8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d13c      	bne.n	8002a46 <HAL_I2C_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80029cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80029d2:	2300      	movs	r3, #0
 80029d4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029d6:	f107 0320 	add.w	r3, r7, #32
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 fae2 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 80029e6:	f7ff febd 	bl	8002764 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ea:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ee:	4a3a      	ldr	r2, [pc, #232]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029f6:	4b38      	ldr	r3, [pc, #224]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a02:	2303      	movs	r3, #3
 8002a04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a08:	2312      	movs	r3, #18
 8002a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a14:	2303      	movs	r3, #3
 8002a16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a20:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a24:	4619      	mov	r1, r3
 8002a26:	482f      	ldr	r0, [pc, #188]	@ (8002ae4 <HAL_I2C_MspInit+0x1cc>)
 8002a28:	f001 f9a0 	bl	8003d6c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a30:	4a29      	ldr	r2, [pc, #164]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 8002a32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a38:	4b27      	ldr	r3, [pc, #156]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	693b      	ldr	r3, [r7, #16]
}
 8002a44:	e041      	b.n	8002aca <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C4)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a27      	ldr	r2, [pc, #156]	@ (8002ae8 <HAL_I2C_MspInit+0x1d0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d13c      	bne.n	8002aca <HAL_I2C_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002a50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002a56:	2300      	movs	r3, #0
 8002a58:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a5a:	f107 0320 	add.w	r3, r7, #32
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 faa0 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_MspInit+0x156>
      Error_Handler();
 8002a6a:	f7ff fe7b 	bl	8002764 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a72:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a86:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a8e:	2312      	movs	r3, #18
 8002a90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002aaa:	4619      	mov	r1, r3
 8002aac:	480b      	ldr	r0, [pc, #44]	@ (8002adc <HAL_I2C_MspInit+0x1c4>)
 8002aae:	f001 f95d 	bl	8003d6c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab6:	4a08      	ldr	r2, [pc, #32]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_I2C_MspInit+0x1c0>)
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
}
 8002aca:	bf00      	nop
 8002acc:	37c0      	adds	r7, #192	@ 0xc0
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40005800 	.word	0x40005800
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	48000400 	.word	0x48000400
 8002ae0:	40005c00 	.word	0x40005c00
 8002ae4:	48000800 	.word	0x48000800
 8002ae8:	40008400 	.word	0x40008400

08002aec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002afc:	d10c      	bne.n	8002b18 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002afe:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b02:	4a11      	ldr	r2, [pc, #68]	@ (8002b48 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b48 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b16:	e010      	b.n	8002b3a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b4c <HAL_TIM_PWM_MspInit+0x60>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d10b      	bne.n	8002b3a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b26:	4a08      	ldr	r2, [pc, #32]	@ (8002b48 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b2e:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40000400 	.word	0x40000400

08002b50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	@ 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b70:	d11e      	bne.n	8002bb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b72:	4b22      	ldr	r3, [pc, #136]	@ (8002bfc <HAL_TIM_MspPostInit+0xac>)
 8002b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b76:	4a21      	ldr	r2, [pc, #132]	@ (8002bfc <HAL_TIM_MspPostInit+0xac>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bfc <HAL_TIM_MspPostInit+0xac>)
 8002b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002baa:	f001 f8df 	bl	8003d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bae:	e020      	b.n	8002bf2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a12      	ldr	r2, [pc, #72]	@ (8002c00 <HAL_TIM_MspPostInit+0xb0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d11b      	bne.n	8002bf2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <HAL_TIM_MspPostInit+0xac>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002bfc <HAL_TIM_MspPostInit+0xac>)
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bfc <HAL_TIM_MspPostInit+0xac>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002bd2:	2310      	movs	r3, #16
 8002bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002be2:	2302      	movs	r3, #2
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4619      	mov	r1, r3
 8002bec:	4805      	ldr	r0, [pc, #20]	@ (8002c04 <HAL_TIM_MspPostInit+0xb4>)
 8002bee:	f001 f8bd 	bl	8003d6c <HAL_GPIO_Init>
}
 8002bf2:	bf00      	nop
 8002bf4:	3728      	adds	r7, #40	@ 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40000400 	.word	0x40000400
 8002c04:	48000400 	.word	0x48000400

08002c08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08c      	sub	sp, #48	@ 0x30
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c16:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd0 <HAL_InitTick+0xc8>)
 8002c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002cd0 <HAL_InitTick+0xc8>)
 8002c1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c20:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c22:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd0 <HAL_InitTick+0xc8>)
 8002c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c2e:	f107 020c 	add.w	r2, r7, #12
 8002c32:	f107 0310 	add.w	r3, r7, #16
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f004 f921 	bl	8006e80 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002c3e:	f004 f909 	bl	8006e54 <HAL_RCC_GetPCLK2Freq>
 8002c42:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c46:	4a23      	ldr	r2, [pc, #140]	@ (8002cd4 <HAL_InitTick+0xcc>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	0c9b      	lsrs	r3, r3, #18
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c52:	4b21      	ldr	r3, [pc, #132]	@ (8002cd8 <HAL_InitTick+0xd0>)
 8002c54:	4a21      	ldr	r2, [pc, #132]	@ (8002cdc <HAL_InitTick+0xd4>)
 8002c56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002c58:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd8 <HAL_InitTick+0xd0>)
 8002c5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c5e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c60:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd8 <HAL_InitTick+0xd0>)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002c66:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd8 <HAL_InitTick+0xd0>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <HAL_InitTick+0xd0>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c72:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <HAL_InitTick+0xd0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002c78:	4817      	ldr	r0, [pc, #92]	@ (8002cd8 <HAL_InitTick+0xd0>)
 8002c7a:	f004 fe5d 	bl	8007938 <HAL_TIM_Base_Init>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002c84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002c8c:	4812      	ldr	r0, [pc, #72]	@ (8002cd8 <HAL_InitTick+0xd0>)
 8002c8e:	f004 ff1d 	bl	8007acc <HAL_TIM_Base_Start_IT>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002c98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d111      	bne.n	8002cc4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ca0:	2019      	movs	r0, #25
 8002ca2:	f001 f855 	bl	8003d50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b0f      	cmp	r3, #15
 8002caa:	d808      	bhi.n	8002cbe <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002cac:	2200      	movs	r2, #0
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	2019      	movs	r0, #25
 8002cb2:	f001 f831 	bl	8003d18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce0 <HAL_InitTick+0xd8>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	e002      	b.n	8002cc4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3730      	adds	r7, #48	@ 0x30
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	431bde83 	.word	0x431bde83
 8002cd8:	200008d8 	.word	0x200008d8
 8002cdc:	40012c00 	.word	0x40012c00
 8002ce0:	20000004 	.word	0x20000004

08002ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ce8:	bf00      	nop
 8002cea:	e7fd      	b.n	8002ce8 <NMI_Handler+0x4>

08002cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cf0:	bf00      	nop
 8002cf2:	e7fd      	b.n	8002cf0 <HardFault_Handler+0x4>

08002cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <MemManage_Handler+0x4>

08002cfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <BusFault_Handler+0x4>

08002d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <UsageFault_Handler+0x4>

08002d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002d1e:	2008      	movs	r0, #8
 8002d20:	f001 f9e8 	bl	80040f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d2c:	4802      	ldr	r0, [pc, #8]	@ (8002d38 <CAN1_RX0_IRQHandler+0x10>)
 8002d2e:	f000 fd0b 	bl	8003748 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200006d8 	.word	0x200006d8

08002d3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002d40:	2020      	movs	r0, #32
 8002d42:	f001 f9d7 	bl	80040f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d50:	4802      	ldr	r0, [pc, #8]	@ (8002d5c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002d52:	f005 f889 	bl	8007e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	200008d8 	.word	0x200008d8

08002d60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d64:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <OTG_FS_IRQHandler+0x10>)
 8002d66:	f002 f9f8 	bl	800515a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20003f7c 	.word	0x20003f7c

08002d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return 1;
 8002d78:	2301      	movs	r3, #1
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <_kill>:

int _kill(int pid, int sig)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d8e:	f00d fbb9 	bl	8010504 <__errno>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2216      	movs	r2, #22
 8002d96:	601a      	str	r2, [r3, #0]
  return -1;
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_exit>:

void _exit (int status)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dac:	f04f 31ff 	mov.w	r1, #4294967295
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ffe7 	bl	8002d84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002db6:	bf00      	nop
 8002db8:	e7fd      	b.n	8002db6 <_exit+0x12>

08002dba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e00a      	b.n	8002de2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dcc:	f3af 8000 	nop.w
 8002dd0:	4601      	mov	r1, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	60ba      	str	r2, [r7, #8]
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3301      	adds	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	dbf0      	blt.n	8002dcc <_read+0x12>
  }

  return len;
 8002dea:	687b      	ldr	r3, [r7, #4]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	e009      	b.n	8002e1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	60ba      	str	r2, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3301      	adds	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	dbf1      	blt.n	8002e06 <_write+0x12>
  }
  return len;
 8002e22:	687b      	ldr	r3, [r7, #4]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <_close>:

int _close(int file)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e54:	605a      	str	r2, [r3, #4]
  return 0;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <_isatty>:

int _isatty(int file)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e6c:	2301      	movs	r3, #1
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b085      	sub	sp, #20
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ef0 <_sbrk+0x5c>)
 8002e9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ef4 <_sbrk+0x60>)
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea8:	4b13      	ldr	r3, [pc, #76]	@ (8002ef8 <_sbrk+0x64>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <_sbrk+0x64>)
 8002eb2:	4a12      	ldr	r2, [pc, #72]	@ (8002efc <_sbrk+0x68>)
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <_sbrk+0x64>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d207      	bcs.n	8002ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec4:	f00d fb1e 	bl	8010504 <__errno>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	220c      	movs	r2, #12
 8002ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	e009      	b.n	8002ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eda:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <_sbrk+0x64>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	4a05      	ldr	r2, [pc, #20]	@ (8002ef8 <_sbrk+0x64>)
 8002ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20050000 	.word	0x20050000
 8002ef4:	00000400 	.word	0x00000400
 8002ef8:	20000924 	.word	0x20000924
 8002efc:	200047d0 	.word	0x200047d0

08002f00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <SystemInit+0x20>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0a:	4a05      	ldr	r2, [pc, #20]	@ (8002f20 <SystemInit+0x20>)
 8002f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8002f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f28:	f7ff ffea 	bl	8002f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f2c:	480c      	ldr	r0, [pc, #48]	@ (8002f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f2e:	490d      	ldr	r1, [pc, #52]	@ (8002f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f30:	4a0d      	ldr	r2, [pc, #52]	@ (8002f68 <LoopForever+0xe>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f34:	e002      	b.n	8002f3c <LoopCopyDataInit>

08002f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3a:	3304      	adds	r3, #4

08002f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f40:	d3f9      	bcc.n	8002f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f42:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f44:	4c0a      	ldr	r4, [pc, #40]	@ (8002f70 <LoopForever+0x16>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f48:	e001      	b.n	8002f4e <LoopFillZerobss>

08002f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f4c:	3204      	adds	r2, #4

08002f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f50:	d3fb      	bcc.n	8002f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f52:	f00d fadd 	bl	8010510 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f56:	f7ff f837 	bl	8001fc8 <main>

08002f5a <LoopForever>:

LoopForever:
    b LoopForever
 8002f5a:	e7fe      	b.n	8002f5a <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8002f5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f64:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8002f68:	08012824 	.word	0x08012824
  ldr r2, =_sbss
 8002f6c:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8002f70:	200047cc 	.word	0x200047cc

08002f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f74:	e7fe      	b.n	8002f74 <ADC1_2_IRQHandler>

08002f76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f80:	2003      	movs	r0, #3
 8002f82:	f000 febe 	bl	8003d02 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f86:	200f      	movs	r0, #15
 8002f88:	f7ff fe3e 	bl	8002c08 <HAL_InitTick>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	71fb      	strb	r3, [r7, #7]
 8002f96:	e001      	b.n	8002f9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f98:	f7ff fbea 	bl	8002770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fac:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_IncTick+0x20>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <HAL_IncTick+0x24>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <HAL_IncTick+0x24>)
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000008 	.word	0x20000008
 8002fcc:	20000928 	.word	0x20000928

08002fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	@ (8002fe4 <HAL_GetTick+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20000928 	.word	0x20000928

08002fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff ffee 	bl	8002fd0 <HAL_GetTick>
 8002ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d005      	beq.n	800300e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003002:	4b0a      	ldr	r3, [pc, #40]	@ (800302c <HAL_Delay+0x44>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800300e:	bf00      	nop
 8003010:	f7ff ffde 	bl	8002fd0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	429a      	cmp	r2, r3
 800301e:	d8f7      	bhi.n	8003010 <HAL_Delay+0x28>
  {
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000008 	.word	0x20000008

08003030 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0ed      	b.n	800321e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff fbb6 	bl	80027c0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003064:	f7ff ffb4 	bl	8002fd0 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800306a:	e012      	b.n	8003092 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800306c:	f7ff ffb0 	bl	8002fd0 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b0a      	cmp	r3, #10
 8003078:	d90b      	bls.n	8003092 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2205      	movs	r2, #5
 800308a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e0c5      	b.n	800321e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0e5      	beq.n	800306c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0202 	bic.w	r2, r2, #2
 80030ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030b0:	f7ff ff8e 	bl	8002fd0 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030b6:	e012      	b.n	80030de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030b8:	f7ff ff8a 	bl	8002fd0 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b0a      	cmp	r3, #10
 80030c4:	d90b      	bls.n	80030de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2205      	movs	r2, #5
 80030d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e09f      	b.n	800321e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e5      	bne.n	80030b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7e1b      	ldrb	r3, [r3, #24]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d108      	bne.n	8003106 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	e007      	b.n	8003116 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003114:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7e5b      	ldrb	r3, [r3, #25]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d108      	bne.n	8003130 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e007      	b.n	8003140 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	7e9b      	ldrb	r3, [r3, #26]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d108      	bne.n	800315a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0220 	orr.w	r2, r2, #32
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e007      	b.n	800316a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0220 	bic.w	r2, r2, #32
 8003168:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7edb      	ldrb	r3, [r3, #27]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d108      	bne.n	8003184 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0210 	bic.w	r2, r2, #16
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e007      	b.n	8003194 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0210 	orr.w	r2, r2, #16
 8003192:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	7f1b      	ldrb	r3, [r3, #28]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d108      	bne.n	80031ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0208 	orr.w	r2, r2, #8
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	e007      	b.n	80031be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0208 	bic.w	r2, r2, #8
 80031bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	7f5b      	ldrb	r3, [r3, #29]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d108      	bne.n	80031d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0204 	orr.w	r2, r2, #4
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e007      	b.n	80031e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0204 	bic.w	r2, r2, #4
 80031e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	ea42 0103 	orr.w	r1, r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	1e5a      	subs	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d12e      	bne.n	8003298 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003252:	f7ff febd 	bl	8002fd0 <HAL_GetTick>
 8003256:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003258:	e012      	b.n	8003280 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800325a:	f7ff feb9 	bl	8002fd0 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b0a      	cmp	r3, #10
 8003266:	d90b      	bls.n	8003280 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2205      	movs	r2, #5
 8003278:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e012      	b.n	80032a6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e5      	bne.n	800325a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e006      	b.n	80032a6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
  }
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b089      	sub	sp, #36	@ 0x24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80032cc:	7ffb      	ldrb	r3, [r7, #31]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d003      	beq.n	80032da <HAL_CAN_AddTxMessage+0x2c>
 80032d2:	7ffb      	ldrb	r3, [r7, #31]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	f040 80ad 	bne.w	8003434 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8095 	beq.w	8003424 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	0e1b      	lsrs	r3, r3, #24
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003304:	2201      	movs	r2, #1
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	409a      	lsls	r2, r3
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003320:	68f9      	ldr	r1, [r7, #12]
 8003322:	6809      	ldr	r1, [r1, #0]
 8003324:	431a      	orrs	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	3318      	adds	r3, #24
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	440b      	add	r3, r1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e00f      	b.n	8003352 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800333c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003342:	68f9      	ldr	r1, [r7, #12]
 8003344:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003346:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	3318      	adds	r3, #24
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	440b      	add	r3, r1
 8003350:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6819      	ldr	r1, [r3, #0]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	3318      	adds	r3, #24
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	440b      	add	r3, r1
 8003362:	3304      	adds	r3, #4
 8003364:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	7d1b      	ldrb	r3, [r3, #20]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d111      	bne.n	8003392 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	3318      	adds	r3, #24
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	4413      	add	r3, r2
 800337a:	3304      	adds	r3, #4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	6811      	ldr	r1, [r2, #0]
 8003382:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	3318      	adds	r3, #24
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	440b      	add	r3, r1
 800338e:	3304      	adds	r3, #4
 8003390:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3307      	adds	r3, #7
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	061a      	lsls	r2, r3, #24
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3306      	adds	r3, #6
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	041b      	lsls	r3, r3, #16
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3305      	adds	r3, #5
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	4313      	orrs	r3, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	3204      	adds	r2, #4
 80033b2:	7812      	ldrb	r2, [r2, #0]
 80033b4:	4610      	mov	r0, r2
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	6811      	ldr	r1, [r2, #0]
 80033ba:	ea43 0200 	orr.w	r2, r3, r0
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	440b      	add	r3, r1
 80033c4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80033c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3303      	adds	r3, #3
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	061a      	lsls	r2, r3, #24
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3302      	adds	r3, #2
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3301      	adds	r3, #1
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	4313      	orrs	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	4610      	mov	r0, r2
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	6811      	ldr	r1, [r2, #0]
 80033f0:	ea43 0200 	orr.w	r2, r3, r0
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	440b      	add	r3, r1
 80033fa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80033fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	3318      	adds	r3, #24
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	4413      	add	r3, r2
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	6811      	ldr	r1, [r2, #0]
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	3318      	adds	r3, #24
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	440b      	add	r3, r1
 800341e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e00e      	b.n	8003442 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e006      	b.n	8003442 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
  }
}
 8003442:	4618      	mov	r0, r3
 8003444:	3724      	adds	r7, #36	@ 0x24
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003460:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003462:	7afb      	ldrb	r3, [r7, #11]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d002      	beq.n	800346e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003468:	7afb      	ldrb	r3, [r7, #11]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d11d      	bne.n	80034aa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3301      	adds	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3301      	adds	r3, #1
 8003494:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80034aa:	68fb      	ldr	r3, [r7, #12]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034cc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d003      	beq.n	80034dc <HAL_CAN_GetRxMessage+0x24>
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	f040 8103 	bne.w	80036e2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10e      	bne.n	8003500 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d116      	bne.n	800351e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0f7      	b.n	80036f0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d107      	bne.n	800351e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003512:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e0e8      	b.n	80036f0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	331b      	adds	r3, #27
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	4413      	add	r3, r2
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0204 	and.w	r2, r3, #4
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10c      	bne.n	8003556 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	331b      	adds	r3, #27
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	4413      	add	r3, r2
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	0d5b      	lsrs	r3, r3, #21
 800354c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e00b      	b.n	800356e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	331b      	adds	r3, #27
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	4413      	add	r3, r2
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	08db      	lsrs	r3, r3, #3
 8003566:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	331b      	adds	r3, #27
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	4413      	add	r3, r2
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0202 	and.w	r2, r3, #2
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	331b      	adds	r3, #27
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	4413      	add	r3, r2
 8003590:	3304      	adds	r3, #4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2208      	movs	r2, #8
 80035a0:	611a      	str	r2, [r3, #16]
 80035a2:	e00b      	b.n	80035bc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	331b      	adds	r3, #27
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	4413      	add	r3, r2
 80035b0:	3304      	adds	r3, #4
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 020f 	and.w	r2, r3, #15
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	331b      	adds	r3, #27
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	4413      	add	r3, r2
 80035c8:	3304      	adds	r3, #4
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	331b      	adds	r3, #27
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	4413      	add	r3, r2
 80035e0:	3304      	adds	r3, #4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	0c1b      	lsrs	r3, r3, #16
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	0a1a      	lsrs	r2, r3, #8
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	4413      	add	r3, r2
 8003626:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	0c1a      	lsrs	r2, r3, #16
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	3302      	adds	r3, #2
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	4413      	add	r3, r2
 8003640:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	0e1a      	lsrs	r2, r3, #24
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	3303      	adds	r3, #3
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	4413      	add	r3, r2
 800365a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	3304      	adds	r3, #4
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	4413      	add	r3, r2
 8003672:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	0a1a      	lsrs	r2, r3, #8
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	3305      	adds	r3, #5
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	4413      	add	r3, r2
 800368c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	0c1a      	lsrs	r2, r3, #16
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	3306      	adds	r3, #6
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	0e1a      	lsrs	r2, r3, #24
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	3307      	adds	r3, #7
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d108      	bne.n	80036ce <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0220 	orr.w	r2, r2, #32
 80036ca:	60da      	str	r2, [r3, #12]
 80036cc:	e007      	b.n	80036de <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0220 	orr.w	r2, r2, #32
 80036dc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e006      	b.n	80036f0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
  }
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800370c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d002      	beq.n	800371a <HAL_CAN_ActivateNotification+0x1e>
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d109      	bne.n	800372e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6959      	ldr	r1, [r3, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e006      	b.n	800373c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
  }
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	@ 0x28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003750:	2300      	movs	r3, #0
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d07c      	beq.n	8003888 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d023      	beq.n	80037e0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2201      	movs	r2, #1
 800379e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f983 	bl	8003ab6 <HAL_CAN_TxMailbox0CompleteCallback>
 80037b0:	e016      	b.n	80037e0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c4:	e00c      	b.n	80037e0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d8:	e002      	b.n	80037e0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f989 	bl	8003af2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d024      	beq.n	8003834 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f963 	bl	8003aca <HAL_CAN_TxMailbox1CompleteCallback>
 8003804:	e016      	b.n	8003834 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003812:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
 8003818:	e00c      	b.n	8003834 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
 800382c:	e002      	b.n	8003834 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f969 	bl	8003b06 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d024      	beq.n	8003888 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003846:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f943 	bl	8003ade <HAL_CAN_TxMailbox2CompleteCallback>
 8003858:	e016      	b.n	8003888 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
 800386c:	e00c      	b.n	8003888 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003880:	e002      	b.n	8003888 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f949 	bl	8003b1a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00c      	beq.n	80038ac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2210      	movs	r2, #16
 80038aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d006      	beq.n	80038ce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2208      	movs	r2, #8
 80038c6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f930 	bl	8003b2e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fe fa82 	bl	8001df0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003906:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2210      	movs	r2, #16
 800390e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2208      	movs	r2, #8
 800392a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f912 	bl	8003b56 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	d009      	beq.n	8003950 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f8f9 	bl	8003b42 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	d006      	beq.n	8003972 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2210      	movs	r2, #16
 800396a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f8fc 	bl	8003b6a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00b      	beq.n	8003994 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d006      	beq.n	8003994 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2208      	movs	r2, #8
 800398c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f8f5 	bl	8003b7e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d07b      	beq.n	8003a96 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d072      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	f043 0302 	orr.w	r3, r3, #2
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f6:	f043 0304 	orr.w	r3, r3, #4
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d043      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d03e      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a16:	2b60      	cmp	r3, #96	@ 0x60
 8003a18:	d02b      	beq.n	8003a72 <HAL_CAN_IRQHandler+0x32a>
 8003a1a:	2b60      	cmp	r3, #96	@ 0x60
 8003a1c:	d82e      	bhi.n	8003a7c <HAL_CAN_IRQHandler+0x334>
 8003a1e:	2b50      	cmp	r3, #80	@ 0x50
 8003a20:	d022      	beq.n	8003a68 <HAL_CAN_IRQHandler+0x320>
 8003a22:	2b50      	cmp	r3, #80	@ 0x50
 8003a24:	d82a      	bhi.n	8003a7c <HAL_CAN_IRQHandler+0x334>
 8003a26:	2b40      	cmp	r3, #64	@ 0x40
 8003a28:	d019      	beq.n	8003a5e <HAL_CAN_IRQHandler+0x316>
 8003a2a:	2b40      	cmp	r3, #64	@ 0x40
 8003a2c:	d826      	bhi.n	8003a7c <HAL_CAN_IRQHandler+0x334>
 8003a2e:	2b30      	cmp	r3, #48	@ 0x30
 8003a30:	d010      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x30c>
 8003a32:	2b30      	cmp	r3, #48	@ 0x30
 8003a34:	d822      	bhi.n	8003a7c <HAL_CAN_IRQHandler+0x334>
 8003a36:	2b10      	cmp	r3, #16
 8003a38:	d002      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x2f8>
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d005      	beq.n	8003a4a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a3e:	e01d      	b.n	8003a7c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	f043 0308 	orr.w	r3, r3, #8
 8003a46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a48:	e019      	b.n	8003a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	f043 0310 	orr.w	r3, r3, #16
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a52:	e014      	b.n	8003a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a56:	f043 0320 	orr.w	r3, r3, #32
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a5c:	e00f      	b.n	8003a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a66:	e00a      	b.n	8003a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a70:	e005      	b.n	8003a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a7a:	e000      	b.n	8003a7e <HAL_CAN_IRQHandler+0x336>
            break;
 8003a7c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699a      	ldr	r2, [r3, #24]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003a8c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2204      	movs	r2, #4
 8003a94:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f872 	bl	8003b92 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003aae:	bf00      	nop
 8003ab0:	3728      	adds	r7, #40	@ 0x28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bec <__NVIC_SetPriorityGrouping+0x44>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bda:	4a04      	ldr	r2, [pc, #16]	@ (8003bec <__NVIC_SetPriorityGrouping+0x44>)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	60d3      	str	r3, [r2, #12]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf4:	4b04      	ldr	r3, [pc, #16]	@ (8003c08 <__NVIC_GetPriorityGrouping+0x18>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	f003 0307 	and.w	r3, r3, #7
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	db0b      	blt.n	8003c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	f003 021f 	and.w	r2, r3, #31
 8003c24:	4907      	ldr	r1, [pc, #28]	@ (8003c44 <__NVIC_EnableIRQ+0x38>)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	e000e100 	.word	0xe000e100

08003c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	6039      	str	r1, [r7, #0]
 8003c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	db0a      	blt.n	8003c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	490c      	ldr	r1, [pc, #48]	@ (8003c94 <__NVIC_SetPriority+0x4c>)
 8003c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c66:	0112      	lsls	r2, r2, #4
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c70:	e00a      	b.n	8003c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	4908      	ldr	r1, [pc, #32]	@ (8003c98 <__NVIC_SetPriority+0x50>)
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	3b04      	subs	r3, #4
 8003c80:	0112      	lsls	r2, r2, #4
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	440b      	add	r3, r1
 8003c86:	761a      	strb	r2, [r3, #24]
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000e100 	.word	0xe000e100
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	@ 0x24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f1c3 0307 	rsb	r3, r3, #7
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	bf28      	it	cs
 8003cba:	2304      	movcs	r3, #4
 8003cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	2b06      	cmp	r3, #6
 8003cc4:	d902      	bls.n	8003ccc <NVIC_EncodePriority+0x30>
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3b03      	subs	r3, #3
 8003cca:	e000      	b.n	8003cce <NVIC_EncodePriority+0x32>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	401a      	ands	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fa01 f303 	lsl.w	r3, r1, r3
 8003cee:	43d9      	mvns	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf4:	4313      	orrs	r3, r2
         );
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3724      	adds	r7, #36	@ 0x24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ff4c 	bl	8003ba8 <__NVIC_SetPriorityGrouping>
}
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d2a:	f7ff ff61 	bl	8003bf0 <__NVIC_GetPriorityGrouping>
 8003d2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	6978      	ldr	r0, [r7, #20]
 8003d36:	f7ff ffb1 	bl	8003c9c <NVIC_EncodePriority>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff ff80 	bl	8003c48 <__NVIC_SetPriority>
}
 8003d48:	bf00      	nop
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff ff54 	bl	8003c0c <__NVIC_EnableIRQ>
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d7a:	e166      	b.n	800404a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	2101      	movs	r1, #1
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	fa01 f303 	lsl.w	r3, r1, r3
 8003d88:	4013      	ands	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 8158 	beq.w	8004044 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d005      	beq.n	8003dac <HAL_GPIO_Init+0x40>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d130      	bne.n	8003e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	2203      	movs	r2, #3
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003de2:	2201      	movs	r2, #1
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4013      	ands	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	f003 0201 	and.w	r2, r3, #1
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	d017      	beq.n	8003e4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	2203      	movs	r2, #3
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d123      	bne.n	8003e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	08da      	lsrs	r2, r3, #3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3208      	adds	r2, #8
 8003e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	220f      	movs	r2, #15
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	08da      	lsrs	r2, r3, #3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3208      	adds	r2, #8
 8003e98:	6939      	ldr	r1, [r7, #16]
 8003e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 0203 	and.w	r2, r3, #3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80b2 	beq.w	8004044 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee0:	4b61      	ldr	r3, [pc, #388]	@ (8004068 <HAL_GPIO_Init+0x2fc>)
 8003ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee4:	4a60      	ldr	r2, [pc, #384]	@ (8004068 <HAL_GPIO_Init+0x2fc>)
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	6613      	str	r3, [r2, #96]	@ 0x60
 8003eec:	4b5e      	ldr	r3, [pc, #376]	@ (8004068 <HAL_GPIO_Init+0x2fc>)
 8003eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ef8:	4a5c      	ldr	r2, [pc, #368]	@ (800406c <HAL_GPIO_Init+0x300>)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	3302      	adds	r3, #2
 8003f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	220f      	movs	r2, #15
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f22:	d02b      	beq.n	8003f7c <HAL_GPIO_Init+0x210>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a52      	ldr	r2, [pc, #328]	@ (8004070 <HAL_GPIO_Init+0x304>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d025      	beq.n	8003f78 <HAL_GPIO_Init+0x20c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a51      	ldr	r2, [pc, #324]	@ (8004074 <HAL_GPIO_Init+0x308>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d01f      	beq.n	8003f74 <HAL_GPIO_Init+0x208>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a50      	ldr	r2, [pc, #320]	@ (8004078 <HAL_GPIO_Init+0x30c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d019      	beq.n	8003f70 <HAL_GPIO_Init+0x204>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a4f      	ldr	r2, [pc, #316]	@ (800407c <HAL_GPIO_Init+0x310>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <HAL_GPIO_Init+0x200>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a4e      	ldr	r2, [pc, #312]	@ (8004080 <HAL_GPIO_Init+0x314>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00d      	beq.n	8003f68 <HAL_GPIO_Init+0x1fc>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a4d      	ldr	r2, [pc, #308]	@ (8004084 <HAL_GPIO_Init+0x318>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <HAL_GPIO_Init+0x1f8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a4c      	ldr	r2, [pc, #304]	@ (8004088 <HAL_GPIO_Init+0x31c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <HAL_GPIO_Init+0x1f4>
 8003f5c:	2307      	movs	r3, #7
 8003f5e:	e00e      	b.n	8003f7e <HAL_GPIO_Init+0x212>
 8003f60:	2308      	movs	r3, #8
 8003f62:	e00c      	b.n	8003f7e <HAL_GPIO_Init+0x212>
 8003f64:	2306      	movs	r3, #6
 8003f66:	e00a      	b.n	8003f7e <HAL_GPIO_Init+0x212>
 8003f68:	2305      	movs	r3, #5
 8003f6a:	e008      	b.n	8003f7e <HAL_GPIO_Init+0x212>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	e006      	b.n	8003f7e <HAL_GPIO_Init+0x212>
 8003f70:	2303      	movs	r3, #3
 8003f72:	e004      	b.n	8003f7e <HAL_GPIO_Init+0x212>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e002      	b.n	8003f7e <HAL_GPIO_Init+0x212>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <HAL_GPIO_Init+0x212>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	f002 0203 	and.w	r2, r2, #3
 8003f84:	0092      	lsls	r2, r2, #2
 8003f86:	4093      	lsls	r3, r2
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f8e:	4937      	ldr	r1, [pc, #220]	@ (800406c <HAL_GPIO_Init+0x300>)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	089b      	lsrs	r3, r3, #2
 8003f94:	3302      	adds	r3, #2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800408c <HAL_GPIO_Init+0x320>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fc0:	4a32      	ldr	r2, [pc, #200]	@ (800408c <HAL_GPIO_Init+0x320>)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fc6:	4b31      	ldr	r3, [pc, #196]	@ (800408c <HAL_GPIO_Init+0x320>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fea:	4a28      	ldr	r2, [pc, #160]	@ (800408c <HAL_GPIO_Init+0x320>)
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ff0:	4b26      	ldr	r3, [pc, #152]	@ (800408c <HAL_GPIO_Init+0x320>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004014:	4a1d      	ldr	r2, [pc, #116]	@ (800408c <HAL_GPIO_Init+0x320>)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800401a:	4b1c      	ldr	r3, [pc, #112]	@ (800408c <HAL_GPIO_Init+0x320>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	43db      	mvns	r3, r3
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4013      	ands	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800403e:	4a13      	ldr	r2, [pc, #76]	@ (800408c <HAL_GPIO_Init+0x320>)
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3301      	adds	r3, #1
 8004048:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	f47f ae91 	bne.w	8003d7c <HAL_GPIO_Init+0x10>
  }
}
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40021000 	.word	0x40021000
 800406c:	40010000 	.word	0x40010000
 8004070:	48000400 	.word	0x48000400
 8004074:	48000800 	.word	0x48000800
 8004078:	48000c00 	.word	0x48000c00
 800407c:	48001000 	.word	0x48001000
 8004080:	48001400 	.word	0x48001400
 8004084:	48001800 	.word	0x48001800
 8004088:	48001c00 	.word	0x48001c00
 800408c:	40010400 	.word	0x40010400

08004090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	807b      	strh	r3, [r7, #2]
 800409c:	4613      	mov	r3, r2
 800409e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040a0:	787b      	ldrb	r3, [r7, #1]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040ac:	e002      	b.n	80040b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040ae:	887a      	ldrh	r2, [r7, #2]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040d2:	887a      	ldrh	r2, [r7, #2]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4013      	ands	r3, r2
 80040d8:	041a      	lsls	r2, r3, #16
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	43d9      	mvns	r1, r3
 80040de:	887b      	ldrh	r3, [r7, #2]
 80040e0:	400b      	ands	r3, r1
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	619a      	str	r2, [r3, #24]
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040fe:	4b08      	ldr	r3, [pc, #32]	@ (8004120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d006      	beq.n	8004118 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800410a:	4a05      	ldr	r2, [pc, #20]	@ (8004120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	4618      	mov	r0, r3
 8004114:	f000 f806 	bl	8004124 <HAL_GPIO_EXTI_Callback>
  }
}
 8004118:	bf00      	nop
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40010400 	.word	0x40010400

08004124 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e08d      	b.n	8004268 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d106      	bne.n	8004166 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fe fbd9 	bl	8002918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2224      	movs	r2, #36	@ 0x24
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800418a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800419a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d107      	bne.n	80041b4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041b0:	609a      	str	r2, [r3, #8]
 80041b2:	e006      	b.n	80041c2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80041c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d108      	bne.n	80041dc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	e007      	b.n	80041ec <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041fe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800420e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69d9      	ldr	r1, [r3, #28]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1a      	ldr	r2, [r3, #32]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	461a      	mov	r2, r3
 800427c:	460b      	mov	r3, r1
 800427e:	817b      	strh	r3, [r7, #10]
 8004280:	4613      	mov	r3, r2
 8004282:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b20      	cmp	r3, #32
 800428e:	f040 80fd 	bne.w	800448c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_I2C_Master_Transmit+0x30>
 800429c:	2302      	movs	r3, #2
 800429e:	e0f6      	b.n	800448e <HAL_I2C_Master_Transmit+0x21e>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042a8:	f7fe fe92 	bl	8002fd0 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	2319      	movs	r3, #25
 80042b4:	2201      	movs	r2, #1
 80042b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 faf6 	bl	80048ac <I2C_WaitOnFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e0e1      	b.n	800448e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2221      	movs	r2, #33	@ 0x21
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2210      	movs	r2, #16
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	893a      	ldrh	r2, [r7, #8]
 80042ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2bff      	cmp	r3, #255	@ 0xff
 80042fa:	d906      	bls.n	800430a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	22ff      	movs	r2, #255	@ 0xff
 8004300:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004302:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	e007      	b.n	800431a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004314:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004318:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431e:	2b00      	cmp	r3, #0
 8004320:	d024      	beq.n	800436c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	781a      	ldrb	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004356:	b2db      	uxtb	r3, r3
 8004358:	3301      	adds	r3, #1
 800435a:	b2da      	uxtb	r2, r3
 800435c:	8979      	ldrh	r1, [r7, #10]
 800435e:	4b4e      	ldr	r3, [pc, #312]	@ (8004498 <HAL_I2C_Master_Transmit+0x228>)
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 fcf1 	bl	8004d4c <I2C_TransferConfig>
 800436a:	e066      	b.n	800443a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004370:	b2da      	uxtb	r2, r3
 8004372:	8979      	ldrh	r1, [r7, #10]
 8004374:	4b48      	ldr	r3, [pc, #288]	@ (8004498 <HAL_I2C_Master_Transmit+0x228>)
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fce6 	bl	8004d4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004380:	e05b      	b.n	800443a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	6a39      	ldr	r1, [r7, #32]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fae9 	bl	800495e <I2C_WaitOnTXISFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e07b      	b.n	800448e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d034      	beq.n	800443a <HAL_I2C_Master_Transmit+0x1ca>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d130      	bne.n	800443a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	2200      	movs	r2, #0
 80043e0:	2180      	movs	r1, #128	@ 0x80
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fa62 	bl	80048ac <I2C_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e04d      	b.n	800448e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2bff      	cmp	r3, #255	@ 0xff
 80043fa:	d90e      	bls.n	800441a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	22ff      	movs	r2, #255	@ 0xff
 8004400:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004406:	b2da      	uxtb	r2, r3
 8004408:	8979      	ldrh	r1, [r7, #10]
 800440a:	2300      	movs	r3, #0
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 fc9a 	bl	8004d4c <I2C_TransferConfig>
 8004418:	e00f      	b.n	800443a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004428:	b2da      	uxtb	r2, r3
 800442a:	8979      	ldrh	r1, [r7, #10]
 800442c:	2300      	movs	r3, #0
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fc89 	bl	8004d4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d19e      	bne.n	8004382 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	6a39      	ldr	r1, [r7, #32]
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 facf 	bl	80049ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e01a      	b.n	800448e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2220      	movs	r2, #32
 800445e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <HAL_I2C_Master_Transmit+0x22c>)
 800446c:	400b      	ands	r3, r1
 800446e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	e000      	b.n	800448e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800448c:	2302      	movs	r3, #2
  }
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	80002000 	.word	0x80002000
 800449c:	fe00e800 	.word	0xfe00e800

080044a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	461a      	mov	r2, r3
 80044ac:	460b      	mov	r3, r1
 80044ae:	817b      	strh	r3, [r7, #10]
 80044b0:	4613      	mov	r3, r2
 80044b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b20      	cmp	r3, #32
 80044be:	f040 80db 	bne.w	8004678 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_I2C_Master_Receive+0x30>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e0d4      	b.n	800467a <HAL_I2C_Master_Receive+0x1da>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044d8:	f7fe fd7a 	bl	8002fd0 <HAL_GetTick>
 80044dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2319      	movs	r3, #25
 80044e4:	2201      	movs	r2, #1
 80044e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f9de 	bl	80048ac <I2C_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e0bf      	b.n	800467a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2222      	movs	r2, #34	@ 0x22
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2210      	movs	r2, #16
 8004506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	893a      	ldrh	r2, [r7, #8]
 800451a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004526:	b29b      	uxth	r3, r3
 8004528:	2bff      	cmp	r3, #255	@ 0xff
 800452a:	d90e      	bls.n	800454a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004536:	b2da      	uxtb	r2, r3
 8004538:	8979      	ldrh	r1, [r7, #10]
 800453a:	4b52      	ldr	r3, [pc, #328]	@ (8004684 <HAL_I2C_Master_Receive+0x1e4>)
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fc02 	bl	8004d4c <I2C_TransferConfig>
 8004548:	e06d      	b.n	8004626 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004558:	b2da      	uxtb	r2, r3
 800455a:	8979      	ldrh	r1, [r7, #10]
 800455c:	4b49      	ldr	r3, [pc, #292]	@ (8004684 <HAL_I2C_Master_Receive+0x1e4>)
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fbf1 	bl	8004d4c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800456a:	e05c      	b.n	8004626 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	6a39      	ldr	r1, [r7, #32]
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fa7f 	bl	8004a74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e07c      	b.n	800467a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d034      	beq.n	8004626 <HAL_I2C_Master_Receive+0x186>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d130      	bne.n	8004626 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2180      	movs	r1, #128	@ 0x80
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f96c 	bl	80048ac <I2C_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e04d      	b.n	800467a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2bff      	cmp	r3, #255	@ 0xff
 80045e6:	d90e      	bls.n	8004606 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	22ff      	movs	r2, #255	@ 0xff
 80045ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	8979      	ldrh	r1, [r7, #10]
 80045f6:	2300      	movs	r3, #0
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fba4 	bl	8004d4c <I2C_TransferConfig>
 8004604:	e00f      	b.n	8004626 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004614:	b2da      	uxtb	r2, r3
 8004616:	8979      	ldrh	r1, [r7, #10]
 8004618:	2300      	movs	r3, #0
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fb93 	bl	8004d4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d19d      	bne.n	800456c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	6a39      	ldr	r1, [r7, #32]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f9d9 	bl	80049ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e01a      	b.n	800467a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2220      	movs	r2, #32
 800464a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b0c      	ldr	r3, [pc, #48]	@ (8004688 <HAL_I2C_Master_Receive+0x1e8>)
 8004658:	400b      	ands	r3, r1
 800465a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	80002400 	.word	0x80002400
 8004688:	fe00e800 	.word	0xfe00e800

0800468c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	@ 0x28
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	460b      	mov	r3, r1
 800469a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	f040 80d6 	bne.w	800485a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046bc:	d101      	bne.n	80046c2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80046be:	2302      	movs	r3, #2
 80046c0:	e0cc      	b.n	800485c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_I2C_IsDeviceReady+0x44>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e0c5      	b.n	800485c <HAL_I2C_IsDeviceReady+0x1d0>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2224      	movs	r2, #36	@ 0x24
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d107      	bne.n	80046fe <HAL_I2C_IsDeviceReady+0x72>
 80046ee:	897b      	ldrh	r3, [r7, #10]
 80046f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80046f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80046fc:	e006      	b.n	800470c <HAL_I2C_IsDeviceReady+0x80>
 80046fe:	897b      	ldrh	r3, [r7, #10]
 8004700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004704:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004708:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004712:	f7fe fc5d 	bl	8002fd0 <HAL_GetTick>
 8004716:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b20      	cmp	r3, #32
 8004724:	bf0c      	ite	eq
 8004726:	2301      	moveq	r3, #1
 8004728:	2300      	movne	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b10      	cmp	r3, #16
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004744:	e034      	b.n	80047b0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d01a      	beq.n	8004784 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800474e:	f7fe fc3f 	bl	8002fd0 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d302      	bcc.n	8004764 <HAL_I2C_IsDeviceReady+0xd8>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10f      	bne.n	8004784 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004770:	f043 0220 	orr.w	r2, r3, #32
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e06b      	b.n	800485c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b20      	cmp	r3, #32
 8004790:	bf0c      	ite	eq
 8004792:	2301      	moveq	r3, #1
 8004794:	2300      	movne	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	bf0c      	ite	eq
 80047a8:	2301      	moveq	r3, #1
 80047aa:	2300      	movne	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80047b0:	7ffb      	ldrb	r3, [r7, #31]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <HAL_I2C_IsDeviceReady+0x130>
 80047b6:	7fbb      	ldrb	r3, [r7, #30]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0c4      	beq.n	8004746 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b10      	cmp	r3, #16
 80047c8:	d01a      	beq.n	8004800 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2200      	movs	r2, #0
 80047d2:	2120      	movs	r1, #32
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f869 	bl	80048ac <I2C_WaitOnFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e03b      	b.n	800485c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2220      	movs	r2, #32
 80047ea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e02d      	b.n	800485c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	2120      	movs	r1, #32
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f84e 	bl	80048ac <I2C_WaitOnFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e020      	b.n	800485c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2210      	movs	r2, #16
 8004820:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2220      	movs	r2, #32
 8004828:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	3301      	adds	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	f63f af56 	bhi.w	80046e6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004846:	f043 0220 	orr.w	r2, r3, #32
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800485a:	2302      	movs	r3, #2
  }
}
 800485c:	4618      	mov	r0, r3
 800485e:	3720      	adds	r7, #32
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	d103      	bne.n	8004882 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2200      	movs	r2, #0
 8004880:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b01      	cmp	r3, #1
 800488e:	d007      	beq.n	80048a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	619a      	str	r2, [r3, #24]
  }
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048bc:	e03b      	b.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	6839      	ldr	r1, [r7, #0]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f962 	bl	8004b8c <I2C_IsErrorOccurred>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e041      	b.n	8004956 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d02d      	beq.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048da:	f7fe fb79 	bl	8002fd0 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d122      	bne.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4013      	ands	r3, r2
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	429a      	cmp	r2, r3
 800490c:	d113      	bne.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	f043 0220 	orr.w	r2, r3, #32
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e00f      	b.n	8004956 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699a      	ldr	r2, [r3, #24]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4013      	ands	r3, r2
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	429a      	cmp	r2, r3
 8004944:	bf0c      	ite	eq
 8004946:	2301      	moveq	r3, #1
 8004948:	2300      	movne	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	429a      	cmp	r2, r3
 8004952:	d0b4      	beq.n	80048be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800496a:	e033      	b.n	80049d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f90b 	bl	8004b8c <I2C_IsErrorOccurred>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e031      	b.n	80049e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d025      	beq.n	80049d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004988:	f7fe fb22 	bl	8002fd0 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	429a      	cmp	r2, r3
 8004996:	d302      	bcc.n	800499e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d11a      	bne.n	80049d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d013      	beq.n	80049d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b0:	f043 0220 	orr.w	r2, r3, #32
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e007      	b.n	80049e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d1c4      	bne.n	800496c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049f8:	e02f      	b.n	8004a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f8c4 	bl	8004b8c <I2C_IsErrorOccurred>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e02d      	b.n	8004a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0e:	f7fe fadf 	bl	8002fd0 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d302      	bcc.n	8004a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d11a      	bne.n	8004a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d013      	beq.n	8004a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a36:	f043 0220 	orr.w	r2, r3, #32
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e007      	b.n	8004a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d1c8      	bne.n	80049fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004a84:	e071      	b.n	8004b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f87e 	bl	8004b8c <I2C_IsErrorOccurred>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d13b      	bne.n	8004b20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d138      	bne.n	8004b20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d105      	bne.n	8004ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d121      	bne.n	8004b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2210      	movs	r2, #16
 8004adc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	4b24      	ldr	r3, [pc, #144]	@ (8004b88 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004af8:	400b      	ands	r3, r1
 8004afa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	75fb      	strb	r3, [r7, #23]
 8004b18:	e002      	b.n	8004b20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004b20:	f7fe fa56 	bl	8002fd0 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d302      	bcc.n	8004b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d119      	bne.n	8004b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d116      	bne.n	8004b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d00f      	beq.n	8004b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	f043 0220 	orr.w	r2, r3, #32
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d002      	beq.n	8004b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d083      	beq.n	8004a86 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	fe00e800 	.word	0xfe00e800

08004b8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	@ 0x28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d068      	beq.n	8004c8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2210      	movs	r2, #16
 8004bbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bc0:	e049      	b.n	8004c56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d045      	beq.n	8004c56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bca:	f7fe fa01 	bl	8002fd0 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d302      	bcc.n	8004be0 <I2C_IsErrorOccurred+0x54>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d13a      	bne.n	8004c56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bf2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c02:	d121      	bne.n	8004c48 <I2C_IsErrorOccurred+0xbc>
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c0a:	d01d      	beq.n	8004c48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d01a      	beq.n	8004c48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c22:	f7fe f9d5 	bl	8002fd0 <HAL_GetTick>
 8004c26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c28:	e00e      	b.n	8004c48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c2a:	f7fe f9d1 	bl	8002fd0 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b19      	cmp	r3, #25
 8004c36:	d907      	bls.n	8004c48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	f043 0320 	orr.w	r3, r3, #32
 8004c3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004c46:	e006      	b.n	8004c56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d1e9      	bne.n	8004c2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d003      	beq.n	8004c6c <I2C_IsErrorOccurred+0xe0>
 8004c64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0aa      	beq.n	8004bc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d103      	bne.n	8004c7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	f043 0304 	orr.w	r3, r3, #4
 8004c82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00b      	beq.n	8004cb4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00b      	beq.n	8004cd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	f043 0308 	orr.w	r3, r3, #8
 8004cc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00b      	beq.n	8004cf8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	f043 0302 	orr.w	r3, r3, #2
 8004ce6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01c      	beq.n	8004d3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f7ff fdaf 	bl	8004864 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	4b0d      	ldr	r3, [pc, #52]	@ (8004d48 <I2C_IsErrorOccurred+0x1bc>)
 8004d12:	400b      	ands	r3, r1
 8004d14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3728      	adds	r7, #40	@ 0x28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	fe00e800 	.word	0xfe00e800

08004d4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	817b      	strh	r3, [r7, #10]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d5e:	897b      	ldrh	r3, [r7, #10]
 8004d60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d64:	7a7b      	ldrb	r3, [r7, #9]
 8004d66:	041b      	lsls	r3, r3, #16
 8004d68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	0d5b      	lsrs	r3, r3, #21
 8004d86:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004d8a:	4b08      	ldr	r3, [pc, #32]	@ (8004dac <I2C_TransferConfig+0x60>)
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	ea02 0103 	and.w	r1, r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	03ff63ff 	.word	0x03ff63ff

08004db0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d138      	bne.n	8004e38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e032      	b.n	8004e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2224      	movs	r2, #36	@ 0x24
 8004de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6819      	ldr	r1, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	e000      	b.n	8004e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e38:	2302      	movs	r3, #2
  }
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d139      	bne.n	8004ed0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e033      	b.n	8004ed2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2224      	movs	r2, #36	@ 0x24
 8004e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0201 	bic.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e000      	b.n	8004ed2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
  }
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b086      	sub	sp, #24
 8004ee2:	af02      	add	r7, sp, #8
 8004ee4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e101      	b.n	80050f4 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f00a f8c3 	bl	800f090 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f003 ff0a 	bl	8008d36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	7c1a      	ldrb	r2, [r3, #16]
 8004f2a:	f88d 2000 	strb.w	r2, [sp]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f32:	f003 fe25 	bl	8008b80 <USB_CoreInit>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0d5      	b.n	80050f4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f003 ff02 	bl	8008d58 <USB_SetCurrentMode>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e0c6      	b.n	80050f4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f66:	2300      	movs	r3, #0
 8004f68:	73fb      	strb	r3, [r7, #15]
 8004f6a:	e04a      	b.n	8005002 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f6c:	7bfa      	ldrb	r2, [r7, #15]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	3315      	adds	r3, #21
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f80:	7bfa      	ldrb	r2, [r7, #15]
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	3314      	adds	r3, #20
 8004f90:	7bfa      	ldrb	r2, [r7, #15]
 8004f92:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f94:	7bfa      	ldrb	r2, [r7, #15]
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	b298      	uxth	r0, r3
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	332e      	adds	r3, #46	@ 0x2e
 8004fa8:	4602      	mov	r2, r0
 8004faa:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fac:	7bfa      	ldrb	r2, [r7, #15]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3318      	adds	r3, #24
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fc0:	7bfa      	ldrb	r2, [r7, #15]
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	331c      	adds	r3, #28
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fd4:	7bfa      	ldrb	r2, [r7, #15]
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	3320      	adds	r3, #32
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fe8:	7bfa      	ldrb	r2, [r7, #15]
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	3324      	adds	r3, #36	@ 0x24
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	3301      	adds	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	791b      	ldrb	r3, [r3, #4]
 8005006:	7bfa      	ldrb	r2, [r7, #15]
 8005008:	429a      	cmp	r2, r3
 800500a:	d3af      	bcc.n	8004f6c <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800500c:	2300      	movs	r3, #0
 800500e:	73fb      	strb	r3, [r7, #15]
 8005010:	e044      	b.n	800509c <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005012:	7bfa      	ldrb	r2, [r7, #15]
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005024:	2200      	movs	r2, #0
 8005026:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005028:	7bfa      	ldrb	r2, [r7, #15]
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800503a:	7bfa      	ldrb	r2, [r7, #15]
 800503c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800503e:	7bfa      	ldrb	r2, [r7, #15]
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	4613      	mov	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005054:	7bfa      	ldrb	r2, [r7, #15]
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	4613      	mov	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800506a:	7bfa      	ldrb	r2, [r7, #15]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005080:	7bfa      	ldrb	r2, [r7, #15]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	3301      	adds	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	791b      	ldrb	r3, [r3, #4]
 80050a0:	7bfa      	ldrb	r2, [r7, #15]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d3b5      	bcc.n	8005012 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	7c1a      	ldrb	r2, [r3, #16]
 80050ae:	f88d 2000 	strb.w	r2, [sp]
 80050b2:	3304      	adds	r3, #4
 80050b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050b6:	f003 fe9b 	bl	8008df0 <USB_DevInit>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e013      	b.n	80050f4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	7b1b      	ldrb	r3, [r3, #12]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d102      	bne.n	80050e8 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f001 f86e 	bl	80061c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f004 fe52 	bl	8009d96 <USB_DevDisconnect>

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_PCD_Start+0x1c>
 8005114:	2302      	movs	r3, #2
 8005116:	e01c      	b.n	8005152 <HAL_PCD_Start+0x56>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7b5b      	ldrb	r3, [r3, #13]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d105      	bne.n	8005134 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f003 fdeb 	bl	8008d14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f004 fe06 	bl	8009d54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800515a:	b590      	push	{r4, r7, lr}
 800515c:	b08d      	sub	sp, #52	@ 0x34
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f004 fec4 	bl	8009efe <USB_GetMode>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	f040 8481 	bne.w	8005a80 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f004 fe28 	bl	8009dd8 <USB_ReadInterrupts>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 8477 	beq.w	8005a7e <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	0a1b      	lsrs	r3, r3, #8
 800519a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f004 fe15 	bl	8009dd8 <USB_ReadInterrupts>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d107      	bne.n	80051c8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f002 0202 	and.w	r2, r2, #2
 80051c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f004 fe03 	bl	8009dd8 <USB_ReadInterrupts>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d161      	bne.n	80052a0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0210 	bic.w	r2, r2, #16
 80051ea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	f003 020f 	and.w	r2, r3, #15
 80051f8:	4613      	mov	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	4413      	add	r3, r2
 8005208:	3304      	adds	r3, #4
 800520a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	0c5b      	lsrs	r3, r3, #17
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	2b02      	cmp	r3, #2
 8005216:	d124      	bne.n	8005262 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d035      	beq.n	8005290 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	091b      	lsrs	r3, r3, #4
 800522c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800522e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005232:	b29b      	uxth	r3, r3
 8005234:	461a      	mov	r2, r3
 8005236:	6a38      	ldr	r0, [r7, #32]
 8005238:	f004 fc3a 	bl	8009ab0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	091b      	lsrs	r3, r3, #4
 8005244:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005248:	441a      	add	r2, r3
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800525a:	441a      	add	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	615a      	str	r2, [r3, #20]
 8005260:	e016      	b.n	8005290 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	0c5b      	lsrs	r3, r3, #17
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	2b06      	cmp	r3, #6
 800526c:	d110      	bne.n	8005290 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005274:	2208      	movs	r2, #8
 8005276:	4619      	mov	r1, r3
 8005278:	6a38      	ldr	r0, [r7, #32]
 800527a:	f004 fc19 	bl	8009ab0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	695a      	ldr	r2, [r3, #20]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800528a:	441a      	add	r2, r3
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0210 	orr.w	r2, r2, #16
 800529e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f004 fd97 	bl	8009dd8 <USB_ReadInterrupts>
 80052aa:	4603      	mov	r3, r0
 80052ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80052b4:	f040 80a7 	bne.w	8005406 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f004 fd9c 	bl	8009dfe <USB_ReadDevAllOutEpInterrupt>
 80052c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80052c8:	e099      	b.n	80053fe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80052ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 808e 	beq.w	80053f2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	4611      	mov	r1, r2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f004 fdc0 	bl	8009e66 <USB_ReadDevOutEPInterrupt>
 80052e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00c      	beq.n	800530c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052fe:	461a      	mov	r2, r3
 8005300:	2301      	movs	r3, #1
 8005302:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005304:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fe82 	bl	8006010 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00c      	beq.n	8005330 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005322:	461a      	mov	r2, r3
 8005324:	2308      	movs	r3, #8
 8005326:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005328:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 febe 	bl	80060ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f003 0310 	and.w	r3, r3, #16
 8005336:	2b00      	cmp	r3, #0
 8005338:	d008      	beq.n	800534c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005346:	461a      	mov	r2, r3
 8005348:	2310      	movs	r3, #16
 800534a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d030      	beq.n	80053b8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800535e:	2b80      	cmp	r3, #128	@ 0x80
 8005360:	d109      	bne.n	8005376 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005370:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005374:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005378:	4613      	mov	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	4413      	add	r3, r2
 8005388:	3304      	adds	r3, #4
 800538a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	78db      	ldrb	r3, [r3, #3]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d108      	bne.n	80053a6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2200      	movs	r2, #0
 8005398:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	b2db      	uxtb	r3, r3
 800539e:	4619      	mov	r1, r3
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f009 ffb9 	bl	800f318 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b2:	461a      	mov	r2, r3
 80053b4:	2302      	movs	r3, #2
 80053b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ce:	461a      	mov	r2, r3
 80053d0:	2320      	movs	r3, #32
 80053d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ea:	461a      	mov	r2, r3
 80053ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80053f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	3301      	adds	r3, #1
 80053f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80053fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005400:	2b00      	cmp	r3, #0
 8005402:	f47f af62 	bne.w	80052ca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f004 fce4 	bl	8009dd8 <USB_ReadInterrupts>
 8005410:	4603      	mov	r3, r0
 8005412:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005416:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800541a:	f040 80a4 	bne.w	8005566 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f004 fd05 	bl	8009e32 <USB_ReadDevAllInEpInterrupt>
 8005428:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800542e:	e096      	b.n	800555e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 808b 	beq.w	8005552 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	4611      	mov	r1, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f004 fd2b 	bl	8009ea2 <USB_ReadDevInEPInterrupt>
 800544c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d020      	beq.n	800549a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	2201      	movs	r2, #1
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800546c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	43db      	mvns	r3, r3
 8005472:	69f9      	ldr	r1, [r7, #28]
 8005474:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005478:	4013      	ands	r3, r2
 800547a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005488:	461a      	mov	r2, r3
 800548a:	2301      	movs	r3, #1
 800548c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	b2db      	uxtb	r3, r3
 8005492:	4619      	mov	r1, r3
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f009 feaa 	bl	800f1ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b0:	461a      	mov	r2, r3
 80054b2:	2308      	movs	r3, #8
 80054b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054cc:	461a      	mov	r2, r3
 80054ce:	2310      	movs	r3, #16
 80054d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80054dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e8:	461a      	mov	r2, r3
 80054ea:	2340      	movs	r3, #64	@ 0x40
 80054ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d023      	beq.n	8005540 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80054f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054fa:	6a38      	ldr	r0, [r7, #32]
 80054fc:	f003 fdc0 	bl	8009080 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005502:	4613      	mov	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	3310      	adds	r3, #16
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	4413      	add	r3, r2
 8005510:	3304      	adds	r3, #4
 8005512:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	78db      	ldrb	r3, [r3, #3]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d108      	bne.n	800552e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2200      	movs	r2, #0
 8005520:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	b2db      	uxtb	r3, r3
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f009 ff07 	bl	800f33c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800553a:	461a      	mov	r2, r3
 800553c:	2302      	movs	r3, #2
 800553e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800554a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fcd6 	bl	8005efe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	3301      	adds	r3, #1
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555a:	085b      	lsrs	r3, r3, #1
 800555c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800555e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005560:	2b00      	cmp	r3, #0
 8005562:	f47f af65 	bne.w	8005430 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f004 fc34 	bl	8009dd8 <USB_ReadInterrupts>
 8005570:	4603      	mov	r3, r0
 8005572:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005576:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800557a:	d122      	bne.n	80055c2 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800558a:	f023 0301 	bic.w	r3, r3, #1
 800558e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005596:	2b01      	cmp	r3, #1
 8005598:	d108      	bne.n	80055ac <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80055a2:	2100      	movs	r1, #0
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f00a f93b 	bl	800f820 <HAL_PCDEx_LPM_Callback>
 80055aa:	e002      	b.n	80055b2 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f009 fe8b 	bl	800f2c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80055c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f004 fc06 	bl	8009dd8 <USB_ReadInterrupts>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d6:	d112      	bne.n	80055fe <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d102      	bne.n	80055ee <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f009 fe47 	bl	800f27c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80055fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f004 fbe8 	bl	8009dd8 <USB_ReadInterrupts>
 8005608:	4603      	mov	r3, r0
 800560a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800560e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005612:	d121      	bne.n	8005658 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005622:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800562a:	2b00      	cmp	r3, #0
 800562c:	d111      	bne.n	8005652 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563c:	089b      	lsrs	r3, r3, #2
 800563e:	f003 020f 	and.w	r2, r3, #15
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005648:	2101      	movs	r1, #1
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f00a f8e8 	bl	800f820 <HAL_PCDEx_LPM_Callback>
 8005650:	e002      	b.n	8005658 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f009 fe12 	bl	800f27c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f004 fbbb 	bl	8009dd8 <USB_ReadInterrupts>
 8005662:	4603      	mov	r3, r0
 8005664:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800566c:	f040 80b6 	bne.w	80057dc <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800567e:	f023 0301 	bic.w	r3, r3, #1
 8005682:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2110      	movs	r1, #16
 800568a:	4618      	mov	r0, r3
 800568c:	f003 fcf8 	bl	8009080 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005690:	2300      	movs	r3, #0
 8005692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005694:	e046      	b.n	8005724 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a2:	461a      	mov	r2, r3
 80056a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80056ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d6:	461a      	mov	r2, r3
 80056d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005718:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800571c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800571e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005720:	3301      	adds	r3, #1
 8005722:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	791b      	ldrb	r3, [r3, #4]
 8005728:	461a      	mov	r2, r3
 800572a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572c:	4293      	cmp	r3, r2
 800572e:	d3b2      	bcc.n	8005696 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800573e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005742:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	7bdb      	ldrb	r3, [r3, #15]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d016      	beq.n	800577a <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800575c:	f043 030b 	orr.w	r3, r3, #11
 8005760:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800576a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576c:	69fa      	ldr	r2, [r7, #28]
 800576e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005772:	f043 030b 	orr.w	r3, r3, #11
 8005776:	6453      	str	r3, [r2, #68]	@ 0x44
 8005778:	e015      	b.n	80057a6 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005788:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800578c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005790:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057a0:	f043 030b 	orr.w	r3, r3, #11
 80057a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057b4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80057b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f004 fbca 	bl	8009f60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695a      	ldr	r2, [r3, #20]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80057da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f004 faf9 	bl	8009dd8 <USB_ReadInterrupts>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057f0:	d123      	bne.n	800583a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f004 fb8f 	bl	8009f1a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f003 fcb6 	bl	8009172 <USB_GetDevSpeed>
 8005806:	4603      	mov	r3, r0
 8005808:	461a      	mov	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681c      	ldr	r4, [r3, #0]
 8005812:	f001 fb13 	bl	8006e3c <HAL_RCC_GetHCLKFreq>
 8005816:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800581c:	461a      	mov	r2, r3
 800581e:	4620      	mov	r0, r4
 8005820:	f003 f9dc 	bl	8008bdc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f009 fd0a 	bl	800f23e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695a      	ldr	r2, [r3, #20]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005838:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f004 faca 	bl	8009dd8 <USB_ReadInterrupts>
 8005844:	4603      	mov	r3, r0
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b08      	cmp	r3, #8
 800584c:	d10a      	bne.n	8005864 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f009 fce7 	bl	800f222 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695a      	ldr	r2, [r3, #20]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f002 0208 	and.w	r2, r2, #8
 8005862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f004 fab5 	bl	8009dd8 <USB_ReadInterrupts>
 800586e:	4603      	mov	r3, r0
 8005870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005874:	2b80      	cmp	r3, #128	@ 0x80
 8005876:	d123      	bne.n	80058c0 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005884:	2301      	movs	r3, #1
 8005886:	627b      	str	r3, [r7, #36]	@ 0x24
 8005888:	e014      	b.n	80058b4 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800588e:	4613      	mov	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d105      	bne.n	80058ae <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 faf7 	bl	8005e9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	3301      	adds	r3, #1
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	791b      	ldrb	r3, [r3, #4]
 80058b8:	461a      	mov	r2, r3
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	4293      	cmp	r3, r2
 80058be:	d3e4      	bcc.n	800588a <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f004 fa87 	bl	8009dd8 <USB_ReadInterrupts>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058d4:	d13c      	bne.n	8005950 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058d6:	2301      	movs	r3, #1
 80058d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058da:	e02b      	b.n	8005934 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f0:	4613      	mov	r3, r2
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4413      	add	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	440b      	add	r3, r1
 80058fa:	3318      	adds	r3, #24
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d115      	bne.n	800592e <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005902:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005904:	2b00      	cmp	r3, #0
 8005906:	da12      	bge.n	800592e <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800590c:	4613      	mov	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	3317      	adds	r3, #23
 8005918:	2201      	movs	r2, #1
 800591a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005924:	b2db      	uxtb	r3, r3
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fab7 	bl	8005e9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	3301      	adds	r3, #1
 8005932:	627b      	str	r3, [r7, #36]	@ 0x24
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	791b      	ldrb	r3, [r3, #4]
 8005938:	461a      	mov	r2, r3
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	4293      	cmp	r3, r2
 800593e:	d3cd      	bcc.n	80058dc <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695a      	ldr	r2, [r3, #20]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800594e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4618      	mov	r0, r3
 8005956:	f004 fa3f 	bl	8009dd8 <USB_ReadInterrupts>
 800595a:	4603      	mov	r3, r0
 800595c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005960:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005964:	d156      	bne.n	8005a14 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005966:	2301      	movs	r3, #1
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
 800596a:	e045      	b.n	80059f8 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800596c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005980:	4613      	mov	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d12e      	bne.n	80059f2 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005994:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005996:	2b00      	cmp	r3, #0
 8005998:	da2b      	bge.n	80059f2 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80059a6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d121      	bne.n	80059f2 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b2:	4613      	mov	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80059c0:	2201      	movs	r2, #1
 80059c2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059ee:	6053      	str	r3, [r2, #4]
            break;
 80059f0:	e008      	b.n	8005a04 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	3301      	adds	r3, #1
 80059f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	791b      	ldrb	r3, [r3, #4]
 80059fc:	461a      	mov	r2, r3
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d3b3      	bcc.n	800596c <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f004 f9dd 	bl	8009dd8 <USB_ReadInterrupts>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a28:	d10a      	bne.n	8005a40 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f009 fc98 	bl	800f360 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695a      	ldr	r2, [r3, #20]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f004 f9c7 	bl	8009dd8 <USB_ReadInterrupts>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d115      	bne.n	8005a80 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f009 fc88 	bl	800f37c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6859      	ldr	r1, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	605a      	str	r2, [r3, #4]
 8005a7c:	e000      	b.n	8005a80 <HAL_PCD_IRQHandler+0x926>
      return;
 8005a7e:	bf00      	nop
    }
  }
}
 8005a80:	3734      	adds	r7, #52	@ 0x34
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd90      	pop	{r4, r7, pc}

08005a86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_PCD_SetAddress+0x1a>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e012      	b.n	8005ac6 <HAL_PCD_SetAddress+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	78fa      	ldrb	r2, [r7, #3]
 8005aac:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	78fa      	ldrb	r2, [r7, #3]
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f004 f926 	bl	8009d08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	4608      	mov	r0, r1
 8005ad8:	4611      	mov	r1, r2
 8005ada:	461a      	mov	r2, r3
 8005adc:	4603      	mov	r3, r0
 8005ade:	70fb      	strb	r3, [r7, #3]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	803b      	strh	r3, [r7, #0]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	da0f      	bge.n	8005b14 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	f003 020f 	and.w	r2, r3, #15
 8005afa:	4613      	mov	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	3310      	adds	r3, #16
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	4413      	add	r3, r2
 8005b08:	3304      	adds	r3, #4
 8005b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	705a      	strb	r2, [r3, #1]
 8005b12:	e00f      	b.n	8005b34 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	f003 020f 	and.w	r2, r3, #15
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4413      	add	r3, r2
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005b40:	883b      	ldrh	r3, [r7, #0]
 8005b42:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	78ba      	ldrb	r2, [r7, #2]
 8005b4e:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	785b      	ldrb	r3, [r3, #1]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d004      	beq.n	8005b62 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b62:	78bb      	ldrb	r3, [r7, #2]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d102      	bne.n	8005b6e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_PCD_EP_Open+0xae>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e00e      	b.n	8005b9a <HAL_PCD_EP_Open+0xcc>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68f9      	ldr	r1, [r7, #12]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f003 fb10 	bl	80091b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005b98:	7afb      	ldrb	r3, [r7, #11]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005bae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	da0f      	bge.n	8005bd6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	f003 020f 	and.w	r2, r3, #15
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	3310      	adds	r3, #16
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	3304      	adds	r3, #4
 8005bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	705a      	strb	r2, [r3, #1]
 8005bd4:	e00f      	b.n	8005bf6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bd6:	78fb      	ldrb	r3, [r7, #3]
 8005bd8:	f003 020f 	and.w	r2, r3, #15
 8005bdc:	4613      	mov	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	4413      	add	r3, r2
 8005bec:	3304      	adds	r3, #4
 8005bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_PCD_EP_Close+0x6e>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e00e      	b.n	8005c2e <HAL_PCD_EP_Close+0x8c>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68f9      	ldr	r1, [r7, #12]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f003 fb4e 	bl	80092c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b086      	sub	sp, #24
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	460b      	mov	r3, r1
 8005c44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c46:	7afb      	ldrb	r3, [r7, #11]
 8005c48:	f003 020f 	and.w	r2, r3, #15
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2200      	movs	r2, #0
 8005c76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c78:	7afb      	ldrb	r3, [r7, #11]
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6979      	ldr	r1, [r7, #20]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f003 fbf4 	bl	8009478 <USB_EPStartXfer>

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	f003 020f 	and.w	r2, r3, #15
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005cbc:	681b      	ldr	r3, [r3, #0]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b086      	sub	sp, #24
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cda:	7afb      	ldrb	r3, [r7, #11]
 8005cdc:	f003 020f 	and.w	r2, r3, #15
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	3310      	adds	r3, #16
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	3304      	adds	r3, #4
 8005cf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2200      	movs	r2, #0
 8005d02:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2201      	movs	r2, #1
 8005d08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d0a:	7afb      	ldrb	r3, [r7, #11]
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6979      	ldr	r1, [r7, #20]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f003 fbab 	bl	8009478 <USB_EPStartXfer>

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	7912      	ldrb	r2, [r2, #4]
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d901      	bls.n	8005d4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e04e      	b.n	8005de8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da0f      	bge.n	8005d72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	f003 020f 	and.w	r2, r3, #15
 8005d58:	4613      	mov	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	3310      	adds	r3, #16
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	4413      	add	r3, r2
 8005d66:	3304      	adds	r3, #4
 8005d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	705a      	strb	r2, [r3, #1]
 8005d70:	e00d      	b.n	8005d8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4413      	add	r3, r2
 8005d84:	3304      	adds	r3, #4
 8005d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_PCD_EP_SetStall+0x82>
 8005daa:	2302      	movs	r3, #2
 8005dac:	e01c      	b.n	8005de8 <HAL_PCD_EP_SetStall+0xbc>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68f9      	ldr	r1, [r7, #12]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f003 fecf 	bl	8009b60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d108      	bne.n	8005dde <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f004 f8c1 	bl	8009f60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	7912      	ldrb	r2, [r2, #4]
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e042      	b.n	8005e94 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	da0f      	bge.n	8005e36 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	f003 020f 	and.w	r2, r3, #15
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	3310      	adds	r3, #16
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	4413      	add	r3, r2
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	705a      	strb	r2, [r3, #1]
 8005e34:	e00f      	b.n	8005e56 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	f003 020f 	and.w	r2, r3, #15
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_PCD_EP_ClrStall+0x86>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e00e      	b.n	8005e94 <HAL_PCD_EP_ClrStall+0xa4>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68f9      	ldr	r1, [r7, #12]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f003 fed9 	bl	8009c3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	da0c      	bge.n	8005eca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	f003 020f 	and.w	r2, r3, #15
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	3310      	adds	r3, #16
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e00c      	b.n	8005ee4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	f003 020f 	and.w	r2, r3, #15
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68f9      	ldr	r1, [r7, #12]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f003 fcfc 	bl	80098e8 <USB_EPStopXfer>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005ef4:	7afb      	ldrb	r3, [r7, #11]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b088      	sub	sp, #32
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	4613      	mov	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	3310      	adds	r3, #16
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4413      	add	r3, r2
 8005f22:	3304      	adds	r3, #4
 8005f24:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	695a      	ldr	r2, [r3, #20]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d901      	bls.n	8005f36 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e067      	b.n	8006006 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d902      	bls.n	8005f52 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	3303      	adds	r3, #3
 8005f56:	089b      	lsrs	r3, r3, #2
 8005f58:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f5a:	e026      	b.n	8005faa <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d902      	bls.n	8005f78 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	3303      	adds	r3, #3
 8005f7c:	089b      	lsrs	r3, r3, #2
 8005f7e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	68d9      	ldr	r1, [r3, #12]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	6978      	ldr	r0, [r7, #20]
 8005f8e:	f003 fd55 	bl	8009a3c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	441a      	add	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	441a      	add	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d809      	bhi.n	8005fd4 <PCD_WriteEmptyTxFifo+0xd6>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d203      	bcs.n	8005fd4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1c3      	bne.n	8005f5c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d811      	bhi.n	8006004 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	6939      	ldr	r1, [r7, #16]
 8005ffc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006000:	4013      	ands	r3, r2
 8006002:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3720      	adds	r7, #32
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	333c      	adds	r3, #60	@ 0x3c
 8006028:	3304      	adds	r3, #4
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4a19      	ldr	r2, [pc, #100]	@ (80060a8 <PCD_EP_OutXfrComplete_int+0x98>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d124      	bne.n	8006090 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00a      	beq.n	8006066 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800605c:	461a      	mov	r2, r3
 800605e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006062:	6093      	str	r3, [r2, #8]
 8006064:	e01a      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607c:	461a      	mov	r2, r3
 800607e:	2320      	movs	r3, #32
 8006080:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f009 f895 	bl	800f1b8 <HAL_PCD_DataOutStageCallback>
 800608e:	e005      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f009 f88e 	bl	800f1b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	4f54310a 	.word	0x4f54310a

080060ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	333c      	adds	r3, #60	@ 0x3c
 80060c4:	3304      	adds	r3, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006110 <PCD_EP_OutSetupPacket_int+0x64>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d90e      	bls.n	8006100 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d009      	beq.n	8006100 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f8:	461a      	mov	r2, r3
 80060fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f009 f847 	bl	800f194 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	4f54300a 	.word	0x4f54300a

08006114 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
 8006120:	4613      	mov	r3, r2
 8006122:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d107      	bne.n	8006142 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006132:	883b      	ldrh	r3, [r7, #0]
 8006134:	0419      	lsls	r1, r3, #16
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	430a      	orrs	r2, r1
 800613e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006140:	e028      	b.n	8006194 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006148:	0c1b      	lsrs	r3, r3, #16
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	4413      	add	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006150:	2300      	movs	r3, #0
 8006152:	73fb      	strb	r3, [r7, #15]
 8006154:	e00d      	b.n	8006172 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	3340      	adds	r3, #64	@ 0x40
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	4413      	add	r3, r2
 800616a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	3301      	adds	r3, #1
 8006170:	73fb      	strb	r3, [r7, #15]
 8006172:	7bfa      	ldrb	r2, [r7, #15]
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	3b01      	subs	r3, #1
 8006178:	429a      	cmp	r2, r3
 800617a:	d3ec      	bcc.n	8006156 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800617c:	883b      	ldrh	r3, [r7, #0]
 800617e:	0418      	lsls	r0, r3, #16
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	3b01      	subs	r3, #1
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	4302      	orrs	r2, r0
 800618c:	3340      	adds	r3, #64	@ 0x40
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	887a      	ldrh	r2, [r7, #2]
 80061b4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061f6:	f043 0303 	orr.w	r3, r3, #3
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006210:	4b04      	ldr	r3, [pc, #16]	@ (8006224 <HAL_PWREx_GetVoltageRange+0x18>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006218:	4618      	mov	r0, r3
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40007000 	.word	0x40007000

08006228 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006236:	d130      	bne.n	800629a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006238:	4b23      	ldr	r3, [pc, #140]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006244:	d038      	beq.n	80062b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006246:	4b20      	ldr	r3, [pc, #128]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800624e:	4a1e      	ldr	r2, [pc, #120]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006250:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006254:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006256:	4b1d      	ldr	r3, [pc, #116]	@ (80062cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2232      	movs	r2, #50	@ 0x32
 800625c:	fb02 f303 	mul.w	r3, r2, r3
 8006260:	4a1b      	ldr	r2, [pc, #108]	@ (80062d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006262:	fba2 2303 	umull	r2, r3, r2, r3
 8006266:	0c9b      	lsrs	r3, r3, #18
 8006268:	3301      	adds	r3, #1
 800626a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800626c:	e002      	b.n	8006274 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3b01      	subs	r3, #1
 8006272:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006274:	4b14      	ldr	r3, [pc, #80]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800627c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006280:	d102      	bne.n	8006288 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1f2      	bne.n	800626e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006288:	4b0f      	ldr	r3, [pc, #60]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006294:	d110      	bne.n	80062b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e00f      	b.n	80062ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800629a:	4b0b      	ldr	r3, [pc, #44]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a6:	d007      	beq.n	80062b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80062a8:	4b07      	ldr	r3, [pc, #28]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062b0:	4a05      	ldr	r2, [pc, #20]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40007000 	.word	0x40007000
 80062cc:	20000000 	.word	0x20000000
 80062d0:	431bde83 	.word	0x431bde83

080062d4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80062d8:	4b05      	ldr	r3, [pc, #20]	@ (80062f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	4a04      	ldr	r2, [pc, #16]	@ (80062f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80062de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062e2:	6053      	str	r3, [r2, #4]
}
 80062e4:	bf00      	nop
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40007000 	.word	0x40007000

080062f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	f000 bc08 	b.w	8006b18 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006308:	4b96      	ldr	r3, [pc, #600]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f003 030c 	and.w	r3, r3, #12
 8006310:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006312:	4b94      	ldr	r3, [pc, #592]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 80e4 	beq.w	80064f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d007      	beq.n	8006340 <HAL_RCC_OscConfig+0x4c>
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	2b0c      	cmp	r3, #12
 8006334:	f040 808b 	bne.w	800644e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b01      	cmp	r3, #1
 800633c:	f040 8087 	bne.w	800644e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006340:	4b88      	ldr	r3, [pc, #544]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_RCC_OscConfig+0x64>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e3df      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1a      	ldr	r2, [r3, #32]
 800635c:	4b81      	ldr	r3, [pc, #516]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <HAL_RCC_OscConfig+0x7e>
 8006368:	4b7e      	ldr	r3, [pc, #504]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006370:	e005      	b.n	800637e <HAL_RCC_OscConfig+0x8a>
 8006372:	4b7c      	ldr	r3, [pc, #496]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006378:	091b      	lsrs	r3, r3, #4
 800637a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800637e:	4293      	cmp	r3, r2
 8006380:	d223      	bcs.n	80063ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fdac 	bl	8006ee4 <RCC_SetFlashLatencyFromMSIRange>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e3c0      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006396:	4b73      	ldr	r3, [pc, #460]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a72      	ldr	r2, [pc, #456]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800639c:	f043 0308 	orr.w	r3, r3, #8
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	4b70      	ldr	r3, [pc, #448]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	496d      	ldr	r1, [pc, #436]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063b4:	4b6b      	ldr	r3, [pc, #428]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	4968      	ldr	r1, [pc, #416]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	604b      	str	r3, [r1, #4]
 80063c8:	e025      	b.n	8006416 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063ca:	4b66      	ldr	r3, [pc, #408]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a65      	ldr	r2, [pc, #404]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063d0:	f043 0308 	orr.w	r3, r3, #8
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	4b63      	ldr	r3, [pc, #396]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	4960      	ldr	r1, [pc, #384]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063e8:	4b5e      	ldr	r3, [pc, #376]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	495b      	ldr	r1, [pc, #364]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d109      	bne.n	8006416 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fd6c 	bl	8006ee4 <RCC_SetFlashLatencyFromMSIRange>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e380      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006416:	f000 fc87 	bl	8006d28 <HAL_RCC_GetSysClockFreq>
 800641a:	4602      	mov	r2, r0
 800641c:	4b51      	ldr	r3, [pc, #324]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	091b      	lsrs	r3, r3, #4
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	4950      	ldr	r1, [pc, #320]	@ (8006568 <HAL_RCC_OscConfig+0x274>)
 8006428:	5ccb      	ldrb	r3, [r1, r3]
 800642a:	f003 031f 	and.w	r3, r3, #31
 800642e:	fa22 f303 	lsr.w	r3, r2, r3
 8006432:	4a4e      	ldr	r2, [pc, #312]	@ (800656c <HAL_RCC_OscConfig+0x278>)
 8006434:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006436:	4b4e      	ldr	r3, [pc, #312]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f7fc fbe4 	bl	8002c08 <HAL_InitTick>
 8006440:	4603      	mov	r3, r0
 8006442:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d052      	beq.n	80064f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	e364      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d032      	beq.n	80064bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006456:	4b43      	ldr	r3, [pc, #268]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a42      	ldr	r2, [pc, #264]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800645c:	f043 0301 	orr.w	r3, r3, #1
 8006460:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006462:	f7fc fdb5 	bl	8002fd0 <HAL_GetTick>
 8006466:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006468:	e008      	b.n	800647c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800646a:	f7fc fdb1 	bl	8002fd0 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e34d      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800647c:	4b39      	ldr	r3, [pc, #228]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0f0      	beq.n	800646a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006488:	4b36      	ldr	r3, [pc, #216]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a35      	ldr	r2, [pc, #212]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800648e:	f043 0308 	orr.w	r3, r3, #8
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	4b33      	ldr	r3, [pc, #204]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	4930      	ldr	r1, [pc, #192]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	492b      	ldr	r1, [pc, #172]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	604b      	str	r3, [r1, #4]
 80064ba:	e01a      	b.n	80064f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80064bc:	4b29      	ldr	r3, [pc, #164]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a28      	ldr	r2, [pc, #160]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80064c2:	f023 0301 	bic.w	r3, r3, #1
 80064c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064c8:	f7fc fd82 	bl	8002fd0 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064d0:	f7fc fd7e 	bl	8002fd0 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e31a      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064e2:	4b20      	ldr	r3, [pc, #128]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f0      	bne.n	80064d0 <HAL_RCC_OscConfig+0x1dc>
 80064ee:	e000      	b.n	80064f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d073      	beq.n	80065e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d005      	beq.n	8006510 <HAL_RCC_OscConfig+0x21c>
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	2b0c      	cmp	r3, #12
 8006508:	d10e      	bne.n	8006528 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b03      	cmp	r3, #3
 800650e:	d10b      	bne.n	8006528 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006510:	4b14      	ldr	r3, [pc, #80]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d063      	beq.n	80065e4 <HAL_RCC_OscConfig+0x2f0>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d15f      	bne.n	80065e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e2f7      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006530:	d106      	bne.n	8006540 <HAL_RCC_OscConfig+0x24c>
 8006532:	4b0c      	ldr	r3, [pc, #48]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a0b      	ldr	r2, [pc, #44]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	e025      	b.n	800658c <HAL_RCC_OscConfig+0x298>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006548:	d114      	bne.n	8006574 <HAL_RCC_OscConfig+0x280>
 800654a:	4b06      	ldr	r3, [pc, #24]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a05      	ldr	r2, [pc, #20]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	4b03      	ldr	r3, [pc, #12]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a02      	ldr	r2, [pc, #8]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800655c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	e013      	b.n	800658c <HAL_RCC_OscConfig+0x298>
 8006564:	40021000 	.word	0x40021000
 8006568:	08012454 	.word	0x08012454
 800656c:	20000000 	.word	0x20000000
 8006570:	20000004 	.word	0x20000004
 8006574:	4ba0      	ldr	r3, [pc, #640]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a9f      	ldr	r2, [pc, #636]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800657a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	4b9d      	ldr	r3, [pc, #628]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a9c      	ldr	r2, [pc, #624]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800658a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d013      	beq.n	80065bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006594:	f7fc fd1c 	bl	8002fd0 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800659c:	f7fc fd18 	bl	8002fd0 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b64      	cmp	r3, #100	@ 0x64
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e2b4      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065ae:	4b92      	ldr	r3, [pc, #584]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0x2a8>
 80065ba:	e014      	b.n	80065e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7fc fd08 	bl	8002fd0 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065c4:	f7fc fd04 	bl	8002fd0 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b64      	cmp	r3, #100	@ 0x64
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e2a0      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065d6:	4b88      	ldr	r3, [pc, #544]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f0      	bne.n	80065c4 <HAL_RCC_OscConfig+0x2d0>
 80065e2:	e000      	b.n	80065e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d060      	beq.n	80066b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d005      	beq.n	8006604 <HAL_RCC_OscConfig+0x310>
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b0c      	cmp	r3, #12
 80065fc:	d119      	bne.n	8006632 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d116      	bne.n	8006632 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006604:	4b7c      	ldr	r3, [pc, #496]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <HAL_RCC_OscConfig+0x328>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e27d      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800661c:	4b76      	ldr	r3, [pc, #472]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	061b      	lsls	r3, r3, #24
 800662a:	4973      	ldr	r1, [pc, #460]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800662c:	4313      	orrs	r3, r2
 800662e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006630:	e040      	b.n	80066b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d023      	beq.n	8006682 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800663a:	4b6f      	ldr	r3, [pc, #444]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a6e      	ldr	r2, [pc, #440]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006646:	f7fc fcc3 	bl	8002fd0 <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800664e:	f7fc fcbf 	bl	8002fd0 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e25b      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006660:	4b65      	ldr	r3, [pc, #404]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0f0      	beq.n	800664e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800666c:	4b62      	ldr	r3, [pc, #392]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	061b      	lsls	r3, r3, #24
 800667a:	495f      	ldr	r1, [pc, #380]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800667c:	4313      	orrs	r3, r2
 800667e:	604b      	str	r3, [r1, #4]
 8006680:	e018      	b.n	80066b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006682:	4b5d      	ldr	r3, [pc, #372]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a5c      	ldr	r2, [pc, #368]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800668c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668e:	f7fc fc9f 	bl	8002fd0 <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006696:	f7fc fc9b 	bl	8002fd0 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e237      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066a8:	4b53      	ldr	r3, [pc, #332]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f0      	bne.n	8006696 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d03c      	beq.n	800673a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01c      	beq.n	8006702 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066c8:	4b4b      	ldr	r3, [pc, #300]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80066ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ce:	4a4a      	ldr	r2, [pc, #296]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80066d0:	f043 0301 	orr.w	r3, r3, #1
 80066d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d8:	f7fc fc7a 	bl	8002fd0 <HAL_GetTick>
 80066dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066e0:	f7fc fc76 	bl	8002fd0 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e212      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066f2:	4b41      	ldr	r3, [pc, #260]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80066f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0ef      	beq.n	80066e0 <HAL_RCC_OscConfig+0x3ec>
 8006700:	e01b      	b.n	800673a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006702:	4b3d      	ldr	r3, [pc, #244]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006708:	4a3b      	ldr	r2, [pc, #236]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800670a:	f023 0301 	bic.w	r3, r3, #1
 800670e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006712:	f7fc fc5d 	bl	8002fd0 <HAL_GetTick>
 8006716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006718:	e008      	b.n	800672c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800671a:	f7fc fc59 	bl	8002fd0 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e1f5      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800672c:	4b32      	ldr	r3, [pc, #200]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800672e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1ef      	bne.n	800671a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 80a6 	beq.w	8006894 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006748:	2300      	movs	r3, #0
 800674a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800674c:	4b2a      	ldr	r3, [pc, #168]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800674e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10d      	bne.n	8006774 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006758:	4b27      	ldr	r3, [pc, #156]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800675a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800675c:	4a26      	ldr	r2, [pc, #152]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800675e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006762:	6593      	str	r3, [r2, #88]	@ 0x58
 8006764:	4b24      	ldr	r3, [pc, #144]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006770:	2301      	movs	r3, #1
 8006772:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006774:	4b21      	ldr	r3, [pc, #132]	@ (80067fc <HAL_RCC_OscConfig+0x508>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	d118      	bne.n	80067b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006780:	4b1e      	ldr	r3, [pc, #120]	@ (80067fc <HAL_RCC_OscConfig+0x508>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1d      	ldr	r2, [pc, #116]	@ (80067fc <HAL_RCC_OscConfig+0x508>)
 8006786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800678a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800678c:	f7fc fc20 	bl	8002fd0 <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006794:	f7fc fc1c 	bl	8002fd0 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e1b8      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a6:	4b15      	ldr	r3, [pc, #84]	@ (80067fc <HAL_RCC_OscConfig+0x508>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d108      	bne.n	80067cc <HAL_RCC_OscConfig+0x4d8>
 80067ba:	4b0f      	ldr	r3, [pc, #60]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80067bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c0:	4a0d      	ldr	r2, [pc, #52]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80067c2:	f043 0301 	orr.w	r3, r3, #1
 80067c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067ca:	e029      	b.n	8006820 <HAL_RCC_OscConfig+0x52c>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	2b05      	cmp	r3, #5
 80067d2:	d115      	bne.n	8006800 <HAL_RCC_OscConfig+0x50c>
 80067d4:	4b08      	ldr	r3, [pc, #32]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80067d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067da:	4a07      	ldr	r2, [pc, #28]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80067dc:	f043 0304 	orr.w	r3, r3, #4
 80067e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067e4:	4b04      	ldr	r3, [pc, #16]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ea:	4a03      	ldr	r2, [pc, #12]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80067ec:	f043 0301 	orr.w	r3, r3, #1
 80067f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067f4:	e014      	b.n	8006820 <HAL_RCC_OscConfig+0x52c>
 80067f6:	bf00      	nop
 80067f8:	40021000 	.word	0x40021000
 80067fc:	40007000 	.word	0x40007000
 8006800:	4b9d      	ldr	r3, [pc, #628]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 8006802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006806:	4a9c      	ldr	r2, [pc, #624]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006810:	4b99      	ldr	r3, [pc, #612]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006816:	4a98      	ldr	r2, [pc, #608]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 8006818:	f023 0304 	bic.w	r3, r3, #4
 800681c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d016      	beq.n	8006856 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006828:	f7fc fbd2 	bl	8002fd0 <HAL_GetTick>
 800682c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800682e:	e00a      	b.n	8006846 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006830:	f7fc fbce 	bl	8002fd0 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800683e:	4293      	cmp	r3, r2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e168      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006846:	4b8c      	ldr	r3, [pc, #560]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 8006848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0ed      	beq.n	8006830 <HAL_RCC_OscConfig+0x53c>
 8006854:	e015      	b.n	8006882 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006856:	f7fc fbbb 	bl	8002fd0 <HAL_GetTick>
 800685a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800685c:	e00a      	b.n	8006874 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800685e:	f7fc fbb7 	bl	8002fd0 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800686c:	4293      	cmp	r3, r2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e151      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006874:	4b80      	ldr	r3, [pc, #512]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1ed      	bne.n	800685e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006882:	7ffb      	ldrb	r3, [r7, #31]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d105      	bne.n	8006894 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006888:	4b7b      	ldr	r3, [pc, #492]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 800688a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688c:	4a7a      	ldr	r2, [pc, #488]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 800688e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006892:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d03c      	beq.n	800691a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01c      	beq.n	80068e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068a8:	4b73      	ldr	r3, [pc, #460]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 80068aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ae:	4a72      	ldr	r2, [pc, #456]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 80068b0:	f043 0301 	orr.w	r3, r3, #1
 80068b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b8:	f7fc fb8a 	bl	8002fd0 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068c0:	f7fc fb86 	bl	8002fd0 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e122      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068d2:	4b69      	ldr	r3, [pc, #420]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 80068d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0ef      	beq.n	80068c0 <HAL_RCC_OscConfig+0x5cc>
 80068e0:	e01b      	b.n	800691a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068e2:	4b65      	ldr	r3, [pc, #404]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 80068e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068e8:	4a63      	ldr	r2, [pc, #396]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f2:	f7fc fb6d 	bl	8002fd0 <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068fa:	f7fc fb69 	bl	8002fd0 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e105      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800690c:	4b5a      	ldr	r3, [pc, #360]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 800690e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1ef      	bne.n	80068fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 80f9 	beq.w	8006b16 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	2b02      	cmp	r3, #2
 800692a:	f040 80cf 	bne.w	8006acc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800692e:	4b52      	ldr	r3, [pc, #328]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f003 0203 	and.w	r2, r3, #3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693e:	429a      	cmp	r2, r3
 8006940:	d12c      	bne.n	800699c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800694c:	3b01      	subs	r3, #1
 800694e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006950:	429a      	cmp	r2, r3
 8006952:	d123      	bne.n	800699c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800695e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006960:	429a      	cmp	r2, r3
 8006962:	d11b      	bne.n	800699c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006970:	429a      	cmp	r2, r3
 8006972:	d113      	bne.n	800699c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800697e:	085b      	lsrs	r3, r3, #1
 8006980:	3b01      	subs	r3, #1
 8006982:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006984:	429a      	cmp	r2, r3
 8006986:	d109      	bne.n	800699c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006992:	085b      	lsrs	r3, r3, #1
 8006994:	3b01      	subs	r3, #1
 8006996:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006998:	429a      	cmp	r2, r3
 800699a:	d071      	beq.n	8006a80 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	2b0c      	cmp	r3, #12
 80069a0:	d068      	beq.n	8006a74 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80069a2:	4b35      	ldr	r3, [pc, #212]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d105      	bne.n	80069ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80069ae:	4b32      	ldr	r3, [pc, #200]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e0ac      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80069be:	4b2e      	ldr	r3, [pc, #184]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a2d      	ldr	r2, [pc, #180]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 80069c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069ca:	f7fc fb01 	bl	8002fd0 <HAL_GetTick>
 80069ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069d0:	e008      	b.n	80069e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069d2:	f7fc fafd 	bl	8002fd0 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d901      	bls.n	80069e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e099      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069e4:	4b24      	ldr	r3, [pc, #144]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1f0      	bne.n	80069d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069f0:	4b21      	ldr	r3, [pc, #132]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	4b21      	ldr	r3, [pc, #132]	@ (8006a7c <HAL_RCC_OscConfig+0x788>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006a00:	3a01      	subs	r2, #1
 8006a02:	0112      	lsls	r2, r2, #4
 8006a04:	4311      	orrs	r1, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006a0a:	0212      	lsls	r2, r2, #8
 8006a0c:	4311      	orrs	r1, r2
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a12:	0852      	lsrs	r2, r2, #1
 8006a14:	3a01      	subs	r2, #1
 8006a16:	0552      	lsls	r2, r2, #21
 8006a18:	4311      	orrs	r1, r2
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006a1e:	0852      	lsrs	r2, r2, #1
 8006a20:	3a01      	subs	r2, #1
 8006a22:	0652      	lsls	r2, r2, #25
 8006a24:	4311      	orrs	r1, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006a2a:	06d2      	lsls	r2, r2, #27
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	4912      	ldr	r1, [pc, #72]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006a34:	4b10      	ldr	r3, [pc, #64]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a0f      	ldr	r2, [pc, #60]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 8006a3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a40:	4b0d      	ldr	r3, [pc, #52]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	4a0c      	ldr	r2, [pc, #48]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 8006a46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a4c:	f7fc fac0 	bl	8002fd0 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a54:	f7fc fabc 	bl	8002fd0 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e058      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a66:	4b04      	ldr	r3, [pc, #16]	@ (8006a78 <HAL_RCC_OscConfig+0x784>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0f0      	beq.n	8006a54 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a72:	e050      	b.n	8006b16 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e04f      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
 8006a78:	40021000 	.word	0x40021000
 8006a7c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a80:	4b27      	ldr	r3, [pc, #156]	@ (8006b20 <HAL_RCC_OscConfig+0x82c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d144      	bne.n	8006b16 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a8c:	4b24      	ldr	r3, [pc, #144]	@ (8006b20 <HAL_RCC_OscConfig+0x82c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a23      	ldr	r2, [pc, #140]	@ (8006b20 <HAL_RCC_OscConfig+0x82c>)
 8006a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a98:	4b21      	ldr	r3, [pc, #132]	@ (8006b20 <HAL_RCC_OscConfig+0x82c>)
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	4a20      	ldr	r2, [pc, #128]	@ (8006b20 <HAL_RCC_OscConfig+0x82c>)
 8006a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006aa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006aa4:	f7fc fa94 	bl	8002fd0 <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aac:	f7fc fa90 	bl	8002fd0 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e02c      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006abe:	4b18      	ldr	r3, [pc, #96]	@ (8006b20 <HAL_RCC_OscConfig+0x82c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f0      	beq.n	8006aac <HAL_RCC_OscConfig+0x7b8>
 8006aca:	e024      	b.n	8006b16 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	2b0c      	cmp	r3, #12
 8006ad0:	d01f      	beq.n	8006b12 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ad2:	4b13      	ldr	r3, [pc, #76]	@ (8006b20 <HAL_RCC_OscConfig+0x82c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a12      	ldr	r2, [pc, #72]	@ (8006b20 <HAL_RCC_OscConfig+0x82c>)
 8006ad8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ade:	f7fc fa77 	bl	8002fd0 <HAL_GetTick>
 8006ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ae4:	e008      	b.n	8006af8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae6:	f7fc fa73 	bl	8002fd0 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d901      	bls.n	8006af8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e00f      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006af8:	4b09      	ldr	r3, [pc, #36]	@ (8006b20 <HAL_RCC_OscConfig+0x82c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1f0      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006b04:	4b06      	ldr	r3, [pc, #24]	@ (8006b20 <HAL_RCC_OscConfig+0x82c>)
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	4905      	ldr	r1, [pc, #20]	@ (8006b20 <HAL_RCC_OscConfig+0x82c>)
 8006b0a:	4b06      	ldr	r3, [pc, #24]	@ (8006b24 <HAL_RCC_OscConfig+0x830>)
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	60cb      	str	r3, [r1, #12]
 8006b10:	e001      	b.n	8006b16 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3720      	adds	r7, #32
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40021000 	.word	0x40021000
 8006b24:	feeefffc 	.word	0xfeeefffc

08006b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e0e7      	b.n	8006d0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b3c:	4b75      	ldr	r3, [pc, #468]	@ (8006d14 <HAL_RCC_ClockConfig+0x1ec>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0307 	and.w	r3, r3, #7
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d910      	bls.n	8006b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b4a:	4b72      	ldr	r3, [pc, #456]	@ (8006d14 <HAL_RCC_ClockConfig+0x1ec>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f023 0207 	bic.w	r2, r3, #7
 8006b52:	4970      	ldr	r1, [pc, #448]	@ (8006d14 <HAL_RCC_ClockConfig+0x1ec>)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b5a:	4b6e      	ldr	r3, [pc, #440]	@ (8006d14 <HAL_RCC_ClockConfig+0x1ec>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0307 	and.w	r3, r3, #7
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d001      	beq.n	8006b6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e0cf      	b.n	8006d0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d010      	beq.n	8006b9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	4b66      	ldr	r3, [pc, #408]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d908      	bls.n	8006b9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b88:	4b63      	ldr	r3, [pc, #396]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	4960      	ldr	r1, [pc, #384]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d04c      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d107      	bne.n	8006bbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bae:	4b5a      	ldr	r3, [pc, #360]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d121      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e0a6      	b.n	8006d0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d107      	bne.n	8006bd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bc6:	4b54      	ldr	r3, [pc, #336]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d115      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e09a      	b.n	8006d0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d107      	bne.n	8006bee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bde:	4b4e      	ldr	r3, [pc, #312]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e08e      	b.n	8006d0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bee:	4b4a      	ldr	r3, [pc, #296]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e086      	b.n	8006d0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bfe:	4b46      	ldr	r3, [pc, #280]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f023 0203 	bic.w	r2, r3, #3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	4943      	ldr	r1, [pc, #268]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c10:	f7fc f9de 	bl	8002fd0 <HAL_GetTick>
 8006c14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c16:	e00a      	b.n	8006c2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c18:	f7fc f9da 	bl	8002fd0 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e06e      	b.n	8006d0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 020c 	and.w	r2, r3, #12
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d1eb      	bne.n	8006c18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d010      	beq.n	8006c6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	4b31      	ldr	r3, [pc, #196]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d208      	bcs.n	8006c6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	492b      	ldr	r1, [pc, #172]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c6e:	4b29      	ldr	r3, [pc, #164]	@ (8006d14 <HAL_RCC_ClockConfig+0x1ec>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d210      	bcs.n	8006c9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7c:	4b25      	ldr	r3, [pc, #148]	@ (8006d14 <HAL_RCC_ClockConfig+0x1ec>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f023 0207 	bic.w	r2, r3, #7
 8006c84:	4923      	ldr	r1, [pc, #140]	@ (8006d14 <HAL_RCC_ClockConfig+0x1ec>)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c8c:	4b21      	ldr	r3, [pc, #132]	@ (8006d14 <HAL_RCC_ClockConfig+0x1ec>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d001      	beq.n	8006c9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e036      	b.n	8006d0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0304 	and.w	r3, r3, #4
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d008      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006caa:	4b1b      	ldr	r3, [pc, #108]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	4918      	ldr	r1, [pc, #96]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cc8:	4b13      	ldr	r3, [pc, #76]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	4910      	ldr	r1, [pc, #64]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cdc:	f000 f824 	bl	8006d28 <HAL_RCC_GetSysClockFreq>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d18 <HAL_RCC_ClockConfig+0x1f0>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	091b      	lsrs	r3, r3, #4
 8006ce8:	f003 030f 	and.w	r3, r3, #15
 8006cec:	490b      	ldr	r1, [pc, #44]	@ (8006d1c <HAL_RCC_ClockConfig+0x1f4>)
 8006cee:	5ccb      	ldrb	r3, [r1, r3]
 8006cf0:	f003 031f 	and.w	r3, r3, #31
 8006cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf8:	4a09      	ldr	r2, [pc, #36]	@ (8006d20 <HAL_RCC_ClockConfig+0x1f8>)
 8006cfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006cfc:	4b09      	ldr	r3, [pc, #36]	@ (8006d24 <HAL_RCC_ClockConfig+0x1fc>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fb ff81 	bl	8002c08 <HAL_InitTick>
 8006d06:	4603      	mov	r3, r0
 8006d08:	72fb      	strb	r3, [r7, #11]

  return status;
 8006d0a:	7afb      	ldrb	r3, [r7, #11]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	40022000 	.word	0x40022000
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	08012454 	.word	0x08012454
 8006d20:	20000000 	.word	0x20000000
 8006d24:	20000004 	.word	0x20000004

08006d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b089      	sub	sp, #36	@ 0x24
 8006d2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	61fb      	str	r3, [r7, #28]
 8006d32:	2300      	movs	r3, #0
 8006d34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d36:	4b3e      	ldr	r3, [pc, #248]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 030c 	and.w	r3, r3, #12
 8006d3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d40:	4b3b      	ldr	r3, [pc, #236]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f003 0303 	and.w	r3, r3, #3
 8006d48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <HAL_RCC_GetSysClockFreq+0x34>
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	2b0c      	cmp	r3, #12
 8006d54:	d121      	bne.n	8006d9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d11e      	bne.n	8006d9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d5c:	4b34      	ldr	r3, [pc, #208]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d107      	bne.n	8006d78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d68:	4b31      	ldr	r3, [pc, #196]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	61fb      	str	r3, [r7, #28]
 8006d76:	e005      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d78:	4b2d      	ldr	r3, [pc, #180]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	091b      	lsrs	r3, r3, #4
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d84:	4a2b      	ldr	r2, [pc, #172]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10d      	bne.n	8006db0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d98:	e00a      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d102      	bne.n	8006da6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006da0:	4b25      	ldr	r3, [pc, #148]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x110>)
 8006da2:	61bb      	str	r3, [r7, #24]
 8006da4:	e004      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d101      	bne.n	8006db0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006dac:	4b22      	ldr	r3, [pc, #136]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x110>)
 8006dae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	2b0c      	cmp	r3, #12
 8006db4:	d134      	bne.n	8006e20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006db6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x108>)
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d003      	beq.n	8006dce <HAL_RCC_GetSysClockFreq+0xa6>
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d003      	beq.n	8006dd4 <HAL_RCC_GetSysClockFreq+0xac>
 8006dcc:	e005      	b.n	8006dda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006dce:	4b1a      	ldr	r3, [pc, #104]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x110>)
 8006dd0:	617b      	str	r3, [r7, #20]
      break;
 8006dd2:	e005      	b.n	8006de0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006dd4:	4b18      	ldr	r3, [pc, #96]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x110>)
 8006dd6:	617b      	str	r3, [r7, #20]
      break;
 8006dd8:	e002      	b.n	8006de0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	617b      	str	r3, [r7, #20]
      break;
 8006dde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006de0:	4b13      	ldr	r3, [pc, #76]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x108>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	091b      	lsrs	r3, r3, #4
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	3301      	adds	r3, #1
 8006dec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006dee:	4b10      	ldr	r3, [pc, #64]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x108>)
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	0a1b      	lsrs	r3, r3, #8
 8006df4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	fb03 f202 	mul.w	r2, r3, r2
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e06:	4b0a      	ldr	r3, [pc, #40]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	0e5b      	lsrs	r3, r3, #25
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	3301      	adds	r3, #1
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006e20:	69bb      	ldr	r3, [r7, #24]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3724      	adds	r7, #36	@ 0x24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40021000 	.word	0x40021000
 8006e34:	0801246c 	.word	0x0801246c
 8006e38:	00f42400 	.word	0x00f42400

08006e3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e40:	4b03      	ldr	r3, [pc, #12]	@ (8006e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e42:	681b      	ldr	r3, [r3, #0]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	20000000 	.word	0x20000000

08006e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e58:	f7ff fff0 	bl	8006e3c <HAL_RCC_GetHCLKFreq>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	4b06      	ldr	r3, [pc, #24]	@ (8006e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	0adb      	lsrs	r3, r3, #11
 8006e64:	f003 0307 	and.w	r3, r3, #7
 8006e68:	4904      	ldr	r1, [pc, #16]	@ (8006e7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e6a:	5ccb      	ldrb	r3, [r1, r3]
 8006e6c:	f003 031f 	and.w	r3, r3, #31
 8006e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	08012464 	.word	0x08012464

08006e80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	220f      	movs	r2, #15
 8006e8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006e90:	4b12      	ldr	r3, [pc, #72]	@ (8006edc <HAL_RCC_GetClockConfig+0x5c>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f003 0203 	and.w	r2, r3, #3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8006edc <HAL_RCC_GetClockConfig+0x5c>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8006edc <HAL_RCC_GetClockConfig+0x5c>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006eb4:	4b09      	ldr	r3, [pc, #36]	@ (8006edc <HAL_RCC_GetClockConfig+0x5c>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	08db      	lsrs	r3, r3, #3
 8006eba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006ec2:	4b07      	ldr	r3, [pc, #28]	@ (8006ee0 <HAL_RCC_GetClockConfig+0x60>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0207 	and.w	r2, r3, #7
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	601a      	str	r2, [r3, #0]
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	40022000 	.word	0x40022000

08006ee4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006eec:	2300      	movs	r3, #0
 8006eee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8006f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006efc:	f7ff f986 	bl	800620c <HAL_PWREx_GetVoltageRange>
 8006f00:	6178      	str	r0, [r7, #20]
 8006f02:	e014      	b.n	8006f2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f04:	4b25      	ldr	r3, [pc, #148]	@ (8006f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f08:	4a24      	ldr	r2, [pc, #144]	@ (8006f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f10:	4b22      	ldr	r3, [pc, #136]	@ (8006f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f1c:	f7ff f976 	bl	800620c <HAL_PWREx_GetVoltageRange>
 8006f20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f22:	4b1e      	ldr	r3, [pc, #120]	@ (8006f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f26:	4a1d      	ldr	r2, [pc, #116]	@ (8006f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f34:	d10b      	bne.n	8006f4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b80      	cmp	r3, #128	@ 0x80
 8006f3a:	d919      	bls.n	8006f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006f40:	d902      	bls.n	8006f48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f42:	2302      	movs	r3, #2
 8006f44:	613b      	str	r3, [r7, #16]
 8006f46:	e013      	b.n	8006f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f48:	2301      	movs	r3, #1
 8006f4a:	613b      	str	r3, [r7, #16]
 8006f4c:	e010      	b.n	8006f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b80      	cmp	r3, #128	@ 0x80
 8006f52:	d902      	bls.n	8006f5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006f54:	2303      	movs	r3, #3
 8006f56:	613b      	str	r3, [r7, #16]
 8006f58:	e00a      	b.n	8006f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b80      	cmp	r3, #128	@ 0x80
 8006f5e:	d102      	bne.n	8006f66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f60:	2302      	movs	r3, #2
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	e004      	b.n	8006f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b70      	cmp	r3, #112	@ 0x70
 8006f6a:	d101      	bne.n	8006f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006f70:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f023 0207 	bic.w	r2, r3, #7
 8006f78:	4909      	ldr	r1, [pc, #36]	@ (8006fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006f80:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d001      	beq.n	8006f92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	40021000 	.word	0x40021000
 8006fa0:	40022000 	.word	0x40022000

08006fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fac:	2300      	movs	r3, #0
 8006fae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d041      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fc4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006fc8:	d02a      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006fca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006fce:	d824      	bhi.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fd4:	d008      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006fd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fda:	d81e      	bhi.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006fe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fe4:	d010      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fe6:	e018      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006fe8:	4b86      	ldr	r3, [pc, #536]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	4a85      	ldr	r2, [pc, #532]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ff2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ff4:	e015      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 facd 	bl	800759c <RCCEx_PLLSAI1_Config>
 8007002:	4603      	mov	r3, r0
 8007004:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007006:	e00c      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3320      	adds	r3, #32
 800700c:	2100      	movs	r1, #0
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fbb6 	bl	8007780 <RCCEx_PLLSAI2_Config>
 8007014:	4603      	mov	r3, r0
 8007016:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007018:	e003      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	74fb      	strb	r3, [r7, #19]
      break;
 800701e:	e000      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007022:	7cfb      	ldrb	r3, [r7, #19]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10b      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007028:	4b76      	ldr	r3, [pc, #472]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800702a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800702e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007036:	4973      	ldr	r1, [pc, #460]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007038:	4313      	orrs	r3, r2
 800703a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800703e:	e001      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007040:	7cfb      	ldrb	r3, [r7, #19]
 8007042:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d041      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007054:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007058:	d02a      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800705a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800705e:	d824      	bhi.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007060:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007064:	d008      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007066:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800706a:	d81e      	bhi.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00a      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007074:	d010      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007076:	e018      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007078:	4b62      	ldr	r3, [pc, #392]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	4a61      	ldr	r2, [pc, #388]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800707e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007082:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007084:	e015      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	3304      	adds	r3, #4
 800708a:	2100      	movs	r1, #0
 800708c:	4618      	mov	r0, r3
 800708e:	f000 fa85 	bl	800759c <RCCEx_PLLSAI1_Config>
 8007092:	4603      	mov	r3, r0
 8007094:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007096:	e00c      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3320      	adds	r3, #32
 800709c:	2100      	movs	r1, #0
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fb6e 	bl	8007780 <RCCEx_PLLSAI2_Config>
 80070a4:	4603      	mov	r3, r0
 80070a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80070a8:	e003      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	74fb      	strb	r3, [r7, #19]
      break;
 80070ae:	e000      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80070b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070b2:	7cfb      	ldrb	r3, [r7, #19]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10b      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80070b8:	4b52      	ldr	r3, [pc, #328]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070c6:	494f      	ldr	r1, [pc, #316]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80070ce:	e001      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d0:	7cfb      	ldrb	r3, [r7, #19]
 80070d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 80a0 	beq.w	8007222 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070e2:	2300      	movs	r3, #0
 80070e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80070e6:	4b47      	ldr	r3, [pc, #284]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80070f6:	2300      	movs	r3, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00d      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070fc:	4b41      	ldr	r3, [pc, #260]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007100:	4a40      	ldr	r2, [pc, #256]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007106:	6593      	str	r3, [r2, #88]	@ 0x58
 8007108:	4b3e      	ldr	r3, [pc, #248]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800710a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800710c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007110:	60bb      	str	r3, [r7, #8]
 8007112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007114:	2301      	movs	r3, #1
 8007116:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007118:	4b3b      	ldr	r3, [pc, #236]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a3a      	ldr	r2, [pc, #232]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800711e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007122:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007124:	f7fb ff54 	bl	8002fd0 <HAL_GetTick>
 8007128:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800712a:	e009      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800712c:	f7fb ff50 	bl	8002fd0 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d902      	bls.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	74fb      	strb	r3, [r7, #19]
        break;
 800713e:	e005      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007140:	4b31      	ldr	r3, [pc, #196]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0ef      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800714c:	7cfb      	ldrb	r3, [r7, #19]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d15c      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007152:	4b2c      	ldr	r3, [pc, #176]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007158:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800715c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01f      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	429a      	cmp	r2, r3
 800716e:	d019      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007170:	4b24      	ldr	r3, [pc, #144]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800717a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800717c:	4b21      	ldr	r3, [pc, #132]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800717e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007182:	4a20      	ldr	r2, [pc, #128]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800718c:	4b1d      	ldr	r3, [pc, #116]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007192:	4a1c      	ldr	r2, [pc, #112]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007194:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800719c:	4a19      	ldr	r2, [pc, #100]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d016      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ae:	f7fb ff0f 	bl	8002fd0 <HAL_GetTick>
 80071b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071b4:	e00b      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071b6:	f7fb ff0b 	bl	8002fd0 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d902      	bls.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	74fb      	strb	r3, [r7, #19]
            break;
 80071cc:	e006      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0ec      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80071dc:	7cfb      	ldrb	r3, [r7, #19]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10c      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071e2:	4b08      	ldr	r3, [pc, #32]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f2:	4904      	ldr	r1, [pc, #16]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80071fa:	e009      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071fc:	7cfb      	ldrb	r3, [r7, #19]
 80071fe:	74bb      	strb	r3, [r7, #18]
 8007200:	e006      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007202:	bf00      	nop
 8007204:	40021000 	.word	0x40021000
 8007208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720c:	7cfb      	ldrb	r3, [r7, #19]
 800720e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007210:	7c7b      	ldrb	r3, [r7, #17]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d105      	bne.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007216:	4ba6      	ldr	r3, [pc, #664]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800721a:	4aa5      	ldr	r2, [pc, #660]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800721c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007220:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800722e:	4ba0      	ldr	r3, [pc, #640]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007234:	f023 0203 	bic.w	r2, r3, #3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723c:	499c      	ldr	r1, [pc, #624]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00a      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007250:	4b97      	ldr	r3, [pc, #604]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007256:	f023 020c 	bic.w	r2, r3, #12
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725e:	4994      	ldr	r1, [pc, #592]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007260:	4313      	orrs	r3, r2
 8007262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0304 	and.w	r3, r3, #4
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007272:	4b8f      	ldr	r3, [pc, #572]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007278:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007280:	498b      	ldr	r1, [pc, #556]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00a      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007294:	4b86      	ldr	r3, [pc, #536]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800729a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a2:	4983      	ldr	r1, [pc, #524]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072b6:	4b7e      	ldr	r3, [pc, #504]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80072b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072c4:	497a      	ldr	r1, [pc, #488]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0320 	and.w	r3, r3, #32
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00a      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072d8:	4b75      	ldr	r3, [pc, #468]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80072da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072e6:	4972      	ldr	r1, [pc, #456]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072fa:	4b6d      	ldr	r3, [pc, #436]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80072fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007300:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007308:	4969      	ldr	r1, [pc, #420]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800730a:	4313      	orrs	r3, r2
 800730c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800731c:	4b64      	ldr	r3, [pc, #400]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800731e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007322:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800732a:	4961      	ldr	r1, [pc, #388]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800732c:	4313      	orrs	r3, r2
 800732e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800733e:	4b5c      	ldr	r3, [pc, #368]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007344:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800734c:	4958      	ldr	r1, [pc, #352]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800734e:	4313      	orrs	r3, r2
 8007350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00a      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007360:	4b53      	ldr	r3, [pc, #332]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007366:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800736e:	4950      	ldr	r1, [pc, #320]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007370:	4313      	orrs	r3, r2
 8007372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00a      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007382:	4b4b      	ldr	r3, [pc, #300]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007388:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007390:	4947      	ldr	r1, [pc, #284]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007392:	4313      	orrs	r3, r2
 8007394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00a      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073a4:	4b42      	ldr	r3, [pc, #264]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073aa:	f023 0203 	bic.w	r2, r3, #3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b2:	493f      	ldr	r1, [pc, #252]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d028      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073c6:	4b3a      	ldr	r3, [pc, #232]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d4:	4936      	ldr	r1, [pc, #216]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073e4:	d106      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073e6:	4b32      	ldr	r3, [pc, #200]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	4a31      	ldr	r2, [pc, #196]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073f0:	60d3      	str	r3, [r2, #12]
 80073f2:	e011      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073fc:	d10c      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3304      	adds	r3, #4
 8007402:	2101      	movs	r1, #1
 8007404:	4618      	mov	r0, r3
 8007406:	f000 f8c9 	bl	800759c <RCCEx_PLLSAI1_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800740e:	7cfb      	ldrb	r3, [r7, #19]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8007414:	7cfb      	ldrb	r3, [r7, #19]
 8007416:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d028      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007424:	4b22      	ldr	r3, [pc, #136]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007432:	491f      	ldr	r1, [pc, #124]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007434:	4313      	orrs	r3, r2
 8007436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800743e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007442:	d106      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007444:	4b1a      	ldr	r3, [pc, #104]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	4a19      	ldr	r2, [pc, #100]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800744a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800744e:	60d3      	str	r3, [r2, #12]
 8007450:	e011      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007456:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800745a:	d10c      	bne.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3304      	adds	r3, #4
 8007460:	2101      	movs	r1, #1
 8007462:	4618      	mov	r0, r3
 8007464:	f000 f89a 	bl	800759c <RCCEx_PLLSAI1_Config>
 8007468:	4603      	mov	r3, r0
 800746a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800746c:	7cfb      	ldrb	r3, [r7, #19]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8007472:	7cfb      	ldrb	r3, [r7, #19]
 8007474:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d02a      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007482:	4b0b      	ldr	r3, [pc, #44]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007488:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007490:	4907      	ldr	r1, [pc, #28]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800749c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074a0:	d108      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074a2:	4b03      	ldr	r3, [pc, #12]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	4a02      	ldr	r2, [pc, #8]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074ac:	60d3      	str	r3, [r2, #12]
 80074ae:	e013      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80074b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074bc:	d10c      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3304      	adds	r3, #4
 80074c2:	2101      	movs	r1, #1
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 f869 	bl	800759c <RCCEx_PLLSAI1_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074ce:	7cfb      	ldrb	r3, [r7, #19]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80074d4:	7cfb      	ldrb	r3, [r7, #19]
 80074d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d02f      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074e4:	4b2c      	ldr	r3, [pc, #176]	@ (8007598 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80074e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074f2:	4929      	ldr	r1, [pc, #164]	@ (8007598 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007502:	d10d      	bne.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3304      	adds	r3, #4
 8007508:	2102      	movs	r1, #2
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f846 	bl	800759c <RCCEx_PLLSAI1_Config>
 8007510:	4603      	mov	r3, r0
 8007512:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007514:	7cfb      	ldrb	r3, [r7, #19]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d014      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800751a:	7cfb      	ldrb	r3, [r7, #19]
 800751c:	74bb      	strb	r3, [r7, #18]
 800751e:	e011      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007528:	d10c      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3320      	adds	r3, #32
 800752e:	2102      	movs	r1, #2
 8007530:	4618      	mov	r0, r3
 8007532:	f000 f925 	bl	8007780 <RCCEx_PLLSAI2_Config>
 8007536:	4603      	mov	r3, r0
 8007538:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800753a:	7cfb      	ldrb	r3, [r7, #19]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007540:	7cfb      	ldrb	r3, [r7, #19]
 8007542:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00b      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007550:	4b11      	ldr	r3, [pc, #68]	@ (8007598 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007556:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007560:	490d      	ldr	r1, [pc, #52]	@ (8007598 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007562:	4313      	orrs	r3, r2
 8007564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007574:	4b08      	ldr	r3, [pc, #32]	@ (8007598 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800757a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007584:	4904      	ldr	r1, [pc, #16]	@ (8007598 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007586:	4313      	orrs	r3, r2
 8007588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800758c:	7cbb      	ldrb	r3, [r7, #18]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	40021000 	.word	0x40021000

0800759c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80075aa:	4b74      	ldr	r3, [pc, #464]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d018      	beq.n	80075e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80075b6:	4b71      	ldr	r3, [pc, #452]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f003 0203 	and.w	r2, r3, #3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d10d      	bne.n	80075e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
       ||
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d009      	beq.n	80075e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80075ce:	4b6b      	ldr	r3, [pc, #428]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	091b      	lsrs	r3, r3, #4
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
       ||
 80075de:	429a      	cmp	r2, r3
 80075e0:	d047      	beq.n	8007672 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	73fb      	strb	r3, [r7, #15]
 80075e6:	e044      	b.n	8007672 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d018      	beq.n	8007622 <RCCEx_PLLSAI1_Config+0x86>
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d825      	bhi.n	8007640 <RCCEx_PLLSAI1_Config+0xa4>
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d002      	beq.n	80075fe <RCCEx_PLLSAI1_Config+0x62>
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d009      	beq.n	8007610 <RCCEx_PLLSAI1_Config+0x74>
 80075fc:	e020      	b.n	8007640 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80075fe:	4b5f      	ldr	r3, [pc, #380]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d11d      	bne.n	8007646 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800760e:	e01a      	b.n	8007646 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007610:	4b5a      	ldr	r3, [pc, #360]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007618:	2b00      	cmp	r3, #0
 800761a:	d116      	bne.n	800764a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007620:	e013      	b.n	800764a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007622:	4b56      	ldr	r3, [pc, #344]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10f      	bne.n	800764e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800762e:	4b53      	ldr	r3, [pc, #332]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800763e:	e006      	b.n	800764e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	73fb      	strb	r3, [r7, #15]
      break;
 8007644:	e004      	b.n	8007650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007646:	bf00      	nop
 8007648:	e002      	b.n	8007650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800764a:	bf00      	nop
 800764c:	e000      	b.n	8007650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800764e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10d      	bne.n	8007672 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007656:	4b49      	ldr	r3, [pc, #292]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6819      	ldr	r1, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	3b01      	subs	r3, #1
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	430b      	orrs	r3, r1
 800766c:	4943      	ldr	r1, [pc, #268]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 800766e:	4313      	orrs	r3, r2
 8007670:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007672:	7bfb      	ldrb	r3, [r7, #15]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d17c      	bne.n	8007772 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007678:	4b40      	ldr	r3, [pc, #256]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a3f      	ldr	r2, [pc, #252]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 800767e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007684:	f7fb fca4 	bl	8002fd0 <HAL_GetTick>
 8007688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800768a:	e009      	b.n	80076a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800768c:	f7fb fca0 	bl	8002fd0 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d902      	bls.n	80076a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	73fb      	strb	r3, [r7, #15]
        break;
 800769e:	e005      	b.n	80076ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80076a0:	4b36      	ldr	r3, [pc, #216]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1ef      	bne.n	800768c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d15f      	bne.n	8007772 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d110      	bne.n	80076da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80076b8:	4b30      	ldr	r3, [pc, #192]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80076c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6892      	ldr	r2, [r2, #8]
 80076c8:	0211      	lsls	r1, r2, #8
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	68d2      	ldr	r2, [r2, #12]
 80076ce:	06d2      	lsls	r2, r2, #27
 80076d0:	430a      	orrs	r2, r1
 80076d2:	492a      	ldr	r1, [pc, #168]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	610b      	str	r3, [r1, #16]
 80076d8:	e027      	b.n	800772a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d112      	bne.n	8007706 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80076e0:	4b26      	ldr	r3, [pc, #152]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80076e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	6892      	ldr	r2, [r2, #8]
 80076f0:	0211      	lsls	r1, r2, #8
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6912      	ldr	r2, [r2, #16]
 80076f6:	0852      	lsrs	r2, r2, #1
 80076f8:	3a01      	subs	r2, #1
 80076fa:	0552      	lsls	r2, r2, #21
 80076fc:	430a      	orrs	r2, r1
 80076fe:	491f      	ldr	r1, [pc, #124]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007700:	4313      	orrs	r3, r2
 8007702:	610b      	str	r3, [r1, #16]
 8007704:	e011      	b.n	800772a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007706:	4b1d      	ldr	r3, [pc, #116]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800770e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	6892      	ldr	r2, [r2, #8]
 8007716:	0211      	lsls	r1, r2, #8
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6952      	ldr	r2, [r2, #20]
 800771c:	0852      	lsrs	r2, r2, #1
 800771e:	3a01      	subs	r2, #1
 8007720:	0652      	lsls	r2, r2, #25
 8007722:	430a      	orrs	r2, r1
 8007724:	4915      	ldr	r1, [pc, #84]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007726:	4313      	orrs	r3, r2
 8007728:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800772a:	4b14      	ldr	r3, [pc, #80]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a13      	ldr	r2, [pc, #76]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007730:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007734:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007736:	f7fb fc4b 	bl	8002fd0 <HAL_GetTick>
 800773a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800773c:	e009      	b.n	8007752 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800773e:	f7fb fc47 	bl	8002fd0 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	2b02      	cmp	r3, #2
 800774a:	d902      	bls.n	8007752 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	73fb      	strb	r3, [r7, #15]
          break;
 8007750:	e005      	b.n	800775e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007752:	4b0a      	ldr	r3, [pc, #40]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0ef      	beq.n	800773e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d106      	bne.n	8007772 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007764:	4b05      	ldr	r3, [pc, #20]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007766:	691a      	ldr	r2, [r3, #16]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	4903      	ldr	r1, [pc, #12]	@ (800777c <RCCEx_PLLSAI1_Config+0x1e0>)
 800776e:	4313      	orrs	r3, r2
 8007770:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007772:	7bfb      	ldrb	r3, [r7, #15]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	40021000 	.word	0x40021000

08007780 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800778e:	4b69      	ldr	r3, [pc, #420]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d018      	beq.n	80077cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800779a:	4b66      	ldr	r3, [pc, #408]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f003 0203 	and.w	r2, r3, #3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d10d      	bne.n	80077c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
       ||
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d009      	beq.n	80077c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80077b2:	4b60      	ldr	r3, [pc, #384]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	091b      	lsrs	r3, r3, #4
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
       ||
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d047      	beq.n	8007856 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	73fb      	strb	r3, [r7, #15]
 80077ca:	e044      	b.n	8007856 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d018      	beq.n	8007806 <RCCEx_PLLSAI2_Config+0x86>
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	d825      	bhi.n	8007824 <RCCEx_PLLSAI2_Config+0xa4>
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d002      	beq.n	80077e2 <RCCEx_PLLSAI2_Config+0x62>
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d009      	beq.n	80077f4 <RCCEx_PLLSAI2_Config+0x74>
 80077e0:	e020      	b.n	8007824 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80077e2:	4b54      	ldr	r3, [pc, #336]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d11d      	bne.n	800782a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077f2:	e01a      	b.n	800782a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80077f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d116      	bne.n	800782e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007804:	e013      	b.n	800782e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007806:	4b4b      	ldr	r3, [pc, #300]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10f      	bne.n	8007832 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007812:	4b48      	ldr	r3, [pc, #288]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d109      	bne.n	8007832 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007822:	e006      	b.n	8007832 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	73fb      	strb	r3, [r7, #15]
      break;
 8007828:	e004      	b.n	8007834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800782a:	bf00      	nop
 800782c:	e002      	b.n	8007834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800782e:	bf00      	nop
 8007830:	e000      	b.n	8007834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007832:	bf00      	nop
    }

    if(status == HAL_OK)
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10d      	bne.n	8007856 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800783a:	4b3e      	ldr	r3, [pc, #248]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6819      	ldr	r1, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	3b01      	subs	r3, #1
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	430b      	orrs	r3, r1
 8007850:	4938      	ldr	r1, [pc, #224]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007852:	4313      	orrs	r3, r2
 8007854:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d166      	bne.n	800792a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800785c:	4b35      	ldr	r3, [pc, #212]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a34      	ldr	r2, [pc, #208]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007868:	f7fb fbb2 	bl	8002fd0 <HAL_GetTick>
 800786c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800786e:	e009      	b.n	8007884 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007870:	f7fb fbae 	bl	8002fd0 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d902      	bls.n	8007884 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	73fb      	strb	r3, [r7, #15]
        break;
 8007882:	e005      	b.n	8007890 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007884:	4b2b      	ldr	r3, [pc, #172]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1ef      	bne.n	8007870 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d149      	bne.n	800792a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d110      	bne.n	80078be <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800789c:	4b25      	ldr	r3, [pc, #148]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80078a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6892      	ldr	r2, [r2, #8]
 80078ac:	0211      	lsls	r1, r2, #8
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	68d2      	ldr	r2, [r2, #12]
 80078b2:	06d2      	lsls	r2, r2, #27
 80078b4:	430a      	orrs	r2, r1
 80078b6:	491f      	ldr	r1, [pc, #124]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	614b      	str	r3, [r1, #20]
 80078bc:	e011      	b.n	80078e2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80078be:	4b1d      	ldr	r3, [pc, #116]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80078c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	6892      	ldr	r2, [r2, #8]
 80078ce:	0211      	lsls	r1, r2, #8
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6912      	ldr	r2, [r2, #16]
 80078d4:	0852      	lsrs	r2, r2, #1
 80078d6:	3a01      	subs	r2, #1
 80078d8:	0652      	lsls	r2, r2, #25
 80078da:	430a      	orrs	r2, r1
 80078dc:	4915      	ldr	r1, [pc, #84]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80078e2:	4b14      	ldr	r3, [pc, #80]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a13      	ldr	r2, [pc, #76]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 80078e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ee:	f7fb fb6f 	bl	8002fd0 <HAL_GetTick>
 80078f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078f4:	e009      	b.n	800790a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80078f6:	f7fb fb6b 	bl	8002fd0 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d902      	bls.n	800790a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	73fb      	strb	r3, [r7, #15]
          break;
 8007908:	e005      	b.n	8007916 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800790a:	4b0a      	ldr	r3, [pc, #40]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0ef      	beq.n	80078f6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d106      	bne.n	800792a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800791c:	4b05      	ldr	r3, [pc, #20]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 800791e:	695a      	ldr	r2, [r3, #20]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	4903      	ldr	r1, [pc, #12]	@ (8007934 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007926:	4313      	orrs	r3, r2
 8007928:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800792a:	7bfb      	ldrb	r3, [r7, #15]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	40021000 	.word	0x40021000

08007938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e049      	b.n	80079de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d106      	bne.n	8007964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f841 	bl	80079e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2202      	movs	r2, #2
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3304      	adds	r3, #4
 8007974:	4619      	mov	r1, r3
 8007976:	4610      	mov	r0, r2
 8007978:	f000 fcba 	bl	80082f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d001      	beq.n	8007a14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e047      	b.n	8007aa4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a23      	ldr	r2, [pc, #140]	@ (8007ab0 <HAL_TIM_Base_Start+0xb4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d01d      	beq.n	8007a62 <HAL_TIM_Base_Start+0x66>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a2e:	d018      	beq.n	8007a62 <HAL_TIM_Base_Start+0x66>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a1f      	ldr	r2, [pc, #124]	@ (8007ab4 <HAL_TIM_Base_Start+0xb8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d013      	beq.n	8007a62 <HAL_TIM_Base_Start+0x66>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab8 <HAL_TIM_Base_Start+0xbc>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d00e      	beq.n	8007a62 <HAL_TIM_Base_Start+0x66>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a1c      	ldr	r2, [pc, #112]	@ (8007abc <HAL_TIM_Base_Start+0xc0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d009      	beq.n	8007a62 <HAL_TIM_Base_Start+0x66>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac0 <HAL_TIM_Base_Start+0xc4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d004      	beq.n	8007a62 <HAL_TIM_Base_Start+0x66>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a19      	ldr	r2, [pc, #100]	@ (8007ac4 <HAL_TIM_Base_Start+0xc8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d115      	bne.n	8007a8e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	4b17      	ldr	r3, [pc, #92]	@ (8007ac8 <HAL_TIM_Base_Start+0xcc>)
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b06      	cmp	r3, #6
 8007a72:	d015      	beq.n	8007aa0 <HAL_TIM_Base_Start+0xa4>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a7a:	d011      	beq.n	8007aa0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0201 	orr.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a8c:	e008      	b.n	8007aa0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f042 0201 	orr.w	r2, r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e000      	b.n	8007aa2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	40012c00 	.word	0x40012c00
 8007ab4:	40000400 	.word	0x40000400
 8007ab8:	40000800 	.word	0x40000800
 8007abc:	40000c00 	.word	0x40000c00
 8007ac0:	40013400 	.word	0x40013400
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	00010007 	.word	0x00010007

08007acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d001      	beq.n	8007ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e04f      	b.n	8007b84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0201 	orr.w	r2, r2, #1
 8007afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a23      	ldr	r2, [pc, #140]	@ (8007b90 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d01d      	beq.n	8007b42 <HAL_TIM_Base_Start_IT+0x76>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b0e:	d018      	beq.n	8007b42 <HAL_TIM_Base_Start_IT+0x76>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a1f      	ldr	r2, [pc, #124]	@ (8007b94 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d013      	beq.n	8007b42 <HAL_TIM_Base_Start_IT+0x76>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007b98 <HAL_TIM_Base_Start_IT+0xcc>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00e      	beq.n	8007b42 <HAL_TIM_Base_Start_IT+0x76>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a1c      	ldr	r2, [pc, #112]	@ (8007b9c <HAL_TIM_Base_Start_IT+0xd0>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d009      	beq.n	8007b42 <HAL_TIM_Base_Start_IT+0x76>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a1b      	ldr	r2, [pc, #108]	@ (8007ba0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d004      	beq.n	8007b42 <HAL_TIM_Base_Start_IT+0x76>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a19      	ldr	r2, [pc, #100]	@ (8007ba4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d115      	bne.n	8007b6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	4b17      	ldr	r3, [pc, #92]	@ (8007ba8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2b06      	cmp	r3, #6
 8007b52:	d015      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0xb4>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b5a:	d011      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b6c:	e008      	b.n	8007b80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 0201 	orr.w	r2, r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e000      	b.n	8007b82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	40012c00 	.word	0x40012c00
 8007b94:	40000400 	.word	0x40000400
 8007b98:	40000800 	.word	0x40000800
 8007b9c:	40000c00 	.word	0x40000c00
 8007ba0:	40013400 	.word	0x40013400
 8007ba4:	40014000 	.word	0x40014000
 8007ba8:	00010007 	.word	0x00010007

08007bac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e049      	b.n	8007c52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d106      	bne.n	8007bd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7fa ff8a 	bl	8002aec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f000 fb80 	bl	80082f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d109      	bne.n	8007c80 <HAL_TIM_PWM_Start+0x24>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	bf14      	ite	ne
 8007c78:	2301      	movne	r3, #1
 8007c7a:	2300      	moveq	r3, #0
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	e03c      	b.n	8007cfa <HAL_TIM_PWM_Start+0x9e>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b04      	cmp	r3, #4
 8007c84:	d109      	bne.n	8007c9a <HAL_TIM_PWM_Start+0x3e>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	bf14      	ite	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	2300      	moveq	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	e02f      	b.n	8007cfa <HAL_TIM_PWM_Start+0x9e>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b08      	cmp	r3, #8
 8007c9e:	d109      	bne.n	8007cb4 <HAL_TIM_PWM_Start+0x58>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	bf14      	ite	ne
 8007cac:	2301      	movne	r3, #1
 8007cae:	2300      	moveq	r3, #0
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	e022      	b.n	8007cfa <HAL_TIM_PWM_Start+0x9e>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b0c      	cmp	r3, #12
 8007cb8:	d109      	bne.n	8007cce <HAL_TIM_PWM_Start+0x72>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	bf14      	ite	ne
 8007cc6:	2301      	movne	r3, #1
 8007cc8:	2300      	moveq	r3, #0
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	e015      	b.n	8007cfa <HAL_TIM_PWM_Start+0x9e>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b10      	cmp	r3, #16
 8007cd2:	d109      	bne.n	8007ce8 <HAL_TIM_PWM_Start+0x8c>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	bf14      	ite	ne
 8007ce0:	2301      	movne	r3, #1
 8007ce2:	2300      	moveq	r3, #0
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	e008      	b.n	8007cfa <HAL_TIM_PWM_Start+0x9e>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	bf14      	ite	ne
 8007cf4:	2301      	movne	r3, #1
 8007cf6:	2300      	moveq	r3, #0
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e09c      	b.n	8007e3c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d104      	bne.n	8007d12 <HAL_TIM_PWM_Start+0xb6>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d10:	e023      	b.n	8007d5a <HAL_TIM_PWM_Start+0xfe>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	2b04      	cmp	r3, #4
 8007d16:	d104      	bne.n	8007d22 <HAL_TIM_PWM_Start+0xc6>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d20:	e01b      	b.n	8007d5a <HAL_TIM_PWM_Start+0xfe>
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d104      	bne.n	8007d32 <HAL_TIM_PWM_Start+0xd6>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d30:	e013      	b.n	8007d5a <HAL_TIM_PWM_Start+0xfe>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b0c      	cmp	r3, #12
 8007d36:	d104      	bne.n	8007d42 <HAL_TIM_PWM_Start+0xe6>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d40:	e00b      	b.n	8007d5a <HAL_TIM_PWM_Start+0xfe>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b10      	cmp	r3, #16
 8007d46:	d104      	bne.n	8007d52 <HAL_TIM_PWM_Start+0xf6>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d50:	e003      	b.n	8007d5a <HAL_TIM_PWM_Start+0xfe>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2202      	movs	r2, #2
 8007d56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 fe40 	bl	80089e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a35      	ldr	r2, [pc, #212]	@ (8007e44 <HAL_TIM_PWM_Start+0x1e8>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d013      	beq.n	8007d9a <HAL_TIM_PWM_Start+0x13e>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a34      	ldr	r2, [pc, #208]	@ (8007e48 <HAL_TIM_PWM_Start+0x1ec>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d00e      	beq.n	8007d9a <HAL_TIM_PWM_Start+0x13e>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a32      	ldr	r2, [pc, #200]	@ (8007e4c <HAL_TIM_PWM_Start+0x1f0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d009      	beq.n	8007d9a <HAL_TIM_PWM_Start+0x13e>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a31      	ldr	r2, [pc, #196]	@ (8007e50 <HAL_TIM_PWM_Start+0x1f4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d004      	beq.n	8007d9a <HAL_TIM_PWM_Start+0x13e>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a2f      	ldr	r2, [pc, #188]	@ (8007e54 <HAL_TIM_PWM_Start+0x1f8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d101      	bne.n	8007d9e <HAL_TIM_PWM_Start+0x142>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e000      	b.n	8007da0 <HAL_TIM_PWM_Start+0x144>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d007      	beq.n	8007db4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007db2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a22      	ldr	r2, [pc, #136]	@ (8007e44 <HAL_TIM_PWM_Start+0x1e8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d01d      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x19e>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dc6:	d018      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x19e>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a22      	ldr	r2, [pc, #136]	@ (8007e58 <HAL_TIM_PWM_Start+0x1fc>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d013      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x19e>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a21      	ldr	r2, [pc, #132]	@ (8007e5c <HAL_TIM_PWM_Start+0x200>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d00e      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x19e>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a1f      	ldr	r2, [pc, #124]	@ (8007e60 <HAL_TIM_PWM_Start+0x204>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d009      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x19e>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a17      	ldr	r2, [pc, #92]	@ (8007e48 <HAL_TIM_PWM_Start+0x1ec>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d004      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x19e>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a15      	ldr	r2, [pc, #84]	@ (8007e4c <HAL_TIM_PWM_Start+0x1f0>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d115      	bne.n	8007e26 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	4b18      	ldr	r3, [pc, #96]	@ (8007e64 <HAL_TIM_PWM_Start+0x208>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b06      	cmp	r3, #6
 8007e0a:	d015      	beq.n	8007e38 <HAL_TIM_PWM_Start+0x1dc>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e12:	d011      	beq.n	8007e38 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0201 	orr.w	r2, r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e24:	e008      	b.n	8007e38 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f042 0201 	orr.w	r2, r2, #1
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	e000      	b.n	8007e3a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	40012c00 	.word	0x40012c00
 8007e48:	40013400 	.word	0x40013400
 8007e4c:	40014000 	.word	0x40014000
 8007e50:	40014400 	.word	0x40014400
 8007e54:	40014800 	.word	0x40014800
 8007e58:	40000400 	.word	0x40000400
 8007e5c:	40000800 	.word	0x40000800
 8007e60:	40000c00 	.word	0x40000c00
 8007e64:	00010007 	.word	0x00010007

08007e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f003 0302 	and.w	r3, r3, #2
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d020      	beq.n	8007ecc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d01b      	beq.n	8007ecc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f06f 0202 	mvn.w	r2, #2
 8007e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	f003 0303 	and.w	r3, r3, #3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f9fe 	bl	80082b4 <HAL_TIM_IC_CaptureCallback>
 8007eb8:	e005      	b.n	8007ec6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f9f0 	bl	80082a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fa01 	bl	80082c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f003 0304 	and.w	r3, r3, #4
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d020      	beq.n	8007f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d01b      	beq.n	8007f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f06f 0204 	mvn.w	r2, #4
 8007ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2202      	movs	r2, #2
 8007eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f9d8 	bl	80082b4 <HAL_TIM_IC_CaptureCallback>
 8007f04:	e005      	b.n	8007f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f9ca 	bl	80082a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f9db 	bl	80082c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f003 0308 	and.w	r3, r3, #8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d020      	beq.n	8007f64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d01b      	beq.n	8007f64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f06f 0208 	mvn.w	r2, #8
 8007f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2204      	movs	r2, #4
 8007f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	f003 0303 	and.w	r3, r3, #3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f9b2 	bl	80082b4 <HAL_TIM_IC_CaptureCallback>
 8007f50:	e005      	b.n	8007f5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f9a4 	bl	80082a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f9b5 	bl	80082c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f003 0310 	and.w	r3, r3, #16
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d020      	beq.n	8007fb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d01b      	beq.n	8007fb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f06f 0210 	mvn.w	r2, #16
 8007f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2208      	movs	r2, #8
 8007f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f98c 	bl	80082b4 <HAL_TIM_IC_CaptureCallback>
 8007f9c:	e005      	b.n	8007faa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f97e 	bl	80082a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f98f 	bl	80082c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00c      	beq.n	8007fd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d007      	beq.n	8007fd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f06f 0201 	mvn.w	r2, #1
 8007fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7fa fbb6 	bl	8002740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d104      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00c      	beq.n	8008002 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d007      	beq.n	8008002 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fdab 	bl	8008b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00c      	beq.n	8008026 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008012:	2b00      	cmp	r3, #0
 8008014:	d007      	beq.n	8008026 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800801e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fda3 	bl	8008b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00c      	beq.n	800804a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008036:	2b00      	cmp	r3, #0
 8008038:	d007      	beq.n	800804a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f949 	bl	80082dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f003 0320 	and.w	r3, r3, #32
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00c      	beq.n	800806e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d007      	beq.n	800806e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f06f 0220 	mvn.w	r2, #32
 8008066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fd6b 	bl	8008b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800808e:	2b01      	cmp	r3, #1
 8008090:	d101      	bne.n	8008096 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008092:	2302      	movs	r3, #2
 8008094:	e0ff      	b.n	8008296 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b14      	cmp	r3, #20
 80080a2:	f200 80f0 	bhi.w	8008286 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80080a6:	a201      	add	r2, pc, #4	@ (adr r2, 80080ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ac:	08008101 	.word	0x08008101
 80080b0:	08008287 	.word	0x08008287
 80080b4:	08008287 	.word	0x08008287
 80080b8:	08008287 	.word	0x08008287
 80080bc:	08008141 	.word	0x08008141
 80080c0:	08008287 	.word	0x08008287
 80080c4:	08008287 	.word	0x08008287
 80080c8:	08008287 	.word	0x08008287
 80080cc:	08008183 	.word	0x08008183
 80080d0:	08008287 	.word	0x08008287
 80080d4:	08008287 	.word	0x08008287
 80080d8:	08008287 	.word	0x08008287
 80080dc:	080081c3 	.word	0x080081c3
 80080e0:	08008287 	.word	0x08008287
 80080e4:	08008287 	.word	0x08008287
 80080e8:	08008287 	.word	0x08008287
 80080ec:	08008205 	.word	0x08008205
 80080f0:	08008287 	.word	0x08008287
 80080f4:	08008287 	.word	0x08008287
 80080f8:	08008287 	.word	0x08008287
 80080fc:	08008245 	.word	0x08008245
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68b9      	ldr	r1, [r7, #8]
 8008106:	4618      	mov	r0, r3
 8008108:	f000 f998 	bl	800843c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0208 	orr.w	r2, r2, #8
 800811a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699a      	ldr	r2, [r3, #24]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0204 	bic.w	r2, r2, #4
 800812a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6999      	ldr	r1, [r3, #24]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	691a      	ldr	r2, [r3, #16]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	619a      	str	r2, [r3, #24]
      break;
 800813e:	e0a5      	b.n	800828c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68b9      	ldr	r1, [r7, #8]
 8008146:	4618      	mov	r0, r3
 8008148:	f000 fa08 	bl	800855c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800815a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699a      	ldr	r2, [r3, #24]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800816a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6999      	ldr	r1, [r3, #24]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	021a      	lsls	r2, r3, #8
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	430a      	orrs	r2, r1
 800817e:	619a      	str	r2, [r3, #24]
      break;
 8008180:	e084      	b.n	800828c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	4618      	mov	r0, r3
 800818a:	f000 fa71 	bl	8008670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	69da      	ldr	r2, [r3, #28]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f042 0208 	orr.w	r2, r2, #8
 800819c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69da      	ldr	r2, [r3, #28]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0204 	bic.w	r2, r2, #4
 80081ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69d9      	ldr	r1, [r3, #28]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	691a      	ldr	r2, [r3, #16]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	61da      	str	r2, [r3, #28]
      break;
 80081c0:	e064      	b.n	800828c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68b9      	ldr	r1, [r7, #8]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fad9 	bl	8008780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69da      	ldr	r2, [r3, #28]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69da      	ldr	r2, [r3, #28]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69d9      	ldr	r1, [r3, #28]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	021a      	lsls	r2, r3, #8
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	61da      	str	r2, [r3, #28]
      break;
 8008202:	e043      	b.n	800828c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68b9      	ldr	r1, [r7, #8]
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fb22 	bl	8008854 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0208 	orr.w	r2, r2, #8
 800821e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0204 	bic.w	r2, r2, #4
 800822e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	691a      	ldr	r2, [r3, #16]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008242:	e023      	b.n	800828c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68b9      	ldr	r1, [r7, #8]
 800824a:	4618      	mov	r0, r3
 800824c:	f000 fb66 	bl	800891c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800825e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800826e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	021a      	lsls	r2, r3, #8
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008284:	e002      	b.n	800828c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	75fb      	strb	r3, [r7, #23]
      break;
 800828a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop

080082a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a46      	ldr	r2, [pc, #280]	@ (800841c <TIM_Base_SetConfig+0x12c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d013      	beq.n	8008330 <TIM_Base_SetConfig+0x40>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800830e:	d00f      	beq.n	8008330 <TIM_Base_SetConfig+0x40>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a43      	ldr	r2, [pc, #268]	@ (8008420 <TIM_Base_SetConfig+0x130>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d00b      	beq.n	8008330 <TIM_Base_SetConfig+0x40>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a42      	ldr	r2, [pc, #264]	@ (8008424 <TIM_Base_SetConfig+0x134>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d007      	beq.n	8008330 <TIM_Base_SetConfig+0x40>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a41      	ldr	r2, [pc, #260]	@ (8008428 <TIM_Base_SetConfig+0x138>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d003      	beq.n	8008330 <TIM_Base_SetConfig+0x40>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a40      	ldr	r2, [pc, #256]	@ (800842c <TIM_Base_SetConfig+0x13c>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d108      	bne.n	8008342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a35      	ldr	r2, [pc, #212]	@ (800841c <TIM_Base_SetConfig+0x12c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d01f      	beq.n	800838a <TIM_Base_SetConfig+0x9a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008350:	d01b      	beq.n	800838a <TIM_Base_SetConfig+0x9a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a32      	ldr	r2, [pc, #200]	@ (8008420 <TIM_Base_SetConfig+0x130>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d017      	beq.n	800838a <TIM_Base_SetConfig+0x9a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a31      	ldr	r2, [pc, #196]	@ (8008424 <TIM_Base_SetConfig+0x134>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d013      	beq.n	800838a <TIM_Base_SetConfig+0x9a>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a30      	ldr	r2, [pc, #192]	@ (8008428 <TIM_Base_SetConfig+0x138>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d00f      	beq.n	800838a <TIM_Base_SetConfig+0x9a>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a2f      	ldr	r2, [pc, #188]	@ (800842c <TIM_Base_SetConfig+0x13c>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d00b      	beq.n	800838a <TIM_Base_SetConfig+0x9a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a2e      	ldr	r2, [pc, #184]	@ (8008430 <TIM_Base_SetConfig+0x140>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d007      	beq.n	800838a <TIM_Base_SetConfig+0x9a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a2d      	ldr	r2, [pc, #180]	@ (8008434 <TIM_Base_SetConfig+0x144>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d003      	beq.n	800838a <TIM_Base_SetConfig+0x9a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a2c      	ldr	r2, [pc, #176]	@ (8008438 <TIM_Base_SetConfig+0x148>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d108      	bne.n	800839c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4313      	orrs	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	689a      	ldr	r2, [r3, #8]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a16      	ldr	r2, [pc, #88]	@ (800841c <TIM_Base_SetConfig+0x12c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00f      	beq.n	80083e8 <TIM_Base_SetConfig+0xf8>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a18      	ldr	r2, [pc, #96]	@ (800842c <TIM_Base_SetConfig+0x13c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d00b      	beq.n	80083e8 <TIM_Base_SetConfig+0xf8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a17      	ldr	r2, [pc, #92]	@ (8008430 <TIM_Base_SetConfig+0x140>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d007      	beq.n	80083e8 <TIM_Base_SetConfig+0xf8>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a16      	ldr	r2, [pc, #88]	@ (8008434 <TIM_Base_SetConfig+0x144>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d003      	beq.n	80083e8 <TIM_Base_SetConfig+0xf8>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a15      	ldr	r2, [pc, #84]	@ (8008438 <TIM_Base_SetConfig+0x148>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d103      	bne.n	80083f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	691a      	ldr	r2, [r3, #16]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d105      	bne.n	800840e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	f023 0201 	bic.w	r2, r3, #1
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	611a      	str	r2, [r3, #16]
  }
}
 800840e:	bf00      	nop
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	40012c00 	.word	0x40012c00
 8008420:	40000400 	.word	0x40000400
 8008424:	40000800 	.word	0x40000800
 8008428:	40000c00 	.word	0x40000c00
 800842c:	40013400 	.word	0x40013400
 8008430:	40014000 	.word	0x40014000
 8008434:	40014400 	.word	0x40014400
 8008438:	40014800 	.word	0x40014800

0800843c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	f023 0201 	bic.w	r2, r3, #1
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800846a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800846e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f023 0303 	bic.w	r3, r3, #3
 8008476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	4313      	orrs	r3, r2
 8008480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f023 0302 	bic.w	r3, r3, #2
 8008488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	4313      	orrs	r3, r2
 8008492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a2c      	ldr	r2, [pc, #176]	@ (8008548 <TIM_OC1_SetConfig+0x10c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00f      	beq.n	80084bc <TIM_OC1_SetConfig+0x80>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a2b      	ldr	r2, [pc, #172]	@ (800854c <TIM_OC1_SetConfig+0x110>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d00b      	beq.n	80084bc <TIM_OC1_SetConfig+0x80>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a2a      	ldr	r2, [pc, #168]	@ (8008550 <TIM_OC1_SetConfig+0x114>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d007      	beq.n	80084bc <TIM_OC1_SetConfig+0x80>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a29      	ldr	r2, [pc, #164]	@ (8008554 <TIM_OC1_SetConfig+0x118>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d003      	beq.n	80084bc <TIM_OC1_SetConfig+0x80>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a28      	ldr	r2, [pc, #160]	@ (8008558 <TIM_OC1_SetConfig+0x11c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d10c      	bne.n	80084d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	f023 0308 	bic.w	r3, r3, #8
 80084c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f023 0304 	bic.w	r3, r3, #4
 80084d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008548 <TIM_OC1_SetConfig+0x10c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00f      	beq.n	80084fe <TIM_OC1_SetConfig+0xc2>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a1a      	ldr	r2, [pc, #104]	@ (800854c <TIM_OC1_SetConfig+0x110>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d00b      	beq.n	80084fe <TIM_OC1_SetConfig+0xc2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a19      	ldr	r2, [pc, #100]	@ (8008550 <TIM_OC1_SetConfig+0x114>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d007      	beq.n	80084fe <TIM_OC1_SetConfig+0xc2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a18      	ldr	r2, [pc, #96]	@ (8008554 <TIM_OC1_SetConfig+0x118>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d003      	beq.n	80084fe <TIM_OC1_SetConfig+0xc2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a17      	ldr	r2, [pc, #92]	@ (8008558 <TIM_OC1_SetConfig+0x11c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d111      	bne.n	8008522 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800850c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	4313      	orrs	r3, r2
 8008516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	621a      	str	r2, [r3, #32]
}
 800853c:	bf00      	nop
 800853e:	371c      	adds	r7, #28
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	40012c00 	.word	0x40012c00
 800854c:	40013400 	.word	0x40013400
 8008550:	40014000 	.word	0x40014000
 8008554:	40014400 	.word	0x40014400
 8008558:	40014800 	.word	0x40014800

0800855c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	f023 0210 	bic.w	r2, r3, #16
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800858a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800858e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	021b      	lsls	r3, r3, #8
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f023 0320 	bic.w	r3, r3, #32
 80085aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a28      	ldr	r2, [pc, #160]	@ (800865c <TIM_OC2_SetConfig+0x100>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d003      	beq.n	80085c8 <TIM_OC2_SetConfig+0x6c>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a27      	ldr	r2, [pc, #156]	@ (8008660 <TIM_OC2_SetConfig+0x104>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d10d      	bne.n	80085e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	011b      	lsls	r3, r3, #4
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4313      	orrs	r3, r2
 80085da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a1d      	ldr	r2, [pc, #116]	@ (800865c <TIM_OC2_SetConfig+0x100>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d00f      	beq.n	800860c <TIM_OC2_SetConfig+0xb0>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a1c      	ldr	r2, [pc, #112]	@ (8008660 <TIM_OC2_SetConfig+0x104>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d00b      	beq.n	800860c <TIM_OC2_SetConfig+0xb0>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008664 <TIM_OC2_SetConfig+0x108>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d007      	beq.n	800860c <TIM_OC2_SetConfig+0xb0>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008668 <TIM_OC2_SetConfig+0x10c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d003      	beq.n	800860c <TIM_OC2_SetConfig+0xb0>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a19      	ldr	r2, [pc, #100]	@ (800866c <TIM_OC2_SetConfig+0x110>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d113      	bne.n	8008634 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800861a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	4313      	orrs	r3, r2
 8008626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	4313      	orrs	r3, r2
 8008632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	621a      	str	r2, [r3, #32]
}
 800864e:	bf00      	nop
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	40012c00 	.word	0x40012c00
 8008660:	40013400 	.word	0x40013400
 8008664:	40014000 	.word	0x40014000
 8008668:	40014400 	.word	0x40014400
 800866c:	40014800 	.word	0x40014800

08008670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800869e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f023 0303 	bic.w	r3, r3, #3
 80086aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	021b      	lsls	r3, r3, #8
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a27      	ldr	r2, [pc, #156]	@ (800876c <TIM_OC3_SetConfig+0xfc>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d003      	beq.n	80086da <TIM_OC3_SetConfig+0x6a>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a26      	ldr	r2, [pc, #152]	@ (8008770 <TIM_OC3_SetConfig+0x100>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d10d      	bne.n	80086f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	021b      	lsls	r3, r3, #8
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a1c      	ldr	r2, [pc, #112]	@ (800876c <TIM_OC3_SetConfig+0xfc>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d00f      	beq.n	800871e <TIM_OC3_SetConfig+0xae>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a1b      	ldr	r2, [pc, #108]	@ (8008770 <TIM_OC3_SetConfig+0x100>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d00b      	beq.n	800871e <TIM_OC3_SetConfig+0xae>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a1a      	ldr	r2, [pc, #104]	@ (8008774 <TIM_OC3_SetConfig+0x104>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d007      	beq.n	800871e <TIM_OC3_SetConfig+0xae>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a19      	ldr	r2, [pc, #100]	@ (8008778 <TIM_OC3_SetConfig+0x108>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d003      	beq.n	800871e <TIM_OC3_SetConfig+0xae>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a18      	ldr	r2, [pc, #96]	@ (800877c <TIM_OC3_SetConfig+0x10c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d113      	bne.n	8008746 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800872c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	011b      	lsls	r3, r3, #4
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	4313      	orrs	r3, r2
 8008738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	4313      	orrs	r3, r2
 8008744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	621a      	str	r2, [r3, #32]
}
 8008760:	bf00      	nop
 8008762:	371c      	adds	r7, #28
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	40012c00 	.word	0x40012c00
 8008770:	40013400 	.word	0x40013400
 8008774:	40014000 	.word	0x40014000
 8008778:	40014400 	.word	0x40014400
 800877c:	40014800 	.word	0x40014800

08008780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	021b      	lsls	r3, r3, #8
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	031b      	lsls	r3, r3, #12
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	4313      	orrs	r3, r2
 80087da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a18      	ldr	r2, [pc, #96]	@ (8008840 <TIM_OC4_SetConfig+0xc0>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d00f      	beq.n	8008804 <TIM_OC4_SetConfig+0x84>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a17      	ldr	r2, [pc, #92]	@ (8008844 <TIM_OC4_SetConfig+0xc4>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d00b      	beq.n	8008804 <TIM_OC4_SetConfig+0x84>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a16      	ldr	r2, [pc, #88]	@ (8008848 <TIM_OC4_SetConfig+0xc8>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d007      	beq.n	8008804 <TIM_OC4_SetConfig+0x84>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a15      	ldr	r2, [pc, #84]	@ (800884c <TIM_OC4_SetConfig+0xcc>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d003      	beq.n	8008804 <TIM_OC4_SetConfig+0x84>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a14      	ldr	r2, [pc, #80]	@ (8008850 <TIM_OC4_SetConfig+0xd0>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d109      	bne.n	8008818 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800880a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	019b      	lsls	r3, r3, #6
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	4313      	orrs	r3, r2
 8008816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685a      	ldr	r2, [r3, #4]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	621a      	str	r2, [r3, #32]
}
 8008832:	bf00      	nop
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	40012c00 	.word	0x40012c00
 8008844:	40013400 	.word	0x40013400
 8008848:	40014000 	.word	0x40014000
 800884c:	40014400 	.word	0x40014400
 8008850:	40014800 	.word	0x40014800

08008854 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800887a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4313      	orrs	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008898:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	041b      	lsls	r3, r3, #16
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a17      	ldr	r2, [pc, #92]	@ (8008908 <TIM_OC5_SetConfig+0xb4>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d00f      	beq.n	80088ce <TIM_OC5_SetConfig+0x7a>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a16      	ldr	r2, [pc, #88]	@ (800890c <TIM_OC5_SetConfig+0xb8>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d00b      	beq.n	80088ce <TIM_OC5_SetConfig+0x7a>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a15      	ldr	r2, [pc, #84]	@ (8008910 <TIM_OC5_SetConfig+0xbc>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d007      	beq.n	80088ce <TIM_OC5_SetConfig+0x7a>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a14      	ldr	r2, [pc, #80]	@ (8008914 <TIM_OC5_SetConfig+0xc0>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d003      	beq.n	80088ce <TIM_OC5_SetConfig+0x7a>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a13      	ldr	r2, [pc, #76]	@ (8008918 <TIM_OC5_SetConfig+0xc4>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d109      	bne.n	80088e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	021b      	lsls	r3, r3, #8
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	4313      	orrs	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	621a      	str	r2, [r3, #32]
}
 80088fc:	bf00      	nop
 80088fe:	371c      	adds	r7, #28
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	40012c00 	.word	0x40012c00
 800890c:	40013400 	.word	0x40013400
 8008910:	40014000 	.word	0x40014000
 8008914:	40014400 	.word	0x40014400
 8008918:	40014800 	.word	0x40014800

0800891c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800894a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800894e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	021b      	lsls	r3, r3, #8
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4313      	orrs	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	051b      	lsls	r3, r3, #20
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	4313      	orrs	r3, r2
 800896e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a18      	ldr	r2, [pc, #96]	@ (80089d4 <TIM_OC6_SetConfig+0xb8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00f      	beq.n	8008998 <TIM_OC6_SetConfig+0x7c>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a17      	ldr	r2, [pc, #92]	@ (80089d8 <TIM_OC6_SetConfig+0xbc>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d00b      	beq.n	8008998 <TIM_OC6_SetConfig+0x7c>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a16      	ldr	r2, [pc, #88]	@ (80089dc <TIM_OC6_SetConfig+0xc0>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d007      	beq.n	8008998 <TIM_OC6_SetConfig+0x7c>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a15      	ldr	r2, [pc, #84]	@ (80089e0 <TIM_OC6_SetConfig+0xc4>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d003      	beq.n	8008998 <TIM_OC6_SetConfig+0x7c>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a14      	ldr	r2, [pc, #80]	@ (80089e4 <TIM_OC6_SetConfig+0xc8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d109      	bne.n	80089ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800899e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	029b      	lsls	r3, r3, #10
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	621a      	str	r2, [r3, #32]
}
 80089c6:	bf00      	nop
 80089c8:	371c      	adds	r7, #28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	40012c00 	.word	0x40012c00
 80089d8:	40013400 	.word	0x40013400
 80089dc:	40014000 	.word	0x40014000
 80089e0:	40014400 	.word	0x40014400
 80089e4:	40014800 	.word	0x40014800

080089e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	f003 031f 	and.w	r3, r3, #31
 80089fa:	2201      	movs	r2, #1
 80089fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6a1a      	ldr	r2, [r3, #32]
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	43db      	mvns	r3, r3
 8008a0a:	401a      	ands	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6a1a      	ldr	r2, [r3, #32]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f003 031f 	and.w	r3, r3, #31
 8008a1a:	6879      	ldr	r1, [r7, #4]
 8008a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a20:	431a      	orrs	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	621a      	str	r2, [r3, #32]
}
 8008a26:	bf00      	nop
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
	...

08008a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d101      	bne.n	8008a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e068      	b.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2202      	movs	r2, #2
 8008a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a2e      	ldr	r2, [pc, #184]	@ (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d004      	beq.n	8008a80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a2d      	ldr	r2, [pc, #180]	@ (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d108      	bne.n	8008a92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d01d      	beq.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008abe:	d018      	beq.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8008b34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d013      	beq.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a1a      	ldr	r2, [pc, #104]	@ (8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d00e      	beq.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a18      	ldr	r2, [pc, #96]	@ (8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d009      	beq.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a13      	ldr	r2, [pc, #76]	@ (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d004      	beq.n	8008af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a14      	ldr	r2, [pc, #80]	@ (8008b40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d10c      	bne.n	8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	40012c00 	.word	0x40012c00
 8008b30:	40013400 	.word	0x40013400
 8008b34:	40000400 	.word	0x40000400
 8008b38:	40000800 	.word	0x40000800
 8008b3c:	40000c00 	.word	0x40000c00
 8008b40:	40014000 	.word	0x40014000

08008b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b80:	b084      	sub	sp, #16
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	f107 001c 	add.w	r0, r7, #28
 8008b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f001 fa26 	bl	8009ff0 <USB_CoreReset>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008ba8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d106      	bne.n	8008bbe <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	639a      	str	r2, [r3, #56]	@ 0x38
 8008bbc:	e005      	b.n	8008bca <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bd6:	b004      	add	sp, #16
 8008bd8:	4770      	bx	lr
	...

08008bdc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	4613      	mov	r3, r2
 8008be8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008bea:	79fb      	ldrb	r3, [r7, #7]
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d165      	bne.n	8008cbc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	4a3e      	ldr	r2, [pc, #248]	@ (8008cec <USB_SetTurnaroundTime+0x110>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d906      	bls.n	8008c06 <USB_SetTurnaroundTime+0x2a>
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8008cf0 <USB_SetTurnaroundTime+0x114>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d202      	bcs.n	8008c06 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008c00:	230f      	movs	r3, #15
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	e05c      	b.n	8008cc0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	4a39      	ldr	r2, [pc, #228]	@ (8008cf0 <USB_SetTurnaroundTime+0x114>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d306      	bcc.n	8008c1c <USB_SetTurnaroundTime+0x40>
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	4a38      	ldr	r2, [pc, #224]	@ (8008cf4 <USB_SetTurnaroundTime+0x118>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d202      	bcs.n	8008c1c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008c16:	230e      	movs	r3, #14
 8008c18:	617b      	str	r3, [r7, #20]
 8008c1a:	e051      	b.n	8008cc0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	4a35      	ldr	r2, [pc, #212]	@ (8008cf4 <USB_SetTurnaroundTime+0x118>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d306      	bcc.n	8008c32 <USB_SetTurnaroundTime+0x56>
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	4a34      	ldr	r2, [pc, #208]	@ (8008cf8 <USB_SetTurnaroundTime+0x11c>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d202      	bcs.n	8008c32 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008c2c:	230d      	movs	r3, #13
 8008c2e:	617b      	str	r3, [r7, #20]
 8008c30:	e046      	b.n	8008cc0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	4a30      	ldr	r2, [pc, #192]	@ (8008cf8 <USB_SetTurnaroundTime+0x11c>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d306      	bcc.n	8008c48 <USB_SetTurnaroundTime+0x6c>
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	4a2f      	ldr	r2, [pc, #188]	@ (8008cfc <USB_SetTurnaroundTime+0x120>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d802      	bhi.n	8008c48 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008c42:	230c      	movs	r3, #12
 8008c44:	617b      	str	r3, [r7, #20]
 8008c46:	e03b      	b.n	8008cc0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8008cfc <USB_SetTurnaroundTime+0x120>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d906      	bls.n	8008c5e <USB_SetTurnaroundTime+0x82>
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	4a2b      	ldr	r2, [pc, #172]	@ (8008d00 <USB_SetTurnaroundTime+0x124>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d802      	bhi.n	8008c5e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008c58:	230b      	movs	r3, #11
 8008c5a:	617b      	str	r3, [r7, #20]
 8008c5c:	e030      	b.n	8008cc0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	4a27      	ldr	r2, [pc, #156]	@ (8008d00 <USB_SetTurnaroundTime+0x124>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d906      	bls.n	8008c74 <USB_SetTurnaroundTime+0x98>
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	4a26      	ldr	r2, [pc, #152]	@ (8008d04 <USB_SetTurnaroundTime+0x128>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d802      	bhi.n	8008c74 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008c6e:	230a      	movs	r3, #10
 8008c70:	617b      	str	r3, [r7, #20]
 8008c72:	e025      	b.n	8008cc0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	4a23      	ldr	r2, [pc, #140]	@ (8008d04 <USB_SetTurnaroundTime+0x128>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d906      	bls.n	8008c8a <USB_SetTurnaroundTime+0xae>
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	4a22      	ldr	r2, [pc, #136]	@ (8008d08 <USB_SetTurnaroundTime+0x12c>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d202      	bcs.n	8008c8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008c84:	2309      	movs	r3, #9
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	e01a      	b.n	8008cc0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8008d08 <USB_SetTurnaroundTime+0x12c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d306      	bcc.n	8008ca0 <USB_SetTurnaroundTime+0xc4>
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	4a1d      	ldr	r2, [pc, #116]	@ (8008d0c <USB_SetTurnaroundTime+0x130>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d802      	bhi.n	8008ca0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008c9a:	2308      	movs	r3, #8
 8008c9c:	617b      	str	r3, [r7, #20]
 8008c9e:	e00f      	b.n	8008cc0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8008d0c <USB_SetTurnaroundTime+0x130>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d906      	bls.n	8008cb6 <USB_SetTurnaroundTime+0xda>
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	4a19      	ldr	r2, [pc, #100]	@ (8008d10 <USB_SetTurnaroundTime+0x134>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d202      	bcs.n	8008cb6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008cb0:	2307      	movs	r3, #7
 8008cb2:	617b      	str	r3, [r7, #20]
 8008cb4:	e004      	b.n	8008cc0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008cb6:	2306      	movs	r3, #6
 8008cb8:	617b      	str	r3, [r7, #20]
 8008cba:	e001      	b.n	8008cc0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008cbc:	2309      	movs	r3, #9
 8008cbe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	68da      	ldr	r2, [r3, #12]
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	029b      	lsls	r3, r3, #10
 8008cd4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	00d8acbf 	.word	0x00d8acbf
 8008cf0:	00e4e1c0 	.word	0x00e4e1c0
 8008cf4:	00f42400 	.word	0x00f42400
 8008cf8:	01067380 	.word	0x01067380
 8008cfc:	011a499f 	.word	0x011a499f
 8008d00:	01312cff 	.word	0x01312cff
 8008d04:	014ca43f 	.word	0x014ca43f
 8008d08:	016e3600 	.word	0x016e3600
 8008d0c:	01a6ab1f 	.word	0x01a6ab1f
 8008d10:	01e84800 	.word	0x01e84800

08008d14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f043 0201 	orr.w	r2, r3, #1
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	370c      	adds	r7, #12
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f023 0201 	bic.w	r2, r3, #1
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d115      	bne.n	8008da6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008d86:	200a      	movs	r0, #10
 8008d88:	f7fa f92e 	bl	8002fe8 <HAL_Delay>
      ms += 10U;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	330a      	adds	r3, #10
 8008d90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 f8b3 	bl	8009efe <USB_GetMode>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d01e      	beq.n	8008ddc <USB_SetCurrentMode+0x84>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2bc7      	cmp	r3, #199	@ 0xc7
 8008da2:	d9f0      	bls.n	8008d86 <USB_SetCurrentMode+0x2e>
 8008da4:	e01a      	b.n	8008ddc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d115      	bne.n	8008dd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008db8:	200a      	movs	r0, #10
 8008dba:	f7fa f915 	bl	8002fe8 <HAL_Delay>
      ms += 10U;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	330a      	adds	r3, #10
 8008dc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 f89a 	bl	8009efe <USB_GetMode>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d005      	beq.n	8008ddc <USB_SetCurrentMode+0x84>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2bc7      	cmp	r3, #199	@ 0xc7
 8008dd4:	d9f0      	bls.n	8008db8 <USB_SetCurrentMode+0x60>
 8008dd6:	e001      	b.n	8008ddc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e005      	b.n	8008de8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2bc8      	cmp	r3, #200	@ 0xc8
 8008de0:	d101      	bne.n	8008de6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e000      	b.n	8008de8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008df0:	b084      	sub	sp, #16
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b086      	sub	sp, #24
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	613b      	str	r3, [r7, #16]
 8008e0e:	e009      	b.n	8008e24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3340      	adds	r3, #64	@ 0x40
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	3301      	adds	r3, #1
 8008e22:	613b      	str	r3, [r7, #16]
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2b0e      	cmp	r3, #14
 8008e28:	d9f2      	bls.n	8008e10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e2a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d11c      	bne.n	8008e6c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e40:	f043 0302 	orr.w	r3, r3, #2
 8008e44:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	e005      	b.n	8008e78 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e70:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e7e:	461a      	mov	r2, r3
 8008e80:	2300      	movs	r3, #0
 8008e82:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e84:	2103      	movs	r1, #3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f95a 	bl	8009140 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e8c:	2110      	movs	r1, #16
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f8f6 	bl	8009080 <USB_FlushTxFifo>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f920 	bl	80090e4 <USB_FlushRxFifo>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ecc:	461a      	mov	r2, r3
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	613b      	str	r3, [r7, #16]
 8008ed6:	e043      	b.n	8008f60 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008eea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008eee:	d118      	bne.n	8008f22 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10a      	bne.n	8008f0c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f02:	461a      	mov	r2, r3
 8008f04:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008f08:	6013      	str	r3, [r2, #0]
 8008f0a:	e013      	b.n	8008f34 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f18:	461a      	mov	r2, r3
 8008f1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008f1e:	6013      	str	r3, [r2, #0]
 8008f20:	e008      	b.n	8008f34 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f2e:	461a      	mov	r2, r3
 8008f30:	2300      	movs	r3, #0
 8008f32:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f40:	461a      	mov	r2, r3
 8008f42:	2300      	movs	r3, #0
 8008f44:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f52:	461a      	mov	r2, r3
 8008f54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008f58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	613b      	str	r3, [r7, #16]
 8008f60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008f64:	461a      	mov	r2, r3
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d3b5      	bcc.n	8008ed8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	613b      	str	r3, [r7, #16]
 8008f70:	e043      	b.n	8008ffa <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f88:	d118      	bne.n	8008fbc <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10a      	bne.n	8008fa6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	e013      	b.n	8008fce <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	e008      	b.n	8008fce <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fc8:	461a      	mov	r2, r3
 8008fca:	2300      	movs	r3, #0
 8008fcc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fda:	461a      	mov	r2, r3
 8008fdc:	2300      	movs	r3, #0
 8008fde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fec:	461a      	mov	r2, r3
 8008fee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008ff2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	613b      	str	r3, [r7, #16]
 8008ffa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008ffe:	461a      	mov	r2, r3
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	4293      	cmp	r3, r2
 8009004:	d3b5      	bcc.n	8008f72 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009018:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009026:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	f043 0210 	orr.w	r2, r3, #16
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	699a      	ldr	r2, [r3, #24]
 8009038:	4b10      	ldr	r3, [pc, #64]	@ (800907c <USB_DevInit+0x28c>)
 800903a:	4313      	orrs	r3, r2
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009040:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009044:	2b00      	cmp	r3, #0
 8009046:	d005      	beq.n	8009054 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	f043 0208 	orr.w	r2, r3, #8
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009054:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009058:	2b01      	cmp	r3, #1
 800905a:	d107      	bne.n	800906c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009064:	f043 0304 	orr.w	r3, r3, #4
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800906c:	7dfb      	ldrb	r3, [r7, #23]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009078:	b004      	add	sp, #16
 800907a:	4770      	bx	lr
 800907c:	803c3800 	.word	0x803c3800

08009080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3301      	adds	r3, #1
 8009092:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800909a:	d901      	bls.n	80090a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e01b      	b.n	80090d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	daf2      	bge.n	800908e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80090a8:	2300      	movs	r3, #0
 80090aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	019b      	lsls	r3, r3, #6
 80090b0:	f043 0220 	orr.w	r2, r3, #32
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3301      	adds	r3, #1
 80090bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090c4:	d901      	bls.n	80090ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e006      	b.n	80090d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	f003 0320 	and.w	r3, r3, #32
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d0f0      	beq.n	80090b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090ec:	2300      	movs	r3, #0
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	3301      	adds	r3, #1
 80090f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090fc:	d901      	bls.n	8009102 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e018      	b.n	8009134 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	daf2      	bge.n	80090f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800910a:	2300      	movs	r3, #0
 800910c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2210      	movs	r2, #16
 8009112:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3301      	adds	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009120:	d901      	bls.n	8009126 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e006      	b.n	8009134 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	f003 0310 	and.w	r3, r3, #16
 800912e:	2b10      	cmp	r3, #16
 8009130:	d0f0      	beq.n	8009114 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	68f9      	ldr	r1, [r7, #12]
 800915c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009160:	4313      	orrs	r3, r2
 8009162:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009172:	b480      	push	{r7}
 8009174:	b087      	sub	sp, #28
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f003 0306 	and.w	r3, r3, #6
 800918a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d002      	beq.n	8009198 <USB_GetDevSpeed+0x26>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b06      	cmp	r3, #6
 8009196:	d102      	bne.n	800919e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009198:	2302      	movs	r3, #2
 800919a:	75fb      	strb	r3, [r7, #23]
 800919c:	e001      	b.n	80091a2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800919e:	230f      	movs	r3, #15
 80091a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	371c      	adds	r7, #28
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	785b      	ldrb	r3, [r3, #1]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d13a      	bne.n	8009242 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091d2:	69da      	ldr	r2, [r3, #28]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	f003 030f 	and.w	r3, r3, #15
 80091dc:	2101      	movs	r1, #1
 80091de:	fa01 f303 	lsl.w	r3, r1, r3
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	68f9      	ldr	r1, [r7, #12]
 80091e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091ea:	4313      	orrs	r3, r2
 80091ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d155      	bne.n	80092b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	015a      	lsls	r2, r3, #5
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4413      	add	r3, r2
 800920c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	791b      	ldrb	r3, [r3, #4]
 800921e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009220:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	059b      	lsls	r3, r3, #22
 8009226:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009228:	4313      	orrs	r3, r2
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	0151      	lsls	r1, r2, #5
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	440a      	add	r2, r1
 8009232:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800923a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	e036      	b.n	80092b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009248:	69da      	ldr	r2, [r3, #28]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	f003 030f 	and.w	r3, r3, #15
 8009252:	2101      	movs	r1, #1
 8009254:	fa01 f303 	lsl.w	r3, r1, r3
 8009258:	041b      	lsls	r3, r3, #16
 800925a:	68f9      	ldr	r1, [r7, #12]
 800925c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009260:	4313      	orrs	r3, r2
 8009262:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d11a      	bne.n	80092b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	4413      	add	r3, r2
 8009282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	791b      	ldrb	r3, [r3, #4]
 8009294:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009296:	430b      	orrs	r3, r1
 8009298:	4313      	orrs	r3, r2
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	0151      	lsls	r1, r2, #5
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	440a      	add	r2, r1
 80092a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
	...

080092c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	785b      	ldrb	r3, [r3, #1]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d161      	bne.n	80093a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092f2:	d11f      	bne.n	8009334 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	015a      	lsls	r2, r3, #5
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	0151      	lsls	r1, r2, #5
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	440a      	add	r2, r1
 800930a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800930e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009312:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	015a      	lsls	r2, r3, #5
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4413      	add	r3, r2
 800931c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	0151      	lsls	r1, r2, #5
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	440a      	add	r2, r1
 800932a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800932e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009332:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800933a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	f003 030f 	and.w	r3, r3, #15
 8009344:	2101      	movs	r1, #1
 8009346:	fa01 f303 	lsl.w	r3, r1, r3
 800934a:	b29b      	uxth	r3, r3
 800934c:	43db      	mvns	r3, r3
 800934e:	68f9      	ldr	r1, [r7, #12]
 8009350:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009354:	4013      	ands	r3, r2
 8009356:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	f003 030f 	and.w	r3, r3, #15
 8009368:	2101      	movs	r1, #1
 800936a:	fa01 f303 	lsl.w	r3, r1, r3
 800936e:	b29b      	uxth	r3, r3
 8009370:	43db      	mvns	r3, r3
 8009372:	68f9      	ldr	r1, [r7, #12]
 8009374:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009378:	4013      	ands	r3, r2
 800937a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	4413      	add	r3, r2
 8009384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	0159      	lsls	r1, r3, #5
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	440b      	add	r3, r1
 8009392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009396:	4619      	mov	r1, r3
 8009398:	4b35      	ldr	r3, [pc, #212]	@ (8009470 <USB_DeactivateEndpoint+0x1b0>)
 800939a:	4013      	ands	r3, r2
 800939c:	600b      	str	r3, [r1, #0]
 800939e:	e060      	b.n	8009462 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093b6:	d11f      	bne.n	80093f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	0151      	lsls	r1, r2, #5
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	440a      	add	r2, r1
 80093ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	0151      	lsls	r1, r2, #5
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	440a      	add	r2, r1
 80093ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	f003 030f 	and.w	r3, r3, #15
 8009408:	2101      	movs	r1, #1
 800940a:	fa01 f303 	lsl.w	r3, r1, r3
 800940e:	041b      	lsls	r3, r3, #16
 8009410:	43db      	mvns	r3, r3
 8009412:	68f9      	ldr	r1, [r7, #12]
 8009414:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009418:	4013      	ands	r3, r2
 800941a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009422:	69da      	ldr	r2, [r3, #28]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	f003 030f 	and.w	r3, r3, #15
 800942c:	2101      	movs	r1, #1
 800942e:	fa01 f303 	lsl.w	r3, r1, r3
 8009432:	041b      	lsls	r3, r3, #16
 8009434:	43db      	mvns	r3, r3
 8009436:	68f9      	ldr	r1, [r7, #12]
 8009438:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800943c:	4013      	ands	r3, r2
 800943e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4413      	add	r3, r2
 8009448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	0159      	lsls	r1, r3, #5
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	440b      	add	r3, r1
 8009456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800945a:	4619      	mov	r1, r3
 800945c:	4b05      	ldr	r3, [pc, #20]	@ (8009474 <USB_DeactivateEndpoint+0x1b4>)
 800945e:	4013      	ands	r3, r2
 8009460:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	ec337800 	.word	0xec337800
 8009474:	eff37800 	.word	0xeff37800

08009478 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	785b      	ldrb	r3, [r3, #1]
 8009490:	2b01      	cmp	r3, #1
 8009492:	f040 812d 	bne.w	80096f0 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d132      	bne.n	8009504 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	0151      	lsls	r1, r2, #5
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	440a      	add	r2, r1
 80094b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80094bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80094c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	0151      	lsls	r1, r2, #5
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	440a      	add	r2, r1
 80094d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80094e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094fc:	0cdb      	lsrs	r3, r3, #19
 80094fe:	04db      	lsls	r3, r3, #19
 8009500:	6113      	str	r3, [r2, #16]
 8009502:	e097      	b.n	8009634 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	0151      	lsls	r1, r2, #5
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	440a      	add	r2, r1
 800951a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800951e:	0cdb      	lsrs	r3, r3, #19
 8009520:	04db      	lsls	r3, r3, #19
 8009522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	0151      	lsls	r1, r2, #5
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	440a      	add	r2, r1
 800953a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800953e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009542:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009546:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d11a      	bne.n	8009584 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	429a      	cmp	r2, r3
 8009558:	d903      	bls.n	8009562 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	689a      	ldr	r2, [r3, #8]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	4413      	add	r3, r2
 800956a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	0151      	lsls	r1, r2, #5
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	440a      	add	r2, r1
 8009578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800957c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009580:	6113      	str	r3, [r2, #16]
 8009582:	e044      	b.n	800960e <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	691a      	ldr	r2, [r3, #16]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	4413      	add	r3, r2
 800958e:	1e5a      	subs	r2, r3, #1
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	fbb2 f3f3 	udiv	r3, r2, r3
 8009598:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a6:	691a      	ldr	r2, [r3, #16]
 80095a8:	89fb      	ldrh	r3, [r7, #14]
 80095aa:	04d9      	lsls	r1, r3, #19
 80095ac:	4b8f      	ldr	r3, [pc, #572]	@ (80097ec <USB_EPStartXfer+0x374>)
 80095ae:	400b      	ands	r3, r1
 80095b0:	6939      	ldr	r1, [r7, #16]
 80095b2:	0148      	lsls	r0, r1, #5
 80095b4:	6979      	ldr	r1, [r7, #20]
 80095b6:	4401      	add	r1, r0
 80095b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80095bc:	4313      	orrs	r3, r2
 80095be:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	791b      	ldrb	r3, [r3, #4]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d122      	bne.n	800960e <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	0151      	lsls	r1, r2, #5
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	440a      	add	r2, r1
 80095de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095e2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80095e6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095f4:	691a      	ldr	r2, [r3, #16]
 80095f6:	89fb      	ldrh	r3, [r7, #14]
 80095f8:	075b      	lsls	r3, r3, #29
 80095fa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80095fe:	6939      	ldr	r1, [r7, #16]
 8009600:	0148      	lsls	r0, r1, #5
 8009602:	6979      	ldr	r1, [r7, #20]
 8009604:	4401      	add	r1, r0
 8009606:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800960a:	4313      	orrs	r3, r2
 800960c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	4413      	add	r3, r2
 8009616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800961a:	691a      	ldr	r2, [r3, #16]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009624:	6939      	ldr	r1, [r7, #16]
 8009626:	0148      	lsls	r0, r1, #5
 8009628:	6979      	ldr	r1, [r7, #20]
 800962a:	4401      	add	r1, r0
 800962c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009630:	4313      	orrs	r3, r2
 8009632:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	0151      	lsls	r1, r2, #5
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	440a      	add	r2, r1
 800964a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800964e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009652:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	791b      	ldrb	r3, [r3, #4]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d015      	beq.n	8009688 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 813a 	beq.w	80098da <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800966c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	f003 030f 	and.w	r3, r3, #15
 8009676:	2101      	movs	r1, #1
 8009678:	fa01 f303 	lsl.w	r3, r1, r3
 800967c:	6979      	ldr	r1, [r7, #20]
 800967e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009682:	4313      	orrs	r3, r2
 8009684:	634b      	str	r3, [r1, #52]	@ 0x34
 8009686:	e128      	b.n	80098da <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009694:	2b00      	cmp	r3, #0
 8009696:	d110      	bne.n	80096ba <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	0151      	lsls	r1, r2, #5
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	440a      	add	r2, r1
 80096ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	e00f      	b.n	80096da <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	0151      	lsls	r1, r2, #5
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	440a      	add	r2, r1
 80096d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096d8:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	68d9      	ldr	r1, [r3, #12]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	781a      	ldrb	r2, [r3, #0]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f9a7 	bl	8009a3c <USB_WritePacket>
 80096ee:	e0f4      	b.n	80098da <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	015a      	lsls	r2, r3, #5
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	0151      	lsls	r1, r2, #5
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	440a      	add	r2, r1
 8009706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800970a:	0cdb      	lsrs	r3, r3, #19
 800970c:	04db      	lsls	r3, r3, #19
 800970e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	0151      	lsls	r1, r2, #5
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	440a      	add	r2, r1
 8009726:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800972a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800972e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009732:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d12f      	bne.n	800979a <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	689a      	ldr	r2, [r3, #8]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	689a      	ldr	r2, [r3, #8]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800975e:	691a      	ldr	r2, [r3, #16]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	6a1b      	ldr	r3, [r3, #32]
 8009764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009768:	6939      	ldr	r1, [r7, #16]
 800976a:	0148      	lsls	r0, r1, #5
 800976c:	6979      	ldr	r1, [r7, #20]
 800976e:	4401      	add	r1, r0
 8009770:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009774:	4313      	orrs	r3, r2
 8009776:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	440a      	add	r2, r1
 800978e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009792:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009796:	6113      	str	r3, [r2, #16]
 8009798:	e062      	b.n	8009860 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d126      	bne.n	80097f0 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097ae:	691a      	ldr	r2, [r3, #16]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097b8:	6939      	ldr	r1, [r7, #16]
 80097ba:	0148      	lsls	r0, r1, #5
 80097bc:	6979      	ldr	r1, [r7, #20]
 80097be:	4401      	add	r1, r0
 80097c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80097c4:	4313      	orrs	r3, r2
 80097c6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	0151      	lsls	r1, r2, #5
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	440a      	add	r2, r1
 80097de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80097e6:	6113      	str	r3, [r2, #16]
 80097e8:	e03a      	b.n	8009860 <USB_EPStartXfer+0x3e8>
 80097ea:	bf00      	nop
 80097ec:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	691a      	ldr	r2, [r3, #16]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	4413      	add	r3, r2
 80097fa:	1e5a      	subs	r2, r3, #1
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	fbb2 f3f3 	udiv	r3, r2, r3
 8009804:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	89fa      	ldrh	r2, [r7, #14]
 800980c:	fb03 f202 	mul.w	r2, r3, r2
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009820:	691a      	ldr	r2, [r3, #16]
 8009822:	89fb      	ldrh	r3, [r7, #14]
 8009824:	04d9      	lsls	r1, r3, #19
 8009826:	4b2f      	ldr	r3, [pc, #188]	@ (80098e4 <USB_EPStartXfer+0x46c>)
 8009828:	400b      	ands	r3, r1
 800982a:	6939      	ldr	r1, [r7, #16]
 800982c:	0148      	lsls	r0, r1, #5
 800982e:	6979      	ldr	r1, [r7, #20]
 8009830:	4401      	add	r1, r0
 8009832:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009836:	4313      	orrs	r3, r2
 8009838:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	015a      	lsls	r2, r3, #5
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	4413      	add	r3, r2
 8009842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009846:	691a      	ldr	r2, [r3, #16]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	6a1b      	ldr	r3, [r3, #32]
 800984c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009850:	6939      	ldr	r1, [r7, #16]
 8009852:	0148      	lsls	r0, r1, #5
 8009854:	6979      	ldr	r1, [r7, #20]
 8009856:	4401      	add	r1, r0
 8009858:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800985c:	4313      	orrs	r3, r2
 800985e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	791b      	ldrb	r3, [r3, #4]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d128      	bne.n	80098ba <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009874:	2b00      	cmp	r3, #0
 8009876:	d110      	bne.n	800989a <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	015a      	lsls	r2, r3, #5
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	0151      	lsls	r1, r2, #5
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	440a      	add	r2, r1
 800988e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009892:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009896:	6013      	str	r3, [r2, #0]
 8009898:	e00f      	b.n	80098ba <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	0151      	lsls	r1, r2, #5
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	440a      	add	r2, r1
 80098b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098b8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	0151      	lsls	r1, r2, #5
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	440a      	add	r2, r1
 80098d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098d4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80098d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3718      	adds	r7, #24
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	1ff80000 	.word	0x1ff80000

080098e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	785b      	ldrb	r3, [r3, #1]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d14a      	bne.n	800999c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	015a      	lsls	r2, r3, #5
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	4413      	add	r3, r2
 8009910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800991a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800991e:	f040 8086 	bne.w	8009a2e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	7812      	ldrb	r2, [r2, #0]
 8009936:	0151      	lsls	r1, r2, #5
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	440a      	add	r2, r1
 800993c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009940:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009944:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	015a      	lsls	r2, r3, #5
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	4413      	add	r3, r2
 8009950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	7812      	ldrb	r2, [r2, #0]
 800995a:	0151      	lsls	r1, r2, #5
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	440a      	add	r2, r1
 8009960:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009964:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009968:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3301      	adds	r3, #1
 800996e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009976:	4293      	cmp	r3, r2
 8009978:	d902      	bls.n	8009980 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	75fb      	strb	r3, [r7, #23]
          break;
 800997e:	e056      	b.n	8009a2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	015a      	lsls	r2, r3, #5
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	4413      	add	r3, r2
 800998a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009994:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009998:	d0e7      	beq.n	800996a <USB_EPStopXfer+0x82>
 800999a:	e048      	b.n	8009a2e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	015a      	lsls	r2, r3, #5
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	4413      	add	r3, r2
 80099a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099b4:	d13b      	bne.n	8009a2e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	7812      	ldrb	r2, [r2, #0]
 80099ca:	0151      	lsls	r1, r2, #5
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	440a      	add	r2, r1
 80099d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80099d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	015a      	lsls	r2, r3, #5
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	4413      	add	r3, r2
 80099e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	7812      	ldrb	r2, [r2, #0]
 80099ee:	0151      	lsls	r1, r2, #5
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	440a      	add	r2, r1
 80099f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	3301      	adds	r3, #1
 8009a02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d902      	bls.n	8009a14 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	75fb      	strb	r3, [r7, #23]
          break;
 8009a12:	e00c      	b.n	8009a2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	015a      	lsls	r2, r3, #5
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a2c:	d0e7      	beq.n	80099fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	371c      	adds	r7, #28
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b089      	sub	sp, #36	@ 0x24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	4611      	mov	r1, r2
 8009a48:	461a      	mov	r2, r3
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	71fb      	strb	r3, [r7, #7]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009a5a:	88bb      	ldrh	r3, [r7, #4]
 8009a5c:	3303      	adds	r3, #3
 8009a5e:	089b      	lsrs	r3, r3, #2
 8009a60:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8009a62:	2300      	movs	r3, #0
 8009a64:	61bb      	str	r3, [r7, #24]
 8009a66:	e018      	b.n	8009a9a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a68:	79fb      	ldrb	r3, [r7, #7]
 8009a6a:	031a      	lsls	r2, r3, #12
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a74:	461a      	mov	r2, r3
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	3301      	adds	r3, #1
 8009a86:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	3301      	adds	r3, #1
 8009a92:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	3301      	adds	r3, #1
 8009a98:	61bb      	str	r3, [r7, #24]
 8009a9a:	69ba      	ldr	r2, [r7, #24]
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d3e2      	bcc.n	8009a68 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3724      	adds	r7, #36	@ 0x24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b08b      	sub	sp, #44	@ 0x2c
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	4613      	mov	r3, r2
 8009abc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ac6:	88fb      	ldrh	r3, [r7, #6]
 8009ac8:	089b      	lsrs	r3, r3, #2
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009ace:	88fb      	ldrh	r3, [r7, #6]
 8009ad0:	f003 0303 	and.w	r3, r3, #3
 8009ad4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	623b      	str	r3, [r7, #32]
 8009ada:	e014      	b.n	8009b06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aea:	3301      	adds	r3, #1
 8009aec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af0:	3301      	adds	r3, #1
 8009af2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af6:	3301      	adds	r3, #1
 8009af8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afc:	3301      	adds	r3, #1
 8009afe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009b00:	6a3b      	ldr	r3, [r7, #32]
 8009b02:	3301      	adds	r3, #1
 8009b04:	623b      	str	r3, [r7, #32]
 8009b06:	6a3a      	ldr	r2, [r7, #32]
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d3e6      	bcc.n	8009adc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009b0e:	8bfb      	ldrh	r3, [r7, #30]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d01e      	beq.n	8009b52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009b14:	2300      	movs	r3, #0
 8009b16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b1e:	461a      	mov	r2, r3
 8009b20:	f107 0310 	add.w	r3, r7, #16
 8009b24:	6812      	ldr	r2, [r2, #0]
 8009b26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	fa22 f303 	lsr.w	r3, r2, r3
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b38:	701a      	strb	r2, [r3, #0]
      i++;
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b42:	3301      	adds	r3, #1
 8009b44:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009b46:	8bfb      	ldrh	r3, [r7, #30]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009b4c:	8bfb      	ldrh	r3, [r7, #30]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1ea      	bne.n	8009b28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	372c      	adds	r7, #44	@ 0x2c
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	785b      	ldrb	r3, [r3, #1]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d12c      	bne.n	8009bd6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	015a      	lsls	r2, r3, #5
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	db12      	blt.n	8009bb4 <USB_EPSetStall+0x54>
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00f      	beq.n	8009bb4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	0151      	lsls	r1, r2, #5
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	440a      	add	r2, r1
 8009baa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009bb2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	015a      	lsls	r2, r3, #5
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4413      	add	r3, r2
 8009bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	0151      	lsls	r1, r2, #5
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	440a      	add	r2, r1
 8009bca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	e02b      	b.n	8009c2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	db12      	blt.n	8009c0e <USB_EPSetStall+0xae>
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00f      	beq.n	8009c0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	0151      	lsls	r1, r2, #5
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	440a      	add	r2, r1
 8009c04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c08:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009c0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	015a      	lsls	r2, r3, #5
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	4413      	add	r3, r2
 8009c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	0151      	lsls	r1, r2, #5
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	440a      	add	r2, r1
 8009c24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009c2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	785b      	ldrb	r3, [r3, #1]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d128      	bne.n	8009caa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	0151      	lsls	r1, r2, #5
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	440a      	add	r2, r1
 8009c6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009c76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	791b      	ldrb	r3, [r3, #4]
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	d003      	beq.n	8009c88 <USB_EPClearStall+0x4c>
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	791b      	ldrb	r3, [r3, #4]
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d138      	bne.n	8009cfa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	0151      	lsls	r1, r2, #5
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	440a      	add	r2, r1
 8009c9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	e027      	b.n	8009cfa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	015a      	lsls	r2, r3, #5
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	0151      	lsls	r1, r2, #5
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	440a      	add	r2, r1
 8009cc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cc4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009cc8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	791b      	ldrb	r3, [r3, #4]
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d003      	beq.n	8009cda <USB_EPClearStall+0x9e>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	791b      	ldrb	r3, [r3, #4]
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d10f      	bne.n	8009cfa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	015a      	lsls	r2, r3, #5
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	0151      	lsls	r1, r2, #5
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	440a      	add	r2, r1
 8009cf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cf8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3714      	adds	r7, #20
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	460b      	mov	r3, r1
 8009d12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d26:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009d2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	78fb      	ldrb	r3, [r7, #3]
 8009d36:	011b      	lsls	r3, r3, #4
 8009d38:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009d3c:	68f9      	ldr	r1, [r7, #12]
 8009d3e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d42:	4313      	orrs	r3, r2
 8009d44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009d6e:	f023 0303 	bic.w	r3, r3, #3
 8009d72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d82:	f023 0302 	bic.w	r3, r3, #2
 8009d86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b085      	sub	sp, #20
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009db0:	f023 0303 	bic.w	r3, r3, #3
 8009db4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009dc4:	f043 0302 	orr.w	r3, r3, #2
 8009dc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	4013      	ands	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009df0:	68fb      	ldr	r3, [r7, #12]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009dfe:	b480      	push	{r7}
 8009e00:	b085      	sub	sp, #20
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e1a:	69db      	ldr	r3, [r3, #28]
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	4013      	ands	r3, r2
 8009e20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	0c1b      	lsrs	r3, r3, #16
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b085      	sub	sp, #20
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	4013      	ands	r3, r2
 8009e54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	b29b      	uxth	r3, r3
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	460b      	mov	r3, r1
 8009e70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e76:	78fb      	ldrb	r3, [r7, #3]
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e8c:	695b      	ldr	r3, [r3, #20]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	4013      	ands	r3, r2
 8009e92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e94:	68bb      	ldr	r3, [r7, #8]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b087      	sub	sp, #28
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ec4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ec6:	78fb      	ldrb	r3, [r7, #3]
 8009ec8:	f003 030f 	and.w	r3, r3, #15
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed2:	01db      	lsls	r3, r3, #7
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	015a      	lsls	r2, r3, #5
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	4013      	ands	r3, r2
 8009eee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ef0:	68bb      	ldr	r3, [r7, #8]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	371c      	adds	r7, #28
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	f003 0301 	and.w	r3, r3, #1
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b085      	sub	sp, #20
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f34:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009f38:	f023 0307 	bic.w	r3, r3, #7
 8009f3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	333c      	adds	r3, #60	@ 0x3c
 8009f72:	3304      	adds	r3, #4
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8009fec <USB_EP0_OutStart+0x8c>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d90a      	bls.n	8009f96 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f90:	d101      	bne.n	8009f96 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	e024      	b.n	8009fe0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009fb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fc4:	f043 0318 	orr.w	r3, r3, #24
 8009fc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fd8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009fdc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3714      	adds	r7, #20
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	4f54300a 	.word	0x4f54300a

08009ff0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3301      	adds	r3, #1
 800a000:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a008:	d901      	bls.n	800a00e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e01b      	b.n	800a046 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	daf2      	bge.n	8009ffc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a016:	2300      	movs	r3, #0
 800a018:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	f043 0201 	orr.w	r2, r3, #1
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3301      	adds	r3, #1
 800a02a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a032:	d901      	bls.n	800a038 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e006      	b.n	800a046 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	691b      	ldr	r3, [r3, #16]
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b01      	cmp	r3, #1
 800a042:	d0f0      	beq.n	800a026 <USB_CoreReset+0x36>

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
	...

0800a054 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	460b      	mov	r3, r1
 800a05e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a060:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a064:	f005 fc2a 	bl	800f8bc <USBD_static_malloc>
 800a068:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d109      	bne.n	800a084 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	32b0      	adds	r2, #176	@ 0xb0
 800a07a:	2100      	movs	r1, #0
 800a07c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a080:	2302      	movs	r3, #2
 800a082:	e0d4      	b.n	800a22e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a084:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a088:	2100      	movs	r1, #0
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f006 f991 	bl	80103b2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	32b0      	adds	r2, #176	@ 0xb0
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	32b0      	adds	r2, #176	@ 0xb0
 800a0aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	7c1b      	ldrb	r3, [r3, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d138      	bne.n	800a12e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a0bc:	4b5e      	ldr	r3, [pc, #376]	@ (800a238 <USBD_CDC_Init+0x1e4>)
 800a0be:	7819      	ldrb	r1, [r3, #0]
 800a0c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f005 f9e4 	bl	800f494 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a0cc:	4b5a      	ldr	r3, [pc, #360]	@ (800a238 <USBD_CDC_Init+0x1e4>)
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	f003 020f 	and.w	r2, r3, #15
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	440b      	add	r3, r1
 800a0e0:	3324      	adds	r3, #36	@ 0x24
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a0e6:	4b55      	ldr	r3, [pc, #340]	@ (800a23c <USBD_CDC_Init+0x1e8>)
 800a0e8:	7819      	ldrb	r1, [r3, #0]
 800a0ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f005 f9cf 	bl	800f494 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a0f6:	4b51      	ldr	r3, [pc, #324]	@ (800a23c <USBD_CDC_Init+0x1e8>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	f003 020f 	and.w	r2, r3, #15
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	4613      	mov	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	440b      	add	r3, r1
 800a10a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a10e:	2201      	movs	r2, #1
 800a110:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a112:	4b4b      	ldr	r3, [pc, #300]	@ (800a240 <USBD_CDC_Init+0x1ec>)
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	f003 020f 	and.w	r2, r3, #15
 800a11a:	6879      	ldr	r1, [r7, #4]
 800a11c:	4613      	mov	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4413      	add	r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	440b      	add	r3, r1
 800a126:	3326      	adds	r3, #38	@ 0x26
 800a128:	2210      	movs	r2, #16
 800a12a:	801a      	strh	r2, [r3, #0]
 800a12c:	e035      	b.n	800a19a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a12e:	4b42      	ldr	r3, [pc, #264]	@ (800a238 <USBD_CDC_Init+0x1e4>)
 800a130:	7819      	ldrb	r1, [r3, #0]
 800a132:	2340      	movs	r3, #64	@ 0x40
 800a134:	2202      	movs	r2, #2
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f005 f9ac 	bl	800f494 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a13c:	4b3e      	ldr	r3, [pc, #248]	@ (800a238 <USBD_CDC_Init+0x1e4>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	f003 020f 	and.w	r2, r3, #15
 800a144:	6879      	ldr	r1, [r7, #4]
 800a146:	4613      	mov	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	440b      	add	r3, r1
 800a150:	3324      	adds	r3, #36	@ 0x24
 800a152:	2201      	movs	r2, #1
 800a154:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a156:	4b39      	ldr	r3, [pc, #228]	@ (800a23c <USBD_CDC_Init+0x1e8>)
 800a158:	7819      	ldrb	r1, [r3, #0]
 800a15a:	2340      	movs	r3, #64	@ 0x40
 800a15c:	2202      	movs	r2, #2
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f005 f998 	bl	800f494 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a164:	4b35      	ldr	r3, [pc, #212]	@ (800a23c <USBD_CDC_Init+0x1e8>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	f003 020f 	and.w	r2, r3, #15
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	440b      	add	r3, r1
 800a178:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a17c:	2201      	movs	r2, #1
 800a17e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a180:	4b2f      	ldr	r3, [pc, #188]	@ (800a240 <USBD_CDC_Init+0x1ec>)
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	f003 020f 	and.w	r2, r3, #15
 800a188:	6879      	ldr	r1, [r7, #4]
 800a18a:	4613      	mov	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	440b      	add	r3, r1
 800a194:	3326      	adds	r3, #38	@ 0x26
 800a196:	2210      	movs	r2, #16
 800a198:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a19a:	4b29      	ldr	r3, [pc, #164]	@ (800a240 <USBD_CDC_Init+0x1ec>)
 800a19c:	7819      	ldrb	r1, [r3, #0]
 800a19e:	2308      	movs	r3, #8
 800a1a0:	2203      	movs	r2, #3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f005 f976 	bl	800f494 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a1a8:	4b25      	ldr	r3, [pc, #148]	@ (800a240 <USBD_CDC_Init+0x1ec>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	f003 020f 	and.w	r2, r3, #15
 800a1b0:	6879      	ldr	r1, [r7, #4]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	440b      	add	r3, r1
 800a1bc:	3324      	adds	r3, #36	@ 0x24
 800a1be:	2201      	movs	r2, #1
 800a1c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	33b0      	adds	r3, #176	@ 0xb0
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	e018      	b.n	800a22e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	7c1b      	ldrb	r3, [r3, #16]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10a      	bne.n	800a21a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a204:	4b0d      	ldr	r3, [pc, #52]	@ (800a23c <USBD_CDC_Init+0x1e8>)
 800a206:	7819      	ldrb	r1, [r3, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a20e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f005 fab8 	bl	800f788 <USBD_LL_PrepareReceive>
 800a218:	e008      	b.n	800a22c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a21a:	4b08      	ldr	r3, [pc, #32]	@ (800a23c <USBD_CDC_Init+0x1e8>)
 800a21c:	7819      	ldrb	r1, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a224:	2340      	movs	r3, #64	@ 0x40
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f005 faae 	bl	800f788 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20000093 	.word	0x20000093
 800a23c:	20000094 	.word	0x20000094
 800a240:	20000095 	.word	0x20000095

0800a244 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a250:	4b3a      	ldr	r3, [pc, #232]	@ (800a33c <USBD_CDC_DeInit+0xf8>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	4619      	mov	r1, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f005 f95a 	bl	800f510 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a25c:	4b37      	ldr	r3, [pc, #220]	@ (800a33c <USBD_CDC_DeInit+0xf8>)
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	f003 020f 	and.w	r2, r3, #15
 800a264:	6879      	ldr	r1, [r7, #4]
 800a266:	4613      	mov	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4413      	add	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	440b      	add	r3, r1
 800a270:	3324      	adds	r3, #36	@ 0x24
 800a272:	2200      	movs	r2, #0
 800a274:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a276:	4b32      	ldr	r3, [pc, #200]	@ (800a340 <USBD_CDC_DeInit+0xfc>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	4619      	mov	r1, r3
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f005 f947 	bl	800f510 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a282:	4b2f      	ldr	r3, [pc, #188]	@ (800a340 <USBD_CDC_DeInit+0xfc>)
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	f003 020f 	and.w	r2, r3, #15
 800a28a:	6879      	ldr	r1, [r7, #4]
 800a28c:	4613      	mov	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	440b      	add	r3, r1
 800a296:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a29a:	2200      	movs	r2, #0
 800a29c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a29e:	4b29      	ldr	r3, [pc, #164]	@ (800a344 <USBD_CDC_DeInit+0x100>)
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f005 f933 	bl	800f510 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a2aa:	4b26      	ldr	r3, [pc, #152]	@ (800a344 <USBD_CDC_DeInit+0x100>)
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	f003 020f 	and.w	r2, r3, #15
 800a2b2:	6879      	ldr	r1, [r7, #4]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	440b      	add	r3, r1
 800a2be:	3324      	adds	r3, #36	@ 0x24
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a2c4:	4b1f      	ldr	r3, [pc, #124]	@ (800a344 <USBD_CDC_DeInit+0x100>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	f003 020f 	and.w	r2, r3, #15
 800a2cc:	6879      	ldr	r1, [r7, #4]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	440b      	add	r3, r1
 800a2d8:	3326      	adds	r3, #38	@ 0x26
 800a2da:	2200      	movs	r2, #0
 800a2dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	32b0      	adds	r2, #176	@ 0xb0
 800a2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01f      	beq.n	800a330 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	33b0      	adds	r3, #176	@ 0xb0
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	32b0      	adds	r2, #176	@ 0xb0
 800a30e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a312:	4618      	mov	r0, r3
 800a314:	f005 fae0 	bl	800f8d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	32b0      	adds	r2, #176	@ 0xb0
 800a322:	2100      	movs	r1, #0
 800a324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20000093 	.word	0x20000093
 800a340:	20000094 	.word	0x20000094
 800a344:	20000095 	.word	0x20000095

0800a348 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	32b0      	adds	r2, #176	@ 0xb0
 800a35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a360:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a362:	2300      	movs	r3, #0
 800a364:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a366:	2300      	movs	r3, #0
 800a368:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a374:	2303      	movs	r3, #3
 800a376:	e0bf      	b.n	800a4f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a380:	2b00      	cmp	r3, #0
 800a382:	d050      	beq.n	800a426 <USBD_CDC_Setup+0xde>
 800a384:	2b20      	cmp	r3, #32
 800a386:	f040 80af 	bne.w	800a4e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	88db      	ldrh	r3, [r3, #6]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d03a      	beq.n	800a408 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	b25b      	sxtb	r3, r3
 800a398:	2b00      	cmp	r3, #0
 800a39a:	da1b      	bge.n	800a3d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	33b0      	adds	r3, #176	@ 0xb0
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	4413      	add	r3, r2
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a3b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	88d2      	ldrh	r2, [r2, #6]
 800a3b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	88db      	ldrh	r3, [r3, #6]
 800a3be:	2b07      	cmp	r3, #7
 800a3c0:	bf28      	it	cs
 800a3c2:	2307      	movcs	r3, #7
 800a3c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	89fa      	ldrh	r2, [r7, #14]
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f001 fdbd 	bl	800bf4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a3d2:	e090      	b.n	800a4f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	785a      	ldrb	r2, [r3, #1]
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	88db      	ldrh	r3, [r3, #6]
 800a3e2:	2b3f      	cmp	r3, #63	@ 0x3f
 800a3e4:	d803      	bhi.n	800a3ee <USBD_CDC_Setup+0xa6>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	88db      	ldrh	r3, [r3, #6]
 800a3ea:	b2da      	uxtb	r2, r3
 800a3ec:	e000      	b.n	800a3f0 <USBD_CDC_Setup+0xa8>
 800a3ee:	2240      	movs	r2, #64	@ 0x40
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a3f6:	6939      	ldr	r1, [r7, #16]
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a3fe:	461a      	mov	r2, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f001 fdcf 	bl	800bfa4 <USBD_CtlPrepareRx>
      break;
 800a406:	e076      	b.n	800a4f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	33b0      	adds	r3, #176	@ 0xb0
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	7850      	ldrb	r0, [r2, #1]
 800a41e:	2200      	movs	r2, #0
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	4798      	blx	r3
      break;
 800a424:	e067      	b.n	800a4f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	785b      	ldrb	r3, [r3, #1]
 800a42a:	2b0b      	cmp	r3, #11
 800a42c:	d851      	bhi.n	800a4d2 <USBD_CDC_Setup+0x18a>
 800a42e:	a201      	add	r2, pc, #4	@ (adr r2, 800a434 <USBD_CDC_Setup+0xec>)
 800a430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a434:	0800a465 	.word	0x0800a465
 800a438:	0800a4e1 	.word	0x0800a4e1
 800a43c:	0800a4d3 	.word	0x0800a4d3
 800a440:	0800a4d3 	.word	0x0800a4d3
 800a444:	0800a4d3 	.word	0x0800a4d3
 800a448:	0800a4d3 	.word	0x0800a4d3
 800a44c:	0800a4d3 	.word	0x0800a4d3
 800a450:	0800a4d3 	.word	0x0800a4d3
 800a454:	0800a4d3 	.word	0x0800a4d3
 800a458:	0800a4d3 	.word	0x0800a4d3
 800a45c:	0800a48f 	.word	0x0800a48f
 800a460:	0800a4b9 	.word	0x0800a4b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b03      	cmp	r3, #3
 800a46e:	d107      	bne.n	800a480 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a470:	f107 030a 	add.w	r3, r7, #10
 800a474:	2202      	movs	r2, #2
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f001 fd67 	bl	800bf4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a47e:	e032      	b.n	800a4e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f001 fce5 	bl	800be52 <USBD_CtlError>
            ret = USBD_FAIL;
 800a488:	2303      	movs	r3, #3
 800a48a:	75fb      	strb	r3, [r7, #23]
          break;
 800a48c:	e02b      	b.n	800a4e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b03      	cmp	r3, #3
 800a498:	d107      	bne.n	800a4aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a49a:	f107 030d 	add.w	r3, r7, #13
 800a49e:	2201      	movs	r2, #1
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f001 fd52 	bl	800bf4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a4a8:	e01d      	b.n	800a4e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f001 fcd0 	bl	800be52 <USBD_CtlError>
            ret = USBD_FAIL;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	75fb      	strb	r3, [r7, #23]
          break;
 800a4b6:	e016      	b.n	800a4e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b03      	cmp	r3, #3
 800a4c2:	d00f      	beq.n	800a4e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a4c4:	6839      	ldr	r1, [r7, #0]
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f001 fcc3 	bl	800be52 <USBD_CtlError>
            ret = USBD_FAIL;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a4d0:	e008      	b.n	800a4e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f001 fcbc 	bl	800be52 <USBD_CtlError>
          ret = USBD_FAIL;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	75fb      	strb	r3, [r7, #23]
          break;
 800a4de:	e002      	b.n	800a4e6 <USBD_CDC_Setup+0x19e>
          break;
 800a4e0:	bf00      	nop
 800a4e2:	e008      	b.n	800a4f6 <USBD_CDC_Setup+0x1ae>
          break;
 800a4e4:	bf00      	nop
      }
      break;
 800a4e6:	e006      	b.n	800a4f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f001 fcb1 	bl	800be52 <USBD_CtlError>
      ret = USBD_FAIL;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a4f4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3718      	adds	r7, #24
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a512:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	32b0      	adds	r2, #176	@ 0xb0
 800a51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d101      	bne.n	800a52a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a526:	2303      	movs	r3, #3
 800a528:	e065      	b.n	800a5f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	32b0      	adds	r2, #176	@ 0xb0
 800a534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a538:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a53a:	78fb      	ldrb	r3, [r7, #3]
 800a53c:	f003 020f 	and.w	r2, r3, #15
 800a540:	6879      	ldr	r1, [r7, #4]
 800a542:	4613      	mov	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4413      	add	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	440b      	add	r3, r1
 800a54c:	3318      	adds	r3, #24
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d02f      	beq.n	800a5b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a554:	78fb      	ldrb	r3, [r7, #3]
 800a556:	f003 020f 	and.w	r2, r3, #15
 800a55a:	6879      	ldr	r1, [r7, #4]
 800a55c:	4613      	mov	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	440b      	add	r3, r1
 800a566:	3318      	adds	r3, #24
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	78fb      	ldrb	r3, [r7, #3]
 800a56c:	f003 010f 	and.w	r1, r3, #15
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	460b      	mov	r3, r1
 800a574:	00db      	lsls	r3, r3, #3
 800a576:	440b      	add	r3, r1
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4403      	add	r3, r0
 800a57c:	331c      	adds	r3, #28
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	fbb2 f1f3 	udiv	r1, r2, r3
 800a584:	fb01 f303 	mul.w	r3, r1, r3
 800a588:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d112      	bne.n	800a5b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a58e:	78fb      	ldrb	r3, [r7, #3]
 800a590:	f003 020f 	and.w	r2, r3, #15
 800a594:	6879      	ldr	r1, [r7, #4]
 800a596:	4613      	mov	r3, r2
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	4413      	add	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	440b      	add	r3, r1
 800a5a0:	3318      	adds	r3, #24
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a5a6:	78f9      	ldrb	r1, [r7, #3]
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f005 f8b3 	bl	800f718 <USBD_LL_Transmit>
 800a5b2:	e01f      	b.n	800a5f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	33b0      	adds	r3, #176	@ 0xb0
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	4413      	add	r3, r2
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d010      	beq.n	800a5f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	33b0      	adds	r3, #176	@ 0xb0
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4413      	add	r3, r2
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a5f0:	78fa      	ldrb	r2, [r7, #3]
 800a5f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b084      	sub	sp, #16
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	32b0      	adds	r2, #176	@ 0xb0
 800a614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a618:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	32b0      	adds	r2, #176	@ 0xb0
 800a624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d101      	bne.n	800a630 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a62c:	2303      	movs	r3, #3
 800a62e:	e01a      	b.n	800a666 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a630:	78fb      	ldrb	r3, [r7, #3]
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f005 f8df 	bl	800f7f8 <USBD_LL_GetRxDataSize>
 800a63a:	4602      	mov	r2, r0
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	33b0      	adds	r3, #176	@ 0xb0
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a660:	4611      	mov	r1, r2
 800a662:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	32b0      	adds	r2, #176	@ 0xb0
 800a680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a684:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e024      	b.n	800a6da <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	33b0      	adds	r3, #176	@ 0xb0
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	4413      	add	r3, r2
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d019      	beq.n	800a6d8 <USBD_CDC_EP0_RxReady+0x6a>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a6aa:	2bff      	cmp	r3, #255	@ 0xff
 800a6ac:	d014      	beq.n	800a6d8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	33b0      	adds	r3, #176	@ 0xb0
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a6c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a6ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	22ff      	movs	r2, #255	@ 0xff
 800a6d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
	...

0800a6e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a6ec:	2182      	movs	r1, #130	@ 0x82
 800a6ee:	4818      	ldr	r0, [pc, #96]	@ (800a750 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a6f0:	f000 fd4f 	bl	800b192 <USBD_GetEpDesc>
 800a6f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	4815      	ldr	r0, [pc, #84]	@ (800a750 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a6fa:	f000 fd4a 	bl	800b192 <USBD_GetEpDesc>
 800a6fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a700:	2181      	movs	r1, #129	@ 0x81
 800a702:	4813      	ldr	r0, [pc, #76]	@ (800a750 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a704:	f000 fd45 	bl	800b192 <USBD_GetEpDesc>
 800a708:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	2210      	movs	r2, #16
 800a714:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d006      	beq.n	800a72a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	2200      	movs	r2, #0
 800a720:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a724:	711a      	strb	r2, [r3, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d006      	beq.n	800a73e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a738:	711a      	strb	r2, [r3, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2243      	movs	r2, #67	@ 0x43
 800a742:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a744:	4b02      	ldr	r3, [pc, #8]	@ (800a750 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	20000050 	.word	0x20000050

0800a754 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a75c:	2182      	movs	r1, #130	@ 0x82
 800a75e:	4818      	ldr	r0, [pc, #96]	@ (800a7c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a760:	f000 fd17 	bl	800b192 <USBD_GetEpDesc>
 800a764:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a766:	2101      	movs	r1, #1
 800a768:	4815      	ldr	r0, [pc, #84]	@ (800a7c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a76a:	f000 fd12 	bl	800b192 <USBD_GetEpDesc>
 800a76e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a770:	2181      	movs	r1, #129	@ 0x81
 800a772:	4813      	ldr	r0, [pc, #76]	@ (800a7c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a774:	f000 fd0d 	bl	800b192 <USBD_GetEpDesc>
 800a778:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	2210      	movs	r2, #16
 800a784:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d006      	beq.n	800a79a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	2200      	movs	r2, #0
 800a790:	711a      	strb	r2, [r3, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f042 0202 	orr.w	r2, r2, #2
 800a798:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d006      	beq.n	800a7ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	711a      	strb	r2, [r3, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f042 0202 	orr.w	r2, r2, #2
 800a7ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2243      	movs	r2, #67	@ 0x43
 800a7b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a7b4:	4b02      	ldr	r3, [pc, #8]	@ (800a7c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	20000050 	.word	0x20000050

0800a7c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a7cc:	2182      	movs	r1, #130	@ 0x82
 800a7ce:	4818      	ldr	r0, [pc, #96]	@ (800a830 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7d0:	f000 fcdf 	bl	800b192 <USBD_GetEpDesc>
 800a7d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	4815      	ldr	r0, [pc, #84]	@ (800a830 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7da:	f000 fcda 	bl	800b192 <USBD_GetEpDesc>
 800a7de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a7e0:	2181      	movs	r1, #129	@ 0x81
 800a7e2:	4813      	ldr	r0, [pc, #76]	@ (800a830 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7e4:	f000 fcd5 	bl	800b192 <USBD_GetEpDesc>
 800a7e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	2210      	movs	r2, #16
 800a7f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d006      	beq.n	800a80a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a804:	711a      	strb	r2, [r3, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d006      	beq.n	800a81e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a818:	711a      	strb	r2, [r3, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2243      	movs	r2, #67	@ 0x43
 800a822:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a824:	4b02      	ldr	r3, [pc, #8]	@ (800a830 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a826:	4618      	mov	r0, r3
 800a828:	3718      	adds	r7, #24
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	20000050 	.word	0x20000050

0800a834 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	220a      	movs	r2, #10
 800a840:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a842:	4b03      	ldr	r3, [pc, #12]	@ (800a850 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a844:	4618      	mov	r0, r3
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	2000000c 	.word	0x2000000c

0800a854 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d101      	bne.n	800a868 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a864:	2303      	movs	r3, #3
 800a866:	e009      	b.n	800a87c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	33b0      	adds	r3, #176	@ 0xb0
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4413      	add	r3, r2
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a888:	b480      	push	{r7}
 800a88a:	b087      	sub	sp, #28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	32b0      	adds	r2, #176	@ 0xb0
 800a89e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	e008      	b.n	800a8c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	68ba      	ldr	r2, [r7, #8]
 800a8b2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	371c      	adds	r7, #28
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	32b0      	adds	r2, #176	@ 0xb0
 800a8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e004      	b.n	800a8fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
	...

0800a908 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	32b0      	adds	r2, #176	@ 0xb0
 800a91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a91e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a920:	2301      	movs	r3, #1
 800a922:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d101      	bne.n	800a92e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e025      	b.n	800a97a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a934:	2b00      	cmp	r3, #0
 800a936:	d11f      	bne.n	800a978 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a940:	4b10      	ldr	r3, [pc, #64]	@ (800a984 <USBD_CDC_TransmitPacket+0x7c>)
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	f003 020f 	and.w	r2, r3, #15
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	4613      	mov	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4403      	add	r3, r0
 800a95a:	3318      	adds	r3, #24
 800a95c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a95e:	4b09      	ldr	r3, [pc, #36]	@ (800a984 <USBD_CDC_TransmitPacket+0x7c>)
 800a960:	7819      	ldrb	r1, [r3, #0]
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f004 fed2 	bl	800f718 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	20000093 	.word	0x20000093

0800a988 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	32b0      	adds	r2, #176	@ 0xb0
 800a99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a99e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	32b0      	adds	r2, #176	@ 0xb0
 800a9aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e018      	b.n	800a9e8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	7c1b      	ldrb	r3, [r3, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10a      	bne.n	800a9d4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9be:	4b0c      	ldr	r3, [pc, #48]	@ (800a9f0 <USBD_CDC_ReceivePacket+0x68>)
 800a9c0:	7819      	ldrb	r1, [r3, #0]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a9c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f004 fedb 	bl	800f788 <USBD_LL_PrepareReceive>
 800a9d2:	e008      	b.n	800a9e6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9d4:	4b06      	ldr	r3, [pc, #24]	@ (800a9f0 <USBD_CDC_ReceivePacket+0x68>)
 800a9d6:	7819      	ldrb	r1, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a9de:	2340      	movs	r3, #64	@ 0x40
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f004 fed1 	bl	800f788 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	20000094 	.word	0x20000094

0800a9f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d101      	bne.n	800aa0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa08:	2303      	movs	r3, #3
 800aa0a:	e01f      	b.n	800aa4c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	79fa      	ldrb	r2, [r7, #7]
 800aa3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f004 fca9 	bl	800f398 <USBD_LL_Init>
 800aa46:	4603      	mov	r3, r0
 800aa48:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3718      	adds	r7, #24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e025      	b.n	800aab8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	683a      	ldr	r2, [r7, #0]
 800aa70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	32ae      	adds	r2, #174	@ 0xae
 800aa7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00f      	beq.n	800aaa8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	32ae      	adds	r2, #174	@ 0xae
 800aa92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa98:	f107 020e 	add.w	r2, r7, #14
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	4798      	blx	r3
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f004 fcb1 	bl	800f430 <USBD_LL_Start>
 800aace:	4603      	mov	r3, r0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aae0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d009      	beq.n	800ab1c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	78fa      	ldrb	r2, [r7, #3]
 800ab12:	4611      	mov	r1, r2
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	4798      	blx	r3
 800ab18:	4603      	mov	r3, r0
 800ab1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b084      	sub	sp, #16
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	460b      	mov	r3, r1
 800ab30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	78fa      	ldrb	r2, [r7, #3]
 800ab40:	4611      	mov	r1, r2
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	4798      	blx	r3
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b084      	sub	sp, #16
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f001 f936 	bl	800bdde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ab80:	461a      	mov	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ab8e:	f003 031f 	and.w	r3, r3, #31
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d01a      	beq.n	800abcc <USBD_LL_SetupStage+0x72>
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d822      	bhi.n	800abe0 <USBD_LL_SetupStage+0x86>
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d002      	beq.n	800aba4 <USBD_LL_SetupStage+0x4a>
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d00a      	beq.n	800abb8 <USBD_LL_SetupStage+0x5e>
 800aba2:	e01d      	b.n	800abe0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800abaa:	4619      	mov	r1, r3
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fb63 	bl	800b278 <USBD_StdDevReq>
 800abb2:	4603      	mov	r3, r0
 800abb4:	73fb      	strb	r3, [r7, #15]
      break;
 800abb6:	e020      	b.n	800abfa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fbcb 	bl	800b35c <USBD_StdItfReq>
 800abc6:	4603      	mov	r3, r0
 800abc8:	73fb      	strb	r3, [r7, #15]
      break;
 800abca:	e016      	b.n	800abfa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800abd2:	4619      	mov	r1, r3
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fc2d 	bl	800b434 <USBD_StdEPReq>
 800abda:	4603      	mov	r3, r0
 800abdc:	73fb      	strb	r3, [r7, #15]
      break;
 800abde:	e00c      	b.n	800abfa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800abe6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800abea:	b2db      	uxtb	r3, r3
 800abec:	4619      	mov	r1, r3
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f004 fcc4 	bl	800f57c <USBD_LL_StallEP>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73fb      	strb	r3, [r7, #15]
      break;
 800abf8:	bf00      	nop
  }

  return ret;
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	607a      	str	r2, [r7, #4]
 800ac10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ac16:	7afb      	ldrb	r3, [r7, #11]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d16e      	bne.n	800acfa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ac22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	f040 8098 	bne.w	800ad60 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	689a      	ldr	r2, [r3, #8]
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d913      	bls.n	800ac64 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	689a      	ldr	r2, [r3, #8]
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	1ad2      	subs	r2, r2, r3
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	68da      	ldr	r2, [r3, #12]
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	4293      	cmp	r3, r2
 800ac54:	bf28      	it	cs
 800ac56:	4613      	movcs	r3, r2
 800ac58:	461a      	mov	r2, r3
 800ac5a:	6879      	ldr	r1, [r7, #4]
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f001 f9be 	bl	800bfde <USBD_CtlContinueRx>
 800ac62:	e07d      	b.n	800ad60 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac6a:	f003 031f 	and.w	r3, r3, #31
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d014      	beq.n	800ac9c <USBD_LL_DataOutStage+0x98>
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d81d      	bhi.n	800acb2 <USBD_LL_DataOutStage+0xae>
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d002      	beq.n	800ac80 <USBD_LL_DataOutStage+0x7c>
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d003      	beq.n	800ac86 <USBD_LL_DataOutStage+0x82>
 800ac7e:	e018      	b.n	800acb2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ac80:	2300      	movs	r3, #0
 800ac82:	75bb      	strb	r3, [r7, #22]
            break;
 800ac84:	e018      	b.n	800acb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	4619      	mov	r1, r3
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 fa64 	bl	800b15e <USBD_CoreFindIF>
 800ac96:	4603      	mov	r3, r0
 800ac98:	75bb      	strb	r3, [r7, #22]
            break;
 800ac9a:	e00d      	b.n	800acb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	4619      	mov	r1, r3
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f000 fa66 	bl	800b178 <USBD_CoreFindEP>
 800acac:	4603      	mov	r3, r0
 800acae:	75bb      	strb	r3, [r7, #22]
            break;
 800acb0:	e002      	b.n	800acb8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800acb2:	2300      	movs	r3, #0
 800acb4:	75bb      	strb	r3, [r7, #22]
            break;
 800acb6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800acb8:	7dbb      	ldrb	r3, [r7, #22]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d119      	bne.n	800acf2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d113      	bne.n	800acf2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800acca:	7dba      	ldrb	r2, [r7, #22]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	32ae      	adds	r2, #174	@ 0xae
 800acd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00b      	beq.n	800acf2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800acda:	7dba      	ldrb	r2, [r7, #22]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ace2:	7dba      	ldrb	r2, [r7, #22]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	32ae      	adds	r2, #174	@ 0xae
 800ace8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f001 f984 	bl	800c000 <USBD_CtlSendStatus>
 800acf8:	e032      	b.n	800ad60 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800acfa:	7afb      	ldrb	r3, [r7, #11]
 800acfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	4619      	mov	r1, r3
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f000 fa37 	bl	800b178 <USBD_CoreFindEP>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad0e:	7dbb      	ldrb	r3, [r7, #22]
 800ad10:	2bff      	cmp	r3, #255	@ 0xff
 800ad12:	d025      	beq.n	800ad60 <USBD_LL_DataOutStage+0x15c>
 800ad14:	7dbb      	ldrb	r3, [r7, #22]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d122      	bne.n	800ad60 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d117      	bne.n	800ad56 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ad26:	7dba      	ldrb	r2, [r7, #22]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	32ae      	adds	r2, #174	@ 0xae
 800ad2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad30:	699b      	ldr	r3, [r3, #24]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00f      	beq.n	800ad56 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ad36:	7dba      	ldrb	r2, [r7, #22]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ad3e:	7dba      	ldrb	r2, [r7, #22]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	32ae      	adds	r2, #174	@ 0xae
 800ad44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	7afa      	ldrb	r2, [r7, #11]
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	4798      	blx	r3
 800ad52:	4603      	mov	r3, r0
 800ad54:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ad56:	7dfb      	ldrb	r3, [r7, #23]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ad5c:	7dfb      	ldrb	r3, [r7, #23]
 800ad5e:	e000      	b.n	800ad62 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b086      	sub	sp, #24
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	60f8      	str	r0, [r7, #12]
 800ad72:	460b      	mov	r3, r1
 800ad74:	607a      	str	r2, [r7, #4]
 800ad76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ad78:	7afb      	ldrb	r3, [r7, #11]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d16f      	bne.n	800ae5e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	3314      	adds	r3, #20
 800ad82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d15a      	bne.n	800ae44 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	689a      	ldr	r2, [r3, #8]
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d914      	bls.n	800adc4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	689a      	ldr	r2, [r3, #8]
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	1ad2      	subs	r2, r2, r3
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	461a      	mov	r2, r3
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f001 f8e6 	bl	800bf82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adb6:	2300      	movs	r3, #0
 800adb8:	2200      	movs	r2, #0
 800adba:	2100      	movs	r1, #0
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f004 fce3 	bl	800f788 <USBD_LL_PrepareReceive>
 800adc2:	e03f      	b.n	800ae44 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	68da      	ldr	r2, [r3, #12]
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d11c      	bne.n	800ae0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800add8:	429a      	cmp	r2, r3
 800adda:	d316      	bcc.n	800ae0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d20f      	bcs.n	800ae0a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800adea:	2200      	movs	r2, #0
 800adec:	2100      	movs	r1, #0
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f001 f8c7 	bl	800bf82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adfc:	2300      	movs	r3, #0
 800adfe:	2200      	movs	r2, #0
 800ae00:	2100      	movs	r1, #0
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f004 fcc0 	bl	800f788 <USBD_LL_PrepareReceive>
 800ae08:	e01c      	b.n	800ae44 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b03      	cmp	r3, #3
 800ae14:	d10f      	bne.n	800ae36 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d009      	beq.n	800ae36 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae36:	2180      	movs	r1, #128	@ 0x80
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f004 fb9f 	bl	800f57c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f001 f8f1 	bl	800c026 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d03a      	beq.n	800aec4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff fe42 	bl	800aad8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ae5c:	e032      	b.n	800aec4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ae5e:	7afb      	ldrb	r3, [r7, #11]
 800ae60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	4619      	mov	r1, r3
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 f985 	bl	800b178 <USBD_CoreFindEP>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae72:	7dfb      	ldrb	r3, [r7, #23]
 800ae74:	2bff      	cmp	r3, #255	@ 0xff
 800ae76:	d025      	beq.n	800aec4 <USBD_LL_DataInStage+0x15a>
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d122      	bne.n	800aec4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d11c      	bne.n	800aec4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ae8a:	7dfa      	ldrb	r2, [r7, #23]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	32ae      	adds	r2, #174	@ 0xae
 800ae90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d014      	beq.n	800aec4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ae9a:	7dfa      	ldrb	r2, [r7, #23]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aea2:	7dfa      	ldrb	r2, [r7, #23]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	32ae      	adds	r2, #174	@ 0xae
 800aea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	7afa      	ldrb	r2, [r7, #11]
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	4798      	blx	r3
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aeba:	7dbb      	ldrb	r3, [r7, #22]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aec0:	7dbb      	ldrb	r3, [r7, #22]
 800aec2:	e000      	b.n	800aec6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af06:	2b00      	cmp	r3, #0
 800af08:	d014      	beq.n	800af34 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00e      	beq.n	800af34 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	6852      	ldr	r2, [r2, #4]
 800af22:	b2d2      	uxtb	r2, r2
 800af24:	4611      	mov	r1, r2
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	4798      	blx	r3
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800af30:	2303      	movs	r3, #3
 800af32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af34:	2340      	movs	r3, #64	@ 0x40
 800af36:	2200      	movs	r2, #0
 800af38:	2100      	movs	r1, #0
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f004 faaa 	bl	800f494 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2240      	movs	r2, #64	@ 0x40
 800af4c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af50:	2340      	movs	r3, #64	@ 0x40
 800af52:	2200      	movs	r2, #0
 800af54:	2180      	movs	r1, #128	@ 0x80
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f004 fa9c 	bl	800f494 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2240      	movs	r2, #64	@ 0x40
 800af66:	621a      	str	r2, [r3, #32]

  return ret;
 800af68:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af72:	b480      	push	{r7}
 800af74:	b083      	sub	sp, #12
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	460b      	mov	r3, r1
 800af7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	78fa      	ldrb	r2, [r7, #3]
 800af82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af92:	b480      	push	{r7}
 800af94:	b083      	sub	sp, #12
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	2b04      	cmp	r3, #4
 800afa4:	d006      	beq.n	800afb4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afac:	b2da      	uxtb	r2, r3
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2204      	movs	r2, #4
 800afb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	370c      	adds	r7, #12
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr

0800afca <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800afca:	b480      	push	{r7}
 800afcc:	b083      	sub	sp, #12
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b04      	cmp	r3, #4
 800afdc:	d106      	bne.n	800afec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b082      	sub	sp, #8
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d110      	bne.n	800b030 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00b      	beq.n	800b030 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d005      	beq.n	800b030 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b02a:	69db      	ldr	r3, [r3, #28]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b082      	sub	sp, #8
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	460b      	mov	r3, r1
 800b044:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	32ae      	adds	r2, #174	@ 0xae
 800b050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d101      	bne.n	800b05c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b058:	2303      	movs	r3, #3
 800b05a:	e01c      	b.n	800b096 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b03      	cmp	r3, #3
 800b066:	d115      	bne.n	800b094 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	32ae      	adds	r2, #174	@ 0xae
 800b072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00b      	beq.n	800b094 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	32ae      	adds	r2, #174	@ 0xae
 800b086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08a:	6a1b      	ldr	r3, [r3, #32]
 800b08c:	78fa      	ldrb	r2, [r7, #3]
 800b08e:	4611      	mov	r1, r2
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3708      	adds	r7, #8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b082      	sub	sp, #8
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	32ae      	adds	r2, #174	@ 0xae
 800b0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d101      	bne.n	800b0c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	e01c      	b.n	800b0fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	2b03      	cmp	r3, #3
 800b0ca:	d115      	bne.n	800b0f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	32ae      	adds	r2, #174	@ 0xae
 800b0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00b      	beq.n	800b0f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	32ae      	adds	r2, #174	@ 0xae
 800b0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f0:	78fa      	ldrb	r2, [r7, #3]
 800b0f2:	4611      	mov	r1, r2
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b102:	b480      	push	{r7}
 800b104:	b083      	sub	sp, #12
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b120:	2300      	movs	r3, #0
 800b122:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00e      	beq.n	800b154 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	6852      	ldr	r2, [r2, #4]
 800b142:	b2d2      	uxtb	r2, r2
 800b144:	4611      	mov	r1, r2
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	4798      	blx	r3
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d001      	beq.n	800b154 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b150:	2303      	movs	r3, #3
 800b152:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b154:	7bfb      	ldrb	r3, [r7, #15]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b15e:	b480      	push	{r7}
 800b160:	b083      	sub	sp, #12
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	460b      	mov	r3, r1
 800b168:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b16a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b184:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b186:	4618      	mov	r0, r3
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b086      	sub	sp, #24
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	460b      	mov	r3, r1
 800b19c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	885b      	ldrh	r3, [r3, #2]
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	7812      	ldrb	r2, [r2, #0]
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d91f      	bls.n	800b1f8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b1be:	e013      	b.n	800b1e8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b1c0:	f107 030a 	add.w	r3, r7, #10
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	6978      	ldr	r0, [r7, #20]
 800b1c8:	f000 f81b 	bl	800b202 <USBD_GetNextDesc>
 800b1cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	785b      	ldrb	r3, [r3, #1]
 800b1d2:	2b05      	cmp	r3, #5
 800b1d4:	d108      	bne.n	800b1e8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	789b      	ldrb	r3, [r3, #2]
 800b1de:	78fa      	ldrb	r2, [r7, #3]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d008      	beq.n	800b1f6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	885b      	ldrh	r3, [r3, #2]
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	897b      	ldrh	r3, [r7, #10]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d8e5      	bhi.n	800b1c0 <USBD_GetEpDesc+0x2e>
 800b1f4:	e000      	b.n	800b1f8 <USBD_GetEpDesc+0x66>
          break;
 800b1f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b1f8:	693b      	ldr	r3, [r7, #16]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b202:	b480      	push	{r7}
 800b204:	b085      	sub	sp, #20
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	7812      	ldrb	r2, [r2, #0]
 800b218:	4413      	add	r3, r2
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	461a      	mov	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4413      	add	r3, r2
 800b22a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b22c:	68fb      	ldr	r3, [r7, #12]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3714      	adds	r7, #20
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b23a:	b480      	push	{r7}
 800b23c:	b087      	sub	sp, #28
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	3301      	adds	r3, #1
 800b250:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b258:	8a3b      	ldrh	r3, [r7, #16]
 800b25a:	021b      	lsls	r3, r3, #8
 800b25c:	b21a      	sxth	r2, r3
 800b25e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b262:	4313      	orrs	r3, r2
 800b264:	b21b      	sxth	r3, r3
 800b266:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b268:	89fb      	ldrh	r3, [r7, #14]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	371c      	adds	r7, #28
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
	...

0800b278 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b28e:	2b40      	cmp	r3, #64	@ 0x40
 800b290:	d005      	beq.n	800b29e <USBD_StdDevReq+0x26>
 800b292:	2b40      	cmp	r3, #64	@ 0x40
 800b294:	d857      	bhi.n	800b346 <USBD_StdDevReq+0xce>
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00f      	beq.n	800b2ba <USBD_StdDevReq+0x42>
 800b29a:	2b20      	cmp	r3, #32
 800b29c:	d153      	bne.n	800b346 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	32ae      	adds	r2, #174	@ 0xae
 800b2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	4798      	blx	r3
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b2b8:	e04a      	b.n	800b350 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	785b      	ldrb	r3, [r3, #1]
 800b2be:	2b09      	cmp	r3, #9
 800b2c0:	d83b      	bhi.n	800b33a <USBD_StdDevReq+0xc2>
 800b2c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c8 <USBD_StdDevReq+0x50>)
 800b2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c8:	0800b31d 	.word	0x0800b31d
 800b2cc:	0800b331 	.word	0x0800b331
 800b2d0:	0800b33b 	.word	0x0800b33b
 800b2d4:	0800b327 	.word	0x0800b327
 800b2d8:	0800b33b 	.word	0x0800b33b
 800b2dc:	0800b2fb 	.word	0x0800b2fb
 800b2e0:	0800b2f1 	.word	0x0800b2f1
 800b2e4:	0800b33b 	.word	0x0800b33b
 800b2e8:	0800b313 	.word	0x0800b313
 800b2ec:	0800b305 	.word	0x0800b305
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b2f0:	6839      	ldr	r1, [r7, #0]
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 fa3c 	bl	800b770 <USBD_GetDescriptor>
          break;
 800b2f8:	e024      	b.n	800b344 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fbcb 	bl	800ba98 <USBD_SetAddress>
          break;
 800b302:	e01f      	b.n	800b344 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fc0a 	bl	800bb20 <USBD_SetConfig>
 800b30c:	4603      	mov	r3, r0
 800b30e:	73fb      	strb	r3, [r7, #15]
          break;
 800b310:	e018      	b.n	800b344 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fcad 	bl	800bc74 <USBD_GetConfig>
          break;
 800b31a:	e013      	b.n	800b344 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fcde 	bl	800bce0 <USBD_GetStatus>
          break;
 800b324:	e00e      	b.n	800b344 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b326:	6839      	ldr	r1, [r7, #0]
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 fd0d 	bl	800bd48 <USBD_SetFeature>
          break;
 800b32e:	e009      	b.n	800b344 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b330:	6839      	ldr	r1, [r7, #0]
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fd31 	bl	800bd9a <USBD_ClrFeature>
          break;
 800b338:	e004      	b.n	800b344 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fd88 	bl	800be52 <USBD_CtlError>
          break;
 800b342:	bf00      	nop
      }
      break;
 800b344:	e004      	b.n	800b350 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fd82 	bl	800be52 <USBD_CtlError>
      break;
 800b34e:	bf00      	nop
  }

  return ret;
 800b350:	7bfb      	ldrb	r3, [r7, #15]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop

0800b35c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b372:	2b40      	cmp	r3, #64	@ 0x40
 800b374:	d005      	beq.n	800b382 <USBD_StdItfReq+0x26>
 800b376:	2b40      	cmp	r3, #64	@ 0x40
 800b378:	d852      	bhi.n	800b420 <USBD_StdItfReq+0xc4>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <USBD_StdItfReq+0x26>
 800b37e:	2b20      	cmp	r3, #32
 800b380:	d14e      	bne.n	800b420 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	3b01      	subs	r3, #1
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d840      	bhi.n	800b412 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	889b      	ldrh	r3, [r3, #4]
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b01      	cmp	r3, #1
 800b398:	d836      	bhi.n	800b408 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	889b      	ldrh	r3, [r3, #4]
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7ff fedb 	bl	800b15e <USBD_CoreFindIF>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3ac:	7bbb      	ldrb	r3, [r7, #14]
 800b3ae:	2bff      	cmp	r3, #255	@ 0xff
 800b3b0:	d01d      	beq.n	800b3ee <USBD_StdItfReq+0x92>
 800b3b2:	7bbb      	ldrb	r3, [r7, #14]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d11a      	bne.n	800b3ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b3b8:	7bba      	ldrb	r2, [r7, #14]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	32ae      	adds	r2, #174	@ 0xae
 800b3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00f      	beq.n	800b3e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b3c8:	7bba      	ldrb	r2, [r7, #14]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b3d0:	7bba      	ldrb	r2, [r7, #14]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	32ae      	adds	r2, #174	@ 0xae
 800b3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	6839      	ldr	r1, [r7, #0]
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	4798      	blx	r3
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b3e6:	e004      	b.n	800b3f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b3ec:	e001      	b.n	800b3f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	88db      	ldrh	r3, [r3, #6]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d110      	bne.n	800b41c <USBD_StdItfReq+0xc0>
 800b3fa:	7bfb      	ldrb	r3, [r7, #15]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d10d      	bne.n	800b41c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fdfd 	bl	800c000 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b406:	e009      	b.n	800b41c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b408:	6839      	ldr	r1, [r7, #0]
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 fd21 	bl	800be52 <USBD_CtlError>
          break;
 800b410:	e004      	b.n	800b41c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b412:	6839      	ldr	r1, [r7, #0]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 fd1c 	bl	800be52 <USBD_CtlError>
          break;
 800b41a:	e000      	b.n	800b41e <USBD_StdItfReq+0xc2>
          break;
 800b41c:	bf00      	nop
      }
      break;
 800b41e:	e004      	b.n	800b42a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fd15 	bl	800be52 <USBD_CtlError>
      break;
 800b428:	bf00      	nop
  }

  return ret;
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	889b      	ldrh	r3, [r3, #4]
 800b446:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b450:	2b40      	cmp	r3, #64	@ 0x40
 800b452:	d007      	beq.n	800b464 <USBD_StdEPReq+0x30>
 800b454:	2b40      	cmp	r3, #64	@ 0x40
 800b456:	f200 817f 	bhi.w	800b758 <USBD_StdEPReq+0x324>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d02a      	beq.n	800b4b4 <USBD_StdEPReq+0x80>
 800b45e:	2b20      	cmp	r3, #32
 800b460:	f040 817a 	bne.w	800b758 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b464:	7bbb      	ldrb	r3, [r7, #14]
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7ff fe85 	bl	800b178 <USBD_CoreFindEP>
 800b46e:	4603      	mov	r3, r0
 800b470:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b472:	7b7b      	ldrb	r3, [r7, #13]
 800b474:	2bff      	cmp	r3, #255	@ 0xff
 800b476:	f000 8174 	beq.w	800b762 <USBD_StdEPReq+0x32e>
 800b47a:	7b7b      	ldrb	r3, [r7, #13]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f040 8170 	bne.w	800b762 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b482:	7b7a      	ldrb	r2, [r7, #13]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b48a:	7b7a      	ldrb	r2, [r7, #13]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	32ae      	adds	r2, #174	@ 0xae
 800b490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	2b00      	cmp	r3, #0
 800b498:	f000 8163 	beq.w	800b762 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b49c:	7b7a      	ldrb	r2, [r7, #13]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	32ae      	adds	r2, #174	@ 0xae
 800b4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	4798      	blx	r3
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b4b2:	e156      	b.n	800b762 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	785b      	ldrb	r3, [r3, #1]
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d008      	beq.n	800b4ce <USBD_StdEPReq+0x9a>
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	f300 8145 	bgt.w	800b74c <USBD_StdEPReq+0x318>
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f000 809b 	beq.w	800b5fe <USBD_StdEPReq+0x1ca>
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d03c      	beq.n	800b546 <USBD_StdEPReq+0x112>
 800b4cc:	e13e      	b.n	800b74c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d002      	beq.n	800b4e0 <USBD_StdEPReq+0xac>
 800b4da:	2b03      	cmp	r3, #3
 800b4dc:	d016      	beq.n	800b50c <USBD_StdEPReq+0xd8>
 800b4de:	e02c      	b.n	800b53a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4e0:	7bbb      	ldrb	r3, [r7, #14]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00d      	beq.n	800b502 <USBD_StdEPReq+0xce>
 800b4e6:	7bbb      	ldrb	r3, [r7, #14]
 800b4e8:	2b80      	cmp	r3, #128	@ 0x80
 800b4ea:	d00a      	beq.n	800b502 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4ec:	7bbb      	ldrb	r3, [r7, #14]
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f004 f843 	bl	800f57c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4f6:	2180      	movs	r1, #128	@ 0x80
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f004 f83f 	bl	800f57c <USBD_LL_StallEP>
 800b4fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b500:	e020      	b.n	800b544 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b502:	6839      	ldr	r1, [r7, #0]
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fca4 	bl	800be52 <USBD_CtlError>
              break;
 800b50a:	e01b      	b.n	800b544 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	885b      	ldrh	r3, [r3, #2]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10e      	bne.n	800b532 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b514:	7bbb      	ldrb	r3, [r7, #14]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00b      	beq.n	800b532 <USBD_StdEPReq+0xfe>
 800b51a:	7bbb      	ldrb	r3, [r7, #14]
 800b51c:	2b80      	cmp	r3, #128	@ 0x80
 800b51e:	d008      	beq.n	800b532 <USBD_StdEPReq+0xfe>
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	88db      	ldrh	r3, [r3, #6]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d104      	bne.n	800b532 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b528:	7bbb      	ldrb	r3, [r7, #14]
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f004 f825 	bl	800f57c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fd64 	bl	800c000 <USBD_CtlSendStatus>

              break;
 800b538:	e004      	b.n	800b544 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b53a:	6839      	ldr	r1, [r7, #0]
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 fc88 	bl	800be52 <USBD_CtlError>
              break;
 800b542:	bf00      	nop
          }
          break;
 800b544:	e107      	b.n	800b756 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d002      	beq.n	800b558 <USBD_StdEPReq+0x124>
 800b552:	2b03      	cmp	r3, #3
 800b554:	d016      	beq.n	800b584 <USBD_StdEPReq+0x150>
 800b556:	e04b      	b.n	800b5f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b558:	7bbb      	ldrb	r3, [r7, #14]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00d      	beq.n	800b57a <USBD_StdEPReq+0x146>
 800b55e:	7bbb      	ldrb	r3, [r7, #14]
 800b560:	2b80      	cmp	r3, #128	@ 0x80
 800b562:	d00a      	beq.n	800b57a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b564:	7bbb      	ldrb	r3, [r7, #14]
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f004 f807 	bl	800f57c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b56e:	2180      	movs	r1, #128	@ 0x80
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f004 f803 	bl	800f57c <USBD_LL_StallEP>
 800b576:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b578:	e040      	b.n	800b5fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 fc68 	bl	800be52 <USBD_CtlError>
              break;
 800b582:	e03b      	b.n	800b5fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	885b      	ldrh	r3, [r3, #2]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d136      	bne.n	800b5fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b58c:	7bbb      	ldrb	r3, [r7, #14]
 800b58e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b592:	2b00      	cmp	r3, #0
 800b594:	d004      	beq.n	800b5a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	4619      	mov	r1, r3
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f004 f824 	bl	800f5e8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 fd2d 	bl	800c000 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b5a6:	7bbb      	ldrb	r3, [r7, #14]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff fde4 	bl	800b178 <USBD_CoreFindEP>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5b4:	7b7b      	ldrb	r3, [r7, #13]
 800b5b6:	2bff      	cmp	r3, #255	@ 0xff
 800b5b8:	d01f      	beq.n	800b5fa <USBD_StdEPReq+0x1c6>
 800b5ba:	7b7b      	ldrb	r3, [r7, #13]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d11c      	bne.n	800b5fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b5c0:	7b7a      	ldrb	r2, [r7, #13]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b5c8:	7b7a      	ldrb	r2, [r7, #13]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	32ae      	adds	r2, #174	@ 0xae
 800b5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d010      	beq.n	800b5fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b5d8:	7b7a      	ldrb	r2, [r7, #13]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	32ae      	adds	r2, #174	@ 0xae
 800b5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	6839      	ldr	r1, [r7, #0]
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	4798      	blx	r3
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b5ee:	e004      	b.n	800b5fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b5f0:	6839      	ldr	r1, [r7, #0]
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fc2d 	bl	800be52 <USBD_CtlError>
              break;
 800b5f8:	e000      	b.n	800b5fc <USBD_StdEPReq+0x1c8>
              break;
 800b5fa:	bf00      	nop
          }
          break;
 800b5fc:	e0ab      	b.n	800b756 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b604:	b2db      	uxtb	r3, r3
 800b606:	2b02      	cmp	r3, #2
 800b608:	d002      	beq.n	800b610 <USBD_StdEPReq+0x1dc>
 800b60a:	2b03      	cmp	r3, #3
 800b60c:	d032      	beq.n	800b674 <USBD_StdEPReq+0x240>
 800b60e:	e097      	b.n	800b740 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b610:	7bbb      	ldrb	r3, [r7, #14]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d007      	beq.n	800b626 <USBD_StdEPReq+0x1f2>
 800b616:	7bbb      	ldrb	r3, [r7, #14]
 800b618:	2b80      	cmp	r3, #128	@ 0x80
 800b61a:	d004      	beq.n	800b626 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 fc17 	bl	800be52 <USBD_CtlError>
                break;
 800b624:	e091      	b.n	800b74a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	da0b      	bge.n	800b646 <USBD_StdEPReq+0x212>
 800b62e:	7bbb      	ldrb	r3, [r7, #14]
 800b630:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b634:	4613      	mov	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	3310      	adds	r3, #16
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	4413      	add	r3, r2
 800b642:	3304      	adds	r3, #4
 800b644:	e00b      	b.n	800b65e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b646:	7bbb      	ldrb	r3, [r7, #14]
 800b648:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b64c:	4613      	mov	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	4413      	add	r3, r2
 800b65c:	3304      	adds	r3, #4
 800b65e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	2202      	movs	r2, #2
 800b66a:	4619      	mov	r1, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fc6d 	bl	800bf4c <USBD_CtlSendData>
              break;
 800b672:	e06a      	b.n	800b74a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	da11      	bge.n	800b6a0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b67c:	7bbb      	ldrb	r3, [r7, #14]
 800b67e:	f003 020f 	and.w	r2, r3, #15
 800b682:	6879      	ldr	r1, [r7, #4]
 800b684:	4613      	mov	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	4413      	add	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	440b      	add	r3, r1
 800b68e:	3324      	adds	r3, #36	@ 0x24
 800b690:	881b      	ldrh	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d117      	bne.n	800b6c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fbda 	bl	800be52 <USBD_CtlError>
                  break;
 800b69e:	e054      	b.n	800b74a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6a0:	7bbb      	ldrb	r3, [r7, #14]
 800b6a2:	f003 020f 	and.w	r2, r3, #15
 800b6a6:	6879      	ldr	r1, [r7, #4]
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4413      	add	r3, r2
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	440b      	add	r3, r1
 800b6b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b6b6:	881b      	ldrh	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d104      	bne.n	800b6c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fbc7 	bl	800be52 <USBD_CtlError>
                  break;
 800b6c4:	e041      	b.n	800b74a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	da0b      	bge.n	800b6e6 <USBD_StdEPReq+0x2b2>
 800b6ce:	7bbb      	ldrb	r3, [r7, #14]
 800b6d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	4413      	add	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	3310      	adds	r3, #16
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	3304      	adds	r3, #4
 800b6e4:	e00b      	b.n	800b6fe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6e6:	7bbb      	ldrb	r3, [r7, #14]
 800b6e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	4413      	add	r3, r2
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b700:	7bbb      	ldrb	r3, [r7, #14]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d002      	beq.n	800b70c <USBD_StdEPReq+0x2d8>
 800b706:	7bbb      	ldrb	r3, [r7, #14]
 800b708:	2b80      	cmp	r3, #128	@ 0x80
 800b70a:	d103      	bne.n	800b714 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2200      	movs	r2, #0
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	e00e      	b.n	800b732 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b714:	7bbb      	ldrb	r3, [r7, #14]
 800b716:	4619      	mov	r1, r3
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f003 ff9b 	bl	800f654 <USBD_LL_IsStallEP>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d003      	beq.n	800b72c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2201      	movs	r2, #1
 800b728:	601a      	str	r2, [r3, #0]
 800b72a:	e002      	b.n	800b732 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	2200      	movs	r2, #0
 800b730:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2202      	movs	r2, #2
 800b736:	4619      	mov	r1, r3
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fc07 	bl	800bf4c <USBD_CtlSendData>
              break;
 800b73e:	e004      	b.n	800b74a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 fb85 	bl	800be52 <USBD_CtlError>
              break;
 800b748:	bf00      	nop
          }
          break;
 800b74a:	e004      	b.n	800b756 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fb7f 	bl	800be52 <USBD_CtlError>
          break;
 800b754:	bf00      	nop
      }
      break;
 800b756:	e005      	b.n	800b764 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fb79 	bl	800be52 <USBD_CtlError>
      break;
 800b760:	e000      	b.n	800b764 <USBD_StdEPReq+0x330>
      break;
 800b762:	bf00      	nop
  }

  return ret;
 800b764:	7bfb      	ldrb	r3, [r7, #15]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
	...

0800b770 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b77a:	2300      	movs	r3, #0
 800b77c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b77e:	2300      	movs	r3, #0
 800b780:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b782:	2300      	movs	r3, #0
 800b784:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	885b      	ldrh	r3, [r3, #2]
 800b78a:	0a1b      	lsrs	r3, r3, #8
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	3b01      	subs	r3, #1
 800b790:	2b0e      	cmp	r3, #14
 800b792:	f200 8152 	bhi.w	800ba3a <USBD_GetDescriptor+0x2ca>
 800b796:	a201      	add	r2, pc, #4	@ (adr r2, 800b79c <USBD_GetDescriptor+0x2c>)
 800b798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79c:	0800b80d 	.word	0x0800b80d
 800b7a0:	0800b825 	.word	0x0800b825
 800b7a4:	0800b865 	.word	0x0800b865
 800b7a8:	0800ba3b 	.word	0x0800ba3b
 800b7ac:	0800ba3b 	.word	0x0800ba3b
 800b7b0:	0800b9db 	.word	0x0800b9db
 800b7b4:	0800ba07 	.word	0x0800ba07
 800b7b8:	0800ba3b 	.word	0x0800ba3b
 800b7bc:	0800ba3b 	.word	0x0800ba3b
 800b7c0:	0800ba3b 	.word	0x0800ba3b
 800b7c4:	0800ba3b 	.word	0x0800ba3b
 800b7c8:	0800ba3b 	.word	0x0800ba3b
 800b7cc:	0800ba3b 	.word	0x0800ba3b
 800b7d0:	0800ba3b 	.word	0x0800ba3b
 800b7d4:	0800b7d9 	.word	0x0800b7d9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7de:	69db      	ldr	r3, [r3, #28]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00b      	beq.n	800b7fc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7ea:	69db      	ldr	r3, [r3, #28]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	7c12      	ldrb	r2, [r2, #16]
 800b7f0:	f107 0108 	add.w	r1, r7, #8
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	4798      	blx	r3
 800b7f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7fa:	e126      	b.n	800ba4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fb27 	bl	800be52 <USBD_CtlError>
        err++;
 800b804:	7afb      	ldrb	r3, [r7, #11]
 800b806:	3301      	adds	r3, #1
 800b808:	72fb      	strb	r3, [r7, #11]
      break;
 800b80a:	e11e      	b.n	800ba4a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	7c12      	ldrb	r2, [r2, #16]
 800b818:	f107 0108 	add.w	r1, r7, #8
 800b81c:	4610      	mov	r0, r2
 800b81e:	4798      	blx	r3
 800b820:	60f8      	str	r0, [r7, #12]
      break;
 800b822:	e112      	b.n	800ba4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	7c1b      	ldrb	r3, [r3, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10d      	bne.n	800b848 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b834:	f107 0208 	add.w	r2, r7, #8
 800b838:	4610      	mov	r0, r2
 800b83a:	4798      	blx	r3
 800b83c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	3301      	adds	r3, #1
 800b842:	2202      	movs	r2, #2
 800b844:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b846:	e100      	b.n	800ba4a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b84e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b850:	f107 0208 	add.w	r2, r7, #8
 800b854:	4610      	mov	r0, r2
 800b856:	4798      	blx	r3
 800b858:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	2202      	movs	r2, #2
 800b860:	701a      	strb	r2, [r3, #0]
      break;
 800b862:	e0f2      	b.n	800ba4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	885b      	ldrh	r3, [r3, #2]
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	2b05      	cmp	r3, #5
 800b86c:	f200 80ac 	bhi.w	800b9c8 <USBD_GetDescriptor+0x258>
 800b870:	a201      	add	r2, pc, #4	@ (adr r2, 800b878 <USBD_GetDescriptor+0x108>)
 800b872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b876:	bf00      	nop
 800b878:	0800b891 	.word	0x0800b891
 800b87c:	0800b8c5 	.word	0x0800b8c5
 800b880:	0800b8f9 	.word	0x0800b8f9
 800b884:	0800b92d 	.word	0x0800b92d
 800b888:	0800b961 	.word	0x0800b961
 800b88c:	0800b995 	.word	0x0800b995
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00b      	beq.n	800b8b4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	7c12      	ldrb	r2, [r2, #16]
 800b8a8:	f107 0108 	add.w	r1, r7, #8
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	4798      	blx	r3
 800b8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8b2:	e091      	b.n	800b9d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 facb 	bl	800be52 <USBD_CtlError>
            err++;
 800b8bc:	7afb      	ldrb	r3, [r7, #11]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8c2:	e089      	b.n	800b9d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00b      	beq.n	800b8e8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	7c12      	ldrb	r2, [r2, #16]
 800b8dc:	f107 0108 	add.w	r1, r7, #8
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	4798      	blx	r3
 800b8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8e6:	e077      	b.n	800b9d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 fab1 	bl	800be52 <USBD_CtlError>
            err++;
 800b8f0:	7afb      	ldrb	r3, [r7, #11]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8f6:	e06f      	b.n	800b9d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00b      	beq.n	800b91c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	7c12      	ldrb	r2, [r2, #16]
 800b910:	f107 0108 	add.w	r1, r7, #8
 800b914:	4610      	mov	r0, r2
 800b916:	4798      	blx	r3
 800b918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b91a:	e05d      	b.n	800b9d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fa97 	bl	800be52 <USBD_CtlError>
            err++;
 800b924:	7afb      	ldrb	r3, [r7, #11]
 800b926:	3301      	adds	r3, #1
 800b928:	72fb      	strb	r3, [r7, #11]
          break;
 800b92a:	e055      	b.n	800b9d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00b      	beq.n	800b950 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	7c12      	ldrb	r2, [r2, #16]
 800b944:	f107 0108 	add.w	r1, r7, #8
 800b948:	4610      	mov	r0, r2
 800b94a:	4798      	blx	r3
 800b94c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b94e:	e043      	b.n	800b9d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fa7d 	bl	800be52 <USBD_CtlError>
            err++;
 800b958:	7afb      	ldrb	r3, [r7, #11]
 800b95a:	3301      	adds	r3, #1
 800b95c:	72fb      	strb	r3, [r7, #11]
          break;
 800b95e:	e03b      	b.n	800b9d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b966:	695b      	ldr	r3, [r3, #20]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00b      	beq.n	800b984 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	7c12      	ldrb	r2, [r2, #16]
 800b978:	f107 0108 	add.w	r1, r7, #8
 800b97c:	4610      	mov	r0, r2
 800b97e:	4798      	blx	r3
 800b980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b982:	e029      	b.n	800b9d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fa63 	bl	800be52 <USBD_CtlError>
            err++;
 800b98c:	7afb      	ldrb	r3, [r7, #11]
 800b98e:	3301      	adds	r3, #1
 800b990:	72fb      	strb	r3, [r7, #11]
          break;
 800b992:	e021      	b.n	800b9d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b99a:	699b      	ldr	r3, [r3, #24]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00b      	beq.n	800b9b8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	7c12      	ldrb	r2, [r2, #16]
 800b9ac:	f107 0108 	add.w	r1, r7, #8
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	4798      	blx	r3
 800b9b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9b6:	e00f      	b.n	800b9d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fa49 	bl	800be52 <USBD_CtlError>
            err++;
 800b9c0:	7afb      	ldrb	r3, [r7, #11]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9c6:	e007      	b.n	800b9d8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fa41 	bl	800be52 <USBD_CtlError>
          err++;
 800b9d0:	7afb      	ldrb	r3, [r7, #11]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b9d6:	bf00      	nop
      }
      break;
 800b9d8:	e037      	b.n	800ba4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	7c1b      	ldrb	r3, [r3, #16]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d109      	bne.n	800b9f6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9ea:	f107 0208 	add.w	r2, r7, #8
 800b9ee:	4610      	mov	r0, r2
 800b9f0:	4798      	blx	r3
 800b9f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9f4:	e029      	b.n	800ba4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fa2a 	bl	800be52 <USBD_CtlError>
        err++;
 800b9fe:	7afb      	ldrb	r3, [r7, #11]
 800ba00:	3301      	adds	r3, #1
 800ba02:	72fb      	strb	r3, [r7, #11]
      break;
 800ba04:	e021      	b.n	800ba4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	7c1b      	ldrb	r3, [r3, #16]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d10d      	bne.n	800ba2a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba16:	f107 0208 	add.w	r2, r7, #8
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	4798      	blx	r3
 800ba1e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	3301      	adds	r3, #1
 800ba24:	2207      	movs	r2, #7
 800ba26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba28:	e00f      	b.n	800ba4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ba2a:	6839      	ldr	r1, [r7, #0]
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fa10 	bl	800be52 <USBD_CtlError>
        err++;
 800ba32:	7afb      	ldrb	r3, [r7, #11]
 800ba34:	3301      	adds	r3, #1
 800ba36:	72fb      	strb	r3, [r7, #11]
      break;
 800ba38:	e007      	b.n	800ba4a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 fa08 	bl	800be52 <USBD_CtlError>
      err++;
 800ba42:	7afb      	ldrb	r3, [r7, #11]
 800ba44:	3301      	adds	r3, #1
 800ba46:	72fb      	strb	r3, [r7, #11]
      break;
 800ba48:	bf00      	nop
  }

  if (err != 0U)
 800ba4a:	7afb      	ldrb	r3, [r7, #11]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d11e      	bne.n	800ba8e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	88db      	ldrh	r3, [r3, #6]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d016      	beq.n	800ba86 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ba58:	893b      	ldrh	r3, [r7, #8]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00e      	beq.n	800ba7c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	88da      	ldrh	r2, [r3, #6]
 800ba62:	893b      	ldrh	r3, [r7, #8]
 800ba64:	4293      	cmp	r3, r2
 800ba66:	bf28      	it	cs
 800ba68:	4613      	movcs	r3, r2
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba6e:	893b      	ldrh	r3, [r7, #8]
 800ba70:	461a      	mov	r2, r3
 800ba72:	68f9      	ldr	r1, [r7, #12]
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 fa69 	bl	800bf4c <USBD_CtlSendData>
 800ba7a:	e009      	b.n	800ba90 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ba7c:	6839      	ldr	r1, [r7, #0]
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f9e7 	bl	800be52 <USBD_CtlError>
 800ba84:	e004      	b.n	800ba90 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 faba 	bl	800c000 <USBD_CtlSendStatus>
 800ba8c:	e000      	b.n	800ba90 <USBD_GetDescriptor+0x320>
    return;
 800ba8e:	bf00      	nop
  }
}
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop

0800ba98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	889b      	ldrh	r3, [r3, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d131      	bne.n	800bb0e <USBD_SetAddress+0x76>
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	88db      	ldrh	r3, [r3, #6]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d12d      	bne.n	800bb0e <USBD_SetAddress+0x76>
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	885b      	ldrh	r3, [r3, #2]
 800bab6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bab8:	d829      	bhi.n	800bb0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	885b      	ldrh	r3, [r3, #2]
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bac4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d104      	bne.n	800badc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f9bc 	bl	800be52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bada:	e01d      	b.n	800bb18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	7bfa      	ldrb	r2, [r7, #15]
 800bae0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
 800bae6:	4619      	mov	r1, r3
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f003 fddf 	bl	800f6ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 fa86 	bl	800c000 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d004      	beq.n	800bb04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2202      	movs	r2, #2
 800bafe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb02:	e009      	b.n	800bb18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb0c:	e004      	b.n	800bb18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb0e:	6839      	ldr	r1, [r7, #0]
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 f99e 	bl	800be52 <USBD_CtlError>
  }
}
 800bb16:	bf00      	nop
 800bb18:	bf00      	nop
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	885b      	ldrh	r3, [r3, #2]
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	4b4e      	ldr	r3, [pc, #312]	@ (800bc70 <USBD_SetConfig+0x150>)
 800bb36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb38:	4b4d      	ldr	r3, [pc, #308]	@ (800bc70 <USBD_SetConfig+0x150>)
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d905      	bls.n	800bb4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f985 	bl	800be52 <USBD_CtlError>
    return USBD_FAIL;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e08c      	b.n	800bc66 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	d002      	beq.n	800bb5e <USBD_SetConfig+0x3e>
 800bb58:	2b03      	cmp	r3, #3
 800bb5a:	d029      	beq.n	800bbb0 <USBD_SetConfig+0x90>
 800bb5c:	e075      	b.n	800bc4a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bb5e:	4b44      	ldr	r3, [pc, #272]	@ (800bc70 <USBD_SetConfig+0x150>)
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d020      	beq.n	800bba8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bb66:	4b42      	ldr	r3, [pc, #264]	@ (800bc70 <USBD_SetConfig+0x150>)
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb70:	4b3f      	ldr	r3, [pc, #252]	@ (800bc70 <USBD_SetConfig+0x150>)
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	4619      	mov	r1, r3
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7fe ffb9 	bl	800aaee <USBD_SetClassConfig>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d008      	beq.n	800bb98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bb86:	6839      	ldr	r1, [r7, #0]
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 f962 	bl	800be52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2202      	movs	r2, #2
 800bb92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb96:	e065      	b.n	800bc64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 fa31 	bl	800c000 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2203      	movs	r2, #3
 800bba2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bba6:	e05d      	b.n	800bc64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fa29 	bl	800c000 <USBD_CtlSendStatus>
      break;
 800bbae:	e059      	b.n	800bc64 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bbb0:	4b2f      	ldr	r3, [pc, #188]	@ (800bc70 <USBD_SetConfig+0x150>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d112      	bne.n	800bbde <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2202      	movs	r2, #2
 800bbbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bbc0:	4b2b      	ldr	r3, [pc, #172]	@ (800bc70 <USBD_SetConfig+0x150>)
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bbca:	4b29      	ldr	r3, [pc, #164]	@ (800bc70 <USBD_SetConfig+0x150>)
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7fe ffa8 	bl	800ab26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 fa12 	bl	800c000 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bbdc:	e042      	b.n	800bc64 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bbde:	4b24      	ldr	r3, [pc, #144]	@ (800bc70 <USBD_SetConfig+0x150>)
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d02a      	beq.n	800bc42 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f7fe ff96 	bl	800ab26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bbfa:	4b1d      	ldr	r3, [pc, #116]	@ (800bc70 <USBD_SetConfig+0x150>)
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc04:	4b1a      	ldr	r3, [pc, #104]	@ (800bc70 <USBD_SetConfig+0x150>)
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7fe ff6f 	bl	800aaee <USBD_SetClassConfig>
 800bc10:	4603      	mov	r3, r0
 800bc12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bc14:	7bfb      	ldrb	r3, [r7, #15]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d00f      	beq.n	800bc3a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bc1a:	6839      	ldr	r1, [r7, #0]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 f918 	bl	800be52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	4619      	mov	r1, r3
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f7fe ff7b 	bl	800ab26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2202      	movs	r2, #2
 800bc34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bc38:	e014      	b.n	800bc64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 f9e0 	bl	800c000 <USBD_CtlSendStatus>
      break;
 800bc40:	e010      	b.n	800bc64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f9dc 	bl	800c000 <USBD_CtlSendStatus>
      break;
 800bc48:	e00c      	b.n	800bc64 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 f900 	bl	800be52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc52:	4b07      	ldr	r3, [pc, #28]	@ (800bc70 <USBD_SetConfig+0x150>)
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	4619      	mov	r1, r3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7fe ff64 	bl	800ab26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	73fb      	strb	r3, [r7, #15]
      break;
 800bc62:	bf00      	nop
  }

  return ret;
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	2000092c 	.word	0x2000092c

0800bc74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	88db      	ldrh	r3, [r3, #6]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d004      	beq.n	800bc90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 f8e2 	bl	800be52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc8e:	e023      	b.n	800bcd8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	dc02      	bgt.n	800bca2 <USBD_GetConfig+0x2e>
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	dc03      	bgt.n	800bca8 <USBD_GetConfig+0x34>
 800bca0:	e015      	b.n	800bcce <USBD_GetConfig+0x5a>
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	d00b      	beq.n	800bcbe <USBD_GetConfig+0x4a>
 800bca6:	e012      	b.n	800bcce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	3308      	adds	r3, #8
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 f948 	bl	800bf4c <USBD_CtlSendData>
        break;
 800bcbc:	e00c      	b.n	800bcd8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 f940 	bl	800bf4c <USBD_CtlSendData>
        break;
 800bccc:	e004      	b.n	800bcd8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bcce:	6839      	ldr	r1, [r7, #0]
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 f8be 	bl	800be52 <USBD_CtlError>
        break;
 800bcd6:	bf00      	nop
}
 800bcd8:	bf00      	nop
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	3b01      	subs	r3, #1
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d81e      	bhi.n	800bd36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	88db      	ldrh	r3, [r3, #6]
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d004      	beq.n	800bd0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 f8a5 	bl	800be52 <USBD_CtlError>
        break;
 800bd08:	e01a      	b.n	800bd40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d005      	beq.n	800bd26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	f043 0202 	orr.w	r2, r3, #2
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	330c      	adds	r3, #12
 800bd2a:	2202      	movs	r2, #2
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 f90c 	bl	800bf4c <USBD_CtlSendData>
      break;
 800bd34:	e004      	b.n	800bd40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 f88a 	bl	800be52 <USBD_CtlError>
      break;
 800bd3e:	bf00      	nop
  }
}
 800bd40:	bf00      	nop
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	885b      	ldrh	r3, [r3, #2]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d107      	bne.n	800bd6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 f94c 	bl	800c000 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bd68:	e013      	b.n	800bd92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	885b      	ldrh	r3, [r3, #2]
 800bd6e:	2b02      	cmp	r3, #2
 800bd70:	d10b      	bne.n	800bd8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	889b      	ldrh	r3, [r3, #4]
 800bd76:	0a1b      	lsrs	r3, r3, #8
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 f93c 	bl	800c000 <USBD_CtlSendStatus>
}
 800bd88:	e003      	b.n	800bd92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bd8a:	6839      	ldr	r1, [r7, #0]
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 f860 	bl	800be52 <USBD_CtlError>
}
 800bd92:	bf00      	nop
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b082      	sub	sp, #8
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	3b01      	subs	r3, #1
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d80b      	bhi.n	800bdca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	885b      	ldrh	r3, [r3, #2]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d10c      	bne.n	800bdd4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f91c 	bl	800c000 <USBD_CtlSendStatus>
      }
      break;
 800bdc8:	e004      	b.n	800bdd4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 f840 	bl	800be52 <USBD_CtlError>
      break;
 800bdd2:	e000      	b.n	800bdd6 <USBD_ClrFeature+0x3c>
      break;
 800bdd4:	bf00      	nop
  }
}
 800bdd6:	bf00      	nop
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b084      	sub	sp, #16
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	781a      	ldrb	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	781a      	ldrb	r2, [r3, #0]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3301      	adds	r3, #1
 800be06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f7ff fa16 	bl	800b23a <SWAPBYTE>
 800be0e:	4603      	mov	r3, r0
 800be10:	461a      	mov	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	3301      	adds	r3, #1
 800be1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	3301      	adds	r3, #1
 800be20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	f7ff fa09 	bl	800b23a <SWAPBYTE>
 800be28:	4603      	mov	r3, r0
 800be2a:	461a      	mov	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	3301      	adds	r3, #1
 800be34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	3301      	adds	r3, #1
 800be3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f7ff f9fc 	bl	800b23a <SWAPBYTE>
 800be42:	4603      	mov	r3, r0
 800be44:	461a      	mov	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	80da      	strh	r2, [r3, #6]
}
 800be4a:	bf00      	nop
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b082      	sub	sp, #8
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
 800be5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800be5c:	2180      	movs	r1, #128	@ 0x80
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f003 fb8c 	bl	800f57c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800be64:	2100      	movs	r1, #0
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f003 fb88 	bl	800f57c <USBD_LL_StallEP>
}
 800be6c:	bf00      	nop
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be80:	2300      	movs	r3, #0
 800be82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d042      	beq.n	800bf10 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800be8e:	6938      	ldr	r0, [r7, #16]
 800be90:	f000 f842 	bl	800bf18 <USBD_GetLen>
 800be94:	4603      	mov	r3, r0
 800be96:	3301      	adds	r3, #1
 800be98:	005b      	lsls	r3, r3, #1
 800be9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be9e:	d808      	bhi.n	800beb2 <USBD_GetString+0x3e>
 800bea0:	6938      	ldr	r0, [r7, #16]
 800bea2:	f000 f839 	bl	800bf18 <USBD_GetLen>
 800bea6:	4603      	mov	r3, r0
 800bea8:	3301      	adds	r3, #1
 800beaa:	b29b      	uxth	r3, r3
 800beac:	005b      	lsls	r3, r3, #1
 800beae:	b29a      	uxth	r2, r3
 800beb0:	e001      	b.n	800beb6 <USBD_GetString+0x42>
 800beb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800beba:	7dfb      	ldrb	r3, [r7, #23]
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	4413      	add	r3, r2
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	7812      	ldrb	r2, [r2, #0]
 800bec4:	701a      	strb	r2, [r3, #0]
  idx++;
 800bec6:	7dfb      	ldrb	r3, [r7, #23]
 800bec8:	3301      	adds	r3, #1
 800beca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800becc:	7dfb      	ldrb	r3, [r7, #23]
 800bece:	68ba      	ldr	r2, [r7, #8]
 800bed0:	4413      	add	r3, r2
 800bed2:	2203      	movs	r2, #3
 800bed4:	701a      	strb	r2, [r3, #0]
  idx++;
 800bed6:	7dfb      	ldrb	r3, [r7, #23]
 800bed8:	3301      	adds	r3, #1
 800beda:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bedc:	e013      	b.n	800bf06 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800bede:	7dfb      	ldrb	r3, [r7, #23]
 800bee0:	68ba      	ldr	r2, [r7, #8]
 800bee2:	4413      	add	r3, r2
 800bee4:	693a      	ldr	r2, [r7, #16]
 800bee6:	7812      	ldrb	r2, [r2, #0]
 800bee8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	3301      	adds	r3, #1
 800beee:	613b      	str	r3, [r7, #16]
    idx++;
 800bef0:	7dfb      	ldrb	r3, [r7, #23]
 800bef2:	3301      	adds	r3, #1
 800bef4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	68ba      	ldr	r2, [r7, #8]
 800befa:	4413      	add	r3, r2
 800befc:	2200      	movs	r2, #0
 800befe:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf00:	7dfb      	ldrb	r3, [r7, #23]
 800bf02:	3301      	adds	r3, #1
 800bf04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1e7      	bne.n	800bede <USBD_GetString+0x6a>
 800bf0e:	e000      	b.n	800bf12 <USBD_GetString+0x9e>
    return;
 800bf10:	bf00      	nop
  }
}
 800bf12:	3718      	adds	r7, #24
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf20:	2300      	movs	r3, #0
 800bf22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bf28:	e005      	b.n	800bf36 <USBD_GetLen+0x1e>
  {
    len++;
 800bf2a:	7bfb      	ldrb	r3, [r7, #15]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	3301      	adds	r3, #1
 800bf34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1f5      	bne.n	800bf2a <USBD_GetLen+0x12>
  }

  return len;
 800bf3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2202      	movs	r2, #2
 800bf5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	2100      	movs	r1, #0
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f003 fbd0 	bl	800f718 <USBD_LL_Transmit>

  return USBD_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	60f8      	str	r0, [r7, #12]
 800bf8a:	60b9      	str	r1, [r7, #8]
 800bf8c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	2100      	movs	r1, #0
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f003 fbbf 	bl	800f718 <USBD_LL_Transmit>

  return USBD_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2203      	movs	r2, #3
 800bfb4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	2100      	movs	r1, #0
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f003 fbda 	bl	800f788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b084      	sub	sp, #16
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	60f8      	str	r0, [r7, #12]
 800bfe6:	60b9      	str	r1, [r7, #8]
 800bfe8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	2100      	movs	r1, #0
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f003 fbc9 	bl	800f788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2204      	movs	r2, #4
 800c00c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c010:	2300      	movs	r3, #0
 800c012:	2200      	movs	r2, #0
 800c014:	2100      	movs	r1, #0
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f003 fb7e 	bl	800f718 <USBD_LL_Transmit>

  return USBD_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b082      	sub	sp, #8
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2205      	movs	r2, #5
 800c032:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c036:	2300      	movs	r3, #0
 800c038:	2200      	movs	r2, #0
 800c03a:	2100      	movs	r1, #0
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f003 fba3 	bl	800f788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <__NVIC_SetPriority>:
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	4603      	mov	r3, r0
 800c054:	6039      	str	r1, [r7, #0]
 800c056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	db0a      	blt.n	800c076 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	b2da      	uxtb	r2, r3
 800c064:	490c      	ldr	r1, [pc, #48]	@ (800c098 <__NVIC_SetPriority+0x4c>)
 800c066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c06a:	0112      	lsls	r2, r2, #4
 800c06c:	b2d2      	uxtb	r2, r2
 800c06e:	440b      	add	r3, r1
 800c070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c074:	e00a      	b.n	800c08c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	b2da      	uxtb	r2, r3
 800c07a:	4908      	ldr	r1, [pc, #32]	@ (800c09c <__NVIC_SetPriority+0x50>)
 800c07c:	79fb      	ldrb	r3, [r7, #7]
 800c07e:	f003 030f 	and.w	r3, r3, #15
 800c082:	3b04      	subs	r3, #4
 800c084:	0112      	lsls	r2, r2, #4
 800c086:	b2d2      	uxtb	r2, r2
 800c088:	440b      	add	r3, r1
 800c08a:	761a      	strb	r2, [r3, #24]
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr
 800c098:	e000e100 	.word	0xe000e100
 800c09c:	e000ed00 	.word	0xe000ed00

0800c0a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c0a4:	4b05      	ldr	r3, [pc, #20]	@ (800c0bc <SysTick_Handler+0x1c>)
 800c0a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c0a8:	f001 fd46 	bl	800db38 <xTaskGetSchedulerState>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d001      	beq.n	800c0b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c0b2:	f002 fb41 	bl	800e738 <xPortSysTickHandler>
  }
}
 800c0b6:	bf00      	nop
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	e000e010 	.word	0xe000e010

0800c0c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	f06f 0004 	mvn.w	r0, #4
 800c0ca:	f7ff ffbf 	bl	800c04c <__NVIC_SetPriority>
#endif
}
 800c0ce:	bf00      	nop
 800c0d0:	bd80      	pop	{r7, pc}
	...

0800c0d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0da:	f3ef 8305 	mrs	r3, IPSR
 800c0de:	603b      	str	r3, [r7, #0]
  return(result);
 800c0e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d003      	beq.n	800c0ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c0e6:	f06f 0305 	mvn.w	r3, #5
 800c0ea:	607b      	str	r3, [r7, #4]
 800c0ec:	e00c      	b.n	800c108 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c0ee:	4b0a      	ldr	r3, [pc, #40]	@ (800c118 <osKernelInitialize+0x44>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d105      	bne.n	800c102 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c0f6:	4b08      	ldr	r3, [pc, #32]	@ (800c118 <osKernelInitialize+0x44>)
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	607b      	str	r3, [r7, #4]
 800c100:	e002      	b.n	800c108 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c102:	f04f 33ff 	mov.w	r3, #4294967295
 800c106:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c108:	687b      	ldr	r3, [r7, #4]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	20000930 	.word	0x20000930

0800c11c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c122:	f3ef 8305 	mrs	r3, IPSR
 800c126:	603b      	str	r3, [r7, #0]
  return(result);
 800c128:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d003      	beq.n	800c136 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c12e:	f06f 0305 	mvn.w	r3, #5
 800c132:	607b      	str	r3, [r7, #4]
 800c134:	e010      	b.n	800c158 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c136:	4b0b      	ldr	r3, [pc, #44]	@ (800c164 <osKernelStart+0x48>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d109      	bne.n	800c152 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c13e:	f7ff ffbf 	bl	800c0c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c142:	4b08      	ldr	r3, [pc, #32]	@ (800c164 <osKernelStart+0x48>)
 800c144:	2202      	movs	r2, #2
 800c146:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c148:	f001 f892 	bl	800d270 <vTaskStartScheduler>
      stat = osOK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	607b      	str	r3, [r7, #4]
 800c150:	e002      	b.n	800c158 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c152:	f04f 33ff 	mov.w	r3, #4294967295
 800c156:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c158:	687b      	ldr	r3, [r7, #4]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	20000930 	.word	0x20000930

0800c168 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08e      	sub	sp, #56	@ 0x38
 800c16c:	af04      	add	r7, sp, #16
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c174:	2300      	movs	r3, #0
 800c176:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c178:	f3ef 8305 	mrs	r3, IPSR
 800c17c:	617b      	str	r3, [r7, #20]
  return(result);
 800c17e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c180:	2b00      	cmp	r3, #0
 800c182:	d17e      	bne.n	800c282 <osThreadNew+0x11a>
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d07b      	beq.n	800c282 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c18a:	2380      	movs	r3, #128	@ 0x80
 800c18c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c18e:	2318      	movs	r3, #24
 800c190:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c192:	2300      	movs	r3, #0
 800c194:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c196:	f04f 33ff 	mov.w	r3, #4294967295
 800c19a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d045      	beq.n	800c22e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d002      	beq.n	800c1b0 <osThreadNew+0x48>
        name = attr->name;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d002      	beq.n	800c1be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	699b      	ldr	r3, [r3, #24]
 800c1bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d008      	beq.n	800c1d6 <osThreadNew+0x6e>
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	2b38      	cmp	r3, #56	@ 0x38
 800c1c8:	d805      	bhi.n	800c1d6 <osThreadNew+0x6e>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	f003 0301 	and.w	r3, r3, #1
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d001      	beq.n	800c1da <osThreadNew+0x72>
        return (NULL);
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	e054      	b.n	800c284 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	695b      	ldr	r3, [r3, #20]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d003      	beq.n	800c1ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	695b      	ldr	r3, [r3, #20]
 800c1e6:	089b      	lsrs	r3, r3, #2
 800c1e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00e      	beq.n	800c210 <osThreadNew+0xa8>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	68db      	ldr	r3, [r3, #12]
 800c1f6:	2ba7      	cmp	r3, #167	@ 0xa7
 800c1f8:	d90a      	bls.n	800c210 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d006      	beq.n	800c210 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	695b      	ldr	r3, [r3, #20]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d002      	beq.n	800c210 <osThreadNew+0xa8>
        mem = 1;
 800c20a:	2301      	movs	r3, #1
 800c20c:	61bb      	str	r3, [r7, #24]
 800c20e:	e010      	b.n	800c232 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10c      	bne.n	800c232 <osThreadNew+0xca>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d108      	bne.n	800c232 <osThreadNew+0xca>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	691b      	ldr	r3, [r3, #16]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d104      	bne.n	800c232 <osThreadNew+0xca>
          mem = 0;
 800c228:	2300      	movs	r3, #0
 800c22a:	61bb      	str	r3, [r7, #24]
 800c22c:	e001      	b.n	800c232 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d110      	bne.n	800c25a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c240:	9202      	str	r2, [sp, #8]
 800c242:	9301      	str	r3, [sp, #4]
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	6a3a      	ldr	r2, [r7, #32]
 800c24c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f000 fe1a 	bl	800ce88 <xTaskCreateStatic>
 800c254:	4603      	mov	r3, r0
 800c256:	613b      	str	r3, [r7, #16]
 800c258:	e013      	b.n	800c282 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d110      	bne.n	800c282 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c260:	6a3b      	ldr	r3, [r7, #32]
 800c262:	b29a      	uxth	r2, r3
 800c264:	f107 0310 	add.w	r3, r7, #16
 800c268:	9301      	str	r3, [sp, #4]
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f000 fe68 	bl	800cf48 <xTaskCreate>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d001      	beq.n	800c282 <osThreadNew+0x11a>
            hTask = NULL;
 800c27e:	2300      	movs	r3, #0
 800c280:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c282:	693b      	ldr	r3, [r7, #16]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3728      	adds	r7, #40	@ 0x28
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c294:	f3ef 8305 	mrs	r3, IPSR
 800c298:	60bb      	str	r3, [r7, #8]
  return(result);
 800c29a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d003      	beq.n	800c2a8 <osDelay+0x1c>
    stat = osErrorISR;
 800c2a0:	f06f 0305 	mvn.w	r3, #5
 800c2a4:	60fb      	str	r3, [r7, #12]
 800c2a6:	e007      	b.n	800c2b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 ffa6 	bl	800d204 <vTaskDelay>
    }
  }

  return (stat);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	4a07      	ldr	r2, [pc, #28]	@ (800c2f0 <vApplicationGetIdleTaskMemory+0x2c>)
 800c2d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	4a06      	ldr	r2, [pc, #24]	@ (800c2f4 <vApplicationGetIdleTaskMemory+0x30>)
 800c2da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2280      	movs	r2, #128	@ 0x80
 800c2e0:	601a      	str	r2, [r3, #0]
}
 800c2e2:	bf00      	nop
 800c2e4:	3714      	adds	r7, #20
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	20000934 	.word	0x20000934
 800c2f4:	200009dc 	.word	0x200009dc

0800c2f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	4a07      	ldr	r2, [pc, #28]	@ (800c324 <vApplicationGetTimerTaskMemory+0x2c>)
 800c308:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	4a06      	ldr	r2, [pc, #24]	@ (800c328 <vApplicationGetTimerTaskMemory+0x30>)
 800c30e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c316:	601a      	str	r2, [r3, #0]
}
 800c318:	bf00      	nop
 800c31a:	3714      	adds	r7, #20
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr
 800c324:	20000bdc 	.word	0x20000bdc
 800c328:	20000c84 	.word	0x20000c84

0800c32c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f103 0208 	add.w	r2, r3, #8
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f04f 32ff 	mov.w	r2, #4294967295
 800c344:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f103 0208 	add.w	r2, r3, #8
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f103 0208 	add.w	r2, r3, #8
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c37a:	bf00      	nop
 800c37c:	370c      	adds	r7, #12
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr

0800c386 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c386:	b480      	push	{r7}
 800c388:	b085      	sub	sp, #20
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
 800c38e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	689a      	ldr	r2, [r3, #8]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	683a      	ldr	r2, [r7, #0]
 800c3b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	1c5a      	adds	r2, r3, #1
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	601a      	str	r2, [r3, #0]
}
 800c3c2:	bf00      	nop
 800c3c4:	3714      	adds	r7, #20
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3e4:	d103      	bne.n	800c3ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	60fb      	str	r3, [r7, #12]
 800c3ec:	e00c      	b.n	800c408 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	3308      	adds	r3, #8
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	e002      	b.n	800c3fc <vListInsert+0x2e>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	60fb      	str	r3, [r7, #12]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68ba      	ldr	r2, [r7, #8]
 800c404:	429a      	cmp	r2, r3
 800c406:	d2f6      	bcs.n	800c3f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	685a      	ldr	r2, [r3, #4]
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	683a      	ldr	r2, [r7, #0]
 800c416:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	683a      	ldr	r2, [r7, #0]
 800c422:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	1c5a      	adds	r2, r3, #1
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	601a      	str	r2, [r3, #0]
}
 800c434:	bf00      	nop
 800c436:	3714      	adds	r7, #20
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c440:	b480      	push	{r7}
 800c442:	b085      	sub	sp, #20
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	6892      	ldr	r2, [r2, #8]
 800c456:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	6852      	ldr	r2, [r2, #4]
 800c460:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d103      	bne.n	800c474 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	689a      	ldr	r2, [r3, #8]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	1e5a      	subs	r2, r3, #1
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3714      	adds	r7, #20
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d10b      	bne.n	800c4c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ac:	f383 8811 	msr	BASEPRI, r3
 800c4b0:	f3bf 8f6f 	isb	sy
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c4ba:	bf00      	nop
 800c4bc:	bf00      	nop
 800c4be:	e7fd      	b.n	800c4bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c4c0:	f002 f8aa 	bl	800e618 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4cc:	68f9      	ldr	r1, [r7, #12]
 800c4ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c4d0:	fb01 f303 	mul.w	r3, r1, r3
 800c4d4:	441a      	add	r2, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4f0:	3b01      	subs	r3, #1
 800c4f2:	68f9      	ldr	r1, [r7, #12]
 800c4f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c4f6:	fb01 f303 	mul.w	r3, r1, r3
 800c4fa:	441a      	add	r2, r3
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	22ff      	movs	r2, #255	@ 0xff
 800c504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	22ff      	movs	r2, #255	@ 0xff
 800c50c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d114      	bne.n	800c540 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d01a      	beq.n	800c554 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3310      	adds	r3, #16
 800c522:	4618      	mov	r0, r3
 800c524:	f001 f942 	bl	800d7ac <xTaskRemoveFromEventList>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d012      	beq.n	800c554 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c52e:	4b0d      	ldr	r3, [pc, #52]	@ (800c564 <xQueueGenericReset+0xd0>)
 800c530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	e009      	b.n	800c554 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	3310      	adds	r3, #16
 800c544:	4618      	mov	r0, r3
 800c546:	f7ff fef1 	bl	800c32c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	3324      	adds	r3, #36	@ 0x24
 800c54e:	4618      	mov	r0, r3
 800c550:	f7ff feec 	bl	800c32c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c554:	f002 f892 	bl	800e67c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c558:	2301      	movs	r3, #1
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	e000ed04 	.word	0xe000ed04

0800c568 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b08e      	sub	sp, #56	@ 0x38
 800c56c:	af02      	add	r7, sp, #8
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
 800c574:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10b      	bne.n	800c594 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c580:	f383 8811 	msr	BASEPRI, r3
 800c584:	f3bf 8f6f 	isb	sy
 800c588:	f3bf 8f4f 	dsb	sy
 800c58c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c58e:	bf00      	nop
 800c590:	bf00      	nop
 800c592:	e7fd      	b.n	800c590 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10b      	bne.n	800c5b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c5ac:	bf00      	nop
 800c5ae:	bf00      	nop
 800c5b0:	e7fd      	b.n	800c5ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d002      	beq.n	800c5be <xQueueGenericCreateStatic+0x56>
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <xQueueGenericCreateStatic+0x5a>
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e000      	b.n	800c5c4 <xQueueGenericCreateStatic+0x5c>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d10b      	bne.n	800c5e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5cc:	f383 8811 	msr	BASEPRI, r3
 800c5d0:	f3bf 8f6f 	isb	sy
 800c5d4:	f3bf 8f4f 	dsb	sy
 800c5d8:	623b      	str	r3, [r7, #32]
}
 800c5da:	bf00      	nop
 800c5dc:	bf00      	nop
 800c5de:	e7fd      	b.n	800c5dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d102      	bne.n	800c5ec <xQueueGenericCreateStatic+0x84>
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d101      	bne.n	800c5f0 <xQueueGenericCreateStatic+0x88>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e000      	b.n	800c5f2 <xQueueGenericCreateStatic+0x8a>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d10b      	bne.n	800c60e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5fa:	f383 8811 	msr	BASEPRI, r3
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	f3bf 8f4f 	dsb	sy
 800c606:	61fb      	str	r3, [r7, #28]
}
 800c608:	bf00      	nop
 800c60a:	bf00      	nop
 800c60c:	e7fd      	b.n	800c60a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c60e:	2350      	movs	r3, #80	@ 0x50
 800c610:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	2b50      	cmp	r3, #80	@ 0x50
 800c616:	d00b      	beq.n	800c630 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	61bb      	str	r3, [r7, #24]
}
 800c62a:	bf00      	nop
 800c62c:	bf00      	nop
 800c62e:	e7fd      	b.n	800c62c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c630:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00d      	beq.n	800c658 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c644:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	4613      	mov	r3, r2
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	68b9      	ldr	r1, [r7, #8]
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f000 f805 	bl	800c662 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3730      	adds	r7, #48	@ 0x30
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b084      	sub	sp, #16
 800c666:	af00      	add	r7, sp, #0
 800c668:	60f8      	str	r0, [r7, #12]
 800c66a:	60b9      	str	r1, [r7, #8]
 800c66c:	607a      	str	r2, [r7, #4]
 800c66e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d103      	bne.n	800c67e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	69ba      	ldr	r2, [r7, #24]
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	e002      	b.n	800c684 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c690:	2101      	movs	r1, #1
 800c692:	69b8      	ldr	r0, [r7, #24]
 800c694:	f7ff fefe 	bl	800c494 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	78fa      	ldrb	r2, [r7, #3]
 800c69c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c6a0:	bf00      	nop
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08e      	sub	sp, #56	@ 0x38
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
 800c6b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d10b      	bne.n	800c6dc <xQueueGenericSend+0x34>
	__asm volatile
 800c6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c8:	f383 8811 	msr	BASEPRI, r3
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	f3bf 8f4f 	dsb	sy
 800c6d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c6d6:	bf00      	nop
 800c6d8:	bf00      	nop
 800c6da:	e7fd      	b.n	800c6d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d103      	bne.n	800c6ea <xQueueGenericSend+0x42>
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d101      	bne.n	800c6ee <xQueueGenericSend+0x46>
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	e000      	b.n	800c6f0 <xQueueGenericSend+0x48>
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d10b      	bne.n	800c70c <xQueueGenericSend+0x64>
	__asm volatile
 800c6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f8:	f383 8811 	msr	BASEPRI, r3
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f3bf 8f4f 	dsb	sy
 800c704:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c706:	bf00      	nop
 800c708:	bf00      	nop
 800c70a:	e7fd      	b.n	800c708 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d103      	bne.n	800c71a <xQueueGenericSend+0x72>
 800c712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c716:	2b01      	cmp	r3, #1
 800c718:	d101      	bne.n	800c71e <xQueueGenericSend+0x76>
 800c71a:	2301      	movs	r3, #1
 800c71c:	e000      	b.n	800c720 <xQueueGenericSend+0x78>
 800c71e:	2300      	movs	r3, #0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10b      	bne.n	800c73c <xQueueGenericSend+0x94>
	__asm volatile
 800c724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c728:	f383 8811 	msr	BASEPRI, r3
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	623b      	str	r3, [r7, #32]
}
 800c736:	bf00      	nop
 800c738:	bf00      	nop
 800c73a:	e7fd      	b.n	800c738 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c73c:	f001 f9fc 	bl	800db38 <xTaskGetSchedulerState>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d102      	bne.n	800c74c <xQueueGenericSend+0xa4>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d101      	bne.n	800c750 <xQueueGenericSend+0xa8>
 800c74c:	2301      	movs	r3, #1
 800c74e:	e000      	b.n	800c752 <xQueueGenericSend+0xaa>
 800c750:	2300      	movs	r3, #0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d10b      	bne.n	800c76e <xQueueGenericSend+0xc6>
	__asm volatile
 800c756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	61fb      	str	r3, [r7, #28]
}
 800c768:	bf00      	nop
 800c76a:	bf00      	nop
 800c76c:	e7fd      	b.n	800c76a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c76e:	f001 ff53 	bl	800e618 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c774:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d302      	bcc.n	800c784 <xQueueGenericSend+0xdc>
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	2b02      	cmp	r3, #2
 800c782:	d129      	bne.n	800c7d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c784:	683a      	ldr	r2, [r7, #0]
 800c786:	68b9      	ldr	r1, [r7, #8]
 800c788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c78a:	f000 fa0f 	bl	800cbac <prvCopyDataToQueue>
 800c78e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c794:	2b00      	cmp	r3, #0
 800c796:	d010      	beq.n	800c7ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c79a:	3324      	adds	r3, #36	@ 0x24
 800c79c:	4618      	mov	r0, r3
 800c79e:	f001 f805 	bl	800d7ac <xTaskRemoveFromEventList>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d013      	beq.n	800c7d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c7a8:	4b3f      	ldr	r3, [pc, #252]	@ (800c8a8 <xQueueGenericSend+0x200>)
 800c7aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7ae:	601a      	str	r2, [r3, #0]
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	e00a      	b.n	800c7d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d007      	beq.n	800c7d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c7c0:	4b39      	ldr	r3, [pc, #228]	@ (800c8a8 <xQueueGenericSend+0x200>)
 800c7c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7c6:	601a      	str	r2, [r3, #0]
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c7d0:	f001 ff54 	bl	800e67c <vPortExitCritical>
				return pdPASS;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	e063      	b.n	800c8a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d103      	bne.n	800c7e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c7de:	f001 ff4d 	bl	800e67c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e05c      	b.n	800c8a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d106      	bne.n	800c7fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7ec:	f107 0314 	add.w	r3, r7, #20
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f001 f83f 	bl	800d874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7fa:	f001 ff3f 	bl	800e67c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7fe:	f000 fda7 	bl	800d350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c802:	f001 ff09 	bl	800e618 <vPortEnterCritical>
 800c806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c808:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c80c:	b25b      	sxtb	r3, r3
 800c80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c812:	d103      	bne.n	800c81c <xQueueGenericSend+0x174>
 800c814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c816:	2200      	movs	r2, #0
 800c818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c822:	b25b      	sxtb	r3, r3
 800c824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c828:	d103      	bne.n	800c832 <xQueueGenericSend+0x18a>
 800c82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c82c:	2200      	movs	r2, #0
 800c82e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c832:	f001 ff23 	bl	800e67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c836:	1d3a      	adds	r2, r7, #4
 800c838:	f107 0314 	add.w	r3, r7, #20
 800c83c:	4611      	mov	r1, r2
 800c83e:	4618      	mov	r0, r3
 800c840:	f001 f82e 	bl	800d8a0 <xTaskCheckForTimeOut>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d124      	bne.n	800c894 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c84a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c84c:	f000 faa6 	bl	800cd9c <prvIsQueueFull>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d018      	beq.n	800c888 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c858:	3310      	adds	r3, #16
 800c85a:	687a      	ldr	r2, [r7, #4]
 800c85c:	4611      	mov	r1, r2
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 ff52 	bl	800d708 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c866:	f000 fa31 	bl	800cccc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c86a:	f000 fd7f 	bl	800d36c <xTaskResumeAll>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b00      	cmp	r3, #0
 800c872:	f47f af7c 	bne.w	800c76e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c876:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a8 <xQueueGenericSend+0x200>)
 800c878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c87c:	601a      	str	r2, [r3, #0]
 800c87e:	f3bf 8f4f 	dsb	sy
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	e772      	b.n	800c76e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c888:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c88a:	f000 fa1f 	bl	800cccc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c88e:	f000 fd6d 	bl	800d36c <xTaskResumeAll>
 800c892:	e76c      	b.n	800c76e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c894:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c896:	f000 fa19 	bl	800cccc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c89a:	f000 fd67 	bl	800d36c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c89e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3738      	adds	r7, #56	@ 0x38
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	e000ed04 	.word	0xe000ed04

0800c8ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b090      	sub	sp, #64	@ 0x40
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
 800c8b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10b      	bne.n	800c8dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c8d6:	bf00      	nop
 800c8d8:	bf00      	nop
 800c8da:	e7fd      	b.n	800c8d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d103      	bne.n	800c8ea <xQueueGenericSendFromISR+0x3e>
 800c8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d101      	bne.n	800c8ee <xQueueGenericSendFromISR+0x42>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e000      	b.n	800c8f0 <xQueueGenericSendFromISR+0x44>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10b      	bne.n	800c90c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c906:	bf00      	nop
 800c908:	bf00      	nop
 800c90a:	e7fd      	b.n	800c908 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d103      	bne.n	800c91a <xQueueGenericSendFromISR+0x6e>
 800c912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c916:	2b01      	cmp	r3, #1
 800c918:	d101      	bne.n	800c91e <xQueueGenericSendFromISR+0x72>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e000      	b.n	800c920 <xQueueGenericSendFromISR+0x74>
 800c91e:	2300      	movs	r3, #0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10b      	bne.n	800c93c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	623b      	str	r3, [r7, #32]
}
 800c936:	bf00      	nop
 800c938:	bf00      	nop
 800c93a:	e7fd      	b.n	800c938 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c93c:	f001 ff4c 	bl	800e7d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c940:	f3ef 8211 	mrs	r2, BASEPRI
 800c944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	61fa      	str	r2, [r7, #28]
 800c956:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c958:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c95a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c95e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c964:	429a      	cmp	r2, r3
 800c966:	d302      	bcc.n	800c96e <xQueueGenericSendFromISR+0xc2>
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d12f      	bne.n	800c9ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c970:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c974:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c97c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c97e:	683a      	ldr	r2, [r7, #0]
 800c980:	68b9      	ldr	r1, [r7, #8]
 800c982:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c984:	f000 f912 	bl	800cbac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c988:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c990:	d112      	bne.n	800c9b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c996:	2b00      	cmp	r3, #0
 800c998:	d016      	beq.n	800c9c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c99c:	3324      	adds	r3, #36	@ 0x24
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 ff04 	bl	800d7ac <xTaskRemoveFromEventList>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00e      	beq.n	800c9c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00b      	beq.n	800c9c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	601a      	str	r2, [r3, #0]
 800c9b6:	e007      	b.n	800c9c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c9b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c9bc:	3301      	adds	r3, #1
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	b25a      	sxtb	r2, r3
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c9cc:	e001      	b.n	800c9d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c9dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3740      	adds	r7, #64	@ 0x40
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08c      	sub	sp, #48	@ 0x30
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10b      	bne.n	800ca1a <xQueueReceive+0x32>
	__asm volatile
 800ca02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca06:	f383 8811 	msr	BASEPRI, r3
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	623b      	str	r3, [r7, #32]
}
 800ca14:	bf00      	nop
 800ca16:	bf00      	nop
 800ca18:	e7fd      	b.n	800ca16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d103      	bne.n	800ca28 <xQueueReceive+0x40>
 800ca20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d101      	bne.n	800ca2c <xQueueReceive+0x44>
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e000      	b.n	800ca2e <xQueueReceive+0x46>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10b      	bne.n	800ca4a <xQueueReceive+0x62>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	61fb      	str	r3, [r7, #28]
}
 800ca44:	bf00      	nop
 800ca46:	bf00      	nop
 800ca48:	e7fd      	b.n	800ca46 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca4a:	f001 f875 	bl	800db38 <xTaskGetSchedulerState>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d102      	bne.n	800ca5a <xQueueReceive+0x72>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d101      	bne.n	800ca5e <xQueueReceive+0x76>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e000      	b.n	800ca60 <xQueueReceive+0x78>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10b      	bne.n	800ca7c <xQueueReceive+0x94>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	61bb      	str	r3, [r7, #24]
}
 800ca76:	bf00      	nop
 800ca78:	bf00      	nop
 800ca7a:	e7fd      	b.n	800ca78 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca7c:	f001 fdcc 	bl	800e618 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca84:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d01f      	beq.n	800cacc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca8c:	68b9      	ldr	r1, [r7, #8]
 800ca8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca90:	f000 f8f6 	bl	800cc80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca96:	1e5a      	subs	r2, r3, #1
 800ca98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9e:	691b      	ldr	r3, [r3, #16]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d00f      	beq.n	800cac4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800caa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa6:	3310      	adds	r3, #16
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 fe7f 	bl	800d7ac <xTaskRemoveFromEventList>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d007      	beq.n	800cac4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cab4:	4b3c      	ldr	r3, [pc, #240]	@ (800cba8 <xQueueReceive+0x1c0>)
 800cab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caba:	601a      	str	r2, [r3, #0]
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cac4:	f001 fdda 	bl	800e67c <vPortExitCritical>
				return pdPASS;
 800cac8:	2301      	movs	r3, #1
 800caca:	e069      	b.n	800cba0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d103      	bne.n	800cada <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cad2:	f001 fdd3 	bl	800e67c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cad6:	2300      	movs	r3, #0
 800cad8:	e062      	b.n	800cba0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d106      	bne.n	800caee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cae0:	f107 0310 	add.w	r3, r7, #16
 800cae4:	4618      	mov	r0, r3
 800cae6:	f000 fec5 	bl	800d874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800caea:	2301      	movs	r3, #1
 800caec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800caee:	f001 fdc5 	bl	800e67c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800caf2:	f000 fc2d 	bl	800d350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800caf6:	f001 fd8f 	bl	800e618 <vPortEnterCritical>
 800cafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb00:	b25b      	sxtb	r3, r3
 800cb02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb06:	d103      	bne.n	800cb10 <xQueueReceive+0x128>
 800cb08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb16:	b25b      	sxtb	r3, r3
 800cb18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb1c:	d103      	bne.n	800cb26 <xQueueReceive+0x13e>
 800cb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb20:	2200      	movs	r2, #0
 800cb22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cb26:	f001 fda9 	bl	800e67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb2a:	1d3a      	adds	r2, r7, #4
 800cb2c:	f107 0310 	add.w	r3, r7, #16
 800cb30:	4611      	mov	r1, r2
 800cb32:	4618      	mov	r0, r3
 800cb34:	f000 feb4 	bl	800d8a0 <xTaskCheckForTimeOut>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d123      	bne.n	800cb86 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb40:	f000 f916 	bl	800cd70 <prvIsQueueEmpty>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d017      	beq.n	800cb7a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb4c:	3324      	adds	r3, #36	@ 0x24
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	4611      	mov	r1, r2
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 fdd8 	bl	800d708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb5a:	f000 f8b7 	bl	800cccc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb5e:	f000 fc05 	bl	800d36c <xTaskResumeAll>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d189      	bne.n	800ca7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cb68:	4b0f      	ldr	r3, [pc, #60]	@ (800cba8 <xQueueReceive+0x1c0>)
 800cb6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb6e:	601a      	str	r2, [r3, #0]
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	e780      	b.n	800ca7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cb7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb7c:	f000 f8a6 	bl	800cccc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb80:	f000 fbf4 	bl	800d36c <xTaskResumeAll>
 800cb84:	e77a      	b.n	800ca7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cb86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb88:	f000 f8a0 	bl	800cccc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb8c:	f000 fbee 	bl	800d36c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb92:	f000 f8ed 	bl	800cd70 <prvIsQueueEmpty>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f43f af6f 	beq.w	800ca7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3730      	adds	r7, #48	@ 0x30
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	e000ed04 	.word	0xe000ed04

0800cbac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b086      	sub	sp, #24
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10d      	bne.n	800cbe6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d14d      	bne.n	800cc6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 ffcc 	bl	800db74 <xTaskPriorityDisinherit>
 800cbdc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	609a      	str	r2, [r3, #8]
 800cbe4:	e043      	b.n	800cc6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d119      	bne.n	800cc20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6858      	ldr	r0, [r3, #4]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	68b9      	ldr	r1, [r7, #8]
 800cbf8:	f003 fcb1 	bl	801055e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	685a      	ldr	r2, [r3, #4]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc04:	441a      	add	r2, r3
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	685a      	ldr	r2, [r3, #4]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d32b      	bcc.n	800cc6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	605a      	str	r2, [r3, #4]
 800cc1e:	e026      	b.n	800cc6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	68d8      	ldr	r0, [r3, #12]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc28:	461a      	mov	r2, r3
 800cc2a:	68b9      	ldr	r1, [r7, #8]
 800cc2c:	f003 fc97 	bl	801055e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	68da      	ldr	r2, [r3, #12]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc38:	425b      	negs	r3, r3
 800cc3a:	441a      	add	r2, r3
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	68da      	ldr	r2, [r3, #12]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d207      	bcs.n	800cc5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	689a      	ldr	r2, [r3, #8]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc54:	425b      	negs	r3, r3
 800cc56:	441a      	add	r2, r3
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	d105      	bne.n	800cc6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d002      	beq.n	800cc6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	1c5a      	adds	r2, r3, #1
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cc76:	697b      	ldr	r3, [r7, #20]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3718      	adds	r7, #24
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d018      	beq.n	800ccc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68da      	ldr	r2, [r3, #12]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc9a:	441a      	add	r2, r3
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	68da      	ldr	r2, [r3, #12]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d303      	bcc.n	800ccb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	68d9      	ldr	r1, [r3, #12]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	6838      	ldr	r0, [r7, #0]
 800ccc0:	f003 fc4d 	bl	801055e <memcpy>
	}
}
 800ccc4:	bf00      	nop
 800ccc6:	3708      	adds	r7, #8
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ccd4:	f001 fca0 	bl	800e618 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ccde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cce0:	e011      	b.n	800cd06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d012      	beq.n	800cd10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	3324      	adds	r3, #36	@ 0x24
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 fd5c 	bl	800d7ac <xTaskRemoveFromEventList>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d001      	beq.n	800ccfe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ccfa:	f000 fe35 	bl	800d968 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	3b01      	subs	r3, #1
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	dce9      	bgt.n	800cce2 <prvUnlockQueue+0x16>
 800cd0e:	e000      	b.n	800cd12 <prvUnlockQueue+0x46>
					break;
 800cd10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	22ff      	movs	r2, #255	@ 0xff
 800cd16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cd1a:	f001 fcaf 	bl	800e67c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cd1e:	f001 fc7b 	bl	800e618 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd2a:	e011      	b.n	800cd50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	691b      	ldr	r3, [r3, #16]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d012      	beq.n	800cd5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	3310      	adds	r3, #16
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f000 fd37 	bl	800d7ac <xTaskRemoveFromEventList>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cd44:	f000 fe10 	bl	800d968 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cd48:	7bbb      	ldrb	r3, [r7, #14]
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	dce9      	bgt.n	800cd2c <prvUnlockQueue+0x60>
 800cd58:	e000      	b.n	800cd5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cd5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	22ff      	movs	r2, #255	@ 0xff
 800cd60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cd64:	f001 fc8a 	bl	800e67c <vPortExitCritical>
}
 800cd68:	bf00      	nop
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd78:	f001 fc4e 	bl	800e618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d102      	bne.n	800cd8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd84:	2301      	movs	r3, #1
 800cd86:	60fb      	str	r3, [r7, #12]
 800cd88:	e001      	b.n	800cd8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd8e:	f001 fc75 	bl	800e67c <vPortExitCritical>

	return xReturn;
 800cd92:	68fb      	ldr	r3, [r7, #12]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3710      	adds	r7, #16
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cda4:	f001 fc38 	bl	800e618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d102      	bne.n	800cdba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	60fb      	str	r3, [r7, #12]
 800cdb8:	e001      	b.n	800cdbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cdbe:	f001 fc5d 	bl	800e67c <vPortExitCritical>

	return xReturn;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3710      	adds	r7, #16
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	60fb      	str	r3, [r7, #12]
 800cdda:	e014      	b.n	800ce06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cddc:	4a0f      	ldr	r2, [pc, #60]	@ (800ce1c <vQueueAddToRegistry+0x50>)
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10b      	bne.n	800ce00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cde8:	490c      	ldr	r1, [pc, #48]	@ (800ce1c <vQueueAddToRegistry+0x50>)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cdf2:	4a0a      	ldr	r2, [pc, #40]	@ (800ce1c <vQueueAddToRegistry+0x50>)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	00db      	lsls	r3, r3, #3
 800cdf8:	4413      	add	r3, r2
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cdfe:	e006      	b.n	800ce0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	3301      	adds	r3, #1
 800ce04:	60fb      	str	r3, [r7, #12]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2b07      	cmp	r3, #7
 800ce0a:	d9e7      	bls.n	800cddc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ce0c:	bf00      	nop
 800ce0e:	bf00      	nop
 800ce10:	3714      	adds	r7, #20
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	20001084 	.word	0x20001084

0800ce20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b086      	sub	sp, #24
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce30:	f001 fbf2 	bl	800e618 <vPortEnterCritical>
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce3a:	b25b      	sxtb	r3, r3
 800ce3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce40:	d103      	bne.n	800ce4a <vQueueWaitForMessageRestricted+0x2a>
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce50:	b25b      	sxtb	r3, r3
 800ce52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce56:	d103      	bne.n	800ce60 <vQueueWaitForMessageRestricted+0x40>
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce60:	f001 fc0c 	bl	800e67c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d106      	bne.n	800ce7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	3324      	adds	r3, #36	@ 0x24
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	68b9      	ldr	r1, [r7, #8]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f000 fc6d 	bl	800d754 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce7a:	6978      	ldr	r0, [r7, #20]
 800ce7c:	f7ff ff26 	bl	800cccc <prvUnlockQueue>
	}
 800ce80:	bf00      	nop
 800ce82:	3718      	adds	r7, #24
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b08e      	sub	sp, #56	@ 0x38
 800ce8c:	af04      	add	r7, sp, #16
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
 800ce94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ce96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d10b      	bne.n	800ceb4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ce9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea0:	f383 8811 	msr	BASEPRI, r3
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	623b      	str	r3, [r7, #32]
}
 800ceae:	bf00      	nop
 800ceb0:	bf00      	nop
 800ceb2:	e7fd      	b.n	800ceb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10b      	bne.n	800ced2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	61fb      	str	r3, [r7, #28]
}
 800cecc:	bf00      	nop
 800cece:	bf00      	nop
 800ced0:	e7fd      	b.n	800cece <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ced2:	23a8      	movs	r3, #168	@ 0xa8
 800ced4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	2ba8      	cmp	r3, #168	@ 0xa8
 800ceda:	d00b      	beq.n	800cef4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	61bb      	str	r3, [r7, #24]
}
 800ceee:	bf00      	nop
 800cef0:	bf00      	nop
 800cef2:	e7fd      	b.n	800cef0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cef4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d01e      	beq.n	800cf3a <xTaskCreateStatic+0xb2>
 800cefc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d01b      	beq.n	800cf3a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf04:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf0a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0e:	2202      	movs	r2, #2
 800cf10:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf14:	2300      	movs	r3, #0
 800cf16:	9303      	str	r3, [sp, #12]
 800cf18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1a:	9302      	str	r3, [sp, #8]
 800cf1c:	f107 0314 	add.w	r3, r7, #20
 800cf20:	9301      	str	r3, [sp, #4]
 800cf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf24:	9300      	str	r3, [sp, #0]
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	68b9      	ldr	r1, [r7, #8]
 800cf2c:	68f8      	ldr	r0, [r7, #12]
 800cf2e:	f000 f851 	bl	800cfd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf34:	f000 f8f6 	bl	800d124 <prvAddNewTaskToReadyList>
 800cf38:	e001      	b.n	800cf3e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf3e:	697b      	ldr	r3, [r7, #20]
	}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3728      	adds	r7, #40	@ 0x28
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b08c      	sub	sp, #48	@ 0x30
 800cf4c:	af04      	add	r7, sp, #16
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	603b      	str	r3, [r7, #0]
 800cf54:	4613      	mov	r3, r2
 800cf56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf58:	88fb      	ldrh	r3, [r7, #6]
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f001 fc7d 	bl	800e85c <pvPortMalloc>
 800cf62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00e      	beq.n	800cf88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf6a:	20a8      	movs	r0, #168	@ 0xa8
 800cf6c:	f001 fc76 	bl	800e85c <pvPortMalloc>
 800cf70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d003      	beq.n	800cf80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	697a      	ldr	r2, [r7, #20]
 800cf7c:	631a      	str	r2, [r3, #48]	@ 0x30
 800cf7e:	e005      	b.n	800cf8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf80:	6978      	ldr	r0, [r7, #20]
 800cf82:	f001 fd39 	bl	800e9f8 <vPortFree>
 800cf86:	e001      	b.n	800cf8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d017      	beq.n	800cfc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	2200      	movs	r2, #0
 800cf96:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cf9a:	88fa      	ldrh	r2, [r7, #6]
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	9303      	str	r3, [sp, #12]
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	9302      	str	r3, [sp, #8]
 800cfa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa6:	9301      	str	r3, [sp, #4]
 800cfa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	68b9      	ldr	r1, [r7, #8]
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f000 f80f 	bl	800cfd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cfb6:	69f8      	ldr	r0, [r7, #28]
 800cfb8:	f000 f8b4 	bl	800d124 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	61bb      	str	r3, [r7, #24]
 800cfc0:	e002      	b.n	800cfc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cfc2:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cfc8:	69bb      	ldr	r3, [r7, #24]
	}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3720      	adds	r7, #32
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
	...

0800cfd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b088      	sub	sp, #32
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
 800cfe0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	461a      	mov	r2, r3
 800cfec:	21a5      	movs	r1, #165	@ 0xa5
 800cfee:	f003 f9e0 	bl	80103b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cffc:	3b01      	subs	r3, #1
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4413      	add	r3, r2
 800d002:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	f023 0307 	bic.w	r3, r3, #7
 800d00a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	f003 0307 	and.w	r3, r3, #7
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00b      	beq.n	800d02e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	617b      	str	r3, [r7, #20]
}
 800d028:	bf00      	nop
 800d02a:	bf00      	nop
 800d02c:	e7fd      	b.n	800d02a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d01f      	beq.n	800d074 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d034:	2300      	movs	r3, #0
 800d036:	61fb      	str	r3, [r7, #28]
 800d038:	e012      	b.n	800d060 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d03a:	68ba      	ldr	r2, [r7, #8]
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	4413      	add	r3, r2
 800d040:	7819      	ldrb	r1, [r3, #0]
 800d042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	4413      	add	r3, r2
 800d048:	3334      	adds	r3, #52	@ 0x34
 800d04a:	460a      	mov	r2, r1
 800d04c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	4413      	add	r3, r2
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d006      	beq.n	800d068 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	3301      	adds	r3, #1
 800d05e:	61fb      	str	r3, [r7, #28]
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	2b0f      	cmp	r3, #15
 800d064:	d9e9      	bls.n	800d03a <prvInitialiseNewTask+0x66>
 800d066:	e000      	b.n	800d06a <prvInitialiseNewTask+0x96>
			{
				break;
 800d068:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d06c:	2200      	movs	r2, #0
 800d06e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d072:	e003      	b.n	800d07c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d076:	2200      	movs	r2, #0
 800d078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d07e:	2b37      	cmp	r3, #55	@ 0x37
 800d080:	d901      	bls.n	800d086 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d082:	2337      	movs	r3, #55	@ 0x37
 800d084:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d088:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d08a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d08e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d090:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d094:	2200      	movs	r2, #0
 800d096:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d09a:	3304      	adds	r3, #4
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff f965 	bl	800c36c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a4:	3318      	adds	r3, #24
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7ff f960 	bl	800c36c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d4:	3354      	adds	r3, #84	@ 0x54
 800d0d6:	224c      	movs	r2, #76	@ 0x4c
 800d0d8:	2100      	movs	r1, #0
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f003 f969 	bl	80103b2 <memset>
 800d0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e2:	4a0d      	ldr	r2, [pc, #52]	@ (800d118 <prvInitialiseNewTask+0x144>)
 800d0e4:	659a      	str	r2, [r3, #88]	@ 0x58
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e8:	4a0c      	ldr	r2, [pc, #48]	@ (800d11c <prvInitialiseNewTask+0x148>)
 800d0ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ee:	4a0c      	ldr	r2, [pc, #48]	@ (800d120 <prvInitialiseNewTask+0x14c>)
 800d0f0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	68f9      	ldr	r1, [r7, #12]
 800d0f6:	69b8      	ldr	r0, [r7, #24]
 800d0f8:	f001 f95a 	bl	800e3b0 <pxPortInitialiseStack>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d100:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d104:	2b00      	cmp	r3, #0
 800d106:	d002      	beq.n	800d10e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d10a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d10c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d10e:	bf00      	nop
 800d110:	3720      	adds	r7, #32
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	20004680 	.word	0x20004680
 800d11c:	200046e8 	.word	0x200046e8
 800d120:	20004750 	.word	0x20004750

0800d124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d12c:	f001 fa74 	bl	800e618 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d130:	4b2d      	ldr	r3, [pc, #180]	@ (800d1e8 <prvAddNewTaskToReadyList+0xc4>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3301      	adds	r3, #1
 800d136:	4a2c      	ldr	r2, [pc, #176]	@ (800d1e8 <prvAddNewTaskToReadyList+0xc4>)
 800d138:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d13a:	4b2c      	ldr	r3, [pc, #176]	@ (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d109      	bne.n	800d156 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d142:	4a2a      	ldr	r2, [pc, #168]	@ (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d148:	4b27      	ldr	r3, [pc, #156]	@ (800d1e8 <prvAddNewTaskToReadyList+0xc4>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d110      	bne.n	800d172 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d150:	f000 fc2e 	bl	800d9b0 <prvInitialiseTaskLists>
 800d154:	e00d      	b.n	800d172 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d156:	4b26      	ldr	r3, [pc, #152]	@ (800d1f0 <prvAddNewTaskToReadyList+0xcc>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d109      	bne.n	800d172 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d15e:	4b23      	ldr	r3, [pc, #140]	@ (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d168:	429a      	cmp	r2, r3
 800d16a:	d802      	bhi.n	800d172 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d16c:	4a1f      	ldr	r2, [pc, #124]	@ (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d172:	4b20      	ldr	r3, [pc, #128]	@ (800d1f4 <prvAddNewTaskToReadyList+0xd0>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3301      	adds	r3, #1
 800d178:	4a1e      	ldr	r2, [pc, #120]	@ (800d1f4 <prvAddNewTaskToReadyList+0xd0>)
 800d17a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d17c:	4b1d      	ldr	r3, [pc, #116]	@ (800d1f4 <prvAddNewTaskToReadyList+0xd0>)
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d188:	4b1b      	ldr	r3, [pc, #108]	@ (800d1f8 <prvAddNewTaskToReadyList+0xd4>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d903      	bls.n	800d198 <prvAddNewTaskToReadyList+0x74>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d194:	4a18      	ldr	r2, [pc, #96]	@ (800d1f8 <prvAddNewTaskToReadyList+0xd4>)
 800d196:	6013      	str	r3, [r2, #0]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d19c:	4613      	mov	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4413      	add	r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	4a15      	ldr	r2, [pc, #84]	@ (800d1fc <prvAddNewTaskToReadyList+0xd8>)
 800d1a6:	441a      	add	r2, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	3304      	adds	r3, #4
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	f7ff f8e9 	bl	800c386 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d1b4:	f001 fa62 	bl	800e67c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d1b8:	4b0d      	ldr	r3, [pc, #52]	@ (800d1f0 <prvAddNewTaskToReadyList+0xcc>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00e      	beq.n	800d1de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d1c0:	4b0a      	ldr	r3, [pc, #40]	@ (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d207      	bcs.n	800d1de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d1ce:	4b0c      	ldr	r3, [pc, #48]	@ (800d200 <prvAddNewTaskToReadyList+0xdc>)
 800d1d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1de:	bf00      	nop
 800d1e0:	3708      	adds	r7, #8
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20001598 	.word	0x20001598
 800d1ec:	200010c4 	.word	0x200010c4
 800d1f0:	200015a4 	.word	0x200015a4
 800d1f4:	200015b4 	.word	0x200015b4
 800d1f8:	200015a0 	.word	0x200015a0
 800d1fc:	200010c8 	.word	0x200010c8
 800d200:	e000ed04 	.word	0xe000ed04

0800d204 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d20c:	2300      	movs	r3, #0
 800d20e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d018      	beq.n	800d248 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d216:	4b14      	ldr	r3, [pc, #80]	@ (800d268 <vTaskDelay+0x64>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00b      	beq.n	800d236 <vTaskDelay+0x32>
	__asm volatile
 800d21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	60bb      	str	r3, [r7, #8]
}
 800d230:	bf00      	nop
 800d232:	bf00      	nop
 800d234:	e7fd      	b.n	800d232 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d236:	f000 f88b 	bl	800d350 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d23a:	2100      	movs	r1, #0
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fd09 	bl	800dc54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d242:	f000 f893 	bl	800d36c <xTaskResumeAll>
 800d246:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d107      	bne.n	800d25e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d24e:	4b07      	ldr	r3, [pc, #28]	@ (800d26c <vTaskDelay+0x68>)
 800d250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d254:	601a      	str	r2, [r3, #0]
 800d256:	f3bf 8f4f 	dsb	sy
 800d25a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d25e:	bf00      	nop
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	200015c0 	.word	0x200015c0
 800d26c:	e000ed04 	.word	0xe000ed04

0800d270 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08a      	sub	sp, #40	@ 0x28
 800d274:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d276:	2300      	movs	r3, #0
 800d278:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d27a:	2300      	movs	r3, #0
 800d27c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d27e:	463a      	mov	r2, r7
 800d280:	1d39      	adds	r1, r7, #4
 800d282:	f107 0308 	add.w	r3, r7, #8
 800d286:	4618      	mov	r0, r3
 800d288:	f7ff f81c 	bl	800c2c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d28c:	6839      	ldr	r1, [r7, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	68ba      	ldr	r2, [r7, #8]
 800d292:	9202      	str	r2, [sp, #8]
 800d294:	9301      	str	r3, [sp, #4]
 800d296:	2300      	movs	r3, #0
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	2300      	movs	r3, #0
 800d29c:	460a      	mov	r2, r1
 800d29e:	4924      	ldr	r1, [pc, #144]	@ (800d330 <vTaskStartScheduler+0xc0>)
 800d2a0:	4824      	ldr	r0, [pc, #144]	@ (800d334 <vTaskStartScheduler+0xc4>)
 800d2a2:	f7ff fdf1 	bl	800ce88 <xTaskCreateStatic>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	4a23      	ldr	r2, [pc, #140]	@ (800d338 <vTaskStartScheduler+0xc8>)
 800d2aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d2ac:	4b22      	ldr	r3, [pc, #136]	@ (800d338 <vTaskStartScheduler+0xc8>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d002      	beq.n	800d2ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	617b      	str	r3, [r7, #20]
 800d2b8:	e001      	b.n	800d2be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d102      	bne.n	800d2ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2c4:	f000 fd1a 	bl	800dcfc <xTimerCreateTimerTask>
 800d2c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d11b      	bne.n	800d308 <vTaskStartScheduler+0x98>
	__asm volatile
 800d2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	613b      	str	r3, [r7, #16]
}
 800d2e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2e4:	4b15      	ldr	r3, [pc, #84]	@ (800d33c <vTaskStartScheduler+0xcc>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	3354      	adds	r3, #84	@ 0x54
 800d2ea:	4a15      	ldr	r2, [pc, #84]	@ (800d340 <vTaskStartScheduler+0xd0>)
 800d2ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2ee:	4b15      	ldr	r3, [pc, #84]	@ (800d344 <vTaskStartScheduler+0xd4>)
 800d2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d2f6:	4b14      	ldr	r3, [pc, #80]	@ (800d348 <vTaskStartScheduler+0xd8>)
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2fc:	4b13      	ldr	r3, [pc, #76]	@ (800d34c <vTaskStartScheduler+0xdc>)
 800d2fe:	2200      	movs	r2, #0
 800d300:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d302:	f001 f8e5 	bl	800e4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d306:	e00f      	b.n	800d328 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30e:	d10b      	bne.n	800d328 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d314:	f383 8811 	msr	BASEPRI, r3
 800d318:	f3bf 8f6f 	isb	sy
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	60fb      	str	r3, [r7, #12]
}
 800d322:	bf00      	nop
 800d324:	bf00      	nop
 800d326:	e7fd      	b.n	800d324 <vTaskStartScheduler+0xb4>
}
 800d328:	bf00      	nop
 800d32a:	3718      	adds	r7, #24
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	0801231c 	.word	0x0801231c
 800d334:	0800d981 	.word	0x0800d981
 800d338:	200015bc 	.word	0x200015bc
 800d33c:	200010c4 	.word	0x200010c4
 800d340:	20000124 	.word	0x20000124
 800d344:	200015b8 	.word	0x200015b8
 800d348:	200015a4 	.word	0x200015a4
 800d34c:	2000159c 	.word	0x2000159c

0800d350 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d350:	b480      	push	{r7}
 800d352:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d354:	4b04      	ldr	r3, [pc, #16]	@ (800d368 <vTaskSuspendAll+0x18>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	3301      	adds	r3, #1
 800d35a:	4a03      	ldr	r2, [pc, #12]	@ (800d368 <vTaskSuspendAll+0x18>)
 800d35c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d35e:	bf00      	nop
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr
 800d368:	200015c0 	.word	0x200015c0

0800d36c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d372:	2300      	movs	r3, #0
 800d374:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d376:	2300      	movs	r3, #0
 800d378:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d37a:	4b42      	ldr	r3, [pc, #264]	@ (800d484 <xTaskResumeAll+0x118>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d10b      	bne.n	800d39a <xTaskResumeAll+0x2e>
	__asm volatile
 800d382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d386:	f383 8811 	msr	BASEPRI, r3
 800d38a:	f3bf 8f6f 	isb	sy
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	603b      	str	r3, [r7, #0]
}
 800d394:	bf00      	nop
 800d396:	bf00      	nop
 800d398:	e7fd      	b.n	800d396 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d39a:	f001 f93d 	bl	800e618 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d39e:	4b39      	ldr	r3, [pc, #228]	@ (800d484 <xTaskResumeAll+0x118>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	3b01      	subs	r3, #1
 800d3a4:	4a37      	ldr	r2, [pc, #220]	@ (800d484 <xTaskResumeAll+0x118>)
 800d3a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3a8:	4b36      	ldr	r3, [pc, #216]	@ (800d484 <xTaskResumeAll+0x118>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d162      	bne.n	800d476 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d3b0:	4b35      	ldr	r3, [pc, #212]	@ (800d488 <xTaskResumeAll+0x11c>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d05e      	beq.n	800d476 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3b8:	e02f      	b.n	800d41a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3ba:	4b34      	ldr	r3, [pc, #208]	@ (800d48c <xTaskResumeAll+0x120>)
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	3318      	adds	r3, #24
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7ff f83a 	bl	800c440 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	3304      	adds	r3, #4
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7ff f835 	bl	800c440 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3da:	4b2d      	ldr	r3, [pc, #180]	@ (800d490 <xTaskResumeAll+0x124>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d903      	bls.n	800d3ea <xTaskResumeAll+0x7e>
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3e6:	4a2a      	ldr	r2, [pc, #168]	@ (800d490 <xTaskResumeAll+0x124>)
 800d3e8:	6013      	str	r3, [r2, #0]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	4413      	add	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4a27      	ldr	r2, [pc, #156]	@ (800d494 <xTaskResumeAll+0x128>)
 800d3f8:	441a      	add	r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	4619      	mov	r1, r3
 800d400:	4610      	mov	r0, r2
 800d402:	f7fe ffc0 	bl	800c386 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d40a:	4b23      	ldr	r3, [pc, #140]	@ (800d498 <xTaskResumeAll+0x12c>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d410:	429a      	cmp	r2, r3
 800d412:	d302      	bcc.n	800d41a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d414:	4b21      	ldr	r3, [pc, #132]	@ (800d49c <xTaskResumeAll+0x130>)
 800d416:	2201      	movs	r2, #1
 800d418:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d41a:	4b1c      	ldr	r3, [pc, #112]	@ (800d48c <xTaskResumeAll+0x120>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1cb      	bne.n	800d3ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d001      	beq.n	800d42c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d428:	f000 fb66 	bl	800daf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d42c:	4b1c      	ldr	r3, [pc, #112]	@ (800d4a0 <xTaskResumeAll+0x134>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d010      	beq.n	800d45a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d438:	f000 f846 	bl	800d4c8 <xTaskIncrementTick>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d002      	beq.n	800d448 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d442:	4b16      	ldr	r3, [pc, #88]	@ (800d49c <xTaskResumeAll+0x130>)
 800d444:	2201      	movs	r2, #1
 800d446:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	3b01      	subs	r3, #1
 800d44c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1f1      	bne.n	800d438 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d454:	4b12      	ldr	r3, [pc, #72]	@ (800d4a0 <xTaskResumeAll+0x134>)
 800d456:	2200      	movs	r2, #0
 800d458:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d45a:	4b10      	ldr	r3, [pc, #64]	@ (800d49c <xTaskResumeAll+0x130>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d009      	beq.n	800d476 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d462:	2301      	movs	r3, #1
 800d464:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d466:	4b0f      	ldr	r3, [pc, #60]	@ (800d4a4 <xTaskResumeAll+0x138>)
 800d468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d476:	f001 f901 	bl	800e67c <vPortExitCritical>

	return xAlreadyYielded;
 800d47a:	68bb      	ldr	r3, [r7, #8]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	200015c0 	.word	0x200015c0
 800d488:	20001598 	.word	0x20001598
 800d48c:	20001558 	.word	0x20001558
 800d490:	200015a0 	.word	0x200015a0
 800d494:	200010c8 	.word	0x200010c8
 800d498:	200010c4 	.word	0x200010c4
 800d49c:	200015ac 	.word	0x200015ac
 800d4a0:	200015a8 	.word	0x200015a8
 800d4a4:	e000ed04 	.word	0xe000ed04

0800d4a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d4ae:	4b05      	ldr	r3, [pc, #20]	@ (800d4c4 <xTaskGetTickCount+0x1c>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d4b4:	687b      	ldr	r3, [r7, #4]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	370c      	adds	r7, #12
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	2000159c 	.word	0x2000159c

0800d4c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4d2:	4b4f      	ldr	r3, [pc, #316]	@ (800d610 <xTaskIncrementTick+0x148>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f040 8090 	bne.w	800d5fc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4dc:	4b4d      	ldr	r3, [pc, #308]	@ (800d614 <xTaskIncrementTick+0x14c>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4e4:	4a4b      	ldr	r2, [pc, #300]	@ (800d614 <xTaskIncrementTick+0x14c>)
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d121      	bne.n	800d534 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4f0:	4b49      	ldr	r3, [pc, #292]	@ (800d618 <xTaskIncrementTick+0x150>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00b      	beq.n	800d512 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	603b      	str	r3, [r7, #0]
}
 800d50c:	bf00      	nop
 800d50e:	bf00      	nop
 800d510:	e7fd      	b.n	800d50e <xTaskIncrementTick+0x46>
 800d512:	4b41      	ldr	r3, [pc, #260]	@ (800d618 <xTaskIncrementTick+0x150>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	60fb      	str	r3, [r7, #12]
 800d518:	4b40      	ldr	r3, [pc, #256]	@ (800d61c <xTaskIncrementTick+0x154>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a3e      	ldr	r2, [pc, #248]	@ (800d618 <xTaskIncrementTick+0x150>)
 800d51e:	6013      	str	r3, [r2, #0]
 800d520:	4a3e      	ldr	r2, [pc, #248]	@ (800d61c <xTaskIncrementTick+0x154>)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	6013      	str	r3, [r2, #0]
 800d526:	4b3e      	ldr	r3, [pc, #248]	@ (800d620 <xTaskIncrementTick+0x158>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	3301      	adds	r3, #1
 800d52c:	4a3c      	ldr	r2, [pc, #240]	@ (800d620 <xTaskIncrementTick+0x158>)
 800d52e:	6013      	str	r3, [r2, #0]
 800d530:	f000 fae2 	bl	800daf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d534:	4b3b      	ldr	r3, [pc, #236]	@ (800d624 <xTaskIncrementTick+0x15c>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	693a      	ldr	r2, [r7, #16]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d349      	bcc.n	800d5d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d53e:	4b36      	ldr	r3, [pc, #216]	@ (800d618 <xTaskIncrementTick+0x150>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d104      	bne.n	800d552 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d548:	4b36      	ldr	r3, [pc, #216]	@ (800d624 <xTaskIncrementTick+0x15c>)
 800d54a:	f04f 32ff 	mov.w	r2, #4294967295
 800d54e:	601a      	str	r2, [r3, #0]
					break;
 800d550:	e03f      	b.n	800d5d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d552:	4b31      	ldr	r3, [pc, #196]	@ (800d618 <xTaskIncrementTick+0x150>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d562:	693a      	ldr	r2, [r7, #16]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	429a      	cmp	r2, r3
 800d568:	d203      	bcs.n	800d572 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d56a:	4a2e      	ldr	r2, [pc, #184]	@ (800d624 <xTaskIncrementTick+0x15c>)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d570:	e02f      	b.n	800d5d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	3304      	adds	r3, #4
 800d576:	4618      	mov	r0, r3
 800d578:	f7fe ff62 	bl	800c440 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d580:	2b00      	cmp	r3, #0
 800d582:	d004      	beq.n	800d58e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	3318      	adds	r3, #24
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fe ff59 	bl	800c440 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d592:	4b25      	ldr	r3, [pc, #148]	@ (800d628 <xTaskIncrementTick+0x160>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	429a      	cmp	r2, r3
 800d598:	d903      	bls.n	800d5a2 <xTaskIncrementTick+0xda>
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d59e:	4a22      	ldr	r2, [pc, #136]	@ (800d628 <xTaskIncrementTick+0x160>)
 800d5a0:	6013      	str	r3, [r2, #0]
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	4413      	add	r3, r2
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	4a1f      	ldr	r2, [pc, #124]	@ (800d62c <xTaskIncrementTick+0x164>)
 800d5b0:	441a      	add	r2, r3
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	3304      	adds	r3, #4
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	f7fe fee4 	bl	800c386 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5c2:	4b1b      	ldr	r3, [pc, #108]	@ (800d630 <xTaskIncrementTick+0x168>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d3b8      	bcc.n	800d53e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5d0:	e7b5      	b.n	800d53e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5d2:	4b17      	ldr	r3, [pc, #92]	@ (800d630 <xTaskIncrementTick+0x168>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5d8:	4914      	ldr	r1, [pc, #80]	@ (800d62c <xTaskIncrementTick+0x164>)
 800d5da:	4613      	mov	r3, r2
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	4413      	add	r3, r2
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	440b      	add	r3, r1
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d901      	bls.n	800d5ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5ee:	4b11      	ldr	r3, [pc, #68]	@ (800d634 <xTaskIncrementTick+0x16c>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d007      	beq.n	800d606 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	617b      	str	r3, [r7, #20]
 800d5fa:	e004      	b.n	800d606 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d5fc:	4b0e      	ldr	r3, [pc, #56]	@ (800d638 <xTaskIncrementTick+0x170>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	3301      	adds	r3, #1
 800d602:	4a0d      	ldr	r2, [pc, #52]	@ (800d638 <xTaskIncrementTick+0x170>)
 800d604:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d606:	697b      	ldr	r3, [r7, #20]
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3718      	adds	r7, #24
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	200015c0 	.word	0x200015c0
 800d614:	2000159c 	.word	0x2000159c
 800d618:	20001550 	.word	0x20001550
 800d61c:	20001554 	.word	0x20001554
 800d620:	200015b0 	.word	0x200015b0
 800d624:	200015b8 	.word	0x200015b8
 800d628:	200015a0 	.word	0x200015a0
 800d62c:	200010c8 	.word	0x200010c8
 800d630:	200010c4 	.word	0x200010c4
 800d634:	200015ac 	.word	0x200015ac
 800d638:	200015a8 	.word	0x200015a8

0800d63c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d642:	4b2b      	ldr	r3, [pc, #172]	@ (800d6f0 <vTaskSwitchContext+0xb4>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d003      	beq.n	800d652 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d64a:	4b2a      	ldr	r3, [pc, #168]	@ (800d6f4 <vTaskSwitchContext+0xb8>)
 800d64c:	2201      	movs	r2, #1
 800d64e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d650:	e047      	b.n	800d6e2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d652:	4b28      	ldr	r3, [pc, #160]	@ (800d6f4 <vTaskSwitchContext+0xb8>)
 800d654:	2200      	movs	r2, #0
 800d656:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d658:	4b27      	ldr	r3, [pc, #156]	@ (800d6f8 <vTaskSwitchContext+0xbc>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	60fb      	str	r3, [r7, #12]
 800d65e:	e011      	b.n	800d684 <vTaskSwitchContext+0x48>
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d10b      	bne.n	800d67e <vTaskSwitchContext+0x42>
	__asm volatile
 800d666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d66a:	f383 8811 	msr	BASEPRI, r3
 800d66e:	f3bf 8f6f 	isb	sy
 800d672:	f3bf 8f4f 	dsb	sy
 800d676:	607b      	str	r3, [r7, #4]
}
 800d678:	bf00      	nop
 800d67a:	bf00      	nop
 800d67c:	e7fd      	b.n	800d67a <vTaskSwitchContext+0x3e>
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	3b01      	subs	r3, #1
 800d682:	60fb      	str	r3, [r7, #12]
 800d684:	491d      	ldr	r1, [pc, #116]	@ (800d6fc <vTaskSwitchContext+0xc0>)
 800d686:	68fa      	ldr	r2, [r7, #12]
 800d688:	4613      	mov	r3, r2
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	4413      	add	r3, r2
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	440b      	add	r3, r1
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d0e3      	beq.n	800d660 <vTaskSwitchContext+0x24>
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	4613      	mov	r3, r2
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	4413      	add	r3, r2
 800d6a0:	009b      	lsls	r3, r3, #2
 800d6a2:	4a16      	ldr	r2, [pc, #88]	@ (800d6fc <vTaskSwitchContext+0xc0>)
 800d6a4:	4413      	add	r3, r2
 800d6a6:	60bb      	str	r3, [r7, #8]
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	685a      	ldr	r2, [r3, #4]
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	605a      	str	r2, [r3, #4]
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	685a      	ldr	r2, [r3, #4]
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	3308      	adds	r3, #8
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d104      	bne.n	800d6c8 <vTaskSwitchContext+0x8c>
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	685a      	ldr	r2, [r3, #4]
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	605a      	str	r2, [r3, #4]
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	4a0c      	ldr	r2, [pc, #48]	@ (800d700 <vTaskSwitchContext+0xc4>)
 800d6d0:	6013      	str	r3, [r2, #0]
 800d6d2:	4a09      	ldr	r2, [pc, #36]	@ (800d6f8 <vTaskSwitchContext+0xbc>)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d6d8:	4b09      	ldr	r3, [pc, #36]	@ (800d700 <vTaskSwitchContext+0xc4>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	3354      	adds	r3, #84	@ 0x54
 800d6de:	4a09      	ldr	r2, [pc, #36]	@ (800d704 <vTaskSwitchContext+0xc8>)
 800d6e0:	6013      	str	r3, [r2, #0]
}
 800d6e2:	bf00      	nop
 800d6e4:	3714      	adds	r7, #20
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	200015c0 	.word	0x200015c0
 800d6f4:	200015ac 	.word	0x200015ac
 800d6f8:	200015a0 	.word	0x200015a0
 800d6fc:	200010c8 	.word	0x200010c8
 800d700:	200010c4 	.word	0x200010c4
 800d704:	20000124 	.word	0x20000124

0800d708 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10b      	bne.n	800d730 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	60fb      	str	r3, [r7, #12]
}
 800d72a:	bf00      	nop
 800d72c:	bf00      	nop
 800d72e:	e7fd      	b.n	800d72c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d730:	4b07      	ldr	r3, [pc, #28]	@ (800d750 <vTaskPlaceOnEventList+0x48>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	3318      	adds	r3, #24
 800d736:	4619      	mov	r1, r3
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7fe fe48 	bl	800c3ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d73e:	2101      	movs	r1, #1
 800d740:	6838      	ldr	r0, [r7, #0]
 800d742:	f000 fa87 	bl	800dc54 <prvAddCurrentTaskToDelayedList>
}
 800d746:	bf00      	nop
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	200010c4 	.word	0x200010c4

0800d754 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d754:	b580      	push	{r7, lr}
 800d756:	b086      	sub	sp, #24
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d10b      	bne.n	800d77e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d76a:	f383 8811 	msr	BASEPRI, r3
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f3bf 8f4f 	dsb	sy
 800d776:	617b      	str	r3, [r7, #20]
}
 800d778:	bf00      	nop
 800d77a:	bf00      	nop
 800d77c:	e7fd      	b.n	800d77a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d77e:	4b0a      	ldr	r3, [pc, #40]	@ (800d7a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	3318      	adds	r3, #24
 800d784:	4619      	mov	r1, r3
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f7fe fdfd 	bl	800c386 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d002      	beq.n	800d798 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d792:	f04f 33ff 	mov.w	r3, #4294967295
 800d796:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d798:	6879      	ldr	r1, [r7, #4]
 800d79a:	68b8      	ldr	r0, [r7, #8]
 800d79c:	f000 fa5a 	bl	800dc54 <prvAddCurrentTaskToDelayedList>
	}
 800d7a0:	bf00      	nop
 800d7a2:	3718      	adds	r7, #24
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	200010c4 	.word	0x200010c4

0800d7ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b086      	sub	sp, #24
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	68db      	ldr	r3, [r3, #12]
 800d7ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10b      	bne.n	800d7da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c6:	f383 8811 	msr	BASEPRI, r3
 800d7ca:	f3bf 8f6f 	isb	sy
 800d7ce:	f3bf 8f4f 	dsb	sy
 800d7d2:	60fb      	str	r3, [r7, #12]
}
 800d7d4:	bf00      	nop
 800d7d6:	bf00      	nop
 800d7d8:	e7fd      	b.n	800d7d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	3318      	adds	r3, #24
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fe fe2e 	bl	800c440 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7e4:	4b1d      	ldr	r3, [pc, #116]	@ (800d85c <xTaskRemoveFromEventList+0xb0>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d11d      	bne.n	800d828 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	3304      	adds	r3, #4
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7fe fe25 	bl	800c440 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7fa:	4b19      	ldr	r3, [pc, #100]	@ (800d860 <xTaskRemoveFromEventList+0xb4>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d903      	bls.n	800d80a <xTaskRemoveFromEventList+0x5e>
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d806:	4a16      	ldr	r2, [pc, #88]	@ (800d860 <xTaskRemoveFromEventList+0xb4>)
 800d808:	6013      	str	r3, [r2, #0]
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d80e:	4613      	mov	r3, r2
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	4413      	add	r3, r2
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	4a13      	ldr	r2, [pc, #76]	@ (800d864 <xTaskRemoveFromEventList+0xb8>)
 800d818:	441a      	add	r2, r3
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	3304      	adds	r3, #4
 800d81e:	4619      	mov	r1, r3
 800d820:	4610      	mov	r0, r2
 800d822:	f7fe fdb0 	bl	800c386 <vListInsertEnd>
 800d826:	e005      	b.n	800d834 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	3318      	adds	r3, #24
 800d82c:	4619      	mov	r1, r3
 800d82e:	480e      	ldr	r0, [pc, #56]	@ (800d868 <xTaskRemoveFromEventList+0xbc>)
 800d830:	f7fe fda9 	bl	800c386 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d838:	4b0c      	ldr	r3, [pc, #48]	@ (800d86c <xTaskRemoveFromEventList+0xc0>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d83e:	429a      	cmp	r2, r3
 800d840:	d905      	bls.n	800d84e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d842:	2301      	movs	r3, #1
 800d844:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d846:	4b0a      	ldr	r3, [pc, #40]	@ (800d870 <xTaskRemoveFromEventList+0xc4>)
 800d848:	2201      	movs	r2, #1
 800d84a:	601a      	str	r2, [r3, #0]
 800d84c:	e001      	b.n	800d852 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d84e:	2300      	movs	r3, #0
 800d850:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d852:	697b      	ldr	r3, [r7, #20]
}
 800d854:	4618      	mov	r0, r3
 800d856:	3718      	adds	r7, #24
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	200015c0 	.word	0x200015c0
 800d860:	200015a0 	.word	0x200015a0
 800d864:	200010c8 	.word	0x200010c8
 800d868:	20001558 	.word	0x20001558
 800d86c:	200010c4 	.word	0x200010c4
 800d870:	200015ac 	.word	0x200015ac

0800d874 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d87c:	4b06      	ldr	r3, [pc, #24]	@ (800d898 <vTaskInternalSetTimeOutState+0x24>)
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d884:	4b05      	ldr	r3, [pc, #20]	@ (800d89c <vTaskInternalSetTimeOutState+0x28>)
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	605a      	str	r2, [r3, #4]
}
 800d88c:	bf00      	nop
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr
 800d898:	200015b0 	.word	0x200015b0
 800d89c:	2000159c 	.word	0x2000159c

0800d8a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b088      	sub	sp, #32
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d10b      	bne.n	800d8c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b4:	f383 8811 	msr	BASEPRI, r3
 800d8b8:	f3bf 8f6f 	isb	sy
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	613b      	str	r3, [r7, #16]
}
 800d8c2:	bf00      	nop
 800d8c4:	bf00      	nop
 800d8c6:	e7fd      	b.n	800d8c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10b      	bne.n	800d8e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	60fb      	str	r3, [r7, #12]
}
 800d8e0:	bf00      	nop
 800d8e2:	bf00      	nop
 800d8e4:	e7fd      	b.n	800d8e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d8e6:	f000 fe97 	bl	800e618 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d8ea:	4b1d      	ldr	r3, [pc, #116]	@ (800d960 <xTaskCheckForTimeOut+0xc0>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	69ba      	ldr	r2, [r7, #24]
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d902:	d102      	bne.n	800d90a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d904:	2300      	movs	r3, #0
 800d906:	61fb      	str	r3, [r7, #28]
 800d908:	e023      	b.n	800d952 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	4b15      	ldr	r3, [pc, #84]	@ (800d964 <xTaskCheckForTimeOut+0xc4>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	429a      	cmp	r2, r3
 800d914:	d007      	beq.n	800d926 <xTaskCheckForTimeOut+0x86>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	69ba      	ldr	r2, [r7, #24]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d302      	bcc.n	800d926 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d920:	2301      	movs	r3, #1
 800d922:	61fb      	str	r3, [r7, #28]
 800d924:	e015      	b.n	800d952 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	697a      	ldr	r2, [r7, #20]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d20b      	bcs.n	800d948 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	1ad2      	subs	r2, r2, r3
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f7ff ff99 	bl	800d874 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d942:	2300      	movs	r3, #0
 800d944:	61fb      	str	r3, [r7, #28]
 800d946:	e004      	b.n	800d952 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	2200      	movs	r2, #0
 800d94c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d94e:	2301      	movs	r3, #1
 800d950:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d952:	f000 fe93 	bl	800e67c <vPortExitCritical>

	return xReturn;
 800d956:	69fb      	ldr	r3, [r7, #28]
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3720      	adds	r7, #32
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	2000159c 	.word	0x2000159c
 800d964:	200015b0 	.word	0x200015b0

0800d968 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d968:	b480      	push	{r7}
 800d96a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d96c:	4b03      	ldr	r3, [pc, #12]	@ (800d97c <vTaskMissedYield+0x14>)
 800d96e:	2201      	movs	r2, #1
 800d970:	601a      	str	r2, [r3, #0]
}
 800d972:	bf00      	nop
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr
 800d97c:	200015ac 	.word	0x200015ac

0800d980 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d988:	f000 f852 	bl	800da30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d98c:	4b06      	ldr	r3, [pc, #24]	@ (800d9a8 <prvIdleTask+0x28>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2b01      	cmp	r3, #1
 800d992:	d9f9      	bls.n	800d988 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d994:	4b05      	ldr	r3, [pc, #20]	@ (800d9ac <prvIdleTask+0x2c>)
 800d996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d99a:	601a      	str	r2, [r3, #0]
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d9a4:	e7f0      	b.n	800d988 <prvIdleTask+0x8>
 800d9a6:	bf00      	nop
 800d9a8:	200010c8 	.word	0x200010c8
 800d9ac:	e000ed04 	.word	0xe000ed04

0800d9b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	607b      	str	r3, [r7, #4]
 800d9ba:	e00c      	b.n	800d9d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	4613      	mov	r3, r2
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	4413      	add	r3, r2
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	4a12      	ldr	r2, [pc, #72]	@ (800da10 <prvInitialiseTaskLists+0x60>)
 800d9c8:	4413      	add	r3, r2
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fe fcae 	bl	800c32c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	607b      	str	r3, [r7, #4]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2b37      	cmp	r3, #55	@ 0x37
 800d9da:	d9ef      	bls.n	800d9bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9dc:	480d      	ldr	r0, [pc, #52]	@ (800da14 <prvInitialiseTaskLists+0x64>)
 800d9de:	f7fe fca5 	bl	800c32c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9e2:	480d      	ldr	r0, [pc, #52]	@ (800da18 <prvInitialiseTaskLists+0x68>)
 800d9e4:	f7fe fca2 	bl	800c32c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9e8:	480c      	ldr	r0, [pc, #48]	@ (800da1c <prvInitialiseTaskLists+0x6c>)
 800d9ea:	f7fe fc9f 	bl	800c32c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9ee:	480c      	ldr	r0, [pc, #48]	@ (800da20 <prvInitialiseTaskLists+0x70>)
 800d9f0:	f7fe fc9c 	bl	800c32c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9f4:	480b      	ldr	r0, [pc, #44]	@ (800da24 <prvInitialiseTaskLists+0x74>)
 800d9f6:	f7fe fc99 	bl	800c32c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9fa:	4b0b      	ldr	r3, [pc, #44]	@ (800da28 <prvInitialiseTaskLists+0x78>)
 800d9fc:	4a05      	ldr	r2, [pc, #20]	@ (800da14 <prvInitialiseTaskLists+0x64>)
 800d9fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da00:	4b0a      	ldr	r3, [pc, #40]	@ (800da2c <prvInitialiseTaskLists+0x7c>)
 800da02:	4a05      	ldr	r2, [pc, #20]	@ (800da18 <prvInitialiseTaskLists+0x68>)
 800da04:	601a      	str	r2, [r3, #0]
}
 800da06:	bf00      	nop
 800da08:	3708      	adds	r7, #8
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	200010c8 	.word	0x200010c8
 800da14:	20001528 	.word	0x20001528
 800da18:	2000153c 	.word	0x2000153c
 800da1c:	20001558 	.word	0x20001558
 800da20:	2000156c 	.word	0x2000156c
 800da24:	20001584 	.word	0x20001584
 800da28:	20001550 	.word	0x20001550
 800da2c:	20001554 	.word	0x20001554

0800da30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da36:	e019      	b.n	800da6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da38:	f000 fdee 	bl	800e618 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da3c:	4b10      	ldr	r3, [pc, #64]	@ (800da80 <prvCheckTasksWaitingTermination+0x50>)
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	3304      	adds	r3, #4
 800da48:	4618      	mov	r0, r3
 800da4a:	f7fe fcf9 	bl	800c440 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da4e:	4b0d      	ldr	r3, [pc, #52]	@ (800da84 <prvCheckTasksWaitingTermination+0x54>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	3b01      	subs	r3, #1
 800da54:	4a0b      	ldr	r2, [pc, #44]	@ (800da84 <prvCheckTasksWaitingTermination+0x54>)
 800da56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da58:	4b0b      	ldr	r3, [pc, #44]	@ (800da88 <prvCheckTasksWaitingTermination+0x58>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	3b01      	subs	r3, #1
 800da5e:	4a0a      	ldr	r2, [pc, #40]	@ (800da88 <prvCheckTasksWaitingTermination+0x58>)
 800da60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da62:	f000 fe0b 	bl	800e67c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 f810 	bl	800da8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da6c:	4b06      	ldr	r3, [pc, #24]	@ (800da88 <prvCheckTasksWaitingTermination+0x58>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d1e1      	bne.n	800da38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da74:	bf00      	nop
 800da76:	bf00      	nop
 800da78:	3708      	adds	r7, #8
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	2000156c 	.word	0x2000156c
 800da84:	20001598 	.word	0x20001598
 800da88:	20001580 	.word	0x20001580

0800da8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	3354      	adds	r3, #84	@ 0x54
 800da98:	4618      	mov	r0, r3
 800da9a:	f002 fca7 	bl	80103ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d108      	bne.n	800daba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daac:	4618      	mov	r0, r3
 800daae:	f000 ffa3 	bl	800e9f8 <vPortFree>
				vPortFree( pxTCB );
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 ffa0 	bl	800e9f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dab8:	e019      	b.n	800daee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d103      	bne.n	800dacc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 ff97 	bl	800e9f8 <vPortFree>
	}
 800daca:	e010      	b.n	800daee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	d00b      	beq.n	800daee <prvDeleteTCB+0x62>
	__asm volatile
 800dad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dada:	f383 8811 	msr	BASEPRI, r3
 800dade:	f3bf 8f6f 	isb	sy
 800dae2:	f3bf 8f4f 	dsb	sy
 800dae6:	60fb      	str	r3, [r7, #12]
}
 800dae8:	bf00      	nop
 800daea:	bf00      	nop
 800daec:	e7fd      	b.n	800daea <prvDeleteTCB+0x5e>
	}
 800daee:	bf00      	nop
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
	...

0800daf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800daf8:	b480      	push	{r7}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dafe:	4b0c      	ldr	r3, [pc, #48]	@ (800db30 <prvResetNextTaskUnblockTime+0x38>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d104      	bne.n	800db12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800db08:	4b0a      	ldr	r3, [pc, #40]	@ (800db34 <prvResetNextTaskUnblockTime+0x3c>)
 800db0a:	f04f 32ff 	mov.w	r2, #4294967295
 800db0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db10:	e008      	b.n	800db24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db12:	4b07      	ldr	r3, [pc, #28]	@ (800db30 <prvResetNextTaskUnblockTime+0x38>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	4a04      	ldr	r2, [pc, #16]	@ (800db34 <prvResetNextTaskUnblockTime+0x3c>)
 800db22:	6013      	str	r3, [r2, #0]
}
 800db24:	bf00      	nop
 800db26:	370c      	adds	r7, #12
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr
 800db30:	20001550 	.word	0x20001550
 800db34:	200015b8 	.word	0x200015b8

0800db38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db3e:	4b0b      	ldr	r3, [pc, #44]	@ (800db6c <xTaskGetSchedulerState+0x34>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d102      	bne.n	800db4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db46:	2301      	movs	r3, #1
 800db48:	607b      	str	r3, [r7, #4]
 800db4a:	e008      	b.n	800db5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db4c:	4b08      	ldr	r3, [pc, #32]	@ (800db70 <xTaskGetSchedulerState+0x38>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d102      	bne.n	800db5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db54:	2302      	movs	r3, #2
 800db56:	607b      	str	r3, [r7, #4]
 800db58:	e001      	b.n	800db5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db5a:	2300      	movs	r3, #0
 800db5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db5e:	687b      	ldr	r3, [r7, #4]
	}
 800db60:	4618      	mov	r0, r3
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr
 800db6c:	200015a4 	.word	0x200015a4
 800db70:	200015c0 	.word	0x200015c0

0800db74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db80:	2300      	movs	r3, #0
 800db82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d058      	beq.n	800dc3c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db8a:	4b2f      	ldr	r3, [pc, #188]	@ (800dc48 <xTaskPriorityDisinherit+0xd4>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	693a      	ldr	r2, [r7, #16]
 800db90:	429a      	cmp	r2, r3
 800db92:	d00b      	beq.n	800dbac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800db94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db98:	f383 8811 	msr	BASEPRI, r3
 800db9c:	f3bf 8f6f 	isb	sy
 800dba0:	f3bf 8f4f 	dsb	sy
 800dba4:	60fb      	str	r3, [r7, #12]
}
 800dba6:	bf00      	nop
 800dba8:	bf00      	nop
 800dbaa:	e7fd      	b.n	800dba8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d10b      	bne.n	800dbcc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb8:	f383 8811 	msr	BASEPRI, r3
 800dbbc:	f3bf 8f6f 	isb	sy
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	60bb      	str	r3, [r7, #8]
}
 800dbc6:	bf00      	nop
 800dbc8:	bf00      	nop
 800dbca:	e7fd      	b.n	800dbc8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbd0:	1e5a      	subs	r2, r3, #1
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d02c      	beq.n	800dc3c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d128      	bne.n	800dc3c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	3304      	adds	r3, #4
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fe fc26 	bl	800c440 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc0c:	4b0f      	ldr	r3, [pc, #60]	@ (800dc4c <xTaskPriorityDisinherit+0xd8>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d903      	bls.n	800dc1c <xTaskPriorityDisinherit+0xa8>
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc18:	4a0c      	ldr	r2, [pc, #48]	@ (800dc4c <xTaskPriorityDisinherit+0xd8>)
 800dc1a:	6013      	str	r3, [r2, #0]
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc20:	4613      	mov	r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	4413      	add	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4a09      	ldr	r2, [pc, #36]	@ (800dc50 <xTaskPriorityDisinherit+0xdc>)
 800dc2a:	441a      	add	r2, r3
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	3304      	adds	r3, #4
 800dc30:	4619      	mov	r1, r3
 800dc32:	4610      	mov	r0, r2
 800dc34:	f7fe fba7 	bl	800c386 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc3c:	697b      	ldr	r3, [r7, #20]
	}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	200010c4 	.word	0x200010c4
 800dc4c:	200015a0 	.word	0x200015a0
 800dc50:	200010c8 	.word	0x200010c8

0800dc54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc5e:	4b21      	ldr	r3, [pc, #132]	@ (800dce4 <prvAddCurrentTaskToDelayedList+0x90>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc64:	4b20      	ldr	r3, [pc, #128]	@ (800dce8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	3304      	adds	r3, #4
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fe fbe8 	bl	800c440 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc76:	d10a      	bne.n	800dc8e <prvAddCurrentTaskToDelayedList+0x3a>
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d007      	beq.n	800dc8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc7e:	4b1a      	ldr	r3, [pc, #104]	@ (800dce8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	3304      	adds	r3, #4
 800dc84:	4619      	mov	r1, r3
 800dc86:	4819      	ldr	r0, [pc, #100]	@ (800dcec <prvAddCurrentTaskToDelayedList+0x98>)
 800dc88:	f7fe fb7d 	bl	800c386 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc8c:	e026      	b.n	800dcdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	4413      	add	r3, r2
 800dc94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc96:	4b14      	ldr	r3, [pc, #80]	@ (800dce8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	68ba      	ldr	r2, [r7, #8]
 800dc9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d209      	bcs.n	800dcba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dca6:	4b12      	ldr	r3, [pc, #72]	@ (800dcf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	4b0f      	ldr	r3, [pc, #60]	@ (800dce8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	3304      	adds	r3, #4
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	4610      	mov	r0, r2
 800dcb4:	f7fe fb8b 	bl	800c3ce <vListInsert>
}
 800dcb8:	e010      	b.n	800dcdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcba:	4b0e      	ldr	r3, [pc, #56]	@ (800dcf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	4b0a      	ldr	r3, [pc, #40]	@ (800dce8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	4610      	mov	r0, r2
 800dcc8:	f7fe fb81 	bl	800c3ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dccc:	4b0a      	ldr	r3, [pc, #40]	@ (800dcf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d202      	bcs.n	800dcdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dcd6:	4a08      	ldr	r2, [pc, #32]	@ (800dcf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	6013      	str	r3, [r2, #0]
}
 800dcdc:	bf00      	nop
 800dcde:	3710      	adds	r7, #16
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	2000159c 	.word	0x2000159c
 800dce8:	200010c4 	.word	0x200010c4
 800dcec:	20001584 	.word	0x20001584
 800dcf0:	20001554 	.word	0x20001554
 800dcf4:	20001550 	.word	0x20001550
 800dcf8:	200015b8 	.word	0x200015b8

0800dcfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b08a      	sub	sp, #40	@ 0x28
 800dd00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dd02:	2300      	movs	r3, #0
 800dd04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dd06:	f000 fb13 	bl	800e330 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dd0a:	4b1d      	ldr	r3, [pc, #116]	@ (800dd80 <xTimerCreateTimerTask+0x84>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d021      	beq.n	800dd56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dd12:	2300      	movs	r3, #0
 800dd14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dd16:	2300      	movs	r3, #0
 800dd18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dd1a:	1d3a      	adds	r2, r7, #4
 800dd1c:	f107 0108 	add.w	r1, r7, #8
 800dd20:	f107 030c 	add.w	r3, r7, #12
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7fe fae7 	bl	800c2f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dd2a:	6879      	ldr	r1, [r7, #4]
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	68fa      	ldr	r2, [r7, #12]
 800dd30:	9202      	str	r2, [sp, #8]
 800dd32:	9301      	str	r3, [sp, #4]
 800dd34:	2302      	movs	r3, #2
 800dd36:	9300      	str	r3, [sp, #0]
 800dd38:	2300      	movs	r3, #0
 800dd3a:	460a      	mov	r2, r1
 800dd3c:	4911      	ldr	r1, [pc, #68]	@ (800dd84 <xTimerCreateTimerTask+0x88>)
 800dd3e:	4812      	ldr	r0, [pc, #72]	@ (800dd88 <xTimerCreateTimerTask+0x8c>)
 800dd40:	f7ff f8a2 	bl	800ce88 <xTaskCreateStatic>
 800dd44:	4603      	mov	r3, r0
 800dd46:	4a11      	ldr	r2, [pc, #68]	@ (800dd8c <xTimerCreateTimerTask+0x90>)
 800dd48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dd4a:	4b10      	ldr	r3, [pc, #64]	@ (800dd8c <xTimerCreateTimerTask+0x90>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d001      	beq.n	800dd56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dd52:	2301      	movs	r3, #1
 800dd54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d10b      	bne.n	800dd74 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dd5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd60:	f383 8811 	msr	BASEPRI, r3
 800dd64:	f3bf 8f6f 	isb	sy
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	613b      	str	r3, [r7, #16]
}
 800dd6e:	bf00      	nop
 800dd70:	bf00      	nop
 800dd72:	e7fd      	b.n	800dd70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dd74:	697b      	ldr	r3, [r7, #20]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3718      	adds	r7, #24
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	200015f4 	.word	0x200015f4
 800dd84:	08012324 	.word	0x08012324
 800dd88:	0800dec9 	.word	0x0800dec9
 800dd8c:	200015f8 	.word	0x200015f8

0800dd90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b08a      	sub	sp, #40	@ 0x28
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	607a      	str	r2, [r7, #4]
 800dd9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d10b      	bne.n	800ddc0 <xTimerGenericCommand+0x30>
	__asm volatile
 800dda8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddac:	f383 8811 	msr	BASEPRI, r3
 800ddb0:	f3bf 8f6f 	isb	sy
 800ddb4:	f3bf 8f4f 	dsb	sy
 800ddb8:	623b      	str	r3, [r7, #32]
}
 800ddba:	bf00      	nop
 800ddbc:	bf00      	nop
 800ddbe:	e7fd      	b.n	800ddbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ddc0:	4b19      	ldr	r3, [pc, #100]	@ (800de28 <xTimerGenericCommand+0x98>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d02a      	beq.n	800de1e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	2b05      	cmp	r3, #5
 800ddd8:	dc18      	bgt.n	800de0c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ddda:	f7ff fead 	bl	800db38 <xTaskGetSchedulerState>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b02      	cmp	r3, #2
 800dde2:	d109      	bne.n	800ddf8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dde4:	4b10      	ldr	r3, [pc, #64]	@ (800de28 <xTimerGenericCommand+0x98>)
 800dde6:	6818      	ldr	r0, [r3, #0]
 800dde8:	f107 0110 	add.w	r1, r7, #16
 800ddec:	2300      	movs	r3, #0
 800ddee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddf0:	f7fe fc5a 	bl	800c6a8 <xQueueGenericSend>
 800ddf4:	6278      	str	r0, [r7, #36]	@ 0x24
 800ddf6:	e012      	b.n	800de1e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ddf8:	4b0b      	ldr	r3, [pc, #44]	@ (800de28 <xTimerGenericCommand+0x98>)
 800ddfa:	6818      	ldr	r0, [r3, #0]
 800ddfc:	f107 0110 	add.w	r1, r7, #16
 800de00:	2300      	movs	r3, #0
 800de02:	2200      	movs	r2, #0
 800de04:	f7fe fc50 	bl	800c6a8 <xQueueGenericSend>
 800de08:	6278      	str	r0, [r7, #36]	@ 0x24
 800de0a:	e008      	b.n	800de1e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800de0c:	4b06      	ldr	r3, [pc, #24]	@ (800de28 <xTimerGenericCommand+0x98>)
 800de0e:	6818      	ldr	r0, [r3, #0]
 800de10:	f107 0110 	add.w	r1, r7, #16
 800de14:	2300      	movs	r3, #0
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	f7fe fd48 	bl	800c8ac <xQueueGenericSendFromISR>
 800de1c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800de1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800de20:	4618      	mov	r0, r3
 800de22:	3728      	adds	r7, #40	@ 0x28
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	200015f4 	.word	0x200015f4

0800de2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b088      	sub	sp, #32
 800de30:	af02      	add	r7, sp, #8
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de36:	4b23      	ldr	r3, [pc, #140]	@ (800dec4 <prvProcessExpiredTimer+0x98>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	3304      	adds	r3, #4
 800de44:	4618      	mov	r0, r3
 800de46:	f7fe fafb 	bl	800c440 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de50:	f003 0304 	and.w	r3, r3, #4
 800de54:	2b00      	cmp	r3, #0
 800de56:	d023      	beq.n	800dea0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	699a      	ldr	r2, [r3, #24]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	18d1      	adds	r1, r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	6978      	ldr	r0, [r7, #20]
 800de66:	f000 f8d5 	bl	800e014 <prvInsertTimerInActiveList>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d020      	beq.n	800deb2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de70:	2300      	movs	r3, #0
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	2300      	movs	r3, #0
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	2100      	movs	r1, #0
 800de7a:	6978      	ldr	r0, [r7, #20]
 800de7c:	f7ff ff88 	bl	800dd90 <xTimerGenericCommand>
 800de80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d114      	bne.n	800deb2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800de88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8c:	f383 8811 	msr	BASEPRI, r3
 800de90:	f3bf 8f6f 	isb	sy
 800de94:	f3bf 8f4f 	dsb	sy
 800de98:	60fb      	str	r3, [r7, #12]
}
 800de9a:	bf00      	nop
 800de9c:	bf00      	nop
 800de9e:	e7fd      	b.n	800de9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dea6:	f023 0301 	bic.w	r3, r3, #1
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	6a1b      	ldr	r3, [r3, #32]
 800deb6:	6978      	ldr	r0, [r7, #20]
 800deb8:	4798      	blx	r3
}
 800deba:	bf00      	nop
 800debc:	3718      	adds	r7, #24
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	200015ec 	.word	0x200015ec

0800dec8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ded0:	f107 0308 	add.w	r3, r7, #8
 800ded4:	4618      	mov	r0, r3
 800ded6:	f000 f859 	bl	800df8c <prvGetNextExpireTime>
 800deda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	4619      	mov	r1, r3
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f000 f805 	bl	800def0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dee6:	f000 f8d7 	bl	800e098 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800deea:	bf00      	nop
 800deec:	e7f0      	b.n	800ded0 <prvTimerTask+0x8>
	...

0800def0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800defa:	f7ff fa29 	bl	800d350 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800defe:	f107 0308 	add.w	r3, r7, #8
 800df02:	4618      	mov	r0, r3
 800df04:	f000 f866 	bl	800dfd4 <prvSampleTimeNow>
 800df08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d130      	bne.n	800df72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d10a      	bne.n	800df2c <prvProcessTimerOrBlockTask+0x3c>
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d806      	bhi.n	800df2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800df1e:	f7ff fa25 	bl	800d36c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800df22:	68f9      	ldr	r1, [r7, #12]
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f7ff ff81 	bl	800de2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800df2a:	e024      	b.n	800df76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d008      	beq.n	800df44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800df32:	4b13      	ldr	r3, [pc, #76]	@ (800df80 <prvProcessTimerOrBlockTask+0x90>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d101      	bne.n	800df40 <prvProcessTimerOrBlockTask+0x50>
 800df3c:	2301      	movs	r3, #1
 800df3e:	e000      	b.n	800df42 <prvProcessTimerOrBlockTask+0x52>
 800df40:	2300      	movs	r3, #0
 800df42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df44:	4b0f      	ldr	r3, [pc, #60]	@ (800df84 <prvProcessTimerOrBlockTask+0x94>)
 800df46:	6818      	ldr	r0, [r3, #0]
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	1ad3      	subs	r3, r2, r3
 800df4e:	683a      	ldr	r2, [r7, #0]
 800df50:	4619      	mov	r1, r3
 800df52:	f7fe ff65 	bl	800ce20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df56:	f7ff fa09 	bl	800d36c <xTaskResumeAll>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d10a      	bne.n	800df76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800df60:	4b09      	ldr	r3, [pc, #36]	@ (800df88 <prvProcessTimerOrBlockTask+0x98>)
 800df62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df66:	601a      	str	r2, [r3, #0]
 800df68:	f3bf 8f4f 	dsb	sy
 800df6c:	f3bf 8f6f 	isb	sy
}
 800df70:	e001      	b.n	800df76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800df72:	f7ff f9fb 	bl	800d36c <xTaskResumeAll>
}
 800df76:	bf00      	nop
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	200015f0 	.word	0x200015f0
 800df84:	200015f4 	.word	0x200015f4
 800df88:	e000ed04 	.word	0xe000ed04

0800df8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800df8c:	b480      	push	{r7}
 800df8e:	b085      	sub	sp, #20
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df94:	4b0e      	ldr	r3, [pc, #56]	@ (800dfd0 <prvGetNextExpireTime+0x44>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d101      	bne.n	800dfa2 <prvGetNextExpireTime+0x16>
 800df9e:	2201      	movs	r2, #1
 800dfa0:	e000      	b.n	800dfa4 <prvGetNextExpireTime+0x18>
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d105      	bne.n	800dfbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfb0:	4b07      	ldr	r3, [pc, #28]	@ (800dfd0 <prvGetNextExpireTime+0x44>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	60fb      	str	r3, [r7, #12]
 800dfba:	e001      	b.n	800dfc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3714      	adds	r7, #20
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	200015ec 	.word	0x200015ec

0800dfd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dfdc:	f7ff fa64 	bl	800d4a8 <xTaskGetTickCount>
 800dfe0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dfe2:	4b0b      	ldr	r3, [pc, #44]	@ (800e010 <prvSampleTimeNow+0x3c>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d205      	bcs.n	800dff8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dfec:	f000 f93a 	bl	800e264 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2201      	movs	r2, #1
 800dff4:	601a      	str	r2, [r3, #0]
 800dff6:	e002      	b.n	800dffe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2200      	movs	r2, #0
 800dffc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dffe:	4a04      	ldr	r2, [pc, #16]	@ (800e010 <prvSampleTimeNow+0x3c>)
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e004:	68fb      	ldr	r3, [r7, #12]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	200015fc 	.word	0x200015fc

0800e014 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b086      	sub	sp, #24
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
 800e020:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e022:	2300      	movs	r3, #0
 800e024:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	68ba      	ldr	r2, [r7, #8]
 800e02a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	68fa      	ldr	r2, [r7, #12]
 800e030:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e032:	68ba      	ldr	r2, [r7, #8]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	429a      	cmp	r2, r3
 800e038:	d812      	bhi.n	800e060 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	1ad2      	subs	r2, r2, r3
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	699b      	ldr	r3, [r3, #24]
 800e044:	429a      	cmp	r2, r3
 800e046:	d302      	bcc.n	800e04e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e048:	2301      	movs	r3, #1
 800e04a:	617b      	str	r3, [r7, #20]
 800e04c:	e01b      	b.n	800e086 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e04e:	4b10      	ldr	r3, [pc, #64]	@ (800e090 <prvInsertTimerInActiveList+0x7c>)
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	3304      	adds	r3, #4
 800e056:	4619      	mov	r1, r3
 800e058:	4610      	mov	r0, r2
 800e05a:	f7fe f9b8 	bl	800c3ce <vListInsert>
 800e05e:	e012      	b.n	800e086 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	429a      	cmp	r2, r3
 800e066:	d206      	bcs.n	800e076 <prvInsertTimerInActiveList+0x62>
 800e068:	68ba      	ldr	r2, [r7, #8]
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d302      	bcc.n	800e076 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e070:	2301      	movs	r3, #1
 800e072:	617b      	str	r3, [r7, #20]
 800e074:	e007      	b.n	800e086 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e076:	4b07      	ldr	r3, [pc, #28]	@ (800e094 <prvInsertTimerInActiveList+0x80>)
 800e078:	681a      	ldr	r2, [r3, #0]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	3304      	adds	r3, #4
 800e07e:	4619      	mov	r1, r3
 800e080:	4610      	mov	r0, r2
 800e082:	f7fe f9a4 	bl	800c3ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e086:	697b      	ldr	r3, [r7, #20]
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3718      	adds	r7, #24
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	200015f0 	.word	0x200015f0
 800e094:	200015ec 	.word	0x200015ec

0800e098 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b08e      	sub	sp, #56	@ 0x38
 800e09c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e09e:	e0ce      	b.n	800e23e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	da19      	bge.n	800e0da <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e0a6:	1d3b      	adds	r3, r7, #4
 800e0a8:	3304      	adds	r3, #4
 800e0aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10b      	bne.n	800e0ca <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b6:	f383 8811 	msr	BASEPRI, r3
 800e0ba:	f3bf 8f6f 	isb	sy
 800e0be:	f3bf 8f4f 	dsb	sy
 800e0c2:	61fb      	str	r3, [r7, #28]
}
 800e0c4:	bf00      	nop
 800e0c6:	bf00      	nop
 800e0c8:	e7fd      	b.n	800e0c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0d0:	6850      	ldr	r0, [r2, #4]
 800e0d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0d4:	6892      	ldr	r2, [r2, #8]
 800e0d6:	4611      	mov	r1, r2
 800e0d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	f2c0 80ae 	blt.w	800e23e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0e8:	695b      	ldr	r3, [r3, #20]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d004      	beq.n	800e0f8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0f0:	3304      	adds	r3, #4
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fe f9a4 	bl	800c440 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0f8:	463b      	mov	r3, r7
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7ff ff6a 	bl	800dfd4 <prvSampleTimeNow>
 800e100:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b09      	cmp	r3, #9
 800e106:	f200 8097 	bhi.w	800e238 <prvProcessReceivedCommands+0x1a0>
 800e10a:	a201      	add	r2, pc, #4	@ (adr r2, 800e110 <prvProcessReceivedCommands+0x78>)
 800e10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e110:	0800e139 	.word	0x0800e139
 800e114:	0800e139 	.word	0x0800e139
 800e118:	0800e139 	.word	0x0800e139
 800e11c:	0800e1af 	.word	0x0800e1af
 800e120:	0800e1c3 	.word	0x0800e1c3
 800e124:	0800e20f 	.word	0x0800e20f
 800e128:	0800e139 	.word	0x0800e139
 800e12c:	0800e139 	.word	0x0800e139
 800e130:	0800e1af 	.word	0x0800e1af
 800e134:	0800e1c3 	.word	0x0800e1c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e13a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e13e:	f043 0301 	orr.w	r3, r3, #1
 800e142:	b2da      	uxtb	r2, r3
 800e144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e146:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e14a:	68ba      	ldr	r2, [r7, #8]
 800e14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e14e:	699b      	ldr	r3, [r3, #24]
 800e150:	18d1      	adds	r1, r2, r3
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e158:	f7ff ff5c 	bl	800e014 <prvInsertTimerInActiveList>
 800e15c:	4603      	mov	r3, r0
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d06c      	beq.n	800e23c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e164:	6a1b      	ldr	r3, [r3, #32]
 800e166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e168:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e16c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e170:	f003 0304 	and.w	r3, r3, #4
 800e174:	2b00      	cmp	r3, #0
 800e176:	d061      	beq.n	800e23c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e178:	68ba      	ldr	r2, [r7, #8]
 800e17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e17c:	699b      	ldr	r3, [r3, #24]
 800e17e:	441a      	add	r2, r3
 800e180:	2300      	movs	r3, #0
 800e182:	9300      	str	r3, [sp, #0]
 800e184:	2300      	movs	r3, #0
 800e186:	2100      	movs	r1, #0
 800e188:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e18a:	f7ff fe01 	bl	800dd90 <xTimerGenericCommand>
 800e18e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e190:	6a3b      	ldr	r3, [r7, #32]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d152      	bne.n	800e23c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e19a:	f383 8811 	msr	BASEPRI, r3
 800e19e:	f3bf 8f6f 	isb	sy
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	61bb      	str	r3, [r7, #24]
}
 800e1a8:	bf00      	nop
 800e1aa:	bf00      	nop
 800e1ac:	e7fd      	b.n	800e1aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1b4:	f023 0301 	bic.w	r3, r3, #1
 800e1b8:	b2da      	uxtb	r2, r3
 800e1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e1c0:	e03d      	b.n	800e23e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1c8:	f043 0301 	orr.w	r3, r3, #1
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e1d4:	68ba      	ldr	r2, [r7, #8]
 800e1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1dc:	699b      	ldr	r3, [r3, #24]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d10b      	bne.n	800e1fa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e6:	f383 8811 	msr	BASEPRI, r3
 800e1ea:	f3bf 8f6f 	isb	sy
 800e1ee:	f3bf 8f4f 	dsb	sy
 800e1f2:	617b      	str	r3, [r7, #20]
}
 800e1f4:	bf00      	nop
 800e1f6:	bf00      	nop
 800e1f8:	e7fd      	b.n	800e1f6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1fc:	699a      	ldr	r2, [r3, #24]
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e200:	18d1      	adds	r1, r2, r3
 800e202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e208:	f7ff ff04 	bl	800e014 <prvInsertTimerInActiveList>
					break;
 800e20c:	e017      	b.n	800e23e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e214:	f003 0302 	and.w	r3, r3, #2
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d103      	bne.n	800e224 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e21c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e21e:	f000 fbeb 	bl	800e9f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e222:	e00c      	b.n	800e23e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e226:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e22a:	f023 0301 	bic.w	r3, r3, #1
 800e22e:	b2da      	uxtb	r2, r3
 800e230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e232:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e236:	e002      	b.n	800e23e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e238:	bf00      	nop
 800e23a:	e000      	b.n	800e23e <prvProcessReceivedCommands+0x1a6>
					break;
 800e23c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e23e:	4b08      	ldr	r3, [pc, #32]	@ (800e260 <prvProcessReceivedCommands+0x1c8>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	1d39      	adds	r1, r7, #4
 800e244:	2200      	movs	r2, #0
 800e246:	4618      	mov	r0, r3
 800e248:	f7fe fbce 	bl	800c9e8 <xQueueReceive>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	f47f af26 	bne.w	800e0a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e254:	bf00      	nop
 800e256:	bf00      	nop
 800e258:	3730      	adds	r7, #48	@ 0x30
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	200015f4 	.word	0x200015f4

0800e264 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b088      	sub	sp, #32
 800e268:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e26a:	e049      	b.n	800e300 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e26c:	4b2e      	ldr	r3, [pc, #184]	@ (800e328 <prvSwitchTimerLists+0xc4>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e276:	4b2c      	ldr	r3, [pc, #176]	@ (800e328 <prvSwitchTimerLists+0xc4>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	3304      	adds	r3, #4
 800e284:	4618      	mov	r0, r3
 800e286:	f7fe f8db 	bl	800c440 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	6a1b      	ldr	r3, [r3, #32]
 800e28e:	68f8      	ldr	r0, [r7, #12]
 800e290:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e298:	f003 0304 	and.w	r3, r3, #4
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d02f      	beq.n	800e300 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	699b      	ldr	r3, [r3, #24]
 800e2a4:	693a      	ldr	r2, [r7, #16]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e2aa:	68ba      	ldr	r2, [r7, #8]
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d90e      	bls.n	800e2d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	68ba      	ldr	r2, [r7, #8]
 800e2b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	68fa      	ldr	r2, [r7, #12]
 800e2bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e2be:	4b1a      	ldr	r3, [pc, #104]	@ (800e328 <prvSwitchTimerLists+0xc4>)
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	3304      	adds	r3, #4
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	4610      	mov	r0, r2
 800e2ca:	f7fe f880 	bl	800c3ce <vListInsert>
 800e2ce:	e017      	b.n	800e300 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	693a      	ldr	r2, [r7, #16]
 800e2d8:	2100      	movs	r1, #0
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f7ff fd58 	bl	800dd90 <xTimerGenericCommand>
 800e2e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d10b      	bne.n	800e300 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ec:	f383 8811 	msr	BASEPRI, r3
 800e2f0:	f3bf 8f6f 	isb	sy
 800e2f4:	f3bf 8f4f 	dsb	sy
 800e2f8:	603b      	str	r3, [r7, #0]
}
 800e2fa:	bf00      	nop
 800e2fc:	bf00      	nop
 800e2fe:	e7fd      	b.n	800e2fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e300:	4b09      	ldr	r3, [pc, #36]	@ (800e328 <prvSwitchTimerLists+0xc4>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1b0      	bne.n	800e26c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e30a:	4b07      	ldr	r3, [pc, #28]	@ (800e328 <prvSwitchTimerLists+0xc4>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e310:	4b06      	ldr	r3, [pc, #24]	@ (800e32c <prvSwitchTimerLists+0xc8>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a04      	ldr	r2, [pc, #16]	@ (800e328 <prvSwitchTimerLists+0xc4>)
 800e316:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e318:	4a04      	ldr	r2, [pc, #16]	@ (800e32c <prvSwitchTimerLists+0xc8>)
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	6013      	str	r3, [r2, #0]
}
 800e31e:	bf00      	nop
 800e320:	3718      	adds	r7, #24
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	200015ec 	.word	0x200015ec
 800e32c:	200015f0 	.word	0x200015f0

0800e330 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e336:	f000 f96f 	bl	800e618 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e33a:	4b15      	ldr	r3, [pc, #84]	@ (800e390 <prvCheckForValidListAndQueue+0x60>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d120      	bne.n	800e384 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e342:	4814      	ldr	r0, [pc, #80]	@ (800e394 <prvCheckForValidListAndQueue+0x64>)
 800e344:	f7fd fff2 	bl	800c32c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e348:	4813      	ldr	r0, [pc, #76]	@ (800e398 <prvCheckForValidListAndQueue+0x68>)
 800e34a:	f7fd ffef 	bl	800c32c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e34e:	4b13      	ldr	r3, [pc, #76]	@ (800e39c <prvCheckForValidListAndQueue+0x6c>)
 800e350:	4a10      	ldr	r2, [pc, #64]	@ (800e394 <prvCheckForValidListAndQueue+0x64>)
 800e352:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e354:	4b12      	ldr	r3, [pc, #72]	@ (800e3a0 <prvCheckForValidListAndQueue+0x70>)
 800e356:	4a10      	ldr	r2, [pc, #64]	@ (800e398 <prvCheckForValidListAndQueue+0x68>)
 800e358:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e35a:	2300      	movs	r3, #0
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	4b11      	ldr	r3, [pc, #68]	@ (800e3a4 <prvCheckForValidListAndQueue+0x74>)
 800e360:	4a11      	ldr	r2, [pc, #68]	@ (800e3a8 <prvCheckForValidListAndQueue+0x78>)
 800e362:	2110      	movs	r1, #16
 800e364:	200a      	movs	r0, #10
 800e366:	f7fe f8ff 	bl	800c568 <xQueueGenericCreateStatic>
 800e36a:	4603      	mov	r3, r0
 800e36c:	4a08      	ldr	r2, [pc, #32]	@ (800e390 <prvCheckForValidListAndQueue+0x60>)
 800e36e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e370:	4b07      	ldr	r3, [pc, #28]	@ (800e390 <prvCheckForValidListAndQueue+0x60>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d005      	beq.n	800e384 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e378:	4b05      	ldr	r3, [pc, #20]	@ (800e390 <prvCheckForValidListAndQueue+0x60>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	490b      	ldr	r1, [pc, #44]	@ (800e3ac <prvCheckForValidListAndQueue+0x7c>)
 800e37e:	4618      	mov	r0, r3
 800e380:	f7fe fd24 	bl	800cdcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e384:	f000 f97a 	bl	800e67c <vPortExitCritical>
}
 800e388:	bf00      	nop
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	200015f4 	.word	0x200015f4
 800e394:	200015c4 	.word	0x200015c4
 800e398:	200015d8 	.word	0x200015d8
 800e39c:	200015ec 	.word	0x200015ec
 800e3a0:	200015f0 	.word	0x200015f0
 800e3a4:	200016a0 	.word	0x200016a0
 800e3a8:	20001600 	.word	0x20001600
 800e3ac:	0801232c 	.word	0x0801232c

0800e3b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b085      	sub	sp, #20
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	3b04      	subs	r3, #4
 800e3c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e3c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	3b04      	subs	r3, #4
 800e3ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	f023 0201 	bic.w	r2, r3, #1
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	3b04      	subs	r3, #4
 800e3de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3e0:	4a0c      	ldr	r2, [pc, #48]	@ (800e414 <pxPortInitialiseStack+0x64>)
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	3b14      	subs	r3, #20
 800e3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	3b04      	subs	r3, #4
 800e3f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f06f 0202 	mvn.w	r2, #2
 800e3fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	3b20      	subs	r3, #32
 800e404:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e406:	68fb      	ldr	r3, [r7, #12]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3714      	adds	r7, #20
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr
 800e414:	0800e419 	.word	0x0800e419

0800e418 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e41e:	2300      	movs	r3, #0
 800e420:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e422:	4b13      	ldr	r3, [pc, #76]	@ (800e470 <prvTaskExitError+0x58>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e42a:	d00b      	beq.n	800e444 <prvTaskExitError+0x2c>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e430:	f383 8811 	msr	BASEPRI, r3
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	60fb      	str	r3, [r7, #12]
}
 800e43e:	bf00      	nop
 800e440:	bf00      	nop
 800e442:	e7fd      	b.n	800e440 <prvTaskExitError+0x28>
	__asm volatile
 800e444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	60bb      	str	r3, [r7, #8]
}
 800e456:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e458:	bf00      	nop
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d0fc      	beq.n	800e45a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e460:	bf00      	nop
 800e462:	bf00      	nop
 800e464:	3714      	adds	r7, #20
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop
 800e470:	20000098 	.word	0x20000098
	...

0800e480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e480:	4b07      	ldr	r3, [pc, #28]	@ (800e4a0 <pxCurrentTCBConst2>)
 800e482:	6819      	ldr	r1, [r3, #0]
 800e484:	6808      	ldr	r0, [r1, #0]
 800e486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e48a:	f380 8809 	msr	PSP, r0
 800e48e:	f3bf 8f6f 	isb	sy
 800e492:	f04f 0000 	mov.w	r0, #0
 800e496:	f380 8811 	msr	BASEPRI, r0
 800e49a:	4770      	bx	lr
 800e49c:	f3af 8000 	nop.w

0800e4a0 <pxCurrentTCBConst2>:
 800e4a0:	200010c4 	.word	0x200010c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e4a4:	bf00      	nop
 800e4a6:	bf00      	nop

0800e4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e4a8:	4808      	ldr	r0, [pc, #32]	@ (800e4cc <prvPortStartFirstTask+0x24>)
 800e4aa:	6800      	ldr	r0, [r0, #0]
 800e4ac:	6800      	ldr	r0, [r0, #0]
 800e4ae:	f380 8808 	msr	MSP, r0
 800e4b2:	f04f 0000 	mov.w	r0, #0
 800e4b6:	f380 8814 	msr	CONTROL, r0
 800e4ba:	b662      	cpsie	i
 800e4bc:	b661      	cpsie	f
 800e4be:	f3bf 8f4f 	dsb	sy
 800e4c2:	f3bf 8f6f 	isb	sy
 800e4c6:	df00      	svc	0
 800e4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e4ca:	bf00      	nop
 800e4cc:	e000ed08 	.word	0xe000ed08

0800e4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b086      	sub	sp, #24
 800e4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e4d6:	4b47      	ldr	r3, [pc, #284]	@ (800e5f4 <xPortStartScheduler+0x124>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4a47      	ldr	r2, [pc, #284]	@ (800e5f8 <xPortStartScheduler+0x128>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d10b      	bne.n	800e4f8 <xPortStartScheduler+0x28>
	__asm volatile
 800e4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4e4:	f383 8811 	msr	BASEPRI, r3
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	613b      	str	r3, [r7, #16]
}
 800e4f2:	bf00      	nop
 800e4f4:	bf00      	nop
 800e4f6:	e7fd      	b.n	800e4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e4f8:	4b3e      	ldr	r3, [pc, #248]	@ (800e5f4 <xPortStartScheduler+0x124>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a3f      	ldr	r2, [pc, #252]	@ (800e5fc <xPortStartScheduler+0x12c>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d10b      	bne.n	800e51a <xPortStartScheduler+0x4a>
	__asm volatile
 800e502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e506:	f383 8811 	msr	BASEPRI, r3
 800e50a:	f3bf 8f6f 	isb	sy
 800e50e:	f3bf 8f4f 	dsb	sy
 800e512:	60fb      	str	r3, [r7, #12]
}
 800e514:	bf00      	nop
 800e516:	bf00      	nop
 800e518:	e7fd      	b.n	800e516 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e51a:	4b39      	ldr	r3, [pc, #228]	@ (800e600 <xPortStartScheduler+0x130>)
 800e51c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	b2db      	uxtb	r3, r3
 800e524:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	22ff      	movs	r2, #255	@ 0xff
 800e52a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	b2db      	uxtb	r3, r3
 800e532:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e534:	78fb      	ldrb	r3, [r7, #3]
 800e536:	b2db      	uxtb	r3, r3
 800e538:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e53c:	b2da      	uxtb	r2, r3
 800e53e:	4b31      	ldr	r3, [pc, #196]	@ (800e604 <xPortStartScheduler+0x134>)
 800e540:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e542:	4b31      	ldr	r3, [pc, #196]	@ (800e608 <xPortStartScheduler+0x138>)
 800e544:	2207      	movs	r2, #7
 800e546:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e548:	e009      	b.n	800e55e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e54a:	4b2f      	ldr	r3, [pc, #188]	@ (800e608 <xPortStartScheduler+0x138>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	3b01      	subs	r3, #1
 800e550:	4a2d      	ldr	r2, [pc, #180]	@ (800e608 <xPortStartScheduler+0x138>)
 800e552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e554:	78fb      	ldrb	r3, [r7, #3]
 800e556:	b2db      	uxtb	r3, r3
 800e558:	005b      	lsls	r3, r3, #1
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e55e:	78fb      	ldrb	r3, [r7, #3]
 800e560:	b2db      	uxtb	r3, r3
 800e562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e566:	2b80      	cmp	r3, #128	@ 0x80
 800e568:	d0ef      	beq.n	800e54a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e56a:	4b27      	ldr	r3, [pc, #156]	@ (800e608 <xPortStartScheduler+0x138>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f1c3 0307 	rsb	r3, r3, #7
 800e572:	2b04      	cmp	r3, #4
 800e574:	d00b      	beq.n	800e58e <xPortStartScheduler+0xbe>
	__asm volatile
 800e576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	60bb      	str	r3, [r7, #8]
}
 800e588:	bf00      	nop
 800e58a:	bf00      	nop
 800e58c:	e7fd      	b.n	800e58a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e58e:	4b1e      	ldr	r3, [pc, #120]	@ (800e608 <xPortStartScheduler+0x138>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	021b      	lsls	r3, r3, #8
 800e594:	4a1c      	ldr	r2, [pc, #112]	@ (800e608 <xPortStartScheduler+0x138>)
 800e596:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e598:	4b1b      	ldr	r3, [pc, #108]	@ (800e608 <xPortStartScheduler+0x138>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e5a0:	4a19      	ldr	r2, [pc, #100]	@ (800e608 <xPortStartScheduler+0x138>)
 800e5a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	b2da      	uxtb	r2, r3
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e5ac:	4b17      	ldr	r3, [pc, #92]	@ (800e60c <xPortStartScheduler+0x13c>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a16      	ldr	r2, [pc, #88]	@ (800e60c <xPortStartScheduler+0x13c>)
 800e5b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e5b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e5b8:	4b14      	ldr	r3, [pc, #80]	@ (800e60c <xPortStartScheduler+0x13c>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a13      	ldr	r2, [pc, #76]	@ (800e60c <xPortStartScheduler+0x13c>)
 800e5be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e5c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e5c4:	f000 f8da 	bl	800e77c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e5c8:	4b11      	ldr	r3, [pc, #68]	@ (800e610 <xPortStartScheduler+0x140>)
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e5ce:	f000 f8f9 	bl	800e7c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e5d2:	4b10      	ldr	r3, [pc, #64]	@ (800e614 <xPortStartScheduler+0x144>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4a0f      	ldr	r2, [pc, #60]	@ (800e614 <xPortStartScheduler+0x144>)
 800e5d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e5dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e5de:	f7ff ff63 	bl	800e4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e5e2:	f7ff f82b 	bl	800d63c <vTaskSwitchContext>
	prvTaskExitError();
 800e5e6:	f7ff ff17 	bl	800e418 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5ea:	2300      	movs	r3, #0
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3718      	adds	r7, #24
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	e000ed00 	.word	0xe000ed00
 800e5f8:	410fc271 	.word	0x410fc271
 800e5fc:	410fc270 	.word	0x410fc270
 800e600:	e000e400 	.word	0xe000e400
 800e604:	200016f0 	.word	0x200016f0
 800e608:	200016f4 	.word	0x200016f4
 800e60c:	e000ed20 	.word	0xe000ed20
 800e610:	20000098 	.word	0x20000098
 800e614:	e000ef34 	.word	0xe000ef34

0800e618 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
	__asm volatile
 800e61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e622:	f383 8811 	msr	BASEPRI, r3
 800e626:	f3bf 8f6f 	isb	sy
 800e62a:	f3bf 8f4f 	dsb	sy
 800e62e:	607b      	str	r3, [r7, #4]
}
 800e630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e632:	4b10      	ldr	r3, [pc, #64]	@ (800e674 <vPortEnterCritical+0x5c>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	3301      	adds	r3, #1
 800e638:	4a0e      	ldr	r2, [pc, #56]	@ (800e674 <vPortEnterCritical+0x5c>)
 800e63a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e63c:	4b0d      	ldr	r3, [pc, #52]	@ (800e674 <vPortEnterCritical+0x5c>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2b01      	cmp	r3, #1
 800e642:	d110      	bne.n	800e666 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e644:	4b0c      	ldr	r3, [pc, #48]	@ (800e678 <vPortEnterCritical+0x60>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00b      	beq.n	800e666 <vPortEnterCritical+0x4e>
	__asm volatile
 800e64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	603b      	str	r3, [r7, #0]
}
 800e660:	bf00      	nop
 800e662:	bf00      	nop
 800e664:	e7fd      	b.n	800e662 <vPortEnterCritical+0x4a>
	}
}
 800e666:	bf00      	nop
 800e668:	370c      	adds	r7, #12
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr
 800e672:	bf00      	nop
 800e674:	20000098 	.word	0x20000098
 800e678:	e000ed04 	.word	0xe000ed04

0800e67c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e682:	4b12      	ldr	r3, [pc, #72]	@ (800e6cc <vPortExitCritical+0x50>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d10b      	bne.n	800e6a2 <vPortExitCritical+0x26>
	__asm volatile
 800e68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e68e:	f383 8811 	msr	BASEPRI, r3
 800e692:	f3bf 8f6f 	isb	sy
 800e696:	f3bf 8f4f 	dsb	sy
 800e69a:	607b      	str	r3, [r7, #4]
}
 800e69c:	bf00      	nop
 800e69e:	bf00      	nop
 800e6a0:	e7fd      	b.n	800e69e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800e6cc <vPortExitCritical+0x50>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	3b01      	subs	r3, #1
 800e6a8:	4a08      	ldr	r2, [pc, #32]	@ (800e6cc <vPortExitCritical+0x50>)
 800e6aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e6ac:	4b07      	ldr	r3, [pc, #28]	@ (800e6cc <vPortExitCritical+0x50>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d105      	bne.n	800e6c0 <vPortExitCritical+0x44>
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	f383 8811 	msr	BASEPRI, r3
}
 800e6be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e6c0:	bf00      	nop
 800e6c2:	370c      	adds	r7, #12
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr
 800e6cc:	20000098 	.word	0x20000098

0800e6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e6d0:	f3ef 8009 	mrs	r0, PSP
 800e6d4:	f3bf 8f6f 	isb	sy
 800e6d8:	4b15      	ldr	r3, [pc, #84]	@ (800e730 <pxCurrentTCBConst>)
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	f01e 0f10 	tst.w	lr, #16
 800e6e0:	bf08      	it	eq
 800e6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ea:	6010      	str	r0, [r2, #0]
 800e6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e6f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e6f4:	f380 8811 	msr	BASEPRI, r0
 800e6f8:	f3bf 8f4f 	dsb	sy
 800e6fc:	f3bf 8f6f 	isb	sy
 800e700:	f7fe ff9c 	bl	800d63c <vTaskSwitchContext>
 800e704:	f04f 0000 	mov.w	r0, #0
 800e708:	f380 8811 	msr	BASEPRI, r0
 800e70c:	bc09      	pop	{r0, r3}
 800e70e:	6819      	ldr	r1, [r3, #0]
 800e710:	6808      	ldr	r0, [r1, #0]
 800e712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e716:	f01e 0f10 	tst.w	lr, #16
 800e71a:	bf08      	it	eq
 800e71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e720:	f380 8809 	msr	PSP, r0
 800e724:	f3bf 8f6f 	isb	sy
 800e728:	4770      	bx	lr
 800e72a:	bf00      	nop
 800e72c:	f3af 8000 	nop.w

0800e730 <pxCurrentTCBConst>:
 800e730:	200010c4 	.word	0x200010c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e734:	bf00      	nop
 800e736:	bf00      	nop

0800e738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
	__asm volatile
 800e73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e742:	f383 8811 	msr	BASEPRI, r3
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	607b      	str	r3, [r7, #4]
}
 800e750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e752:	f7fe feb9 	bl	800d4c8 <xTaskIncrementTick>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d003      	beq.n	800e764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e75c:	4b06      	ldr	r3, [pc, #24]	@ (800e778 <xPortSysTickHandler+0x40>)
 800e75e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e762:	601a      	str	r2, [r3, #0]
 800e764:	2300      	movs	r3, #0
 800e766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	f383 8811 	msr	BASEPRI, r3
}
 800e76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e770:	bf00      	nop
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	e000ed04 	.word	0xe000ed04

0800e77c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e77c:	b480      	push	{r7}
 800e77e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e780:	4b0b      	ldr	r3, [pc, #44]	@ (800e7b0 <vPortSetupTimerInterrupt+0x34>)
 800e782:	2200      	movs	r2, #0
 800e784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e786:	4b0b      	ldr	r3, [pc, #44]	@ (800e7b4 <vPortSetupTimerInterrupt+0x38>)
 800e788:	2200      	movs	r2, #0
 800e78a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e78c:	4b0a      	ldr	r3, [pc, #40]	@ (800e7b8 <vPortSetupTimerInterrupt+0x3c>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a0a      	ldr	r2, [pc, #40]	@ (800e7bc <vPortSetupTimerInterrupt+0x40>)
 800e792:	fba2 2303 	umull	r2, r3, r2, r3
 800e796:	099b      	lsrs	r3, r3, #6
 800e798:	4a09      	ldr	r2, [pc, #36]	@ (800e7c0 <vPortSetupTimerInterrupt+0x44>)
 800e79a:	3b01      	subs	r3, #1
 800e79c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e79e:	4b04      	ldr	r3, [pc, #16]	@ (800e7b0 <vPortSetupTimerInterrupt+0x34>)
 800e7a0:	2207      	movs	r2, #7
 800e7a2:	601a      	str	r2, [r3, #0]
}
 800e7a4:	bf00      	nop
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop
 800e7b0:	e000e010 	.word	0xe000e010
 800e7b4:	e000e018 	.word	0xe000e018
 800e7b8:	20000000 	.word	0x20000000
 800e7bc:	10624dd3 	.word	0x10624dd3
 800e7c0:	e000e014 	.word	0xe000e014

0800e7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e7d4 <vPortEnableVFP+0x10>
 800e7c8:	6801      	ldr	r1, [r0, #0]
 800e7ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e7ce:	6001      	str	r1, [r0, #0]
 800e7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e7d2:	bf00      	nop
 800e7d4:	e000ed88 	.word	0xe000ed88

0800e7d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e7d8:	b480      	push	{r7}
 800e7da:	b085      	sub	sp, #20
 800e7dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e7de:	f3ef 8305 	mrs	r3, IPSR
 800e7e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2b0f      	cmp	r3, #15
 800e7e8:	d915      	bls.n	800e816 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7ea:	4a18      	ldr	r2, [pc, #96]	@ (800e84c <vPortValidateInterruptPriority+0x74>)
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	4413      	add	r3, r2
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e7f4:	4b16      	ldr	r3, [pc, #88]	@ (800e850 <vPortValidateInterruptPriority+0x78>)
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	7afa      	ldrb	r2, [r7, #11]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d20b      	bcs.n	800e816 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e802:	f383 8811 	msr	BASEPRI, r3
 800e806:	f3bf 8f6f 	isb	sy
 800e80a:	f3bf 8f4f 	dsb	sy
 800e80e:	607b      	str	r3, [r7, #4]
}
 800e810:	bf00      	nop
 800e812:	bf00      	nop
 800e814:	e7fd      	b.n	800e812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e816:	4b0f      	ldr	r3, [pc, #60]	@ (800e854 <vPortValidateInterruptPriority+0x7c>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e81e:	4b0e      	ldr	r3, [pc, #56]	@ (800e858 <vPortValidateInterruptPriority+0x80>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	429a      	cmp	r2, r3
 800e824:	d90b      	bls.n	800e83e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82a:	f383 8811 	msr	BASEPRI, r3
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f3bf 8f4f 	dsb	sy
 800e836:	603b      	str	r3, [r7, #0]
}
 800e838:	bf00      	nop
 800e83a:	bf00      	nop
 800e83c:	e7fd      	b.n	800e83a <vPortValidateInterruptPriority+0x62>
	}
 800e83e:	bf00      	nop
 800e840:	3714      	adds	r7, #20
 800e842:	46bd      	mov	sp, r7
 800e844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e848:	4770      	bx	lr
 800e84a:	bf00      	nop
 800e84c:	e000e3f0 	.word	0xe000e3f0
 800e850:	200016f0 	.word	0x200016f0
 800e854:	e000ed0c 	.word	0xe000ed0c
 800e858:	200016f4 	.word	0x200016f4

0800e85c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b08a      	sub	sp, #40	@ 0x28
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e864:	2300      	movs	r3, #0
 800e866:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e868:	f7fe fd72 	bl	800d350 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e86c:	4b5c      	ldr	r3, [pc, #368]	@ (800e9e0 <pvPortMalloc+0x184>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d101      	bne.n	800e878 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e874:	f000 f924 	bl	800eac0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e878:	4b5a      	ldr	r3, [pc, #360]	@ (800e9e4 <pvPortMalloc+0x188>)
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	4013      	ands	r3, r2
 800e880:	2b00      	cmp	r3, #0
 800e882:	f040 8095 	bne.w	800e9b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d01e      	beq.n	800e8ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e88c:	2208      	movs	r2, #8
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	4413      	add	r3, r2
 800e892:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f003 0307 	and.w	r3, r3, #7
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d015      	beq.n	800e8ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f023 0307 	bic.w	r3, r3, #7
 800e8a4:	3308      	adds	r3, #8
 800e8a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f003 0307 	and.w	r3, r3, #7
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d00b      	beq.n	800e8ca <pvPortMalloc+0x6e>
	__asm volatile
 800e8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b6:	f383 8811 	msr	BASEPRI, r3
 800e8ba:	f3bf 8f6f 	isb	sy
 800e8be:	f3bf 8f4f 	dsb	sy
 800e8c2:	617b      	str	r3, [r7, #20]
}
 800e8c4:	bf00      	nop
 800e8c6:	bf00      	nop
 800e8c8:	e7fd      	b.n	800e8c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d06f      	beq.n	800e9b0 <pvPortMalloc+0x154>
 800e8d0:	4b45      	ldr	r3, [pc, #276]	@ (800e9e8 <pvPortMalloc+0x18c>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d86a      	bhi.n	800e9b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e8da:	4b44      	ldr	r3, [pc, #272]	@ (800e9ec <pvPortMalloc+0x190>)
 800e8dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e8de:	4b43      	ldr	r3, [pc, #268]	@ (800e9ec <pvPortMalloc+0x190>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8e4:	e004      	b.n	800e8f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d903      	bls.n	800e902 <pvPortMalloc+0xa6>
 800e8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d1f1      	bne.n	800e8e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e902:	4b37      	ldr	r3, [pc, #220]	@ (800e9e0 <pvPortMalloc+0x184>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e908:	429a      	cmp	r2, r3
 800e90a:	d051      	beq.n	800e9b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e90c:	6a3b      	ldr	r3, [r7, #32]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2208      	movs	r2, #8
 800e912:	4413      	add	r3, r2
 800e914:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	6a3b      	ldr	r3, [r7, #32]
 800e91c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e920:	685a      	ldr	r2, [r3, #4]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	1ad2      	subs	r2, r2, r3
 800e926:	2308      	movs	r3, #8
 800e928:	005b      	lsls	r3, r3, #1
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d920      	bls.n	800e970 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e92e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4413      	add	r3, r2
 800e934:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	f003 0307 	and.w	r3, r3, #7
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00b      	beq.n	800e958 <pvPortMalloc+0xfc>
	__asm volatile
 800e940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e944:	f383 8811 	msr	BASEPRI, r3
 800e948:	f3bf 8f6f 	isb	sy
 800e94c:	f3bf 8f4f 	dsb	sy
 800e950:	613b      	str	r3, [r7, #16]
}
 800e952:	bf00      	nop
 800e954:	bf00      	nop
 800e956:	e7fd      	b.n	800e954 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e95a:	685a      	ldr	r2, [r3, #4]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	1ad2      	subs	r2, r2, r3
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e96a:	69b8      	ldr	r0, [r7, #24]
 800e96c:	f000 f90a 	bl	800eb84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e970:	4b1d      	ldr	r3, [pc, #116]	@ (800e9e8 <pvPortMalloc+0x18c>)
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	4a1b      	ldr	r2, [pc, #108]	@ (800e9e8 <pvPortMalloc+0x18c>)
 800e97c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e97e:	4b1a      	ldr	r3, [pc, #104]	@ (800e9e8 <pvPortMalloc+0x18c>)
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	4b1b      	ldr	r3, [pc, #108]	@ (800e9f0 <pvPortMalloc+0x194>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	429a      	cmp	r2, r3
 800e988:	d203      	bcs.n	800e992 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e98a:	4b17      	ldr	r3, [pc, #92]	@ (800e9e8 <pvPortMalloc+0x18c>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4a18      	ldr	r2, [pc, #96]	@ (800e9f0 <pvPortMalloc+0x194>)
 800e990:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e994:	685a      	ldr	r2, [r3, #4]
 800e996:	4b13      	ldr	r3, [pc, #76]	@ (800e9e4 <pvPortMalloc+0x188>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	431a      	orrs	r2, r3
 800e99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e99e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e9a6:	4b13      	ldr	r3, [pc, #76]	@ (800e9f4 <pvPortMalloc+0x198>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	4a11      	ldr	r2, [pc, #68]	@ (800e9f4 <pvPortMalloc+0x198>)
 800e9ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e9b0:	f7fe fcdc 	bl	800d36c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	f003 0307 	and.w	r3, r3, #7
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d00b      	beq.n	800e9d6 <pvPortMalloc+0x17a>
	__asm volatile
 800e9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9c2:	f383 8811 	msr	BASEPRI, r3
 800e9c6:	f3bf 8f6f 	isb	sy
 800e9ca:	f3bf 8f4f 	dsb	sy
 800e9ce:	60fb      	str	r3, [r7, #12]
}
 800e9d0:	bf00      	nop
 800e9d2:	bf00      	nop
 800e9d4:	e7fd      	b.n	800e9d2 <pvPortMalloc+0x176>
	return pvReturn;
 800e9d6:	69fb      	ldr	r3, [r7, #28]
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3728      	adds	r7, #40	@ 0x28
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}
 800e9e0:	20002a88 	.word	0x20002a88
 800e9e4:	20002a9c 	.word	0x20002a9c
 800e9e8:	20002a8c 	.word	0x20002a8c
 800e9ec:	20002a80 	.word	0x20002a80
 800e9f0:	20002a90 	.word	0x20002a90
 800e9f4:	20002a94 	.word	0x20002a94

0800e9f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d04f      	beq.n	800eaaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea0a:	2308      	movs	r3, #8
 800ea0c:	425b      	negs	r3, r3
 800ea0e:	697a      	ldr	r2, [r7, #20]
 800ea10:	4413      	add	r3, r2
 800ea12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	685a      	ldr	r2, [r3, #4]
 800ea1c:	4b25      	ldr	r3, [pc, #148]	@ (800eab4 <vPortFree+0xbc>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4013      	ands	r3, r2
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d10b      	bne.n	800ea3e <vPortFree+0x46>
	__asm volatile
 800ea26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea2a:	f383 8811 	msr	BASEPRI, r3
 800ea2e:	f3bf 8f6f 	isb	sy
 800ea32:	f3bf 8f4f 	dsb	sy
 800ea36:	60fb      	str	r3, [r7, #12]
}
 800ea38:	bf00      	nop
 800ea3a:	bf00      	nop
 800ea3c:	e7fd      	b.n	800ea3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00b      	beq.n	800ea5e <vPortFree+0x66>
	__asm volatile
 800ea46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea4a:	f383 8811 	msr	BASEPRI, r3
 800ea4e:	f3bf 8f6f 	isb	sy
 800ea52:	f3bf 8f4f 	dsb	sy
 800ea56:	60bb      	str	r3, [r7, #8]
}
 800ea58:	bf00      	nop
 800ea5a:	bf00      	nop
 800ea5c:	e7fd      	b.n	800ea5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	685a      	ldr	r2, [r3, #4]
 800ea62:	4b14      	ldr	r3, [pc, #80]	@ (800eab4 <vPortFree+0xbc>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4013      	ands	r3, r2
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d01e      	beq.n	800eaaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d11a      	bne.n	800eaaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	685a      	ldr	r2, [r3, #4]
 800ea78:	4b0e      	ldr	r3, [pc, #56]	@ (800eab4 <vPortFree+0xbc>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	43db      	mvns	r3, r3
 800ea7e:	401a      	ands	r2, r3
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea84:	f7fe fc64 	bl	800d350 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	685a      	ldr	r2, [r3, #4]
 800ea8c:	4b0a      	ldr	r3, [pc, #40]	@ (800eab8 <vPortFree+0xc0>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4413      	add	r3, r2
 800ea92:	4a09      	ldr	r2, [pc, #36]	@ (800eab8 <vPortFree+0xc0>)
 800ea94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea96:	6938      	ldr	r0, [r7, #16]
 800ea98:	f000 f874 	bl	800eb84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ea9c:	4b07      	ldr	r3, [pc, #28]	@ (800eabc <vPortFree+0xc4>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	4a06      	ldr	r2, [pc, #24]	@ (800eabc <vPortFree+0xc4>)
 800eaa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eaa6:	f7fe fc61 	bl	800d36c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eaaa:	bf00      	nop
 800eaac:	3718      	adds	r7, #24
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	20002a9c 	.word	0x20002a9c
 800eab8:	20002a8c 	.word	0x20002a8c
 800eabc:	20002a98 	.word	0x20002a98

0800eac0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eac0:	b480      	push	{r7}
 800eac2:	b085      	sub	sp, #20
 800eac4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eac6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800eaca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eacc:	4b27      	ldr	r3, [pc, #156]	@ (800eb6c <prvHeapInit+0xac>)
 800eace:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f003 0307 	and.w	r3, r3, #7
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d00c      	beq.n	800eaf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	3307      	adds	r3, #7
 800eade:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f023 0307 	bic.w	r3, r3, #7
 800eae6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eae8:	68ba      	ldr	r2, [r7, #8]
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	1ad3      	subs	r3, r2, r3
 800eaee:	4a1f      	ldr	r2, [pc, #124]	@ (800eb6c <prvHeapInit+0xac>)
 800eaf0:	4413      	add	r3, r2
 800eaf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eaf8:	4a1d      	ldr	r2, [pc, #116]	@ (800eb70 <prvHeapInit+0xb0>)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eafe:	4b1c      	ldr	r3, [pc, #112]	@ (800eb70 <prvHeapInit+0xb0>)
 800eb00:	2200      	movs	r2, #0
 800eb02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	4413      	add	r3, r2
 800eb0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb0c:	2208      	movs	r2, #8
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	1a9b      	subs	r3, r3, r2
 800eb12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f023 0307 	bic.w	r3, r3, #7
 800eb1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	4a15      	ldr	r2, [pc, #84]	@ (800eb74 <prvHeapInit+0xb4>)
 800eb20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb22:	4b14      	ldr	r3, [pc, #80]	@ (800eb74 <prvHeapInit+0xb4>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	2200      	movs	r2, #0
 800eb28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb2a:	4b12      	ldr	r3, [pc, #72]	@ (800eb74 <prvHeapInit+0xb4>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	68fa      	ldr	r2, [r7, #12]
 800eb3a:	1ad2      	subs	r2, r2, r3
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb40:	4b0c      	ldr	r3, [pc, #48]	@ (800eb74 <prvHeapInit+0xb4>)
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	4a0a      	ldr	r2, [pc, #40]	@ (800eb78 <prvHeapInit+0xb8>)
 800eb4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	4a09      	ldr	r2, [pc, #36]	@ (800eb7c <prvHeapInit+0xbc>)
 800eb56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb58:	4b09      	ldr	r3, [pc, #36]	@ (800eb80 <prvHeapInit+0xc0>)
 800eb5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800eb5e:	601a      	str	r2, [r3, #0]
}
 800eb60:	bf00      	nop
 800eb62:	3714      	adds	r7, #20
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr
 800eb6c:	200016f8 	.word	0x200016f8
 800eb70:	20002a80 	.word	0x20002a80
 800eb74:	20002a88 	.word	0x20002a88
 800eb78:	20002a90 	.word	0x20002a90
 800eb7c:	20002a8c 	.word	0x20002a8c
 800eb80:	20002a9c 	.word	0x20002a9c

0800eb84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb84:	b480      	push	{r7}
 800eb86:	b085      	sub	sp, #20
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb8c:	4b28      	ldr	r3, [pc, #160]	@ (800ec30 <prvInsertBlockIntoFreeList+0xac>)
 800eb8e:	60fb      	str	r3, [r7, #12]
 800eb90:	e002      	b.n	800eb98 <prvInsertBlockIntoFreeList+0x14>
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	60fb      	str	r3, [r7, #12]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	687a      	ldr	r2, [r7, #4]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d8f7      	bhi.n	800eb92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	68ba      	ldr	r2, [r7, #8]
 800ebac:	4413      	add	r3, r2
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d108      	bne.n	800ebc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	685a      	ldr	r2, [r3, #4]
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	441a      	add	r2, r3
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	441a      	add	r2, r3
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d118      	bne.n	800ec0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	4b15      	ldr	r3, [pc, #84]	@ (800ec34 <prvInsertBlockIntoFreeList+0xb0>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d00d      	beq.n	800ec02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	685a      	ldr	r2, [r3, #4]
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	441a      	add	r2, r3
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	601a      	str	r2, [r3, #0]
 800ec00:	e008      	b.n	800ec14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec02:	4b0c      	ldr	r3, [pc, #48]	@ (800ec34 <prvInsertBlockIntoFreeList+0xb0>)
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	601a      	str	r2, [r3, #0]
 800ec0a:	e003      	b.n	800ec14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d002      	beq.n	800ec22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec22:	bf00      	nop
 800ec24:	3714      	adds	r7, #20
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop
 800ec30:	20002a80 	.word	0x20002a80
 800ec34:	20002a88 	.word	0x20002a88

0800ec38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	4912      	ldr	r1, [pc, #72]	@ (800ec88 <MX_USB_DEVICE_Init+0x50>)
 800ec40:	4812      	ldr	r0, [pc, #72]	@ (800ec8c <MX_USB_DEVICE_Init+0x54>)
 800ec42:	f7fb fed7 	bl	800a9f4 <USBD_Init>
 800ec46:	4603      	mov	r3, r0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d001      	beq.n	800ec50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ec4c:	f7f3 fd8a 	bl	8002764 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ec50:	490f      	ldr	r1, [pc, #60]	@ (800ec90 <MX_USB_DEVICE_Init+0x58>)
 800ec52:	480e      	ldr	r0, [pc, #56]	@ (800ec8c <MX_USB_DEVICE_Init+0x54>)
 800ec54:	f7fb fefe 	bl	800aa54 <USBD_RegisterClass>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d001      	beq.n	800ec62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ec5e:	f7f3 fd81 	bl	8002764 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ec62:	490c      	ldr	r1, [pc, #48]	@ (800ec94 <MX_USB_DEVICE_Init+0x5c>)
 800ec64:	4809      	ldr	r0, [pc, #36]	@ (800ec8c <MX_USB_DEVICE_Init+0x54>)
 800ec66:	f7fb fdf5 	bl	800a854 <USBD_CDC_RegisterInterface>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d001      	beq.n	800ec74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ec70:	f7f3 fd78 	bl	8002764 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ec74:	4805      	ldr	r0, [pc, #20]	@ (800ec8c <MX_USB_DEVICE_Init+0x54>)
 800ec76:	f7fb ff23 	bl	800aac0 <USBD_Start>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d001      	beq.n	800ec84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ec80:	f7f3 fd70 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ec84:	bf00      	nop
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	200000b8 	.word	0x200000b8
 800ec8c:	20002aa0 	.word	0x20002aa0
 800ec90:	20000018 	.word	0x20000018
 800ec94:	200000a4 	.word	0x200000a4

0800ec98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	4905      	ldr	r1, [pc, #20]	@ (800ecb4 <CDC_Init_FS+0x1c>)
 800eca0:	4805      	ldr	r0, [pc, #20]	@ (800ecb8 <CDC_Init_FS+0x20>)
 800eca2:	f7fb fdf1 	bl	800a888 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800eca6:	4905      	ldr	r1, [pc, #20]	@ (800ecbc <CDC_Init_FS+0x24>)
 800eca8:	4803      	ldr	r0, [pc, #12]	@ (800ecb8 <CDC_Init_FS+0x20>)
 800ecaa:	f7fb fe0f 	bl	800a8cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ecae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	2000357c 	.word	0x2000357c
 800ecb8:	20002aa0 	.word	0x20002aa0
 800ecbc:	20002d7c 	.word	0x20002d7c

0800ecc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ecc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	6039      	str	r1, [r7, #0]
 800ecda:	71fb      	strb	r3, [r7, #7]
 800ecdc:	4613      	mov	r3, r2
 800ecde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ece0:	79fb      	ldrb	r3, [r7, #7]
 800ece2:	2b23      	cmp	r3, #35	@ 0x23
 800ece4:	d85c      	bhi.n	800eda0 <CDC_Control_FS+0xd0>
 800ece6:	a201      	add	r2, pc, #4	@ (adr r2, 800ecec <CDC_Control_FS+0x1c>)
 800ece8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecec:	0800eda1 	.word	0x0800eda1
 800ecf0:	0800eda1 	.word	0x0800eda1
 800ecf4:	0800eda1 	.word	0x0800eda1
 800ecf8:	0800eda1 	.word	0x0800eda1
 800ecfc:	0800eda1 	.word	0x0800eda1
 800ed00:	0800eda1 	.word	0x0800eda1
 800ed04:	0800eda1 	.word	0x0800eda1
 800ed08:	0800eda1 	.word	0x0800eda1
 800ed0c:	0800eda1 	.word	0x0800eda1
 800ed10:	0800eda1 	.word	0x0800eda1
 800ed14:	0800eda1 	.word	0x0800eda1
 800ed18:	0800eda1 	.word	0x0800eda1
 800ed1c:	0800eda1 	.word	0x0800eda1
 800ed20:	0800eda1 	.word	0x0800eda1
 800ed24:	0800eda1 	.word	0x0800eda1
 800ed28:	0800eda1 	.word	0x0800eda1
 800ed2c:	0800eda1 	.word	0x0800eda1
 800ed30:	0800eda1 	.word	0x0800eda1
 800ed34:	0800eda1 	.word	0x0800eda1
 800ed38:	0800eda1 	.word	0x0800eda1
 800ed3c:	0800eda1 	.word	0x0800eda1
 800ed40:	0800eda1 	.word	0x0800eda1
 800ed44:	0800eda1 	.word	0x0800eda1
 800ed48:	0800eda1 	.word	0x0800eda1
 800ed4c:	0800eda1 	.word	0x0800eda1
 800ed50:	0800eda1 	.word	0x0800eda1
 800ed54:	0800eda1 	.word	0x0800eda1
 800ed58:	0800eda1 	.word	0x0800eda1
 800ed5c:	0800eda1 	.word	0x0800eda1
 800ed60:	0800eda1 	.word	0x0800eda1
 800ed64:	0800eda1 	.word	0x0800eda1
 800ed68:	0800eda1 	.word	0x0800eda1
 800ed6c:	0800ed7d 	.word	0x0800ed7d
 800ed70:	0800ed8f 	.word	0x0800ed8f
 800ed74:	0800eda1 	.word	0x0800eda1
 800ed78:	0800eda1 	.word	0x0800eda1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800ed7c:	4b0c      	ldr	r3, [pc, #48]	@ (800edb0 <CDC_Control_FS+0xe0>)
 800ed7e:	683a      	ldr	r2, [r7, #0]
 800ed80:	6810      	ldr	r0, [r2, #0]
 800ed82:	6018      	str	r0, [r3, #0]
 800ed84:	8891      	ldrh	r1, [r2, #4]
 800ed86:	7992      	ldrb	r2, [r2, #6]
 800ed88:	8099      	strh	r1, [r3, #4]
 800ed8a:	719a      	strb	r2, [r3, #6]
    break;
 800ed8c:	e009      	b.n	800eda2 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	4a07      	ldr	r2, [pc, #28]	@ (800edb0 <CDC_Control_FS+0xe0>)
 800ed92:	6810      	ldr	r0, [r2, #0]
 800ed94:	6018      	str	r0, [r3, #0]
 800ed96:	8891      	ldrh	r1, [r2, #4]
 800ed98:	7992      	ldrb	r2, [r2, #6]
 800ed9a:	8099      	strh	r1, [r3, #4]
 800ed9c:	719a      	strb	r2, [r3, #6]
    break;
 800ed9e:	e000      	b.n	800eda2 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eda0:	bf00      	nop
  }

  return (USBD_OK);
 800eda2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr
 800edb0:	2000009c 	.word	0x2000009c

0800edb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b082      	sub	sp, #8
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800edbe:	6879      	ldr	r1, [r7, #4]
 800edc0:	4805      	ldr	r0, [pc, #20]	@ (800edd8 <CDC_Receive_FS+0x24>)
 800edc2:	f7fb fd83 	bl	800a8cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800edc6:	4804      	ldr	r0, [pc, #16]	@ (800edd8 <CDC_Receive_FS+0x24>)
 800edc8:	f7fb fdde 	bl	800a988 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800edcc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	20002aa0 	.word	0x20002aa0

0800eddc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	460b      	mov	r3, r1
 800ede6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ede8:	2300      	movs	r3, #0
 800edea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800edec:	4b0d      	ldr	r3, [pc, #52]	@ (800ee24 <CDC_Transmit_FS+0x48>)
 800edee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800edf2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d001      	beq.n	800ee02 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800edfe:	2301      	movs	r3, #1
 800ee00:	e00b      	b.n	800ee1a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ee02:	887b      	ldrh	r3, [r7, #2]
 800ee04:	461a      	mov	r2, r3
 800ee06:	6879      	ldr	r1, [r7, #4]
 800ee08:	4806      	ldr	r0, [pc, #24]	@ (800ee24 <CDC_Transmit_FS+0x48>)
 800ee0a:	f7fb fd3d 	bl	800a888 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ee0e:	4805      	ldr	r0, [pc, #20]	@ (800ee24 <CDC_Transmit_FS+0x48>)
 800ee10:	f7fb fd7a 	bl	800a908 <USBD_CDC_TransmitPacket>
 800ee14:	4603      	mov	r3, r0
 800ee16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ee18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3710      	adds	r7, #16
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
 800ee22:	bf00      	nop
 800ee24:	20002aa0 	.word	0x20002aa0

0800ee28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b087      	sub	sp, #28
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	4613      	mov	r3, r2
 800ee34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ee36:	2300      	movs	r3, #0
 800ee38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ee3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	371c      	adds	r7, #28
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr
	...

0800ee4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	4603      	mov	r3, r0
 800ee54:	6039      	str	r1, [r7, #0]
 800ee56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	2212      	movs	r2, #18
 800ee5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ee5e:	4b03      	ldr	r3, [pc, #12]	@ (800ee6c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr
 800ee6c:	200000d8 	.word	0x200000d8

0800ee70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b083      	sub	sp, #12
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	4603      	mov	r3, r0
 800ee78:	6039      	str	r1, [r7, #0]
 800ee7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	2204      	movs	r2, #4
 800ee80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ee82:	4b03      	ldr	r3, [pc, #12]	@ (800ee90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr
 800ee90:	200000f8 	.word	0x200000f8

0800ee94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	6039      	str	r1, [r7, #0]
 800ee9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eea0:	79fb      	ldrb	r3, [r7, #7]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d105      	bne.n	800eeb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eea6:	683a      	ldr	r2, [r7, #0]
 800eea8:	4907      	ldr	r1, [pc, #28]	@ (800eec8 <USBD_FS_ProductStrDescriptor+0x34>)
 800eeaa:	4808      	ldr	r0, [pc, #32]	@ (800eecc <USBD_FS_ProductStrDescriptor+0x38>)
 800eeac:	f7fc ffe2 	bl	800be74 <USBD_GetString>
 800eeb0:	e004      	b.n	800eebc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eeb2:	683a      	ldr	r2, [r7, #0]
 800eeb4:	4904      	ldr	r1, [pc, #16]	@ (800eec8 <USBD_FS_ProductStrDescriptor+0x34>)
 800eeb6:	4805      	ldr	r0, [pc, #20]	@ (800eecc <USBD_FS_ProductStrDescriptor+0x38>)
 800eeb8:	f7fc ffdc 	bl	800be74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eebc:	4b02      	ldr	r3, [pc, #8]	@ (800eec8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3708      	adds	r7, #8
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	20003d7c 	.word	0x20003d7c
 800eecc:	08012334 	.word	0x08012334

0800eed0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	4603      	mov	r3, r0
 800eed8:	6039      	str	r1, [r7, #0]
 800eeda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eedc:	683a      	ldr	r2, [r7, #0]
 800eede:	4904      	ldr	r1, [pc, #16]	@ (800eef0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eee0:	4804      	ldr	r0, [pc, #16]	@ (800eef4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eee2:	f7fc ffc7 	bl	800be74 <USBD_GetString>
  return USBD_StrDesc;
 800eee6:	4b02      	ldr	r3, [pc, #8]	@ (800eef0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	20003d7c 	.word	0x20003d7c
 800eef4:	0801234c 	.word	0x0801234c

0800eef8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	4603      	mov	r3, r0
 800ef00:	6039      	str	r1, [r7, #0]
 800ef02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	221a      	movs	r2, #26
 800ef08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef0a:	f000 f855 	bl	800efb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ef0e:	4b02      	ldr	r3, [pc, #8]	@ (800ef18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	200000fc 	.word	0x200000fc

0800ef1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	4603      	mov	r3, r0
 800ef24:	6039      	str	r1, [r7, #0]
 800ef26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ef28:	79fb      	ldrb	r3, [r7, #7]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d105      	bne.n	800ef3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef2e:	683a      	ldr	r2, [r7, #0]
 800ef30:	4907      	ldr	r1, [pc, #28]	@ (800ef50 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef32:	4808      	ldr	r0, [pc, #32]	@ (800ef54 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef34:	f7fc ff9e 	bl	800be74 <USBD_GetString>
 800ef38:	e004      	b.n	800ef44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef3a:	683a      	ldr	r2, [r7, #0]
 800ef3c:	4904      	ldr	r1, [pc, #16]	@ (800ef50 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef3e:	4805      	ldr	r0, [pc, #20]	@ (800ef54 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef40:	f7fc ff98 	bl	800be74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef44:	4b02      	ldr	r3, [pc, #8]	@ (800ef50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3708      	adds	r7, #8
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	20003d7c 	.word	0x20003d7c
 800ef54:	08012360 	.word	0x08012360

0800ef58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	4603      	mov	r3, r0
 800ef60:	6039      	str	r1, [r7, #0]
 800ef62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef64:	79fb      	ldrb	r3, [r7, #7]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d105      	bne.n	800ef76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef6a:	683a      	ldr	r2, [r7, #0]
 800ef6c:	4907      	ldr	r1, [pc, #28]	@ (800ef8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef6e:	4808      	ldr	r0, [pc, #32]	@ (800ef90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef70:	f7fc ff80 	bl	800be74 <USBD_GetString>
 800ef74:	e004      	b.n	800ef80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef76:	683a      	ldr	r2, [r7, #0]
 800ef78:	4904      	ldr	r1, [pc, #16]	@ (800ef8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef7a:	4805      	ldr	r0, [pc, #20]	@ (800ef90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef7c:	f7fc ff7a 	bl	800be74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef80:	4b02      	ldr	r3, [pc, #8]	@ (800ef8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3708      	adds	r7, #8
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	20003d7c 	.word	0x20003d7c
 800ef90:	0801236c 	.word	0x0801236c

0800ef94 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	6039      	str	r1, [r7, #0]
 800ef9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	220c      	movs	r2, #12
 800efa4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800efa6:	4b03      	ldr	r3, [pc, #12]	@ (800efb4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr
 800efb4:	200000ec 	.word	0x200000ec

0800efb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800efbe:	4b0f      	ldr	r3, [pc, #60]	@ (800effc <Get_SerialNum+0x44>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800efc4:	4b0e      	ldr	r3, [pc, #56]	@ (800f000 <Get_SerialNum+0x48>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800efca:	4b0e      	ldr	r3, [pc, #56]	@ (800f004 <Get_SerialNum+0x4c>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800efd0:	68fa      	ldr	r2, [r7, #12]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4413      	add	r3, r2
 800efd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d009      	beq.n	800eff2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800efde:	2208      	movs	r2, #8
 800efe0:	4909      	ldr	r1, [pc, #36]	@ (800f008 <Get_SerialNum+0x50>)
 800efe2:	68f8      	ldr	r0, [r7, #12]
 800efe4:	f000 f814 	bl	800f010 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800efe8:	2204      	movs	r2, #4
 800efea:	4908      	ldr	r1, [pc, #32]	@ (800f00c <Get_SerialNum+0x54>)
 800efec:	68b8      	ldr	r0, [r7, #8]
 800efee:	f000 f80f 	bl	800f010 <IntToUnicode>
  }
}
 800eff2:	bf00      	nop
 800eff4:	3710      	adds	r7, #16
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	1fff7590 	.word	0x1fff7590
 800f000:	1fff7594 	.word	0x1fff7594
 800f004:	1fff7598 	.word	0x1fff7598
 800f008:	200000fe 	.word	0x200000fe
 800f00c:	2000010e 	.word	0x2000010e

0800f010 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f010:	b480      	push	{r7}
 800f012:	b087      	sub	sp, #28
 800f014:	af00      	add	r7, sp, #0
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	4613      	mov	r3, r2
 800f01c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f01e:	2300      	movs	r3, #0
 800f020:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f022:	2300      	movs	r3, #0
 800f024:	75fb      	strb	r3, [r7, #23]
 800f026:	e027      	b.n	800f078 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	0f1b      	lsrs	r3, r3, #28
 800f02c:	2b09      	cmp	r3, #9
 800f02e:	d80b      	bhi.n	800f048 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	0f1b      	lsrs	r3, r3, #28
 800f034:	b2da      	uxtb	r2, r3
 800f036:	7dfb      	ldrb	r3, [r7, #23]
 800f038:	005b      	lsls	r3, r3, #1
 800f03a:	4619      	mov	r1, r3
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	440b      	add	r3, r1
 800f040:	3230      	adds	r2, #48	@ 0x30
 800f042:	b2d2      	uxtb	r2, r2
 800f044:	701a      	strb	r2, [r3, #0]
 800f046:	e00a      	b.n	800f05e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	0f1b      	lsrs	r3, r3, #28
 800f04c:	b2da      	uxtb	r2, r3
 800f04e:	7dfb      	ldrb	r3, [r7, #23]
 800f050:	005b      	lsls	r3, r3, #1
 800f052:	4619      	mov	r1, r3
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	440b      	add	r3, r1
 800f058:	3237      	adds	r2, #55	@ 0x37
 800f05a:	b2d2      	uxtb	r2, r2
 800f05c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	011b      	lsls	r3, r3, #4
 800f062:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f064:	7dfb      	ldrb	r3, [r7, #23]
 800f066:	005b      	lsls	r3, r3, #1
 800f068:	3301      	adds	r3, #1
 800f06a:	68ba      	ldr	r2, [r7, #8]
 800f06c:	4413      	add	r3, r2
 800f06e:	2200      	movs	r2, #0
 800f070:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f072:	7dfb      	ldrb	r3, [r7, #23]
 800f074:	3301      	adds	r3, #1
 800f076:	75fb      	strb	r3, [r7, #23]
 800f078:	7dfa      	ldrb	r2, [r7, #23]
 800f07a:	79fb      	ldrb	r3, [r7, #7]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d3d3      	bcc.n	800f028 <IntToUnicode+0x18>
  }
}
 800f080:	bf00      	nop
 800f082:	bf00      	nop
 800f084:	371c      	adds	r7, #28
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr
	...

0800f090 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b0ae      	sub	sp, #184	@ 0xb8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f098:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800f09c:	2200      	movs	r2, #0
 800f09e:	601a      	str	r2, [r3, #0]
 800f0a0:	605a      	str	r2, [r3, #4]
 800f0a2:	609a      	str	r2, [r3, #8]
 800f0a4:	60da      	str	r2, [r3, #12]
 800f0a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f0a8:	f107 0318 	add.w	r3, r7, #24
 800f0ac:	228c      	movs	r2, #140	@ 0x8c
 800f0ae:	2100      	movs	r1, #0
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f001 f97e 	bl	80103b2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f0be:	d163      	bne.n	800f188 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f0c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f0c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f0cc:	f107 0318 	add.w	r3, r7, #24
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7f7 ff67 	bl	8006fa4 <HAL_RCCEx_PeriphCLKConfig>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d001      	beq.n	800f0e0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f0dc:	f7f3 fb42 	bl	8002764 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f0e0:	4b2b      	ldr	r3, [pc, #172]	@ (800f190 <HAL_PCD_MspInit+0x100>)
 800f0e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0e4:	4a2a      	ldr	r2, [pc, #168]	@ (800f190 <HAL_PCD_MspInit+0x100>)
 800f0e6:	f043 0301 	orr.w	r3, r3, #1
 800f0ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f0ec:	4b28      	ldr	r3, [pc, #160]	@ (800f190 <HAL_PCD_MspInit+0x100>)
 800f0ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0f0:	f003 0301 	and.w	r3, r3, #1
 800f0f4:	617b      	str	r3, [r7, #20]
 800f0f6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f0f8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f0fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f100:	2302      	movs	r3, #2
 800f102:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f106:	2300      	movs	r3, #0
 800f108:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f10c:	2303      	movs	r3, #3
 800f10e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f112:	230a      	movs	r3, #10
 800f114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f118:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800f11c:	4619      	mov	r1, r3
 800f11e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f122:	f7f4 fe23 	bl	8003d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f126:	4b1a      	ldr	r3, [pc, #104]	@ (800f190 <HAL_PCD_MspInit+0x100>)
 800f128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f12a:	4a19      	ldr	r2, [pc, #100]	@ (800f190 <HAL_PCD_MspInit+0x100>)
 800f12c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f132:	4b17      	ldr	r3, [pc, #92]	@ (800f190 <HAL_PCD_MspInit+0x100>)
 800f134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f136:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f13a:	613b      	str	r3, [r7, #16]
 800f13c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f13e:	4b14      	ldr	r3, [pc, #80]	@ (800f190 <HAL_PCD_MspInit+0x100>)
 800f140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f146:	2b00      	cmp	r3, #0
 800f148:	d114      	bne.n	800f174 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f14a:	4b11      	ldr	r3, [pc, #68]	@ (800f190 <HAL_PCD_MspInit+0x100>)
 800f14c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f14e:	4a10      	ldr	r2, [pc, #64]	@ (800f190 <HAL_PCD_MspInit+0x100>)
 800f150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f154:	6593      	str	r3, [r2, #88]	@ 0x58
 800f156:	4b0e      	ldr	r3, [pc, #56]	@ (800f190 <HAL_PCD_MspInit+0x100>)
 800f158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f15a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f15e:	60fb      	str	r3, [r7, #12]
 800f160:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800f162:	f7f7 f8b7 	bl	80062d4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f166:	4b0a      	ldr	r3, [pc, #40]	@ (800f190 <HAL_PCD_MspInit+0x100>)
 800f168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f16a:	4a09      	ldr	r2, [pc, #36]	@ (800f190 <HAL_PCD_MspInit+0x100>)
 800f16c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f170:	6593      	str	r3, [r2, #88]	@ 0x58
 800f172:	e001      	b.n	800f178 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800f174:	f7f7 f8ae 	bl	80062d4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f178:	2200      	movs	r2, #0
 800f17a:	2105      	movs	r1, #5
 800f17c:	2043      	movs	r0, #67	@ 0x43
 800f17e:	f7f4 fdcb 	bl	8003d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f182:	2043      	movs	r0, #67	@ 0x43
 800f184:	f7f4 fde4 	bl	8003d50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f188:	bf00      	nop
 800f18a:	37b8      	adds	r7, #184	@ 0xb8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	40021000 	.word	0x40021000

0800f194 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	4610      	mov	r0, r2
 800f1ac:	f7fb fcd5 	bl	800ab5a <USBD_LL_SetupStage>
}
 800f1b0:	bf00      	nop
 800f1b2:	3708      	adds	r7, #8
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f1ca:	78fa      	ldrb	r2, [r7, #3]
 800f1cc:	6879      	ldr	r1, [r7, #4]
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	00db      	lsls	r3, r3, #3
 800f1d2:	4413      	add	r3, r2
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	440b      	add	r3, r1
 800f1d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	78fb      	ldrb	r3, [r7, #3]
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	f7fb fd0f 	bl	800ac04 <USBD_LL_DataOutStage>
}
 800f1e6:	bf00      	nop
 800f1e8:	3708      	adds	r7, #8
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}

0800f1ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1ee:	b580      	push	{r7, lr}
 800f1f0:	b082      	sub	sp, #8
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	6078      	str	r0, [r7, #4]
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f200:	78fa      	ldrb	r2, [r7, #3]
 800f202:	6879      	ldr	r1, [r7, #4]
 800f204:	4613      	mov	r3, r2
 800f206:	00db      	lsls	r3, r3, #3
 800f208:	4413      	add	r3, r2
 800f20a:	009b      	lsls	r3, r3, #2
 800f20c:	440b      	add	r3, r1
 800f20e:	3320      	adds	r3, #32
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	78fb      	ldrb	r3, [r7, #3]
 800f214:	4619      	mov	r1, r3
 800f216:	f7fb fda8 	bl	800ad6a <USBD_LL_DataInStage>
}
 800f21a:	bf00      	nop
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b082      	sub	sp, #8
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f230:	4618      	mov	r0, r3
 800f232:	f7fb fee2 	bl	800affa <USBD_LL_SOF>
}
 800f236:	bf00      	nop
 800f238:	3708      	adds	r7, #8
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f23e:	b580      	push	{r7, lr}
 800f240:	b084      	sub	sp, #16
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f246:	2301      	movs	r3, #1
 800f248:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	79db      	ldrb	r3, [r3, #7]
 800f24e:	2b02      	cmp	r3, #2
 800f250:	d001      	beq.n	800f256 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f252:	f7f3 fa87 	bl	8002764 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f25c:	7bfa      	ldrb	r2, [r7, #15]
 800f25e:	4611      	mov	r1, r2
 800f260:	4618      	mov	r0, r3
 800f262:	f7fb fe86 	bl	800af72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7fb fe2e 	bl	800aece <USBD_LL_Reset>
}
 800f272:	bf00      	nop
 800f274:	3710      	adds	r7, #16
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
	...

0800f27c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	6812      	ldr	r2, [r2, #0]
 800f292:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f296:	f043 0301 	orr.w	r3, r3, #1
 800f29a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7fb fe75 	bl	800af92 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	7adb      	ldrb	r3, [r3, #11]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d005      	beq.n	800f2bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2b0:	4b04      	ldr	r3, [pc, #16]	@ (800f2c4 <HAL_PCD_SuspendCallback+0x48>)
 800f2b2:	691b      	ldr	r3, [r3, #16]
 800f2b4:	4a03      	ldr	r2, [pc, #12]	@ (800f2c4 <HAL_PCD_SuspendCallback+0x48>)
 800f2b6:	f043 0306 	orr.w	r3, r3, #6
 800f2ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f2bc:	bf00      	nop
 800f2be:	3708      	adds	r7, #8
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	e000ed00 	.word	0xe000ed00

0800f2c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	687a      	ldr	r2, [r7, #4]
 800f2dc:	6812      	ldr	r2, [r2, #0]
 800f2de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f2e2:	f023 0301 	bic.w	r3, r3, #1
 800f2e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	7adb      	ldrb	r3, [r3, #11]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d007      	beq.n	800f300 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2f0:	4b08      	ldr	r3, [pc, #32]	@ (800f314 <HAL_PCD_ResumeCallback+0x4c>)
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	4a07      	ldr	r2, [pc, #28]	@ (800f314 <HAL_PCD_ResumeCallback+0x4c>)
 800f2f6:	f023 0306 	bic.w	r3, r3, #6
 800f2fa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f2fc:	f000 faf6 	bl	800f8ec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f306:	4618      	mov	r0, r3
 800f308:	f7fb fe5f 	bl	800afca <USBD_LL_Resume>
}
 800f30c:	bf00      	nop
 800f30e:	3708      	adds	r7, #8
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}
 800f314:	e000ed00 	.word	0xe000ed00

0800f318 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	460b      	mov	r3, r1
 800f322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f32a:	78fa      	ldrb	r2, [r7, #3]
 800f32c:	4611      	mov	r1, r2
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fb feb5 	bl	800b09e <USBD_LL_IsoOUTIncomplete>
}
 800f334:	bf00      	nop
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	460b      	mov	r3, r1
 800f346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f34e:	78fa      	ldrb	r2, [r7, #3]
 800f350:	4611      	mov	r1, r2
 800f352:	4618      	mov	r0, r3
 800f354:	f7fb fe71 	bl	800b03a <USBD_LL_IsoINIncomplete>
}
 800f358:	bf00      	nop
 800f35a:	3708      	adds	r7, #8
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f36e:	4618      	mov	r0, r3
 800f370:	f7fb fec7 	bl	800b102 <USBD_LL_DevConnected>
}
 800f374:	bf00      	nop
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7fb fec4 	bl	800b118 <USBD_LL_DevDisconnected>
}
 800f390:	bf00      	nop
 800f392:	3708      	adds	r7, #8
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d13c      	bne.n	800f422 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f3a8:	4a20      	ldr	r2, [pc, #128]	@ (800f42c <USBD_LL_Init+0x94>)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	4a1e      	ldr	r2, [pc, #120]	@ (800f42c <USBD_LL_Init+0x94>)
 800f3b4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f3b8:	4b1c      	ldr	r3, [pc, #112]	@ (800f42c <USBD_LL_Init+0x94>)
 800f3ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f3be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f3c0:	4b1a      	ldr	r3, [pc, #104]	@ (800f42c <USBD_LL_Init+0x94>)
 800f3c2:	2206      	movs	r2, #6
 800f3c4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f3c6:	4b19      	ldr	r3, [pc, #100]	@ (800f42c <USBD_LL_Init+0x94>)
 800f3c8:	2202      	movs	r2, #2
 800f3ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f3cc:	4b17      	ldr	r3, [pc, #92]	@ (800f42c <USBD_LL_Init+0x94>)
 800f3ce:	2202      	movs	r2, #2
 800f3d0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f3d2:	4b16      	ldr	r3, [pc, #88]	@ (800f42c <USBD_LL_Init+0x94>)
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f3d8:	4b14      	ldr	r3, [pc, #80]	@ (800f42c <USBD_LL_Init+0x94>)
 800f3da:	2200      	movs	r2, #0
 800f3dc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f3de:	4b13      	ldr	r3, [pc, #76]	@ (800f42c <USBD_LL_Init+0x94>)
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f3e4:	4b11      	ldr	r3, [pc, #68]	@ (800f42c <USBD_LL_Init+0x94>)
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f3ea:	4b10      	ldr	r3, [pc, #64]	@ (800f42c <USBD_LL_Init+0x94>)
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f3f0:	4b0e      	ldr	r3, [pc, #56]	@ (800f42c <USBD_LL_Init+0x94>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f3f6:	480d      	ldr	r0, [pc, #52]	@ (800f42c <USBD_LL_Init+0x94>)
 800f3f8:	f7f5 fd71 	bl	8004ede <HAL_PCD_Init>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d001      	beq.n	800f406 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f402:	f7f3 f9af 	bl	8002764 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f406:	2180      	movs	r1, #128	@ 0x80
 800f408:	4808      	ldr	r0, [pc, #32]	@ (800f42c <USBD_LL_Init+0x94>)
 800f40a:	f7f6 feca 	bl	80061a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f40e:	2240      	movs	r2, #64	@ 0x40
 800f410:	2100      	movs	r1, #0
 800f412:	4806      	ldr	r0, [pc, #24]	@ (800f42c <USBD_LL_Init+0x94>)
 800f414:	f7f6 fe7e 	bl	8006114 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f418:	2280      	movs	r2, #128	@ 0x80
 800f41a:	2101      	movs	r1, #1
 800f41c:	4803      	ldr	r0, [pc, #12]	@ (800f42c <USBD_LL_Init+0x94>)
 800f41e:	f7f6 fe79 	bl	8006114 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f422:	2300      	movs	r3, #0
}
 800f424:	4618      	mov	r0, r3
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	20003f7c 	.word	0x20003f7c

0800f430 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b084      	sub	sp, #16
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f438:	2300      	movs	r3, #0
 800f43a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f43c:	2300      	movs	r3, #0
 800f43e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f446:	4618      	mov	r0, r3
 800f448:	f7f5 fe58 	bl	80050fc <HAL_PCD_Start>
 800f44c:	4603      	mov	r3, r0
 800f44e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f450:	7bbb      	ldrb	r3, [r7, #14]
 800f452:	2b03      	cmp	r3, #3
 800f454:	d816      	bhi.n	800f484 <USBD_LL_Start+0x54>
 800f456:	a201      	add	r2, pc, #4	@ (adr r2, 800f45c <USBD_LL_Start+0x2c>)
 800f458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f45c:	0800f46d 	.word	0x0800f46d
 800f460:	0800f473 	.word	0x0800f473
 800f464:	0800f479 	.word	0x0800f479
 800f468:	0800f47f 	.word	0x0800f47f
    case HAL_OK :
      usb_status = USBD_OK;
 800f46c:	2300      	movs	r3, #0
 800f46e:	73fb      	strb	r3, [r7, #15]
    break;
 800f470:	e00b      	b.n	800f48a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f472:	2303      	movs	r3, #3
 800f474:	73fb      	strb	r3, [r7, #15]
    break;
 800f476:	e008      	b.n	800f48a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f478:	2301      	movs	r3, #1
 800f47a:	73fb      	strb	r3, [r7, #15]
    break;
 800f47c:	e005      	b.n	800f48a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f47e:	2303      	movs	r3, #3
 800f480:	73fb      	strb	r3, [r7, #15]
    break;
 800f482:	e002      	b.n	800f48a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f484:	2303      	movs	r3, #3
 800f486:	73fb      	strb	r3, [r7, #15]
    break;
 800f488:	bf00      	nop
  }
  return usb_status;
 800f48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3710      	adds	r7, #16
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	4608      	mov	r0, r1
 800f49e:	4611      	mov	r1, r2
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	70fb      	strb	r3, [r7, #3]
 800f4a6:	460b      	mov	r3, r1
 800f4a8:	70bb      	strb	r3, [r7, #2]
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f4bc:	78bb      	ldrb	r3, [r7, #2]
 800f4be:	883a      	ldrh	r2, [r7, #0]
 800f4c0:	78f9      	ldrb	r1, [r7, #3]
 800f4c2:	f7f6 fb04 	bl	8005ace <HAL_PCD_EP_Open>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f4ca:	7bbb      	ldrb	r3, [r7, #14]
 800f4cc:	2b03      	cmp	r3, #3
 800f4ce:	d817      	bhi.n	800f500 <USBD_LL_OpenEP+0x6c>
 800f4d0:	a201      	add	r2, pc, #4	@ (adr r2, 800f4d8 <USBD_LL_OpenEP+0x44>)
 800f4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d6:	bf00      	nop
 800f4d8:	0800f4e9 	.word	0x0800f4e9
 800f4dc:	0800f4ef 	.word	0x0800f4ef
 800f4e0:	0800f4f5 	.word	0x0800f4f5
 800f4e4:	0800f4fb 	.word	0x0800f4fb
    case HAL_OK :
      usb_status = USBD_OK;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f4ec:	e00b      	b.n	800f506 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f4ee:	2303      	movs	r3, #3
 800f4f0:	73fb      	strb	r3, [r7, #15]
    break;
 800f4f2:	e008      	b.n	800f506 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f4f8:	e005      	b.n	800f506 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f4fa:	2303      	movs	r3, #3
 800f4fc:	73fb      	strb	r3, [r7, #15]
    break;
 800f4fe:	e002      	b.n	800f506 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f500:	2303      	movs	r3, #3
 800f502:	73fb      	strb	r3, [r7, #15]
    break;
 800f504:	bf00      	nop
  }
  return usb_status;
 800f506:	7bfb      	ldrb	r3, [r7, #15]
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3710      	adds	r7, #16
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	460b      	mov	r3, r1
 800f51a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f51c:	2300      	movs	r3, #0
 800f51e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f520:	2300      	movs	r3, #0
 800f522:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f52a:	78fa      	ldrb	r2, [r7, #3]
 800f52c:	4611      	mov	r1, r2
 800f52e:	4618      	mov	r0, r3
 800f530:	f7f6 fb37 	bl	8005ba2 <HAL_PCD_EP_Close>
 800f534:	4603      	mov	r3, r0
 800f536:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f538:	7bbb      	ldrb	r3, [r7, #14]
 800f53a:	2b03      	cmp	r3, #3
 800f53c:	d816      	bhi.n	800f56c <USBD_LL_CloseEP+0x5c>
 800f53e:	a201      	add	r2, pc, #4	@ (adr r2, 800f544 <USBD_LL_CloseEP+0x34>)
 800f540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f544:	0800f555 	.word	0x0800f555
 800f548:	0800f55b 	.word	0x0800f55b
 800f54c:	0800f561 	.word	0x0800f561
 800f550:	0800f567 	.word	0x0800f567
    case HAL_OK :
      usb_status = USBD_OK;
 800f554:	2300      	movs	r3, #0
 800f556:	73fb      	strb	r3, [r7, #15]
    break;
 800f558:	e00b      	b.n	800f572 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f55a:	2303      	movs	r3, #3
 800f55c:	73fb      	strb	r3, [r7, #15]
    break;
 800f55e:	e008      	b.n	800f572 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f560:	2301      	movs	r3, #1
 800f562:	73fb      	strb	r3, [r7, #15]
    break;
 800f564:	e005      	b.n	800f572 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f566:	2303      	movs	r3, #3
 800f568:	73fb      	strb	r3, [r7, #15]
    break;
 800f56a:	e002      	b.n	800f572 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f56c:	2303      	movs	r3, #3
 800f56e:	73fb      	strb	r3, [r7, #15]
    break;
 800f570:	bf00      	nop
  }
  return usb_status;
 800f572:	7bfb      	ldrb	r3, [r7, #15]
}
 800f574:	4618      	mov	r0, r3
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	460b      	mov	r3, r1
 800f586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f588:	2300      	movs	r3, #0
 800f58a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f58c:	2300      	movs	r3, #0
 800f58e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f596:	78fa      	ldrb	r2, [r7, #3]
 800f598:	4611      	mov	r1, r2
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7f6 fbc6 	bl	8005d2c <HAL_PCD_EP_SetStall>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f5a4:	7bbb      	ldrb	r3, [r7, #14]
 800f5a6:	2b03      	cmp	r3, #3
 800f5a8:	d816      	bhi.n	800f5d8 <USBD_LL_StallEP+0x5c>
 800f5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800f5b0 <USBD_LL_StallEP+0x34>)
 800f5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b0:	0800f5c1 	.word	0x0800f5c1
 800f5b4:	0800f5c7 	.word	0x0800f5c7
 800f5b8:	0800f5cd 	.word	0x0800f5cd
 800f5bc:	0800f5d3 	.word	0x0800f5d3
    case HAL_OK :
      usb_status = USBD_OK;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f5c4:	e00b      	b.n	800f5de <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f5c6:	2303      	movs	r3, #3
 800f5c8:	73fb      	strb	r3, [r7, #15]
    break;
 800f5ca:	e008      	b.n	800f5de <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f5d0:	e005      	b.n	800f5de <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f5d2:	2303      	movs	r3, #3
 800f5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f5d6:	e002      	b.n	800f5de <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f5d8:	2303      	movs	r3, #3
 800f5da:	73fb      	strb	r3, [r7, #15]
    break;
 800f5dc:	bf00      	nop
  }
  return usb_status;
 800f5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3710      	adds	r7, #16
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f602:	78fa      	ldrb	r2, [r7, #3]
 800f604:	4611      	mov	r1, r2
 800f606:	4618      	mov	r0, r3
 800f608:	f7f6 fbf2 	bl	8005df0 <HAL_PCD_EP_ClrStall>
 800f60c:	4603      	mov	r3, r0
 800f60e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f610:	7bbb      	ldrb	r3, [r7, #14]
 800f612:	2b03      	cmp	r3, #3
 800f614:	d816      	bhi.n	800f644 <USBD_LL_ClearStallEP+0x5c>
 800f616:	a201      	add	r2, pc, #4	@ (adr r2, 800f61c <USBD_LL_ClearStallEP+0x34>)
 800f618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f61c:	0800f62d 	.word	0x0800f62d
 800f620:	0800f633 	.word	0x0800f633
 800f624:	0800f639 	.word	0x0800f639
 800f628:	0800f63f 	.word	0x0800f63f
    case HAL_OK :
      usb_status = USBD_OK;
 800f62c:	2300      	movs	r3, #0
 800f62e:	73fb      	strb	r3, [r7, #15]
    break;
 800f630:	e00b      	b.n	800f64a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f632:	2303      	movs	r3, #3
 800f634:	73fb      	strb	r3, [r7, #15]
    break;
 800f636:	e008      	b.n	800f64a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f638:	2301      	movs	r3, #1
 800f63a:	73fb      	strb	r3, [r7, #15]
    break;
 800f63c:	e005      	b.n	800f64a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f63e:	2303      	movs	r3, #3
 800f640:	73fb      	strb	r3, [r7, #15]
    break;
 800f642:	e002      	b.n	800f64a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f644:	2303      	movs	r3, #3
 800f646:	73fb      	strb	r3, [r7, #15]
    break;
 800f648:	bf00      	nop
  }
  return usb_status;
 800f64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3710      	adds	r7, #16
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f654:	b480      	push	{r7}
 800f656:	b085      	sub	sp, #20
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	460b      	mov	r3, r1
 800f65e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f666:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	da0b      	bge.n	800f688 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f670:	78fb      	ldrb	r3, [r7, #3]
 800f672:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f676:	68f9      	ldr	r1, [r7, #12]
 800f678:	4613      	mov	r3, r2
 800f67a:	00db      	lsls	r3, r3, #3
 800f67c:	4413      	add	r3, r2
 800f67e:	009b      	lsls	r3, r3, #2
 800f680:	440b      	add	r3, r1
 800f682:	3316      	adds	r3, #22
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	e00b      	b.n	800f6a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f688:	78fb      	ldrb	r3, [r7, #3]
 800f68a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f68e:	68f9      	ldr	r1, [r7, #12]
 800f690:	4613      	mov	r3, r2
 800f692:	00db      	lsls	r3, r3, #3
 800f694:	4413      	add	r3, r2
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	440b      	add	r3, r1
 800f69a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f69e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3714      	adds	r7, #20
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6c6:	78fa      	ldrb	r2, [r7, #3]
 800f6c8:	4611      	mov	r1, r2
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7f6 f9db 	bl	8005a86 <HAL_PCD_SetAddress>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f6d4:	7bbb      	ldrb	r3, [r7, #14]
 800f6d6:	2b03      	cmp	r3, #3
 800f6d8:	d816      	bhi.n	800f708 <USBD_LL_SetUSBAddress+0x5c>
 800f6da:	a201      	add	r2, pc, #4	@ (adr r2, 800f6e0 <USBD_LL_SetUSBAddress+0x34>)
 800f6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e0:	0800f6f1 	.word	0x0800f6f1
 800f6e4:	0800f6f7 	.word	0x0800f6f7
 800f6e8:	0800f6fd 	.word	0x0800f6fd
 800f6ec:	0800f703 	.word	0x0800f703
    case HAL_OK :
      usb_status = USBD_OK;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	73fb      	strb	r3, [r7, #15]
    break;
 800f6f4:	e00b      	b.n	800f70e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f6f6:	2303      	movs	r3, #3
 800f6f8:	73fb      	strb	r3, [r7, #15]
    break;
 800f6fa:	e008      	b.n	800f70e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f700:	e005      	b.n	800f70e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f702:	2303      	movs	r3, #3
 800f704:	73fb      	strb	r3, [r7, #15]
    break;
 800f706:	e002      	b.n	800f70e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800f708:	2303      	movs	r3, #3
 800f70a:	73fb      	strb	r3, [r7, #15]
    break;
 800f70c:	bf00      	nop
  }
  return usb_status;
 800f70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f710:	4618      	mov	r0, r3
 800f712:	3710      	adds	r7, #16
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}

0800f718 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b086      	sub	sp, #24
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	607a      	str	r2, [r7, #4]
 800f722:	603b      	str	r3, [r7, #0]
 800f724:	460b      	mov	r3, r1
 800f726:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f728:	2300      	movs	r3, #0
 800f72a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f72c:	2300      	movs	r3, #0
 800f72e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f736:	7af9      	ldrb	r1, [r7, #11]
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	687a      	ldr	r2, [r7, #4]
 800f73c:	f7f6 fac5 	bl	8005cca <HAL_PCD_EP_Transmit>
 800f740:	4603      	mov	r3, r0
 800f742:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f744:	7dbb      	ldrb	r3, [r7, #22]
 800f746:	2b03      	cmp	r3, #3
 800f748:	d816      	bhi.n	800f778 <USBD_LL_Transmit+0x60>
 800f74a:	a201      	add	r2, pc, #4	@ (adr r2, 800f750 <USBD_LL_Transmit+0x38>)
 800f74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f750:	0800f761 	.word	0x0800f761
 800f754:	0800f767 	.word	0x0800f767
 800f758:	0800f76d 	.word	0x0800f76d
 800f75c:	0800f773 	.word	0x0800f773
    case HAL_OK :
      usb_status = USBD_OK;
 800f760:	2300      	movs	r3, #0
 800f762:	75fb      	strb	r3, [r7, #23]
    break;
 800f764:	e00b      	b.n	800f77e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f766:	2303      	movs	r3, #3
 800f768:	75fb      	strb	r3, [r7, #23]
    break;
 800f76a:	e008      	b.n	800f77e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f76c:	2301      	movs	r3, #1
 800f76e:	75fb      	strb	r3, [r7, #23]
    break;
 800f770:	e005      	b.n	800f77e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f772:	2303      	movs	r3, #3
 800f774:	75fb      	strb	r3, [r7, #23]
    break;
 800f776:	e002      	b.n	800f77e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800f778:	2303      	movs	r3, #3
 800f77a:	75fb      	strb	r3, [r7, #23]
    break;
 800f77c:	bf00      	nop
  }
  return usb_status;
 800f77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f780:	4618      	mov	r0, r3
 800f782:	3718      	adds	r7, #24
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b086      	sub	sp, #24
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	60f8      	str	r0, [r7, #12]
 800f790:	607a      	str	r2, [r7, #4]
 800f792:	603b      	str	r3, [r7, #0]
 800f794:	460b      	mov	r3, r1
 800f796:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f798:	2300      	movs	r3, #0
 800f79a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f79c:	2300      	movs	r3, #0
 800f79e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f7a6:	7af9      	ldrb	r1, [r7, #11]
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	687a      	ldr	r2, [r7, #4]
 800f7ac:	f7f6 fa43 	bl	8005c36 <HAL_PCD_EP_Receive>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f7b4:	7dbb      	ldrb	r3, [r7, #22]
 800f7b6:	2b03      	cmp	r3, #3
 800f7b8:	d816      	bhi.n	800f7e8 <USBD_LL_PrepareReceive+0x60>
 800f7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f7c0 <USBD_LL_PrepareReceive+0x38>)
 800f7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c0:	0800f7d1 	.word	0x0800f7d1
 800f7c4:	0800f7d7 	.word	0x0800f7d7
 800f7c8:	0800f7dd 	.word	0x0800f7dd
 800f7cc:	0800f7e3 	.word	0x0800f7e3
    case HAL_OK :
      usb_status = USBD_OK;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	75fb      	strb	r3, [r7, #23]
    break;
 800f7d4:	e00b      	b.n	800f7ee <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f7d6:	2303      	movs	r3, #3
 800f7d8:	75fb      	strb	r3, [r7, #23]
    break;
 800f7da:	e008      	b.n	800f7ee <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f7dc:	2301      	movs	r3, #1
 800f7de:	75fb      	strb	r3, [r7, #23]
    break;
 800f7e0:	e005      	b.n	800f7ee <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f7e2:	2303      	movs	r3, #3
 800f7e4:	75fb      	strb	r3, [r7, #23]
    break;
 800f7e6:	e002      	b.n	800f7ee <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800f7e8:	2303      	movs	r3, #3
 800f7ea:	75fb      	strb	r3, [r7, #23]
    break;
 800f7ec:	bf00      	nop
  }
  return usb_status;
 800f7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3718      	adds	r7, #24
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	460b      	mov	r3, r1
 800f802:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f80a:	78fa      	ldrb	r2, [r7, #3]
 800f80c:	4611      	mov	r1, r2
 800f80e:	4618      	mov	r0, r3
 800f810:	f7f6 fa43 	bl	8005c9a <HAL_PCD_EP_GetRxCount>
 800f814:	4603      	mov	r3, r0
}
 800f816:	4618      	mov	r0, r3
 800f818:	3708      	adds	r7, #8
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
	...

0800f820 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	460b      	mov	r3, r1
 800f82a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f82c:	78fb      	ldrb	r3, [r7, #3]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d002      	beq.n	800f838 <HAL_PCDEx_LPM_Callback+0x18>
 800f832:	2b01      	cmp	r3, #1
 800f834:	d01f      	beq.n	800f876 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f836:	e03b      	b.n	800f8b0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	7adb      	ldrb	r3, [r3, #11]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d007      	beq.n	800f850 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f840:	f000 f854 	bl	800f8ec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f844:	4b1c      	ldr	r3, [pc, #112]	@ (800f8b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800f846:	691b      	ldr	r3, [r3, #16]
 800f848:	4a1b      	ldr	r2, [pc, #108]	@ (800f8b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800f84a:	f023 0306 	bic.w	r3, r3, #6
 800f84e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	687a      	ldr	r2, [r7, #4]
 800f85c:	6812      	ldr	r2, [r2, #0]
 800f85e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f862:	f023 0301 	bic.w	r3, r3, #1
 800f866:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fb fbab 	bl	800afca <USBD_LL_Resume>
    break;
 800f874:	e01c      	b.n	800f8b0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	687a      	ldr	r2, [r7, #4]
 800f882:	6812      	ldr	r2, [r2, #0]
 800f884:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f888:	f043 0301 	orr.w	r3, r3, #1
 800f88c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f894:	4618      	mov	r0, r3
 800f896:	f7fb fb7c 	bl	800af92 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	7adb      	ldrb	r3, [r3, #11]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d005      	beq.n	800f8ae <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f8a2:	4b05      	ldr	r3, [pc, #20]	@ (800f8b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800f8a4:	691b      	ldr	r3, [r3, #16]
 800f8a6:	4a04      	ldr	r2, [pc, #16]	@ (800f8b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800f8a8:	f043 0306 	orr.w	r3, r3, #6
 800f8ac:	6113      	str	r3, [r2, #16]
    break;
 800f8ae:	bf00      	nop
}
 800f8b0:	bf00      	nop
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	e000ed00 	.word	0xe000ed00

0800f8bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f8c4:	4b03      	ldr	r3, [pc, #12]	@ (800f8d4 <USBD_static_malloc+0x18>)
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	370c      	adds	r7, #12
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	20004460 	.word	0x20004460

0800f8d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b083      	sub	sp, #12
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]

}
 800f8e0:	bf00      	nop
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 800f8f0:	bf00      	nop
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f8:	4770      	bx	lr

0800f8fa <__cvt>:
 800f8fa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8fe:	ec57 6b10 	vmov	r6, r7, d0
 800f902:	2f00      	cmp	r7, #0
 800f904:	460c      	mov	r4, r1
 800f906:	4619      	mov	r1, r3
 800f908:	463b      	mov	r3, r7
 800f90a:	bfbb      	ittet	lt
 800f90c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f910:	461f      	movlt	r7, r3
 800f912:	2300      	movge	r3, #0
 800f914:	232d      	movlt	r3, #45	@ 0x2d
 800f916:	700b      	strb	r3, [r1, #0]
 800f918:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f91a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f91e:	4691      	mov	r9, r2
 800f920:	f023 0820 	bic.w	r8, r3, #32
 800f924:	bfbc      	itt	lt
 800f926:	4632      	movlt	r2, r6
 800f928:	4616      	movlt	r6, r2
 800f92a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f92e:	d005      	beq.n	800f93c <__cvt+0x42>
 800f930:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f934:	d100      	bne.n	800f938 <__cvt+0x3e>
 800f936:	3401      	adds	r4, #1
 800f938:	2102      	movs	r1, #2
 800f93a:	e000      	b.n	800f93e <__cvt+0x44>
 800f93c:	2103      	movs	r1, #3
 800f93e:	ab03      	add	r3, sp, #12
 800f940:	9301      	str	r3, [sp, #4]
 800f942:	ab02      	add	r3, sp, #8
 800f944:	9300      	str	r3, [sp, #0]
 800f946:	ec47 6b10 	vmov	d0, r6, r7
 800f94a:	4653      	mov	r3, sl
 800f94c:	4622      	mov	r2, r4
 800f94e:	f000 fe9f 	bl	8010690 <_dtoa_r>
 800f952:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f956:	4605      	mov	r5, r0
 800f958:	d119      	bne.n	800f98e <__cvt+0x94>
 800f95a:	f019 0f01 	tst.w	r9, #1
 800f95e:	d00e      	beq.n	800f97e <__cvt+0x84>
 800f960:	eb00 0904 	add.w	r9, r0, r4
 800f964:	2200      	movs	r2, #0
 800f966:	2300      	movs	r3, #0
 800f968:	4630      	mov	r0, r6
 800f96a:	4639      	mov	r1, r7
 800f96c:	f7f1 f8bc 	bl	8000ae8 <__aeabi_dcmpeq>
 800f970:	b108      	cbz	r0, 800f976 <__cvt+0x7c>
 800f972:	f8cd 900c 	str.w	r9, [sp, #12]
 800f976:	2230      	movs	r2, #48	@ 0x30
 800f978:	9b03      	ldr	r3, [sp, #12]
 800f97a:	454b      	cmp	r3, r9
 800f97c:	d31e      	bcc.n	800f9bc <__cvt+0xc2>
 800f97e:	9b03      	ldr	r3, [sp, #12]
 800f980:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f982:	1b5b      	subs	r3, r3, r5
 800f984:	4628      	mov	r0, r5
 800f986:	6013      	str	r3, [r2, #0]
 800f988:	b004      	add	sp, #16
 800f98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f98e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f992:	eb00 0904 	add.w	r9, r0, r4
 800f996:	d1e5      	bne.n	800f964 <__cvt+0x6a>
 800f998:	7803      	ldrb	r3, [r0, #0]
 800f99a:	2b30      	cmp	r3, #48	@ 0x30
 800f99c:	d10a      	bne.n	800f9b4 <__cvt+0xba>
 800f99e:	2200      	movs	r2, #0
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	4630      	mov	r0, r6
 800f9a4:	4639      	mov	r1, r7
 800f9a6:	f7f1 f89f 	bl	8000ae8 <__aeabi_dcmpeq>
 800f9aa:	b918      	cbnz	r0, 800f9b4 <__cvt+0xba>
 800f9ac:	f1c4 0401 	rsb	r4, r4, #1
 800f9b0:	f8ca 4000 	str.w	r4, [sl]
 800f9b4:	f8da 3000 	ldr.w	r3, [sl]
 800f9b8:	4499      	add	r9, r3
 800f9ba:	e7d3      	b.n	800f964 <__cvt+0x6a>
 800f9bc:	1c59      	adds	r1, r3, #1
 800f9be:	9103      	str	r1, [sp, #12]
 800f9c0:	701a      	strb	r2, [r3, #0]
 800f9c2:	e7d9      	b.n	800f978 <__cvt+0x7e>

0800f9c4 <__exponent>:
 800f9c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9c6:	2900      	cmp	r1, #0
 800f9c8:	bfba      	itte	lt
 800f9ca:	4249      	neglt	r1, r1
 800f9cc:	232d      	movlt	r3, #45	@ 0x2d
 800f9ce:	232b      	movge	r3, #43	@ 0x2b
 800f9d0:	2909      	cmp	r1, #9
 800f9d2:	7002      	strb	r2, [r0, #0]
 800f9d4:	7043      	strb	r3, [r0, #1]
 800f9d6:	dd29      	ble.n	800fa2c <__exponent+0x68>
 800f9d8:	f10d 0307 	add.w	r3, sp, #7
 800f9dc:	461d      	mov	r5, r3
 800f9de:	270a      	movs	r7, #10
 800f9e0:	461a      	mov	r2, r3
 800f9e2:	fbb1 f6f7 	udiv	r6, r1, r7
 800f9e6:	fb07 1416 	mls	r4, r7, r6, r1
 800f9ea:	3430      	adds	r4, #48	@ 0x30
 800f9ec:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f9f0:	460c      	mov	r4, r1
 800f9f2:	2c63      	cmp	r4, #99	@ 0x63
 800f9f4:	f103 33ff 	add.w	r3, r3, #4294967295
 800f9f8:	4631      	mov	r1, r6
 800f9fa:	dcf1      	bgt.n	800f9e0 <__exponent+0x1c>
 800f9fc:	3130      	adds	r1, #48	@ 0x30
 800f9fe:	1e94      	subs	r4, r2, #2
 800fa00:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fa04:	1c41      	adds	r1, r0, #1
 800fa06:	4623      	mov	r3, r4
 800fa08:	42ab      	cmp	r3, r5
 800fa0a:	d30a      	bcc.n	800fa22 <__exponent+0x5e>
 800fa0c:	f10d 0309 	add.w	r3, sp, #9
 800fa10:	1a9b      	subs	r3, r3, r2
 800fa12:	42ac      	cmp	r4, r5
 800fa14:	bf88      	it	hi
 800fa16:	2300      	movhi	r3, #0
 800fa18:	3302      	adds	r3, #2
 800fa1a:	4403      	add	r3, r0
 800fa1c:	1a18      	subs	r0, r3, r0
 800fa1e:	b003      	add	sp, #12
 800fa20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa22:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fa26:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fa2a:	e7ed      	b.n	800fa08 <__exponent+0x44>
 800fa2c:	2330      	movs	r3, #48	@ 0x30
 800fa2e:	3130      	adds	r1, #48	@ 0x30
 800fa30:	7083      	strb	r3, [r0, #2]
 800fa32:	70c1      	strb	r1, [r0, #3]
 800fa34:	1d03      	adds	r3, r0, #4
 800fa36:	e7f1      	b.n	800fa1c <__exponent+0x58>

0800fa38 <_printf_float>:
 800fa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa3c:	b08d      	sub	sp, #52	@ 0x34
 800fa3e:	460c      	mov	r4, r1
 800fa40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fa44:	4616      	mov	r6, r2
 800fa46:	461f      	mov	r7, r3
 800fa48:	4605      	mov	r5, r0
 800fa4a:	f000 fcbb 	bl	80103c4 <_localeconv_r>
 800fa4e:	6803      	ldr	r3, [r0, #0]
 800fa50:	9304      	str	r3, [sp, #16]
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7f0 fc1c 	bl	8000290 <strlen>
 800fa58:	2300      	movs	r3, #0
 800fa5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa5c:	f8d8 3000 	ldr.w	r3, [r8]
 800fa60:	9005      	str	r0, [sp, #20]
 800fa62:	3307      	adds	r3, #7
 800fa64:	f023 0307 	bic.w	r3, r3, #7
 800fa68:	f103 0208 	add.w	r2, r3, #8
 800fa6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fa70:	f8d4 b000 	ldr.w	fp, [r4]
 800fa74:	f8c8 2000 	str.w	r2, [r8]
 800fa78:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fa80:	9307      	str	r3, [sp, #28]
 800fa82:	f8cd 8018 	str.w	r8, [sp, #24]
 800fa86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fa8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa8e:	4b9c      	ldr	r3, [pc, #624]	@ (800fd00 <_printf_float+0x2c8>)
 800fa90:	f04f 32ff 	mov.w	r2, #4294967295
 800fa94:	f7f1 f85a 	bl	8000b4c <__aeabi_dcmpun>
 800fa98:	bb70      	cbnz	r0, 800faf8 <_printf_float+0xc0>
 800fa9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa9e:	4b98      	ldr	r3, [pc, #608]	@ (800fd00 <_printf_float+0x2c8>)
 800faa0:	f04f 32ff 	mov.w	r2, #4294967295
 800faa4:	f7f1 f834 	bl	8000b10 <__aeabi_dcmple>
 800faa8:	bb30      	cbnz	r0, 800faf8 <_printf_float+0xc0>
 800faaa:	2200      	movs	r2, #0
 800faac:	2300      	movs	r3, #0
 800faae:	4640      	mov	r0, r8
 800fab0:	4649      	mov	r1, r9
 800fab2:	f7f1 f823 	bl	8000afc <__aeabi_dcmplt>
 800fab6:	b110      	cbz	r0, 800fabe <_printf_float+0x86>
 800fab8:	232d      	movs	r3, #45	@ 0x2d
 800faba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fabe:	4a91      	ldr	r2, [pc, #580]	@ (800fd04 <_printf_float+0x2cc>)
 800fac0:	4b91      	ldr	r3, [pc, #580]	@ (800fd08 <_printf_float+0x2d0>)
 800fac2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fac6:	bf94      	ite	ls
 800fac8:	4690      	movls	r8, r2
 800faca:	4698      	movhi	r8, r3
 800facc:	2303      	movs	r3, #3
 800face:	6123      	str	r3, [r4, #16]
 800fad0:	f02b 0304 	bic.w	r3, fp, #4
 800fad4:	6023      	str	r3, [r4, #0]
 800fad6:	f04f 0900 	mov.w	r9, #0
 800fada:	9700      	str	r7, [sp, #0]
 800fadc:	4633      	mov	r3, r6
 800fade:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fae0:	4621      	mov	r1, r4
 800fae2:	4628      	mov	r0, r5
 800fae4:	f000 f9d2 	bl	800fe8c <_printf_common>
 800fae8:	3001      	adds	r0, #1
 800faea:	f040 808d 	bne.w	800fc08 <_printf_float+0x1d0>
 800faee:	f04f 30ff 	mov.w	r0, #4294967295
 800faf2:	b00d      	add	sp, #52	@ 0x34
 800faf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf8:	4642      	mov	r2, r8
 800fafa:	464b      	mov	r3, r9
 800fafc:	4640      	mov	r0, r8
 800fafe:	4649      	mov	r1, r9
 800fb00:	f7f1 f824 	bl	8000b4c <__aeabi_dcmpun>
 800fb04:	b140      	cbz	r0, 800fb18 <_printf_float+0xe0>
 800fb06:	464b      	mov	r3, r9
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	bfbc      	itt	lt
 800fb0c:	232d      	movlt	r3, #45	@ 0x2d
 800fb0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fb12:	4a7e      	ldr	r2, [pc, #504]	@ (800fd0c <_printf_float+0x2d4>)
 800fb14:	4b7e      	ldr	r3, [pc, #504]	@ (800fd10 <_printf_float+0x2d8>)
 800fb16:	e7d4      	b.n	800fac2 <_printf_float+0x8a>
 800fb18:	6863      	ldr	r3, [r4, #4]
 800fb1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fb1e:	9206      	str	r2, [sp, #24]
 800fb20:	1c5a      	adds	r2, r3, #1
 800fb22:	d13b      	bne.n	800fb9c <_printf_float+0x164>
 800fb24:	2306      	movs	r3, #6
 800fb26:	6063      	str	r3, [r4, #4]
 800fb28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	6022      	str	r2, [r4, #0]
 800fb30:	9303      	str	r3, [sp, #12]
 800fb32:	ab0a      	add	r3, sp, #40	@ 0x28
 800fb34:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fb38:	ab09      	add	r3, sp, #36	@ 0x24
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	6861      	ldr	r1, [r4, #4]
 800fb3e:	ec49 8b10 	vmov	d0, r8, r9
 800fb42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fb46:	4628      	mov	r0, r5
 800fb48:	f7ff fed7 	bl	800f8fa <__cvt>
 800fb4c:	9b06      	ldr	r3, [sp, #24]
 800fb4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fb50:	2b47      	cmp	r3, #71	@ 0x47
 800fb52:	4680      	mov	r8, r0
 800fb54:	d129      	bne.n	800fbaa <_printf_float+0x172>
 800fb56:	1cc8      	adds	r0, r1, #3
 800fb58:	db02      	blt.n	800fb60 <_printf_float+0x128>
 800fb5a:	6863      	ldr	r3, [r4, #4]
 800fb5c:	4299      	cmp	r1, r3
 800fb5e:	dd41      	ble.n	800fbe4 <_printf_float+0x1ac>
 800fb60:	f1aa 0a02 	sub.w	sl, sl, #2
 800fb64:	fa5f fa8a 	uxtb.w	sl, sl
 800fb68:	3901      	subs	r1, #1
 800fb6a:	4652      	mov	r2, sl
 800fb6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fb70:	9109      	str	r1, [sp, #36]	@ 0x24
 800fb72:	f7ff ff27 	bl	800f9c4 <__exponent>
 800fb76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb78:	1813      	adds	r3, r2, r0
 800fb7a:	2a01      	cmp	r2, #1
 800fb7c:	4681      	mov	r9, r0
 800fb7e:	6123      	str	r3, [r4, #16]
 800fb80:	dc02      	bgt.n	800fb88 <_printf_float+0x150>
 800fb82:	6822      	ldr	r2, [r4, #0]
 800fb84:	07d2      	lsls	r2, r2, #31
 800fb86:	d501      	bpl.n	800fb8c <_printf_float+0x154>
 800fb88:	3301      	adds	r3, #1
 800fb8a:	6123      	str	r3, [r4, #16]
 800fb8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d0a2      	beq.n	800fada <_printf_float+0xa2>
 800fb94:	232d      	movs	r3, #45	@ 0x2d
 800fb96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb9a:	e79e      	b.n	800fada <_printf_float+0xa2>
 800fb9c:	9a06      	ldr	r2, [sp, #24]
 800fb9e:	2a47      	cmp	r2, #71	@ 0x47
 800fba0:	d1c2      	bne.n	800fb28 <_printf_float+0xf0>
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d1c0      	bne.n	800fb28 <_printf_float+0xf0>
 800fba6:	2301      	movs	r3, #1
 800fba8:	e7bd      	b.n	800fb26 <_printf_float+0xee>
 800fbaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fbae:	d9db      	bls.n	800fb68 <_printf_float+0x130>
 800fbb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fbb4:	d118      	bne.n	800fbe8 <_printf_float+0x1b0>
 800fbb6:	2900      	cmp	r1, #0
 800fbb8:	6863      	ldr	r3, [r4, #4]
 800fbba:	dd0b      	ble.n	800fbd4 <_printf_float+0x19c>
 800fbbc:	6121      	str	r1, [r4, #16]
 800fbbe:	b913      	cbnz	r3, 800fbc6 <_printf_float+0x18e>
 800fbc0:	6822      	ldr	r2, [r4, #0]
 800fbc2:	07d0      	lsls	r0, r2, #31
 800fbc4:	d502      	bpl.n	800fbcc <_printf_float+0x194>
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	440b      	add	r3, r1
 800fbca:	6123      	str	r3, [r4, #16]
 800fbcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fbce:	f04f 0900 	mov.w	r9, #0
 800fbd2:	e7db      	b.n	800fb8c <_printf_float+0x154>
 800fbd4:	b913      	cbnz	r3, 800fbdc <_printf_float+0x1a4>
 800fbd6:	6822      	ldr	r2, [r4, #0]
 800fbd8:	07d2      	lsls	r2, r2, #31
 800fbda:	d501      	bpl.n	800fbe0 <_printf_float+0x1a8>
 800fbdc:	3302      	adds	r3, #2
 800fbde:	e7f4      	b.n	800fbca <_printf_float+0x192>
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	e7f2      	b.n	800fbca <_printf_float+0x192>
 800fbe4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fbe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbea:	4299      	cmp	r1, r3
 800fbec:	db05      	blt.n	800fbfa <_printf_float+0x1c2>
 800fbee:	6823      	ldr	r3, [r4, #0]
 800fbf0:	6121      	str	r1, [r4, #16]
 800fbf2:	07d8      	lsls	r0, r3, #31
 800fbf4:	d5ea      	bpl.n	800fbcc <_printf_float+0x194>
 800fbf6:	1c4b      	adds	r3, r1, #1
 800fbf8:	e7e7      	b.n	800fbca <_printf_float+0x192>
 800fbfa:	2900      	cmp	r1, #0
 800fbfc:	bfd4      	ite	le
 800fbfe:	f1c1 0202 	rsble	r2, r1, #2
 800fc02:	2201      	movgt	r2, #1
 800fc04:	4413      	add	r3, r2
 800fc06:	e7e0      	b.n	800fbca <_printf_float+0x192>
 800fc08:	6823      	ldr	r3, [r4, #0]
 800fc0a:	055a      	lsls	r2, r3, #21
 800fc0c:	d407      	bmi.n	800fc1e <_printf_float+0x1e6>
 800fc0e:	6923      	ldr	r3, [r4, #16]
 800fc10:	4642      	mov	r2, r8
 800fc12:	4631      	mov	r1, r6
 800fc14:	4628      	mov	r0, r5
 800fc16:	47b8      	blx	r7
 800fc18:	3001      	adds	r0, #1
 800fc1a:	d12b      	bne.n	800fc74 <_printf_float+0x23c>
 800fc1c:	e767      	b.n	800faee <_printf_float+0xb6>
 800fc1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fc22:	f240 80dd 	bls.w	800fde0 <_printf_float+0x3a8>
 800fc26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	f7f0 ff5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800fc32:	2800      	cmp	r0, #0
 800fc34:	d033      	beq.n	800fc9e <_printf_float+0x266>
 800fc36:	4a37      	ldr	r2, [pc, #220]	@ (800fd14 <_printf_float+0x2dc>)
 800fc38:	2301      	movs	r3, #1
 800fc3a:	4631      	mov	r1, r6
 800fc3c:	4628      	mov	r0, r5
 800fc3e:	47b8      	blx	r7
 800fc40:	3001      	adds	r0, #1
 800fc42:	f43f af54 	beq.w	800faee <_printf_float+0xb6>
 800fc46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fc4a:	4543      	cmp	r3, r8
 800fc4c:	db02      	blt.n	800fc54 <_printf_float+0x21c>
 800fc4e:	6823      	ldr	r3, [r4, #0]
 800fc50:	07d8      	lsls	r0, r3, #31
 800fc52:	d50f      	bpl.n	800fc74 <_printf_float+0x23c>
 800fc54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc58:	4631      	mov	r1, r6
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	47b8      	blx	r7
 800fc5e:	3001      	adds	r0, #1
 800fc60:	f43f af45 	beq.w	800faee <_printf_float+0xb6>
 800fc64:	f04f 0900 	mov.w	r9, #0
 800fc68:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc6c:	f104 0a1a 	add.w	sl, r4, #26
 800fc70:	45c8      	cmp	r8, r9
 800fc72:	dc09      	bgt.n	800fc88 <_printf_float+0x250>
 800fc74:	6823      	ldr	r3, [r4, #0]
 800fc76:	079b      	lsls	r3, r3, #30
 800fc78:	f100 8103 	bmi.w	800fe82 <_printf_float+0x44a>
 800fc7c:	68e0      	ldr	r0, [r4, #12]
 800fc7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc80:	4298      	cmp	r0, r3
 800fc82:	bfb8      	it	lt
 800fc84:	4618      	movlt	r0, r3
 800fc86:	e734      	b.n	800faf2 <_printf_float+0xba>
 800fc88:	2301      	movs	r3, #1
 800fc8a:	4652      	mov	r2, sl
 800fc8c:	4631      	mov	r1, r6
 800fc8e:	4628      	mov	r0, r5
 800fc90:	47b8      	blx	r7
 800fc92:	3001      	adds	r0, #1
 800fc94:	f43f af2b 	beq.w	800faee <_printf_float+0xb6>
 800fc98:	f109 0901 	add.w	r9, r9, #1
 800fc9c:	e7e8      	b.n	800fc70 <_printf_float+0x238>
 800fc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	dc39      	bgt.n	800fd18 <_printf_float+0x2e0>
 800fca4:	4a1b      	ldr	r2, [pc, #108]	@ (800fd14 <_printf_float+0x2dc>)
 800fca6:	2301      	movs	r3, #1
 800fca8:	4631      	mov	r1, r6
 800fcaa:	4628      	mov	r0, r5
 800fcac:	47b8      	blx	r7
 800fcae:	3001      	adds	r0, #1
 800fcb0:	f43f af1d 	beq.w	800faee <_printf_float+0xb6>
 800fcb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fcb8:	ea59 0303 	orrs.w	r3, r9, r3
 800fcbc:	d102      	bne.n	800fcc4 <_printf_float+0x28c>
 800fcbe:	6823      	ldr	r3, [r4, #0]
 800fcc0:	07d9      	lsls	r1, r3, #31
 800fcc2:	d5d7      	bpl.n	800fc74 <_printf_float+0x23c>
 800fcc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcc8:	4631      	mov	r1, r6
 800fcca:	4628      	mov	r0, r5
 800fccc:	47b8      	blx	r7
 800fcce:	3001      	adds	r0, #1
 800fcd0:	f43f af0d 	beq.w	800faee <_printf_float+0xb6>
 800fcd4:	f04f 0a00 	mov.w	sl, #0
 800fcd8:	f104 0b1a 	add.w	fp, r4, #26
 800fcdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcde:	425b      	negs	r3, r3
 800fce0:	4553      	cmp	r3, sl
 800fce2:	dc01      	bgt.n	800fce8 <_printf_float+0x2b0>
 800fce4:	464b      	mov	r3, r9
 800fce6:	e793      	b.n	800fc10 <_printf_float+0x1d8>
 800fce8:	2301      	movs	r3, #1
 800fcea:	465a      	mov	r2, fp
 800fcec:	4631      	mov	r1, r6
 800fcee:	4628      	mov	r0, r5
 800fcf0:	47b8      	blx	r7
 800fcf2:	3001      	adds	r0, #1
 800fcf4:	f43f aefb 	beq.w	800faee <_printf_float+0xb6>
 800fcf8:	f10a 0a01 	add.w	sl, sl, #1
 800fcfc:	e7ee      	b.n	800fcdc <_printf_float+0x2a4>
 800fcfe:	bf00      	nop
 800fd00:	7fefffff 	.word	0x7fefffff
 800fd04:	0801249c 	.word	0x0801249c
 800fd08:	080124a0 	.word	0x080124a0
 800fd0c:	080124a4 	.word	0x080124a4
 800fd10:	080124a8 	.word	0x080124a8
 800fd14:	080124ac 	.word	0x080124ac
 800fd18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fd1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fd1e:	4553      	cmp	r3, sl
 800fd20:	bfa8      	it	ge
 800fd22:	4653      	movge	r3, sl
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	4699      	mov	r9, r3
 800fd28:	dc36      	bgt.n	800fd98 <_printf_float+0x360>
 800fd2a:	f04f 0b00 	mov.w	fp, #0
 800fd2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd32:	f104 021a 	add.w	r2, r4, #26
 800fd36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fd38:	9306      	str	r3, [sp, #24]
 800fd3a:	eba3 0309 	sub.w	r3, r3, r9
 800fd3e:	455b      	cmp	r3, fp
 800fd40:	dc31      	bgt.n	800fda6 <_printf_float+0x36e>
 800fd42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd44:	459a      	cmp	sl, r3
 800fd46:	dc3a      	bgt.n	800fdbe <_printf_float+0x386>
 800fd48:	6823      	ldr	r3, [r4, #0]
 800fd4a:	07da      	lsls	r2, r3, #31
 800fd4c:	d437      	bmi.n	800fdbe <_printf_float+0x386>
 800fd4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd50:	ebaa 0903 	sub.w	r9, sl, r3
 800fd54:	9b06      	ldr	r3, [sp, #24]
 800fd56:	ebaa 0303 	sub.w	r3, sl, r3
 800fd5a:	4599      	cmp	r9, r3
 800fd5c:	bfa8      	it	ge
 800fd5e:	4699      	movge	r9, r3
 800fd60:	f1b9 0f00 	cmp.w	r9, #0
 800fd64:	dc33      	bgt.n	800fdce <_printf_float+0x396>
 800fd66:	f04f 0800 	mov.w	r8, #0
 800fd6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd6e:	f104 0b1a 	add.w	fp, r4, #26
 800fd72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd74:	ebaa 0303 	sub.w	r3, sl, r3
 800fd78:	eba3 0309 	sub.w	r3, r3, r9
 800fd7c:	4543      	cmp	r3, r8
 800fd7e:	f77f af79 	ble.w	800fc74 <_printf_float+0x23c>
 800fd82:	2301      	movs	r3, #1
 800fd84:	465a      	mov	r2, fp
 800fd86:	4631      	mov	r1, r6
 800fd88:	4628      	mov	r0, r5
 800fd8a:	47b8      	blx	r7
 800fd8c:	3001      	adds	r0, #1
 800fd8e:	f43f aeae 	beq.w	800faee <_printf_float+0xb6>
 800fd92:	f108 0801 	add.w	r8, r8, #1
 800fd96:	e7ec      	b.n	800fd72 <_printf_float+0x33a>
 800fd98:	4642      	mov	r2, r8
 800fd9a:	4631      	mov	r1, r6
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	47b8      	blx	r7
 800fda0:	3001      	adds	r0, #1
 800fda2:	d1c2      	bne.n	800fd2a <_printf_float+0x2f2>
 800fda4:	e6a3      	b.n	800faee <_printf_float+0xb6>
 800fda6:	2301      	movs	r3, #1
 800fda8:	4631      	mov	r1, r6
 800fdaa:	4628      	mov	r0, r5
 800fdac:	9206      	str	r2, [sp, #24]
 800fdae:	47b8      	blx	r7
 800fdb0:	3001      	adds	r0, #1
 800fdb2:	f43f ae9c 	beq.w	800faee <_printf_float+0xb6>
 800fdb6:	9a06      	ldr	r2, [sp, #24]
 800fdb8:	f10b 0b01 	add.w	fp, fp, #1
 800fdbc:	e7bb      	b.n	800fd36 <_printf_float+0x2fe>
 800fdbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdc2:	4631      	mov	r1, r6
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	47b8      	blx	r7
 800fdc8:	3001      	adds	r0, #1
 800fdca:	d1c0      	bne.n	800fd4e <_printf_float+0x316>
 800fdcc:	e68f      	b.n	800faee <_printf_float+0xb6>
 800fdce:	9a06      	ldr	r2, [sp, #24]
 800fdd0:	464b      	mov	r3, r9
 800fdd2:	4442      	add	r2, r8
 800fdd4:	4631      	mov	r1, r6
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	47b8      	blx	r7
 800fdda:	3001      	adds	r0, #1
 800fddc:	d1c3      	bne.n	800fd66 <_printf_float+0x32e>
 800fdde:	e686      	b.n	800faee <_printf_float+0xb6>
 800fde0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fde4:	f1ba 0f01 	cmp.w	sl, #1
 800fde8:	dc01      	bgt.n	800fdee <_printf_float+0x3b6>
 800fdea:	07db      	lsls	r3, r3, #31
 800fdec:	d536      	bpl.n	800fe5c <_printf_float+0x424>
 800fdee:	2301      	movs	r3, #1
 800fdf0:	4642      	mov	r2, r8
 800fdf2:	4631      	mov	r1, r6
 800fdf4:	4628      	mov	r0, r5
 800fdf6:	47b8      	blx	r7
 800fdf8:	3001      	adds	r0, #1
 800fdfa:	f43f ae78 	beq.w	800faee <_printf_float+0xb6>
 800fdfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe02:	4631      	mov	r1, r6
 800fe04:	4628      	mov	r0, r5
 800fe06:	47b8      	blx	r7
 800fe08:	3001      	adds	r0, #1
 800fe0a:	f43f ae70 	beq.w	800faee <_printf_float+0xb6>
 800fe0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fe12:	2200      	movs	r2, #0
 800fe14:	2300      	movs	r3, #0
 800fe16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe1a:	f7f0 fe65 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe1e:	b9c0      	cbnz	r0, 800fe52 <_printf_float+0x41a>
 800fe20:	4653      	mov	r3, sl
 800fe22:	f108 0201 	add.w	r2, r8, #1
 800fe26:	4631      	mov	r1, r6
 800fe28:	4628      	mov	r0, r5
 800fe2a:	47b8      	blx	r7
 800fe2c:	3001      	adds	r0, #1
 800fe2e:	d10c      	bne.n	800fe4a <_printf_float+0x412>
 800fe30:	e65d      	b.n	800faee <_printf_float+0xb6>
 800fe32:	2301      	movs	r3, #1
 800fe34:	465a      	mov	r2, fp
 800fe36:	4631      	mov	r1, r6
 800fe38:	4628      	mov	r0, r5
 800fe3a:	47b8      	blx	r7
 800fe3c:	3001      	adds	r0, #1
 800fe3e:	f43f ae56 	beq.w	800faee <_printf_float+0xb6>
 800fe42:	f108 0801 	add.w	r8, r8, #1
 800fe46:	45d0      	cmp	r8, sl
 800fe48:	dbf3      	blt.n	800fe32 <_printf_float+0x3fa>
 800fe4a:	464b      	mov	r3, r9
 800fe4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fe50:	e6df      	b.n	800fc12 <_printf_float+0x1da>
 800fe52:	f04f 0800 	mov.w	r8, #0
 800fe56:	f104 0b1a 	add.w	fp, r4, #26
 800fe5a:	e7f4      	b.n	800fe46 <_printf_float+0x40e>
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	4642      	mov	r2, r8
 800fe60:	e7e1      	b.n	800fe26 <_printf_float+0x3ee>
 800fe62:	2301      	movs	r3, #1
 800fe64:	464a      	mov	r2, r9
 800fe66:	4631      	mov	r1, r6
 800fe68:	4628      	mov	r0, r5
 800fe6a:	47b8      	blx	r7
 800fe6c:	3001      	adds	r0, #1
 800fe6e:	f43f ae3e 	beq.w	800faee <_printf_float+0xb6>
 800fe72:	f108 0801 	add.w	r8, r8, #1
 800fe76:	68e3      	ldr	r3, [r4, #12]
 800fe78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe7a:	1a5b      	subs	r3, r3, r1
 800fe7c:	4543      	cmp	r3, r8
 800fe7e:	dcf0      	bgt.n	800fe62 <_printf_float+0x42a>
 800fe80:	e6fc      	b.n	800fc7c <_printf_float+0x244>
 800fe82:	f04f 0800 	mov.w	r8, #0
 800fe86:	f104 0919 	add.w	r9, r4, #25
 800fe8a:	e7f4      	b.n	800fe76 <_printf_float+0x43e>

0800fe8c <_printf_common>:
 800fe8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe90:	4616      	mov	r6, r2
 800fe92:	4698      	mov	r8, r3
 800fe94:	688a      	ldr	r2, [r1, #8]
 800fe96:	690b      	ldr	r3, [r1, #16]
 800fe98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	bfb8      	it	lt
 800fea0:	4613      	movlt	r3, r2
 800fea2:	6033      	str	r3, [r6, #0]
 800fea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fea8:	4607      	mov	r7, r0
 800feaa:	460c      	mov	r4, r1
 800feac:	b10a      	cbz	r2, 800feb2 <_printf_common+0x26>
 800feae:	3301      	adds	r3, #1
 800feb0:	6033      	str	r3, [r6, #0]
 800feb2:	6823      	ldr	r3, [r4, #0]
 800feb4:	0699      	lsls	r1, r3, #26
 800feb6:	bf42      	ittt	mi
 800feb8:	6833      	ldrmi	r3, [r6, #0]
 800feba:	3302      	addmi	r3, #2
 800febc:	6033      	strmi	r3, [r6, #0]
 800febe:	6825      	ldr	r5, [r4, #0]
 800fec0:	f015 0506 	ands.w	r5, r5, #6
 800fec4:	d106      	bne.n	800fed4 <_printf_common+0x48>
 800fec6:	f104 0a19 	add.w	sl, r4, #25
 800feca:	68e3      	ldr	r3, [r4, #12]
 800fecc:	6832      	ldr	r2, [r6, #0]
 800fece:	1a9b      	subs	r3, r3, r2
 800fed0:	42ab      	cmp	r3, r5
 800fed2:	dc26      	bgt.n	800ff22 <_printf_common+0x96>
 800fed4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fed8:	6822      	ldr	r2, [r4, #0]
 800feda:	3b00      	subs	r3, #0
 800fedc:	bf18      	it	ne
 800fede:	2301      	movne	r3, #1
 800fee0:	0692      	lsls	r2, r2, #26
 800fee2:	d42b      	bmi.n	800ff3c <_printf_common+0xb0>
 800fee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fee8:	4641      	mov	r1, r8
 800feea:	4638      	mov	r0, r7
 800feec:	47c8      	blx	r9
 800feee:	3001      	adds	r0, #1
 800fef0:	d01e      	beq.n	800ff30 <_printf_common+0xa4>
 800fef2:	6823      	ldr	r3, [r4, #0]
 800fef4:	6922      	ldr	r2, [r4, #16]
 800fef6:	f003 0306 	and.w	r3, r3, #6
 800fefa:	2b04      	cmp	r3, #4
 800fefc:	bf02      	ittt	eq
 800fefe:	68e5      	ldreq	r5, [r4, #12]
 800ff00:	6833      	ldreq	r3, [r6, #0]
 800ff02:	1aed      	subeq	r5, r5, r3
 800ff04:	68a3      	ldr	r3, [r4, #8]
 800ff06:	bf0c      	ite	eq
 800ff08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff0c:	2500      	movne	r5, #0
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	bfc4      	itt	gt
 800ff12:	1a9b      	subgt	r3, r3, r2
 800ff14:	18ed      	addgt	r5, r5, r3
 800ff16:	2600      	movs	r6, #0
 800ff18:	341a      	adds	r4, #26
 800ff1a:	42b5      	cmp	r5, r6
 800ff1c:	d11a      	bne.n	800ff54 <_printf_common+0xc8>
 800ff1e:	2000      	movs	r0, #0
 800ff20:	e008      	b.n	800ff34 <_printf_common+0xa8>
 800ff22:	2301      	movs	r3, #1
 800ff24:	4652      	mov	r2, sl
 800ff26:	4641      	mov	r1, r8
 800ff28:	4638      	mov	r0, r7
 800ff2a:	47c8      	blx	r9
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	d103      	bne.n	800ff38 <_printf_common+0xac>
 800ff30:	f04f 30ff 	mov.w	r0, #4294967295
 800ff34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff38:	3501      	adds	r5, #1
 800ff3a:	e7c6      	b.n	800feca <_printf_common+0x3e>
 800ff3c:	18e1      	adds	r1, r4, r3
 800ff3e:	1c5a      	adds	r2, r3, #1
 800ff40:	2030      	movs	r0, #48	@ 0x30
 800ff42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ff46:	4422      	add	r2, r4
 800ff48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ff4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff50:	3302      	adds	r3, #2
 800ff52:	e7c7      	b.n	800fee4 <_printf_common+0x58>
 800ff54:	2301      	movs	r3, #1
 800ff56:	4622      	mov	r2, r4
 800ff58:	4641      	mov	r1, r8
 800ff5a:	4638      	mov	r0, r7
 800ff5c:	47c8      	blx	r9
 800ff5e:	3001      	adds	r0, #1
 800ff60:	d0e6      	beq.n	800ff30 <_printf_common+0xa4>
 800ff62:	3601      	adds	r6, #1
 800ff64:	e7d9      	b.n	800ff1a <_printf_common+0x8e>
	...

0800ff68 <_printf_i>:
 800ff68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff6c:	7e0f      	ldrb	r7, [r1, #24]
 800ff6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff70:	2f78      	cmp	r7, #120	@ 0x78
 800ff72:	4691      	mov	r9, r2
 800ff74:	4680      	mov	r8, r0
 800ff76:	460c      	mov	r4, r1
 800ff78:	469a      	mov	sl, r3
 800ff7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff7e:	d807      	bhi.n	800ff90 <_printf_i+0x28>
 800ff80:	2f62      	cmp	r7, #98	@ 0x62
 800ff82:	d80a      	bhi.n	800ff9a <_printf_i+0x32>
 800ff84:	2f00      	cmp	r7, #0
 800ff86:	f000 80d2 	beq.w	801012e <_printf_i+0x1c6>
 800ff8a:	2f58      	cmp	r7, #88	@ 0x58
 800ff8c:	f000 80b9 	beq.w	8010102 <_printf_i+0x19a>
 800ff90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ff98:	e03a      	b.n	8010010 <_printf_i+0xa8>
 800ff9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ff9e:	2b15      	cmp	r3, #21
 800ffa0:	d8f6      	bhi.n	800ff90 <_printf_i+0x28>
 800ffa2:	a101      	add	r1, pc, #4	@ (adr r1, 800ffa8 <_printf_i+0x40>)
 800ffa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffa8:	08010001 	.word	0x08010001
 800ffac:	08010015 	.word	0x08010015
 800ffb0:	0800ff91 	.word	0x0800ff91
 800ffb4:	0800ff91 	.word	0x0800ff91
 800ffb8:	0800ff91 	.word	0x0800ff91
 800ffbc:	0800ff91 	.word	0x0800ff91
 800ffc0:	08010015 	.word	0x08010015
 800ffc4:	0800ff91 	.word	0x0800ff91
 800ffc8:	0800ff91 	.word	0x0800ff91
 800ffcc:	0800ff91 	.word	0x0800ff91
 800ffd0:	0800ff91 	.word	0x0800ff91
 800ffd4:	08010115 	.word	0x08010115
 800ffd8:	0801003f 	.word	0x0801003f
 800ffdc:	080100cf 	.word	0x080100cf
 800ffe0:	0800ff91 	.word	0x0800ff91
 800ffe4:	0800ff91 	.word	0x0800ff91
 800ffe8:	08010137 	.word	0x08010137
 800ffec:	0800ff91 	.word	0x0800ff91
 800fff0:	0801003f 	.word	0x0801003f
 800fff4:	0800ff91 	.word	0x0800ff91
 800fff8:	0800ff91 	.word	0x0800ff91
 800fffc:	080100d7 	.word	0x080100d7
 8010000:	6833      	ldr	r3, [r6, #0]
 8010002:	1d1a      	adds	r2, r3, #4
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	6032      	str	r2, [r6, #0]
 8010008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801000c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010010:	2301      	movs	r3, #1
 8010012:	e09d      	b.n	8010150 <_printf_i+0x1e8>
 8010014:	6833      	ldr	r3, [r6, #0]
 8010016:	6820      	ldr	r0, [r4, #0]
 8010018:	1d19      	adds	r1, r3, #4
 801001a:	6031      	str	r1, [r6, #0]
 801001c:	0606      	lsls	r6, r0, #24
 801001e:	d501      	bpl.n	8010024 <_printf_i+0xbc>
 8010020:	681d      	ldr	r5, [r3, #0]
 8010022:	e003      	b.n	801002c <_printf_i+0xc4>
 8010024:	0645      	lsls	r5, r0, #25
 8010026:	d5fb      	bpl.n	8010020 <_printf_i+0xb8>
 8010028:	f9b3 5000 	ldrsh.w	r5, [r3]
 801002c:	2d00      	cmp	r5, #0
 801002e:	da03      	bge.n	8010038 <_printf_i+0xd0>
 8010030:	232d      	movs	r3, #45	@ 0x2d
 8010032:	426d      	negs	r5, r5
 8010034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010038:	4859      	ldr	r0, [pc, #356]	@ (80101a0 <_printf_i+0x238>)
 801003a:	230a      	movs	r3, #10
 801003c:	e011      	b.n	8010062 <_printf_i+0xfa>
 801003e:	6821      	ldr	r1, [r4, #0]
 8010040:	6833      	ldr	r3, [r6, #0]
 8010042:	0608      	lsls	r0, r1, #24
 8010044:	f853 5b04 	ldr.w	r5, [r3], #4
 8010048:	d402      	bmi.n	8010050 <_printf_i+0xe8>
 801004a:	0649      	lsls	r1, r1, #25
 801004c:	bf48      	it	mi
 801004e:	b2ad      	uxthmi	r5, r5
 8010050:	2f6f      	cmp	r7, #111	@ 0x6f
 8010052:	4853      	ldr	r0, [pc, #332]	@ (80101a0 <_printf_i+0x238>)
 8010054:	6033      	str	r3, [r6, #0]
 8010056:	bf14      	ite	ne
 8010058:	230a      	movne	r3, #10
 801005a:	2308      	moveq	r3, #8
 801005c:	2100      	movs	r1, #0
 801005e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010062:	6866      	ldr	r6, [r4, #4]
 8010064:	60a6      	str	r6, [r4, #8]
 8010066:	2e00      	cmp	r6, #0
 8010068:	bfa2      	ittt	ge
 801006a:	6821      	ldrge	r1, [r4, #0]
 801006c:	f021 0104 	bicge.w	r1, r1, #4
 8010070:	6021      	strge	r1, [r4, #0]
 8010072:	b90d      	cbnz	r5, 8010078 <_printf_i+0x110>
 8010074:	2e00      	cmp	r6, #0
 8010076:	d04b      	beq.n	8010110 <_printf_i+0x1a8>
 8010078:	4616      	mov	r6, r2
 801007a:	fbb5 f1f3 	udiv	r1, r5, r3
 801007e:	fb03 5711 	mls	r7, r3, r1, r5
 8010082:	5dc7      	ldrb	r7, [r0, r7]
 8010084:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010088:	462f      	mov	r7, r5
 801008a:	42bb      	cmp	r3, r7
 801008c:	460d      	mov	r5, r1
 801008e:	d9f4      	bls.n	801007a <_printf_i+0x112>
 8010090:	2b08      	cmp	r3, #8
 8010092:	d10b      	bne.n	80100ac <_printf_i+0x144>
 8010094:	6823      	ldr	r3, [r4, #0]
 8010096:	07df      	lsls	r7, r3, #31
 8010098:	d508      	bpl.n	80100ac <_printf_i+0x144>
 801009a:	6923      	ldr	r3, [r4, #16]
 801009c:	6861      	ldr	r1, [r4, #4]
 801009e:	4299      	cmp	r1, r3
 80100a0:	bfde      	ittt	le
 80100a2:	2330      	movle	r3, #48	@ 0x30
 80100a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80100a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80100ac:	1b92      	subs	r2, r2, r6
 80100ae:	6122      	str	r2, [r4, #16]
 80100b0:	f8cd a000 	str.w	sl, [sp]
 80100b4:	464b      	mov	r3, r9
 80100b6:	aa03      	add	r2, sp, #12
 80100b8:	4621      	mov	r1, r4
 80100ba:	4640      	mov	r0, r8
 80100bc:	f7ff fee6 	bl	800fe8c <_printf_common>
 80100c0:	3001      	adds	r0, #1
 80100c2:	d14a      	bne.n	801015a <_printf_i+0x1f2>
 80100c4:	f04f 30ff 	mov.w	r0, #4294967295
 80100c8:	b004      	add	sp, #16
 80100ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ce:	6823      	ldr	r3, [r4, #0]
 80100d0:	f043 0320 	orr.w	r3, r3, #32
 80100d4:	6023      	str	r3, [r4, #0]
 80100d6:	4833      	ldr	r0, [pc, #204]	@ (80101a4 <_printf_i+0x23c>)
 80100d8:	2778      	movs	r7, #120	@ 0x78
 80100da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80100de:	6823      	ldr	r3, [r4, #0]
 80100e0:	6831      	ldr	r1, [r6, #0]
 80100e2:	061f      	lsls	r7, r3, #24
 80100e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80100e8:	d402      	bmi.n	80100f0 <_printf_i+0x188>
 80100ea:	065f      	lsls	r7, r3, #25
 80100ec:	bf48      	it	mi
 80100ee:	b2ad      	uxthmi	r5, r5
 80100f0:	6031      	str	r1, [r6, #0]
 80100f2:	07d9      	lsls	r1, r3, #31
 80100f4:	bf44      	itt	mi
 80100f6:	f043 0320 	orrmi.w	r3, r3, #32
 80100fa:	6023      	strmi	r3, [r4, #0]
 80100fc:	b11d      	cbz	r5, 8010106 <_printf_i+0x19e>
 80100fe:	2310      	movs	r3, #16
 8010100:	e7ac      	b.n	801005c <_printf_i+0xf4>
 8010102:	4827      	ldr	r0, [pc, #156]	@ (80101a0 <_printf_i+0x238>)
 8010104:	e7e9      	b.n	80100da <_printf_i+0x172>
 8010106:	6823      	ldr	r3, [r4, #0]
 8010108:	f023 0320 	bic.w	r3, r3, #32
 801010c:	6023      	str	r3, [r4, #0]
 801010e:	e7f6      	b.n	80100fe <_printf_i+0x196>
 8010110:	4616      	mov	r6, r2
 8010112:	e7bd      	b.n	8010090 <_printf_i+0x128>
 8010114:	6833      	ldr	r3, [r6, #0]
 8010116:	6825      	ldr	r5, [r4, #0]
 8010118:	6961      	ldr	r1, [r4, #20]
 801011a:	1d18      	adds	r0, r3, #4
 801011c:	6030      	str	r0, [r6, #0]
 801011e:	062e      	lsls	r6, r5, #24
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	d501      	bpl.n	8010128 <_printf_i+0x1c0>
 8010124:	6019      	str	r1, [r3, #0]
 8010126:	e002      	b.n	801012e <_printf_i+0x1c6>
 8010128:	0668      	lsls	r0, r5, #25
 801012a:	d5fb      	bpl.n	8010124 <_printf_i+0x1bc>
 801012c:	8019      	strh	r1, [r3, #0]
 801012e:	2300      	movs	r3, #0
 8010130:	6123      	str	r3, [r4, #16]
 8010132:	4616      	mov	r6, r2
 8010134:	e7bc      	b.n	80100b0 <_printf_i+0x148>
 8010136:	6833      	ldr	r3, [r6, #0]
 8010138:	1d1a      	adds	r2, r3, #4
 801013a:	6032      	str	r2, [r6, #0]
 801013c:	681e      	ldr	r6, [r3, #0]
 801013e:	6862      	ldr	r2, [r4, #4]
 8010140:	2100      	movs	r1, #0
 8010142:	4630      	mov	r0, r6
 8010144:	f7f0 f854 	bl	80001f0 <memchr>
 8010148:	b108      	cbz	r0, 801014e <_printf_i+0x1e6>
 801014a:	1b80      	subs	r0, r0, r6
 801014c:	6060      	str	r0, [r4, #4]
 801014e:	6863      	ldr	r3, [r4, #4]
 8010150:	6123      	str	r3, [r4, #16]
 8010152:	2300      	movs	r3, #0
 8010154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010158:	e7aa      	b.n	80100b0 <_printf_i+0x148>
 801015a:	6923      	ldr	r3, [r4, #16]
 801015c:	4632      	mov	r2, r6
 801015e:	4649      	mov	r1, r9
 8010160:	4640      	mov	r0, r8
 8010162:	47d0      	blx	sl
 8010164:	3001      	adds	r0, #1
 8010166:	d0ad      	beq.n	80100c4 <_printf_i+0x15c>
 8010168:	6823      	ldr	r3, [r4, #0]
 801016a:	079b      	lsls	r3, r3, #30
 801016c:	d413      	bmi.n	8010196 <_printf_i+0x22e>
 801016e:	68e0      	ldr	r0, [r4, #12]
 8010170:	9b03      	ldr	r3, [sp, #12]
 8010172:	4298      	cmp	r0, r3
 8010174:	bfb8      	it	lt
 8010176:	4618      	movlt	r0, r3
 8010178:	e7a6      	b.n	80100c8 <_printf_i+0x160>
 801017a:	2301      	movs	r3, #1
 801017c:	4632      	mov	r2, r6
 801017e:	4649      	mov	r1, r9
 8010180:	4640      	mov	r0, r8
 8010182:	47d0      	blx	sl
 8010184:	3001      	adds	r0, #1
 8010186:	d09d      	beq.n	80100c4 <_printf_i+0x15c>
 8010188:	3501      	adds	r5, #1
 801018a:	68e3      	ldr	r3, [r4, #12]
 801018c:	9903      	ldr	r1, [sp, #12]
 801018e:	1a5b      	subs	r3, r3, r1
 8010190:	42ab      	cmp	r3, r5
 8010192:	dcf2      	bgt.n	801017a <_printf_i+0x212>
 8010194:	e7eb      	b.n	801016e <_printf_i+0x206>
 8010196:	2500      	movs	r5, #0
 8010198:	f104 0619 	add.w	r6, r4, #25
 801019c:	e7f5      	b.n	801018a <_printf_i+0x222>
 801019e:	bf00      	nop
 80101a0:	080124ae 	.word	0x080124ae
 80101a4:	080124bf 	.word	0x080124bf

080101a8 <std>:
 80101a8:	2300      	movs	r3, #0
 80101aa:	b510      	push	{r4, lr}
 80101ac:	4604      	mov	r4, r0
 80101ae:	e9c0 3300 	strd	r3, r3, [r0]
 80101b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101b6:	6083      	str	r3, [r0, #8]
 80101b8:	8181      	strh	r1, [r0, #12]
 80101ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80101bc:	81c2      	strh	r2, [r0, #14]
 80101be:	6183      	str	r3, [r0, #24]
 80101c0:	4619      	mov	r1, r3
 80101c2:	2208      	movs	r2, #8
 80101c4:	305c      	adds	r0, #92	@ 0x5c
 80101c6:	f000 f8f4 	bl	80103b2 <memset>
 80101ca:	4b0d      	ldr	r3, [pc, #52]	@ (8010200 <std+0x58>)
 80101cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80101ce:	4b0d      	ldr	r3, [pc, #52]	@ (8010204 <std+0x5c>)
 80101d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80101d2:	4b0d      	ldr	r3, [pc, #52]	@ (8010208 <std+0x60>)
 80101d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80101d6:	4b0d      	ldr	r3, [pc, #52]	@ (801020c <std+0x64>)
 80101d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80101da:	4b0d      	ldr	r3, [pc, #52]	@ (8010210 <std+0x68>)
 80101dc:	6224      	str	r4, [r4, #32]
 80101de:	429c      	cmp	r4, r3
 80101e0:	d006      	beq.n	80101f0 <std+0x48>
 80101e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80101e6:	4294      	cmp	r4, r2
 80101e8:	d002      	beq.n	80101f0 <std+0x48>
 80101ea:	33d0      	adds	r3, #208	@ 0xd0
 80101ec:	429c      	cmp	r4, r3
 80101ee:	d105      	bne.n	80101fc <std+0x54>
 80101f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80101f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101f8:	f000 b9ae 	b.w	8010558 <__retarget_lock_init_recursive>
 80101fc:	bd10      	pop	{r4, pc}
 80101fe:	bf00      	nop
 8010200:	0801032d 	.word	0x0801032d
 8010204:	0801034f 	.word	0x0801034f
 8010208:	08010387 	.word	0x08010387
 801020c:	080103ab 	.word	0x080103ab
 8010210:	20004680 	.word	0x20004680

08010214 <stdio_exit_handler>:
 8010214:	4a02      	ldr	r2, [pc, #8]	@ (8010220 <stdio_exit_handler+0xc>)
 8010216:	4903      	ldr	r1, [pc, #12]	@ (8010224 <stdio_exit_handler+0x10>)
 8010218:	4803      	ldr	r0, [pc, #12]	@ (8010228 <stdio_exit_handler+0x14>)
 801021a:	f000 b869 	b.w	80102f0 <_fwalk_sglue>
 801021e:	bf00      	nop
 8010220:	20000118 	.word	0x20000118
 8010224:	08011c25 	.word	0x08011c25
 8010228:	20000128 	.word	0x20000128

0801022c <cleanup_stdio>:
 801022c:	6841      	ldr	r1, [r0, #4]
 801022e:	4b0c      	ldr	r3, [pc, #48]	@ (8010260 <cleanup_stdio+0x34>)
 8010230:	4299      	cmp	r1, r3
 8010232:	b510      	push	{r4, lr}
 8010234:	4604      	mov	r4, r0
 8010236:	d001      	beq.n	801023c <cleanup_stdio+0x10>
 8010238:	f001 fcf4 	bl	8011c24 <_fflush_r>
 801023c:	68a1      	ldr	r1, [r4, #8]
 801023e:	4b09      	ldr	r3, [pc, #36]	@ (8010264 <cleanup_stdio+0x38>)
 8010240:	4299      	cmp	r1, r3
 8010242:	d002      	beq.n	801024a <cleanup_stdio+0x1e>
 8010244:	4620      	mov	r0, r4
 8010246:	f001 fced 	bl	8011c24 <_fflush_r>
 801024a:	68e1      	ldr	r1, [r4, #12]
 801024c:	4b06      	ldr	r3, [pc, #24]	@ (8010268 <cleanup_stdio+0x3c>)
 801024e:	4299      	cmp	r1, r3
 8010250:	d004      	beq.n	801025c <cleanup_stdio+0x30>
 8010252:	4620      	mov	r0, r4
 8010254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010258:	f001 bce4 	b.w	8011c24 <_fflush_r>
 801025c:	bd10      	pop	{r4, pc}
 801025e:	bf00      	nop
 8010260:	20004680 	.word	0x20004680
 8010264:	200046e8 	.word	0x200046e8
 8010268:	20004750 	.word	0x20004750

0801026c <global_stdio_init.part.0>:
 801026c:	b510      	push	{r4, lr}
 801026e:	4b0b      	ldr	r3, [pc, #44]	@ (801029c <global_stdio_init.part.0+0x30>)
 8010270:	4c0b      	ldr	r4, [pc, #44]	@ (80102a0 <global_stdio_init.part.0+0x34>)
 8010272:	4a0c      	ldr	r2, [pc, #48]	@ (80102a4 <global_stdio_init.part.0+0x38>)
 8010274:	601a      	str	r2, [r3, #0]
 8010276:	4620      	mov	r0, r4
 8010278:	2200      	movs	r2, #0
 801027a:	2104      	movs	r1, #4
 801027c:	f7ff ff94 	bl	80101a8 <std>
 8010280:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010284:	2201      	movs	r2, #1
 8010286:	2109      	movs	r1, #9
 8010288:	f7ff ff8e 	bl	80101a8 <std>
 801028c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010290:	2202      	movs	r2, #2
 8010292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010296:	2112      	movs	r1, #18
 8010298:	f7ff bf86 	b.w	80101a8 <std>
 801029c:	200047b8 	.word	0x200047b8
 80102a0:	20004680 	.word	0x20004680
 80102a4:	08010215 	.word	0x08010215

080102a8 <__sfp_lock_acquire>:
 80102a8:	4801      	ldr	r0, [pc, #4]	@ (80102b0 <__sfp_lock_acquire+0x8>)
 80102aa:	f000 b956 	b.w	801055a <__retarget_lock_acquire_recursive>
 80102ae:	bf00      	nop
 80102b0:	200047c1 	.word	0x200047c1

080102b4 <__sfp_lock_release>:
 80102b4:	4801      	ldr	r0, [pc, #4]	@ (80102bc <__sfp_lock_release+0x8>)
 80102b6:	f000 b951 	b.w	801055c <__retarget_lock_release_recursive>
 80102ba:	bf00      	nop
 80102bc:	200047c1 	.word	0x200047c1

080102c0 <__sinit>:
 80102c0:	b510      	push	{r4, lr}
 80102c2:	4604      	mov	r4, r0
 80102c4:	f7ff fff0 	bl	80102a8 <__sfp_lock_acquire>
 80102c8:	6a23      	ldr	r3, [r4, #32]
 80102ca:	b11b      	cbz	r3, 80102d4 <__sinit+0x14>
 80102cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102d0:	f7ff bff0 	b.w	80102b4 <__sfp_lock_release>
 80102d4:	4b04      	ldr	r3, [pc, #16]	@ (80102e8 <__sinit+0x28>)
 80102d6:	6223      	str	r3, [r4, #32]
 80102d8:	4b04      	ldr	r3, [pc, #16]	@ (80102ec <__sinit+0x2c>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d1f5      	bne.n	80102cc <__sinit+0xc>
 80102e0:	f7ff ffc4 	bl	801026c <global_stdio_init.part.0>
 80102e4:	e7f2      	b.n	80102cc <__sinit+0xc>
 80102e6:	bf00      	nop
 80102e8:	0801022d 	.word	0x0801022d
 80102ec:	200047b8 	.word	0x200047b8

080102f0 <_fwalk_sglue>:
 80102f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102f4:	4607      	mov	r7, r0
 80102f6:	4688      	mov	r8, r1
 80102f8:	4614      	mov	r4, r2
 80102fa:	2600      	movs	r6, #0
 80102fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010300:	f1b9 0901 	subs.w	r9, r9, #1
 8010304:	d505      	bpl.n	8010312 <_fwalk_sglue+0x22>
 8010306:	6824      	ldr	r4, [r4, #0]
 8010308:	2c00      	cmp	r4, #0
 801030a:	d1f7      	bne.n	80102fc <_fwalk_sglue+0xc>
 801030c:	4630      	mov	r0, r6
 801030e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010312:	89ab      	ldrh	r3, [r5, #12]
 8010314:	2b01      	cmp	r3, #1
 8010316:	d907      	bls.n	8010328 <_fwalk_sglue+0x38>
 8010318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801031c:	3301      	adds	r3, #1
 801031e:	d003      	beq.n	8010328 <_fwalk_sglue+0x38>
 8010320:	4629      	mov	r1, r5
 8010322:	4638      	mov	r0, r7
 8010324:	47c0      	blx	r8
 8010326:	4306      	orrs	r6, r0
 8010328:	3568      	adds	r5, #104	@ 0x68
 801032a:	e7e9      	b.n	8010300 <_fwalk_sglue+0x10>

0801032c <__sread>:
 801032c:	b510      	push	{r4, lr}
 801032e:	460c      	mov	r4, r1
 8010330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010334:	f000 f8c2 	bl	80104bc <_read_r>
 8010338:	2800      	cmp	r0, #0
 801033a:	bfab      	itete	ge
 801033c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801033e:	89a3      	ldrhlt	r3, [r4, #12]
 8010340:	181b      	addge	r3, r3, r0
 8010342:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010346:	bfac      	ite	ge
 8010348:	6563      	strge	r3, [r4, #84]	@ 0x54
 801034a:	81a3      	strhlt	r3, [r4, #12]
 801034c:	bd10      	pop	{r4, pc}

0801034e <__swrite>:
 801034e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010352:	461f      	mov	r7, r3
 8010354:	898b      	ldrh	r3, [r1, #12]
 8010356:	05db      	lsls	r3, r3, #23
 8010358:	4605      	mov	r5, r0
 801035a:	460c      	mov	r4, r1
 801035c:	4616      	mov	r6, r2
 801035e:	d505      	bpl.n	801036c <__swrite+0x1e>
 8010360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010364:	2302      	movs	r3, #2
 8010366:	2200      	movs	r2, #0
 8010368:	f000 f896 	bl	8010498 <_lseek_r>
 801036c:	89a3      	ldrh	r3, [r4, #12]
 801036e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010372:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010376:	81a3      	strh	r3, [r4, #12]
 8010378:	4632      	mov	r2, r6
 801037a:	463b      	mov	r3, r7
 801037c:	4628      	mov	r0, r5
 801037e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010382:	f000 b8ad 	b.w	80104e0 <_write_r>

08010386 <__sseek>:
 8010386:	b510      	push	{r4, lr}
 8010388:	460c      	mov	r4, r1
 801038a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801038e:	f000 f883 	bl	8010498 <_lseek_r>
 8010392:	1c43      	adds	r3, r0, #1
 8010394:	89a3      	ldrh	r3, [r4, #12]
 8010396:	bf15      	itete	ne
 8010398:	6560      	strne	r0, [r4, #84]	@ 0x54
 801039a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801039e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80103a2:	81a3      	strheq	r3, [r4, #12]
 80103a4:	bf18      	it	ne
 80103a6:	81a3      	strhne	r3, [r4, #12]
 80103a8:	bd10      	pop	{r4, pc}

080103aa <__sclose>:
 80103aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103ae:	f000 b80d 	b.w	80103cc <_close_r>

080103b2 <memset>:
 80103b2:	4402      	add	r2, r0
 80103b4:	4603      	mov	r3, r0
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d100      	bne.n	80103bc <memset+0xa>
 80103ba:	4770      	bx	lr
 80103bc:	f803 1b01 	strb.w	r1, [r3], #1
 80103c0:	e7f9      	b.n	80103b6 <memset+0x4>
	...

080103c4 <_localeconv_r>:
 80103c4:	4800      	ldr	r0, [pc, #0]	@ (80103c8 <_localeconv_r+0x4>)
 80103c6:	4770      	bx	lr
 80103c8:	20000264 	.word	0x20000264

080103cc <_close_r>:
 80103cc:	b538      	push	{r3, r4, r5, lr}
 80103ce:	4d06      	ldr	r5, [pc, #24]	@ (80103e8 <_close_r+0x1c>)
 80103d0:	2300      	movs	r3, #0
 80103d2:	4604      	mov	r4, r0
 80103d4:	4608      	mov	r0, r1
 80103d6:	602b      	str	r3, [r5, #0]
 80103d8:	f7f2 fd28 	bl	8002e2c <_close>
 80103dc:	1c43      	adds	r3, r0, #1
 80103de:	d102      	bne.n	80103e6 <_close_r+0x1a>
 80103e0:	682b      	ldr	r3, [r5, #0]
 80103e2:	b103      	cbz	r3, 80103e6 <_close_r+0x1a>
 80103e4:	6023      	str	r3, [r4, #0]
 80103e6:	bd38      	pop	{r3, r4, r5, pc}
 80103e8:	200047bc 	.word	0x200047bc

080103ec <_reclaim_reent>:
 80103ec:	4b29      	ldr	r3, [pc, #164]	@ (8010494 <_reclaim_reent+0xa8>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	4283      	cmp	r3, r0
 80103f2:	b570      	push	{r4, r5, r6, lr}
 80103f4:	4604      	mov	r4, r0
 80103f6:	d04b      	beq.n	8010490 <_reclaim_reent+0xa4>
 80103f8:	69c3      	ldr	r3, [r0, #28]
 80103fa:	b1ab      	cbz	r3, 8010428 <_reclaim_reent+0x3c>
 80103fc:	68db      	ldr	r3, [r3, #12]
 80103fe:	b16b      	cbz	r3, 801041c <_reclaim_reent+0x30>
 8010400:	2500      	movs	r5, #0
 8010402:	69e3      	ldr	r3, [r4, #28]
 8010404:	68db      	ldr	r3, [r3, #12]
 8010406:	5959      	ldr	r1, [r3, r5]
 8010408:	2900      	cmp	r1, #0
 801040a:	d13b      	bne.n	8010484 <_reclaim_reent+0x98>
 801040c:	3504      	adds	r5, #4
 801040e:	2d80      	cmp	r5, #128	@ 0x80
 8010410:	d1f7      	bne.n	8010402 <_reclaim_reent+0x16>
 8010412:	69e3      	ldr	r3, [r4, #28]
 8010414:	4620      	mov	r0, r4
 8010416:	68d9      	ldr	r1, [r3, #12]
 8010418:	f000 fefe 	bl	8011218 <_free_r>
 801041c:	69e3      	ldr	r3, [r4, #28]
 801041e:	6819      	ldr	r1, [r3, #0]
 8010420:	b111      	cbz	r1, 8010428 <_reclaim_reent+0x3c>
 8010422:	4620      	mov	r0, r4
 8010424:	f000 fef8 	bl	8011218 <_free_r>
 8010428:	6961      	ldr	r1, [r4, #20]
 801042a:	b111      	cbz	r1, 8010432 <_reclaim_reent+0x46>
 801042c:	4620      	mov	r0, r4
 801042e:	f000 fef3 	bl	8011218 <_free_r>
 8010432:	69e1      	ldr	r1, [r4, #28]
 8010434:	b111      	cbz	r1, 801043c <_reclaim_reent+0x50>
 8010436:	4620      	mov	r0, r4
 8010438:	f000 feee 	bl	8011218 <_free_r>
 801043c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801043e:	b111      	cbz	r1, 8010446 <_reclaim_reent+0x5a>
 8010440:	4620      	mov	r0, r4
 8010442:	f000 fee9 	bl	8011218 <_free_r>
 8010446:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010448:	b111      	cbz	r1, 8010450 <_reclaim_reent+0x64>
 801044a:	4620      	mov	r0, r4
 801044c:	f000 fee4 	bl	8011218 <_free_r>
 8010450:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010452:	b111      	cbz	r1, 801045a <_reclaim_reent+0x6e>
 8010454:	4620      	mov	r0, r4
 8010456:	f000 fedf 	bl	8011218 <_free_r>
 801045a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801045c:	b111      	cbz	r1, 8010464 <_reclaim_reent+0x78>
 801045e:	4620      	mov	r0, r4
 8010460:	f000 feda 	bl	8011218 <_free_r>
 8010464:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010466:	b111      	cbz	r1, 801046e <_reclaim_reent+0x82>
 8010468:	4620      	mov	r0, r4
 801046a:	f000 fed5 	bl	8011218 <_free_r>
 801046e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010470:	b111      	cbz	r1, 8010478 <_reclaim_reent+0x8c>
 8010472:	4620      	mov	r0, r4
 8010474:	f000 fed0 	bl	8011218 <_free_r>
 8010478:	6a23      	ldr	r3, [r4, #32]
 801047a:	b14b      	cbz	r3, 8010490 <_reclaim_reent+0xa4>
 801047c:	4620      	mov	r0, r4
 801047e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010482:	4718      	bx	r3
 8010484:	680e      	ldr	r6, [r1, #0]
 8010486:	4620      	mov	r0, r4
 8010488:	f000 fec6 	bl	8011218 <_free_r>
 801048c:	4631      	mov	r1, r6
 801048e:	e7bb      	b.n	8010408 <_reclaim_reent+0x1c>
 8010490:	bd70      	pop	{r4, r5, r6, pc}
 8010492:	bf00      	nop
 8010494:	20000124 	.word	0x20000124

08010498 <_lseek_r>:
 8010498:	b538      	push	{r3, r4, r5, lr}
 801049a:	4d07      	ldr	r5, [pc, #28]	@ (80104b8 <_lseek_r+0x20>)
 801049c:	4604      	mov	r4, r0
 801049e:	4608      	mov	r0, r1
 80104a0:	4611      	mov	r1, r2
 80104a2:	2200      	movs	r2, #0
 80104a4:	602a      	str	r2, [r5, #0]
 80104a6:	461a      	mov	r2, r3
 80104a8:	f7f2 fce7 	bl	8002e7a <_lseek>
 80104ac:	1c43      	adds	r3, r0, #1
 80104ae:	d102      	bne.n	80104b6 <_lseek_r+0x1e>
 80104b0:	682b      	ldr	r3, [r5, #0]
 80104b2:	b103      	cbz	r3, 80104b6 <_lseek_r+0x1e>
 80104b4:	6023      	str	r3, [r4, #0]
 80104b6:	bd38      	pop	{r3, r4, r5, pc}
 80104b8:	200047bc 	.word	0x200047bc

080104bc <_read_r>:
 80104bc:	b538      	push	{r3, r4, r5, lr}
 80104be:	4d07      	ldr	r5, [pc, #28]	@ (80104dc <_read_r+0x20>)
 80104c0:	4604      	mov	r4, r0
 80104c2:	4608      	mov	r0, r1
 80104c4:	4611      	mov	r1, r2
 80104c6:	2200      	movs	r2, #0
 80104c8:	602a      	str	r2, [r5, #0]
 80104ca:	461a      	mov	r2, r3
 80104cc:	f7f2 fc75 	bl	8002dba <_read>
 80104d0:	1c43      	adds	r3, r0, #1
 80104d2:	d102      	bne.n	80104da <_read_r+0x1e>
 80104d4:	682b      	ldr	r3, [r5, #0]
 80104d6:	b103      	cbz	r3, 80104da <_read_r+0x1e>
 80104d8:	6023      	str	r3, [r4, #0]
 80104da:	bd38      	pop	{r3, r4, r5, pc}
 80104dc:	200047bc 	.word	0x200047bc

080104e0 <_write_r>:
 80104e0:	b538      	push	{r3, r4, r5, lr}
 80104e2:	4d07      	ldr	r5, [pc, #28]	@ (8010500 <_write_r+0x20>)
 80104e4:	4604      	mov	r4, r0
 80104e6:	4608      	mov	r0, r1
 80104e8:	4611      	mov	r1, r2
 80104ea:	2200      	movs	r2, #0
 80104ec:	602a      	str	r2, [r5, #0]
 80104ee:	461a      	mov	r2, r3
 80104f0:	f7f2 fc80 	bl	8002df4 <_write>
 80104f4:	1c43      	adds	r3, r0, #1
 80104f6:	d102      	bne.n	80104fe <_write_r+0x1e>
 80104f8:	682b      	ldr	r3, [r5, #0]
 80104fa:	b103      	cbz	r3, 80104fe <_write_r+0x1e>
 80104fc:	6023      	str	r3, [r4, #0]
 80104fe:	bd38      	pop	{r3, r4, r5, pc}
 8010500:	200047bc 	.word	0x200047bc

08010504 <__errno>:
 8010504:	4b01      	ldr	r3, [pc, #4]	@ (801050c <__errno+0x8>)
 8010506:	6818      	ldr	r0, [r3, #0]
 8010508:	4770      	bx	lr
 801050a:	bf00      	nop
 801050c:	20000124 	.word	0x20000124

08010510 <__libc_init_array>:
 8010510:	b570      	push	{r4, r5, r6, lr}
 8010512:	4d0d      	ldr	r5, [pc, #52]	@ (8010548 <__libc_init_array+0x38>)
 8010514:	4c0d      	ldr	r4, [pc, #52]	@ (801054c <__libc_init_array+0x3c>)
 8010516:	1b64      	subs	r4, r4, r5
 8010518:	10a4      	asrs	r4, r4, #2
 801051a:	2600      	movs	r6, #0
 801051c:	42a6      	cmp	r6, r4
 801051e:	d109      	bne.n	8010534 <__libc_init_array+0x24>
 8010520:	4d0b      	ldr	r5, [pc, #44]	@ (8010550 <__libc_init_array+0x40>)
 8010522:	4c0c      	ldr	r4, [pc, #48]	@ (8010554 <__libc_init_array+0x44>)
 8010524:	f001 febe 	bl	80122a4 <_init>
 8010528:	1b64      	subs	r4, r4, r5
 801052a:	10a4      	asrs	r4, r4, #2
 801052c:	2600      	movs	r6, #0
 801052e:	42a6      	cmp	r6, r4
 8010530:	d105      	bne.n	801053e <__libc_init_array+0x2e>
 8010532:	bd70      	pop	{r4, r5, r6, pc}
 8010534:	f855 3b04 	ldr.w	r3, [r5], #4
 8010538:	4798      	blx	r3
 801053a:	3601      	adds	r6, #1
 801053c:	e7ee      	b.n	801051c <__libc_init_array+0xc>
 801053e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010542:	4798      	blx	r3
 8010544:	3601      	adds	r6, #1
 8010546:	e7f2      	b.n	801052e <__libc_init_array+0x1e>
 8010548:	08012818 	.word	0x08012818
 801054c:	08012818 	.word	0x08012818
 8010550:	08012818 	.word	0x08012818
 8010554:	08012820 	.word	0x08012820

08010558 <__retarget_lock_init_recursive>:
 8010558:	4770      	bx	lr

0801055a <__retarget_lock_acquire_recursive>:
 801055a:	4770      	bx	lr

0801055c <__retarget_lock_release_recursive>:
 801055c:	4770      	bx	lr

0801055e <memcpy>:
 801055e:	440a      	add	r2, r1
 8010560:	4291      	cmp	r1, r2
 8010562:	f100 33ff 	add.w	r3, r0, #4294967295
 8010566:	d100      	bne.n	801056a <memcpy+0xc>
 8010568:	4770      	bx	lr
 801056a:	b510      	push	{r4, lr}
 801056c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010570:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010574:	4291      	cmp	r1, r2
 8010576:	d1f9      	bne.n	801056c <memcpy+0xe>
 8010578:	bd10      	pop	{r4, pc}

0801057a <quorem>:
 801057a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801057e:	6903      	ldr	r3, [r0, #16]
 8010580:	690c      	ldr	r4, [r1, #16]
 8010582:	42a3      	cmp	r3, r4
 8010584:	4607      	mov	r7, r0
 8010586:	db7e      	blt.n	8010686 <quorem+0x10c>
 8010588:	3c01      	subs	r4, #1
 801058a:	f101 0814 	add.w	r8, r1, #20
 801058e:	00a3      	lsls	r3, r4, #2
 8010590:	f100 0514 	add.w	r5, r0, #20
 8010594:	9300      	str	r3, [sp, #0]
 8010596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801059a:	9301      	str	r3, [sp, #4]
 801059c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80105a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105a4:	3301      	adds	r3, #1
 80105a6:	429a      	cmp	r2, r3
 80105a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80105ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80105b0:	d32e      	bcc.n	8010610 <quorem+0x96>
 80105b2:	f04f 0a00 	mov.w	sl, #0
 80105b6:	46c4      	mov	ip, r8
 80105b8:	46ae      	mov	lr, r5
 80105ba:	46d3      	mov	fp, sl
 80105bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80105c0:	b298      	uxth	r0, r3
 80105c2:	fb06 a000 	mla	r0, r6, r0, sl
 80105c6:	0c02      	lsrs	r2, r0, #16
 80105c8:	0c1b      	lsrs	r3, r3, #16
 80105ca:	fb06 2303 	mla	r3, r6, r3, r2
 80105ce:	f8de 2000 	ldr.w	r2, [lr]
 80105d2:	b280      	uxth	r0, r0
 80105d4:	b292      	uxth	r2, r2
 80105d6:	1a12      	subs	r2, r2, r0
 80105d8:	445a      	add	r2, fp
 80105da:	f8de 0000 	ldr.w	r0, [lr]
 80105de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80105e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80105ec:	b292      	uxth	r2, r2
 80105ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80105f2:	45e1      	cmp	r9, ip
 80105f4:	f84e 2b04 	str.w	r2, [lr], #4
 80105f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80105fc:	d2de      	bcs.n	80105bc <quorem+0x42>
 80105fe:	9b00      	ldr	r3, [sp, #0]
 8010600:	58eb      	ldr	r3, [r5, r3]
 8010602:	b92b      	cbnz	r3, 8010610 <quorem+0x96>
 8010604:	9b01      	ldr	r3, [sp, #4]
 8010606:	3b04      	subs	r3, #4
 8010608:	429d      	cmp	r5, r3
 801060a:	461a      	mov	r2, r3
 801060c:	d32f      	bcc.n	801066e <quorem+0xf4>
 801060e:	613c      	str	r4, [r7, #16]
 8010610:	4638      	mov	r0, r7
 8010612:	f001 f97b 	bl	801190c <__mcmp>
 8010616:	2800      	cmp	r0, #0
 8010618:	db25      	blt.n	8010666 <quorem+0xec>
 801061a:	4629      	mov	r1, r5
 801061c:	2000      	movs	r0, #0
 801061e:	f858 2b04 	ldr.w	r2, [r8], #4
 8010622:	f8d1 c000 	ldr.w	ip, [r1]
 8010626:	fa1f fe82 	uxth.w	lr, r2
 801062a:	fa1f f38c 	uxth.w	r3, ip
 801062e:	eba3 030e 	sub.w	r3, r3, lr
 8010632:	4403      	add	r3, r0
 8010634:	0c12      	lsrs	r2, r2, #16
 8010636:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801063a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801063e:	b29b      	uxth	r3, r3
 8010640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010644:	45c1      	cmp	r9, r8
 8010646:	f841 3b04 	str.w	r3, [r1], #4
 801064a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801064e:	d2e6      	bcs.n	801061e <quorem+0xa4>
 8010650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010658:	b922      	cbnz	r2, 8010664 <quorem+0xea>
 801065a:	3b04      	subs	r3, #4
 801065c:	429d      	cmp	r5, r3
 801065e:	461a      	mov	r2, r3
 8010660:	d30b      	bcc.n	801067a <quorem+0x100>
 8010662:	613c      	str	r4, [r7, #16]
 8010664:	3601      	adds	r6, #1
 8010666:	4630      	mov	r0, r6
 8010668:	b003      	add	sp, #12
 801066a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801066e:	6812      	ldr	r2, [r2, #0]
 8010670:	3b04      	subs	r3, #4
 8010672:	2a00      	cmp	r2, #0
 8010674:	d1cb      	bne.n	801060e <quorem+0x94>
 8010676:	3c01      	subs	r4, #1
 8010678:	e7c6      	b.n	8010608 <quorem+0x8e>
 801067a:	6812      	ldr	r2, [r2, #0]
 801067c:	3b04      	subs	r3, #4
 801067e:	2a00      	cmp	r2, #0
 8010680:	d1ef      	bne.n	8010662 <quorem+0xe8>
 8010682:	3c01      	subs	r4, #1
 8010684:	e7ea      	b.n	801065c <quorem+0xe2>
 8010686:	2000      	movs	r0, #0
 8010688:	e7ee      	b.n	8010668 <quorem+0xee>
 801068a:	0000      	movs	r0, r0
 801068c:	0000      	movs	r0, r0
	...

08010690 <_dtoa_r>:
 8010690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010694:	69c7      	ldr	r7, [r0, #28]
 8010696:	b099      	sub	sp, #100	@ 0x64
 8010698:	ed8d 0b02 	vstr	d0, [sp, #8]
 801069c:	ec55 4b10 	vmov	r4, r5, d0
 80106a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80106a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80106a4:	4683      	mov	fp, r0
 80106a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80106a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80106aa:	b97f      	cbnz	r7, 80106cc <_dtoa_r+0x3c>
 80106ac:	2010      	movs	r0, #16
 80106ae:	f000 fdfd 	bl	80112ac <malloc>
 80106b2:	4602      	mov	r2, r0
 80106b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80106b8:	b920      	cbnz	r0, 80106c4 <_dtoa_r+0x34>
 80106ba:	4ba7      	ldr	r3, [pc, #668]	@ (8010958 <_dtoa_r+0x2c8>)
 80106bc:	21ef      	movs	r1, #239	@ 0xef
 80106be:	48a7      	ldr	r0, [pc, #668]	@ (801095c <_dtoa_r+0x2cc>)
 80106c0:	f001 fae8 	bl	8011c94 <__assert_func>
 80106c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80106c8:	6007      	str	r7, [r0, #0]
 80106ca:	60c7      	str	r7, [r0, #12]
 80106cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80106d0:	6819      	ldr	r1, [r3, #0]
 80106d2:	b159      	cbz	r1, 80106ec <_dtoa_r+0x5c>
 80106d4:	685a      	ldr	r2, [r3, #4]
 80106d6:	604a      	str	r2, [r1, #4]
 80106d8:	2301      	movs	r3, #1
 80106da:	4093      	lsls	r3, r2
 80106dc:	608b      	str	r3, [r1, #8]
 80106de:	4658      	mov	r0, fp
 80106e0:	f000 feda 	bl	8011498 <_Bfree>
 80106e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80106e8:	2200      	movs	r2, #0
 80106ea:	601a      	str	r2, [r3, #0]
 80106ec:	1e2b      	subs	r3, r5, #0
 80106ee:	bfb9      	ittee	lt
 80106f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80106f4:	9303      	strlt	r3, [sp, #12]
 80106f6:	2300      	movge	r3, #0
 80106f8:	6033      	strge	r3, [r6, #0]
 80106fa:	9f03      	ldr	r7, [sp, #12]
 80106fc:	4b98      	ldr	r3, [pc, #608]	@ (8010960 <_dtoa_r+0x2d0>)
 80106fe:	bfbc      	itt	lt
 8010700:	2201      	movlt	r2, #1
 8010702:	6032      	strlt	r2, [r6, #0]
 8010704:	43bb      	bics	r3, r7
 8010706:	d112      	bne.n	801072e <_dtoa_r+0x9e>
 8010708:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801070a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801070e:	6013      	str	r3, [r2, #0]
 8010710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010714:	4323      	orrs	r3, r4
 8010716:	f000 854d 	beq.w	80111b4 <_dtoa_r+0xb24>
 801071a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801071c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010974 <_dtoa_r+0x2e4>
 8010720:	2b00      	cmp	r3, #0
 8010722:	f000 854f 	beq.w	80111c4 <_dtoa_r+0xb34>
 8010726:	f10a 0303 	add.w	r3, sl, #3
 801072a:	f000 bd49 	b.w	80111c0 <_dtoa_r+0xb30>
 801072e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010732:	2200      	movs	r2, #0
 8010734:	ec51 0b17 	vmov	r0, r1, d7
 8010738:	2300      	movs	r3, #0
 801073a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801073e:	f7f0 f9d3 	bl	8000ae8 <__aeabi_dcmpeq>
 8010742:	4680      	mov	r8, r0
 8010744:	b158      	cbz	r0, 801075e <_dtoa_r+0xce>
 8010746:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010748:	2301      	movs	r3, #1
 801074a:	6013      	str	r3, [r2, #0]
 801074c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801074e:	b113      	cbz	r3, 8010756 <_dtoa_r+0xc6>
 8010750:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010752:	4b84      	ldr	r3, [pc, #528]	@ (8010964 <_dtoa_r+0x2d4>)
 8010754:	6013      	str	r3, [r2, #0]
 8010756:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010978 <_dtoa_r+0x2e8>
 801075a:	f000 bd33 	b.w	80111c4 <_dtoa_r+0xb34>
 801075e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010762:	aa16      	add	r2, sp, #88	@ 0x58
 8010764:	a917      	add	r1, sp, #92	@ 0x5c
 8010766:	4658      	mov	r0, fp
 8010768:	f001 f980 	bl	8011a6c <__d2b>
 801076c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010770:	4681      	mov	r9, r0
 8010772:	2e00      	cmp	r6, #0
 8010774:	d077      	beq.n	8010866 <_dtoa_r+0x1d6>
 8010776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010778:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801077c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010784:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010788:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801078c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010790:	4619      	mov	r1, r3
 8010792:	2200      	movs	r2, #0
 8010794:	4b74      	ldr	r3, [pc, #464]	@ (8010968 <_dtoa_r+0x2d8>)
 8010796:	f7ef fd87 	bl	80002a8 <__aeabi_dsub>
 801079a:	a369      	add	r3, pc, #420	@ (adr r3, 8010940 <_dtoa_r+0x2b0>)
 801079c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a0:	f7ef ff3a 	bl	8000618 <__aeabi_dmul>
 80107a4:	a368      	add	r3, pc, #416	@ (adr r3, 8010948 <_dtoa_r+0x2b8>)
 80107a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107aa:	f7ef fd7f 	bl	80002ac <__adddf3>
 80107ae:	4604      	mov	r4, r0
 80107b0:	4630      	mov	r0, r6
 80107b2:	460d      	mov	r5, r1
 80107b4:	f7ef fec6 	bl	8000544 <__aeabi_i2d>
 80107b8:	a365      	add	r3, pc, #404	@ (adr r3, 8010950 <_dtoa_r+0x2c0>)
 80107ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107be:	f7ef ff2b 	bl	8000618 <__aeabi_dmul>
 80107c2:	4602      	mov	r2, r0
 80107c4:	460b      	mov	r3, r1
 80107c6:	4620      	mov	r0, r4
 80107c8:	4629      	mov	r1, r5
 80107ca:	f7ef fd6f 	bl	80002ac <__adddf3>
 80107ce:	4604      	mov	r4, r0
 80107d0:	460d      	mov	r5, r1
 80107d2:	f7f0 f9d1 	bl	8000b78 <__aeabi_d2iz>
 80107d6:	2200      	movs	r2, #0
 80107d8:	4607      	mov	r7, r0
 80107da:	2300      	movs	r3, #0
 80107dc:	4620      	mov	r0, r4
 80107de:	4629      	mov	r1, r5
 80107e0:	f7f0 f98c 	bl	8000afc <__aeabi_dcmplt>
 80107e4:	b140      	cbz	r0, 80107f8 <_dtoa_r+0x168>
 80107e6:	4638      	mov	r0, r7
 80107e8:	f7ef feac 	bl	8000544 <__aeabi_i2d>
 80107ec:	4622      	mov	r2, r4
 80107ee:	462b      	mov	r3, r5
 80107f0:	f7f0 f97a 	bl	8000ae8 <__aeabi_dcmpeq>
 80107f4:	b900      	cbnz	r0, 80107f8 <_dtoa_r+0x168>
 80107f6:	3f01      	subs	r7, #1
 80107f8:	2f16      	cmp	r7, #22
 80107fa:	d851      	bhi.n	80108a0 <_dtoa_r+0x210>
 80107fc:	4b5b      	ldr	r3, [pc, #364]	@ (801096c <_dtoa_r+0x2dc>)
 80107fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801080a:	f7f0 f977 	bl	8000afc <__aeabi_dcmplt>
 801080e:	2800      	cmp	r0, #0
 8010810:	d048      	beq.n	80108a4 <_dtoa_r+0x214>
 8010812:	3f01      	subs	r7, #1
 8010814:	2300      	movs	r3, #0
 8010816:	9312      	str	r3, [sp, #72]	@ 0x48
 8010818:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801081a:	1b9b      	subs	r3, r3, r6
 801081c:	1e5a      	subs	r2, r3, #1
 801081e:	bf44      	itt	mi
 8010820:	f1c3 0801 	rsbmi	r8, r3, #1
 8010824:	2300      	movmi	r3, #0
 8010826:	9208      	str	r2, [sp, #32]
 8010828:	bf54      	ite	pl
 801082a:	f04f 0800 	movpl.w	r8, #0
 801082e:	9308      	strmi	r3, [sp, #32]
 8010830:	2f00      	cmp	r7, #0
 8010832:	db39      	blt.n	80108a8 <_dtoa_r+0x218>
 8010834:	9b08      	ldr	r3, [sp, #32]
 8010836:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010838:	443b      	add	r3, r7
 801083a:	9308      	str	r3, [sp, #32]
 801083c:	2300      	movs	r3, #0
 801083e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010842:	2b09      	cmp	r3, #9
 8010844:	d864      	bhi.n	8010910 <_dtoa_r+0x280>
 8010846:	2b05      	cmp	r3, #5
 8010848:	bfc4      	itt	gt
 801084a:	3b04      	subgt	r3, #4
 801084c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801084e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010850:	f1a3 0302 	sub.w	r3, r3, #2
 8010854:	bfcc      	ite	gt
 8010856:	2400      	movgt	r4, #0
 8010858:	2401      	movle	r4, #1
 801085a:	2b03      	cmp	r3, #3
 801085c:	d863      	bhi.n	8010926 <_dtoa_r+0x296>
 801085e:	e8df f003 	tbb	[pc, r3]
 8010862:	372a      	.short	0x372a
 8010864:	5535      	.short	0x5535
 8010866:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801086a:	441e      	add	r6, r3
 801086c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010870:	2b20      	cmp	r3, #32
 8010872:	bfc1      	itttt	gt
 8010874:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010878:	409f      	lslgt	r7, r3
 801087a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801087e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010882:	bfd6      	itet	le
 8010884:	f1c3 0320 	rsble	r3, r3, #32
 8010888:	ea47 0003 	orrgt.w	r0, r7, r3
 801088c:	fa04 f003 	lslle.w	r0, r4, r3
 8010890:	f7ef fe48 	bl	8000524 <__aeabi_ui2d>
 8010894:	2201      	movs	r2, #1
 8010896:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801089a:	3e01      	subs	r6, #1
 801089c:	9214      	str	r2, [sp, #80]	@ 0x50
 801089e:	e777      	b.n	8010790 <_dtoa_r+0x100>
 80108a0:	2301      	movs	r3, #1
 80108a2:	e7b8      	b.n	8010816 <_dtoa_r+0x186>
 80108a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80108a6:	e7b7      	b.n	8010818 <_dtoa_r+0x188>
 80108a8:	427b      	negs	r3, r7
 80108aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80108ac:	2300      	movs	r3, #0
 80108ae:	eba8 0807 	sub.w	r8, r8, r7
 80108b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80108b4:	e7c4      	b.n	8010840 <_dtoa_r+0x1b0>
 80108b6:	2300      	movs	r3, #0
 80108b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80108ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dc35      	bgt.n	801092c <_dtoa_r+0x29c>
 80108c0:	2301      	movs	r3, #1
 80108c2:	9300      	str	r3, [sp, #0]
 80108c4:	9307      	str	r3, [sp, #28]
 80108c6:	461a      	mov	r2, r3
 80108c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80108ca:	e00b      	b.n	80108e4 <_dtoa_r+0x254>
 80108cc:	2301      	movs	r3, #1
 80108ce:	e7f3      	b.n	80108b8 <_dtoa_r+0x228>
 80108d0:	2300      	movs	r3, #0
 80108d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80108d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108d6:	18fb      	adds	r3, r7, r3
 80108d8:	9300      	str	r3, [sp, #0]
 80108da:	3301      	adds	r3, #1
 80108dc:	2b01      	cmp	r3, #1
 80108de:	9307      	str	r3, [sp, #28]
 80108e0:	bfb8      	it	lt
 80108e2:	2301      	movlt	r3, #1
 80108e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80108e8:	2100      	movs	r1, #0
 80108ea:	2204      	movs	r2, #4
 80108ec:	f102 0514 	add.w	r5, r2, #20
 80108f0:	429d      	cmp	r5, r3
 80108f2:	d91f      	bls.n	8010934 <_dtoa_r+0x2a4>
 80108f4:	6041      	str	r1, [r0, #4]
 80108f6:	4658      	mov	r0, fp
 80108f8:	f000 fd8e 	bl	8011418 <_Balloc>
 80108fc:	4682      	mov	sl, r0
 80108fe:	2800      	cmp	r0, #0
 8010900:	d13c      	bne.n	801097c <_dtoa_r+0x2ec>
 8010902:	4b1b      	ldr	r3, [pc, #108]	@ (8010970 <_dtoa_r+0x2e0>)
 8010904:	4602      	mov	r2, r0
 8010906:	f240 11af 	movw	r1, #431	@ 0x1af
 801090a:	e6d8      	b.n	80106be <_dtoa_r+0x2e>
 801090c:	2301      	movs	r3, #1
 801090e:	e7e0      	b.n	80108d2 <_dtoa_r+0x242>
 8010910:	2401      	movs	r4, #1
 8010912:	2300      	movs	r3, #0
 8010914:	9309      	str	r3, [sp, #36]	@ 0x24
 8010916:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010918:	f04f 33ff 	mov.w	r3, #4294967295
 801091c:	9300      	str	r3, [sp, #0]
 801091e:	9307      	str	r3, [sp, #28]
 8010920:	2200      	movs	r2, #0
 8010922:	2312      	movs	r3, #18
 8010924:	e7d0      	b.n	80108c8 <_dtoa_r+0x238>
 8010926:	2301      	movs	r3, #1
 8010928:	930b      	str	r3, [sp, #44]	@ 0x2c
 801092a:	e7f5      	b.n	8010918 <_dtoa_r+0x288>
 801092c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801092e:	9300      	str	r3, [sp, #0]
 8010930:	9307      	str	r3, [sp, #28]
 8010932:	e7d7      	b.n	80108e4 <_dtoa_r+0x254>
 8010934:	3101      	adds	r1, #1
 8010936:	0052      	lsls	r2, r2, #1
 8010938:	e7d8      	b.n	80108ec <_dtoa_r+0x25c>
 801093a:	bf00      	nop
 801093c:	f3af 8000 	nop.w
 8010940:	636f4361 	.word	0x636f4361
 8010944:	3fd287a7 	.word	0x3fd287a7
 8010948:	8b60c8b3 	.word	0x8b60c8b3
 801094c:	3fc68a28 	.word	0x3fc68a28
 8010950:	509f79fb 	.word	0x509f79fb
 8010954:	3fd34413 	.word	0x3fd34413
 8010958:	080124dd 	.word	0x080124dd
 801095c:	080124f4 	.word	0x080124f4
 8010960:	7ff00000 	.word	0x7ff00000
 8010964:	080124ad 	.word	0x080124ad
 8010968:	3ff80000 	.word	0x3ff80000
 801096c:	080125f0 	.word	0x080125f0
 8010970:	0801254c 	.word	0x0801254c
 8010974:	080124d9 	.word	0x080124d9
 8010978:	080124ac 	.word	0x080124ac
 801097c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010980:	6018      	str	r0, [r3, #0]
 8010982:	9b07      	ldr	r3, [sp, #28]
 8010984:	2b0e      	cmp	r3, #14
 8010986:	f200 80a4 	bhi.w	8010ad2 <_dtoa_r+0x442>
 801098a:	2c00      	cmp	r4, #0
 801098c:	f000 80a1 	beq.w	8010ad2 <_dtoa_r+0x442>
 8010990:	2f00      	cmp	r7, #0
 8010992:	dd33      	ble.n	80109fc <_dtoa_r+0x36c>
 8010994:	4bad      	ldr	r3, [pc, #692]	@ (8010c4c <_dtoa_r+0x5bc>)
 8010996:	f007 020f 	and.w	r2, r7, #15
 801099a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801099e:	ed93 7b00 	vldr	d7, [r3]
 80109a2:	05f8      	lsls	r0, r7, #23
 80109a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80109a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80109ac:	d516      	bpl.n	80109dc <_dtoa_r+0x34c>
 80109ae:	4ba8      	ldr	r3, [pc, #672]	@ (8010c50 <_dtoa_r+0x5c0>)
 80109b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80109b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80109b8:	f7ef ff58 	bl	800086c <__aeabi_ddiv>
 80109bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109c0:	f004 040f 	and.w	r4, r4, #15
 80109c4:	2603      	movs	r6, #3
 80109c6:	4da2      	ldr	r5, [pc, #648]	@ (8010c50 <_dtoa_r+0x5c0>)
 80109c8:	b954      	cbnz	r4, 80109e0 <_dtoa_r+0x350>
 80109ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109d2:	f7ef ff4b 	bl	800086c <__aeabi_ddiv>
 80109d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109da:	e028      	b.n	8010a2e <_dtoa_r+0x39e>
 80109dc:	2602      	movs	r6, #2
 80109de:	e7f2      	b.n	80109c6 <_dtoa_r+0x336>
 80109e0:	07e1      	lsls	r1, r4, #31
 80109e2:	d508      	bpl.n	80109f6 <_dtoa_r+0x366>
 80109e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80109ec:	f7ef fe14 	bl	8000618 <__aeabi_dmul>
 80109f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109f4:	3601      	adds	r6, #1
 80109f6:	1064      	asrs	r4, r4, #1
 80109f8:	3508      	adds	r5, #8
 80109fa:	e7e5      	b.n	80109c8 <_dtoa_r+0x338>
 80109fc:	f000 80d2 	beq.w	8010ba4 <_dtoa_r+0x514>
 8010a00:	427c      	negs	r4, r7
 8010a02:	4b92      	ldr	r3, [pc, #584]	@ (8010c4c <_dtoa_r+0x5bc>)
 8010a04:	4d92      	ldr	r5, [pc, #584]	@ (8010c50 <_dtoa_r+0x5c0>)
 8010a06:	f004 020f 	and.w	r2, r4, #15
 8010a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010a16:	f7ef fdff 	bl	8000618 <__aeabi_dmul>
 8010a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a1e:	1124      	asrs	r4, r4, #4
 8010a20:	2300      	movs	r3, #0
 8010a22:	2602      	movs	r6, #2
 8010a24:	2c00      	cmp	r4, #0
 8010a26:	f040 80b2 	bne.w	8010b8e <_dtoa_r+0x4fe>
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d1d3      	bne.n	80109d6 <_dtoa_r+0x346>
 8010a2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	f000 80b7 	beq.w	8010ba8 <_dtoa_r+0x518>
 8010a3a:	4b86      	ldr	r3, [pc, #536]	@ (8010c54 <_dtoa_r+0x5c4>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	4620      	mov	r0, r4
 8010a40:	4629      	mov	r1, r5
 8010a42:	f7f0 f85b 	bl	8000afc <__aeabi_dcmplt>
 8010a46:	2800      	cmp	r0, #0
 8010a48:	f000 80ae 	beq.w	8010ba8 <_dtoa_r+0x518>
 8010a4c:	9b07      	ldr	r3, [sp, #28]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	f000 80aa 	beq.w	8010ba8 <_dtoa_r+0x518>
 8010a54:	9b00      	ldr	r3, [sp, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	dd37      	ble.n	8010aca <_dtoa_r+0x43a>
 8010a5a:	1e7b      	subs	r3, r7, #1
 8010a5c:	9304      	str	r3, [sp, #16]
 8010a5e:	4620      	mov	r0, r4
 8010a60:	4b7d      	ldr	r3, [pc, #500]	@ (8010c58 <_dtoa_r+0x5c8>)
 8010a62:	2200      	movs	r2, #0
 8010a64:	4629      	mov	r1, r5
 8010a66:	f7ef fdd7 	bl	8000618 <__aeabi_dmul>
 8010a6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a6e:	9c00      	ldr	r4, [sp, #0]
 8010a70:	3601      	adds	r6, #1
 8010a72:	4630      	mov	r0, r6
 8010a74:	f7ef fd66 	bl	8000544 <__aeabi_i2d>
 8010a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a7c:	f7ef fdcc 	bl	8000618 <__aeabi_dmul>
 8010a80:	4b76      	ldr	r3, [pc, #472]	@ (8010c5c <_dtoa_r+0x5cc>)
 8010a82:	2200      	movs	r2, #0
 8010a84:	f7ef fc12 	bl	80002ac <__adddf3>
 8010a88:	4605      	mov	r5, r0
 8010a8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010a8e:	2c00      	cmp	r4, #0
 8010a90:	f040 808d 	bne.w	8010bae <_dtoa_r+0x51e>
 8010a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a98:	4b71      	ldr	r3, [pc, #452]	@ (8010c60 <_dtoa_r+0x5d0>)
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	f7ef fc04 	bl	80002a8 <__aeabi_dsub>
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	460b      	mov	r3, r1
 8010aa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010aa8:	462a      	mov	r2, r5
 8010aaa:	4633      	mov	r3, r6
 8010aac:	f7f0 f844 	bl	8000b38 <__aeabi_dcmpgt>
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	f040 828b 	bne.w	8010fcc <_dtoa_r+0x93c>
 8010ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010aba:	462a      	mov	r2, r5
 8010abc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010ac0:	f7f0 f81c 	bl	8000afc <__aeabi_dcmplt>
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	f040 8128 	bne.w	8010d1a <_dtoa_r+0x68a>
 8010aca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010ace:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010ad2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	f2c0 815a 	blt.w	8010d8e <_dtoa_r+0x6fe>
 8010ada:	2f0e      	cmp	r7, #14
 8010adc:	f300 8157 	bgt.w	8010d8e <_dtoa_r+0x6fe>
 8010ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8010c4c <_dtoa_r+0x5bc>)
 8010ae2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010ae6:	ed93 7b00 	vldr	d7, [r3]
 8010aea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	ed8d 7b00 	vstr	d7, [sp]
 8010af2:	da03      	bge.n	8010afc <_dtoa_r+0x46c>
 8010af4:	9b07      	ldr	r3, [sp, #28]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	f340 8101 	ble.w	8010cfe <_dtoa_r+0x66e>
 8010afc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010b00:	4656      	mov	r6, sl
 8010b02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b06:	4620      	mov	r0, r4
 8010b08:	4629      	mov	r1, r5
 8010b0a:	f7ef feaf 	bl	800086c <__aeabi_ddiv>
 8010b0e:	f7f0 f833 	bl	8000b78 <__aeabi_d2iz>
 8010b12:	4680      	mov	r8, r0
 8010b14:	f7ef fd16 	bl	8000544 <__aeabi_i2d>
 8010b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b1c:	f7ef fd7c 	bl	8000618 <__aeabi_dmul>
 8010b20:	4602      	mov	r2, r0
 8010b22:	460b      	mov	r3, r1
 8010b24:	4620      	mov	r0, r4
 8010b26:	4629      	mov	r1, r5
 8010b28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010b2c:	f7ef fbbc 	bl	80002a8 <__aeabi_dsub>
 8010b30:	f806 4b01 	strb.w	r4, [r6], #1
 8010b34:	9d07      	ldr	r5, [sp, #28]
 8010b36:	eba6 040a 	sub.w	r4, r6, sl
 8010b3a:	42a5      	cmp	r5, r4
 8010b3c:	4602      	mov	r2, r0
 8010b3e:	460b      	mov	r3, r1
 8010b40:	f040 8117 	bne.w	8010d72 <_dtoa_r+0x6e2>
 8010b44:	f7ef fbb2 	bl	80002ac <__adddf3>
 8010b48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b4c:	4604      	mov	r4, r0
 8010b4e:	460d      	mov	r5, r1
 8010b50:	f7ef fff2 	bl	8000b38 <__aeabi_dcmpgt>
 8010b54:	2800      	cmp	r0, #0
 8010b56:	f040 80f9 	bne.w	8010d4c <_dtoa_r+0x6bc>
 8010b5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b5e:	4620      	mov	r0, r4
 8010b60:	4629      	mov	r1, r5
 8010b62:	f7ef ffc1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010b66:	b118      	cbz	r0, 8010b70 <_dtoa_r+0x4e0>
 8010b68:	f018 0f01 	tst.w	r8, #1
 8010b6c:	f040 80ee 	bne.w	8010d4c <_dtoa_r+0x6bc>
 8010b70:	4649      	mov	r1, r9
 8010b72:	4658      	mov	r0, fp
 8010b74:	f000 fc90 	bl	8011498 <_Bfree>
 8010b78:	2300      	movs	r3, #0
 8010b7a:	7033      	strb	r3, [r6, #0]
 8010b7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010b7e:	3701      	adds	r7, #1
 8010b80:	601f      	str	r7, [r3, #0]
 8010b82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	f000 831d 	beq.w	80111c4 <_dtoa_r+0xb34>
 8010b8a:	601e      	str	r6, [r3, #0]
 8010b8c:	e31a      	b.n	80111c4 <_dtoa_r+0xb34>
 8010b8e:	07e2      	lsls	r2, r4, #31
 8010b90:	d505      	bpl.n	8010b9e <_dtoa_r+0x50e>
 8010b92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010b96:	f7ef fd3f 	bl	8000618 <__aeabi_dmul>
 8010b9a:	3601      	adds	r6, #1
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	1064      	asrs	r4, r4, #1
 8010ba0:	3508      	adds	r5, #8
 8010ba2:	e73f      	b.n	8010a24 <_dtoa_r+0x394>
 8010ba4:	2602      	movs	r6, #2
 8010ba6:	e742      	b.n	8010a2e <_dtoa_r+0x39e>
 8010ba8:	9c07      	ldr	r4, [sp, #28]
 8010baa:	9704      	str	r7, [sp, #16]
 8010bac:	e761      	b.n	8010a72 <_dtoa_r+0x3e2>
 8010bae:	4b27      	ldr	r3, [pc, #156]	@ (8010c4c <_dtoa_r+0x5bc>)
 8010bb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010bb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010bb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010bba:	4454      	add	r4, sl
 8010bbc:	2900      	cmp	r1, #0
 8010bbe:	d053      	beq.n	8010c68 <_dtoa_r+0x5d8>
 8010bc0:	4928      	ldr	r1, [pc, #160]	@ (8010c64 <_dtoa_r+0x5d4>)
 8010bc2:	2000      	movs	r0, #0
 8010bc4:	f7ef fe52 	bl	800086c <__aeabi_ddiv>
 8010bc8:	4633      	mov	r3, r6
 8010bca:	462a      	mov	r2, r5
 8010bcc:	f7ef fb6c 	bl	80002a8 <__aeabi_dsub>
 8010bd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010bd4:	4656      	mov	r6, sl
 8010bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bda:	f7ef ffcd 	bl	8000b78 <__aeabi_d2iz>
 8010bde:	4605      	mov	r5, r0
 8010be0:	f7ef fcb0 	bl	8000544 <__aeabi_i2d>
 8010be4:	4602      	mov	r2, r0
 8010be6:	460b      	mov	r3, r1
 8010be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bec:	f7ef fb5c 	bl	80002a8 <__aeabi_dsub>
 8010bf0:	3530      	adds	r5, #48	@ 0x30
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010bfa:	f806 5b01 	strb.w	r5, [r6], #1
 8010bfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010c02:	f7ef ff7b 	bl	8000afc <__aeabi_dcmplt>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d171      	bne.n	8010cee <_dtoa_r+0x65e>
 8010c0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c0e:	4911      	ldr	r1, [pc, #68]	@ (8010c54 <_dtoa_r+0x5c4>)
 8010c10:	2000      	movs	r0, #0
 8010c12:	f7ef fb49 	bl	80002a8 <__aeabi_dsub>
 8010c16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010c1a:	f7ef ff6f 	bl	8000afc <__aeabi_dcmplt>
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	f040 8095 	bne.w	8010d4e <_dtoa_r+0x6be>
 8010c24:	42a6      	cmp	r6, r4
 8010c26:	f43f af50 	beq.w	8010aca <_dtoa_r+0x43a>
 8010c2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8010c58 <_dtoa_r+0x5c8>)
 8010c30:	2200      	movs	r2, #0
 8010c32:	f7ef fcf1 	bl	8000618 <__aeabi_dmul>
 8010c36:	4b08      	ldr	r3, [pc, #32]	@ (8010c58 <_dtoa_r+0x5c8>)
 8010c38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c42:	f7ef fce9 	bl	8000618 <__aeabi_dmul>
 8010c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c4a:	e7c4      	b.n	8010bd6 <_dtoa_r+0x546>
 8010c4c:	080125f0 	.word	0x080125f0
 8010c50:	080125c8 	.word	0x080125c8
 8010c54:	3ff00000 	.word	0x3ff00000
 8010c58:	40240000 	.word	0x40240000
 8010c5c:	401c0000 	.word	0x401c0000
 8010c60:	40140000 	.word	0x40140000
 8010c64:	3fe00000 	.word	0x3fe00000
 8010c68:	4631      	mov	r1, r6
 8010c6a:	4628      	mov	r0, r5
 8010c6c:	f7ef fcd4 	bl	8000618 <__aeabi_dmul>
 8010c70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010c74:	9415      	str	r4, [sp, #84]	@ 0x54
 8010c76:	4656      	mov	r6, sl
 8010c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c7c:	f7ef ff7c 	bl	8000b78 <__aeabi_d2iz>
 8010c80:	4605      	mov	r5, r0
 8010c82:	f7ef fc5f 	bl	8000544 <__aeabi_i2d>
 8010c86:	4602      	mov	r2, r0
 8010c88:	460b      	mov	r3, r1
 8010c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c8e:	f7ef fb0b 	bl	80002a8 <__aeabi_dsub>
 8010c92:	3530      	adds	r5, #48	@ 0x30
 8010c94:	f806 5b01 	strb.w	r5, [r6], #1
 8010c98:	4602      	mov	r2, r0
 8010c9a:	460b      	mov	r3, r1
 8010c9c:	42a6      	cmp	r6, r4
 8010c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010ca2:	f04f 0200 	mov.w	r2, #0
 8010ca6:	d124      	bne.n	8010cf2 <_dtoa_r+0x662>
 8010ca8:	4bac      	ldr	r3, [pc, #688]	@ (8010f5c <_dtoa_r+0x8cc>)
 8010caa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010cae:	f7ef fafd 	bl	80002ac <__adddf3>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cba:	f7ef ff3d 	bl	8000b38 <__aeabi_dcmpgt>
 8010cbe:	2800      	cmp	r0, #0
 8010cc0:	d145      	bne.n	8010d4e <_dtoa_r+0x6be>
 8010cc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010cc6:	49a5      	ldr	r1, [pc, #660]	@ (8010f5c <_dtoa_r+0x8cc>)
 8010cc8:	2000      	movs	r0, #0
 8010cca:	f7ef faed 	bl	80002a8 <__aeabi_dsub>
 8010cce:	4602      	mov	r2, r0
 8010cd0:	460b      	mov	r3, r1
 8010cd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cd6:	f7ef ff11 	bl	8000afc <__aeabi_dcmplt>
 8010cda:	2800      	cmp	r0, #0
 8010cdc:	f43f aef5 	beq.w	8010aca <_dtoa_r+0x43a>
 8010ce0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010ce2:	1e73      	subs	r3, r6, #1
 8010ce4:	9315      	str	r3, [sp, #84]	@ 0x54
 8010ce6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010cea:	2b30      	cmp	r3, #48	@ 0x30
 8010cec:	d0f8      	beq.n	8010ce0 <_dtoa_r+0x650>
 8010cee:	9f04      	ldr	r7, [sp, #16]
 8010cf0:	e73e      	b.n	8010b70 <_dtoa_r+0x4e0>
 8010cf2:	4b9b      	ldr	r3, [pc, #620]	@ (8010f60 <_dtoa_r+0x8d0>)
 8010cf4:	f7ef fc90 	bl	8000618 <__aeabi_dmul>
 8010cf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010cfc:	e7bc      	b.n	8010c78 <_dtoa_r+0x5e8>
 8010cfe:	d10c      	bne.n	8010d1a <_dtoa_r+0x68a>
 8010d00:	4b98      	ldr	r3, [pc, #608]	@ (8010f64 <_dtoa_r+0x8d4>)
 8010d02:	2200      	movs	r2, #0
 8010d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d08:	f7ef fc86 	bl	8000618 <__aeabi_dmul>
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	f7ef ff08 	bl	8000b24 <__aeabi_dcmpge>
 8010d14:	2800      	cmp	r0, #0
 8010d16:	f000 8157 	beq.w	8010fc8 <_dtoa_r+0x938>
 8010d1a:	2400      	movs	r4, #0
 8010d1c:	4625      	mov	r5, r4
 8010d1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d20:	43db      	mvns	r3, r3
 8010d22:	9304      	str	r3, [sp, #16]
 8010d24:	4656      	mov	r6, sl
 8010d26:	2700      	movs	r7, #0
 8010d28:	4621      	mov	r1, r4
 8010d2a:	4658      	mov	r0, fp
 8010d2c:	f000 fbb4 	bl	8011498 <_Bfree>
 8010d30:	2d00      	cmp	r5, #0
 8010d32:	d0dc      	beq.n	8010cee <_dtoa_r+0x65e>
 8010d34:	b12f      	cbz	r7, 8010d42 <_dtoa_r+0x6b2>
 8010d36:	42af      	cmp	r7, r5
 8010d38:	d003      	beq.n	8010d42 <_dtoa_r+0x6b2>
 8010d3a:	4639      	mov	r1, r7
 8010d3c:	4658      	mov	r0, fp
 8010d3e:	f000 fbab 	bl	8011498 <_Bfree>
 8010d42:	4629      	mov	r1, r5
 8010d44:	4658      	mov	r0, fp
 8010d46:	f000 fba7 	bl	8011498 <_Bfree>
 8010d4a:	e7d0      	b.n	8010cee <_dtoa_r+0x65e>
 8010d4c:	9704      	str	r7, [sp, #16]
 8010d4e:	4633      	mov	r3, r6
 8010d50:	461e      	mov	r6, r3
 8010d52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d56:	2a39      	cmp	r2, #57	@ 0x39
 8010d58:	d107      	bne.n	8010d6a <_dtoa_r+0x6da>
 8010d5a:	459a      	cmp	sl, r3
 8010d5c:	d1f8      	bne.n	8010d50 <_dtoa_r+0x6c0>
 8010d5e:	9a04      	ldr	r2, [sp, #16]
 8010d60:	3201      	adds	r2, #1
 8010d62:	9204      	str	r2, [sp, #16]
 8010d64:	2230      	movs	r2, #48	@ 0x30
 8010d66:	f88a 2000 	strb.w	r2, [sl]
 8010d6a:	781a      	ldrb	r2, [r3, #0]
 8010d6c:	3201      	adds	r2, #1
 8010d6e:	701a      	strb	r2, [r3, #0]
 8010d70:	e7bd      	b.n	8010cee <_dtoa_r+0x65e>
 8010d72:	4b7b      	ldr	r3, [pc, #492]	@ (8010f60 <_dtoa_r+0x8d0>)
 8010d74:	2200      	movs	r2, #0
 8010d76:	f7ef fc4f 	bl	8000618 <__aeabi_dmul>
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	4604      	mov	r4, r0
 8010d80:	460d      	mov	r5, r1
 8010d82:	f7ef feb1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d86:	2800      	cmp	r0, #0
 8010d88:	f43f aebb 	beq.w	8010b02 <_dtoa_r+0x472>
 8010d8c:	e6f0      	b.n	8010b70 <_dtoa_r+0x4e0>
 8010d8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010d90:	2a00      	cmp	r2, #0
 8010d92:	f000 80db 	beq.w	8010f4c <_dtoa_r+0x8bc>
 8010d96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d98:	2a01      	cmp	r2, #1
 8010d9a:	f300 80bf 	bgt.w	8010f1c <_dtoa_r+0x88c>
 8010d9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010da0:	2a00      	cmp	r2, #0
 8010da2:	f000 80b7 	beq.w	8010f14 <_dtoa_r+0x884>
 8010da6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010daa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010dac:	4646      	mov	r6, r8
 8010dae:	9a08      	ldr	r2, [sp, #32]
 8010db0:	2101      	movs	r1, #1
 8010db2:	441a      	add	r2, r3
 8010db4:	4658      	mov	r0, fp
 8010db6:	4498      	add	r8, r3
 8010db8:	9208      	str	r2, [sp, #32]
 8010dba:	f000 fc21 	bl	8011600 <__i2b>
 8010dbe:	4605      	mov	r5, r0
 8010dc0:	b15e      	cbz	r6, 8010dda <_dtoa_r+0x74a>
 8010dc2:	9b08      	ldr	r3, [sp, #32]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	dd08      	ble.n	8010dda <_dtoa_r+0x74a>
 8010dc8:	42b3      	cmp	r3, r6
 8010dca:	9a08      	ldr	r2, [sp, #32]
 8010dcc:	bfa8      	it	ge
 8010dce:	4633      	movge	r3, r6
 8010dd0:	eba8 0803 	sub.w	r8, r8, r3
 8010dd4:	1af6      	subs	r6, r6, r3
 8010dd6:	1ad3      	subs	r3, r2, r3
 8010dd8:	9308      	str	r3, [sp, #32]
 8010dda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ddc:	b1f3      	cbz	r3, 8010e1c <_dtoa_r+0x78c>
 8010dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	f000 80b7 	beq.w	8010f54 <_dtoa_r+0x8c4>
 8010de6:	b18c      	cbz	r4, 8010e0c <_dtoa_r+0x77c>
 8010de8:	4629      	mov	r1, r5
 8010dea:	4622      	mov	r2, r4
 8010dec:	4658      	mov	r0, fp
 8010dee:	f000 fcc7 	bl	8011780 <__pow5mult>
 8010df2:	464a      	mov	r2, r9
 8010df4:	4601      	mov	r1, r0
 8010df6:	4605      	mov	r5, r0
 8010df8:	4658      	mov	r0, fp
 8010dfa:	f000 fc17 	bl	801162c <__multiply>
 8010dfe:	4649      	mov	r1, r9
 8010e00:	9004      	str	r0, [sp, #16]
 8010e02:	4658      	mov	r0, fp
 8010e04:	f000 fb48 	bl	8011498 <_Bfree>
 8010e08:	9b04      	ldr	r3, [sp, #16]
 8010e0a:	4699      	mov	r9, r3
 8010e0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e0e:	1b1a      	subs	r2, r3, r4
 8010e10:	d004      	beq.n	8010e1c <_dtoa_r+0x78c>
 8010e12:	4649      	mov	r1, r9
 8010e14:	4658      	mov	r0, fp
 8010e16:	f000 fcb3 	bl	8011780 <__pow5mult>
 8010e1a:	4681      	mov	r9, r0
 8010e1c:	2101      	movs	r1, #1
 8010e1e:	4658      	mov	r0, fp
 8010e20:	f000 fbee 	bl	8011600 <__i2b>
 8010e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e26:	4604      	mov	r4, r0
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	f000 81cf 	beq.w	80111cc <_dtoa_r+0xb3c>
 8010e2e:	461a      	mov	r2, r3
 8010e30:	4601      	mov	r1, r0
 8010e32:	4658      	mov	r0, fp
 8010e34:	f000 fca4 	bl	8011780 <__pow5mult>
 8010e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e3a:	2b01      	cmp	r3, #1
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	f300 8095 	bgt.w	8010f6c <_dtoa_r+0x8dc>
 8010e42:	9b02      	ldr	r3, [sp, #8]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	f040 8087 	bne.w	8010f58 <_dtoa_r+0x8c8>
 8010e4a:	9b03      	ldr	r3, [sp, #12]
 8010e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f040 8089 	bne.w	8010f68 <_dtoa_r+0x8d8>
 8010e56:	9b03      	ldr	r3, [sp, #12]
 8010e58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e5c:	0d1b      	lsrs	r3, r3, #20
 8010e5e:	051b      	lsls	r3, r3, #20
 8010e60:	b12b      	cbz	r3, 8010e6e <_dtoa_r+0x7de>
 8010e62:	9b08      	ldr	r3, [sp, #32]
 8010e64:	3301      	adds	r3, #1
 8010e66:	9308      	str	r3, [sp, #32]
 8010e68:	f108 0801 	add.w	r8, r8, #1
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	f000 81b0 	beq.w	80111d8 <_dtoa_r+0xb48>
 8010e78:	6923      	ldr	r3, [r4, #16]
 8010e7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010e7e:	6918      	ldr	r0, [r3, #16]
 8010e80:	f000 fb72 	bl	8011568 <__hi0bits>
 8010e84:	f1c0 0020 	rsb	r0, r0, #32
 8010e88:	9b08      	ldr	r3, [sp, #32]
 8010e8a:	4418      	add	r0, r3
 8010e8c:	f010 001f 	ands.w	r0, r0, #31
 8010e90:	d077      	beq.n	8010f82 <_dtoa_r+0x8f2>
 8010e92:	f1c0 0320 	rsb	r3, r0, #32
 8010e96:	2b04      	cmp	r3, #4
 8010e98:	dd6b      	ble.n	8010f72 <_dtoa_r+0x8e2>
 8010e9a:	9b08      	ldr	r3, [sp, #32]
 8010e9c:	f1c0 001c 	rsb	r0, r0, #28
 8010ea0:	4403      	add	r3, r0
 8010ea2:	4480      	add	r8, r0
 8010ea4:	4406      	add	r6, r0
 8010ea6:	9308      	str	r3, [sp, #32]
 8010ea8:	f1b8 0f00 	cmp.w	r8, #0
 8010eac:	dd05      	ble.n	8010eba <_dtoa_r+0x82a>
 8010eae:	4649      	mov	r1, r9
 8010eb0:	4642      	mov	r2, r8
 8010eb2:	4658      	mov	r0, fp
 8010eb4:	f000 fcbe 	bl	8011834 <__lshift>
 8010eb8:	4681      	mov	r9, r0
 8010eba:	9b08      	ldr	r3, [sp, #32]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	dd05      	ble.n	8010ecc <_dtoa_r+0x83c>
 8010ec0:	4621      	mov	r1, r4
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	4658      	mov	r0, fp
 8010ec6:	f000 fcb5 	bl	8011834 <__lshift>
 8010eca:	4604      	mov	r4, r0
 8010ecc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d059      	beq.n	8010f86 <_dtoa_r+0x8f6>
 8010ed2:	4621      	mov	r1, r4
 8010ed4:	4648      	mov	r0, r9
 8010ed6:	f000 fd19 	bl	801190c <__mcmp>
 8010eda:	2800      	cmp	r0, #0
 8010edc:	da53      	bge.n	8010f86 <_dtoa_r+0x8f6>
 8010ede:	1e7b      	subs	r3, r7, #1
 8010ee0:	9304      	str	r3, [sp, #16]
 8010ee2:	4649      	mov	r1, r9
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	220a      	movs	r2, #10
 8010ee8:	4658      	mov	r0, fp
 8010eea:	f000 faf7 	bl	80114dc <__multadd>
 8010eee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ef0:	4681      	mov	r9, r0
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	f000 8172 	beq.w	80111dc <_dtoa_r+0xb4c>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	4629      	mov	r1, r5
 8010efc:	220a      	movs	r2, #10
 8010efe:	4658      	mov	r0, fp
 8010f00:	f000 faec 	bl	80114dc <__multadd>
 8010f04:	9b00      	ldr	r3, [sp, #0]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	4605      	mov	r5, r0
 8010f0a:	dc67      	bgt.n	8010fdc <_dtoa_r+0x94c>
 8010f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f0e:	2b02      	cmp	r3, #2
 8010f10:	dc41      	bgt.n	8010f96 <_dtoa_r+0x906>
 8010f12:	e063      	b.n	8010fdc <_dtoa_r+0x94c>
 8010f14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010f16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010f1a:	e746      	b.n	8010daa <_dtoa_r+0x71a>
 8010f1c:	9b07      	ldr	r3, [sp, #28]
 8010f1e:	1e5c      	subs	r4, r3, #1
 8010f20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f22:	42a3      	cmp	r3, r4
 8010f24:	bfbf      	itttt	lt
 8010f26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010f28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010f2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010f2c:	1ae3      	sublt	r3, r4, r3
 8010f2e:	bfb4      	ite	lt
 8010f30:	18d2      	addlt	r2, r2, r3
 8010f32:	1b1c      	subge	r4, r3, r4
 8010f34:	9b07      	ldr	r3, [sp, #28]
 8010f36:	bfbc      	itt	lt
 8010f38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010f3a:	2400      	movlt	r4, #0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	bfb5      	itete	lt
 8010f40:	eba8 0603 	sublt.w	r6, r8, r3
 8010f44:	9b07      	ldrge	r3, [sp, #28]
 8010f46:	2300      	movlt	r3, #0
 8010f48:	4646      	movge	r6, r8
 8010f4a:	e730      	b.n	8010dae <_dtoa_r+0x71e>
 8010f4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010f4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010f50:	4646      	mov	r6, r8
 8010f52:	e735      	b.n	8010dc0 <_dtoa_r+0x730>
 8010f54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010f56:	e75c      	b.n	8010e12 <_dtoa_r+0x782>
 8010f58:	2300      	movs	r3, #0
 8010f5a:	e788      	b.n	8010e6e <_dtoa_r+0x7de>
 8010f5c:	3fe00000 	.word	0x3fe00000
 8010f60:	40240000 	.word	0x40240000
 8010f64:	40140000 	.word	0x40140000
 8010f68:	9b02      	ldr	r3, [sp, #8]
 8010f6a:	e780      	b.n	8010e6e <_dtoa_r+0x7de>
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f70:	e782      	b.n	8010e78 <_dtoa_r+0x7e8>
 8010f72:	d099      	beq.n	8010ea8 <_dtoa_r+0x818>
 8010f74:	9a08      	ldr	r2, [sp, #32]
 8010f76:	331c      	adds	r3, #28
 8010f78:	441a      	add	r2, r3
 8010f7a:	4498      	add	r8, r3
 8010f7c:	441e      	add	r6, r3
 8010f7e:	9208      	str	r2, [sp, #32]
 8010f80:	e792      	b.n	8010ea8 <_dtoa_r+0x818>
 8010f82:	4603      	mov	r3, r0
 8010f84:	e7f6      	b.n	8010f74 <_dtoa_r+0x8e4>
 8010f86:	9b07      	ldr	r3, [sp, #28]
 8010f88:	9704      	str	r7, [sp, #16]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	dc20      	bgt.n	8010fd0 <_dtoa_r+0x940>
 8010f8e:	9300      	str	r3, [sp, #0]
 8010f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f92:	2b02      	cmp	r3, #2
 8010f94:	dd1e      	ble.n	8010fd4 <_dtoa_r+0x944>
 8010f96:	9b00      	ldr	r3, [sp, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f47f aec0 	bne.w	8010d1e <_dtoa_r+0x68e>
 8010f9e:	4621      	mov	r1, r4
 8010fa0:	2205      	movs	r2, #5
 8010fa2:	4658      	mov	r0, fp
 8010fa4:	f000 fa9a 	bl	80114dc <__multadd>
 8010fa8:	4601      	mov	r1, r0
 8010faa:	4604      	mov	r4, r0
 8010fac:	4648      	mov	r0, r9
 8010fae:	f000 fcad 	bl	801190c <__mcmp>
 8010fb2:	2800      	cmp	r0, #0
 8010fb4:	f77f aeb3 	ble.w	8010d1e <_dtoa_r+0x68e>
 8010fb8:	4656      	mov	r6, sl
 8010fba:	2331      	movs	r3, #49	@ 0x31
 8010fbc:	f806 3b01 	strb.w	r3, [r6], #1
 8010fc0:	9b04      	ldr	r3, [sp, #16]
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	9304      	str	r3, [sp, #16]
 8010fc6:	e6ae      	b.n	8010d26 <_dtoa_r+0x696>
 8010fc8:	9c07      	ldr	r4, [sp, #28]
 8010fca:	9704      	str	r7, [sp, #16]
 8010fcc:	4625      	mov	r5, r4
 8010fce:	e7f3      	b.n	8010fb8 <_dtoa_r+0x928>
 8010fd0:	9b07      	ldr	r3, [sp, #28]
 8010fd2:	9300      	str	r3, [sp, #0]
 8010fd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	f000 8104 	beq.w	80111e4 <_dtoa_r+0xb54>
 8010fdc:	2e00      	cmp	r6, #0
 8010fde:	dd05      	ble.n	8010fec <_dtoa_r+0x95c>
 8010fe0:	4629      	mov	r1, r5
 8010fe2:	4632      	mov	r2, r6
 8010fe4:	4658      	mov	r0, fp
 8010fe6:	f000 fc25 	bl	8011834 <__lshift>
 8010fea:	4605      	mov	r5, r0
 8010fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d05a      	beq.n	80110a8 <_dtoa_r+0xa18>
 8010ff2:	6869      	ldr	r1, [r5, #4]
 8010ff4:	4658      	mov	r0, fp
 8010ff6:	f000 fa0f 	bl	8011418 <_Balloc>
 8010ffa:	4606      	mov	r6, r0
 8010ffc:	b928      	cbnz	r0, 801100a <_dtoa_r+0x97a>
 8010ffe:	4b84      	ldr	r3, [pc, #528]	@ (8011210 <_dtoa_r+0xb80>)
 8011000:	4602      	mov	r2, r0
 8011002:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011006:	f7ff bb5a 	b.w	80106be <_dtoa_r+0x2e>
 801100a:	692a      	ldr	r2, [r5, #16]
 801100c:	3202      	adds	r2, #2
 801100e:	0092      	lsls	r2, r2, #2
 8011010:	f105 010c 	add.w	r1, r5, #12
 8011014:	300c      	adds	r0, #12
 8011016:	f7ff faa2 	bl	801055e <memcpy>
 801101a:	2201      	movs	r2, #1
 801101c:	4631      	mov	r1, r6
 801101e:	4658      	mov	r0, fp
 8011020:	f000 fc08 	bl	8011834 <__lshift>
 8011024:	f10a 0301 	add.w	r3, sl, #1
 8011028:	9307      	str	r3, [sp, #28]
 801102a:	9b00      	ldr	r3, [sp, #0]
 801102c:	4453      	add	r3, sl
 801102e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011030:	9b02      	ldr	r3, [sp, #8]
 8011032:	f003 0301 	and.w	r3, r3, #1
 8011036:	462f      	mov	r7, r5
 8011038:	930a      	str	r3, [sp, #40]	@ 0x28
 801103a:	4605      	mov	r5, r0
 801103c:	9b07      	ldr	r3, [sp, #28]
 801103e:	4621      	mov	r1, r4
 8011040:	3b01      	subs	r3, #1
 8011042:	4648      	mov	r0, r9
 8011044:	9300      	str	r3, [sp, #0]
 8011046:	f7ff fa98 	bl	801057a <quorem>
 801104a:	4639      	mov	r1, r7
 801104c:	9002      	str	r0, [sp, #8]
 801104e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011052:	4648      	mov	r0, r9
 8011054:	f000 fc5a 	bl	801190c <__mcmp>
 8011058:	462a      	mov	r2, r5
 801105a:	9008      	str	r0, [sp, #32]
 801105c:	4621      	mov	r1, r4
 801105e:	4658      	mov	r0, fp
 8011060:	f000 fc70 	bl	8011944 <__mdiff>
 8011064:	68c2      	ldr	r2, [r0, #12]
 8011066:	4606      	mov	r6, r0
 8011068:	bb02      	cbnz	r2, 80110ac <_dtoa_r+0xa1c>
 801106a:	4601      	mov	r1, r0
 801106c:	4648      	mov	r0, r9
 801106e:	f000 fc4d 	bl	801190c <__mcmp>
 8011072:	4602      	mov	r2, r0
 8011074:	4631      	mov	r1, r6
 8011076:	4658      	mov	r0, fp
 8011078:	920e      	str	r2, [sp, #56]	@ 0x38
 801107a:	f000 fa0d 	bl	8011498 <_Bfree>
 801107e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011080:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011082:	9e07      	ldr	r6, [sp, #28]
 8011084:	ea43 0102 	orr.w	r1, r3, r2
 8011088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801108a:	4319      	orrs	r1, r3
 801108c:	d110      	bne.n	80110b0 <_dtoa_r+0xa20>
 801108e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011092:	d029      	beq.n	80110e8 <_dtoa_r+0xa58>
 8011094:	9b08      	ldr	r3, [sp, #32]
 8011096:	2b00      	cmp	r3, #0
 8011098:	dd02      	ble.n	80110a0 <_dtoa_r+0xa10>
 801109a:	9b02      	ldr	r3, [sp, #8]
 801109c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80110a0:	9b00      	ldr	r3, [sp, #0]
 80110a2:	f883 8000 	strb.w	r8, [r3]
 80110a6:	e63f      	b.n	8010d28 <_dtoa_r+0x698>
 80110a8:	4628      	mov	r0, r5
 80110aa:	e7bb      	b.n	8011024 <_dtoa_r+0x994>
 80110ac:	2201      	movs	r2, #1
 80110ae:	e7e1      	b.n	8011074 <_dtoa_r+0x9e4>
 80110b0:	9b08      	ldr	r3, [sp, #32]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	db04      	blt.n	80110c0 <_dtoa_r+0xa30>
 80110b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80110b8:	430b      	orrs	r3, r1
 80110ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80110bc:	430b      	orrs	r3, r1
 80110be:	d120      	bne.n	8011102 <_dtoa_r+0xa72>
 80110c0:	2a00      	cmp	r2, #0
 80110c2:	dded      	ble.n	80110a0 <_dtoa_r+0xa10>
 80110c4:	4649      	mov	r1, r9
 80110c6:	2201      	movs	r2, #1
 80110c8:	4658      	mov	r0, fp
 80110ca:	f000 fbb3 	bl	8011834 <__lshift>
 80110ce:	4621      	mov	r1, r4
 80110d0:	4681      	mov	r9, r0
 80110d2:	f000 fc1b 	bl	801190c <__mcmp>
 80110d6:	2800      	cmp	r0, #0
 80110d8:	dc03      	bgt.n	80110e2 <_dtoa_r+0xa52>
 80110da:	d1e1      	bne.n	80110a0 <_dtoa_r+0xa10>
 80110dc:	f018 0f01 	tst.w	r8, #1
 80110e0:	d0de      	beq.n	80110a0 <_dtoa_r+0xa10>
 80110e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80110e6:	d1d8      	bne.n	801109a <_dtoa_r+0xa0a>
 80110e8:	9a00      	ldr	r2, [sp, #0]
 80110ea:	2339      	movs	r3, #57	@ 0x39
 80110ec:	7013      	strb	r3, [r2, #0]
 80110ee:	4633      	mov	r3, r6
 80110f0:	461e      	mov	r6, r3
 80110f2:	3b01      	subs	r3, #1
 80110f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80110f8:	2a39      	cmp	r2, #57	@ 0x39
 80110fa:	d052      	beq.n	80111a2 <_dtoa_r+0xb12>
 80110fc:	3201      	adds	r2, #1
 80110fe:	701a      	strb	r2, [r3, #0]
 8011100:	e612      	b.n	8010d28 <_dtoa_r+0x698>
 8011102:	2a00      	cmp	r2, #0
 8011104:	dd07      	ble.n	8011116 <_dtoa_r+0xa86>
 8011106:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801110a:	d0ed      	beq.n	80110e8 <_dtoa_r+0xa58>
 801110c:	9a00      	ldr	r2, [sp, #0]
 801110e:	f108 0301 	add.w	r3, r8, #1
 8011112:	7013      	strb	r3, [r2, #0]
 8011114:	e608      	b.n	8010d28 <_dtoa_r+0x698>
 8011116:	9b07      	ldr	r3, [sp, #28]
 8011118:	9a07      	ldr	r2, [sp, #28]
 801111a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801111e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011120:	4293      	cmp	r3, r2
 8011122:	d028      	beq.n	8011176 <_dtoa_r+0xae6>
 8011124:	4649      	mov	r1, r9
 8011126:	2300      	movs	r3, #0
 8011128:	220a      	movs	r2, #10
 801112a:	4658      	mov	r0, fp
 801112c:	f000 f9d6 	bl	80114dc <__multadd>
 8011130:	42af      	cmp	r7, r5
 8011132:	4681      	mov	r9, r0
 8011134:	f04f 0300 	mov.w	r3, #0
 8011138:	f04f 020a 	mov.w	r2, #10
 801113c:	4639      	mov	r1, r7
 801113e:	4658      	mov	r0, fp
 8011140:	d107      	bne.n	8011152 <_dtoa_r+0xac2>
 8011142:	f000 f9cb 	bl	80114dc <__multadd>
 8011146:	4607      	mov	r7, r0
 8011148:	4605      	mov	r5, r0
 801114a:	9b07      	ldr	r3, [sp, #28]
 801114c:	3301      	adds	r3, #1
 801114e:	9307      	str	r3, [sp, #28]
 8011150:	e774      	b.n	801103c <_dtoa_r+0x9ac>
 8011152:	f000 f9c3 	bl	80114dc <__multadd>
 8011156:	4629      	mov	r1, r5
 8011158:	4607      	mov	r7, r0
 801115a:	2300      	movs	r3, #0
 801115c:	220a      	movs	r2, #10
 801115e:	4658      	mov	r0, fp
 8011160:	f000 f9bc 	bl	80114dc <__multadd>
 8011164:	4605      	mov	r5, r0
 8011166:	e7f0      	b.n	801114a <_dtoa_r+0xaba>
 8011168:	9b00      	ldr	r3, [sp, #0]
 801116a:	2b00      	cmp	r3, #0
 801116c:	bfcc      	ite	gt
 801116e:	461e      	movgt	r6, r3
 8011170:	2601      	movle	r6, #1
 8011172:	4456      	add	r6, sl
 8011174:	2700      	movs	r7, #0
 8011176:	4649      	mov	r1, r9
 8011178:	2201      	movs	r2, #1
 801117a:	4658      	mov	r0, fp
 801117c:	f000 fb5a 	bl	8011834 <__lshift>
 8011180:	4621      	mov	r1, r4
 8011182:	4681      	mov	r9, r0
 8011184:	f000 fbc2 	bl	801190c <__mcmp>
 8011188:	2800      	cmp	r0, #0
 801118a:	dcb0      	bgt.n	80110ee <_dtoa_r+0xa5e>
 801118c:	d102      	bne.n	8011194 <_dtoa_r+0xb04>
 801118e:	f018 0f01 	tst.w	r8, #1
 8011192:	d1ac      	bne.n	80110ee <_dtoa_r+0xa5e>
 8011194:	4633      	mov	r3, r6
 8011196:	461e      	mov	r6, r3
 8011198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801119c:	2a30      	cmp	r2, #48	@ 0x30
 801119e:	d0fa      	beq.n	8011196 <_dtoa_r+0xb06>
 80111a0:	e5c2      	b.n	8010d28 <_dtoa_r+0x698>
 80111a2:	459a      	cmp	sl, r3
 80111a4:	d1a4      	bne.n	80110f0 <_dtoa_r+0xa60>
 80111a6:	9b04      	ldr	r3, [sp, #16]
 80111a8:	3301      	adds	r3, #1
 80111aa:	9304      	str	r3, [sp, #16]
 80111ac:	2331      	movs	r3, #49	@ 0x31
 80111ae:	f88a 3000 	strb.w	r3, [sl]
 80111b2:	e5b9      	b.n	8010d28 <_dtoa_r+0x698>
 80111b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80111b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011214 <_dtoa_r+0xb84>
 80111ba:	b11b      	cbz	r3, 80111c4 <_dtoa_r+0xb34>
 80111bc:	f10a 0308 	add.w	r3, sl, #8
 80111c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80111c2:	6013      	str	r3, [r2, #0]
 80111c4:	4650      	mov	r0, sl
 80111c6:	b019      	add	sp, #100	@ 0x64
 80111c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	f77f ae37 	ble.w	8010e42 <_dtoa_r+0x7b2>
 80111d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80111d8:	2001      	movs	r0, #1
 80111da:	e655      	b.n	8010e88 <_dtoa_r+0x7f8>
 80111dc:	9b00      	ldr	r3, [sp, #0]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	f77f aed6 	ble.w	8010f90 <_dtoa_r+0x900>
 80111e4:	4656      	mov	r6, sl
 80111e6:	4621      	mov	r1, r4
 80111e8:	4648      	mov	r0, r9
 80111ea:	f7ff f9c6 	bl	801057a <quorem>
 80111ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80111f2:	f806 8b01 	strb.w	r8, [r6], #1
 80111f6:	9b00      	ldr	r3, [sp, #0]
 80111f8:	eba6 020a 	sub.w	r2, r6, sl
 80111fc:	4293      	cmp	r3, r2
 80111fe:	ddb3      	ble.n	8011168 <_dtoa_r+0xad8>
 8011200:	4649      	mov	r1, r9
 8011202:	2300      	movs	r3, #0
 8011204:	220a      	movs	r2, #10
 8011206:	4658      	mov	r0, fp
 8011208:	f000 f968 	bl	80114dc <__multadd>
 801120c:	4681      	mov	r9, r0
 801120e:	e7ea      	b.n	80111e6 <_dtoa_r+0xb56>
 8011210:	0801254c 	.word	0x0801254c
 8011214:	080124d0 	.word	0x080124d0

08011218 <_free_r>:
 8011218:	b538      	push	{r3, r4, r5, lr}
 801121a:	4605      	mov	r5, r0
 801121c:	2900      	cmp	r1, #0
 801121e:	d041      	beq.n	80112a4 <_free_r+0x8c>
 8011220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011224:	1f0c      	subs	r4, r1, #4
 8011226:	2b00      	cmp	r3, #0
 8011228:	bfb8      	it	lt
 801122a:	18e4      	addlt	r4, r4, r3
 801122c:	f000 f8e8 	bl	8011400 <__malloc_lock>
 8011230:	4a1d      	ldr	r2, [pc, #116]	@ (80112a8 <_free_r+0x90>)
 8011232:	6813      	ldr	r3, [r2, #0]
 8011234:	b933      	cbnz	r3, 8011244 <_free_r+0x2c>
 8011236:	6063      	str	r3, [r4, #4]
 8011238:	6014      	str	r4, [r2, #0]
 801123a:	4628      	mov	r0, r5
 801123c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011240:	f000 b8e4 	b.w	801140c <__malloc_unlock>
 8011244:	42a3      	cmp	r3, r4
 8011246:	d908      	bls.n	801125a <_free_r+0x42>
 8011248:	6820      	ldr	r0, [r4, #0]
 801124a:	1821      	adds	r1, r4, r0
 801124c:	428b      	cmp	r3, r1
 801124e:	bf01      	itttt	eq
 8011250:	6819      	ldreq	r1, [r3, #0]
 8011252:	685b      	ldreq	r3, [r3, #4]
 8011254:	1809      	addeq	r1, r1, r0
 8011256:	6021      	streq	r1, [r4, #0]
 8011258:	e7ed      	b.n	8011236 <_free_r+0x1e>
 801125a:	461a      	mov	r2, r3
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	b10b      	cbz	r3, 8011264 <_free_r+0x4c>
 8011260:	42a3      	cmp	r3, r4
 8011262:	d9fa      	bls.n	801125a <_free_r+0x42>
 8011264:	6811      	ldr	r1, [r2, #0]
 8011266:	1850      	adds	r0, r2, r1
 8011268:	42a0      	cmp	r0, r4
 801126a:	d10b      	bne.n	8011284 <_free_r+0x6c>
 801126c:	6820      	ldr	r0, [r4, #0]
 801126e:	4401      	add	r1, r0
 8011270:	1850      	adds	r0, r2, r1
 8011272:	4283      	cmp	r3, r0
 8011274:	6011      	str	r1, [r2, #0]
 8011276:	d1e0      	bne.n	801123a <_free_r+0x22>
 8011278:	6818      	ldr	r0, [r3, #0]
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	6053      	str	r3, [r2, #4]
 801127e:	4408      	add	r0, r1
 8011280:	6010      	str	r0, [r2, #0]
 8011282:	e7da      	b.n	801123a <_free_r+0x22>
 8011284:	d902      	bls.n	801128c <_free_r+0x74>
 8011286:	230c      	movs	r3, #12
 8011288:	602b      	str	r3, [r5, #0]
 801128a:	e7d6      	b.n	801123a <_free_r+0x22>
 801128c:	6820      	ldr	r0, [r4, #0]
 801128e:	1821      	adds	r1, r4, r0
 8011290:	428b      	cmp	r3, r1
 8011292:	bf04      	itt	eq
 8011294:	6819      	ldreq	r1, [r3, #0]
 8011296:	685b      	ldreq	r3, [r3, #4]
 8011298:	6063      	str	r3, [r4, #4]
 801129a:	bf04      	itt	eq
 801129c:	1809      	addeq	r1, r1, r0
 801129e:	6021      	streq	r1, [r4, #0]
 80112a0:	6054      	str	r4, [r2, #4]
 80112a2:	e7ca      	b.n	801123a <_free_r+0x22>
 80112a4:	bd38      	pop	{r3, r4, r5, pc}
 80112a6:	bf00      	nop
 80112a8:	200047c8 	.word	0x200047c8

080112ac <malloc>:
 80112ac:	4b02      	ldr	r3, [pc, #8]	@ (80112b8 <malloc+0xc>)
 80112ae:	4601      	mov	r1, r0
 80112b0:	6818      	ldr	r0, [r3, #0]
 80112b2:	f000 b825 	b.w	8011300 <_malloc_r>
 80112b6:	bf00      	nop
 80112b8:	20000124 	.word	0x20000124

080112bc <sbrk_aligned>:
 80112bc:	b570      	push	{r4, r5, r6, lr}
 80112be:	4e0f      	ldr	r6, [pc, #60]	@ (80112fc <sbrk_aligned+0x40>)
 80112c0:	460c      	mov	r4, r1
 80112c2:	6831      	ldr	r1, [r6, #0]
 80112c4:	4605      	mov	r5, r0
 80112c6:	b911      	cbnz	r1, 80112ce <sbrk_aligned+0x12>
 80112c8:	f000 fcd4 	bl	8011c74 <_sbrk_r>
 80112cc:	6030      	str	r0, [r6, #0]
 80112ce:	4621      	mov	r1, r4
 80112d0:	4628      	mov	r0, r5
 80112d2:	f000 fccf 	bl	8011c74 <_sbrk_r>
 80112d6:	1c43      	adds	r3, r0, #1
 80112d8:	d103      	bne.n	80112e2 <sbrk_aligned+0x26>
 80112da:	f04f 34ff 	mov.w	r4, #4294967295
 80112de:	4620      	mov	r0, r4
 80112e0:	bd70      	pop	{r4, r5, r6, pc}
 80112e2:	1cc4      	adds	r4, r0, #3
 80112e4:	f024 0403 	bic.w	r4, r4, #3
 80112e8:	42a0      	cmp	r0, r4
 80112ea:	d0f8      	beq.n	80112de <sbrk_aligned+0x22>
 80112ec:	1a21      	subs	r1, r4, r0
 80112ee:	4628      	mov	r0, r5
 80112f0:	f000 fcc0 	bl	8011c74 <_sbrk_r>
 80112f4:	3001      	adds	r0, #1
 80112f6:	d1f2      	bne.n	80112de <sbrk_aligned+0x22>
 80112f8:	e7ef      	b.n	80112da <sbrk_aligned+0x1e>
 80112fa:	bf00      	nop
 80112fc:	200047c4 	.word	0x200047c4

08011300 <_malloc_r>:
 8011300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011304:	1ccd      	adds	r5, r1, #3
 8011306:	f025 0503 	bic.w	r5, r5, #3
 801130a:	3508      	adds	r5, #8
 801130c:	2d0c      	cmp	r5, #12
 801130e:	bf38      	it	cc
 8011310:	250c      	movcc	r5, #12
 8011312:	2d00      	cmp	r5, #0
 8011314:	4606      	mov	r6, r0
 8011316:	db01      	blt.n	801131c <_malloc_r+0x1c>
 8011318:	42a9      	cmp	r1, r5
 801131a:	d904      	bls.n	8011326 <_malloc_r+0x26>
 801131c:	230c      	movs	r3, #12
 801131e:	6033      	str	r3, [r6, #0]
 8011320:	2000      	movs	r0, #0
 8011322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011326:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80113fc <_malloc_r+0xfc>
 801132a:	f000 f869 	bl	8011400 <__malloc_lock>
 801132e:	f8d8 3000 	ldr.w	r3, [r8]
 8011332:	461c      	mov	r4, r3
 8011334:	bb44      	cbnz	r4, 8011388 <_malloc_r+0x88>
 8011336:	4629      	mov	r1, r5
 8011338:	4630      	mov	r0, r6
 801133a:	f7ff ffbf 	bl	80112bc <sbrk_aligned>
 801133e:	1c43      	adds	r3, r0, #1
 8011340:	4604      	mov	r4, r0
 8011342:	d158      	bne.n	80113f6 <_malloc_r+0xf6>
 8011344:	f8d8 4000 	ldr.w	r4, [r8]
 8011348:	4627      	mov	r7, r4
 801134a:	2f00      	cmp	r7, #0
 801134c:	d143      	bne.n	80113d6 <_malloc_r+0xd6>
 801134e:	2c00      	cmp	r4, #0
 8011350:	d04b      	beq.n	80113ea <_malloc_r+0xea>
 8011352:	6823      	ldr	r3, [r4, #0]
 8011354:	4639      	mov	r1, r7
 8011356:	4630      	mov	r0, r6
 8011358:	eb04 0903 	add.w	r9, r4, r3
 801135c:	f000 fc8a 	bl	8011c74 <_sbrk_r>
 8011360:	4581      	cmp	r9, r0
 8011362:	d142      	bne.n	80113ea <_malloc_r+0xea>
 8011364:	6821      	ldr	r1, [r4, #0]
 8011366:	1a6d      	subs	r5, r5, r1
 8011368:	4629      	mov	r1, r5
 801136a:	4630      	mov	r0, r6
 801136c:	f7ff ffa6 	bl	80112bc <sbrk_aligned>
 8011370:	3001      	adds	r0, #1
 8011372:	d03a      	beq.n	80113ea <_malloc_r+0xea>
 8011374:	6823      	ldr	r3, [r4, #0]
 8011376:	442b      	add	r3, r5
 8011378:	6023      	str	r3, [r4, #0]
 801137a:	f8d8 3000 	ldr.w	r3, [r8]
 801137e:	685a      	ldr	r2, [r3, #4]
 8011380:	bb62      	cbnz	r2, 80113dc <_malloc_r+0xdc>
 8011382:	f8c8 7000 	str.w	r7, [r8]
 8011386:	e00f      	b.n	80113a8 <_malloc_r+0xa8>
 8011388:	6822      	ldr	r2, [r4, #0]
 801138a:	1b52      	subs	r2, r2, r5
 801138c:	d420      	bmi.n	80113d0 <_malloc_r+0xd0>
 801138e:	2a0b      	cmp	r2, #11
 8011390:	d917      	bls.n	80113c2 <_malloc_r+0xc2>
 8011392:	1961      	adds	r1, r4, r5
 8011394:	42a3      	cmp	r3, r4
 8011396:	6025      	str	r5, [r4, #0]
 8011398:	bf18      	it	ne
 801139a:	6059      	strne	r1, [r3, #4]
 801139c:	6863      	ldr	r3, [r4, #4]
 801139e:	bf08      	it	eq
 80113a0:	f8c8 1000 	streq.w	r1, [r8]
 80113a4:	5162      	str	r2, [r4, r5]
 80113a6:	604b      	str	r3, [r1, #4]
 80113a8:	4630      	mov	r0, r6
 80113aa:	f000 f82f 	bl	801140c <__malloc_unlock>
 80113ae:	f104 000b 	add.w	r0, r4, #11
 80113b2:	1d23      	adds	r3, r4, #4
 80113b4:	f020 0007 	bic.w	r0, r0, #7
 80113b8:	1ac2      	subs	r2, r0, r3
 80113ba:	bf1c      	itt	ne
 80113bc:	1a1b      	subne	r3, r3, r0
 80113be:	50a3      	strne	r3, [r4, r2]
 80113c0:	e7af      	b.n	8011322 <_malloc_r+0x22>
 80113c2:	6862      	ldr	r2, [r4, #4]
 80113c4:	42a3      	cmp	r3, r4
 80113c6:	bf0c      	ite	eq
 80113c8:	f8c8 2000 	streq.w	r2, [r8]
 80113cc:	605a      	strne	r2, [r3, #4]
 80113ce:	e7eb      	b.n	80113a8 <_malloc_r+0xa8>
 80113d0:	4623      	mov	r3, r4
 80113d2:	6864      	ldr	r4, [r4, #4]
 80113d4:	e7ae      	b.n	8011334 <_malloc_r+0x34>
 80113d6:	463c      	mov	r4, r7
 80113d8:	687f      	ldr	r7, [r7, #4]
 80113da:	e7b6      	b.n	801134a <_malloc_r+0x4a>
 80113dc:	461a      	mov	r2, r3
 80113de:	685b      	ldr	r3, [r3, #4]
 80113e0:	42a3      	cmp	r3, r4
 80113e2:	d1fb      	bne.n	80113dc <_malloc_r+0xdc>
 80113e4:	2300      	movs	r3, #0
 80113e6:	6053      	str	r3, [r2, #4]
 80113e8:	e7de      	b.n	80113a8 <_malloc_r+0xa8>
 80113ea:	230c      	movs	r3, #12
 80113ec:	6033      	str	r3, [r6, #0]
 80113ee:	4630      	mov	r0, r6
 80113f0:	f000 f80c 	bl	801140c <__malloc_unlock>
 80113f4:	e794      	b.n	8011320 <_malloc_r+0x20>
 80113f6:	6005      	str	r5, [r0, #0]
 80113f8:	e7d6      	b.n	80113a8 <_malloc_r+0xa8>
 80113fa:	bf00      	nop
 80113fc:	200047c8 	.word	0x200047c8

08011400 <__malloc_lock>:
 8011400:	4801      	ldr	r0, [pc, #4]	@ (8011408 <__malloc_lock+0x8>)
 8011402:	f7ff b8aa 	b.w	801055a <__retarget_lock_acquire_recursive>
 8011406:	bf00      	nop
 8011408:	200047c0 	.word	0x200047c0

0801140c <__malloc_unlock>:
 801140c:	4801      	ldr	r0, [pc, #4]	@ (8011414 <__malloc_unlock+0x8>)
 801140e:	f7ff b8a5 	b.w	801055c <__retarget_lock_release_recursive>
 8011412:	bf00      	nop
 8011414:	200047c0 	.word	0x200047c0

08011418 <_Balloc>:
 8011418:	b570      	push	{r4, r5, r6, lr}
 801141a:	69c6      	ldr	r6, [r0, #28]
 801141c:	4604      	mov	r4, r0
 801141e:	460d      	mov	r5, r1
 8011420:	b976      	cbnz	r6, 8011440 <_Balloc+0x28>
 8011422:	2010      	movs	r0, #16
 8011424:	f7ff ff42 	bl	80112ac <malloc>
 8011428:	4602      	mov	r2, r0
 801142a:	61e0      	str	r0, [r4, #28]
 801142c:	b920      	cbnz	r0, 8011438 <_Balloc+0x20>
 801142e:	4b18      	ldr	r3, [pc, #96]	@ (8011490 <_Balloc+0x78>)
 8011430:	4818      	ldr	r0, [pc, #96]	@ (8011494 <_Balloc+0x7c>)
 8011432:	216b      	movs	r1, #107	@ 0x6b
 8011434:	f000 fc2e 	bl	8011c94 <__assert_func>
 8011438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801143c:	6006      	str	r6, [r0, #0]
 801143e:	60c6      	str	r6, [r0, #12]
 8011440:	69e6      	ldr	r6, [r4, #28]
 8011442:	68f3      	ldr	r3, [r6, #12]
 8011444:	b183      	cbz	r3, 8011468 <_Balloc+0x50>
 8011446:	69e3      	ldr	r3, [r4, #28]
 8011448:	68db      	ldr	r3, [r3, #12]
 801144a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801144e:	b9b8      	cbnz	r0, 8011480 <_Balloc+0x68>
 8011450:	2101      	movs	r1, #1
 8011452:	fa01 f605 	lsl.w	r6, r1, r5
 8011456:	1d72      	adds	r2, r6, #5
 8011458:	0092      	lsls	r2, r2, #2
 801145a:	4620      	mov	r0, r4
 801145c:	f000 fc38 	bl	8011cd0 <_calloc_r>
 8011460:	b160      	cbz	r0, 801147c <_Balloc+0x64>
 8011462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011466:	e00e      	b.n	8011486 <_Balloc+0x6e>
 8011468:	2221      	movs	r2, #33	@ 0x21
 801146a:	2104      	movs	r1, #4
 801146c:	4620      	mov	r0, r4
 801146e:	f000 fc2f 	bl	8011cd0 <_calloc_r>
 8011472:	69e3      	ldr	r3, [r4, #28]
 8011474:	60f0      	str	r0, [r6, #12]
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d1e4      	bne.n	8011446 <_Balloc+0x2e>
 801147c:	2000      	movs	r0, #0
 801147e:	bd70      	pop	{r4, r5, r6, pc}
 8011480:	6802      	ldr	r2, [r0, #0]
 8011482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011486:	2300      	movs	r3, #0
 8011488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801148c:	e7f7      	b.n	801147e <_Balloc+0x66>
 801148e:	bf00      	nop
 8011490:	080124dd 	.word	0x080124dd
 8011494:	0801255d 	.word	0x0801255d

08011498 <_Bfree>:
 8011498:	b570      	push	{r4, r5, r6, lr}
 801149a:	69c6      	ldr	r6, [r0, #28]
 801149c:	4605      	mov	r5, r0
 801149e:	460c      	mov	r4, r1
 80114a0:	b976      	cbnz	r6, 80114c0 <_Bfree+0x28>
 80114a2:	2010      	movs	r0, #16
 80114a4:	f7ff ff02 	bl	80112ac <malloc>
 80114a8:	4602      	mov	r2, r0
 80114aa:	61e8      	str	r0, [r5, #28]
 80114ac:	b920      	cbnz	r0, 80114b8 <_Bfree+0x20>
 80114ae:	4b09      	ldr	r3, [pc, #36]	@ (80114d4 <_Bfree+0x3c>)
 80114b0:	4809      	ldr	r0, [pc, #36]	@ (80114d8 <_Bfree+0x40>)
 80114b2:	218f      	movs	r1, #143	@ 0x8f
 80114b4:	f000 fbee 	bl	8011c94 <__assert_func>
 80114b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114bc:	6006      	str	r6, [r0, #0]
 80114be:	60c6      	str	r6, [r0, #12]
 80114c0:	b13c      	cbz	r4, 80114d2 <_Bfree+0x3a>
 80114c2:	69eb      	ldr	r3, [r5, #28]
 80114c4:	6862      	ldr	r2, [r4, #4]
 80114c6:	68db      	ldr	r3, [r3, #12]
 80114c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80114cc:	6021      	str	r1, [r4, #0]
 80114ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80114d2:	bd70      	pop	{r4, r5, r6, pc}
 80114d4:	080124dd 	.word	0x080124dd
 80114d8:	0801255d 	.word	0x0801255d

080114dc <__multadd>:
 80114dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114e0:	690d      	ldr	r5, [r1, #16]
 80114e2:	4607      	mov	r7, r0
 80114e4:	460c      	mov	r4, r1
 80114e6:	461e      	mov	r6, r3
 80114e8:	f101 0c14 	add.w	ip, r1, #20
 80114ec:	2000      	movs	r0, #0
 80114ee:	f8dc 3000 	ldr.w	r3, [ip]
 80114f2:	b299      	uxth	r1, r3
 80114f4:	fb02 6101 	mla	r1, r2, r1, r6
 80114f8:	0c1e      	lsrs	r6, r3, #16
 80114fa:	0c0b      	lsrs	r3, r1, #16
 80114fc:	fb02 3306 	mla	r3, r2, r6, r3
 8011500:	b289      	uxth	r1, r1
 8011502:	3001      	adds	r0, #1
 8011504:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011508:	4285      	cmp	r5, r0
 801150a:	f84c 1b04 	str.w	r1, [ip], #4
 801150e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011512:	dcec      	bgt.n	80114ee <__multadd+0x12>
 8011514:	b30e      	cbz	r6, 801155a <__multadd+0x7e>
 8011516:	68a3      	ldr	r3, [r4, #8]
 8011518:	42ab      	cmp	r3, r5
 801151a:	dc19      	bgt.n	8011550 <__multadd+0x74>
 801151c:	6861      	ldr	r1, [r4, #4]
 801151e:	4638      	mov	r0, r7
 8011520:	3101      	adds	r1, #1
 8011522:	f7ff ff79 	bl	8011418 <_Balloc>
 8011526:	4680      	mov	r8, r0
 8011528:	b928      	cbnz	r0, 8011536 <__multadd+0x5a>
 801152a:	4602      	mov	r2, r0
 801152c:	4b0c      	ldr	r3, [pc, #48]	@ (8011560 <__multadd+0x84>)
 801152e:	480d      	ldr	r0, [pc, #52]	@ (8011564 <__multadd+0x88>)
 8011530:	21ba      	movs	r1, #186	@ 0xba
 8011532:	f000 fbaf 	bl	8011c94 <__assert_func>
 8011536:	6922      	ldr	r2, [r4, #16]
 8011538:	3202      	adds	r2, #2
 801153a:	f104 010c 	add.w	r1, r4, #12
 801153e:	0092      	lsls	r2, r2, #2
 8011540:	300c      	adds	r0, #12
 8011542:	f7ff f80c 	bl	801055e <memcpy>
 8011546:	4621      	mov	r1, r4
 8011548:	4638      	mov	r0, r7
 801154a:	f7ff ffa5 	bl	8011498 <_Bfree>
 801154e:	4644      	mov	r4, r8
 8011550:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011554:	3501      	adds	r5, #1
 8011556:	615e      	str	r6, [r3, #20]
 8011558:	6125      	str	r5, [r4, #16]
 801155a:	4620      	mov	r0, r4
 801155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011560:	0801254c 	.word	0x0801254c
 8011564:	0801255d 	.word	0x0801255d

08011568 <__hi0bits>:
 8011568:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801156c:	4603      	mov	r3, r0
 801156e:	bf36      	itet	cc
 8011570:	0403      	lslcc	r3, r0, #16
 8011572:	2000      	movcs	r0, #0
 8011574:	2010      	movcc	r0, #16
 8011576:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801157a:	bf3c      	itt	cc
 801157c:	021b      	lslcc	r3, r3, #8
 801157e:	3008      	addcc	r0, #8
 8011580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011584:	bf3c      	itt	cc
 8011586:	011b      	lslcc	r3, r3, #4
 8011588:	3004      	addcc	r0, #4
 801158a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801158e:	bf3c      	itt	cc
 8011590:	009b      	lslcc	r3, r3, #2
 8011592:	3002      	addcc	r0, #2
 8011594:	2b00      	cmp	r3, #0
 8011596:	db05      	blt.n	80115a4 <__hi0bits+0x3c>
 8011598:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801159c:	f100 0001 	add.w	r0, r0, #1
 80115a0:	bf08      	it	eq
 80115a2:	2020      	moveq	r0, #32
 80115a4:	4770      	bx	lr

080115a6 <__lo0bits>:
 80115a6:	6803      	ldr	r3, [r0, #0]
 80115a8:	4602      	mov	r2, r0
 80115aa:	f013 0007 	ands.w	r0, r3, #7
 80115ae:	d00b      	beq.n	80115c8 <__lo0bits+0x22>
 80115b0:	07d9      	lsls	r1, r3, #31
 80115b2:	d421      	bmi.n	80115f8 <__lo0bits+0x52>
 80115b4:	0798      	lsls	r0, r3, #30
 80115b6:	bf49      	itett	mi
 80115b8:	085b      	lsrmi	r3, r3, #1
 80115ba:	089b      	lsrpl	r3, r3, #2
 80115bc:	2001      	movmi	r0, #1
 80115be:	6013      	strmi	r3, [r2, #0]
 80115c0:	bf5c      	itt	pl
 80115c2:	6013      	strpl	r3, [r2, #0]
 80115c4:	2002      	movpl	r0, #2
 80115c6:	4770      	bx	lr
 80115c8:	b299      	uxth	r1, r3
 80115ca:	b909      	cbnz	r1, 80115d0 <__lo0bits+0x2a>
 80115cc:	0c1b      	lsrs	r3, r3, #16
 80115ce:	2010      	movs	r0, #16
 80115d0:	b2d9      	uxtb	r1, r3
 80115d2:	b909      	cbnz	r1, 80115d8 <__lo0bits+0x32>
 80115d4:	3008      	adds	r0, #8
 80115d6:	0a1b      	lsrs	r3, r3, #8
 80115d8:	0719      	lsls	r1, r3, #28
 80115da:	bf04      	itt	eq
 80115dc:	091b      	lsreq	r3, r3, #4
 80115de:	3004      	addeq	r0, #4
 80115e0:	0799      	lsls	r1, r3, #30
 80115e2:	bf04      	itt	eq
 80115e4:	089b      	lsreq	r3, r3, #2
 80115e6:	3002      	addeq	r0, #2
 80115e8:	07d9      	lsls	r1, r3, #31
 80115ea:	d403      	bmi.n	80115f4 <__lo0bits+0x4e>
 80115ec:	085b      	lsrs	r3, r3, #1
 80115ee:	f100 0001 	add.w	r0, r0, #1
 80115f2:	d003      	beq.n	80115fc <__lo0bits+0x56>
 80115f4:	6013      	str	r3, [r2, #0]
 80115f6:	4770      	bx	lr
 80115f8:	2000      	movs	r0, #0
 80115fa:	4770      	bx	lr
 80115fc:	2020      	movs	r0, #32
 80115fe:	4770      	bx	lr

08011600 <__i2b>:
 8011600:	b510      	push	{r4, lr}
 8011602:	460c      	mov	r4, r1
 8011604:	2101      	movs	r1, #1
 8011606:	f7ff ff07 	bl	8011418 <_Balloc>
 801160a:	4602      	mov	r2, r0
 801160c:	b928      	cbnz	r0, 801161a <__i2b+0x1a>
 801160e:	4b05      	ldr	r3, [pc, #20]	@ (8011624 <__i2b+0x24>)
 8011610:	4805      	ldr	r0, [pc, #20]	@ (8011628 <__i2b+0x28>)
 8011612:	f240 1145 	movw	r1, #325	@ 0x145
 8011616:	f000 fb3d 	bl	8011c94 <__assert_func>
 801161a:	2301      	movs	r3, #1
 801161c:	6144      	str	r4, [r0, #20]
 801161e:	6103      	str	r3, [r0, #16]
 8011620:	bd10      	pop	{r4, pc}
 8011622:	bf00      	nop
 8011624:	0801254c 	.word	0x0801254c
 8011628:	0801255d 	.word	0x0801255d

0801162c <__multiply>:
 801162c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011630:	4614      	mov	r4, r2
 8011632:	690a      	ldr	r2, [r1, #16]
 8011634:	6923      	ldr	r3, [r4, #16]
 8011636:	429a      	cmp	r2, r3
 8011638:	bfa8      	it	ge
 801163a:	4623      	movge	r3, r4
 801163c:	460f      	mov	r7, r1
 801163e:	bfa4      	itt	ge
 8011640:	460c      	movge	r4, r1
 8011642:	461f      	movge	r7, r3
 8011644:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011648:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801164c:	68a3      	ldr	r3, [r4, #8]
 801164e:	6861      	ldr	r1, [r4, #4]
 8011650:	eb0a 0609 	add.w	r6, sl, r9
 8011654:	42b3      	cmp	r3, r6
 8011656:	b085      	sub	sp, #20
 8011658:	bfb8      	it	lt
 801165a:	3101      	addlt	r1, #1
 801165c:	f7ff fedc 	bl	8011418 <_Balloc>
 8011660:	b930      	cbnz	r0, 8011670 <__multiply+0x44>
 8011662:	4602      	mov	r2, r0
 8011664:	4b44      	ldr	r3, [pc, #272]	@ (8011778 <__multiply+0x14c>)
 8011666:	4845      	ldr	r0, [pc, #276]	@ (801177c <__multiply+0x150>)
 8011668:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801166c:	f000 fb12 	bl	8011c94 <__assert_func>
 8011670:	f100 0514 	add.w	r5, r0, #20
 8011674:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011678:	462b      	mov	r3, r5
 801167a:	2200      	movs	r2, #0
 801167c:	4543      	cmp	r3, r8
 801167e:	d321      	bcc.n	80116c4 <__multiply+0x98>
 8011680:	f107 0114 	add.w	r1, r7, #20
 8011684:	f104 0214 	add.w	r2, r4, #20
 8011688:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801168c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011690:	9302      	str	r3, [sp, #8]
 8011692:	1b13      	subs	r3, r2, r4
 8011694:	3b15      	subs	r3, #21
 8011696:	f023 0303 	bic.w	r3, r3, #3
 801169a:	3304      	adds	r3, #4
 801169c:	f104 0715 	add.w	r7, r4, #21
 80116a0:	42ba      	cmp	r2, r7
 80116a2:	bf38      	it	cc
 80116a4:	2304      	movcc	r3, #4
 80116a6:	9301      	str	r3, [sp, #4]
 80116a8:	9b02      	ldr	r3, [sp, #8]
 80116aa:	9103      	str	r1, [sp, #12]
 80116ac:	428b      	cmp	r3, r1
 80116ae:	d80c      	bhi.n	80116ca <__multiply+0x9e>
 80116b0:	2e00      	cmp	r6, #0
 80116b2:	dd03      	ble.n	80116bc <__multiply+0x90>
 80116b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d05b      	beq.n	8011774 <__multiply+0x148>
 80116bc:	6106      	str	r6, [r0, #16]
 80116be:	b005      	add	sp, #20
 80116c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c4:	f843 2b04 	str.w	r2, [r3], #4
 80116c8:	e7d8      	b.n	801167c <__multiply+0x50>
 80116ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80116ce:	f1ba 0f00 	cmp.w	sl, #0
 80116d2:	d024      	beq.n	801171e <__multiply+0xf2>
 80116d4:	f104 0e14 	add.w	lr, r4, #20
 80116d8:	46a9      	mov	r9, r5
 80116da:	f04f 0c00 	mov.w	ip, #0
 80116de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80116e2:	f8d9 3000 	ldr.w	r3, [r9]
 80116e6:	fa1f fb87 	uxth.w	fp, r7
 80116ea:	b29b      	uxth	r3, r3
 80116ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80116f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80116f4:	f8d9 7000 	ldr.w	r7, [r9]
 80116f8:	4463      	add	r3, ip
 80116fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80116fe:	fb0a c70b 	mla	r7, sl, fp, ip
 8011702:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011706:	b29b      	uxth	r3, r3
 8011708:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801170c:	4572      	cmp	r2, lr
 801170e:	f849 3b04 	str.w	r3, [r9], #4
 8011712:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011716:	d8e2      	bhi.n	80116de <__multiply+0xb2>
 8011718:	9b01      	ldr	r3, [sp, #4]
 801171a:	f845 c003 	str.w	ip, [r5, r3]
 801171e:	9b03      	ldr	r3, [sp, #12]
 8011720:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011724:	3104      	adds	r1, #4
 8011726:	f1b9 0f00 	cmp.w	r9, #0
 801172a:	d021      	beq.n	8011770 <__multiply+0x144>
 801172c:	682b      	ldr	r3, [r5, #0]
 801172e:	f104 0c14 	add.w	ip, r4, #20
 8011732:	46ae      	mov	lr, r5
 8011734:	f04f 0a00 	mov.w	sl, #0
 8011738:	f8bc b000 	ldrh.w	fp, [ip]
 801173c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011740:	fb09 770b 	mla	r7, r9, fp, r7
 8011744:	4457      	add	r7, sl
 8011746:	b29b      	uxth	r3, r3
 8011748:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801174c:	f84e 3b04 	str.w	r3, [lr], #4
 8011750:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011758:	f8be 3000 	ldrh.w	r3, [lr]
 801175c:	fb09 330a 	mla	r3, r9, sl, r3
 8011760:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011764:	4562      	cmp	r2, ip
 8011766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801176a:	d8e5      	bhi.n	8011738 <__multiply+0x10c>
 801176c:	9f01      	ldr	r7, [sp, #4]
 801176e:	51eb      	str	r3, [r5, r7]
 8011770:	3504      	adds	r5, #4
 8011772:	e799      	b.n	80116a8 <__multiply+0x7c>
 8011774:	3e01      	subs	r6, #1
 8011776:	e79b      	b.n	80116b0 <__multiply+0x84>
 8011778:	0801254c 	.word	0x0801254c
 801177c:	0801255d 	.word	0x0801255d

08011780 <__pow5mult>:
 8011780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011784:	4615      	mov	r5, r2
 8011786:	f012 0203 	ands.w	r2, r2, #3
 801178a:	4607      	mov	r7, r0
 801178c:	460e      	mov	r6, r1
 801178e:	d007      	beq.n	80117a0 <__pow5mult+0x20>
 8011790:	4c25      	ldr	r4, [pc, #148]	@ (8011828 <__pow5mult+0xa8>)
 8011792:	3a01      	subs	r2, #1
 8011794:	2300      	movs	r3, #0
 8011796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801179a:	f7ff fe9f 	bl	80114dc <__multadd>
 801179e:	4606      	mov	r6, r0
 80117a0:	10ad      	asrs	r5, r5, #2
 80117a2:	d03d      	beq.n	8011820 <__pow5mult+0xa0>
 80117a4:	69fc      	ldr	r4, [r7, #28]
 80117a6:	b97c      	cbnz	r4, 80117c8 <__pow5mult+0x48>
 80117a8:	2010      	movs	r0, #16
 80117aa:	f7ff fd7f 	bl	80112ac <malloc>
 80117ae:	4602      	mov	r2, r0
 80117b0:	61f8      	str	r0, [r7, #28]
 80117b2:	b928      	cbnz	r0, 80117c0 <__pow5mult+0x40>
 80117b4:	4b1d      	ldr	r3, [pc, #116]	@ (801182c <__pow5mult+0xac>)
 80117b6:	481e      	ldr	r0, [pc, #120]	@ (8011830 <__pow5mult+0xb0>)
 80117b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80117bc:	f000 fa6a 	bl	8011c94 <__assert_func>
 80117c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80117c4:	6004      	str	r4, [r0, #0]
 80117c6:	60c4      	str	r4, [r0, #12]
 80117c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80117cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80117d0:	b94c      	cbnz	r4, 80117e6 <__pow5mult+0x66>
 80117d2:	f240 2171 	movw	r1, #625	@ 0x271
 80117d6:	4638      	mov	r0, r7
 80117d8:	f7ff ff12 	bl	8011600 <__i2b>
 80117dc:	2300      	movs	r3, #0
 80117de:	f8c8 0008 	str.w	r0, [r8, #8]
 80117e2:	4604      	mov	r4, r0
 80117e4:	6003      	str	r3, [r0, #0]
 80117e6:	f04f 0900 	mov.w	r9, #0
 80117ea:	07eb      	lsls	r3, r5, #31
 80117ec:	d50a      	bpl.n	8011804 <__pow5mult+0x84>
 80117ee:	4631      	mov	r1, r6
 80117f0:	4622      	mov	r2, r4
 80117f2:	4638      	mov	r0, r7
 80117f4:	f7ff ff1a 	bl	801162c <__multiply>
 80117f8:	4631      	mov	r1, r6
 80117fa:	4680      	mov	r8, r0
 80117fc:	4638      	mov	r0, r7
 80117fe:	f7ff fe4b 	bl	8011498 <_Bfree>
 8011802:	4646      	mov	r6, r8
 8011804:	106d      	asrs	r5, r5, #1
 8011806:	d00b      	beq.n	8011820 <__pow5mult+0xa0>
 8011808:	6820      	ldr	r0, [r4, #0]
 801180a:	b938      	cbnz	r0, 801181c <__pow5mult+0x9c>
 801180c:	4622      	mov	r2, r4
 801180e:	4621      	mov	r1, r4
 8011810:	4638      	mov	r0, r7
 8011812:	f7ff ff0b 	bl	801162c <__multiply>
 8011816:	6020      	str	r0, [r4, #0]
 8011818:	f8c0 9000 	str.w	r9, [r0]
 801181c:	4604      	mov	r4, r0
 801181e:	e7e4      	b.n	80117ea <__pow5mult+0x6a>
 8011820:	4630      	mov	r0, r6
 8011822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011826:	bf00      	nop
 8011828:	080125b8 	.word	0x080125b8
 801182c:	080124dd 	.word	0x080124dd
 8011830:	0801255d 	.word	0x0801255d

08011834 <__lshift>:
 8011834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011838:	460c      	mov	r4, r1
 801183a:	6849      	ldr	r1, [r1, #4]
 801183c:	6923      	ldr	r3, [r4, #16]
 801183e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011842:	68a3      	ldr	r3, [r4, #8]
 8011844:	4607      	mov	r7, r0
 8011846:	4691      	mov	r9, r2
 8011848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801184c:	f108 0601 	add.w	r6, r8, #1
 8011850:	42b3      	cmp	r3, r6
 8011852:	db0b      	blt.n	801186c <__lshift+0x38>
 8011854:	4638      	mov	r0, r7
 8011856:	f7ff fddf 	bl	8011418 <_Balloc>
 801185a:	4605      	mov	r5, r0
 801185c:	b948      	cbnz	r0, 8011872 <__lshift+0x3e>
 801185e:	4602      	mov	r2, r0
 8011860:	4b28      	ldr	r3, [pc, #160]	@ (8011904 <__lshift+0xd0>)
 8011862:	4829      	ldr	r0, [pc, #164]	@ (8011908 <__lshift+0xd4>)
 8011864:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011868:	f000 fa14 	bl	8011c94 <__assert_func>
 801186c:	3101      	adds	r1, #1
 801186e:	005b      	lsls	r3, r3, #1
 8011870:	e7ee      	b.n	8011850 <__lshift+0x1c>
 8011872:	2300      	movs	r3, #0
 8011874:	f100 0114 	add.w	r1, r0, #20
 8011878:	f100 0210 	add.w	r2, r0, #16
 801187c:	4618      	mov	r0, r3
 801187e:	4553      	cmp	r3, sl
 8011880:	db33      	blt.n	80118ea <__lshift+0xb6>
 8011882:	6920      	ldr	r0, [r4, #16]
 8011884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011888:	f104 0314 	add.w	r3, r4, #20
 801188c:	f019 091f 	ands.w	r9, r9, #31
 8011890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011898:	d02b      	beq.n	80118f2 <__lshift+0xbe>
 801189a:	f1c9 0e20 	rsb	lr, r9, #32
 801189e:	468a      	mov	sl, r1
 80118a0:	2200      	movs	r2, #0
 80118a2:	6818      	ldr	r0, [r3, #0]
 80118a4:	fa00 f009 	lsl.w	r0, r0, r9
 80118a8:	4310      	orrs	r0, r2
 80118aa:	f84a 0b04 	str.w	r0, [sl], #4
 80118ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80118b2:	459c      	cmp	ip, r3
 80118b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80118b8:	d8f3      	bhi.n	80118a2 <__lshift+0x6e>
 80118ba:	ebac 0304 	sub.w	r3, ip, r4
 80118be:	3b15      	subs	r3, #21
 80118c0:	f023 0303 	bic.w	r3, r3, #3
 80118c4:	3304      	adds	r3, #4
 80118c6:	f104 0015 	add.w	r0, r4, #21
 80118ca:	4584      	cmp	ip, r0
 80118cc:	bf38      	it	cc
 80118ce:	2304      	movcc	r3, #4
 80118d0:	50ca      	str	r2, [r1, r3]
 80118d2:	b10a      	cbz	r2, 80118d8 <__lshift+0xa4>
 80118d4:	f108 0602 	add.w	r6, r8, #2
 80118d8:	3e01      	subs	r6, #1
 80118da:	4638      	mov	r0, r7
 80118dc:	612e      	str	r6, [r5, #16]
 80118de:	4621      	mov	r1, r4
 80118e0:	f7ff fdda 	bl	8011498 <_Bfree>
 80118e4:	4628      	mov	r0, r5
 80118e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80118ee:	3301      	adds	r3, #1
 80118f0:	e7c5      	b.n	801187e <__lshift+0x4a>
 80118f2:	3904      	subs	r1, #4
 80118f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80118f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80118fc:	459c      	cmp	ip, r3
 80118fe:	d8f9      	bhi.n	80118f4 <__lshift+0xc0>
 8011900:	e7ea      	b.n	80118d8 <__lshift+0xa4>
 8011902:	bf00      	nop
 8011904:	0801254c 	.word	0x0801254c
 8011908:	0801255d 	.word	0x0801255d

0801190c <__mcmp>:
 801190c:	690a      	ldr	r2, [r1, #16]
 801190e:	4603      	mov	r3, r0
 8011910:	6900      	ldr	r0, [r0, #16]
 8011912:	1a80      	subs	r0, r0, r2
 8011914:	b530      	push	{r4, r5, lr}
 8011916:	d10e      	bne.n	8011936 <__mcmp+0x2a>
 8011918:	3314      	adds	r3, #20
 801191a:	3114      	adds	r1, #20
 801191c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801192c:	4295      	cmp	r5, r2
 801192e:	d003      	beq.n	8011938 <__mcmp+0x2c>
 8011930:	d205      	bcs.n	801193e <__mcmp+0x32>
 8011932:	f04f 30ff 	mov.w	r0, #4294967295
 8011936:	bd30      	pop	{r4, r5, pc}
 8011938:	42a3      	cmp	r3, r4
 801193a:	d3f3      	bcc.n	8011924 <__mcmp+0x18>
 801193c:	e7fb      	b.n	8011936 <__mcmp+0x2a>
 801193e:	2001      	movs	r0, #1
 8011940:	e7f9      	b.n	8011936 <__mcmp+0x2a>
	...

08011944 <__mdiff>:
 8011944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011948:	4689      	mov	r9, r1
 801194a:	4606      	mov	r6, r0
 801194c:	4611      	mov	r1, r2
 801194e:	4648      	mov	r0, r9
 8011950:	4614      	mov	r4, r2
 8011952:	f7ff ffdb 	bl	801190c <__mcmp>
 8011956:	1e05      	subs	r5, r0, #0
 8011958:	d112      	bne.n	8011980 <__mdiff+0x3c>
 801195a:	4629      	mov	r1, r5
 801195c:	4630      	mov	r0, r6
 801195e:	f7ff fd5b 	bl	8011418 <_Balloc>
 8011962:	4602      	mov	r2, r0
 8011964:	b928      	cbnz	r0, 8011972 <__mdiff+0x2e>
 8011966:	4b3f      	ldr	r3, [pc, #252]	@ (8011a64 <__mdiff+0x120>)
 8011968:	f240 2137 	movw	r1, #567	@ 0x237
 801196c:	483e      	ldr	r0, [pc, #248]	@ (8011a68 <__mdiff+0x124>)
 801196e:	f000 f991 	bl	8011c94 <__assert_func>
 8011972:	2301      	movs	r3, #1
 8011974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011978:	4610      	mov	r0, r2
 801197a:	b003      	add	sp, #12
 801197c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011980:	bfbc      	itt	lt
 8011982:	464b      	movlt	r3, r9
 8011984:	46a1      	movlt	r9, r4
 8011986:	4630      	mov	r0, r6
 8011988:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801198c:	bfba      	itte	lt
 801198e:	461c      	movlt	r4, r3
 8011990:	2501      	movlt	r5, #1
 8011992:	2500      	movge	r5, #0
 8011994:	f7ff fd40 	bl	8011418 <_Balloc>
 8011998:	4602      	mov	r2, r0
 801199a:	b918      	cbnz	r0, 80119a4 <__mdiff+0x60>
 801199c:	4b31      	ldr	r3, [pc, #196]	@ (8011a64 <__mdiff+0x120>)
 801199e:	f240 2145 	movw	r1, #581	@ 0x245
 80119a2:	e7e3      	b.n	801196c <__mdiff+0x28>
 80119a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80119a8:	6926      	ldr	r6, [r4, #16]
 80119aa:	60c5      	str	r5, [r0, #12]
 80119ac:	f109 0310 	add.w	r3, r9, #16
 80119b0:	f109 0514 	add.w	r5, r9, #20
 80119b4:	f104 0e14 	add.w	lr, r4, #20
 80119b8:	f100 0b14 	add.w	fp, r0, #20
 80119bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80119c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80119c4:	9301      	str	r3, [sp, #4]
 80119c6:	46d9      	mov	r9, fp
 80119c8:	f04f 0c00 	mov.w	ip, #0
 80119cc:	9b01      	ldr	r3, [sp, #4]
 80119ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80119d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80119d6:	9301      	str	r3, [sp, #4]
 80119d8:	fa1f f38a 	uxth.w	r3, sl
 80119dc:	4619      	mov	r1, r3
 80119de:	b283      	uxth	r3, r0
 80119e0:	1acb      	subs	r3, r1, r3
 80119e2:	0c00      	lsrs	r0, r0, #16
 80119e4:	4463      	add	r3, ip
 80119e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80119ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80119f4:	4576      	cmp	r6, lr
 80119f6:	f849 3b04 	str.w	r3, [r9], #4
 80119fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80119fe:	d8e5      	bhi.n	80119cc <__mdiff+0x88>
 8011a00:	1b33      	subs	r3, r6, r4
 8011a02:	3b15      	subs	r3, #21
 8011a04:	f023 0303 	bic.w	r3, r3, #3
 8011a08:	3415      	adds	r4, #21
 8011a0a:	3304      	adds	r3, #4
 8011a0c:	42a6      	cmp	r6, r4
 8011a0e:	bf38      	it	cc
 8011a10:	2304      	movcc	r3, #4
 8011a12:	441d      	add	r5, r3
 8011a14:	445b      	add	r3, fp
 8011a16:	461e      	mov	r6, r3
 8011a18:	462c      	mov	r4, r5
 8011a1a:	4544      	cmp	r4, r8
 8011a1c:	d30e      	bcc.n	8011a3c <__mdiff+0xf8>
 8011a1e:	f108 0103 	add.w	r1, r8, #3
 8011a22:	1b49      	subs	r1, r1, r5
 8011a24:	f021 0103 	bic.w	r1, r1, #3
 8011a28:	3d03      	subs	r5, #3
 8011a2a:	45a8      	cmp	r8, r5
 8011a2c:	bf38      	it	cc
 8011a2e:	2100      	movcc	r1, #0
 8011a30:	440b      	add	r3, r1
 8011a32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a36:	b191      	cbz	r1, 8011a5e <__mdiff+0x11a>
 8011a38:	6117      	str	r7, [r2, #16]
 8011a3a:	e79d      	b.n	8011978 <__mdiff+0x34>
 8011a3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011a40:	46e6      	mov	lr, ip
 8011a42:	0c08      	lsrs	r0, r1, #16
 8011a44:	fa1c fc81 	uxtah	ip, ip, r1
 8011a48:	4471      	add	r1, lr
 8011a4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011a4e:	b289      	uxth	r1, r1
 8011a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011a54:	f846 1b04 	str.w	r1, [r6], #4
 8011a58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011a5c:	e7dd      	b.n	8011a1a <__mdiff+0xd6>
 8011a5e:	3f01      	subs	r7, #1
 8011a60:	e7e7      	b.n	8011a32 <__mdiff+0xee>
 8011a62:	bf00      	nop
 8011a64:	0801254c 	.word	0x0801254c
 8011a68:	0801255d 	.word	0x0801255d

08011a6c <__d2b>:
 8011a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a70:	460f      	mov	r7, r1
 8011a72:	2101      	movs	r1, #1
 8011a74:	ec59 8b10 	vmov	r8, r9, d0
 8011a78:	4616      	mov	r6, r2
 8011a7a:	f7ff fccd 	bl	8011418 <_Balloc>
 8011a7e:	4604      	mov	r4, r0
 8011a80:	b930      	cbnz	r0, 8011a90 <__d2b+0x24>
 8011a82:	4602      	mov	r2, r0
 8011a84:	4b23      	ldr	r3, [pc, #140]	@ (8011b14 <__d2b+0xa8>)
 8011a86:	4824      	ldr	r0, [pc, #144]	@ (8011b18 <__d2b+0xac>)
 8011a88:	f240 310f 	movw	r1, #783	@ 0x30f
 8011a8c:	f000 f902 	bl	8011c94 <__assert_func>
 8011a90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011a94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a98:	b10d      	cbz	r5, 8011a9e <__d2b+0x32>
 8011a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011a9e:	9301      	str	r3, [sp, #4]
 8011aa0:	f1b8 0300 	subs.w	r3, r8, #0
 8011aa4:	d023      	beq.n	8011aee <__d2b+0x82>
 8011aa6:	4668      	mov	r0, sp
 8011aa8:	9300      	str	r3, [sp, #0]
 8011aaa:	f7ff fd7c 	bl	80115a6 <__lo0bits>
 8011aae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011ab2:	b1d0      	cbz	r0, 8011aea <__d2b+0x7e>
 8011ab4:	f1c0 0320 	rsb	r3, r0, #32
 8011ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8011abc:	430b      	orrs	r3, r1
 8011abe:	40c2      	lsrs	r2, r0
 8011ac0:	6163      	str	r3, [r4, #20]
 8011ac2:	9201      	str	r2, [sp, #4]
 8011ac4:	9b01      	ldr	r3, [sp, #4]
 8011ac6:	61a3      	str	r3, [r4, #24]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	bf0c      	ite	eq
 8011acc:	2201      	moveq	r2, #1
 8011ace:	2202      	movne	r2, #2
 8011ad0:	6122      	str	r2, [r4, #16]
 8011ad2:	b1a5      	cbz	r5, 8011afe <__d2b+0x92>
 8011ad4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011ad8:	4405      	add	r5, r0
 8011ada:	603d      	str	r5, [r7, #0]
 8011adc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011ae0:	6030      	str	r0, [r6, #0]
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	b003      	add	sp, #12
 8011ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011aea:	6161      	str	r1, [r4, #20]
 8011aec:	e7ea      	b.n	8011ac4 <__d2b+0x58>
 8011aee:	a801      	add	r0, sp, #4
 8011af0:	f7ff fd59 	bl	80115a6 <__lo0bits>
 8011af4:	9b01      	ldr	r3, [sp, #4]
 8011af6:	6163      	str	r3, [r4, #20]
 8011af8:	3020      	adds	r0, #32
 8011afa:	2201      	movs	r2, #1
 8011afc:	e7e8      	b.n	8011ad0 <__d2b+0x64>
 8011afe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011b02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011b06:	6038      	str	r0, [r7, #0]
 8011b08:	6918      	ldr	r0, [r3, #16]
 8011b0a:	f7ff fd2d 	bl	8011568 <__hi0bits>
 8011b0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011b12:	e7e5      	b.n	8011ae0 <__d2b+0x74>
 8011b14:	0801254c 	.word	0x0801254c
 8011b18:	0801255d 	.word	0x0801255d

08011b1c <__sflush_r>:
 8011b1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b24:	0716      	lsls	r6, r2, #28
 8011b26:	4605      	mov	r5, r0
 8011b28:	460c      	mov	r4, r1
 8011b2a:	d454      	bmi.n	8011bd6 <__sflush_r+0xba>
 8011b2c:	684b      	ldr	r3, [r1, #4]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	dc02      	bgt.n	8011b38 <__sflush_r+0x1c>
 8011b32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	dd48      	ble.n	8011bca <__sflush_r+0xae>
 8011b38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b3a:	2e00      	cmp	r6, #0
 8011b3c:	d045      	beq.n	8011bca <__sflush_r+0xae>
 8011b3e:	2300      	movs	r3, #0
 8011b40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011b44:	682f      	ldr	r7, [r5, #0]
 8011b46:	6a21      	ldr	r1, [r4, #32]
 8011b48:	602b      	str	r3, [r5, #0]
 8011b4a:	d030      	beq.n	8011bae <__sflush_r+0x92>
 8011b4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011b4e:	89a3      	ldrh	r3, [r4, #12]
 8011b50:	0759      	lsls	r1, r3, #29
 8011b52:	d505      	bpl.n	8011b60 <__sflush_r+0x44>
 8011b54:	6863      	ldr	r3, [r4, #4]
 8011b56:	1ad2      	subs	r2, r2, r3
 8011b58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b5a:	b10b      	cbz	r3, 8011b60 <__sflush_r+0x44>
 8011b5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011b5e:	1ad2      	subs	r2, r2, r3
 8011b60:	2300      	movs	r3, #0
 8011b62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b64:	6a21      	ldr	r1, [r4, #32]
 8011b66:	4628      	mov	r0, r5
 8011b68:	47b0      	blx	r6
 8011b6a:	1c43      	adds	r3, r0, #1
 8011b6c:	89a3      	ldrh	r3, [r4, #12]
 8011b6e:	d106      	bne.n	8011b7e <__sflush_r+0x62>
 8011b70:	6829      	ldr	r1, [r5, #0]
 8011b72:	291d      	cmp	r1, #29
 8011b74:	d82b      	bhi.n	8011bce <__sflush_r+0xb2>
 8011b76:	4a2a      	ldr	r2, [pc, #168]	@ (8011c20 <__sflush_r+0x104>)
 8011b78:	410a      	asrs	r2, r1
 8011b7a:	07d6      	lsls	r6, r2, #31
 8011b7c:	d427      	bmi.n	8011bce <__sflush_r+0xb2>
 8011b7e:	2200      	movs	r2, #0
 8011b80:	6062      	str	r2, [r4, #4]
 8011b82:	04d9      	lsls	r1, r3, #19
 8011b84:	6922      	ldr	r2, [r4, #16]
 8011b86:	6022      	str	r2, [r4, #0]
 8011b88:	d504      	bpl.n	8011b94 <__sflush_r+0x78>
 8011b8a:	1c42      	adds	r2, r0, #1
 8011b8c:	d101      	bne.n	8011b92 <__sflush_r+0x76>
 8011b8e:	682b      	ldr	r3, [r5, #0]
 8011b90:	b903      	cbnz	r3, 8011b94 <__sflush_r+0x78>
 8011b92:	6560      	str	r0, [r4, #84]	@ 0x54
 8011b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b96:	602f      	str	r7, [r5, #0]
 8011b98:	b1b9      	cbz	r1, 8011bca <__sflush_r+0xae>
 8011b9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b9e:	4299      	cmp	r1, r3
 8011ba0:	d002      	beq.n	8011ba8 <__sflush_r+0x8c>
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	f7ff fb38 	bl	8011218 <_free_r>
 8011ba8:	2300      	movs	r3, #0
 8011baa:	6363      	str	r3, [r4, #52]	@ 0x34
 8011bac:	e00d      	b.n	8011bca <__sflush_r+0xae>
 8011bae:	2301      	movs	r3, #1
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	47b0      	blx	r6
 8011bb4:	4602      	mov	r2, r0
 8011bb6:	1c50      	adds	r0, r2, #1
 8011bb8:	d1c9      	bne.n	8011b4e <__sflush_r+0x32>
 8011bba:	682b      	ldr	r3, [r5, #0]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d0c6      	beq.n	8011b4e <__sflush_r+0x32>
 8011bc0:	2b1d      	cmp	r3, #29
 8011bc2:	d001      	beq.n	8011bc8 <__sflush_r+0xac>
 8011bc4:	2b16      	cmp	r3, #22
 8011bc6:	d11e      	bne.n	8011c06 <__sflush_r+0xea>
 8011bc8:	602f      	str	r7, [r5, #0]
 8011bca:	2000      	movs	r0, #0
 8011bcc:	e022      	b.n	8011c14 <__sflush_r+0xf8>
 8011bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bd2:	b21b      	sxth	r3, r3
 8011bd4:	e01b      	b.n	8011c0e <__sflush_r+0xf2>
 8011bd6:	690f      	ldr	r7, [r1, #16]
 8011bd8:	2f00      	cmp	r7, #0
 8011bda:	d0f6      	beq.n	8011bca <__sflush_r+0xae>
 8011bdc:	0793      	lsls	r3, r2, #30
 8011bde:	680e      	ldr	r6, [r1, #0]
 8011be0:	bf08      	it	eq
 8011be2:	694b      	ldreq	r3, [r1, #20]
 8011be4:	600f      	str	r7, [r1, #0]
 8011be6:	bf18      	it	ne
 8011be8:	2300      	movne	r3, #0
 8011bea:	eba6 0807 	sub.w	r8, r6, r7
 8011bee:	608b      	str	r3, [r1, #8]
 8011bf0:	f1b8 0f00 	cmp.w	r8, #0
 8011bf4:	dde9      	ble.n	8011bca <__sflush_r+0xae>
 8011bf6:	6a21      	ldr	r1, [r4, #32]
 8011bf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011bfa:	4643      	mov	r3, r8
 8011bfc:	463a      	mov	r2, r7
 8011bfe:	4628      	mov	r0, r5
 8011c00:	47b0      	blx	r6
 8011c02:	2800      	cmp	r0, #0
 8011c04:	dc08      	bgt.n	8011c18 <__sflush_r+0xfc>
 8011c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c0e:	81a3      	strh	r3, [r4, #12]
 8011c10:	f04f 30ff 	mov.w	r0, #4294967295
 8011c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c18:	4407      	add	r7, r0
 8011c1a:	eba8 0800 	sub.w	r8, r8, r0
 8011c1e:	e7e7      	b.n	8011bf0 <__sflush_r+0xd4>
 8011c20:	dfbffffe 	.word	0xdfbffffe

08011c24 <_fflush_r>:
 8011c24:	b538      	push	{r3, r4, r5, lr}
 8011c26:	690b      	ldr	r3, [r1, #16]
 8011c28:	4605      	mov	r5, r0
 8011c2a:	460c      	mov	r4, r1
 8011c2c:	b913      	cbnz	r3, 8011c34 <_fflush_r+0x10>
 8011c2e:	2500      	movs	r5, #0
 8011c30:	4628      	mov	r0, r5
 8011c32:	bd38      	pop	{r3, r4, r5, pc}
 8011c34:	b118      	cbz	r0, 8011c3e <_fflush_r+0x1a>
 8011c36:	6a03      	ldr	r3, [r0, #32]
 8011c38:	b90b      	cbnz	r3, 8011c3e <_fflush_r+0x1a>
 8011c3a:	f7fe fb41 	bl	80102c0 <__sinit>
 8011c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d0f3      	beq.n	8011c2e <_fflush_r+0xa>
 8011c46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011c48:	07d0      	lsls	r0, r2, #31
 8011c4a:	d404      	bmi.n	8011c56 <_fflush_r+0x32>
 8011c4c:	0599      	lsls	r1, r3, #22
 8011c4e:	d402      	bmi.n	8011c56 <_fflush_r+0x32>
 8011c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c52:	f7fe fc82 	bl	801055a <__retarget_lock_acquire_recursive>
 8011c56:	4628      	mov	r0, r5
 8011c58:	4621      	mov	r1, r4
 8011c5a:	f7ff ff5f 	bl	8011b1c <__sflush_r>
 8011c5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c60:	07da      	lsls	r2, r3, #31
 8011c62:	4605      	mov	r5, r0
 8011c64:	d4e4      	bmi.n	8011c30 <_fflush_r+0xc>
 8011c66:	89a3      	ldrh	r3, [r4, #12]
 8011c68:	059b      	lsls	r3, r3, #22
 8011c6a:	d4e1      	bmi.n	8011c30 <_fflush_r+0xc>
 8011c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c6e:	f7fe fc75 	bl	801055c <__retarget_lock_release_recursive>
 8011c72:	e7dd      	b.n	8011c30 <_fflush_r+0xc>

08011c74 <_sbrk_r>:
 8011c74:	b538      	push	{r3, r4, r5, lr}
 8011c76:	4d06      	ldr	r5, [pc, #24]	@ (8011c90 <_sbrk_r+0x1c>)
 8011c78:	2300      	movs	r3, #0
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	4608      	mov	r0, r1
 8011c7e:	602b      	str	r3, [r5, #0]
 8011c80:	f7f1 f908 	bl	8002e94 <_sbrk>
 8011c84:	1c43      	adds	r3, r0, #1
 8011c86:	d102      	bne.n	8011c8e <_sbrk_r+0x1a>
 8011c88:	682b      	ldr	r3, [r5, #0]
 8011c8a:	b103      	cbz	r3, 8011c8e <_sbrk_r+0x1a>
 8011c8c:	6023      	str	r3, [r4, #0]
 8011c8e:	bd38      	pop	{r3, r4, r5, pc}
 8011c90:	200047bc 	.word	0x200047bc

08011c94 <__assert_func>:
 8011c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c96:	4614      	mov	r4, r2
 8011c98:	461a      	mov	r2, r3
 8011c9a:	4b09      	ldr	r3, [pc, #36]	@ (8011cc0 <__assert_func+0x2c>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	4605      	mov	r5, r0
 8011ca0:	68d8      	ldr	r0, [r3, #12]
 8011ca2:	b954      	cbnz	r4, 8011cba <__assert_func+0x26>
 8011ca4:	4b07      	ldr	r3, [pc, #28]	@ (8011cc4 <__assert_func+0x30>)
 8011ca6:	461c      	mov	r4, r3
 8011ca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011cac:	9100      	str	r1, [sp, #0]
 8011cae:	462b      	mov	r3, r5
 8011cb0:	4905      	ldr	r1, [pc, #20]	@ (8011cc8 <__assert_func+0x34>)
 8011cb2:	f000 f841 	bl	8011d38 <fiprintf>
 8011cb6:	f000 f851 	bl	8011d5c <abort>
 8011cba:	4b04      	ldr	r3, [pc, #16]	@ (8011ccc <__assert_func+0x38>)
 8011cbc:	e7f4      	b.n	8011ca8 <__assert_func+0x14>
 8011cbe:	bf00      	nop
 8011cc0:	20000124 	.word	0x20000124
 8011cc4:	080126fd 	.word	0x080126fd
 8011cc8:	080126cf 	.word	0x080126cf
 8011ccc:	080126c2 	.word	0x080126c2

08011cd0 <_calloc_r>:
 8011cd0:	b570      	push	{r4, r5, r6, lr}
 8011cd2:	fba1 5402 	umull	r5, r4, r1, r2
 8011cd6:	b93c      	cbnz	r4, 8011ce8 <_calloc_r+0x18>
 8011cd8:	4629      	mov	r1, r5
 8011cda:	f7ff fb11 	bl	8011300 <_malloc_r>
 8011cde:	4606      	mov	r6, r0
 8011ce0:	b928      	cbnz	r0, 8011cee <_calloc_r+0x1e>
 8011ce2:	2600      	movs	r6, #0
 8011ce4:	4630      	mov	r0, r6
 8011ce6:	bd70      	pop	{r4, r5, r6, pc}
 8011ce8:	220c      	movs	r2, #12
 8011cea:	6002      	str	r2, [r0, #0]
 8011cec:	e7f9      	b.n	8011ce2 <_calloc_r+0x12>
 8011cee:	462a      	mov	r2, r5
 8011cf0:	4621      	mov	r1, r4
 8011cf2:	f7fe fb5e 	bl	80103b2 <memset>
 8011cf6:	e7f5      	b.n	8011ce4 <_calloc_r+0x14>

08011cf8 <__ascii_mbtowc>:
 8011cf8:	b082      	sub	sp, #8
 8011cfa:	b901      	cbnz	r1, 8011cfe <__ascii_mbtowc+0x6>
 8011cfc:	a901      	add	r1, sp, #4
 8011cfe:	b142      	cbz	r2, 8011d12 <__ascii_mbtowc+0x1a>
 8011d00:	b14b      	cbz	r3, 8011d16 <__ascii_mbtowc+0x1e>
 8011d02:	7813      	ldrb	r3, [r2, #0]
 8011d04:	600b      	str	r3, [r1, #0]
 8011d06:	7812      	ldrb	r2, [r2, #0]
 8011d08:	1e10      	subs	r0, r2, #0
 8011d0a:	bf18      	it	ne
 8011d0c:	2001      	movne	r0, #1
 8011d0e:	b002      	add	sp, #8
 8011d10:	4770      	bx	lr
 8011d12:	4610      	mov	r0, r2
 8011d14:	e7fb      	b.n	8011d0e <__ascii_mbtowc+0x16>
 8011d16:	f06f 0001 	mvn.w	r0, #1
 8011d1a:	e7f8      	b.n	8011d0e <__ascii_mbtowc+0x16>

08011d1c <__ascii_wctomb>:
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	4608      	mov	r0, r1
 8011d20:	b141      	cbz	r1, 8011d34 <__ascii_wctomb+0x18>
 8011d22:	2aff      	cmp	r2, #255	@ 0xff
 8011d24:	d904      	bls.n	8011d30 <__ascii_wctomb+0x14>
 8011d26:	228a      	movs	r2, #138	@ 0x8a
 8011d28:	601a      	str	r2, [r3, #0]
 8011d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d2e:	4770      	bx	lr
 8011d30:	700a      	strb	r2, [r1, #0]
 8011d32:	2001      	movs	r0, #1
 8011d34:	4770      	bx	lr
	...

08011d38 <fiprintf>:
 8011d38:	b40e      	push	{r1, r2, r3}
 8011d3a:	b503      	push	{r0, r1, lr}
 8011d3c:	4601      	mov	r1, r0
 8011d3e:	ab03      	add	r3, sp, #12
 8011d40:	4805      	ldr	r0, [pc, #20]	@ (8011d58 <fiprintf+0x20>)
 8011d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d46:	6800      	ldr	r0, [r0, #0]
 8011d48:	9301      	str	r3, [sp, #4]
 8011d4a:	f000 f837 	bl	8011dbc <_vfiprintf_r>
 8011d4e:	b002      	add	sp, #8
 8011d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d54:	b003      	add	sp, #12
 8011d56:	4770      	bx	lr
 8011d58:	20000124 	.word	0x20000124

08011d5c <abort>:
 8011d5c:	b508      	push	{r3, lr}
 8011d5e:	2006      	movs	r0, #6
 8011d60:	f000 fa00 	bl	8012164 <raise>
 8011d64:	2001      	movs	r0, #1
 8011d66:	f7f1 f81d 	bl	8002da4 <_exit>

08011d6a <__sfputc_r>:
 8011d6a:	6893      	ldr	r3, [r2, #8]
 8011d6c:	3b01      	subs	r3, #1
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	b410      	push	{r4}
 8011d72:	6093      	str	r3, [r2, #8]
 8011d74:	da08      	bge.n	8011d88 <__sfputc_r+0x1e>
 8011d76:	6994      	ldr	r4, [r2, #24]
 8011d78:	42a3      	cmp	r3, r4
 8011d7a:	db01      	blt.n	8011d80 <__sfputc_r+0x16>
 8011d7c:	290a      	cmp	r1, #10
 8011d7e:	d103      	bne.n	8011d88 <__sfputc_r+0x1e>
 8011d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d84:	f000 b932 	b.w	8011fec <__swbuf_r>
 8011d88:	6813      	ldr	r3, [r2, #0]
 8011d8a:	1c58      	adds	r0, r3, #1
 8011d8c:	6010      	str	r0, [r2, #0]
 8011d8e:	7019      	strb	r1, [r3, #0]
 8011d90:	4608      	mov	r0, r1
 8011d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <__sfputs_r>:
 8011d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d9a:	4606      	mov	r6, r0
 8011d9c:	460f      	mov	r7, r1
 8011d9e:	4614      	mov	r4, r2
 8011da0:	18d5      	adds	r5, r2, r3
 8011da2:	42ac      	cmp	r4, r5
 8011da4:	d101      	bne.n	8011daa <__sfputs_r+0x12>
 8011da6:	2000      	movs	r0, #0
 8011da8:	e007      	b.n	8011dba <__sfputs_r+0x22>
 8011daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dae:	463a      	mov	r2, r7
 8011db0:	4630      	mov	r0, r6
 8011db2:	f7ff ffda 	bl	8011d6a <__sfputc_r>
 8011db6:	1c43      	adds	r3, r0, #1
 8011db8:	d1f3      	bne.n	8011da2 <__sfputs_r+0xa>
 8011dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011dbc <_vfiprintf_r>:
 8011dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc0:	460d      	mov	r5, r1
 8011dc2:	b09d      	sub	sp, #116	@ 0x74
 8011dc4:	4614      	mov	r4, r2
 8011dc6:	4698      	mov	r8, r3
 8011dc8:	4606      	mov	r6, r0
 8011dca:	b118      	cbz	r0, 8011dd4 <_vfiprintf_r+0x18>
 8011dcc:	6a03      	ldr	r3, [r0, #32]
 8011dce:	b90b      	cbnz	r3, 8011dd4 <_vfiprintf_r+0x18>
 8011dd0:	f7fe fa76 	bl	80102c0 <__sinit>
 8011dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011dd6:	07d9      	lsls	r1, r3, #31
 8011dd8:	d405      	bmi.n	8011de6 <_vfiprintf_r+0x2a>
 8011dda:	89ab      	ldrh	r3, [r5, #12]
 8011ddc:	059a      	lsls	r2, r3, #22
 8011dde:	d402      	bmi.n	8011de6 <_vfiprintf_r+0x2a>
 8011de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011de2:	f7fe fbba 	bl	801055a <__retarget_lock_acquire_recursive>
 8011de6:	89ab      	ldrh	r3, [r5, #12]
 8011de8:	071b      	lsls	r3, r3, #28
 8011dea:	d501      	bpl.n	8011df0 <_vfiprintf_r+0x34>
 8011dec:	692b      	ldr	r3, [r5, #16]
 8011dee:	b99b      	cbnz	r3, 8011e18 <_vfiprintf_r+0x5c>
 8011df0:	4629      	mov	r1, r5
 8011df2:	4630      	mov	r0, r6
 8011df4:	f000 f938 	bl	8012068 <__swsetup_r>
 8011df8:	b170      	cbz	r0, 8011e18 <_vfiprintf_r+0x5c>
 8011dfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011dfc:	07dc      	lsls	r4, r3, #31
 8011dfe:	d504      	bpl.n	8011e0a <_vfiprintf_r+0x4e>
 8011e00:	f04f 30ff 	mov.w	r0, #4294967295
 8011e04:	b01d      	add	sp, #116	@ 0x74
 8011e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e0a:	89ab      	ldrh	r3, [r5, #12]
 8011e0c:	0598      	lsls	r0, r3, #22
 8011e0e:	d4f7      	bmi.n	8011e00 <_vfiprintf_r+0x44>
 8011e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e12:	f7fe fba3 	bl	801055c <__retarget_lock_release_recursive>
 8011e16:	e7f3      	b.n	8011e00 <_vfiprintf_r+0x44>
 8011e18:	2300      	movs	r3, #0
 8011e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e1c:	2320      	movs	r3, #32
 8011e1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e26:	2330      	movs	r3, #48	@ 0x30
 8011e28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011fd8 <_vfiprintf_r+0x21c>
 8011e2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e30:	f04f 0901 	mov.w	r9, #1
 8011e34:	4623      	mov	r3, r4
 8011e36:	469a      	mov	sl, r3
 8011e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e3c:	b10a      	cbz	r2, 8011e42 <_vfiprintf_r+0x86>
 8011e3e:	2a25      	cmp	r2, #37	@ 0x25
 8011e40:	d1f9      	bne.n	8011e36 <_vfiprintf_r+0x7a>
 8011e42:	ebba 0b04 	subs.w	fp, sl, r4
 8011e46:	d00b      	beq.n	8011e60 <_vfiprintf_r+0xa4>
 8011e48:	465b      	mov	r3, fp
 8011e4a:	4622      	mov	r2, r4
 8011e4c:	4629      	mov	r1, r5
 8011e4e:	4630      	mov	r0, r6
 8011e50:	f7ff ffa2 	bl	8011d98 <__sfputs_r>
 8011e54:	3001      	adds	r0, #1
 8011e56:	f000 80a7 	beq.w	8011fa8 <_vfiprintf_r+0x1ec>
 8011e5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e5c:	445a      	add	r2, fp
 8011e5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e60:	f89a 3000 	ldrb.w	r3, [sl]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	f000 809f 	beq.w	8011fa8 <_vfiprintf_r+0x1ec>
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e74:	f10a 0a01 	add.w	sl, sl, #1
 8011e78:	9304      	str	r3, [sp, #16]
 8011e7a:	9307      	str	r3, [sp, #28]
 8011e7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e80:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e82:	4654      	mov	r4, sl
 8011e84:	2205      	movs	r2, #5
 8011e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e8a:	4853      	ldr	r0, [pc, #332]	@ (8011fd8 <_vfiprintf_r+0x21c>)
 8011e8c:	f7ee f9b0 	bl	80001f0 <memchr>
 8011e90:	9a04      	ldr	r2, [sp, #16]
 8011e92:	b9d8      	cbnz	r0, 8011ecc <_vfiprintf_r+0x110>
 8011e94:	06d1      	lsls	r1, r2, #27
 8011e96:	bf44      	itt	mi
 8011e98:	2320      	movmi	r3, #32
 8011e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e9e:	0713      	lsls	r3, r2, #28
 8011ea0:	bf44      	itt	mi
 8011ea2:	232b      	movmi	r3, #43	@ 0x2b
 8011ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8011eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8011eae:	d015      	beq.n	8011edc <_vfiprintf_r+0x120>
 8011eb0:	9a07      	ldr	r2, [sp, #28]
 8011eb2:	4654      	mov	r4, sl
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	f04f 0c0a 	mov.w	ip, #10
 8011eba:	4621      	mov	r1, r4
 8011ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ec0:	3b30      	subs	r3, #48	@ 0x30
 8011ec2:	2b09      	cmp	r3, #9
 8011ec4:	d94b      	bls.n	8011f5e <_vfiprintf_r+0x1a2>
 8011ec6:	b1b0      	cbz	r0, 8011ef6 <_vfiprintf_r+0x13a>
 8011ec8:	9207      	str	r2, [sp, #28]
 8011eca:	e014      	b.n	8011ef6 <_vfiprintf_r+0x13a>
 8011ecc:	eba0 0308 	sub.w	r3, r0, r8
 8011ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8011ed4:	4313      	orrs	r3, r2
 8011ed6:	9304      	str	r3, [sp, #16]
 8011ed8:	46a2      	mov	sl, r4
 8011eda:	e7d2      	b.n	8011e82 <_vfiprintf_r+0xc6>
 8011edc:	9b03      	ldr	r3, [sp, #12]
 8011ede:	1d19      	adds	r1, r3, #4
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	9103      	str	r1, [sp, #12]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	bfbb      	ittet	lt
 8011ee8:	425b      	neglt	r3, r3
 8011eea:	f042 0202 	orrlt.w	r2, r2, #2
 8011eee:	9307      	strge	r3, [sp, #28]
 8011ef0:	9307      	strlt	r3, [sp, #28]
 8011ef2:	bfb8      	it	lt
 8011ef4:	9204      	strlt	r2, [sp, #16]
 8011ef6:	7823      	ldrb	r3, [r4, #0]
 8011ef8:	2b2e      	cmp	r3, #46	@ 0x2e
 8011efa:	d10a      	bne.n	8011f12 <_vfiprintf_r+0x156>
 8011efc:	7863      	ldrb	r3, [r4, #1]
 8011efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f00:	d132      	bne.n	8011f68 <_vfiprintf_r+0x1ac>
 8011f02:	9b03      	ldr	r3, [sp, #12]
 8011f04:	1d1a      	adds	r2, r3, #4
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	9203      	str	r2, [sp, #12]
 8011f0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f0e:	3402      	adds	r4, #2
 8011f10:	9305      	str	r3, [sp, #20]
 8011f12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011fe8 <_vfiprintf_r+0x22c>
 8011f16:	7821      	ldrb	r1, [r4, #0]
 8011f18:	2203      	movs	r2, #3
 8011f1a:	4650      	mov	r0, sl
 8011f1c:	f7ee f968 	bl	80001f0 <memchr>
 8011f20:	b138      	cbz	r0, 8011f32 <_vfiprintf_r+0x176>
 8011f22:	9b04      	ldr	r3, [sp, #16]
 8011f24:	eba0 000a 	sub.w	r0, r0, sl
 8011f28:	2240      	movs	r2, #64	@ 0x40
 8011f2a:	4082      	lsls	r2, r0
 8011f2c:	4313      	orrs	r3, r2
 8011f2e:	3401      	adds	r4, #1
 8011f30:	9304      	str	r3, [sp, #16]
 8011f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f36:	4829      	ldr	r0, [pc, #164]	@ (8011fdc <_vfiprintf_r+0x220>)
 8011f38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f3c:	2206      	movs	r2, #6
 8011f3e:	f7ee f957 	bl	80001f0 <memchr>
 8011f42:	2800      	cmp	r0, #0
 8011f44:	d03f      	beq.n	8011fc6 <_vfiprintf_r+0x20a>
 8011f46:	4b26      	ldr	r3, [pc, #152]	@ (8011fe0 <_vfiprintf_r+0x224>)
 8011f48:	bb1b      	cbnz	r3, 8011f92 <_vfiprintf_r+0x1d6>
 8011f4a:	9b03      	ldr	r3, [sp, #12]
 8011f4c:	3307      	adds	r3, #7
 8011f4e:	f023 0307 	bic.w	r3, r3, #7
 8011f52:	3308      	adds	r3, #8
 8011f54:	9303      	str	r3, [sp, #12]
 8011f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f58:	443b      	add	r3, r7
 8011f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f5c:	e76a      	b.n	8011e34 <_vfiprintf_r+0x78>
 8011f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f62:	460c      	mov	r4, r1
 8011f64:	2001      	movs	r0, #1
 8011f66:	e7a8      	b.n	8011eba <_vfiprintf_r+0xfe>
 8011f68:	2300      	movs	r3, #0
 8011f6a:	3401      	adds	r4, #1
 8011f6c:	9305      	str	r3, [sp, #20]
 8011f6e:	4619      	mov	r1, r3
 8011f70:	f04f 0c0a 	mov.w	ip, #10
 8011f74:	4620      	mov	r0, r4
 8011f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f7a:	3a30      	subs	r2, #48	@ 0x30
 8011f7c:	2a09      	cmp	r2, #9
 8011f7e:	d903      	bls.n	8011f88 <_vfiprintf_r+0x1cc>
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d0c6      	beq.n	8011f12 <_vfiprintf_r+0x156>
 8011f84:	9105      	str	r1, [sp, #20]
 8011f86:	e7c4      	b.n	8011f12 <_vfiprintf_r+0x156>
 8011f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f8c:	4604      	mov	r4, r0
 8011f8e:	2301      	movs	r3, #1
 8011f90:	e7f0      	b.n	8011f74 <_vfiprintf_r+0x1b8>
 8011f92:	ab03      	add	r3, sp, #12
 8011f94:	9300      	str	r3, [sp, #0]
 8011f96:	462a      	mov	r2, r5
 8011f98:	4b12      	ldr	r3, [pc, #72]	@ (8011fe4 <_vfiprintf_r+0x228>)
 8011f9a:	a904      	add	r1, sp, #16
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	f7fd fd4b 	bl	800fa38 <_printf_float>
 8011fa2:	4607      	mov	r7, r0
 8011fa4:	1c78      	adds	r0, r7, #1
 8011fa6:	d1d6      	bne.n	8011f56 <_vfiprintf_r+0x19a>
 8011fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011faa:	07d9      	lsls	r1, r3, #31
 8011fac:	d405      	bmi.n	8011fba <_vfiprintf_r+0x1fe>
 8011fae:	89ab      	ldrh	r3, [r5, #12]
 8011fb0:	059a      	lsls	r2, r3, #22
 8011fb2:	d402      	bmi.n	8011fba <_vfiprintf_r+0x1fe>
 8011fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011fb6:	f7fe fad1 	bl	801055c <__retarget_lock_release_recursive>
 8011fba:	89ab      	ldrh	r3, [r5, #12]
 8011fbc:	065b      	lsls	r3, r3, #25
 8011fbe:	f53f af1f 	bmi.w	8011e00 <_vfiprintf_r+0x44>
 8011fc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011fc4:	e71e      	b.n	8011e04 <_vfiprintf_r+0x48>
 8011fc6:	ab03      	add	r3, sp, #12
 8011fc8:	9300      	str	r3, [sp, #0]
 8011fca:	462a      	mov	r2, r5
 8011fcc:	4b05      	ldr	r3, [pc, #20]	@ (8011fe4 <_vfiprintf_r+0x228>)
 8011fce:	a904      	add	r1, sp, #16
 8011fd0:	4630      	mov	r0, r6
 8011fd2:	f7fd ffc9 	bl	800ff68 <_printf_i>
 8011fd6:	e7e4      	b.n	8011fa2 <_vfiprintf_r+0x1e6>
 8011fd8:	080127ff 	.word	0x080127ff
 8011fdc:	08012809 	.word	0x08012809
 8011fe0:	0800fa39 	.word	0x0800fa39
 8011fe4:	08011d99 	.word	0x08011d99
 8011fe8:	08012805 	.word	0x08012805

08011fec <__swbuf_r>:
 8011fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fee:	460e      	mov	r6, r1
 8011ff0:	4614      	mov	r4, r2
 8011ff2:	4605      	mov	r5, r0
 8011ff4:	b118      	cbz	r0, 8011ffe <__swbuf_r+0x12>
 8011ff6:	6a03      	ldr	r3, [r0, #32]
 8011ff8:	b90b      	cbnz	r3, 8011ffe <__swbuf_r+0x12>
 8011ffa:	f7fe f961 	bl	80102c0 <__sinit>
 8011ffe:	69a3      	ldr	r3, [r4, #24]
 8012000:	60a3      	str	r3, [r4, #8]
 8012002:	89a3      	ldrh	r3, [r4, #12]
 8012004:	071a      	lsls	r2, r3, #28
 8012006:	d501      	bpl.n	801200c <__swbuf_r+0x20>
 8012008:	6923      	ldr	r3, [r4, #16]
 801200a:	b943      	cbnz	r3, 801201e <__swbuf_r+0x32>
 801200c:	4621      	mov	r1, r4
 801200e:	4628      	mov	r0, r5
 8012010:	f000 f82a 	bl	8012068 <__swsetup_r>
 8012014:	b118      	cbz	r0, 801201e <__swbuf_r+0x32>
 8012016:	f04f 37ff 	mov.w	r7, #4294967295
 801201a:	4638      	mov	r0, r7
 801201c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801201e:	6823      	ldr	r3, [r4, #0]
 8012020:	6922      	ldr	r2, [r4, #16]
 8012022:	1a98      	subs	r0, r3, r2
 8012024:	6963      	ldr	r3, [r4, #20]
 8012026:	b2f6      	uxtb	r6, r6
 8012028:	4283      	cmp	r3, r0
 801202a:	4637      	mov	r7, r6
 801202c:	dc05      	bgt.n	801203a <__swbuf_r+0x4e>
 801202e:	4621      	mov	r1, r4
 8012030:	4628      	mov	r0, r5
 8012032:	f7ff fdf7 	bl	8011c24 <_fflush_r>
 8012036:	2800      	cmp	r0, #0
 8012038:	d1ed      	bne.n	8012016 <__swbuf_r+0x2a>
 801203a:	68a3      	ldr	r3, [r4, #8]
 801203c:	3b01      	subs	r3, #1
 801203e:	60a3      	str	r3, [r4, #8]
 8012040:	6823      	ldr	r3, [r4, #0]
 8012042:	1c5a      	adds	r2, r3, #1
 8012044:	6022      	str	r2, [r4, #0]
 8012046:	701e      	strb	r6, [r3, #0]
 8012048:	6962      	ldr	r2, [r4, #20]
 801204a:	1c43      	adds	r3, r0, #1
 801204c:	429a      	cmp	r2, r3
 801204e:	d004      	beq.n	801205a <__swbuf_r+0x6e>
 8012050:	89a3      	ldrh	r3, [r4, #12]
 8012052:	07db      	lsls	r3, r3, #31
 8012054:	d5e1      	bpl.n	801201a <__swbuf_r+0x2e>
 8012056:	2e0a      	cmp	r6, #10
 8012058:	d1df      	bne.n	801201a <__swbuf_r+0x2e>
 801205a:	4621      	mov	r1, r4
 801205c:	4628      	mov	r0, r5
 801205e:	f7ff fde1 	bl	8011c24 <_fflush_r>
 8012062:	2800      	cmp	r0, #0
 8012064:	d0d9      	beq.n	801201a <__swbuf_r+0x2e>
 8012066:	e7d6      	b.n	8012016 <__swbuf_r+0x2a>

08012068 <__swsetup_r>:
 8012068:	b538      	push	{r3, r4, r5, lr}
 801206a:	4b29      	ldr	r3, [pc, #164]	@ (8012110 <__swsetup_r+0xa8>)
 801206c:	4605      	mov	r5, r0
 801206e:	6818      	ldr	r0, [r3, #0]
 8012070:	460c      	mov	r4, r1
 8012072:	b118      	cbz	r0, 801207c <__swsetup_r+0x14>
 8012074:	6a03      	ldr	r3, [r0, #32]
 8012076:	b90b      	cbnz	r3, 801207c <__swsetup_r+0x14>
 8012078:	f7fe f922 	bl	80102c0 <__sinit>
 801207c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012080:	0719      	lsls	r1, r3, #28
 8012082:	d422      	bmi.n	80120ca <__swsetup_r+0x62>
 8012084:	06da      	lsls	r2, r3, #27
 8012086:	d407      	bmi.n	8012098 <__swsetup_r+0x30>
 8012088:	2209      	movs	r2, #9
 801208a:	602a      	str	r2, [r5, #0]
 801208c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012090:	81a3      	strh	r3, [r4, #12]
 8012092:	f04f 30ff 	mov.w	r0, #4294967295
 8012096:	e033      	b.n	8012100 <__swsetup_r+0x98>
 8012098:	0758      	lsls	r0, r3, #29
 801209a:	d512      	bpl.n	80120c2 <__swsetup_r+0x5a>
 801209c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801209e:	b141      	cbz	r1, 80120b2 <__swsetup_r+0x4a>
 80120a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120a4:	4299      	cmp	r1, r3
 80120a6:	d002      	beq.n	80120ae <__swsetup_r+0x46>
 80120a8:	4628      	mov	r0, r5
 80120aa:	f7ff f8b5 	bl	8011218 <_free_r>
 80120ae:	2300      	movs	r3, #0
 80120b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80120b2:	89a3      	ldrh	r3, [r4, #12]
 80120b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80120b8:	81a3      	strh	r3, [r4, #12]
 80120ba:	2300      	movs	r3, #0
 80120bc:	6063      	str	r3, [r4, #4]
 80120be:	6923      	ldr	r3, [r4, #16]
 80120c0:	6023      	str	r3, [r4, #0]
 80120c2:	89a3      	ldrh	r3, [r4, #12]
 80120c4:	f043 0308 	orr.w	r3, r3, #8
 80120c8:	81a3      	strh	r3, [r4, #12]
 80120ca:	6923      	ldr	r3, [r4, #16]
 80120cc:	b94b      	cbnz	r3, 80120e2 <__swsetup_r+0x7a>
 80120ce:	89a3      	ldrh	r3, [r4, #12]
 80120d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80120d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120d8:	d003      	beq.n	80120e2 <__swsetup_r+0x7a>
 80120da:	4621      	mov	r1, r4
 80120dc:	4628      	mov	r0, r5
 80120de:	f000 f883 	bl	80121e8 <__smakebuf_r>
 80120e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120e6:	f013 0201 	ands.w	r2, r3, #1
 80120ea:	d00a      	beq.n	8012102 <__swsetup_r+0x9a>
 80120ec:	2200      	movs	r2, #0
 80120ee:	60a2      	str	r2, [r4, #8]
 80120f0:	6962      	ldr	r2, [r4, #20]
 80120f2:	4252      	negs	r2, r2
 80120f4:	61a2      	str	r2, [r4, #24]
 80120f6:	6922      	ldr	r2, [r4, #16]
 80120f8:	b942      	cbnz	r2, 801210c <__swsetup_r+0xa4>
 80120fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80120fe:	d1c5      	bne.n	801208c <__swsetup_r+0x24>
 8012100:	bd38      	pop	{r3, r4, r5, pc}
 8012102:	0799      	lsls	r1, r3, #30
 8012104:	bf58      	it	pl
 8012106:	6962      	ldrpl	r2, [r4, #20]
 8012108:	60a2      	str	r2, [r4, #8]
 801210a:	e7f4      	b.n	80120f6 <__swsetup_r+0x8e>
 801210c:	2000      	movs	r0, #0
 801210e:	e7f7      	b.n	8012100 <__swsetup_r+0x98>
 8012110:	20000124 	.word	0x20000124

08012114 <_raise_r>:
 8012114:	291f      	cmp	r1, #31
 8012116:	b538      	push	{r3, r4, r5, lr}
 8012118:	4605      	mov	r5, r0
 801211a:	460c      	mov	r4, r1
 801211c:	d904      	bls.n	8012128 <_raise_r+0x14>
 801211e:	2316      	movs	r3, #22
 8012120:	6003      	str	r3, [r0, #0]
 8012122:	f04f 30ff 	mov.w	r0, #4294967295
 8012126:	bd38      	pop	{r3, r4, r5, pc}
 8012128:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801212a:	b112      	cbz	r2, 8012132 <_raise_r+0x1e>
 801212c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012130:	b94b      	cbnz	r3, 8012146 <_raise_r+0x32>
 8012132:	4628      	mov	r0, r5
 8012134:	f000 f830 	bl	8012198 <_getpid_r>
 8012138:	4622      	mov	r2, r4
 801213a:	4601      	mov	r1, r0
 801213c:	4628      	mov	r0, r5
 801213e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012142:	f000 b817 	b.w	8012174 <_kill_r>
 8012146:	2b01      	cmp	r3, #1
 8012148:	d00a      	beq.n	8012160 <_raise_r+0x4c>
 801214a:	1c59      	adds	r1, r3, #1
 801214c:	d103      	bne.n	8012156 <_raise_r+0x42>
 801214e:	2316      	movs	r3, #22
 8012150:	6003      	str	r3, [r0, #0]
 8012152:	2001      	movs	r0, #1
 8012154:	e7e7      	b.n	8012126 <_raise_r+0x12>
 8012156:	2100      	movs	r1, #0
 8012158:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801215c:	4620      	mov	r0, r4
 801215e:	4798      	blx	r3
 8012160:	2000      	movs	r0, #0
 8012162:	e7e0      	b.n	8012126 <_raise_r+0x12>

08012164 <raise>:
 8012164:	4b02      	ldr	r3, [pc, #8]	@ (8012170 <raise+0xc>)
 8012166:	4601      	mov	r1, r0
 8012168:	6818      	ldr	r0, [r3, #0]
 801216a:	f7ff bfd3 	b.w	8012114 <_raise_r>
 801216e:	bf00      	nop
 8012170:	20000124 	.word	0x20000124

08012174 <_kill_r>:
 8012174:	b538      	push	{r3, r4, r5, lr}
 8012176:	4d07      	ldr	r5, [pc, #28]	@ (8012194 <_kill_r+0x20>)
 8012178:	2300      	movs	r3, #0
 801217a:	4604      	mov	r4, r0
 801217c:	4608      	mov	r0, r1
 801217e:	4611      	mov	r1, r2
 8012180:	602b      	str	r3, [r5, #0]
 8012182:	f7f0 fdff 	bl	8002d84 <_kill>
 8012186:	1c43      	adds	r3, r0, #1
 8012188:	d102      	bne.n	8012190 <_kill_r+0x1c>
 801218a:	682b      	ldr	r3, [r5, #0]
 801218c:	b103      	cbz	r3, 8012190 <_kill_r+0x1c>
 801218e:	6023      	str	r3, [r4, #0]
 8012190:	bd38      	pop	{r3, r4, r5, pc}
 8012192:	bf00      	nop
 8012194:	200047bc 	.word	0x200047bc

08012198 <_getpid_r>:
 8012198:	f7f0 bdec 	b.w	8002d74 <_getpid>

0801219c <__swhatbuf_r>:
 801219c:	b570      	push	{r4, r5, r6, lr}
 801219e:	460c      	mov	r4, r1
 80121a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121a4:	2900      	cmp	r1, #0
 80121a6:	b096      	sub	sp, #88	@ 0x58
 80121a8:	4615      	mov	r5, r2
 80121aa:	461e      	mov	r6, r3
 80121ac:	da0d      	bge.n	80121ca <__swhatbuf_r+0x2e>
 80121ae:	89a3      	ldrh	r3, [r4, #12]
 80121b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80121b4:	f04f 0100 	mov.w	r1, #0
 80121b8:	bf14      	ite	ne
 80121ba:	2340      	movne	r3, #64	@ 0x40
 80121bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80121c0:	2000      	movs	r0, #0
 80121c2:	6031      	str	r1, [r6, #0]
 80121c4:	602b      	str	r3, [r5, #0]
 80121c6:	b016      	add	sp, #88	@ 0x58
 80121c8:	bd70      	pop	{r4, r5, r6, pc}
 80121ca:	466a      	mov	r2, sp
 80121cc:	f000 f848 	bl	8012260 <_fstat_r>
 80121d0:	2800      	cmp	r0, #0
 80121d2:	dbec      	blt.n	80121ae <__swhatbuf_r+0x12>
 80121d4:	9901      	ldr	r1, [sp, #4]
 80121d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80121da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80121de:	4259      	negs	r1, r3
 80121e0:	4159      	adcs	r1, r3
 80121e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80121e6:	e7eb      	b.n	80121c0 <__swhatbuf_r+0x24>

080121e8 <__smakebuf_r>:
 80121e8:	898b      	ldrh	r3, [r1, #12]
 80121ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121ec:	079d      	lsls	r5, r3, #30
 80121ee:	4606      	mov	r6, r0
 80121f0:	460c      	mov	r4, r1
 80121f2:	d507      	bpl.n	8012204 <__smakebuf_r+0x1c>
 80121f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80121f8:	6023      	str	r3, [r4, #0]
 80121fa:	6123      	str	r3, [r4, #16]
 80121fc:	2301      	movs	r3, #1
 80121fe:	6163      	str	r3, [r4, #20]
 8012200:	b003      	add	sp, #12
 8012202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012204:	ab01      	add	r3, sp, #4
 8012206:	466a      	mov	r2, sp
 8012208:	f7ff ffc8 	bl	801219c <__swhatbuf_r>
 801220c:	9f00      	ldr	r7, [sp, #0]
 801220e:	4605      	mov	r5, r0
 8012210:	4639      	mov	r1, r7
 8012212:	4630      	mov	r0, r6
 8012214:	f7ff f874 	bl	8011300 <_malloc_r>
 8012218:	b948      	cbnz	r0, 801222e <__smakebuf_r+0x46>
 801221a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801221e:	059a      	lsls	r2, r3, #22
 8012220:	d4ee      	bmi.n	8012200 <__smakebuf_r+0x18>
 8012222:	f023 0303 	bic.w	r3, r3, #3
 8012226:	f043 0302 	orr.w	r3, r3, #2
 801222a:	81a3      	strh	r3, [r4, #12]
 801222c:	e7e2      	b.n	80121f4 <__smakebuf_r+0xc>
 801222e:	89a3      	ldrh	r3, [r4, #12]
 8012230:	6020      	str	r0, [r4, #0]
 8012232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012236:	81a3      	strh	r3, [r4, #12]
 8012238:	9b01      	ldr	r3, [sp, #4]
 801223a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801223e:	b15b      	cbz	r3, 8012258 <__smakebuf_r+0x70>
 8012240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012244:	4630      	mov	r0, r6
 8012246:	f000 f81d 	bl	8012284 <_isatty_r>
 801224a:	b128      	cbz	r0, 8012258 <__smakebuf_r+0x70>
 801224c:	89a3      	ldrh	r3, [r4, #12]
 801224e:	f023 0303 	bic.w	r3, r3, #3
 8012252:	f043 0301 	orr.w	r3, r3, #1
 8012256:	81a3      	strh	r3, [r4, #12]
 8012258:	89a3      	ldrh	r3, [r4, #12]
 801225a:	431d      	orrs	r5, r3
 801225c:	81a5      	strh	r5, [r4, #12]
 801225e:	e7cf      	b.n	8012200 <__smakebuf_r+0x18>

08012260 <_fstat_r>:
 8012260:	b538      	push	{r3, r4, r5, lr}
 8012262:	4d07      	ldr	r5, [pc, #28]	@ (8012280 <_fstat_r+0x20>)
 8012264:	2300      	movs	r3, #0
 8012266:	4604      	mov	r4, r0
 8012268:	4608      	mov	r0, r1
 801226a:	4611      	mov	r1, r2
 801226c:	602b      	str	r3, [r5, #0]
 801226e:	f7f0 fde9 	bl	8002e44 <_fstat>
 8012272:	1c43      	adds	r3, r0, #1
 8012274:	d102      	bne.n	801227c <_fstat_r+0x1c>
 8012276:	682b      	ldr	r3, [r5, #0]
 8012278:	b103      	cbz	r3, 801227c <_fstat_r+0x1c>
 801227a:	6023      	str	r3, [r4, #0]
 801227c:	bd38      	pop	{r3, r4, r5, pc}
 801227e:	bf00      	nop
 8012280:	200047bc 	.word	0x200047bc

08012284 <_isatty_r>:
 8012284:	b538      	push	{r3, r4, r5, lr}
 8012286:	4d06      	ldr	r5, [pc, #24]	@ (80122a0 <_isatty_r+0x1c>)
 8012288:	2300      	movs	r3, #0
 801228a:	4604      	mov	r4, r0
 801228c:	4608      	mov	r0, r1
 801228e:	602b      	str	r3, [r5, #0]
 8012290:	f7f0 fde8 	bl	8002e64 <_isatty>
 8012294:	1c43      	adds	r3, r0, #1
 8012296:	d102      	bne.n	801229e <_isatty_r+0x1a>
 8012298:	682b      	ldr	r3, [r5, #0]
 801229a:	b103      	cbz	r3, 801229e <_isatty_r+0x1a>
 801229c:	6023      	str	r3, [r4, #0]
 801229e:	bd38      	pop	{r3, r4, r5, pc}
 80122a0:	200047bc 	.word	0x200047bc

080122a4 <_init>:
 80122a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122a6:	bf00      	nop
 80122a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122aa:	bc08      	pop	{r3}
 80122ac:	469e      	mov	lr, r3
 80122ae:	4770      	bx	lr

080122b0 <_fini>:
 80122b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122b2:	bf00      	nop
 80122b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122b6:	bc08      	pop	{r3}
 80122b8:	469e      	mov	lr, r3
 80122ba:	4770      	bx	lr
