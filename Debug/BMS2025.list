
BMS2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008db0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08008f60  08008f60  00009f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f4  080090f4  0000b060  2**0
                  CONTENTS
  4 .ARM          00000000  080090f4  080090f4  0000b060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090f4  080090f4  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080090f4  080090f4  0000a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090fc  080090fc  0000a0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009100  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002870  20000060  08009160  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200028d0  08009160  0000b8d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022f28  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004770  00000000  00000000  0002dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  00032728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001671  00000000  00000000  00034420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cb6d  00000000  00000000  00035a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b8b  00000000  00000000  000625fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011054e  00000000  00000000  00083189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001936d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e5c  00000000  00000000  0019371c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0019b578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008f48 	.word	0x08008f48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08008f48 	.word	0x08008f48

080001f0 <_ZN7ADS7138C1EP19__I2C_HandleTypeDefh>:
#include "ADS7138.hpp"

#include <cstring>

ADS7138::ADS7138(I2C_HandleTypeDef *phi2c, uint8_t address) {
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	4613      	mov	r3, r2
 80001fc:	71fb      	strb	r3, [r7, #7]
    this->_phi2c = phi2c;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	68ba      	ldr	r2, [r7, #8]
 8000202:	601a      	str	r2, [r3, #0]
    this->_address = address;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	79fa      	ldrb	r2, [r7, #7]
 8000208:	711a      	strb	r2, [r3, #4]
}
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	4618      	mov	r0, r3
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <_ZN7ADS71384InitEv>:

HAL_StatusTypeDef ADS7138::Init() {
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    // Soft reset ADC
    uint8_t generalCfg = ADS7138_GENERAL_CFG_RST;
 8000220:	2301      	movs	r3, #1
 8000222:	73fb      	strb	r3, [r7, #15]
    if (WriteReg(ADS7138_Register::GENERAL_CFG, generalCfg) != HAL_OK)
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	461a      	mov	r2, r3
 8000228:	2101      	movs	r1, #1
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f93a 	bl	80004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	bf14      	ite	ne
 8000236:	2301      	movne	r3, #1
 8000238:	2300      	moveq	r3, #0
 800023a:	b2db      	uxtb	r3, r3
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <_ZN7ADS71384InitEv+0x2c>
        return HAL_ERROR;
 8000240:	2301      	movs	r3, #1
 8000242:	e024      	b.n	800028e <_ZN7ADS71384InitEv+0x76>

    // Wait for reset to complete
    while (ReadReg(ADS7138_Register::GENERAL_CFG, &generalCfg) != HAL_OK);
 8000244:	bf00      	nop
 8000246:	f107 030f 	add.w	r3, r7, #15
 800024a:	461a      	mov	r2, r3
 800024c:	2101      	movs	r1, #1
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f8e7 	bl	8000422 <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	bf14      	ite	ne
 800025a:	2301      	movne	r3, #1
 800025c:	2300      	moveq	r3, #0
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2b00      	cmp	r3, #0
 8000262:	d1f0      	bne.n	8000246 <_ZN7ADS71384InitEv+0x2e>

    uint8_t system_status;
    ReadReg(ADS7138_Register::SYSTEM_STATUS, &system_status);
 8000264:	f107 030e 	add.w	r3, r7, #14
 8000268:	461a      	mov	r2, r3
 800026a:	2100      	movs	r1, #0
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f000 f8d8 	bl	8000422 <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh>

    // Check that bit 7 (constant value) is set to 1
    if ((system_status & ADS7138_SYSTEM_STATUS_RSVD) == 0) {
 8000272:	7bbb      	ldrb	r3, [r7, #14]
 8000274:	b25b      	sxtb	r3, r3
 8000276:	2b00      	cmp	r3, #0
 8000278:	db01      	blt.n	800027e <_ZN7ADS71384InitEv+0x66>
        return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e007      	b.n	800028e <_ZN7ADS71384InitEv+0x76>
    }

    // Check that I2C is not in high-speed mode
    if ((system_status & ADS7138_SYSTEM_I2C_SPEED) != 0) {
 800027e:	7bbb      	ldrb	r3, [r7, #14]
 8000280:	f003 0320 	and.w	r3, r3, #32
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <_ZN7ADS71384InitEv+0x74>
        return HAL_ERROR;
 8000288:	2301      	movs	r3, #1
 800028a:	e000      	b.n	800028e <_ZN7ADS71384InitEv+0x76>
    }

    return HAL_OK;
 800028c:	2300      	movs	r3, #0
}
 800028e:	4618      	mov	r0, r3
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}

08000296 <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType>:
/**
 * @brief Configure the data register
 * @param fix_pattern Enable fixed pattern mode
 * @param append_type Append channel id and/or status bits to data
*/
HAL_StatusTypeDef ADS7138::ConfigureData(bool fix_pattern, DataCfg_AppendType append_type) {
 8000296:	b580      	push	{r7, lr}
 8000298:	b084      	sub	sp, #16
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
 800029e:	460b      	mov	r3, r1
 80002a0:	70fb      	strb	r3, [r7, #3]
 80002a2:	4613      	mov	r3, r2
 80002a4:	70bb      	strb	r3, [r7, #2]
    uint8_t dataCfg = 0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	73fb      	strb	r3, [r7, #15]

    if (fix_pattern)
 80002aa:	78fb      	ldrb	r3, [r7, #3]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d003      	beq.n	80002b8 <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x22>
        dataCfg |= ADS7138_DATA_CFG_FIX_PAT;
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
 80002b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002b6:	73fb      	strb	r3, [r7, #15]

    dataCfg |= static_cast<uint8_t>(append_type);
 80002b8:	7bfa      	ldrb	r2, [r7, #15]
 80002ba:	78bb      	ldrb	r3, [r7, #2]
 80002bc:	4313      	orrs	r3, r2
 80002be:	73fb      	strb	r3, [r7, #15]

    if (WriteReg(ADS7138_Register::DATA_CFG, dataCfg) != HAL_OK)
 80002c0:	7bfb      	ldrb	r3, [r7, #15]
 80002c2:	461a      	mov	r2, r3
 80002c4:	2102      	movs	r1, #2
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f000 f8ec 	bl	80004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	bf14      	ite	ne
 80002d2:	2301      	movne	r3, #1
 80002d4:	2300      	moveq	r3, #0
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x4a>
        return HAL_ERROR;
 80002dc:	2301      	movs	r3, #1
 80002de:	e01d      	b.n	800031c <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x86>

    // Set internal variables
    _fix_pattern = fix_pattern;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	78fa      	ldrb	r2, [r7, #3]
 80002e4:	719a      	strb	r2, [r3, #6]
    _append_type = append_type;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	78ba      	ldrb	r2, [r7, #2]
 80002ea:	71da      	strb	r2, [r3, #7]

    // Read back data to verify write
    uint8_t readDataCfg;
    if (ReadReg(ADS7138_Register::DATA_CFG, &readDataCfg) != HAL_OK)
 80002ec:	f107 030e 	add.w	r3, r7, #14
 80002f0:	461a      	mov	r2, r3
 80002f2:	2102      	movs	r1, #2
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f000 f894 	bl	8000422 <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	bf14      	ite	ne
 8000300:	2301      	movne	r3, #1
 8000302:	2300      	moveq	r3, #0
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x78>
        return HAL_ERROR;
 800030a:	2301      	movs	r3, #1
 800030c:	e006      	b.n	800031c <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x86>
    if (readDataCfg != dataCfg)
 800030e:	7bbb      	ldrb	r3, [r7, #14]
 8000310:	7bfa      	ldrb	r2, [r7, #15]
 8000312:	429a      	cmp	r2, r3
 8000314:	d001      	beq.n	800031a <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x84>
        return HAL_ERROR;
 8000316:	2301      	movs	r3, #1
 8000318:	e000      	b.n	800031c <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x86>

    return HAL_OK;
 800031a:	2300      	movs	r3, #0
}
 800031c:	4618      	mov	r0, r3
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <_ZN7ADS713815ConfigureOpmodeEb13ConvMode_Type>:
/**
 * @brief Configure ADC operational mode
 * @param conv_on_err If set to true, CRC error will change all inputs to analog and pause channel sequencing
 * @param conv_mode ADC conversion initiator mode, manual, autonomous, or turbo mode
*/
HAL_StatusTypeDef ADS7138::ConfigureOpmode(bool conv_on_err, ConvMode_Type conv_mode) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
 8000330:	4613      	mov	r3, r2
 8000332:	70bb      	strb	r3, [r7, #2]
    uint8_t opmodeCfg = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	73fb      	strb	r3, [r7, #15]

    if (conv_on_err)
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d003      	beq.n	8000346 <_ZN7ADS713815ConfigureOpmodeEb13ConvMode_Type+0x22>
        opmodeCfg |= ADS7138_OPMODE_CFG_CONV_ON_ERR;
 800033e:	7bfb      	ldrb	r3, [r7, #15]
 8000340:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000344:	73fb      	strb	r3, [r7, #15]

    opmodeCfg |= static_cast<uint8_t>(conv_mode);
 8000346:	7bfa      	ldrb	r2, [r7, #15]
 8000348:	78bb      	ldrb	r3, [r7, #2]
 800034a:	4313      	orrs	r3, r2
 800034c:	73fb      	strb	r3, [r7, #15]

    if (WriteReg(ADS7138_Register::OPMODE_CFG, opmodeCfg) != HAL_OK)
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	461a      	mov	r2, r3
 8000352:	2104      	movs	r1, #4
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f000 f8a5 	bl	80004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	bf14      	ite	ne
 8000360:	2301      	movne	r3, #1
 8000362:	2300      	moveq	r3, #0
 8000364:	b2db      	uxtb	r3, r3
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <_ZN7ADS713815ConfigureOpmodeEb13ConvMode_Type+0x4a>
        return HAL_ERROR;
 800036a:	2301      	movs	r3, #1
 800036c:	e003      	b.n	8000376 <_ZN7ADS713815ConfigureOpmodeEb13ConvMode_Type+0x52>

    _conv_mode = conv_mode;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	78ba      	ldrb	r2, [r7, #2]
 8000372:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8000374:	2300      	movs	r3, #0
}
 8000376:	4618      	mov	r0, r3
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <_ZN7ADS713826ConversionReadAutoSequenceEPth>:
/**
 * @brief Read conversion data from the ADC in auto-sequence mode. ADC must be in manual conversion mode
 * @param buf Buffer to store data. Data stored in 16-bit format
 * @param len Number of channels to read. Read will start at channel 0
*/
HAL_StatusTypeDef ADS7138::ConversionReadAutoSequence(uint16_t *buf, uint8_t len) {
 800037e:	b580      	push	{r7, lr}
 8000380:	b088      	sub	sp, #32
 8000382:	af02      	add	r7, sp, #8
 8000384:	60f8      	str	r0, [r7, #12]
 8000386:	60b9      	str	r1, [r7, #8]
 8000388:	4613      	mov	r3, r2
 800038a:	71fb      	strb	r3, [r7, #7]
    if (len > 8)
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	2b08      	cmp	r3, #8
 8000390:	d901      	bls.n	8000396 <_ZN7ADS713826ConversionReadAutoSequenceEPth+0x18>
        return HAL_ERROR;
 8000392:	2301      	movs	r3, #1
 8000394:	e041      	b.n	800041a <_ZN7ADS713826ConversionReadAutoSequenceEPth+0x9c>

    if (_conv_mode != ConvMode_Type::MANUAL)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	795b      	ldrb	r3, [r3, #5]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <_ZN7ADS713826ConversionReadAutoSequenceEPth+0x24>
        return HAL_ERROR;
 800039e:	2301      	movs	r3, #1
 80003a0:	e03b      	b.n	800041a <_ZN7ADS713826ConversionReadAutoSequenceEPth+0x9c>

    // Start sequence, scan in auto sequence mode
    WriteReg(ADS7138_Register::SEQUENCE_CFG,
 80003a2:	2211      	movs	r2, #17
 80003a4:	2110      	movs	r1, #16
 80003a6:	68f8      	ldr	r0, [r7, #12]
 80003a8:	f000 f87c 	bl	80004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>
                ADS7138_SEQUENCE_CFG_SEQ_START | 0x1);

    // Read conversion data
    HAL_I2C_Master_Receive(_phi2c,
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	6818      	ldr	r0, [r3, #0]
                            _address << 1,
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	791b      	ldrb	r3, [r3, #4]
    HAL_I2C_Master_Receive(_phi2c,
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	b299      	uxth	r1, r3
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	b29b      	uxth	r3, r3
 80003c0:	f04f 32ff 	mov.w	r2, #4294967295
 80003c4:	9200      	str	r2, [sp, #0]
 80003c6:	68ba      	ldr	r2, [r7, #8]
 80003c8:	f002 fdde 	bl	8002f88 <HAL_I2C_Master_Receive>
                            reinterpret_cast<uint8_t*>(buf),
                            2 * len,
                            HAL_MAX_DELAY);

    // Swap endianness of each item in buffer
    for (int i = 0; i < len; i++) {
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	e019      	b.n	8000406 <_ZN7ADS713826ConversionReadAutoSequenceEPth+0x88>
        buf[i] = (buf[i] << 8) | (buf[i] >> 8);
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	68ba      	ldr	r2, [r7, #8]
 80003d8:	4413      	add	r3, r2
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	021b      	lsls	r3, r3, #8
 80003de:	b21a      	sxth	r2, r3
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	440b      	add	r3, r1
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	0a1b      	lsrs	r3, r3, #8
 80003ec:	b29b      	uxth	r3, r3
 80003ee:	b21b      	sxth	r3, r3
 80003f0:	4313      	orrs	r3, r2
 80003f2:	b219      	sxth	r1, r3
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	68ba      	ldr	r2, [r7, #8]
 80003fa:	4413      	add	r3, r2
 80003fc:	b28a      	uxth	r2, r1
 80003fe:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < len; i++) {
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	3301      	adds	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	429a      	cmp	r2, r3
 800040c:	dbe1      	blt.n	80003d2 <_ZN7ADS713826ConversionReadAutoSequenceEPth+0x54>
    }

    // Stop sequence and switch to manual select mode
    WriteReg(ADS7138_Register::SEQUENCE_CFG, 0x0);
 800040e:	2200      	movs	r2, #0
 8000410:	2110      	movs	r1, #16
 8000412:	68f8      	ldr	r0, [r7, #12]
 8000414:	f000 f846 	bl	80004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>

    return HAL_OK;
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh>:
    *data = (dataMSB << 8) | dataLSB;

    return HAL_OK;
}

HAL_StatusTypeDef ADS7138::ReadReg(ADS7138_Register reg, uint8_t *data) {
 8000422:	b580      	push	{r7, lr}
 8000424:	b088      	sub	sp, #32
 8000426:	af02      	add	r7, sp, #8
 8000428:	60f8      	str	r0, [r7, #12]
 800042a:	460b      	mov	r3, r1
 800042c:	607a      	str	r2, [r7, #4]
 800042e:	72fb      	strb	r3, [r7, #11]
    uint8_t txData[2] = {static_cast<uint8_t>(ADS7138_Opcode::READ),
 8000430:	2300      	movs	r3, #0
 8000432:	82bb      	strh	r3, [r7, #20]
 8000434:	2310      	movs	r3, #16
 8000436:	753b      	strb	r3, [r7, #20]
                        static_cast<uint8_t>(reg)};
 8000438:	7afb      	ldrb	r3, [r7, #11]
 800043a:	757b      	strb	r3, [r7, #21]

    if (HAL_I2C_Master_Transmit(_phi2c, _address << 1, txData, 2, HAL_MAX_DELAY) != HAL_OK) {
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	6818      	ldr	r0, [r3, #0]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	b299      	uxth	r1, r3
 8000448:	f107 0214 	add.w	r2, r7, #20
 800044c:	f04f 33ff 	mov.w	r3, #4294967295
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	2302      	movs	r3, #2
 8000454:	f002 fc80 	bl	8002d58 <HAL_I2C_Master_Transmit>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	bf14      	ite	ne
 800045e:	2301      	movne	r3, #1
 8000460:	2300      	moveq	r3, #0
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh+0x4a>
        return HAL_ERROR;
 8000468:	2301      	movs	r3, #1
 800046a:	e017      	b.n	800049c <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh+0x7a>
    }

    if (HAL_I2C_Master_Receive(_phi2c, _address << 1, data, 1, HAL_MAX_DELAY) != HAL_OK) {
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	6818      	ldr	r0, [r3, #0]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	791b      	ldrb	r3, [r3, #4]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	b299      	uxth	r1, r3
 8000478:	f04f 33ff 	mov.w	r3, #4294967295
 800047c:	9300      	str	r3, [sp, #0]
 800047e:	2301      	movs	r3, #1
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	f002 fd81 	bl	8002f88 <HAL_I2C_Master_Receive>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	bf14      	ite	ne
 800048c:	2301      	movne	r3, #1
 800048e:	2300      	moveq	r3, #0
 8000490:	b2db      	uxtb	r3, r3
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh+0x78>
        return HAL_ERROR;
 8000496:	2301      	movs	r3, #1
 8000498:	e000      	b.n	800049c <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh+0x7a>
    }

    return HAL_OK;
 800049a:	2300      	movs	r3, #0
}
 800049c:	4618      	mov	r0, r3
 800049e:	3718      	adds	r7, #24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>:

HAL_StatusTypeDef ADS7138::WriteReg(ADS7138_Register reg, uint8_t data) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	70fb      	strb	r3, [r7, #3]
 80004b0:	4613      	mov	r3, r2
 80004b2:	70bb      	strb	r3, [r7, #2]
    uint8_t txData[3] = {static_cast<uint8_t>(ADS7138_Opcode::WRITE),
 80004b4:	f107 030c 	add.w	r3, r7, #12
 80004b8:	2100      	movs	r1, #0
 80004ba:	460a      	mov	r2, r1
 80004bc:	801a      	strh	r2, [r3, #0]
 80004be:	460a      	mov	r2, r1
 80004c0:	709a      	strb	r2, [r3, #2]
 80004c2:	2308      	movs	r3, #8
 80004c4:	733b      	strb	r3, [r7, #12]
                        static_cast<uint8_t>(reg),
                        data};
 80004c6:	78fb      	ldrb	r3, [r7, #3]
 80004c8:	737b      	strb	r3, [r7, #13]
 80004ca:	78bb      	ldrb	r3, [r7, #2]
 80004cc:	73bb      	strb	r3, [r7, #14]

    if (HAL_I2C_Master_Transmit(_phi2c, _address << 1, txData, 3, HAL_MAX_DELAY) != HAL_OK) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6818      	ldr	r0, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	b299      	uxth	r1, r3
 80004da:	f107 020c 	add.w	r2, r7, #12
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2303      	movs	r3, #3
 80004e6:	f002 fc37 	bl	8002d58 <HAL_I2C_Master_Transmit>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	bf14      	ite	ne
 80004f0:	2301      	movne	r3, #1
 80004f2:	2300      	moveq	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <_ZN7ADS71388WriteRegE16ADS7138_Registerh+0x5a>
        return HAL_ERROR;
 80004fa:	2301      	movs	r3, #1
 80004fc:	e000      	b.n	8000500 <_ZN7ADS71388WriteRegE16ADS7138_Registerh+0x5c>

    }

    return HAL_OK;
 80004fe:	2300      	movs	r3, #0
}
 8000500:	4618      	mov	r0, r3
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <_ZN7ADS713818AutoSelectChannelsEh>:
    return HAL_OK;
}


// TODO: Get rid of this
HAL_StatusTypeDef ADS7138::AutoSelectChannels(uint8_t channels) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	70fb      	strb	r3, [r7, #3]
    if (WriteReg(ADS7138_Register::AUTO_SEQ_CH_SEL, channels) != HAL_OK)
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	461a      	mov	r2, r3
 8000518:	2112      	movs	r1, #18
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f7ff ffc2 	bl	80004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	bf14      	ite	ne
 8000526:	2301      	movne	r3, #1
 8000528:	2300      	moveq	r3, #0
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <_ZN7ADS713818AutoSelectChannelsEh+0x2c>
        return HAL_ERROR;
 8000530:	2301      	movs	r3, #1
 8000532:	e000      	b.n	8000536 <_ZN7ADS713818AutoSelectChannelsEh+0x2e>

    return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <_Z13CPP_UserSetupv>:

union FloatBytes fb;



void CPP_UserSetup(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    // Make sure that timer priorities are configured correctly
    HAL_Delay(10);
 8000544:	200a      	movs	r0, #10
 8000546:	f001 f983 	bl	8001850 <HAL_Delay>


    contactors_on = false;
 800054a:	4b13      	ldr	r3, [pc, #76]	@ (8000598 <_Z13CPP_UserSetupv+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2101      	movs	r1, #1
 8000554:	4811      	ldr	r0, [pc, #68]	@ (800059c <_Z13CPP_UserSetupv+0x5c>)
 8000556:	f002 faaf 	bl	8002ab8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2104      	movs	r1, #4
 800055e:	480f      	ldr	r0, [pc, #60]	@ (800059c <_Z13CPP_UserSetupv+0x5c>)
 8000560:	f002 faaa 	bl	8002ab8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2180      	movs	r1, #128	@ 0x80
 8000568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800056c:	f002 faa4 	bl	8002ab8 <HAL_GPIO_WritePin>



    adc.Init();
 8000570:	480b      	ldr	r0, [pc, #44]	@ (80005a0 <_Z13CPP_UserSetupv+0x60>)
 8000572:	f7ff fe51 	bl	8000218 <_ZN7ADS71384InitEv>
    adc.ConfigureOpmode(false, ConvMode_Type::MANUAL);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	4809      	ldr	r0, [pc, #36]	@ (80005a0 <_Z13CPP_UserSetupv+0x60>)
 800057c:	f7ff fed2 	bl	8000324 <_ZN7ADS713815ConfigureOpmodeEb13ConvMode_Type>
    adc.ConfigureData(false, DataCfg_AppendType::ID);
 8000580:	2210      	movs	r2, #16
 8000582:	2100      	movs	r1, #0
 8000584:	4806      	ldr	r0, [pc, #24]	@ (80005a0 <_Z13CPP_UserSetupv+0x60>)
 8000586:	f7ff fe86 	bl	8000296 <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType>
    adc.AutoSelectChannels((0x1 << 0));
 800058a:	2101      	movs	r1, #1
 800058c:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <_Z13CPP_UserSetupv+0x60>)
 800058e:	f7ff ffbb 	bl	8000508 <_ZN7ADS713818AutoSelectChannelsEh>

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000a0 	.word	0x200000a0
 800059c:	48000400 	.word	0x48000400
 80005a0:	200000a4 	.word	0x200000a4

080005a4 <_Z16StartDefaultTaskPv>:


void StartDefaultTask(void *argument)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_UART_Receive(&huart4, UART4_rxBuffer, 1, HAL_MAX_DELAY);
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80005ac:	2101      	movs	r1, #1
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b2:	f002 fa99 	bl	8002ae8 <HAL_GPIO_TogglePin>
    osDelay(500);
 80005b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005ba:	f005 ff0b 	bl	80063d4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80005be:	bf00      	nop
 80005c0:	e7f4      	b.n	80005ac <_Z16StartDefaultTaskPv+0x8>
	...

080005c4 <_Z11StartTask02Pv>:
  }
  /* USER CODE END 5 */
}

void StartTask02(void *argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	float low;

  for (;;)
  {

	  adc.ConversionReadAutoSequence(&rawData, 1);
 80005cc:	f107 030a 	add.w	r3, r7, #10
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	4808      	ldr	r0, [pc, #32]	@ (80005f8 <_Z11StartTask02Pv+0x34>)
 80005d6:	f7ff fed2 	bl	800037e <_ZN7ADS713826ConversionReadAutoSequenceEPth>
	  low  = ADCToCurrentL(rawData);
 80005da:	897b      	ldrh	r3, [r7, #10]
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f8e1 	bl	80007a4 <_Z13ADCToCurrentLt>
 80005e2:	ed87 0a03 	vstr	s0, [r7, #12]
	  fb.value = low;
 80005e6:	4a05      	ldr	r2, [pc, #20]	@ (80005fc <_Z11StartTask02Pv+0x38>)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	6013      	str	r3, [r2, #0]


    osDelay(20);
 80005ec:	2014      	movs	r0, #20
 80005ee:	f005 fef1 	bl	80063d4 <osDelay>
	  adc.ConversionReadAutoSequence(&rawData, 1);
 80005f2:	bf00      	nop
 80005f4:	e7ea      	b.n	80005cc <_Z11StartTask02Pv+0x8>
 80005f6:	bf00      	nop
 80005f8:	200000a4 	.word	0x200000a4
 80005fc:	200000ac 	.word	0x200000ac

08000600 <_Z11StartTask03Pv>:
  }
  /* USER CODE END StartTask02 */
}

void StartTask03(void *argument)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{

	  osDelay(50);
 8000608:	2032      	movs	r0, #50	@ 0x32
 800060a:	f005 fee3 	bl	80063d4 <osDelay>
 800060e:	e7fb      	b.n	8000608 <_Z11StartTask03Pv+0x8>

08000610 <_Z11StartTask04Pv>:
  /* USER CODE END StartTask03 */
}


void StartTask04(void *argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  for(;;)
  {



    osDelay(100);
 8000618:	2064      	movs	r0, #100	@ 0x64
 800061a:	f005 fedb 	bl	80063d4 <osDelay>
 800061e:	e7fb      	b.n	8000618 <_Z11StartTask04Pv+0x8>

08000620 <_Z11StartTask05Pv>:
  /* USER CODE END StartTask04 */
}


void StartTask05(void *argument)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b090      	sub	sp, #64	@ 0x40
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  CAN_TxHeaderTypeDef TxHeader;
  uint8_t TxData[8] = { 0 };
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  uint32_t TxMailbox = { 0 };
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
  int HAL_CAN_BUSY = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t messages_sent = 0;
 8000638:	f04f 0200 	mov.w	r2, #0
 800063c:	f04f 0300 	mov.w	r3, #0
 8000640:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  TxHeader.StdId = 0x4; // 11 bit Identifier
 8000648:	2304      	movs	r3, #4
 800064a:	617b      	str	r3, [r7, #20]
  TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 800064c:	2300      	movs	r3, #0
 800064e:	623b      	str	r3, [r7, #32]
  TxHeader.DLC = 8; // 8 bytes being transmitted
 8000650:	2308      	movs	r3, #8
 8000652:	627b      	str	r3, [r7, #36]	@ 0x24
  TxData[0] = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	733b      	strb	r3, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
	  TxData[1] = fb.bytes[0];
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <_Z11StartTask05Pv+0xb4>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	737b      	strb	r3, [r7, #13]
	  TxData[2] = fb.bytes[1];
 800065e:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <_Z11StartTask05Pv+0xb4>)
 8000660:	785b      	ldrb	r3, [r3, #1]
 8000662:	73bb      	strb	r3, [r7, #14]
	  TxData[3] = fb.bytes[2];
 8000664:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <_Z11StartTask05Pv+0xb4>)
 8000666:	789b      	ldrb	r3, [r3, #2]
 8000668:	73fb      	strb	r3, [r7, #15]
	  TxData[4] = fb.bytes[3];
 800066a:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <_Z11StartTask05Pv+0xb4>)
 800066c:	78db      	ldrb	r3, [r3, #3]
 800066e:	743b      	strb	r3, [r7, #16]

	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000670:	bf00      	nop
 8000672:	4819      	ldr	r0, [pc, #100]	@ (80006d8 <_Z11StartTask05Pv+0xb8>)
 8000674:	f001 fc00 	bl	8001e78 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	bf0c      	ite	eq
 800067e:	2301      	moveq	r3, #1
 8000680:	2300      	movne	r3, #0
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f4      	bne.n	8000672 <_Z11StartTask05Pv+0x52>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	f107 020c 	add.w	r2, r7, #12
 8000690:	f107 0114 	add.w	r1, r7, #20
 8000694:	4810      	ldr	r0, [pc, #64]	@ (80006d8 <_Z11StartTask05Pv+0xb8>)
 8000696:	f001 fb1f 	bl	8001cd8 <HAL_CAN_AddTxMessage>
 800069a:	4603      	mov	r3, r0
 800069c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  messages_sent++;
 80006a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80006a4:	1c54      	adds	r4, r2, #1
 80006a6:	f143 0500 	adc.w	r5, r3, #0
 80006aa:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	  if (status == HAL_ERROR)
 80006ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d102      	bne.n	80006bc <_Z11StartTask05Pv+0x9c>
	  {
		  Error_Handler();
 80006b6:	f000 fccf 	bl	8001058 <Error_Handler>
 80006ba:	e006      	b.n	80006ca <_Z11StartTask05Pv+0xaa>
	  }
	  else if (status == HAL_BUSY)
 80006bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d102      	bne.n	80006ca <_Z11StartTask05Pv+0xaa>
	  {
	  HAL_CAN_BUSY++;
 80006c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006c6:	3301      	adds	r3, #1
 80006c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  }


    osDelay(100);
 80006ca:	2064      	movs	r0, #100	@ 0x64
 80006cc:	f005 fe82 	bl	80063d4 <osDelay>
  }
 80006d0:	e7c2      	b.n	8000658 <_Z11StartTask05Pv+0x38>
 80006d2:	bf00      	nop
 80006d4:	200000ac 	.word	0x200000ac
 80006d8:	200000b0 	.word	0x200000b0

080006dc <_Z11StartTask06Pv>:

}

void StartTask06(void *argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
	  if(contactors_on == true){
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <_Z11StartTask06Pv+0x54>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d10e      	bne.n	800070a <_Z11StartTask06Pv+0x2e>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2104      	movs	r1, #4
 80006f0:	4810      	ldr	r0, [pc, #64]	@ (8000734 <_Z11StartTask06Pv+0x58>)
 80006f2:	f002 f9e1 	bl	8002ab8 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80006f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006fa:	f001 f8a9 	bl	8001850 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2101      	movs	r1, #1
 8000702:	480c      	ldr	r0, [pc, #48]	@ (8000734 <_Z11StartTask06Pv+0x58>)
 8000704:	f002 f9d8 	bl	8002ab8 <HAL_GPIO_WritePin>
 8000708:	e00d      	b.n	8000726 <_Z11StartTask06Pv+0x4a>
	  }else{

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2104      	movs	r1, #4
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <_Z11StartTask06Pv+0x58>)
 8000710:	f002 f9d2 	bl	8002ab8 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000714:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000718:	f001 f89a 	bl	8001850 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2101      	movs	r1, #1
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <_Z11StartTask06Pv+0x58>)
 8000722:	f002 f9c9 	bl	8002ab8 <HAL_GPIO_WritePin>
	  }
      osDelay(10);
 8000726:	200a      	movs	r0, #10
 8000728:	f005 fe54 	bl	80063d4 <osDelay>
	  if(contactors_on == true){
 800072c:	e7da      	b.n	80006e4 <_Z11StartTask06Pv+0x8>
 800072e:	bf00      	nop
 8000730:	200000a0 	.word	0x200000a0
 8000734:	48000400 	.word	0x48000400

08000738 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END StartTask06 */
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000742:	4a16      	ldr	r2, [pc, #88]	@ (800079c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000744:	2100      	movs	r1, #0
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f001 fbcb 	bl	8001ee2 <HAL_CAN_GetRxMessage>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf14      	ite	ne
 8000752:	2301      	movne	r3, #1
 8000754:	2300      	moveq	r3, #0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
  {
    Error_Handler();
 800075c:	f000 fc7c 	bl	8001058 <Error_Handler>
  }

  if (RxHeader.StdId == 0x7FF){
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000768:	4293      	cmp	r3, r2
 800076a:	d110      	bne.n	800078e <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
	  if(RxData[0] == 1){
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d10c      	bne.n	800078e <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		  //ignition switch
		  if((RxData[1] & 0x80) != 0x00){
			  //preform shut down sequence
		  }

		  if((RxData[1] & 0x08) != 0x00){
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000776:	785b      	ldrb	r3, [r3, #1]
 8000778:	f003 0308 	and.w	r3, r3, #8
 800077c:	2b00      	cmp	r3, #0
 800077e:	d003      	beq.n	8000788 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
			  contactors_on = true; // turn brakes on
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]



	  }
  }
}
 8000786:	e002      	b.n	800078e <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
			  contactors_on = false; // turn breaks off
 8000788:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000098 	.word	0x20000098
 800079c:	2000007c 	.word	0x2000007c
 80007a0:	200000a0 	.word	0x200000a0

080007a4 <_Z13ADCToCurrentLt>:

float ADCToCurrentL(uint16_t adc_val) {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	80fb      	strh	r3, [r7, #6]

    // Constant offset for linear estimator
    static constexpr float b = -62.87;

    // Convert ADC value to current
    return (float)adc_val * m + b;
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007b8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80007d8 <_Z13ADCToCurrentLt+0x34>
 80007bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007c0:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80007dc <_Z13ADCToCurrentLt+0x38>
 80007c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 80007c8:	eeb0 0a67 	vmov.f32	s0, s15
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	3af84018 	.word	0x3af84018
 80007dc:	427b7ae1 	.word	0x427b7ae1

080007e0 <_Z41__static_initialization_and_destruction_0ii>:
    // Constant offset for linear estimator
    static constexpr float b = -252.4;

    // Convert ADC value to current
    return (float)adc_val * m + b;
}
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d109      	bne.n	8000804 <_Z41__static_initialization_and_destruction_0ii+0x24>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d104      	bne.n	8000804 <_Z41__static_initialization_and_destruction_0ii+0x24>
ADS7138 adc = ADS7138(&hi2c2, 0x10);
 80007fa:	2210      	movs	r2, #16
 80007fc:	4903      	ldr	r1, [pc, #12]	@ (800080c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000800:	f7ff fcf6 	bl	80001f0 <_ZN7ADS7138C1EP19__I2C_HandleTypeDefh>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000100 	.word	0x20000100
 8000810:	200000a4 	.word	0x200000a4

08000814 <_GLOBAL__sub_I_RxHeader>:
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
 8000818:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff ffdf 	bl	80007e0 <_Z41__static_initialization_and_destruction_0ii>
 8000822:	bd80      	pop	{r7, pc}

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000828:	f000 ffd9 	bl	80017de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082c:	f000 f882 	bl	8000934 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000830:	f000 fb52 	bl	8000ed8 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8000834:	f000 f8de 	bl	80009f4 <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 8000838:	f000 f932 	bl	8000aa0 <_ZL12MX_CAN2_Initv>
  MX_I2C2_Init();
 800083c:	f000 f96a 	bl	8000b14 <_ZL12MX_I2C2_Initv>
  MX_I2C3_Init();
 8000840:	f000 f9b6 	bl	8000bb0 <_ZL12MX_I2C3_Initv>
  MX_I2C4_Init();
 8000844:	f000 fa02 	bl	8000c4c <_ZL12MX_I2C4_Initv>
  MX_TIM2_Init();
 8000848:	f000 fa4e 	bl	8000ce8 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800084c:	f000 fab4 	bl	8000db8 <_ZL12MX_TIM3_Initv>
  MX_USB_OTG_FS_HCD_Init();
 8000850:	f000 fb1c 	bl	8000e8c <_ZL22MX_USB_OTG_FS_HCD_Initv>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000854:	4824      	ldr	r0, [pc, #144]	@ (80008e8 <main+0xc4>)
 8000856:	f001 f9fb 	bl	8001c50 <HAL_CAN_Start>




  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800085a:	2102      	movs	r1, #2
 800085c:	4822      	ldr	r0, [pc, #136]	@ (80008e8 <main+0xc4>)
 800085e:	f001 fc62 	bl	8002126 <HAL_CAN_ActivateNotification>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <main+0x52>
  {
	  Error_Handler();
 8000872:	f000 fbf1 	bl	8001058 <Error_Handler>
  }

  CPP_UserSetup();
 8000876:	f7ff fe63 	bl	8000540 <_Z13CPP_UserSetupv>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800087a:	f005 fccf 	bl	800621c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800087e:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <main+0xc8>)
 8000880:	2100      	movs	r1, #0
 8000882:	481b      	ldr	r0, [pc, #108]	@ (80008f0 <main+0xcc>)
 8000884:	f005 fd14 	bl	80062b0 <osThreadNew>
 8000888:	4603      	mov	r3, r0
 800088a:	4a1a      	ldr	r2, [pc, #104]	@ (80008f4 <main+0xd0>)
 800088c:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(StartTask02, NULL, &Voltage_Monitor_attributes);
 800088e:	4a1a      	ldr	r2, [pc, #104]	@ (80008f8 <main+0xd4>)
 8000890:	2100      	movs	r1, #0
 8000892:	481a      	ldr	r0, [pc, #104]	@ (80008fc <main+0xd8>)
 8000894:	f005 fd0c 	bl	80062b0 <osThreadNew>
 8000898:	4603      	mov	r3, r0
 800089a:	4a19      	ldr	r2, [pc, #100]	@ (8000900 <main+0xdc>)
 800089c:	6013      	str	r3, [r2, #0]

  /* creation of Temp_Monitoring */
  Temp_MonitoringHandle = osThreadNew(StartTask03, NULL, &Temp_Monitoring_attributes);
 800089e:	4a19      	ldr	r2, [pc, #100]	@ (8000904 <main+0xe0>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4819      	ldr	r0, [pc, #100]	@ (8000908 <main+0xe4>)
 80008a4:	f005 fd04 	bl	80062b0 <osThreadNew>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4a18      	ldr	r2, [pc, #96]	@ (800090c <main+0xe8>)
 80008ac:	6013      	str	r3, [r2, #0]

  /* creation of Current_Monitor */
  Current_MonitorHandle = osThreadNew(StartTask04, NULL, &Current_Monitor_attributes);
 80008ae:	4a18      	ldr	r2, [pc, #96]	@ (8000910 <main+0xec>)
 80008b0:	2100      	movs	r1, #0
 80008b2:	4818      	ldr	r0, [pc, #96]	@ (8000914 <main+0xf0>)
 80008b4:	f005 fcfc 	bl	80062b0 <osThreadNew>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4a17      	ldr	r2, [pc, #92]	@ (8000918 <main+0xf4>)
 80008bc:	6013      	str	r3, [r2, #0]

  /* creation of Battery_Data_Tr */
  Battery_Data_TrHandle = osThreadNew(StartTask05, NULL, &Battery_Data_Tr_attributes);
 80008be:	4a17      	ldr	r2, [pc, #92]	@ (800091c <main+0xf8>)
 80008c0:	2100      	movs	r1, #0
 80008c2:	4817      	ldr	r0, [pc, #92]	@ (8000920 <main+0xfc>)
 80008c4:	f005 fcf4 	bl	80062b0 <osThreadNew>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <main+0x100>)
 80008cc:	6013      	str	r3, [r2, #0]

  /* creation of Update_Fan_Spee */
  Update_Fan_SpeeHandle = osThreadNew(StartTask06, NULL, &Update_Fan_Spee_attributes);
 80008ce:	4a16      	ldr	r2, [pc, #88]	@ (8000928 <main+0x104>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4816      	ldr	r0, [pc, #88]	@ (800092c <main+0x108>)
 80008d4:	f005 fcec 	bl	80062b0 <osThreadNew>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a15      	ldr	r2, [pc, #84]	@ (8000930 <main+0x10c>)
 80008dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008de:	f005 fcc1 	bl	8006264 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80008e2:	bf00      	nop
 80008e4:	e7fd      	b.n	80008e2 <main+0xbe>
 80008e6:	bf00      	nop
 80008e8:	200000b0 	.word	0x200000b0
 80008ec:	08008fd4 	.word	0x08008fd4
 80008f0:	080005a5 	.word	0x080005a5
 80008f4:	200005b4 	.word	0x200005b4
 80008f8:	08008ff8 	.word	0x08008ff8
 80008fc:	080005c5 	.word	0x080005c5
 8000900:	200005b8 	.word	0x200005b8
 8000904:	0800901c 	.word	0x0800901c
 8000908:	08000601 	.word	0x08000601
 800090c:	200005bc 	.word	0x200005bc
 8000910:	08009040 	.word	0x08009040
 8000914:	08000611 	.word	0x08000611
 8000918:	200005c0 	.word	0x200005c0
 800091c:	08009064 	.word	0x08009064
 8000920:	08000621 	.word	0x08000621
 8000924:	200005c4 	.word	0x200005c4
 8000928:	08009088 	.word	0x08009088
 800092c:	080006dd 	.word	0x080006dd
 8000930:	200005c8 	.word	0x200005c8

08000934 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b096      	sub	sp, #88	@ 0x58
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2244      	movs	r2, #68	@ 0x44
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f008 fa18 	bl	8008d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000956:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800095a:	f002 ff57 	bl	800380c <HAL_PWREx_ControlVoltageScaling>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	bf14      	ite	ne
 8000964:	2301      	movne	r3, #1
 8000966:	2300      	moveq	r3, #0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800096e:	f000 fb73 	bl	8001058 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000972:	2301      	movs	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000976:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800097a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097c:	2302      	movs	r3, #2
 800097e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000980:	2303      	movs	r3, #3
 8000982:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000984:	2301      	movs	r3, #1
 8000986:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000988:	2308      	movs	r3, #8
 800098a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800098c:	2302      	movs	r3, #2
 800098e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000990:	2302      	movs	r3, #2
 8000992:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000994:	2302      	movs	r3, #2
 8000996:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4618      	mov	r0, r3
 800099e:	f002 ff9b 	bl	80038d8 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	bf14      	ite	ne
 80009a8:	2301      	movne	r3, #1
 80009aa:	2300      	moveq	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 80009b2:	f000 fb51 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	230f      	movs	r3, #15
 80009b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ba:	2303      	movs	r3, #3
 80009bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80009c2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80009c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	2103      	movs	r1, #3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 fb9b 	bl	800410c <HAL_RCC_ClockConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	bf14      	ite	ne
 80009dc:	2301      	movne	r3, #1
 80009de:	2300      	moveq	r3, #0
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 80009e6:	f000 fb37 	bl	8001058 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3758      	adds	r7, #88	@ 0x58
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009fa:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 80009fc:	4a27      	ldr	r2, [pc, #156]	@ (8000a9c <_ZL12MX_CAN1_Initv+0xa8>)
 80009fe:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000a00:	4b25      	ldr	r3, [pc, #148]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a06:	4b24      	ldr	r3, [pc, #144]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a12:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a14:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a18:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a38:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a44:	4814      	ldr	r0, [pc, #80]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a46:	f000 ff27 	bl	8001898 <HAL_CAN_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf14      	ite	ne
 8000a50:	2301      	movne	r3, #1
 8000a52:	2300      	moveq	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 8000a5a:	f000 fafd 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterBank = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a66:	2301      	movs	r3, #1
 8000a68:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000a82:	230e      	movs	r3, #14
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000a86:	463b      	mov	r3, r7
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4803      	ldr	r0, [pc, #12]	@ (8000a98 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a8c:	f001 f800 	bl	8001a90 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	@ 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200000b0 	.word	0x200000b0
 8000a9c:	40006400 	.word	0x40006400

08000aa0 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <_ZL12MX_CAN2_Initv+0x6c>)
 8000aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b10 <_ZL12MX_CAN2_Initv+0x70>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <_ZL12MX_CAN2_Initv+0x6c>)
 8000aac:	220a      	movs	r2, #10
 8000aae:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <_ZL12MX_CAN2_Initv+0x6c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <_ZL12MX_CAN2_Initv+0x6c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <_ZL12MX_CAN2_Initv+0x6c>)
 8000abe:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000ac2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <_ZL12MX_CAN2_Initv+0x6c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <_ZL12MX_CAN2_Initv+0x6c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <_ZL12MX_CAN2_Initv+0x6c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <_ZL12MX_CAN2_Initv+0x6c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000adc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <_ZL12MX_CAN2_Initv+0x6c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <_ZL12MX_CAN2_Initv+0x6c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <_ZL12MX_CAN2_Initv+0x6c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000aee:	4807      	ldr	r0, [pc, #28]	@ (8000b0c <_ZL12MX_CAN2_Initv+0x6c>)
 8000af0:	f000 fed2 	bl	8001898 <HAL_CAN_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bf14      	ite	ne
 8000afa:	2301      	movne	r3, #1
 8000afc:	2300      	moveq	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 8000b04:	f000 faa8 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200000d8 	.word	0x200000d8
 8000b10:	40006800 	.word	0x40006800

08000b14 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b18:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <_ZL12MX_I2C2_Initv+0x90>)
 8000b1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ba8 <_ZL12MX_I2C2_Initv+0x94>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <_ZL12MX_I2C2_Initv+0x90>)
 8000b20:	4a22      	ldr	r2, [pc, #136]	@ (8000bac <_ZL12MX_I2C2_Initv+0x98>)
 8000b22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <_ZL12MX_I2C2_Initv+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <_ZL12MX_I2C2_Initv+0x90>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <_ZL12MX_I2C2_Initv+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <_ZL12MX_I2C2_Initv+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <_ZL12MX_I2C2_Initv+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <_ZL12MX_I2C2_Initv+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <_ZL12MX_I2C2_Initv+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b4e:	4815      	ldr	r0, [pc, #84]	@ (8000ba4 <_ZL12MX_I2C2_Initv+0x90>)
 8000b50:	f002 f867 	bl	8002c22 <HAL_I2C_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf14      	ite	ne
 8000b5a:	2301      	movne	r3, #1
 8000b5c:	2300      	moveq	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8000b64:	f000 fa78 	bl	8001058 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <_ZL12MX_I2C2_Initv+0x90>)
 8000b6c:	f002 fda8 	bl	80036c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	bf14      	ite	ne
 8000b76:	2301      	movne	r3, #1
 8000b78:	2300      	moveq	r3, #0
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8000b80:	f000 fa6a 	bl	8001058 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b84:	2100      	movs	r1, #0
 8000b86:	4807      	ldr	r0, [pc, #28]	@ (8000ba4 <_ZL12MX_I2C2_Initv+0x90>)
 8000b88:	f002 fde5 	bl	8003756 <HAL_I2CEx_ConfigDigitalFilter>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	2300      	moveq	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 fa5c 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000100 	.word	0x20000100
 8000ba8:	40005800 	.word	0x40005800
 8000bac:	00100d14 	.word	0x00100d14

08000bb0 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	@ (8000c40 <_ZL12MX_I2C3_Initv+0x90>)
 8000bb6:	4a23      	ldr	r2, [pc, #140]	@ (8000c44 <_ZL12MX_I2C3_Initv+0x94>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100D14;
 8000bba:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <_ZL12MX_I2C3_Initv+0x90>)
 8000bbc:	4a22      	ldr	r2, [pc, #136]	@ (8000c48 <_ZL12MX_I2C3_Initv+0x98>)
 8000bbe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c40 <_ZL12MX_I2C3_Initv+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <_ZL12MX_I2C3_Initv+0x90>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <_ZL12MX_I2C3_Initv+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <_ZL12MX_I2C3_Initv+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <_ZL12MX_I2C3_Initv+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bde:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <_ZL12MX_I2C3_Initv+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be4:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <_ZL12MX_I2C3_Initv+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bea:	4815      	ldr	r0, [pc, #84]	@ (8000c40 <_ZL12MX_I2C3_Initv+0x90>)
 8000bec:	f002 f819 	bl	8002c22 <HAL_I2C_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8000c00:	f000 fa2a 	bl	8001058 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	480e      	ldr	r0, [pc, #56]	@ (8000c40 <_ZL12MX_I2C3_Initv+0x90>)
 8000c08:	f002 fd5a 	bl	80036c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bf14      	ite	ne
 8000c12:	2301      	movne	r3, #1
 8000c14:	2300      	moveq	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8000c1c:	f000 fa1c 	bl	8001058 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	4807      	ldr	r0, [pc, #28]	@ (8000c40 <_ZL12MX_I2C3_Initv+0x90>)
 8000c24:	f002 fd97 	bl	8003756 <HAL_I2CEx_ConfigDigitalFilter>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bf14      	ite	ne
 8000c2e:	2301      	movne	r3, #1
 8000c30:	2300      	moveq	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8000c38:	f000 fa0e 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000154 	.word	0x20000154
 8000c44:	40005c00 	.word	0x40005c00
 8000c48:	00100d14 	.word	0x00100d14

08000c4c <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c50:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c52:	4a23      	ldr	r2, [pc, #140]	@ (8000ce0 <_ZL12MX_I2C4_Initv+0x94>)
 8000c54:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c58:	4a22      	ldr	r2, [pc, #136]	@ (8000ce4 <_ZL12MX_I2C4_Initv+0x98>)
 8000c5a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	@ (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c74:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c80:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c86:	4815      	ldr	r0, [pc, #84]	@ (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c88:	f001 ffcb 	bl	8002c22 <HAL_I2C_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	bf14      	ite	ne
 8000c92:	2301      	movne	r3, #1
 8000c94:	2300      	moveq	r3, #0
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8000c9c:	f000 f9dc 	bl	8001058 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	480e      	ldr	r0, [pc, #56]	@ (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000ca4:	f002 fd0c 	bl	80036c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8000cb8:	f000 f9ce 	bl	8001058 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4807      	ldr	r0, [pc, #28]	@ (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000cc0:	f002 fd49 	bl	8003756 <HAL_I2CEx_ConfigDigitalFilter>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 f9c0 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200001a8 	.word	0x200001a8
 8000ce0:	40008400 	.word	0x40008400
 8000ce4:	00100d14 	.word	0x00100d14

08000ce8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	615a      	str	r2, [r3, #20]
 8000d0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d0c:	4b29      	ldr	r3, [pc, #164]	@ (8000db4 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d14:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d20:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d22:	f04f 32ff 	mov.w	r2, #4294967295
 8000d26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b22      	ldr	r3, [pc, #136]	@ (8000db4 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d34:	481f      	ldr	r0, [pc, #124]	@ (8000db4 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d36:	f004 f9c3 	bl	80050c0 <HAL_TIM_PWM_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf14      	ite	ne
 8000d40:	2301      	movne	r3, #1
 8000d42:	2300      	moveq	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <_ZL12MX_TIM2_Initv+0x66>
  {
    Error_Handler();
 8000d4a:	f000 f985 	bl	8001058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4815      	ldr	r0, [pc, #84]	@ (8000db4 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d5e:	f004 ffc5 	bl	8005cec <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bf14      	ite	ne
 8000d68:	2301      	movne	r3, #1
 8000d6a:	2300      	moveq	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <_ZL12MX_TIM2_Initv+0x8e>
  {
    Error_Handler();
 8000d72:	f000 f971 	bl	8001058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d76:	2360      	movs	r3, #96	@ 0x60
 8000d78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4809      	ldr	r0, [pc, #36]	@ (8000db4 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d8e:	f004 faf5 	bl	800537c <HAL_TIM_PWM_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	bf14      	ite	ne
 8000d98:	2301      	movne	r3, #1
 8000d9a:	2300      	moveq	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <_ZL12MX_TIM2_Initv+0xbe>
  {
    Error_Handler();
 8000da2:	f000 f959 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000da6:	4803      	ldr	r0, [pc, #12]	@ (8000db4 <_ZL12MX_TIM2_Initv+0xcc>)
 8000da8:	f000 fb4c 	bl	8001444 <HAL_TIM_MspPostInit>

}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	@ 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200001fc 	.word	0x200001fc

08000db8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ddc:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <_ZL12MX_TIM3_Initv+0xcc>)
 8000dde:	4a2a      	ldr	r2, [pc, #168]	@ (8000e88 <_ZL12MX_TIM3_Initv+0xd0>)
 8000de0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000de2:	4b28      	ldr	r3, [pc, #160]	@ (8000e84 <_ZL12MX_TIM3_Initv+0xcc>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <_ZL12MX_TIM3_Initv+0xcc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dee:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <_ZL12MX_TIM3_Initv+0xcc>)
 8000df0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000df4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df6:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <_ZL12MX_TIM3_Initv+0xcc>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <_ZL12MX_TIM3_Initv+0xcc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e02:	4820      	ldr	r0, [pc, #128]	@ (8000e84 <_ZL12MX_TIM3_Initv+0xcc>)
 8000e04:	f004 f95c 	bl	80050c0 <HAL_TIM_PWM_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	bf14      	ite	ne
 8000e0e:	2301      	movne	r3, #1
 8000e10:	2300      	moveq	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8000e18:	f000 f91e 	bl	8001058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4816      	ldr	r0, [pc, #88]	@ (8000e84 <_ZL12MX_TIM3_Initv+0xcc>)
 8000e2c:	f004 ff5e 	bl	8005cec <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bf14      	ite	ne
 8000e36:	2301      	movne	r3, #1
 8000e38:	2300      	moveq	r3, #0
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8000e40:	f000 f90a 	bl	8001058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e44:	2360      	movs	r3, #96	@ 0x60
 8000e46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480a      	ldr	r0, [pc, #40]	@ (8000e84 <_ZL12MX_TIM3_Initv+0xcc>)
 8000e5c:	f004 fa8e 	bl	800537c <HAL_TIM_PWM_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf14      	ite	ne
 8000e66:	2301      	movne	r3, #1
 8000e68:	2300      	moveq	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8000e70:	f000 f8f2 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e74:	4803      	ldr	r0, [pc, #12]	@ (8000e84 <_ZL12MX_TIM3_Initv+0xcc>)
 8000e76:	f000 fae5 	bl	8001444 <HAL_TIM_MspPostInit>

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	@ 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000248 	.word	0x20000248
 8000e88:	40000400 	.word	0x40000400

08000e8c <_ZL22MX_USB_OTG_FS_HCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e90:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000e92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e96:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000eb6:	4807      	ldr	r0, [pc, #28]	@ (8000ed4 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000eb8:	f001 fe53 	bl	8002b62 <HAL_HCD_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	bf14      	ite	ne
 8000ec2:	2301      	movne	r3, #1
 8000ec4:	2300      	moveq	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x44>
  {
    Error_Handler();
 8000ecc:	f000 f8c4 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000294 	.word	0x20000294

08000ed8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eee:	4b4e      	ldr	r3, [pc, #312]	@ (8001028 <_ZL12MX_GPIO_Initv+0x150>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a4d      	ldr	r2, [pc, #308]	@ (8001028 <_ZL12MX_GPIO_Initv+0x150>)
 8000ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b4b      	ldr	r3, [pc, #300]	@ (8001028 <_ZL12MX_GPIO_Initv+0x150>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4b48      	ldr	r3, [pc, #288]	@ (8001028 <_ZL12MX_GPIO_Initv+0x150>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a47      	ldr	r2, [pc, #284]	@ (8001028 <_ZL12MX_GPIO_Initv+0x150>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b45      	ldr	r3, [pc, #276]	@ (8001028 <_ZL12MX_GPIO_Initv+0x150>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b42      	ldr	r3, [pc, #264]	@ (8001028 <_ZL12MX_GPIO_Initv+0x150>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	4a41      	ldr	r2, [pc, #260]	@ (8001028 <_ZL12MX_GPIO_Initv+0x150>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001028 <_ZL12MX_GPIO_Initv+0x150>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b3c      	ldr	r3, [pc, #240]	@ (8001028 <_ZL12MX_GPIO_Initv+0x150>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8001028 <_ZL12MX_GPIO_Initv+0x150>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f42:	4b39      	ldr	r3, [pc, #228]	@ (8001028 <_ZL12MX_GPIO_Initv+0x150>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2134      	movs	r1, #52	@ 0x34
 8000f52:	4836      	ldr	r0, [pc, #216]	@ (800102c <_ZL12MX_GPIO_Initv+0x154>)
 8000f54:	f001 fdb0 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f62:	f001 fda9 	bl	8002ab8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2107      	movs	r1, #7
 8000f6a:	4831      	ldr	r0, [pc, #196]	@ (8001030 <_ZL12MX_GPIO_Initv+0x158>)
 8000f6c:	f001 fda4 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8000f70:	2334      	movs	r3, #52	@ 0x34
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4829      	ldr	r0, [pc, #164]	@ (800102c <_ZL12MX_GPIO_Initv+0x154>)
 8000f88:	f001 fc04 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4822      	ldr	r0, [pc, #136]	@ (800102c <_ZL12MX_GPIO_Initv+0x154>)
 8000fa2:	f001 fbf7 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 PA7
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 8000fa6:	f240 43c3 	movw	r3, #1219	@ 0x4c3
 8000faa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc2:	f001 fbe7 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fde:	f001 fbd9 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480d      	ldr	r0, [pc, #52]	@ (8001030 <_ZL12MX_GPIO_Initv+0x158>)
 8000ffa:	f001 fbcb 	bl	8002794 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2105      	movs	r1, #5
 8001002:	2009      	movs	r0, #9
 8001004:	f001 fb9c 	bl	8002740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001008:	2009      	movs	r0, #9
 800100a:	f001 fbb5 	bl	8002778 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2105      	movs	r1, #5
 8001012:	2017      	movs	r0, #23
 8001014:	f001 fb94 	bl	8002740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001018:	2017      	movs	r0, #23
 800101a:	f001 fbad 	bl	8002778 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	@ 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	48000800 	.word	0x48000800
 8001030:	48000400 	.word	0x48000400

08001034 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d101      	bne.n	800104a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001046:	f000 fbe3 	bl	8001810 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40012c00 	.word	0x40012c00

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <Error_Handler+0x8>

08001064 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <HAL_MspInit+0x4c>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106e:	4a10      	ldr	r2, [pc, #64]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6613      	str	r3, [r2, #96]	@ 0x60
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108c:	6593      	str	r3, [r2, #88]	@ 0x58
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <HAL_MspInit+0x4c>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	210f      	movs	r1, #15
 800109e:	f06f 0001 	mvn.w	r0, #1
 80010a2:	f001 fb4d 	bl	8002740 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	@ 0x30
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a49      	ldr	r2, [pc, #292]	@ (80011f8 <HAL_CAN_MspInit+0x144>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d13a      	bne.n	800114c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010d6:	4b49      	ldr	r3, [pc, #292]	@ (80011fc <HAL_CAN_MspInit+0x148>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	4a47      	ldr	r2, [pc, #284]	@ (80011fc <HAL_CAN_MspInit+0x148>)
 80010de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010e0:	4b46      	ldr	r3, [pc, #280]	@ (80011fc <HAL_CAN_MspInit+0x148>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d10b      	bne.n	8001100 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010e8:	4b45      	ldr	r3, [pc, #276]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 80010ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ec:	4a44      	ldr	r2, [pc, #272]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 80010ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010f4:	4b42      	ldr	r3, [pc, #264]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 80010f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	4b3f      	ldr	r3, [pc, #252]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001104:	4a3e      	ldr	r2, [pc, #248]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110c:	4b3c      	ldr	r3, [pc, #240]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001118:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800112a:	2309      	movs	r3, #9
 800112c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4833      	ldr	r0, [pc, #204]	@ (8001204 <HAL_CAN_MspInit+0x150>)
 8001136:	f001 fb2d 	bl	8002794 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2105      	movs	r1, #5
 800113e:	2014      	movs	r0, #20
 8001140:	f001 fafe 	bl	8002740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001144:	2014      	movs	r0, #20
 8001146:	f001 fb17 	bl	8002778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800114a:	e051      	b.n	80011f0 <HAL_CAN_MspInit+0x13c>
  else if(hcan->Instance==CAN2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a2d      	ldr	r2, [pc, #180]	@ (8001208 <HAL_CAN_MspInit+0x154>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d14c      	bne.n	80011f0 <HAL_CAN_MspInit+0x13c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001156:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	4a29      	ldr	r2, [pc, #164]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 800115c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001160:	6593      	str	r3, [r2, #88]	@ 0x58
 8001162:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001166:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800116e:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <HAL_CAN_MspInit+0x148>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a21      	ldr	r2, [pc, #132]	@ (80011fc <HAL_CAN_MspInit+0x148>)
 8001176:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001178:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <HAL_CAN_MspInit+0x148>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d10b      	bne.n	8001198 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001184:	4a1e      	ldr	r2, [pc, #120]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 8001186:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800118a:	6593      	str	r3, [r2, #88]	@ 0x58
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	4a18      	ldr	r2, [pc, #96]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <HAL_CAN_MspInit+0x14c>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b0:	2320      	movs	r3, #32
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 80011c0:	2303      	movs	r3, #3
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	480e      	ldr	r0, [pc, #56]	@ (8001204 <HAL_CAN_MspInit+0x150>)
 80011cc:	f001 fae2 	bl	8002794 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d0:	2340      	movs	r3, #64	@ 0x40
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 80011e0:	2308      	movs	r3, #8
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	@ (8001204 <HAL_CAN_MspInit+0x150>)
 80011ec:	f001 fad2 	bl	8002794 <HAL_GPIO_Init>
}
 80011f0:	bf00      	nop
 80011f2:	3730      	adds	r7, #48	@ 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40006400 	.word	0x40006400
 80011fc:	200005cc 	.word	0x200005cc
 8001200:	40021000 	.word	0x40021000
 8001204:	48000400 	.word	0x48000400
 8001208:	40006800 	.word	0x40006800

0800120c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0b0      	sub	sp, #192	@ 0xc0
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	228c      	movs	r2, #140	@ 0x8c
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f007 fda3 	bl	8008d78 <memset>
  if(hi2c->Instance==I2C2)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a64      	ldr	r2, [pc, #400]	@ (80013c8 <HAL_I2C_MspInit+0x1bc>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d13c      	bne.n	80012b6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001240:	2300      	movs	r3, #0
 8001242:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	4618      	mov	r0, r3
 800124a:	f003 f99d 	bl	8004588 <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001254:	f7ff ff00 	bl	8001058 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b5c      	ldr	r3, [pc, #368]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125c:	4a5b      	ldr	r2, [pc, #364]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 800125e:	f043 0302 	orr.w	r3, r3, #2
 8001262:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001264:	4b59      	ldr	r3, [pc, #356]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	69fb      	ldr	r3, [r7, #28]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001270:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001274:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001278:	2312      	movs	r3, #18
 800127a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800128a:	2304      	movs	r3, #4
 800128c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001294:	4619      	mov	r1, r3
 8001296:	484e      	ldr	r0, [pc, #312]	@ (80013d0 <HAL_I2C_MspInit+0x1c4>)
 8001298:	f001 fa7c 	bl	8002794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800129c:	4b4b      	ldr	r3, [pc, #300]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 800129e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a0:	4a4a      	ldr	r2, [pc, #296]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 80012a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80012a8:	4b48      	ldr	r3, [pc, #288]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 80012aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80012b4:	e083      	b.n	80013be <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a46      	ldr	r2, [pc, #280]	@ (80013d4 <HAL_I2C_MspInit+0x1c8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d13c      	bne.n	800133a <HAL_I2C_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80012c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 f95a 	bl	8004588 <HAL_RCCEx_PeriphCLKConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 80012da:	f7ff febd 	bl	8001058 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	4b3b      	ldr	r3, [pc, #236]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	4a3a      	ldr	r2, [pc, #232]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ea:	4b38      	ldr	r3, [pc, #224]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012f6:	2303      	movs	r3, #3
 80012f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fc:	2312      	movs	r3, #18
 80012fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800130e:	2304      	movs	r3, #4
 8001310:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001314:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001318:	4619      	mov	r1, r3
 800131a:	482f      	ldr	r0, [pc, #188]	@ (80013d8 <HAL_I2C_MspInit+0x1cc>)
 800131c:	f001 fa3a 	bl	8002794 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001320:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001324:	4a29      	ldr	r2, [pc, #164]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 8001326:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800132a:	6593      	str	r3, [r2, #88]	@ 0x58
 800132c:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]
}
 8001338:	e041      	b.n	80013be <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C4)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a27      	ldr	r2, [pc, #156]	@ (80013dc <HAL_I2C_MspInit+0x1d0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d13c      	bne.n	80013be <HAL_I2C_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001344:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001348:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800134a:	2300      	movs	r3, #0
 800134c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	4618      	mov	r0, r3
 8001354:	f003 f918 	bl	8004588 <HAL_RCCEx_PeriphCLKConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_I2C_MspInit+0x156>
      Error_Handler();
 800135e:	f7ff fe7b 	bl	8001058 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a19      	ldr	r2, [pc, #100]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800137a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800137e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001382:	2312      	movs	r3, #18
 8001384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001394:	2303      	movs	r3, #3
 8001396:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800139e:	4619      	mov	r1, r3
 80013a0:	480b      	ldr	r0, [pc, #44]	@ (80013d0 <HAL_I2C_MspInit+0x1c4>)
 80013a2:	f001 f9f7 	bl	8002794 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 80013a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013aa:	4a08      	ldr	r2, [pc, #32]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_I2C_MspInit+0x1c0>)
 80013b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
}
 80013be:	bf00      	nop
 80013c0:	37c0      	adds	r7, #192	@ 0xc0
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40005800 	.word	0x40005800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	48000400 	.word	0x48000400
 80013d4:	40005c00 	.word	0x40005c00
 80013d8:	48000800 	.word	0x48000800
 80013dc:	40008400 	.word	0x40008400

080013e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013f0:	d10c      	bne.n	800140c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_TIM_PWM_MspInit+0x5c>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f6:	4a11      	ldr	r2, [pc, #68]	@ (800143c <HAL_TIM_PWM_MspInit+0x5c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <HAL_TIM_PWM_MspInit+0x5c>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800140a:	e010      	b.n	800142e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0b      	ldr	r2, [pc, #44]	@ (8001440 <HAL_TIM_PWM_MspInit+0x60>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d10b      	bne.n	800142e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <HAL_TIM_PWM_MspInit+0x5c>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141a:	4a08      	ldr	r2, [pc, #32]	@ (800143c <HAL_TIM_PWM_MspInit+0x5c>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6593      	str	r3, [r2, #88]	@ 0x58
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_TIM_PWM_MspInit+0x5c>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	40000400 	.word	0x40000400

08001444 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001464:	d11e      	bne.n	80014a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4b22      	ldr	r3, [pc, #136]	@ (80014f0 <HAL_TIM_MspPostInit+0xac>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	4a21      	ldr	r2, [pc, #132]	@ (80014f0 <HAL_TIM_MspPostInit+0xac>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001472:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <HAL_TIM_MspPostInit+0xac>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800147e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001490:	2301      	movs	r3, #1
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800149e:	f001 f979 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014a2:	e020      	b.n	80014e6 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <HAL_TIM_MspPostInit+0xb0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d11b      	bne.n	80014e6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <HAL_TIM_MspPostInit+0xac>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	4a0f      	ldr	r2, [pc, #60]	@ (80014f0 <HAL_TIM_MspPostInit+0xac>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <HAL_TIM_MspPostInit+0xac>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c6:	2310      	movs	r3, #16
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014d6:	2302      	movs	r3, #2
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <HAL_TIM_MspPostInit+0xb4>)
 80014e2:	f001 f957 	bl	8002794 <HAL_GPIO_Init>
}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	@ 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40000400 	.word	0x40000400
 80014f8:	48000400 	.word	0x48000400

080014fc <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001514:	f107 0318 	add.w	r3, r7, #24
 8001518:	228c      	movs	r2, #140	@ 0x8c
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f007 fc2b 	bl	8008d78 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800152a:	d16b      	bne.n	8001604 <HAL_HCD_MspInit+0x108>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800152c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001530:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001532:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001536:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800153a:	2303      	movs	r3, #3
 800153c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800153e:	2301      	movs	r3, #1
 8001540:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8001542:	230c      	movs	r3, #12
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001546:	2302      	movs	r3, #2
 8001548:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800154a:	2304      	movs	r3, #4
 800154c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800154e:	2302      	movs	r3, #2
 8001550:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001552:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001556:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001558:	f107 0318 	add.w	r3, r7, #24
 800155c:	4618      	mov	r0, r3
 800155e:	f003 f813 	bl	8004588 <HAL_RCCEx_PeriphCLKConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 8001568:	f7ff fd76 	bl	8001058 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b27      	ldr	r3, [pc, #156]	@ (800160c <HAL_HCD_MspInit+0x110>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001570:	4a26      	ldr	r2, [pc, #152]	@ (800160c <HAL_HCD_MspInit+0x110>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001578:	4b24      	ldr	r3, [pc, #144]	@ (800160c <HAL_HCD_MspInit+0x110>)
 800157a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001584:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001588:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800159e:	230a      	movs	r3, #10
 80015a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015a8:	4619      	mov	r1, r3
 80015aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ae:	f001 f8f1 	bl	8002794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015b2:	4b16      	ldr	r3, [pc, #88]	@ (800160c <HAL_HCD_MspInit+0x110>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	4a15      	ldr	r2, [pc, #84]	@ (800160c <HAL_HCD_MspInit+0x110>)
 80015b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015be:	4b13      	ldr	r3, [pc, #76]	@ (800160c <HAL_HCD_MspInit+0x110>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <HAL_HCD_MspInit+0x110>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d114      	bne.n	8001600 <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <HAL_HCD_MspInit+0x110>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015da:	4a0c      	ldr	r2, [pc, #48]	@ (800160c <HAL_HCD_MspInit+0x110>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_HCD_MspInit+0x110>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80015ee:	f002 f963 	bl	80038b8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_HCD_MspInit+0x110>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f6:	4a05      	ldr	r2, [pc, #20]	@ (800160c <HAL_HCD_MspInit+0x110>)
 80015f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015fc:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80015fe:	e001      	b.n	8001604 <HAL_HCD_MspInit+0x108>
      HAL_PWREx_EnableVddUSB();
 8001600:	f002 f95a 	bl	80038b8 <HAL_PWREx_EnableVddUSB>
}
 8001604:	bf00      	nop
 8001606:	37b8      	adds	r7, #184	@ 0xb8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	@ 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800161e:	4b2e      	ldr	r3, [pc, #184]	@ (80016d8 <HAL_InitTick+0xc8>)
 8001620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001622:	4a2d      	ldr	r2, [pc, #180]	@ (80016d8 <HAL_InitTick+0xc8>)
 8001624:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001628:	6613      	str	r3, [r2, #96]	@ 0x60
 800162a:	4b2b      	ldr	r3, [pc, #172]	@ (80016d8 <HAL_InitTick+0xc8>)
 800162c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800162e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001636:	f107 020c 	add.w	r2, r7, #12
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f002 ff0f 	bl	8004464 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001646:	f002 fef7 	bl	8004438 <HAL_RCC_GetPCLK2Freq>
 800164a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800164c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164e:	4a23      	ldr	r2, [pc, #140]	@ (80016dc <HAL_InitTick+0xcc>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	0c9b      	lsrs	r3, r3, #18
 8001656:	3b01      	subs	r3, #1
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800165a:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <HAL_InitTick+0xd0>)
 800165c:	4a21      	ldr	r2, [pc, #132]	@ (80016e4 <HAL_InitTick+0xd4>)
 800165e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <HAL_InitTick+0xd0>)
 8001662:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001666:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001668:	4a1d      	ldr	r2, [pc, #116]	@ (80016e0 <HAL_InitTick+0xd0>)
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800166e:	4b1c      	ldr	r3, [pc, #112]	@ (80016e0 <HAL_InitTick+0xd0>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_InitTick+0xd0>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167a:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <HAL_InitTick+0xd0>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001680:	4817      	ldr	r0, [pc, #92]	@ (80016e0 <HAL_InitTick+0xd0>)
 8001682:	f003 fc4b 	bl	8004f1c <HAL_TIM_Base_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800168c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001690:	2b00      	cmp	r3, #0
 8001692:	d11b      	bne.n	80016cc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001694:	4812      	ldr	r0, [pc, #72]	@ (80016e0 <HAL_InitTick+0xd0>)
 8001696:	f003 fca3 	bl	8004fe0 <HAL_TIM_Base_Start_IT>
 800169a:	4603      	mov	r3, r0
 800169c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80016a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d111      	bne.n	80016cc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80016a8:	2019      	movs	r0, #25
 80016aa:	f001 f865 	bl	8002778 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d808      	bhi.n	80016c6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	2019      	movs	r0, #25
 80016ba:	f001 f841 	bl	8002740 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <HAL_InitTick+0xd8>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e002      	b.n	80016cc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3730      	adds	r7, #48	@ 0x30
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000
 80016dc:	431bde83 	.word	0x431bde83
 80016e0:	200005d0 	.word	0x200005d0
 80016e4:	40012c00 	.word	0x40012c00
 80016e8:	20000004 	.word	0x20000004

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <NMI_Handler+0x4>

080016f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <MemManage_Handler+0x4>

08001704 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <UsageFault_Handler+0x4>

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001726:	2008      	movs	r0, #8
 8001728:	f001 f9f8 	bl	8002b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <CAN1_RX0_IRQHandler+0x10>)
 8001736:	f000 fd1c 	bl	8002172 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200000b0 	.word	0x200000b0

08001744 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001748:	2020      	movs	r0, #32
 800174a:	f001 f9e7 	bl	8002b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800175a:	f003 fd08 	bl	800516e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200005d0 	.word	0x200005d0

08001768 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <SystemInit+0x20>)
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001772:	4a05      	ldr	r2, [pc, #20]	@ (8001788 <SystemInit+0x20>)
 8001774:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800178c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001790:	f7ff ffea 	bl	8001768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001794:	480c      	ldr	r0, [pc, #48]	@ (80017c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001796:	490d      	ldr	r1, [pc, #52]	@ (80017cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001798:	4a0d      	ldr	r2, [pc, #52]	@ (80017d0 <LoopForever+0xe>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0a      	ldr	r2, [pc, #40]	@ (80017d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017ac:	4c0a      	ldr	r4, [pc, #40]	@ (80017d8 <LoopForever+0x16>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ba:	f007 fb3b 	bl	8008e34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017be:	f7ff f831 	bl	8000824 <main>

080017c2 <LoopForever>:

LoopForever:
    b LoopForever
 80017c2:	e7fe      	b.n	80017c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80017d0:	08009100 	.word	0x08009100
  ldr r2, =_sbss
 80017d4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80017d8:	200028d0 	.word	0x200028d0

080017dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC1_2_IRQHandler>

080017de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 ff9e 	bl	800272a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ee:	200f      	movs	r0, #15
 80017f0:	f7ff ff0e 	bl	8001610 <HAL_InitTick>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	e001      	b.n	8001804 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001800:	f7ff fc30 	bl	8001064 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001804:	79fb      	ldrb	r3, [r7, #7]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x20>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_IncTick+0x24>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_IncTick+0x24>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000008 	.word	0x20000008
 8001834:	2000061c 	.word	0x2000061c

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	2000061c 	.word	0x2000061c

08001850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff ffee 	bl	8001838 <HAL_GetTick>
 800185c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d005      	beq.n	8001876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_Delay+0x44>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001876:	bf00      	nop
 8001878:	f7ff ffde 	bl	8001838 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d8f7      	bhi.n	8001878 <HAL_Delay+0x28>
  {
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008

08001898 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0ed      	b.n	8001a86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fbfc 	bl	80010b4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018cc:	f7ff ffb4 	bl	8001838 <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018d2:	e012      	b.n	80018fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018d4:	f7ff ffb0 	bl	8001838 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b0a      	cmp	r3, #10
 80018e0:	d90b      	bls.n	80018fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2205      	movs	r2, #5
 80018f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0c5      	b.n	8001a86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0e5      	beq.n	80018d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0202 	bic.w	r2, r2, #2
 8001916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001918:	f7ff ff8e 	bl	8001838 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800191e:	e012      	b.n	8001946 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001920:	f7ff ff8a 	bl	8001838 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b0a      	cmp	r3, #10
 800192c:	d90b      	bls.n	8001946 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2205      	movs	r2, #5
 800193e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e09f      	b.n	8001a86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e5      	bne.n	8001920 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7e1b      	ldrb	r3, [r3, #24]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d108      	bne.n	800196e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e007      	b.n	800197e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7e5b      	ldrb	r3, [r3, #25]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e007      	b.n	80019a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7e9b      	ldrb	r3, [r3, #26]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d108      	bne.n	80019c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0220 	orr.w	r2, r2, #32
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e007      	b.n	80019d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0220 	bic.w	r2, r2, #32
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7edb      	ldrb	r3, [r3, #27]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d108      	bne.n	80019ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0210 	bic.w	r2, r2, #16
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e007      	b.n	80019fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0210 	orr.w	r2, r2, #16
 80019fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7f1b      	ldrb	r3, [r3, #28]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d108      	bne.n	8001a16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0208 	orr.w	r2, r2, #8
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e007      	b.n	8001a26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0208 	bic.w	r2, r2, #8
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7f5b      	ldrb	r3, [r3, #29]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d108      	bne.n	8001a40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 0204 	orr.w	r2, r2, #4
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e007      	b.n	8001a50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0204 	bic.w	r2, r2, #4
 8001a4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	ea42 0103 	orr.w	r1, r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	1e5a      	subs	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001aa8:	7cfb      	ldrb	r3, [r7, #19]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d003      	beq.n	8001ab6 <HAL_CAN_ConfigFilter+0x26>
 8001aae:	7cfb      	ldrb	r3, [r7, #19]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	f040 80be 	bne.w	8001c32 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001ab6:	4b65      	ldr	r3, [pc, #404]	@ (8001c4c <HAL_CAN_ConfigFilter+0x1bc>)
 8001ab8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ac0:	f043 0201 	orr.w	r2, r3, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ad0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 031f 	and.w	r3, r3, #31
 8001af6:	2201      	movs	r2, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	401a      	ands	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d123      	bne.n	8001b60 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	401a      	ands	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3248      	adds	r2, #72	@ 0x48
 8001b40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b56:	6979      	ldr	r1, [r7, #20]
 8001b58:	3348      	adds	r3, #72	@ 0x48
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d122      	bne.n	8001bae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b88:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3248      	adds	r2, #72	@ 0x48
 8001b8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ba2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ba4:	6979      	ldr	r1, [r7, #20]
 8001ba6:	3348      	adds	r3, #72	@ 0x48
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	440b      	add	r3, r1
 8001bac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001bc8:	e007      	b.n	8001bda <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	401a      	ands	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001bf4:	e007      	b.n	8001c06 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c24:	f023 0201 	bic.w	r2, r3, #1
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e006      	b.n	8001c40 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c36:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
  }
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40006400 	.word	0x40006400

08001c50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d12e      	bne.n	8001cc2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c7c:	f7ff fddc 	bl	8001838 <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c82:	e012      	b.n	8001caa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c84:	f7ff fdd8 	bl	8001838 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b0a      	cmp	r3, #10
 8001c90:	d90b      	bls.n	8001caa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2205      	movs	r2, #5
 8001ca2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e012      	b.n	8001cd0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1e5      	bne.n	8001c84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e006      	b.n	8001cd0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
  }
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	@ 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cf6:	7ffb      	ldrb	r3, [r7, #31]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d003      	beq.n	8001d04 <HAL_CAN_AddTxMessage+0x2c>
 8001cfc:	7ffb      	ldrb	r3, [r7, #31]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	f040 80ad 	bne.w	8001e5e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10a      	bne.n	8001d24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8095 	beq.w	8001e4e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	0e1b      	lsrs	r3, r3, #24
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d2e:	2201      	movs	r2, #1
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10d      	bne.n	8001d5c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d4a:	68f9      	ldr	r1, [r7, #12]
 8001d4c:	6809      	ldr	r1, [r1, #0]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3318      	adds	r3, #24
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	440b      	add	r3, r1
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	e00f      	b.n	8001d7c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d66:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d6c:	68f9      	ldr	r1, [r7, #12]
 8001d6e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d70:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	3318      	adds	r3, #24
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	440b      	add	r3, r1
 8001d7a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6819      	ldr	r1, [r3, #0]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3318      	adds	r3, #24
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	7d1b      	ldrb	r3, [r3, #20]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d111      	bne.n	8001dbc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3318      	adds	r3, #24
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	6811      	ldr	r1, [r2, #0]
 8001dac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3318      	adds	r3, #24
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	440b      	add	r3, r1
 8001db8:	3304      	adds	r3, #4
 8001dba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3307      	adds	r3, #7
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	061a      	lsls	r2, r3, #24
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3306      	adds	r3, #6
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	041b      	lsls	r3, r3, #16
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3305      	adds	r3, #5
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	3204      	adds	r2, #4
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	4610      	mov	r0, r2
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	6811      	ldr	r1, [r2, #0]
 8001de4:	ea43 0200 	orr.w	r2, r3, r0
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	440b      	add	r3, r1
 8001dee:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001df2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3303      	adds	r3, #3
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	061a      	lsls	r2, r3, #24
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3302      	adds	r3, #2
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	041b      	lsls	r3, r3, #16
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	7812      	ldrb	r2, [r2, #0]
 8001e14:	4610      	mov	r0, r2
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	6811      	ldr	r1, [r2, #0]
 8001e1a:	ea43 0200 	orr.w	r2, r3, r0
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	440b      	add	r3, r1
 8001e24:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001e28:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3318      	adds	r3, #24
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	6811      	ldr	r1, [r2, #0]
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	3318      	adds	r3, #24
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	440b      	add	r3, r1
 8001e48:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e00e      	b.n	8001e6c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e006      	b.n	8001e6c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
  }
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3724      	adds	r7, #36	@ 0x24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d002      	beq.n	8001e98 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d11d      	bne.n	8001ed4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b087      	sub	sp, #28
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d003      	beq.n	8001f06 <HAL_CAN_GetRxMessage+0x24>
 8001efe:	7dfb      	ldrb	r3, [r7, #23]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	f040 8103 	bne.w	800210c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10e      	bne.n	8001f2a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d116      	bne.n	8001f48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0f7      	b.n	800211a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d107      	bne.n	8001f48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0e8      	b.n	800211a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	331b      	adds	r3, #27
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	4413      	add	r3, r2
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0204 	and.w	r2, r3, #4
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10c      	bne.n	8001f80 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	331b      	adds	r3, #27
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	4413      	add	r3, r2
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0d5b      	lsrs	r3, r3, #21
 8001f76:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e00b      	b.n	8001f98 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	331b      	adds	r3, #27
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	4413      	add	r3, r2
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	08db      	lsrs	r3, r3, #3
 8001f90:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	331b      	adds	r3, #27
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4413      	add	r3, r2
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0202 	and.w	r2, r3, #2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	331b      	adds	r3, #27
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	611a      	str	r2, [r3, #16]
 8001fcc:	e00b      	b.n	8001fe6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	331b      	adds	r3, #27
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	4413      	add	r3, r2
 8001fda:	3304      	adds	r3, #4
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 020f 	and.w	r2, r3, #15
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	331b      	adds	r3, #27
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	331b      	adds	r3, #27
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	4413      	add	r3, r2
 800200a:	3304      	adds	r3, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0c1b      	lsrs	r3, r3, #16
 8002010:	b29a      	uxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	4413      	add	r3, r2
 8002020:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	4413      	add	r3, r2
 8002036:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0a1a      	lsrs	r2, r3, #8
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	4413      	add	r3, r2
 8002050:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	0c1a      	lsrs	r2, r3, #16
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	3302      	adds	r3, #2
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	4413      	add	r3, r2
 800206a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0e1a      	lsrs	r2, r3, #24
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	3303      	adds	r3, #3
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4413      	add	r3, r2
 8002084:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	3304      	adds	r3, #4
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	4413      	add	r3, r2
 800209c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0a1a      	lsrs	r2, r3, #8
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	3305      	adds	r3, #5
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	4413      	add	r3, r2
 80020b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	0c1a      	lsrs	r2, r3, #16
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	3306      	adds	r3, #6
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	0e1a      	lsrs	r2, r3, #24
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	3307      	adds	r3, #7
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d108      	bne.n	80020f8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0220 	orr.w	r2, r2, #32
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	e007      	b.n	8002108 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0220 	orr.w	r2, r2, #32
 8002106:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e006      	b.n	800211a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
  }
}
 800211a:	4618      	mov	r0, r3
 800211c:	371c      	adds	r7, #28
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002136:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d002      	beq.n	8002144 <HAL_CAN_ActivateNotification+0x1e>
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d109      	bne.n	8002158 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6959      	ldr	r1, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	e006      	b.n	8002166 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
  }
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b08a      	sub	sp, #40	@ 0x28
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d07c      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d023      	beq.n	800220a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2201      	movs	r2, #1
 80021c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f983 	bl	80024e0 <HAL_CAN_TxMailbox0CompleteCallback>
 80021da:	e016      	b.n	800220a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ee:	e00c      	b.n	800220a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
 8002202:	e002      	b.n	800220a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f989 	bl	800251c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d024      	beq.n	800225e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800221c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f963 	bl	80024f4 <HAL_CAN_TxMailbox1CompleteCallback>
 800222e:	e016      	b.n	800225e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002236:	2b00      	cmp	r3, #0
 8002238:	d004      	beq.n	8002244 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24
 8002242:	e00c      	b.n	800225e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800224a:	2b00      	cmp	r3, #0
 800224c:	d004      	beq.n	8002258 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
 8002256:	e002      	b.n	800225e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f969 	bl	8002530 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d024      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002270:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f943 	bl	8002508 <HAL_CAN_TxMailbox2CompleteCallback>
 8002282:	e016      	b.n	80022b2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d004      	beq.n	8002298 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
 8002296:	e00c      	b.n	80022b2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022aa:	e002      	b.n	80022b2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f949 	bl	8002544 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00c      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2210      	movs	r2, #16
 80022d4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00b      	beq.n	80022f8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d006      	beq.n	80022f8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2208      	movs	r2, #8
 80022f0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f930 	bl	8002558 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7fe fa11 	bl	8000738 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00c      	beq.n	800233a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2210      	movs	r2, #16
 8002338:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00b      	beq.n	800235c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d006      	beq.n	800235c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2208      	movs	r2, #8
 8002354:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f912 	bl	8002580 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f8f9 	bl	800256c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00b      	beq.n	800239c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2210      	movs	r2, #16
 8002394:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f8fc 	bl	8002594 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2208      	movs	r2, #8
 80023b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f8f5 	bl	80025a8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d07b      	beq.n	80024c0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d072      	beq.n	80024b8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800242c:	2b00      	cmp	r3, #0
 800242e:	d043      	beq.n	80024b8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002436:	2b00      	cmp	r3, #0
 8002438:	d03e      	beq.n	80024b8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002440:	2b60      	cmp	r3, #96	@ 0x60
 8002442:	d02b      	beq.n	800249c <HAL_CAN_IRQHandler+0x32a>
 8002444:	2b60      	cmp	r3, #96	@ 0x60
 8002446:	d82e      	bhi.n	80024a6 <HAL_CAN_IRQHandler+0x334>
 8002448:	2b50      	cmp	r3, #80	@ 0x50
 800244a:	d022      	beq.n	8002492 <HAL_CAN_IRQHandler+0x320>
 800244c:	2b50      	cmp	r3, #80	@ 0x50
 800244e:	d82a      	bhi.n	80024a6 <HAL_CAN_IRQHandler+0x334>
 8002450:	2b40      	cmp	r3, #64	@ 0x40
 8002452:	d019      	beq.n	8002488 <HAL_CAN_IRQHandler+0x316>
 8002454:	2b40      	cmp	r3, #64	@ 0x40
 8002456:	d826      	bhi.n	80024a6 <HAL_CAN_IRQHandler+0x334>
 8002458:	2b30      	cmp	r3, #48	@ 0x30
 800245a:	d010      	beq.n	800247e <HAL_CAN_IRQHandler+0x30c>
 800245c:	2b30      	cmp	r3, #48	@ 0x30
 800245e:	d822      	bhi.n	80024a6 <HAL_CAN_IRQHandler+0x334>
 8002460:	2b10      	cmp	r3, #16
 8002462:	d002      	beq.n	800246a <HAL_CAN_IRQHandler+0x2f8>
 8002464:	2b20      	cmp	r3, #32
 8002466:	d005      	beq.n	8002474 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002468:	e01d      	b.n	80024a6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	f043 0308 	orr.w	r3, r3, #8
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002472:	e019      	b.n	80024a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	f043 0310 	orr.w	r3, r3, #16
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800247c:	e014      	b.n	80024a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	f043 0320 	orr.w	r3, r3, #32
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002486:	e00f      	b.n	80024a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002490:	e00a      	b.n	80024a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800249a:	e005      	b.n	80024a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024a4:	e000      	b.n	80024a8 <HAL_CAN_IRQHandler+0x336>
            break;
 80024a6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80024b6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2204      	movs	r2, #4
 80024be:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f872 	bl	80025bc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024d8:	bf00      	nop
 80024da:	3728      	adds	r7, #40	@ 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	@ (800266c <__NVIC_EnableIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	@ (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	@ (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	@ 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	@ 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ff4c 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002752:	f7ff ff61 	bl	8002618 <__NVIC_GetPriorityGrouping>
 8002756:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	6978      	ldr	r0, [r7, #20]
 800275e:	f7ff ffb1 	bl	80026c4 <NVIC_EncodePriority>
 8002762:	4602      	mov	r2, r0
 8002764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff ff80 	bl	8002670 <__NVIC_SetPriority>
}
 8002770:	bf00      	nop
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff ff54 	bl	8002634 <__NVIC_EnableIRQ>
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a2:	e166      	b.n	8002a72 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2101      	movs	r1, #1
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fa01 f303 	lsl.w	r3, r1, r3
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8158 	beq.w	8002a6c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d005      	beq.n	80027d4 <HAL_GPIO_Init+0x40>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d130      	bne.n	8002836 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800280a:	2201      	movs	r2, #1
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	f003 0201 	and.w	r2, r3, #1
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b03      	cmp	r3, #3
 8002840:	d017      	beq.n	8002872 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d123      	bne.n	80028c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	220f      	movs	r2, #15
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	08da      	lsrs	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3208      	adds	r2, #8
 80028c0:	6939      	ldr	r1, [r7, #16]
 80028c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0203 	and.w	r2, r3, #3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80b2 	beq.w	8002a6c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002908:	4b61      	ldr	r3, [pc, #388]	@ (8002a90 <HAL_GPIO_Init+0x2fc>)
 800290a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800290c:	4a60      	ldr	r2, [pc, #384]	@ (8002a90 <HAL_GPIO_Init+0x2fc>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6613      	str	r3, [r2, #96]	@ 0x60
 8002914:	4b5e      	ldr	r3, [pc, #376]	@ (8002a90 <HAL_GPIO_Init+0x2fc>)
 8002916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002920:	4a5c      	ldr	r2, [pc, #368]	@ (8002a94 <HAL_GPIO_Init+0x300>)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	3302      	adds	r3, #2
 8002928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	220f      	movs	r2, #15
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800294a:	d02b      	beq.n	80029a4 <HAL_GPIO_Init+0x210>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a52      	ldr	r2, [pc, #328]	@ (8002a98 <HAL_GPIO_Init+0x304>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d025      	beq.n	80029a0 <HAL_GPIO_Init+0x20c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a51      	ldr	r2, [pc, #324]	@ (8002a9c <HAL_GPIO_Init+0x308>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d01f      	beq.n	800299c <HAL_GPIO_Init+0x208>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a50      	ldr	r2, [pc, #320]	@ (8002aa0 <HAL_GPIO_Init+0x30c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d019      	beq.n	8002998 <HAL_GPIO_Init+0x204>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a4f      	ldr	r2, [pc, #316]	@ (8002aa4 <HAL_GPIO_Init+0x310>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d013      	beq.n	8002994 <HAL_GPIO_Init+0x200>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a4e      	ldr	r2, [pc, #312]	@ (8002aa8 <HAL_GPIO_Init+0x314>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00d      	beq.n	8002990 <HAL_GPIO_Init+0x1fc>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a4d      	ldr	r2, [pc, #308]	@ (8002aac <HAL_GPIO_Init+0x318>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d007      	beq.n	800298c <HAL_GPIO_Init+0x1f8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a4c      	ldr	r2, [pc, #304]	@ (8002ab0 <HAL_GPIO_Init+0x31c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d101      	bne.n	8002988 <HAL_GPIO_Init+0x1f4>
 8002984:	2307      	movs	r3, #7
 8002986:	e00e      	b.n	80029a6 <HAL_GPIO_Init+0x212>
 8002988:	2308      	movs	r3, #8
 800298a:	e00c      	b.n	80029a6 <HAL_GPIO_Init+0x212>
 800298c:	2306      	movs	r3, #6
 800298e:	e00a      	b.n	80029a6 <HAL_GPIO_Init+0x212>
 8002990:	2305      	movs	r3, #5
 8002992:	e008      	b.n	80029a6 <HAL_GPIO_Init+0x212>
 8002994:	2304      	movs	r3, #4
 8002996:	e006      	b.n	80029a6 <HAL_GPIO_Init+0x212>
 8002998:	2303      	movs	r3, #3
 800299a:	e004      	b.n	80029a6 <HAL_GPIO_Init+0x212>
 800299c:	2302      	movs	r3, #2
 800299e:	e002      	b.n	80029a6 <HAL_GPIO_Init+0x212>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_GPIO_Init+0x212>
 80029a4:	2300      	movs	r3, #0
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	f002 0203 	and.w	r2, r2, #3
 80029ac:	0092      	lsls	r2, r2, #2
 80029ae:	4093      	lsls	r3, r2
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029b6:	4937      	ldr	r1, [pc, #220]	@ (8002a94 <HAL_GPIO_Init+0x300>)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029c4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab4 <HAL_GPIO_Init+0x320>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029e8:	4a32      	ldr	r2, [pc, #200]	@ (8002ab4 <HAL_GPIO_Init+0x320>)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029ee:	4b31      	ldr	r3, [pc, #196]	@ (8002ab4 <HAL_GPIO_Init+0x320>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a12:	4a28      	ldr	r2, [pc, #160]	@ (8002ab4 <HAL_GPIO_Init+0x320>)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a18:	4b26      	ldr	r3, [pc, #152]	@ (8002ab4 <HAL_GPIO_Init+0x320>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab4 <HAL_GPIO_Init+0x320>)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a42:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab4 <HAL_GPIO_Init+0x320>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a66:	4a13      	ldr	r2, [pc, #76]	@ (8002ab4 <HAL_GPIO_Init+0x320>)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f47f ae91 	bne.w	80027a4 <HAL_GPIO_Init+0x10>
  }
}
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40010000 	.word	0x40010000
 8002a98:	48000400 	.word	0x48000400
 8002a9c:	48000800 	.word	0x48000800
 8002aa0:	48000c00 	.word	0x48000c00
 8002aa4:	48001000 	.word	0x48001000
 8002aa8:	48001400 	.word	0x48001400
 8002aac:	48001800 	.word	0x48001800
 8002ab0:	48001c00 	.word	0x48001c00
 8002ab4:	40010400 	.word	0x40010400

08002ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac8:	787b      	ldrb	r3, [r7, #1]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ad4:	e002      	b.n	8002adc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4013      	ands	r3, r2
 8002b00:	041a      	lsls	r2, r3, #16
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	43d9      	mvns	r1, r3
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	400b      	ands	r3, r1
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b26:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d006      	beq.n	8002b40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b32:	4a05      	ldr	r2, [pc, #20]	@ (8002b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f806 	bl	8002b4c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40010400 	.word	0x40010400

08002b4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af02      	add	r7, sp, #8
 8002b68:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e052      	b.n	8002c1a <HAL_HCD_Init+0xb8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3315 	ldrb.w	r3, [r3, #789]	@ 0x315
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d106      	bne.n	8002b8e <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7fe fcb7 	bl	80014fc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2203      	movs	r2, #3
 8002b92:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315

  /* Disable DMA mode for FS instance */
  hhcd->Init.dma_enable = 0U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 f976 	bl	8005e92 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	7c1a      	ldrb	r2, [r3, #16]
 8002bae:	f88d 2000 	strb.w	r2, [sp]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb6:	f003 f93f 	bl	8005e38 <USB_CoreInit>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_HCD_Init+0x6a>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e026      	b.n	8002c1a <HAL_HCD_Init+0xb8>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 f96e 	bl	8005eb4 <USB_SetCurrentMode>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_HCD_Init+0x88>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e017      	b.n	8002c1a <HAL_HCD_Init+0xb8>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	7c1a      	ldrb	r2, [r3, #16]
 8002bf2:	f88d 2000 	strb.w	r2, [sp]
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfa:	f003 fa47 	bl	800608c <USB_HostInit>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_HCD_Init+0xae>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e004      	b.n	8002c1a <HAL_HCD_Init+0xb8>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e08d      	b.n	8002d50 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d106      	bne.n	8002c4e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fe fadf 	bl	800120c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2224      	movs	r2, #36	@ 0x24
 8002c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d107      	bne.n	8002c9c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	e006      	b.n	8002caa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ca8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d108      	bne.n	8002cc4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	e007      	b.n	8002cd4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cf6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69d9      	ldr	r1, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1a      	ldr	r2, [r3, #32]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	461a      	mov	r2, r3
 8002d64:	460b      	mov	r3, r1
 8002d66:	817b      	strh	r3, [r7, #10]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	f040 80fd 	bne.w	8002f74 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_I2C_Master_Transmit+0x30>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e0f6      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x21e>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d90:	f7fe fd52 	bl	8001838 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	2319      	movs	r3, #25
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fa0a 	bl	80031bc <I2C_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0e1      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2221      	movs	r2, #33	@ 0x21
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	893a      	ldrh	r2, [r7, #8]
 8002dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2bff      	cmp	r3, #255	@ 0xff
 8002de2:	d906      	bls.n	8002df2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	22ff      	movs	r2, #255	@ 0xff
 8002de8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002dea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e007      	b.n	8002e02 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002dfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e00:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d024      	beq.n	8002e54 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	781a      	ldrb	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	3301      	adds	r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	8979      	ldrh	r1, [r7, #10]
 8002e46:	4b4e      	ldr	r3, [pc, #312]	@ (8002f80 <HAL_I2C_Master_Transmit+0x228>)
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fc05 	bl	800365c <I2C_TransferConfig>
 8002e52:	e066      	b.n	8002f22 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	8979      	ldrh	r1, [r7, #10]
 8002e5c:	4b48      	ldr	r3, [pc, #288]	@ (8002f80 <HAL_I2C_Master_Transmit+0x228>)
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fbfa 	bl	800365c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e68:	e05b      	b.n	8002f22 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	6a39      	ldr	r1, [r7, #32]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f9fd 	bl	800326e <I2C_WaitOnTXISFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e07b      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d034      	beq.n	8002f22 <HAL_I2C_Master_Transmit+0x1ca>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d130      	bne.n	8002f22 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2180      	movs	r1, #128	@ 0x80
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f976 	bl	80031bc <I2C_WaitOnFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e04d      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2bff      	cmp	r3, #255	@ 0xff
 8002ee2:	d90e      	bls.n	8002f02 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	22ff      	movs	r2, #255	@ 0xff
 8002ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	8979      	ldrh	r1, [r7, #10]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fbae 	bl	800365c <I2C_TransferConfig>
 8002f00:	e00f      	b.n	8002f22 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	8979      	ldrh	r1, [r7, #10]
 8002f14:	2300      	movs	r3, #0
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fb9d 	bl	800365c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d19e      	bne.n	8002e6a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	6a39      	ldr	r1, [r7, #32]
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f9e3 	bl	80032fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e01a      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2220      	movs	r2, #32
 8002f46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4b0c      	ldr	r3, [pc, #48]	@ (8002f84 <HAL_I2C_Master_Transmit+0x22c>)
 8002f54:	400b      	ands	r3, r1
 8002f56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e000      	b.n	8002f76 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
  }
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	80002000 	.word	0x80002000
 8002f84:	fe00e800 	.word	0xfe00e800

08002f88 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	461a      	mov	r2, r3
 8002f94:	460b      	mov	r3, r1
 8002f96:	817b      	strh	r3, [r7, #10]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	f040 80db 	bne.w	8003160 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_I2C_Master_Receive+0x30>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e0d4      	b.n	8003162 <HAL_I2C_Master_Receive+0x1da>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fc3a 	bl	8001838 <HAL_GetTick>
 8002fc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	2319      	movs	r3, #25
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f8f2 	bl	80031bc <I2C_WaitOnFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0bf      	b.n	8003162 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2222      	movs	r2, #34	@ 0x22
 8002fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2210      	movs	r2, #16
 8002fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	893a      	ldrh	r2, [r7, #8]
 8003002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	2bff      	cmp	r3, #255	@ 0xff
 8003012:	d90e      	bls.n	8003032 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301e:	b2da      	uxtb	r2, r3
 8003020:	8979      	ldrh	r1, [r7, #10]
 8003022:	4b52      	ldr	r3, [pc, #328]	@ (800316c <HAL_I2C_Master_Receive+0x1e4>)
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fb16 	bl	800365c <I2C_TransferConfig>
 8003030:	e06d      	b.n	800310e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003040:	b2da      	uxtb	r2, r3
 8003042:	8979      	ldrh	r1, [r7, #10]
 8003044:	4b49      	ldr	r3, [pc, #292]	@ (800316c <HAL_I2C_Master_Receive+0x1e4>)
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fb05 	bl	800365c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003052:	e05c      	b.n	800310e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	6a39      	ldr	r1, [r7, #32]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f993 	bl	8003384 <I2C_WaitOnRXNEFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e07c      	b.n	8003162 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d034      	beq.n	800310e <HAL_I2C_Master_Receive+0x186>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d130      	bne.n	800310e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	2200      	movs	r2, #0
 80030b4:	2180      	movs	r1, #128	@ 0x80
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f880 	bl	80031bc <I2C_WaitOnFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e04d      	b.n	8003162 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2bff      	cmp	r3, #255	@ 0xff
 80030ce:	d90e      	bls.n	80030ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	22ff      	movs	r2, #255	@ 0xff
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	8979      	ldrh	r1, [r7, #10]
 80030de:	2300      	movs	r3, #0
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fab8 	bl	800365c <I2C_TransferConfig>
 80030ec:	e00f      	b.n	800310e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	8979      	ldrh	r1, [r7, #10]
 8003100:	2300      	movs	r3, #0
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 faa7 	bl	800365c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d19d      	bne.n	8003054 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	6a39      	ldr	r1, [r7, #32]
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f8ed 	bl	80032fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e01a      	b.n	8003162 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2220      	movs	r2, #32
 8003132:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6859      	ldr	r1, [r3, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4b0c      	ldr	r3, [pc, #48]	@ (8003170 <HAL_I2C_Master_Receive+0x1e8>)
 8003140:	400b      	ands	r3, r1
 8003142:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	80002400 	.word	0x80002400
 8003170:	fe00e800 	.word	0xfe00e800

08003174 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b02      	cmp	r3, #2
 8003188:	d103      	bne.n	8003192 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2200      	movs	r2, #0
 8003190:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d007      	beq.n	80031b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	619a      	str	r2, [r3, #24]
  }
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031cc:	e03b      	b.n	8003246 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	6839      	ldr	r1, [r7, #0]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f962 	bl	800349c <I2C_IsErrorOccurred>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e041      	b.n	8003266 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d02d      	beq.n	8003246 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ea:	f7fe fb25 	bl	8001838 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <I2C_WaitOnFlagUntilTimeout+0x44>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d122      	bne.n	8003246 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4013      	ands	r3, r2
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	429a      	cmp	r2, r3
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	429a      	cmp	r2, r3
 800321c:	d113      	bne.n	8003246 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003222:	f043 0220 	orr.w	r2, r3, #32
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e00f      	b.n	8003266 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699a      	ldr	r2, [r3, #24]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4013      	ands	r3, r2
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	bf0c      	ite	eq
 8003256:	2301      	moveq	r3, #1
 8003258:	2300      	movne	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	429a      	cmp	r2, r3
 8003262:	d0b4      	beq.n	80031ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800327a:	e033      	b.n	80032e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f90b 	bl	800349c <I2C_IsErrorOccurred>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e031      	b.n	80032f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d025      	beq.n	80032e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003298:	f7fe face 	bl	8001838 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d302      	bcc.n	80032ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d11a      	bne.n	80032e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d013      	beq.n	80032e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c0:	f043 0220 	orr.w	r2, r3, #32
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e007      	b.n	80032f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d1c4      	bne.n	800327c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003308:	e02f      	b.n	800336a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f8c4 	bl	800349c <I2C_IsErrorOccurred>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e02d      	b.n	800337a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331e:	f7fe fa8b 	bl	8001838 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	429a      	cmp	r2, r3
 800332c:	d302      	bcc.n	8003334 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d11a      	bne.n	800336a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b20      	cmp	r3, #32
 8003340:	d013      	beq.n	800336a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e007      	b.n	800337a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b20      	cmp	r3, #32
 8003376:	d1c8      	bne.n	800330a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003394:	e071      	b.n	800347a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f87e 	bl	800349c <I2C_IsErrorOccurred>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d13b      	bne.n	8003430 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d138      	bne.n	8003430 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d105      	bne.n	80033d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d121      	bne.n	800342a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2210      	movs	r2, #16
 80033ec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2204      	movs	r2, #4
 80033f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2220      	movs	r2, #32
 80033fa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6859      	ldr	r1, [r3, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4b24      	ldr	r3, [pc, #144]	@ (8003498 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003408:	400b      	ands	r3, r1
 800340a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	75fb      	strb	r3, [r7, #23]
 8003428:	e002      	b.n	8003430 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003430:	f7fe fa02 	bl	8001838 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	429a      	cmp	r2, r3
 800343e:	d302      	bcc.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d119      	bne.n	800347a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003446:	7dfb      	ldrb	r3, [r7, #23]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d116      	bne.n	800347a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b04      	cmp	r3, #4
 8003458:	d00f      	beq.n	800347a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	f043 0220 	orr.w	r2, r3, #32
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b04      	cmp	r3, #4
 8003486:	d002      	beq.n	800348e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d083      	beq.n	8003396 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	fe00e800 	.word	0xfe00e800

0800349c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	@ 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d068      	beq.n	800359a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2210      	movs	r2, #16
 80034ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034d0:	e049      	b.n	8003566 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d045      	beq.n	8003566 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034da:	f7fe f9ad 	bl	8001838 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d302      	bcc.n	80034f0 <I2C_IsErrorOccurred+0x54>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d13a      	bne.n	8003566 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003502:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800350e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003512:	d121      	bne.n	8003558 <I2C_IsErrorOccurred+0xbc>
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800351a:	d01d      	beq.n	8003558 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	2b20      	cmp	r3, #32
 8003520:	d01a      	beq.n	8003558 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003530:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003532:	f7fe f981 	bl	8001838 <HAL_GetTick>
 8003536:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003538:	e00e      	b.n	8003558 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800353a:	f7fe f97d 	bl	8001838 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b19      	cmp	r3, #25
 8003546:	d907      	bls.n	8003558 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	f043 0320 	orr.w	r3, r3, #32
 800354e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003556:	e006      	b.n	8003566 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b20      	cmp	r3, #32
 8003564:	d1e9      	bne.n	800353a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b20      	cmp	r3, #32
 8003572:	d003      	beq.n	800357c <I2C_IsErrorOccurred+0xe0>
 8003574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0aa      	beq.n	80034d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800357c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003580:	2b00      	cmp	r3, #0
 8003582:	d103      	bne.n	800358c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2220      	movs	r2, #32
 800358a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	f043 0304 	orr.w	r3, r3, #4
 8003592:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	f043 0308 	orr.w	r3, r3, #8
 80035d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f043 0302 	orr.w	r3, r3, #2
 80035f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003600:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01c      	beq.n	800364a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff fdaf 	bl	8003174 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b0d      	ldr	r3, [pc, #52]	@ (8003658 <I2C_IsErrorOccurred+0x1bc>)
 8003622:	400b      	ands	r3, r1
 8003624:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800364a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800364e:	4618      	mov	r0, r3
 8003650:	3728      	adds	r7, #40	@ 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	fe00e800 	.word	0xfe00e800

0800365c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	817b      	strh	r3, [r7, #10]
 800366a:	4613      	mov	r3, r2
 800366c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003674:	7a7b      	ldrb	r3, [r7, #9]
 8003676:	041b      	lsls	r3, r3, #16
 8003678:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800367c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	4313      	orrs	r3, r2
 8003686:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800368a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	0d5b      	lsrs	r3, r3, #21
 8003696:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800369a:	4b08      	ldr	r3, [pc, #32]	@ (80036bc <I2C_TransferConfig+0x60>)
 800369c:	430b      	orrs	r3, r1
 800369e:	43db      	mvns	r3, r3
 80036a0:	ea02 0103 	and.w	r1, r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	03ff63ff 	.word	0x03ff63ff

080036c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d138      	bne.n	8003748 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e032      	b.n	800374a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	@ 0x24
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003712:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b20      	cmp	r3, #32
 800376a:	d139      	bne.n	80037e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003776:	2302      	movs	r3, #2
 8003778:	e033      	b.n	80037e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2224      	movs	r2, #36	@ 0x24
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	e000      	b.n	80037e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037e0:	2302      	movs	r3, #2
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037f4:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <HAL_PWREx_GetVoltageRange+0x18>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40007000 	.word	0x40007000

0800380c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800381a:	d130      	bne.n	800387e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800381c:	4b23      	ldr	r3, [pc, #140]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003828:	d038      	beq.n	800389c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800382a:	4b20      	ldr	r3, [pc, #128]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003832:	4a1e      	ldr	r2, [pc, #120]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003834:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003838:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800383a:	4b1d      	ldr	r3, [pc, #116]	@ (80038b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2232      	movs	r2, #50	@ 0x32
 8003840:	fb02 f303 	mul.w	r3, r2, r3
 8003844:	4a1b      	ldr	r2, [pc, #108]	@ (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0c9b      	lsrs	r3, r3, #18
 800384c:	3301      	adds	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003850:	e002      	b.n	8003858 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3b01      	subs	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003858:	4b14      	ldr	r3, [pc, #80]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003864:	d102      	bne.n	800386c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f2      	bne.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800386c:	4b0f      	ldr	r3, [pc, #60]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003878:	d110      	bne.n	800389c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e00f      	b.n	800389e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800387e:	4b0b      	ldr	r3, [pc, #44]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388a:	d007      	beq.n	800389c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800388c:	4b07      	ldr	r3, [pc, #28]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003894:	4a05      	ldr	r2, [pc, #20]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800389a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40007000 	.word	0x40007000
 80038b0:	20000000 	.word	0x20000000
 80038b4:	431bde83 	.word	0x431bde83

080038b8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80038bc:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a04      	ldr	r2, [pc, #16]	@ (80038d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038c6:	6053      	str	r3, [r2, #4]
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40007000 	.word	0x40007000

080038d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f000 bc08 	b.w	80040fc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ec:	4b96      	ldr	r3, [pc, #600]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 030c 	and.w	r3, r3, #12
 80038f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f6:	4b94      	ldr	r3, [pc, #592]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80e4 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <HAL_RCC_OscConfig+0x4c>
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b0c      	cmp	r3, #12
 8003918:	f040 808b 	bne.w	8003a32 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b01      	cmp	r3, #1
 8003920:	f040 8087 	bne.w	8003a32 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003924:	4b88      	ldr	r3, [pc, #544]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_OscConfig+0x64>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e3df      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1a      	ldr	r2, [r3, #32]
 8003940:	4b81      	ldr	r3, [pc, #516]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d004      	beq.n	8003956 <HAL_RCC_OscConfig+0x7e>
 800394c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003954:	e005      	b.n	8003962 <HAL_RCC_OscConfig+0x8a>
 8003956:	4b7c      	ldr	r3, [pc, #496]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003962:	4293      	cmp	r3, r2
 8003964:	d223      	bcs.n	80039ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdac 	bl	80044c8 <RCC_SetFlashLatencyFromMSIRange>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e3c0      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800397a:	4b73      	ldr	r3, [pc, #460]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a72      	ldr	r2, [pc, #456]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003980:	f043 0308 	orr.w	r3, r3, #8
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	4b70      	ldr	r3, [pc, #448]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	496d      	ldr	r1, [pc, #436]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003998:	4b6b      	ldr	r3, [pc, #428]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	4968      	ldr	r1, [pc, #416]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
 80039ac:	e025      	b.n	80039fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ae:	4b66      	ldr	r3, [pc, #408]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a65      	ldr	r2, [pc, #404]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039b4:	f043 0308 	orr.w	r3, r3, #8
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b63      	ldr	r3, [pc, #396]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4960      	ldr	r1, [pc, #384]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	495b      	ldr	r1, [pc, #364]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fd6c 	bl	80044c8 <RCC_SetFlashLatencyFromMSIRange>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e380      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039fa:	f000 fc87 	bl	800430c <HAL_RCC_GetSysClockFreq>
 80039fe:	4602      	mov	r2, r0
 8003a00:	4b51      	ldr	r3, [pc, #324]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	4950      	ldr	r1, [pc, #320]	@ (8003b4c <HAL_RCC_OscConfig+0x274>)
 8003a0c:	5ccb      	ldrb	r3, [r1, r3]
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	fa22 f303 	lsr.w	r3, r2, r3
 8003a16:	4a4e      	ldr	r2, [pc, #312]	@ (8003b50 <HAL_RCC_OscConfig+0x278>)
 8003a18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b54 <HAL_RCC_OscConfig+0x27c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fd fdf6 	bl	8001610 <HAL_InitTick>
 8003a24:	4603      	mov	r3, r0
 8003a26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d052      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	e364      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d032      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a3a:	4b43      	ldr	r3, [pc, #268]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a42      	ldr	r2, [pc, #264]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a46:	f7fd fef7 	bl	8001838 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a4e:	f7fd fef3 	bl	8001838 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e34d      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a60:	4b39      	ldr	r3, [pc, #228]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a6c:	4b36      	ldr	r3, [pc, #216]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a35      	ldr	r2, [pc, #212]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a72:	f043 0308 	orr.w	r3, r3, #8
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b33      	ldr	r3, [pc, #204]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4930      	ldr	r1, [pc, #192]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	492b      	ldr	r1, [pc, #172]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
 8003a9e:	e01a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003aa0:	4b29      	ldr	r3, [pc, #164]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a28      	ldr	r2, [pc, #160]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aac:	f7fd fec4 	bl	8001838 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab4:	f7fd fec0 	bl	8001838 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e31a      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ac6:	4b20      	ldr	r3, [pc, #128]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x1dc>
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ad4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d073      	beq.n	8003bca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_OscConfig+0x21c>
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d10e      	bne.n	8003b0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d10b      	bne.n	8003b0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	4b14      	ldr	r3, [pc, #80]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d063      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x2f0>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d15f      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e2f7      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b14:	d106      	bne.n	8003b24 <HAL_RCC_OscConfig+0x24c>
 8003b16:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e025      	b.n	8003b70 <HAL_RCC_OscConfig+0x298>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b2c:	d114      	bne.n	8003b58 <HAL_RCC_OscConfig+0x280>
 8003b2e:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a05      	ldr	r2, [pc, #20]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	4b03      	ldr	r3, [pc, #12]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a02      	ldr	r2, [pc, #8]	@ (8003b48 <HAL_RCC_OscConfig+0x270>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e013      	b.n	8003b70 <HAL_RCC_OscConfig+0x298>
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	080090ac 	.word	0x080090ac
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004
 8003b58:	4ba0      	ldr	r3, [pc, #640]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a9f      	ldr	r2, [pc, #636]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	4b9d      	ldr	r3, [pc, #628]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a9c      	ldr	r2, [pc, #624]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd fe5e 	bl	8001838 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fd fe5a 	bl	8001838 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	@ 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e2b4      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b92:	4b92      	ldr	r3, [pc, #584]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x2a8>
 8003b9e:	e014      	b.n	8003bca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fd fe4a 	bl	8001838 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7fd fe46 	bl	8001838 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	@ 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e2a0      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bba:	4b88      	ldr	r3, [pc, #544]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x2d0>
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d060      	beq.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_OscConfig+0x310>
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d119      	bne.n	8003c16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d116      	bne.n	8003c16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be8:	4b7c      	ldr	r3, [pc, #496]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_OscConfig+0x328>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e27d      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b76      	ldr	r3, [pc, #472]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	4973      	ldr	r1, [pc, #460]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c14:	e040      	b.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d023      	beq.n	8003c66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c1e:	4b6f      	ldr	r3, [pc, #444]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6e      	ldr	r2, [pc, #440]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd fe05 	bl	8001838 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fd fe01 	bl	8001838 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e25b      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c44:	4b65      	ldr	r3, [pc, #404]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b62      	ldr	r3, [pc, #392]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	495f      	ldr	r1, [pc, #380]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
 8003c64:	e018      	b.n	8003c98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c66:	4b5d      	ldr	r3, [pc, #372]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5c      	ldr	r2, [pc, #368]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fd fde1 	bl	8001838 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7a:	f7fd fddd 	bl	8001838 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e237      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c8c:	4b53      	ldr	r3, [pc, #332]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d03c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01c      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cac:	4b4b      	ldr	r3, [pc, #300]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fd fdbc 	bl	8001838 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7fd fdb8 	bl	8001838 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e212      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cd6:	4b41      	ldr	r3, [pc, #260]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ef      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x3ec>
 8003ce4:	e01b      	b.n	8003d1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cec:	4a3b      	ldr	r2, [pc, #236]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fd fd9f 	bl	8001838 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fd fd9b 	bl	8001838 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e1f5      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d10:	4b32      	ldr	r3, [pc, #200]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ef      	bne.n	8003cfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80a6 	beq.w	8003e78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d30:	4b2a      	ldr	r3, [pc, #168]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3c:	4b27      	ldr	r3, [pc, #156]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	4a26      	ldr	r2, [pc, #152]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d48:	4b24      	ldr	r3, [pc, #144]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d54:	2301      	movs	r3, #1
 8003d56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d58:	4b21      	ldr	r3, [pc, #132]	@ (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d118      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d64:	4b1e      	ldr	r3, [pc, #120]	@ (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1d      	ldr	r2, [pc, #116]	@ (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d70:	f7fd fd62 	bl	8001838 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fd fd5e 	bl	8001838 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1b8      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8a:	4b15      	ldr	r3, [pc, #84]	@ (8003de0 <HAL_RCC_OscConfig+0x508>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d108      	bne.n	8003db0 <HAL_RCC_OscConfig+0x4d8>
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da4:	4a0d      	ldr	r2, [pc, #52]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dae:	e029      	b.n	8003e04 <HAL_RCC_OscConfig+0x52c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d115      	bne.n	8003de4 <HAL_RCC_OscConfig+0x50c>
 8003db8:	4b08      	ldr	r3, [pc, #32]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbe:	4a07      	ldr	r2, [pc, #28]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dc0:	f043 0304 	orr.w	r3, r3, #4
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dc8:	4b04      	ldr	r3, [pc, #16]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dce:	4a03      	ldr	r2, [pc, #12]	@ (8003ddc <HAL_RCC_OscConfig+0x504>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dd8:	e014      	b.n	8003e04 <HAL_RCC_OscConfig+0x52c>
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40007000 	.word	0x40007000
 8003de4:	4b9d      	ldr	r3, [pc, #628]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dea:	4a9c      	ldr	r2, [pc, #624]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003df4:	4b99      	ldr	r3, [pc, #612]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfa:	4a98      	ldr	r2, [pc, #608]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d016      	beq.n	8003e3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fd fd14 	bl	8001838 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fd fd10 	bl	8001838 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e168      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2a:	4b8c      	ldr	r3, [pc, #560]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ed      	beq.n	8003e14 <HAL_RCC_OscConfig+0x53c>
 8003e38:	e015      	b.n	8003e66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7fd fcfd 	bl	8001838 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fd fcf9 	bl	8001838 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e151      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e58:	4b80      	ldr	r3, [pc, #512]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ed      	bne.n	8003e42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e66:	7ffb      	ldrb	r3, [r7, #31]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b7b      	ldr	r3, [pc, #492]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e70:	4a7a      	ldr	r2, [pc, #488]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d03c      	beq.n	8003efe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01c      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e8c:	4b73      	ldr	r3, [pc, #460]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e92:	4a72      	ldr	r2, [pc, #456]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fd fccc 	bl	8001838 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ea4:	f7fd fcc8 	bl	8001838 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e122      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eb6:	4b69      	ldr	r3, [pc, #420]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ef      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x5cc>
 8003ec4:	e01b      	b.n	8003efe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ec6:	4b65      	ldr	r3, [pc, #404]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ecc:	4a63      	ldr	r2, [pc, #396]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed6:	f7fd fcaf 	bl	8001838 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ede:	f7fd fcab 	bl	8001838 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e105      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ef0:	4b5a      	ldr	r3, [pc, #360]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1ef      	bne.n	8003ede <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80f9 	beq.w	80040fa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	f040 80cf 	bne.w	80040b0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f12:	4b52      	ldr	r3, [pc, #328]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f003 0203 	and.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d12c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f30:	3b01      	subs	r3, #1
 8003f32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d123      	bne.n	8003f80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d11b      	bne.n	8003f80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d113      	bne.n	8003f80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	3b01      	subs	r3, #1
 8003f66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d109      	bne.n	8003f80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d071      	beq.n	8004064 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d068      	beq.n	8004058 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f86:	4b35      	ldr	r3, [pc, #212]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d105      	bne.n	8003f9e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f92:	4b32      	ldr	r3, [pc, #200]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e0ac      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2d      	ldr	r2, [pc, #180]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003fa8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fae:	f7fd fc43 	bl	8001838 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb6:	f7fd fc3f 	bl	8001838 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e099      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc8:	4b24      	ldr	r3, [pc, #144]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f0      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd4:	4b21      	ldr	r3, [pc, #132]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	4b21      	ldr	r3, [pc, #132]	@ (8004060 <HAL_RCC_OscConfig+0x788>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fe4:	3a01      	subs	r2, #1
 8003fe6:	0112      	lsls	r2, r2, #4
 8003fe8:	4311      	orrs	r1, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fee:	0212      	lsls	r2, r2, #8
 8003ff0:	4311      	orrs	r1, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ff6:	0852      	lsrs	r2, r2, #1
 8003ff8:	3a01      	subs	r2, #1
 8003ffa:	0552      	lsls	r2, r2, #21
 8003ffc:	4311      	orrs	r1, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004002:	0852      	lsrs	r2, r2, #1
 8004004:	3a01      	subs	r2, #1
 8004006:	0652      	lsls	r2, r2, #25
 8004008:	4311      	orrs	r1, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800400e:	06d2      	lsls	r2, r2, #27
 8004010:	430a      	orrs	r2, r1
 8004012:	4912      	ldr	r1, [pc, #72]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8004014:	4313      	orrs	r3, r2
 8004016:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004018:	4b10      	ldr	r3, [pc, #64]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a0f      	ldr	r2, [pc, #60]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 800401e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004022:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004024:	4b0d      	ldr	r3, [pc, #52]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4a0c      	ldr	r2, [pc, #48]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 800402a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800402e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004030:	f7fd fc02 	bl	8001838 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fd fbfe 	bl	8001838 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e058      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800404a:	4b04      	ldr	r3, [pc, #16]	@ (800405c <HAL_RCC_OscConfig+0x784>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004056:	e050      	b.n	80040fa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e04f      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
 800405c:	40021000 	.word	0x40021000
 8004060:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004064:	4b27      	ldr	r3, [pc, #156]	@ (8004104 <HAL_RCC_OscConfig+0x82c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d144      	bne.n	80040fa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004070:	4b24      	ldr	r3, [pc, #144]	@ (8004104 <HAL_RCC_OscConfig+0x82c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a23      	ldr	r2, [pc, #140]	@ (8004104 <HAL_RCC_OscConfig+0x82c>)
 8004076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800407a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800407c:	4b21      	ldr	r3, [pc, #132]	@ (8004104 <HAL_RCC_OscConfig+0x82c>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a20      	ldr	r2, [pc, #128]	@ (8004104 <HAL_RCC_OscConfig+0x82c>)
 8004082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004086:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004088:	f7fd fbd6 	bl	8001838 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004090:	f7fd fbd2 	bl	8001838 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e02c      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a2:	4b18      	ldr	r3, [pc, #96]	@ (8004104 <HAL_RCC_OscConfig+0x82c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x7b8>
 80040ae:	e024      	b.n	80040fa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b0c      	cmp	r3, #12
 80040b4:	d01f      	beq.n	80040f6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b6:	4b13      	ldr	r3, [pc, #76]	@ (8004104 <HAL_RCC_OscConfig+0x82c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a12      	ldr	r2, [pc, #72]	@ (8004104 <HAL_RCC_OscConfig+0x82c>)
 80040bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fd fbb9 	bl	8001838 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fd fbb5 	bl	8001838 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e00f      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040dc:	4b09      	ldr	r3, [pc, #36]	@ (8004104 <HAL_RCC_OscConfig+0x82c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040e8:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <HAL_RCC_OscConfig+0x82c>)
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	4905      	ldr	r1, [pc, #20]	@ (8004104 <HAL_RCC_OscConfig+0x82c>)
 80040ee:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <HAL_RCC_OscConfig+0x830>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	60cb      	str	r3, [r1, #12]
 80040f4:	e001      	b.n	80040fa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3720      	adds	r7, #32
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40021000 	.word	0x40021000
 8004108:	feeefffc 	.word	0xfeeefffc

0800410c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0e7      	b.n	80042f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004120:	4b75      	ldr	r3, [pc, #468]	@ (80042f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d910      	bls.n	8004150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b72      	ldr	r3, [pc, #456]	@ (80042f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 0207 	bic.w	r2, r3, #7
 8004136:	4970      	ldr	r1, [pc, #448]	@ (80042f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	4313      	orrs	r3, r2
 800413c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800413e:	4b6e      	ldr	r3, [pc, #440]	@ (80042f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d001      	beq.n	8004150 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0cf      	b.n	80042f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d010      	beq.n	800417e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	4b66      	ldr	r3, [pc, #408]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004168:	429a      	cmp	r2, r3
 800416a:	d908      	bls.n	800417e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416c:	4b63      	ldr	r3, [pc, #396]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4960      	ldr	r1, [pc, #384]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d04c      	beq.n	8004224 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d107      	bne.n	80041a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004192:	4b5a      	ldr	r3, [pc, #360]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d121      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e0a6      	b.n	80042f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041aa:	4b54      	ldr	r3, [pc, #336]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d115      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e09a      	b.n	80042f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d107      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041c2:	4b4e      	ldr	r3, [pc, #312]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e08e      	b.n	80042f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d2:	4b4a      	ldr	r3, [pc, #296]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e086      	b.n	80042f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041e2:	4b46      	ldr	r3, [pc, #280]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f023 0203 	bic.w	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4943      	ldr	r1, [pc, #268]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f4:	f7fd fb20 	bl	8001838 <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041fc:	f7fd fb1c 	bl	8001838 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e06e      	b.n	80042f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	4b3a      	ldr	r3, [pc, #232]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 020c 	and.w	r2, r3, #12
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	429a      	cmp	r2, r3
 8004222:	d1eb      	bne.n	80041fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d010      	beq.n	8004252 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	4b31      	ldr	r3, [pc, #196]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800423c:	429a      	cmp	r2, r3
 800423e:	d208      	bcs.n	8004252 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004240:	4b2e      	ldr	r3, [pc, #184]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	492b      	ldr	r1, [pc, #172]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004252:	4b29      	ldr	r3, [pc, #164]	@ (80042f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d210      	bcs.n	8004282 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004260:	4b25      	ldr	r3, [pc, #148]	@ (80042f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f023 0207 	bic.w	r2, r3, #7
 8004268:	4923      	ldr	r1, [pc, #140]	@ (80042f8 <HAL_RCC_ClockConfig+0x1ec>)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004270:	4b21      	ldr	r3, [pc, #132]	@ (80042f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d001      	beq.n	8004282 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e036      	b.n	80042f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800428e:	4b1b      	ldr	r3, [pc, #108]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	4918      	ldr	r1, [pc, #96]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 800429c:	4313      	orrs	r3, r2
 800429e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d009      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ac:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4910      	ldr	r1, [pc, #64]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042c0:	f000 f824 	bl	800430c <HAL_RCC_GetSysClockFreq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4b0d      	ldr	r3, [pc, #52]	@ (80042fc <HAL_RCC_ClockConfig+0x1f0>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	091b      	lsrs	r3, r3, #4
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	490b      	ldr	r1, [pc, #44]	@ (8004300 <HAL_RCC_ClockConfig+0x1f4>)
 80042d2:	5ccb      	ldrb	r3, [r1, r3]
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
 80042dc:	4a09      	ldr	r2, [pc, #36]	@ (8004304 <HAL_RCC_ClockConfig+0x1f8>)
 80042de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042e0:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <HAL_RCC_ClockConfig+0x1fc>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fd f993 	bl	8001610 <HAL_InitTick>
 80042ea:	4603      	mov	r3, r0
 80042ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80042ee:	7afb      	ldrb	r3, [r7, #11]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40022000 	.word	0x40022000
 80042fc:	40021000 	.word	0x40021000
 8004300:	080090ac 	.word	0x080090ac
 8004304:	20000000 	.word	0x20000000
 8004308:	20000004 	.word	0x20000004

0800430c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	b089      	sub	sp, #36	@ 0x24
 8004310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	2300      	movs	r3, #0
 8004318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800431a:	4b3e      	ldr	r3, [pc, #248]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x108>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004324:	4b3b      	ldr	r3, [pc, #236]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x108>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0x34>
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2b0c      	cmp	r3, #12
 8004338:	d121      	bne.n	800437e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d11e      	bne.n	800437e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004340:	4b34      	ldr	r3, [pc, #208]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x108>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d107      	bne.n	800435c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800434c:	4b31      	ldr	r3, [pc, #196]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x108>)
 800434e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004352:	0a1b      	lsrs	r3, r3, #8
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	e005      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800435c:	4b2d      	ldr	r3, [pc, #180]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x108>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004368:	4a2b      	ldr	r2, [pc, #172]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10d      	bne.n	8004394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800437c:	e00a      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b04      	cmp	r3, #4
 8004382:	d102      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004384:	4b25      	ldr	r3, [pc, #148]	@ (800441c <HAL_RCC_GetSysClockFreq+0x110>)
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	e004      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d101      	bne.n	8004394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004390:	4b22      	ldr	r3, [pc, #136]	@ (800441c <HAL_RCC_GetSysClockFreq+0x110>)
 8004392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b0c      	cmp	r3, #12
 8004398:	d134      	bne.n	8004404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800439a:	4b1e      	ldr	r3, [pc, #120]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x108>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d003      	beq.n	80043b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d003      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0xac>
 80043b0:	e005      	b.n	80043be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043b2:	4b1a      	ldr	r3, [pc, #104]	@ (800441c <HAL_RCC_GetSysClockFreq+0x110>)
 80043b4:	617b      	str	r3, [r7, #20]
      break;
 80043b6:	e005      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043b8:	4b18      	ldr	r3, [pc, #96]	@ (800441c <HAL_RCC_GetSysClockFreq+0x110>)
 80043ba:	617b      	str	r3, [r7, #20]
      break;
 80043bc:	e002      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	617b      	str	r3, [r7, #20]
      break;
 80043c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043c4:	4b13      	ldr	r3, [pc, #76]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	3301      	adds	r3, #1
 80043d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043d2:	4b10      	ldr	r3, [pc, #64]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	fb03 f202 	mul.w	r2, r3, r2
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	0e5b      	lsrs	r3, r3, #25
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	3301      	adds	r3, #1
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004404:	69bb      	ldr	r3, [r7, #24]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3724      	adds	r7, #36	@ 0x24
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	080090c4 	.word	0x080090c4
 800441c:	00f42400 	.word	0x00f42400

08004420 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004424:	4b03      	ldr	r3, [pc, #12]	@ (8004434 <HAL_RCC_GetHCLKFreq+0x14>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20000000 	.word	0x20000000

08004438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800443c:	f7ff fff0 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b06      	ldr	r3, [pc, #24]	@ (800445c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	0adb      	lsrs	r3, r3, #11
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4904      	ldr	r1, [pc, #16]	@ (8004460 <HAL_RCC_GetPCLK2Freq+0x28>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	080090bc 	.word	0x080090bc

08004464 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	220f      	movs	r2, #15
 8004472:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004474:	4b12      	ldr	r3, [pc, #72]	@ (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0203 	and.w	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004480:	4b0f      	ldr	r3, [pc, #60]	@ (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800448c:	4b0c      	ldr	r3, [pc, #48]	@ (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004498:	4b09      	ldr	r3, [pc, #36]	@ (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	08db      	lsrs	r3, r3, #3
 800449e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80044a6:	4b07      	ldr	r3, [pc, #28]	@ (80044c4 <HAL_RCC_GetClockConfig+0x60>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0207 	and.w	r2, r3, #7
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	601a      	str	r2, [r3, #0]
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40021000 	.word	0x40021000
 80044c4:	40022000 	.word	0x40022000

080044c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044e0:	f7ff f986 	bl	80037f0 <HAL_PWREx_GetVoltageRange>
 80044e4:	6178      	str	r0, [r7, #20]
 80044e6:	e014      	b.n	8004512 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044e8:	4b25      	ldr	r3, [pc, #148]	@ (8004580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ec:	4a24      	ldr	r2, [pc, #144]	@ (8004580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80044f4:	4b22      	ldr	r3, [pc, #136]	@ (8004580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004500:	f7ff f976 	bl	80037f0 <HAL_PWREx_GetVoltageRange>
 8004504:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004506:	4b1e      	ldr	r3, [pc, #120]	@ (8004580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450a:	4a1d      	ldr	r2, [pc, #116]	@ (8004580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800450c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004510:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004518:	d10b      	bne.n	8004532 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b80      	cmp	r3, #128	@ 0x80
 800451e:	d919      	bls.n	8004554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2ba0      	cmp	r3, #160	@ 0xa0
 8004524:	d902      	bls.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004526:	2302      	movs	r3, #2
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	e013      	b.n	8004554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800452c:	2301      	movs	r3, #1
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	e010      	b.n	8004554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b80      	cmp	r3, #128	@ 0x80
 8004536:	d902      	bls.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004538:	2303      	movs	r3, #3
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	e00a      	b.n	8004554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b80      	cmp	r3, #128	@ 0x80
 8004542:	d102      	bne.n	800454a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004544:	2302      	movs	r3, #2
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	e004      	b.n	8004554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b70      	cmp	r3, #112	@ 0x70
 800454e:	d101      	bne.n	8004554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004550:	2301      	movs	r3, #1
 8004552:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004554:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f023 0207 	bic.w	r2, r3, #7
 800455c:	4909      	ldr	r1, [pc, #36]	@ (8004584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004564:	4b07      	ldr	r3, [pc, #28]	@ (8004584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	429a      	cmp	r2, r3
 8004570:	d001      	beq.n	8004576 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40021000 	.word	0x40021000
 8004584:	40022000 	.word	0x40022000

08004588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004590:	2300      	movs	r3, #0
 8004592:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004594:	2300      	movs	r3, #0
 8004596:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d041      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045ac:	d02a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045b2:	d824      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045b8:	d008      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045be:	d81e      	bhi.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045c8:	d010      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045ca:	e018      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045cc:	4b86      	ldr	r3, [pc, #536]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4a85      	ldr	r2, [pc, #532]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d8:	e015      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3304      	adds	r3, #4
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 facd 	bl	8004b80 <RCCEx_PLLSAI1_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045ea:	e00c      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3320      	adds	r3, #32
 80045f0:	2100      	movs	r1, #0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fbb6 	bl	8004d64 <RCCEx_PLLSAI2_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045fc:	e003      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	74fb      	strb	r3, [r7, #19]
      break;
 8004602:	e000      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004606:	7cfb      	ldrb	r3, [r7, #19]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800460c:	4b76      	ldr	r3, [pc, #472]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004612:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800461a:	4973      	ldr	r1, [pc, #460]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004622:	e001      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d041      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004638:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800463c:	d02a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800463e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004642:	d824      	bhi.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004644:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004648:	d008      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800464a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800464e:	d81e      	bhi.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004658:	d010      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800465a:	e018      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800465c:	4b62      	ldr	r3, [pc, #392]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4a61      	ldr	r2, [pc, #388]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004666:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004668:	e015      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3304      	adds	r3, #4
 800466e:	2100      	movs	r1, #0
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fa85 	bl	8004b80 <RCCEx_PLLSAI1_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800467a:	e00c      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3320      	adds	r3, #32
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fb6e 	bl	8004d64 <RCCEx_PLLSAI2_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800468c:	e003      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	74fb      	strb	r3, [r7, #19]
      break;
 8004692:	e000      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800469c:	4b52      	ldr	r3, [pc, #328]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046aa:	494f      	ldr	r1, [pc, #316]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046b2:	e001      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80a0 	beq.w	8004806 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c6:	2300      	movs	r3, #0
 80046c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046ca:	4b47      	ldr	r3, [pc, #284]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80046da:	2300      	movs	r3, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00d      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e0:	4b41      	ldr	r3, [pc, #260]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e4:	4a40      	ldr	r2, [pc, #256]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80046ec:	4b3e      	ldr	r3, [pc, #248]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f8:	2301      	movs	r3, #1
 80046fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046fc:	4b3b      	ldr	r3, [pc, #236]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a3a      	ldr	r2, [pc, #232]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004708:	f7fd f896 	bl	8001838 <HAL_GetTick>
 800470c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800470e:	e009      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004710:	f7fd f892 	bl	8001838 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d902      	bls.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	74fb      	strb	r3, [r7, #19]
        break;
 8004722:	e005      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004724:	4b31      	ldr	r3, [pc, #196]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0ef      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d15c      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004736:	4b2c      	ldr	r3, [pc, #176]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004740:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01f      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	429a      	cmp	r2, r3
 8004752:	d019      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004754:	4b24      	ldr	r3, [pc, #144]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800475e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004760:	4b21      	ldr	r3, [pc, #132]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004766:	4a20      	ldr	r2, [pc, #128]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800476c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004770:	4b1d      	ldr	r3, [pc, #116]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004776:	4a1c      	ldr	r2, [pc, #112]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004780:	4a19      	ldr	r2, [pc, #100]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d016      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fd f851 	bl	8001838 <HAL_GetTick>
 8004796:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004798:	e00b      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fd f84d 	bl	8001838 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d902      	bls.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	74fb      	strb	r3, [r7, #19]
            break;
 80047b0:	e006      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b2:	4b0d      	ldr	r3, [pc, #52]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0ec      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047c0:	7cfb      	ldrb	r3, [r7, #19]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047c6:	4b08      	ldr	r3, [pc, #32]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d6:	4904      	ldr	r1, [pc, #16]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047de:	e009      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	74bb      	strb	r3, [r7, #18]
 80047e4:	e006      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80047e6:	bf00      	nop
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f4:	7c7b      	ldrb	r3, [r7, #17]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d105      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fa:	4ba6      	ldr	r3, [pc, #664]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047fe:	4aa5      	ldr	r2, [pc, #660]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004804:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004812:	4ba0      	ldr	r3, [pc, #640]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004818:	f023 0203 	bic.w	r2, r3, #3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004820:	499c      	ldr	r1, [pc, #624]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004834:	4b97      	ldr	r3, [pc, #604]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483a:	f023 020c 	bic.w	r2, r3, #12
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004842:	4994      	ldr	r1, [pc, #592]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004856:	4b8f      	ldr	r3, [pc, #572]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004864:	498b      	ldr	r1, [pc, #556]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004878:	4b86      	ldr	r3, [pc, #536]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800487a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004886:	4983      	ldr	r1, [pc, #524]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800489a:	4b7e      	ldr	r3, [pc, #504]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a8:	497a      	ldr	r1, [pc, #488]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048bc:	4b75      	ldr	r3, [pc, #468]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ca:	4972      	ldr	r1, [pc, #456]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048de:	4b6d      	ldr	r3, [pc, #436]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ec:	4969      	ldr	r1, [pc, #420]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004900:	4b64      	ldr	r3, [pc, #400]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004906:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800490e:	4961      	ldr	r1, [pc, #388]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004922:	4b5c      	ldr	r3, [pc, #368]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004928:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004930:	4958      	ldr	r1, [pc, #352]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004944:	4b53      	ldr	r3, [pc, #332]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004952:	4950      	ldr	r1, [pc, #320]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004966:	4b4b      	ldr	r3, [pc, #300]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004974:	4947      	ldr	r1, [pc, #284]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004988:	4b42      	ldr	r3, [pc, #264]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800498a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800498e:	f023 0203 	bic.w	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004996:	493f      	ldr	r1, [pc, #252]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d028      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b8:	4936      	ldr	r1, [pc, #216]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049c8:	d106      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ca:	4b32      	ldr	r3, [pc, #200]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	4a31      	ldr	r2, [pc, #196]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049d4:	60d3      	str	r3, [r2, #12]
 80049d6:	e011      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049e0:	d10c      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3304      	adds	r3, #4
 80049e6:	2101      	movs	r1, #1
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f8c9 	bl	8004b80 <RCCEx_PLLSAI1_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049f2:	7cfb      	ldrb	r3, [r7, #19]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d028      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a08:	4b22      	ldr	r3, [pc, #136]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a16:	491f      	ldr	r1, [pc, #124]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a26:	d106      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a28:	4b1a      	ldr	r3, [pc, #104]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4a19      	ldr	r2, [pc, #100]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a32:	60d3      	str	r3, [r2, #12]
 8004a34:	e011      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a3e:	d10c      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3304      	adds	r3, #4
 8004a44:	2101      	movs	r1, #1
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f89a 	bl	8004b80 <RCCEx_PLLSAI1_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a50:	7cfb      	ldrb	r3, [r7, #19]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004a56:	7cfb      	ldrb	r3, [r7, #19]
 8004a58:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d02a      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a66:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a74:	4907      	ldr	r1, [pc, #28]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a84:	d108      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a86:	4b03      	ldr	r3, [pc, #12]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	4a02      	ldr	r2, [pc, #8]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a90:	60d3      	str	r3, [r2, #12]
 8004a92:	e013      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004a94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f869 	bl	8004b80 <RCCEx_PLLSAI1_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004ab8:	7cfb      	ldrb	r3, [r7, #19]
 8004aba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d02f      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ace:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ad6:	4929      	ldr	r1, [pc, #164]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ae6:	d10d      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	2102      	movs	r1, #2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f846 	bl	8004b80 <RCCEx_PLLSAI1_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004af8:	7cfb      	ldrb	r3, [r7, #19]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d014      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004afe:	7cfb      	ldrb	r3, [r7, #19]
 8004b00:	74bb      	strb	r3, [r7, #18]
 8004b02:	e011      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b0c:	d10c      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3320      	adds	r3, #32
 8004b12:	2102      	movs	r1, #2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 f925 	bl	8004d64 <RCCEx_PLLSAI2_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004b24:	7cfb      	ldrb	r3, [r7, #19]
 8004b26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00b      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b34:	4b11      	ldr	r3, [pc, #68]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b44:	490d      	ldr	r1, [pc, #52]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00b      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b58:	4b08      	ldr	r3, [pc, #32]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b68:	4904      	ldr	r1, [pc, #16]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b70:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40021000 	.word	0x40021000

08004b80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b8e:	4b74      	ldr	r3, [pc, #464]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d018      	beq.n	8004bcc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b9a:	4b71      	ldr	r3, [pc, #452]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f003 0203 	and.w	r2, r3, #3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d10d      	bne.n	8004bc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
       ||
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bb2:	4b6b      	ldr	r3, [pc, #428]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
       ||
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d047      	beq.n	8004c56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	73fb      	strb	r3, [r7, #15]
 8004bca:	e044      	b.n	8004c56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d018      	beq.n	8004c06 <RCCEx_PLLSAI1_Config+0x86>
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d825      	bhi.n	8004c24 <RCCEx_PLLSAI1_Config+0xa4>
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d002      	beq.n	8004be2 <RCCEx_PLLSAI1_Config+0x62>
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d009      	beq.n	8004bf4 <RCCEx_PLLSAI1_Config+0x74>
 8004be0:	e020      	b.n	8004c24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004be2:	4b5f      	ldr	r3, [pc, #380]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d11d      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf2:	e01a      	b.n	8004c2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bf4:	4b5a      	ldr	r3, [pc, #360]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d116      	bne.n	8004c2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c04:	e013      	b.n	8004c2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c06:	4b56      	ldr	r3, [pc, #344]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10f      	bne.n	8004c32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c12:	4b53      	ldr	r3, [pc, #332]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c22:	e006      	b.n	8004c32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
      break;
 8004c28:	e004      	b.n	8004c34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e002      	b.n	8004c34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e000      	b.n	8004c34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c32:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10d      	bne.n	8004c56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c3a:	4b49      	ldr	r3, [pc, #292]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6819      	ldr	r1, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	4943      	ldr	r1, [pc, #268]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d17c      	bne.n	8004d56 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c5c:	4b40      	ldr	r3, [pc, #256]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a3f      	ldr	r2, [pc, #252]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c68:	f7fc fde6 	bl	8001838 <HAL_GetTick>
 8004c6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c6e:	e009      	b.n	8004c84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c70:	f7fc fde2 	bl	8001838 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d902      	bls.n	8004c84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	73fb      	strb	r3, [r7, #15]
        break;
 8004c82:	e005      	b.n	8004c90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c84:	4b36      	ldr	r3, [pc, #216]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1ef      	bne.n	8004c70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d15f      	bne.n	8004d56 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d110      	bne.n	8004cbe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c9c:	4b30      	ldr	r3, [pc, #192]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004ca4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6892      	ldr	r2, [r2, #8]
 8004cac:	0211      	lsls	r1, r2, #8
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68d2      	ldr	r2, [r2, #12]
 8004cb2:	06d2      	lsls	r2, r2, #27
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	492a      	ldr	r1, [pc, #168]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	610b      	str	r3, [r1, #16]
 8004cbc:	e027      	b.n	8004d0e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d112      	bne.n	8004cea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cc4:	4b26      	ldr	r3, [pc, #152]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004ccc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6892      	ldr	r2, [r2, #8]
 8004cd4:	0211      	lsls	r1, r2, #8
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6912      	ldr	r2, [r2, #16]
 8004cda:	0852      	lsrs	r2, r2, #1
 8004cdc:	3a01      	subs	r2, #1
 8004cde:	0552      	lsls	r2, r2, #21
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	491f      	ldr	r1, [pc, #124]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	610b      	str	r3, [r1, #16]
 8004ce8:	e011      	b.n	8004d0e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cea:	4b1d      	ldr	r3, [pc, #116]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004cf2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6892      	ldr	r2, [r2, #8]
 8004cfa:	0211      	lsls	r1, r2, #8
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6952      	ldr	r2, [r2, #20]
 8004d00:	0852      	lsrs	r2, r2, #1
 8004d02:	3a01      	subs	r2, #1
 8004d04:	0652      	lsls	r2, r2, #25
 8004d06:	430a      	orrs	r2, r1
 8004d08:	4915      	ldr	r1, [pc, #84]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d0e:	4b14      	ldr	r3, [pc, #80]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a13      	ldr	r2, [pc, #76]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1a:	f7fc fd8d 	bl	8001838 <HAL_GetTick>
 8004d1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d20:	e009      	b.n	8004d36 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d22:	f7fc fd89 	bl	8001838 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d902      	bls.n	8004d36 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	73fb      	strb	r3, [r7, #15]
          break;
 8004d34:	e005      	b.n	8004d42 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d36:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0ef      	beq.n	8004d22 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d106      	bne.n	8004d56 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	4903      	ldr	r1, [pc, #12]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40021000 	.word	0x40021000

08004d64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d72:	4b69      	ldr	r3, [pc, #420]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d018      	beq.n	8004db0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d7e:	4b66      	ldr	r3, [pc, #408]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0203 	and.w	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d10d      	bne.n	8004daa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
       ||
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d96:	4b60      	ldr	r3, [pc, #384]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
       ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d047      	beq.n	8004e3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	73fb      	strb	r3, [r7, #15]
 8004dae:	e044      	b.n	8004e3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d018      	beq.n	8004dea <RCCEx_PLLSAI2_Config+0x86>
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d825      	bhi.n	8004e08 <RCCEx_PLLSAI2_Config+0xa4>
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d002      	beq.n	8004dc6 <RCCEx_PLLSAI2_Config+0x62>
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d009      	beq.n	8004dd8 <RCCEx_PLLSAI2_Config+0x74>
 8004dc4:	e020      	b.n	8004e08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dc6:	4b54      	ldr	r3, [pc, #336]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d11d      	bne.n	8004e0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd6:	e01a      	b.n	8004e0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d116      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de8:	e013      	b.n	8004e12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dea:	4b4b      	ldr	r3, [pc, #300]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10f      	bne.n	8004e16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004df6:	4b48      	ldr	r3, [pc, #288]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e06:	e006      	b.n	8004e16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e0c:	e004      	b.n	8004e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e0e:	bf00      	nop
 8004e10:	e002      	b.n	8004e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e12:	bf00      	nop
 8004e14:	e000      	b.n	8004e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10d      	bne.n	8004e3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	430b      	orrs	r3, r1
 8004e34:	4938      	ldr	r1, [pc, #224]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d166      	bne.n	8004f0e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e40:	4b35      	ldr	r3, [pc, #212]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a34      	ldr	r2, [pc, #208]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4c:	f7fc fcf4 	bl	8001838 <HAL_GetTick>
 8004e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e52:	e009      	b.n	8004e68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e54:	f7fc fcf0 	bl	8001838 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d902      	bls.n	8004e68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	73fb      	strb	r3, [r7, #15]
        break;
 8004e66:	e005      	b.n	8004e74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e68:	4b2b      	ldr	r3, [pc, #172]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ef      	bne.n	8004e54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d149      	bne.n	8004f0e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d110      	bne.n	8004ea2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e80:	4b25      	ldr	r3, [pc, #148]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004e88:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6892      	ldr	r2, [r2, #8]
 8004e90:	0211      	lsls	r1, r2, #8
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	68d2      	ldr	r2, [r2, #12]
 8004e96:	06d2      	lsls	r2, r2, #27
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	491f      	ldr	r1, [pc, #124]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	614b      	str	r3, [r1, #20]
 8004ea0:	e011      	b.n	8004ec6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004eaa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6892      	ldr	r2, [r2, #8]
 8004eb2:	0211      	lsls	r1, r2, #8
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6912      	ldr	r2, [r2, #16]
 8004eb8:	0852      	lsrs	r2, r2, #1
 8004eba:	3a01      	subs	r2, #1
 8004ebc:	0652      	lsls	r2, r2, #25
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	4915      	ldr	r1, [pc, #84]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ec6:	4b14      	ldr	r3, [pc, #80]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a13      	ldr	r2, [pc, #76]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ed0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed2:	f7fc fcb1 	bl	8001838 <HAL_GetTick>
 8004ed6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ed8:	e009      	b.n	8004eee <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004eda:	f7fc fcad 	bl	8001838 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d902      	bls.n	8004eee <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	73fb      	strb	r3, [r7, #15]
          break;
 8004eec:	e005      	b.n	8004efa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004eee:	4b0a      	ldr	r3, [pc, #40]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0ef      	beq.n	8004eda <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f00:	4b05      	ldr	r3, [pc, #20]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	4903      	ldr	r1, [pc, #12]	@ (8004f18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40021000 	.word	0x40021000

08004f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e049      	b.n	8004fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f841 	bl	8004fca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f000 fb4a 	bl	80055f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d001      	beq.n	8004ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e04f      	b.n	8005098 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a23      	ldr	r2, [pc, #140]	@ (80050a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d01d      	beq.n	8005056 <HAL_TIM_Base_Start_IT+0x76>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005022:	d018      	beq.n	8005056 <HAL_TIM_Base_Start_IT+0x76>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1f      	ldr	r2, [pc, #124]	@ (80050a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <HAL_TIM_Base_Start_IT+0x76>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1e      	ldr	r2, [pc, #120]	@ (80050ac <HAL_TIM_Base_Start_IT+0xcc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00e      	beq.n	8005056 <HAL_TIM_Base_Start_IT+0x76>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1c      	ldr	r2, [pc, #112]	@ (80050b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d009      	beq.n	8005056 <HAL_TIM_Base_Start_IT+0x76>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1b      	ldr	r2, [pc, #108]	@ (80050b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_TIM_Base_Start_IT+0x76>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a19      	ldr	r2, [pc, #100]	@ (80050b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d115      	bne.n	8005082 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <HAL_TIM_Base_Start_IT+0xdc>)
 800505e:	4013      	ands	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b06      	cmp	r3, #6
 8005066:	d015      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0xb4>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800506e:	d011      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005080:	e008      	b.n	8005094 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e000      	b.n	8005096 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005094:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40000c00 	.word	0x40000c00
 80050b4:	40013400 	.word	0x40013400
 80050b8:	40014000 	.word	0x40014000
 80050bc:	00010007 	.word	0x00010007

080050c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e049      	b.n	8005166 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fc f97a 	bl	80013e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f000 fa78 	bl	80055f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d020      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01b      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f06f 0202 	mvn.w	r2, #2
 80051a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0303 	and.w	r3, r3, #3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f9fd 	bl	80055b8 <HAL_TIM_IC_CaptureCallback>
 80051be:	e005      	b.n	80051cc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f9ef 	bl	80055a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fa00 	bl	80055cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d020      	beq.n	800521e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01b      	beq.n	800521e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f06f 0204 	mvn.w	r2, #4
 80051ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f9d7 	bl	80055b8 <HAL_TIM_IC_CaptureCallback>
 800520a:	e005      	b.n	8005218 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f9c9 	bl	80055a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f9da 	bl	80055cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d020      	beq.n	800526a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d01b      	beq.n	800526a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f06f 0208 	mvn.w	r2, #8
 800523a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2204      	movs	r2, #4
 8005240:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f003 0303 	and.w	r3, r3, #3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f9b1 	bl	80055b8 <HAL_TIM_IC_CaptureCallback>
 8005256:	e005      	b.n	8005264 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f9a3 	bl	80055a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f9b4 	bl	80055cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	d020      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01b      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f06f 0210 	mvn.w	r2, #16
 8005286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2208      	movs	r2, #8
 800528c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f98b 	bl	80055b8 <HAL_TIM_IC_CaptureCallback>
 80052a2:	e005      	b.n	80052b0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f97d 	bl	80055a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f98e 	bl	80055cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00c      	beq.n	80052da <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f06f 0201 	mvn.w	r2, #1
 80052d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7fb fead 	bl	8001034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00c      	beq.n	8005308 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fd84 	bl	8005e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fd7c 	bl	8005e24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00c      	beq.n	8005350 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f948 	bl	80055e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00c      	beq.n	8005374 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0220 	mvn.w	r2, #32
 800536c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fd44 	bl	8005dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005396:	2302      	movs	r3, #2
 8005398:	e0ff      	b.n	800559a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b14      	cmp	r3, #20
 80053a6:	f200 80f0 	bhi.w	800558a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053aa:	a201      	add	r2, pc, #4	@ (adr r2, 80053b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	08005405 	.word	0x08005405
 80053b4:	0800558b 	.word	0x0800558b
 80053b8:	0800558b 	.word	0x0800558b
 80053bc:	0800558b 	.word	0x0800558b
 80053c0:	08005445 	.word	0x08005445
 80053c4:	0800558b 	.word	0x0800558b
 80053c8:	0800558b 	.word	0x0800558b
 80053cc:	0800558b 	.word	0x0800558b
 80053d0:	08005487 	.word	0x08005487
 80053d4:	0800558b 	.word	0x0800558b
 80053d8:	0800558b 	.word	0x0800558b
 80053dc:	0800558b 	.word	0x0800558b
 80053e0:	080054c7 	.word	0x080054c7
 80053e4:	0800558b 	.word	0x0800558b
 80053e8:	0800558b 	.word	0x0800558b
 80053ec:	0800558b 	.word	0x0800558b
 80053f0:	08005509 	.word	0x08005509
 80053f4:	0800558b 	.word	0x0800558b
 80053f8:	0800558b 	.word	0x0800558b
 80053fc:	0800558b 	.word	0x0800558b
 8005400:	08005549 	.word	0x08005549
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f998 	bl	8005740 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0208 	orr.w	r2, r2, #8
 800541e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0204 	bic.w	r2, r2, #4
 800542e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6999      	ldr	r1, [r3, #24]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	619a      	str	r2, [r3, #24]
      break;
 8005442:	e0a5      	b.n	8005590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fa08 	bl	8005860 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800545e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800546e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6999      	ldr	r1, [r3, #24]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	021a      	lsls	r2, r3, #8
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	619a      	str	r2, [r3, #24]
      break;
 8005484:	e084      	b.n	8005590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fa71 	bl	8005974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0208 	orr.w	r2, r2, #8
 80054a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0204 	bic.w	r2, r2, #4
 80054b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69d9      	ldr	r1, [r3, #28]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	61da      	str	r2, [r3, #28]
      break;
 80054c4:	e064      	b.n	8005590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fad9 	bl	8005a84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69d9      	ldr	r1, [r3, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	021a      	lsls	r2, r3, #8
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	61da      	str	r2, [r3, #28]
      break;
 8005506:	e043      	b.n	8005590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fb22 	bl	8005b58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0208 	orr.w	r2, r2, #8
 8005522:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0204 	bic.w	r2, r2, #4
 8005532:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005546:	e023      	b.n	8005590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fb66 	bl	8005c20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005562:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005572:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	021a      	lsls	r2, r3, #8
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005588:	e002      	b.n	8005590 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	75fb      	strb	r3, [r7, #23]
      break;
 800558e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005598:	7dfb      	ldrb	r3, [r7, #23]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop

080055a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a46      	ldr	r2, [pc, #280]	@ (8005720 <TIM_Base_SetConfig+0x12c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d013      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005612:	d00f      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a43      	ldr	r2, [pc, #268]	@ (8005724 <TIM_Base_SetConfig+0x130>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d00b      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a42      	ldr	r2, [pc, #264]	@ (8005728 <TIM_Base_SetConfig+0x134>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d007      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a41      	ldr	r2, [pc, #260]	@ (800572c <TIM_Base_SetConfig+0x138>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a40      	ldr	r2, [pc, #256]	@ (8005730 <TIM_Base_SetConfig+0x13c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d108      	bne.n	8005646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a35      	ldr	r2, [pc, #212]	@ (8005720 <TIM_Base_SetConfig+0x12c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01f      	beq.n	800568e <TIM_Base_SetConfig+0x9a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005654:	d01b      	beq.n	800568e <TIM_Base_SetConfig+0x9a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a32      	ldr	r2, [pc, #200]	@ (8005724 <TIM_Base_SetConfig+0x130>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d017      	beq.n	800568e <TIM_Base_SetConfig+0x9a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a31      	ldr	r2, [pc, #196]	@ (8005728 <TIM_Base_SetConfig+0x134>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d013      	beq.n	800568e <TIM_Base_SetConfig+0x9a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a30      	ldr	r2, [pc, #192]	@ (800572c <TIM_Base_SetConfig+0x138>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00f      	beq.n	800568e <TIM_Base_SetConfig+0x9a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a2f      	ldr	r2, [pc, #188]	@ (8005730 <TIM_Base_SetConfig+0x13c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00b      	beq.n	800568e <TIM_Base_SetConfig+0x9a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a2e      	ldr	r2, [pc, #184]	@ (8005734 <TIM_Base_SetConfig+0x140>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d007      	beq.n	800568e <TIM_Base_SetConfig+0x9a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a2d      	ldr	r2, [pc, #180]	@ (8005738 <TIM_Base_SetConfig+0x144>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d003      	beq.n	800568e <TIM_Base_SetConfig+0x9a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2c      	ldr	r2, [pc, #176]	@ (800573c <TIM_Base_SetConfig+0x148>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d108      	bne.n	80056a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a16      	ldr	r2, [pc, #88]	@ (8005720 <TIM_Base_SetConfig+0x12c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00f      	beq.n	80056ec <TIM_Base_SetConfig+0xf8>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a18      	ldr	r2, [pc, #96]	@ (8005730 <TIM_Base_SetConfig+0x13c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00b      	beq.n	80056ec <TIM_Base_SetConfig+0xf8>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a17      	ldr	r2, [pc, #92]	@ (8005734 <TIM_Base_SetConfig+0x140>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d007      	beq.n	80056ec <TIM_Base_SetConfig+0xf8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a16      	ldr	r2, [pc, #88]	@ (8005738 <TIM_Base_SetConfig+0x144>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_Base_SetConfig+0xf8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a15      	ldr	r2, [pc, #84]	@ (800573c <TIM_Base_SetConfig+0x148>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d103      	bne.n	80056f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b01      	cmp	r3, #1
 8005704:	d105      	bne.n	8005712 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f023 0201 	bic.w	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	611a      	str	r2, [r3, #16]
  }
}
 8005712:	bf00      	nop
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40012c00 	.word	0x40012c00
 8005724:	40000400 	.word	0x40000400
 8005728:	40000800 	.word	0x40000800
 800572c:	40000c00 	.word	0x40000c00
 8005730:	40013400 	.word	0x40013400
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800

08005740 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f023 0201 	bic.w	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800576e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f023 0302 	bic.w	r3, r3, #2
 800578c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a2c      	ldr	r2, [pc, #176]	@ (800584c <TIM_OC1_SetConfig+0x10c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00f      	beq.n	80057c0 <TIM_OC1_SetConfig+0x80>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005850 <TIM_OC1_SetConfig+0x110>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00b      	beq.n	80057c0 <TIM_OC1_SetConfig+0x80>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005854 <TIM_OC1_SetConfig+0x114>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_OC1_SetConfig+0x80>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a29      	ldr	r2, [pc, #164]	@ (8005858 <TIM_OC1_SetConfig+0x118>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_OC1_SetConfig+0x80>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a28      	ldr	r2, [pc, #160]	@ (800585c <TIM_OC1_SetConfig+0x11c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10c      	bne.n	80057da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 0308 	bic.w	r3, r3, #8
 80057c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f023 0304 	bic.w	r3, r3, #4
 80057d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a1b      	ldr	r2, [pc, #108]	@ (800584c <TIM_OC1_SetConfig+0x10c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00f      	beq.n	8005802 <TIM_OC1_SetConfig+0xc2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005850 <TIM_OC1_SetConfig+0x110>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00b      	beq.n	8005802 <TIM_OC1_SetConfig+0xc2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a19      	ldr	r2, [pc, #100]	@ (8005854 <TIM_OC1_SetConfig+0x114>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d007      	beq.n	8005802 <TIM_OC1_SetConfig+0xc2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a18      	ldr	r2, [pc, #96]	@ (8005858 <TIM_OC1_SetConfig+0x118>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d003      	beq.n	8005802 <TIM_OC1_SetConfig+0xc2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a17      	ldr	r2, [pc, #92]	@ (800585c <TIM_OC1_SetConfig+0x11c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d111      	bne.n	8005826 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	621a      	str	r2, [r3, #32]
}
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	40012c00 	.word	0x40012c00
 8005850:	40013400 	.word	0x40013400
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800

08005860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	f023 0210 	bic.w	r2, r3, #16
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800588e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0320 	bic.w	r3, r3, #32
 80058ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a28      	ldr	r2, [pc, #160]	@ (8005960 <TIM_OC2_SetConfig+0x100>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_OC2_SetConfig+0x6c>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a27      	ldr	r2, [pc, #156]	@ (8005964 <TIM_OC2_SetConfig+0x104>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d10d      	bne.n	80058e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005960 <TIM_OC2_SetConfig+0x100>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00f      	beq.n	8005910 <TIM_OC2_SetConfig+0xb0>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005964 <TIM_OC2_SetConfig+0x104>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00b      	beq.n	8005910 <TIM_OC2_SetConfig+0xb0>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005968 <TIM_OC2_SetConfig+0x108>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <TIM_OC2_SetConfig+0xb0>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a1a      	ldr	r2, [pc, #104]	@ (800596c <TIM_OC2_SetConfig+0x10c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_OC2_SetConfig+0xb0>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a19      	ldr	r2, [pc, #100]	@ (8005970 <TIM_OC2_SetConfig+0x110>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d113      	bne.n	8005938 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800591e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40012c00 	.word	0x40012c00
 8005964:	40013400 	.word	0x40013400
 8005968:	40014000 	.word	0x40014000
 800596c:	40014400 	.word	0x40014400
 8005970:	40014800 	.word	0x40014800

08005974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0303 	bic.w	r3, r3, #3
 80059ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a27      	ldr	r2, [pc, #156]	@ (8005a70 <TIM_OC3_SetConfig+0xfc>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_OC3_SetConfig+0x6a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a26      	ldr	r2, [pc, #152]	@ (8005a74 <TIM_OC3_SetConfig+0x100>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d10d      	bne.n	80059fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005a70 <TIM_OC3_SetConfig+0xfc>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00f      	beq.n	8005a22 <TIM_OC3_SetConfig+0xae>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	@ (8005a74 <TIM_OC3_SetConfig+0x100>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <TIM_OC3_SetConfig+0xae>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a78 <TIM_OC3_SetConfig+0x104>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <TIM_OC3_SetConfig+0xae>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a19      	ldr	r2, [pc, #100]	@ (8005a7c <TIM_OC3_SetConfig+0x108>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_OC3_SetConfig+0xae>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a18      	ldr	r2, [pc, #96]	@ (8005a80 <TIM_OC3_SetConfig+0x10c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d113      	bne.n	8005a4a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	621a      	str	r2, [r3, #32]
}
 8005a64:	bf00      	nop
 8005a66:	371c      	adds	r7, #28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	40012c00 	.word	0x40012c00
 8005a74:	40013400 	.word	0x40013400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400
 8005a80:	40014800 	.word	0x40014800

08005a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	031b      	lsls	r3, r3, #12
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a18      	ldr	r2, [pc, #96]	@ (8005b44 <TIM_OC4_SetConfig+0xc0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00f      	beq.n	8005b08 <TIM_OC4_SetConfig+0x84>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a17      	ldr	r2, [pc, #92]	@ (8005b48 <TIM_OC4_SetConfig+0xc4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d00b      	beq.n	8005b08 <TIM_OC4_SetConfig+0x84>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a16      	ldr	r2, [pc, #88]	@ (8005b4c <TIM_OC4_SetConfig+0xc8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d007      	beq.n	8005b08 <TIM_OC4_SetConfig+0x84>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a15      	ldr	r2, [pc, #84]	@ (8005b50 <TIM_OC4_SetConfig+0xcc>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d003      	beq.n	8005b08 <TIM_OC4_SetConfig+0x84>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a14      	ldr	r2, [pc, #80]	@ (8005b54 <TIM_OC4_SetConfig+0xd0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d109      	bne.n	8005b1c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	019b      	lsls	r3, r3, #6
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	40013400 	.word	0x40013400
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40014400 	.word	0x40014400
 8005b54:	40014800 	.word	0x40014800

08005b58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	041b      	lsls	r3, r3, #16
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a17      	ldr	r2, [pc, #92]	@ (8005c0c <TIM_OC5_SetConfig+0xb4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00f      	beq.n	8005bd2 <TIM_OC5_SetConfig+0x7a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a16      	ldr	r2, [pc, #88]	@ (8005c10 <TIM_OC5_SetConfig+0xb8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00b      	beq.n	8005bd2 <TIM_OC5_SetConfig+0x7a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a15      	ldr	r2, [pc, #84]	@ (8005c14 <TIM_OC5_SetConfig+0xbc>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d007      	beq.n	8005bd2 <TIM_OC5_SetConfig+0x7a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a14      	ldr	r2, [pc, #80]	@ (8005c18 <TIM_OC5_SetConfig+0xc0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d003      	beq.n	8005bd2 <TIM_OC5_SetConfig+0x7a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a13      	ldr	r2, [pc, #76]	@ (8005c1c <TIM_OC5_SetConfig+0xc4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d109      	bne.n	8005be6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	621a      	str	r2, [r3, #32]
}
 8005c00:	bf00      	nop
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	40012c00 	.word	0x40012c00
 8005c10:	40013400 	.word	0x40013400
 8005c14:	40014000 	.word	0x40014000
 8005c18:	40014400 	.word	0x40014400
 8005c1c:	40014800 	.word	0x40014800

08005c20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	051b      	lsls	r3, r3, #20
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a18      	ldr	r2, [pc, #96]	@ (8005cd8 <TIM_OC6_SetConfig+0xb8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00f      	beq.n	8005c9c <TIM_OC6_SetConfig+0x7c>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a17      	ldr	r2, [pc, #92]	@ (8005cdc <TIM_OC6_SetConfig+0xbc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00b      	beq.n	8005c9c <TIM_OC6_SetConfig+0x7c>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a16      	ldr	r2, [pc, #88]	@ (8005ce0 <TIM_OC6_SetConfig+0xc0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d007      	beq.n	8005c9c <TIM_OC6_SetConfig+0x7c>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a15      	ldr	r2, [pc, #84]	@ (8005ce4 <TIM_OC6_SetConfig+0xc4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_OC6_SetConfig+0x7c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a14      	ldr	r2, [pc, #80]	@ (8005ce8 <TIM_OC6_SetConfig+0xc8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d109      	bne.n	8005cb0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	029b      	lsls	r3, r3, #10
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40012c00 	.word	0x40012c00
 8005cdc:	40013400 	.word	0x40013400
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40014400 	.word	0x40014400
 8005ce8:	40014800 	.word	0x40014800

08005cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d101      	bne.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e068      	b.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a2e      	ldr	r2, [pc, #184]	@ (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a2d      	ldr	r2, [pc, #180]	@ (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d108      	bne.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1e      	ldr	r2, [pc, #120]	@ (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d01d      	beq.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d76:	d018      	beq.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1a      	ldr	r2, [pc, #104]	@ (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00e      	beq.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a18      	ldr	r2, [pc, #96]	@ (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d009      	beq.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a13      	ldr	r2, [pc, #76]	@ (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d004      	beq.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a14      	ldr	r2, [pc, #80]	@ (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d10c      	bne.n	8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40012c00 	.word	0x40012c00
 8005de8:	40013400 	.word	0x40013400
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800
 8005df4:	40000c00 	.word	0x40000c00
 8005df8:	40014000 	.word	0x40014000

08005dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e38:	b084      	sub	sp, #16
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	f107 001c 	add.w	r0, r7, #28
 8005e46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f8e6 	bl	8006028 <USB_CoreReset>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005e60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e74:	e005      	b.n	8005e82 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e8e:	b004      	add	sp, #16
 8005e90:	4770      	bx	lr

08005e92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f023 0201 	bic.w	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d115      	bne.n	8005f02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ee2:	200a      	movs	r0, #10
 8005ee4:	f7fb fcb4 	bl	8001850 <HAL_Delay>
      ms += 10U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	330a      	adds	r3, #10
 8005eec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f88c 	bl	800600c <USB_GetMode>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d01e      	beq.n	8005f38 <USB_SetCurrentMode+0x84>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005efe:	d9f0      	bls.n	8005ee2 <USB_SetCurrentMode+0x2e>
 8005f00:	e01a      	b.n	8005f38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d115      	bne.n	8005f34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f14:	200a      	movs	r0, #10
 8005f16:	f7fb fc9b 	bl	8001850 <HAL_Delay>
      ms += 10U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	330a      	adds	r3, #10
 8005f1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f873 	bl	800600c <USB_GetMode>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <USB_SetCurrentMode+0x84>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f30:	d9f0      	bls.n	8005f14 <USB_SetCurrentMode+0x60>
 8005f32:	e001      	b.n	8005f38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e005      	b.n	8005f44 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2bc8      	cmp	r3, #200	@ 0xc8
 8005f3c:	d101      	bne.n	8005f42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f66:	d901      	bls.n	8005f6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e01b      	b.n	8005fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	daf2      	bge.n	8005f5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	019b      	lsls	r3, r3, #6
 8005f7c:	f043 0220 	orr.w	r2, r3, #32
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3301      	adds	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f90:	d901      	bls.n	8005f96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e006      	b.n	8005fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d0f0      	beq.n	8005f84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fc8:	d901      	bls.n	8005fce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e018      	b.n	8006000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	daf2      	bge.n	8005fbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2210      	movs	r2, #16
 8005fde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fec:	d901      	bls.n	8005ff2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e006      	b.n	8006000 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d0f0      	beq.n	8005fe0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	f003 0301 	and.w	r3, r3, #1
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006040:	d901      	bls.n	8006046 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e01b      	b.n	800607e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	daf2      	bge.n	8006034 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f043 0201 	orr.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800606a:	d901      	bls.n	8006070 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e006      	b.n	800607e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d0f0      	beq.n	800605e <USB_CoreReset+0x36>

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
	...

0800608c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800608c:	b084      	sub	sp, #16
 800608e:	b580      	push	{r7, lr}
 8006090:	b086      	sub	sp, #24
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800609a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060ac:	461a      	mov	r2, r3
 80060ae:	2300      	movs	r3, #0
 80060b0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80060d8:	f023 0304 	bic.w	r3, r3, #4
 80060dc:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060de:	2110      	movs	r1, #16
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff ff33 	bl	8005f4c <USB_FlushTxFifo>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff ff5d 	bl	8005fb0 <USB_FlushRxFifo>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006100:	2300      	movs	r3, #0
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	e015      	b.n	8006132 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006112:	461a      	mov	r2, r3
 8006114:	f04f 33ff 	mov.w	r3, #4294967295
 8006118:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006126:	461a      	mov	r2, r3
 8006128:	2300      	movs	r3, #0
 800612a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	3301      	adds	r3, #1
 8006130:	613b      	str	r3, [r7, #16]
 8006132:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006136:	461a      	mov	r2, r3
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	4293      	cmp	r3, r2
 800613c:	d3e3      	bcc.n	8006106 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f04f 32ff 	mov.w	r2, #4294967295
 800614a:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2280      	movs	r2, #128	@ 0x80
 8006150:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a0c      	ldr	r2, [pc, #48]	@ (8006188 <USB_HostInit+0xfc>)
 8006156:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a0c      	ldr	r2, [pc, #48]	@ (800618c <USB_HostInit+0x100>)
 800615c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	f043 0210 	orr.w	r2, r3, #16
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699a      	ldr	r2, [r3, #24]
 8006170:	4b07      	ldr	r3, [pc, #28]	@ (8006190 <USB_HostInit+0x104>)
 8006172:	4313      	orrs	r3, r2
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006178:	7dfb      	ldrb	r3, [r7, #23]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006184:	b004      	add	sp, #16
 8006186:	4770      	bx	lr
 8006188:	00600080 	.word	0x00600080
 800618c:	004000e0 	.word	0x004000e0
 8006190:	a3200008 	.word	0xa3200008

08006194 <__NVIC_SetPriority>:
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	6039      	str	r1, [r7, #0]
 800619e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	db0a      	blt.n	80061be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	490c      	ldr	r1, [pc, #48]	@ (80061e0 <__NVIC_SetPriority+0x4c>)
 80061ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061b2:	0112      	lsls	r2, r2, #4
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	440b      	add	r3, r1
 80061b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80061bc:	e00a      	b.n	80061d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	4908      	ldr	r1, [pc, #32]	@ (80061e4 <__NVIC_SetPriority+0x50>)
 80061c4:	79fb      	ldrb	r3, [r7, #7]
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	3b04      	subs	r3, #4
 80061cc:	0112      	lsls	r2, r2, #4
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	440b      	add	r3, r1
 80061d2:	761a      	strb	r2, [r3, #24]
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	e000e100 	.word	0xe000e100
 80061e4:	e000ed00 	.word	0xe000ed00

080061e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80061ec:	4b05      	ldr	r3, [pc, #20]	@ (8006204 <SysTick_Handler+0x1c>)
 80061ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80061f0:	f001 fd46 	bl	8007c80 <xTaskGetSchedulerState>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d001      	beq.n	80061fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80061fa:	f002 fb3d 	bl	8008878 <xPortSysTickHandler>
  }
}
 80061fe:	bf00      	nop
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	e000e010 	.word	0xe000e010

08006208 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006208:	b580      	push	{r7, lr}
 800620a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800620c:	2100      	movs	r1, #0
 800620e:	f06f 0004 	mvn.w	r0, #4
 8006212:	f7ff ffbf 	bl	8006194 <__NVIC_SetPriority>
#endif
}
 8006216:	bf00      	nop
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006222:	f3ef 8305 	mrs	r3, IPSR
 8006226:	603b      	str	r3, [r7, #0]
  return(result);
 8006228:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800622e:	f06f 0305 	mvn.w	r3, #5
 8006232:	607b      	str	r3, [r7, #4]
 8006234:	e00c      	b.n	8006250 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006236:	4b0a      	ldr	r3, [pc, #40]	@ (8006260 <osKernelInitialize+0x44>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d105      	bne.n	800624a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800623e:	4b08      	ldr	r3, [pc, #32]	@ (8006260 <osKernelInitialize+0x44>)
 8006240:	2201      	movs	r2, #1
 8006242:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006244:	2300      	movs	r3, #0
 8006246:	607b      	str	r3, [r7, #4]
 8006248:	e002      	b.n	8006250 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800624a:	f04f 33ff 	mov.w	r3, #4294967295
 800624e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006250:	687b      	ldr	r3, [r7, #4]
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	20000620 	.word	0x20000620

08006264 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800626a:	f3ef 8305 	mrs	r3, IPSR
 800626e:	603b      	str	r3, [r7, #0]
  return(result);
 8006270:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006276:	f06f 0305 	mvn.w	r3, #5
 800627a:	607b      	str	r3, [r7, #4]
 800627c:	e010      	b.n	80062a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800627e:	4b0b      	ldr	r3, [pc, #44]	@ (80062ac <osKernelStart+0x48>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d109      	bne.n	800629a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006286:	f7ff ffbf 	bl	8006208 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800628a:	4b08      	ldr	r3, [pc, #32]	@ (80062ac <osKernelStart+0x48>)
 800628c:	2202      	movs	r2, #2
 800628e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006290:	f001 f892 	bl	80073b8 <vTaskStartScheduler>
      stat = osOK;
 8006294:	2300      	movs	r3, #0
 8006296:	607b      	str	r3, [r7, #4]
 8006298:	e002      	b.n	80062a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800629a:	f04f 33ff 	mov.w	r3, #4294967295
 800629e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062a0:	687b      	ldr	r3, [r7, #4]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000620 	.word	0x20000620

080062b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08e      	sub	sp, #56	@ 0x38
 80062b4:	af04      	add	r7, sp, #16
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062bc:	2300      	movs	r3, #0
 80062be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c0:	f3ef 8305 	mrs	r3, IPSR
 80062c4:	617b      	str	r3, [r7, #20]
  return(result);
 80062c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d17e      	bne.n	80063ca <osThreadNew+0x11a>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d07b      	beq.n	80063ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80062d2:	2380      	movs	r3, #128	@ 0x80
 80062d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80062d6:	2318      	movs	r3, #24
 80062d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80062de:	f04f 33ff 	mov.w	r3, #4294967295
 80062e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d045      	beq.n	8006376 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <osThreadNew+0x48>
        name = attr->name;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <osThreadNew+0x6e>
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	2b38      	cmp	r3, #56	@ 0x38
 8006310:	d805      	bhi.n	800631e <osThreadNew+0x6e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <osThreadNew+0x72>
        return (NULL);
 800631e:	2300      	movs	r3, #0
 8006320:	e054      	b.n	80063cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	089b      	lsrs	r3, r3, #2
 8006330:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00e      	beq.n	8006358 <osThreadNew+0xa8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	2ba7      	cmp	r3, #167	@ 0xa7
 8006340:	d90a      	bls.n	8006358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006346:	2b00      	cmp	r3, #0
 8006348:	d006      	beq.n	8006358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <osThreadNew+0xa8>
        mem = 1;
 8006352:	2301      	movs	r3, #1
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	e010      	b.n	800637a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10c      	bne.n	800637a <osThreadNew+0xca>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d108      	bne.n	800637a <osThreadNew+0xca>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <osThreadNew+0xca>
          mem = 0;
 8006370:	2300      	movs	r3, #0
 8006372:	61bb      	str	r3, [r7, #24]
 8006374:	e001      	b.n	800637a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d110      	bne.n	80063a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006388:	9202      	str	r2, [sp, #8]
 800638a:	9301      	str	r3, [sp, #4]
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	6a3a      	ldr	r2, [r7, #32]
 8006394:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fe1a 	bl	8006fd0 <xTaskCreateStatic>
 800639c:	4603      	mov	r3, r0
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	e013      	b.n	80063ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d110      	bne.n	80063ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	f107 0310 	add.w	r3, r7, #16
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 fe68 	bl	8007090 <xTaskCreate>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d001      	beq.n	80063ca <osThreadNew+0x11a>
            hTask = NULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063ca:	693b      	ldr	r3, [r7, #16]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3728      	adds	r7, #40	@ 0x28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063dc:	f3ef 8305 	mrs	r3, IPSR
 80063e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80063e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <osDelay+0x1c>
    stat = osErrorISR;
 80063e8:	f06f 0305 	mvn.w	r3, #5
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	e007      	b.n	8006400 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <osDelay+0x2c>
      vTaskDelay(ticks);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 ffa6 	bl	800734c <vTaskDelay>
    }
  }

  return (stat);
 8006400:	68fb      	ldr	r3, [r7, #12]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4a07      	ldr	r2, [pc, #28]	@ (8006438 <vApplicationGetIdleTaskMemory+0x2c>)
 800641c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	4a06      	ldr	r2, [pc, #24]	@ (800643c <vApplicationGetIdleTaskMemory+0x30>)
 8006422:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2280      	movs	r2, #128	@ 0x80
 8006428:	601a      	str	r2, [r3, #0]
}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	20000624 	.word	0x20000624
 800643c:	200006cc 	.word	0x200006cc

08006440 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4a07      	ldr	r2, [pc, #28]	@ (800646c <vApplicationGetTimerTaskMemory+0x2c>)
 8006450:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4a06      	ldr	r2, [pc, #24]	@ (8006470 <vApplicationGetTimerTaskMemory+0x30>)
 8006456:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800645e:	601a      	str	r2, [r3, #0]
}
 8006460:	bf00      	nop
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	200008cc 	.word	0x200008cc
 8006470:	20000974 	.word	0x20000974

08006474 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f103 0208 	add.w	r2, r3, #8
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f04f 32ff 	mov.w	r2, #4294967295
 800648c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f103 0208 	add.w	r2, r3, #8
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f103 0208 	add.w	r2, r3, #8
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	601a      	str	r2, [r3, #0]
}
 800650a:	bf00      	nop
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d103      	bne.n	8006536 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	e00c      	b.n	8006550 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3308      	adds	r3, #8
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e002      	b.n	8006544 <vListInsert+0x2e>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	429a      	cmp	r2, r3
 800654e:	d2f6      	bcs.n	800653e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	601a      	str	r2, [r3, #0]
}
 800657c:	bf00      	nop
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6892      	ldr	r2, [r2, #8]
 800659e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6852      	ldr	r2, [r2, #4]
 80065a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d103      	bne.n	80065bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	1e5a      	subs	r2, r3, #1
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10b      	bne.n	8006608 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	e7fd      	b.n	8006604 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006608:	f002 f8a6 	bl	8008758 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006614:	68f9      	ldr	r1, [r7, #12]
 8006616:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006618:	fb01 f303 	mul.w	r3, r1, r3
 800661c:	441a      	add	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006638:	3b01      	subs	r3, #1
 800663a:	68f9      	ldr	r1, [r7, #12]
 800663c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800663e:	fb01 f303 	mul.w	r3, r1, r3
 8006642:	441a      	add	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	22ff      	movs	r2, #255	@ 0xff
 800664c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	22ff      	movs	r2, #255	@ 0xff
 8006654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d114      	bne.n	8006688 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01a      	beq.n	800669c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3310      	adds	r3, #16
 800666a:	4618      	mov	r0, r3
 800666c:	f001 f942 	bl	80078f4 <xTaskRemoveFromEventList>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d012      	beq.n	800669c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006676:	4b0d      	ldr	r3, [pc, #52]	@ (80066ac <xQueueGenericReset+0xd0>)
 8006678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	e009      	b.n	800669c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3310      	adds	r3, #16
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff fef1 	bl	8006474 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3324      	adds	r3, #36	@ 0x24
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff feec 	bl	8006474 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800669c:	f002 f88e 	bl	80087bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066a0:	2301      	movs	r3, #1
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08e      	sub	sp, #56	@ 0x38
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10b      	bne.n	80066dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
 80066da:	e7fd      	b.n	80066d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	e7fd      	b.n	80066f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <xQueueGenericCreateStatic+0x56>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <xQueueGenericCreateStatic+0x5a>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <xQueueGenericCreateStatic+0x5c>
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10b      	bne.n	8006728 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	623b      	str	r3, [r7, #32]
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	e7fd      	b.n	8006724 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d102      	bne.n	8006734 <xQueueGenericCreateStatic+0x84>
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <xQueueGenericCreateStatic+0x88>
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <xQueueGenericCreateStatic+0x8a>
 8006738:	2300      	movs	r3, #0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10b      	bne.n	8006756 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	61fb      	str	r3, [r7, #28]
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	e7fd      	b.n	8006752 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006756:	2350      	movs	r3, #80	@ 0x50
 8006758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b50      	cmp	r3, #80	@ 0x50
 800675e:	d00b      	beq.n	8006778 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	61bb      	str	r3, [r7, #24]
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006778:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800677e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00d      	beq.n	80067a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800678c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	4613      	mov	r3, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f805 	bl	80067aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3730      	adds	r7, #48	@ 0x30
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	60b9      	str	r1, [r7, #8]
 80067b4:	607a      	str	r2, [r7, #4]
 80067b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d103      	bne.n	80067c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	e002      	b.n	80067cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067d8:	2101      	movs	r1, #1
 80067da:	69b8      	ldr	r0, [r7, #24]
 80067dc:	f7ff fefe 	bl	80065dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	78fa      	ldrb	r2, [r7, #3]
 80067e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067e8:	bf00      	nop
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08e      	sub	sp, #56	@ 0x38
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067fe:	2300      	movs	r3, #0
 8006800:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10b      	bne.n	8006824 <xQueueGenericSend+0x34>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800681e:	bf00      	nop
 8006820:	bf00      	nop
 8006822:	e7fd      	b.n	8006820 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d103      	bne.n	8006832 <xQueueGenericSend+0x42>
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <xQueueGenericSend+0x46>
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <xQueueGenericSend+0x48>
 8006836:	2300      	movs	r3, #0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10b      	bne.n	8006854 <xQueueGenericSend+0x64>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800684e:	bf00      	nop
 8006850:	bf00      	nop
 8006852:	e7fd      	b.n	8006850 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b02      	cmp	r3, #2
 8006858:	d103      	bne.n	8006862 <xQueueGenericSend+0x72>
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800685e:	2b01      	cmp	r3, #1
 8006860:	d101      	bne.n	8006866 <xQueueGenericSend+0x76>
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <xQueueGenericSend+0x78>
 8006866:	2300      	movs	r3, #0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10b      	bne.n	8006884 <xQueueGenericSend+0x94>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	623b      	str	r3, [r7, #32]
}
 800687e:	bf00      	nop
 8006880:	bf00      	nop
 8006882:	e7fd      	b.n	8006880 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006884:	f001 f9fc 	bl	8007c80 <xTaskGetSchedulerState>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d102      	bne.n	8006894 <xQueueGenericSend+0xa4>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <xQueueGenericSend+0xa8>
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <xQueueGenericSend+0xaa>
 8006898:	2300      	movs	r3, #0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	61fb      	str	r3, [r7, #28]
}
 80068b0:	bf00      	nop
 80068b2:	bf00      	nop
 80068b4:	e7fd      	b.n	80068b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068b6:	f001 ff4f 	bl	8008758 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d302      	bcc.n	80068cc <xQueueGenericSend+0xdc>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d129      	bne.n	8006920 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	68b9      	ldr	r1, [r7, #8]
 80068d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068d2:	f000 fa0f 	bl	8006cf4 <prvCopyDataToQueue>
 80068d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d010      	beq.n	8006902 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e2:	3324      	adds	r3, #36	@ 0x24
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 f805 	bl	80078f4 <xTaskRemoveFromEventList>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d013      	beq.n	8006918 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068f0:	4b3f      	ldr	r3, [pc, #252]	@ (80069f0 <xQueueGenericSend+0x200>)
 80068f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	e00a      	b.n	8006918 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d007      	beq.n	8006918 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006908:	4b39      	ldr	r3, [pc, #228]	@ (80069f0 <xQueueGenericSend+0x200>)
 800690a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006918:	f001 ff50 	bl	80087bc <vPortExitCritical>
				return pdPASS;
 800691c:	2301      	movs	r3, #1
 800691e:	e063      	b.n	80069e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d103      	bne.n	800692e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006926:	f001 ff49 	bl	80087bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800692a:	2300      	movs	r3, #0
 800692c:	e05c      	b.n	80069e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800692e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006930:	2b00      	cmp	r3, #0
 8006932:	d106      	bne.n	8006942 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006934:	f107 0314 	add.w	r3, r7, #20
 8006938:	4618      	mov	r0, r3
 800693a:	f001 f83f 	bl	80079bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800693e:	2301      	movs	r3, #1
 8006940:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006942:	f001 ff3b 	bl	80087bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006946:	f000 fda7 	bl	8007498 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800694a:	f001 ff05 	bl	8008758 <vPortEnterCritical>
 800694e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006950:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006954:	b25b      	sxtb	r3, r3
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d103      	bne.n	8006964 <xQueueGenericSend+0x174>
 800695c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006966:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800696a:	b25b      	sxtb	r3, r3
 800696c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006970:	d103      	bne.n	800697a <xQueueGenericSend+0x18a>
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800697a:	f001 ff1f 	bl	80087bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800697e:	1d3a      	adds	r2, r7, #4
 8006980:	f107 0314 	add.w	r3, r7, #20
 8006984:	4611      	mov	r1, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f001 f82e 	bl	80079e8 <xTaskCheckForTimeOut>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d124      	bne.n	80069dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006992:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006994:	f000 faa6 	bl	8006ee4 <prvIsQueueFull>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d018      	beq.n	80069d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800699e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a0:	3310      	adds	r3, #16
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	4611      	mov	r1, r2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 ff52 	bl	8007850 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069ae:	f000 fa31 	bl	8006e14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069b2:	f000 fd7f 	bl	80074b4 <xTaskResumeAll>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f47f af7c 	bne.w	80068b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80069be:	4b0c      	ldr	r3, [pc, #48]	@ (80069f0 <xQueueGenericSend+0x200>)
 80069c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	e772      	b.n	80068b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069d2:	f000 fa1f 	bl	8006e14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069d6:	f000 fd6d 	bl	80074b4 <xTaskResumeAll>
 80069da:	e76c      	b.n	80068b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069de:	f000 fa19 	bl	8006e14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069e2:	f000 fd67 	bl	80074b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3738      	adds	r7, #56	@ 0x38
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	e000ed04 	.word	0xe000ed04

080069f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b090      	sub	sp, #64	@ 0x40
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10b      	bne.n	8006a24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a1e:	bf00      	nop
 8006a20:	bf00      	nop
 8006a22:	e7fd      	b.n	8006a20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d103      	bne.n	8006a32 <xQueueGenericSendFromISR+0x3e>
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <xQueueGenericSendFromISR+0x42>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <xQueueGenericSendFromISR+0x44>
 8006a36:	2300      	movs	r3, #0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10b      	bne.n	8006a54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	e7fd      	b.n	8006a50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d103      	bne.n	8006a62 <xQueueGenericSendFromISR+0x6e>
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d101      	bne.n	8006a66 <xQueueGenericSendFromISR+0x72>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e000      	b.n	8006a68 <xQueueGenericSendFromISR+0x74>
 8006a66:	2300      	movs	r3, #0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10b      	bne.n	8006a84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	623b      	str	r3, [r7, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	e7fd      	b.n	8006a80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a84:	f001 ff48 	bl	8008918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a88:	f3ef 8211 	mrs	r2, BASEPRI
 8006a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	61fa      	str	r2, [r7, #28]
 8006a9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006aa0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aa2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d302      	bcc.n	8006ab6 <xQueueGenericSendFromISR+0xc2>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d12f      	bne.n	8006b16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006abc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006acc:	f000 f912 	bl	8006cf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ad0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d112      	bne.n	8006b00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d016      	beq.n	8006b10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	3324      	adds	r3, #36	@ 0x24
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 ff04 	bl	80078f4 <xTaskRemoveFromEventList>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00e      	beq.n	8006b10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00b      	beq.n	8006b10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	e007      	b.n	8006b10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b04:	3301      	adds	r3, #1
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	b25a      	sxtb	r2, r3
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b10:	2301      	movs	r3, #1
 8006b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006b14:	e001      	b.n	8006b1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3740      	adds	r7, #64	@ 0x40
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08c      	sub	sp, #48	@ 0x30
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <xQueueReceive+0x32>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	623b      	str	r3, [r7, #32]
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	e7fd      	b.n	8006b5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d103      	bne.n	8006b70 <xQueueReceive+0x40>
 8006b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <xQueueReceive+0x44>
 8006b70:	2301      	movs	r3, #1
 8006b72:	e000      	b.n	8006b76 <xQueueReceive+0x46>
 8006b74:	2300      	movs	r3, #0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <xQueueReceive+0x62>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	61fb      	str	r3, [r7, #28]
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	e7fd      	b.n	8006b8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b92:	f001 f875 	bl	8007c80 <xTaskGetSchedulerState>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d102      	bne.n	8006ba2 <xQueueReceive+0x72>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <xQueueReceive+0x76>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <xQueueReceive+0x78>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10b      	bne.n	8006bc4 <xQueueReceive+0x94>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	61bb      	str	r3, [r7, #24]
}
 8006bbe:	bf00      	nop
 8006bc0:	bf00      	nop
 8006bc2:	e7fd      	b.n	8006bc0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bc4:	f001 fdc8 	bl	8008758 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bcc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01f      	beq.n	8006c14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bd4:	68b9      	ldr	r1, [r7, #8]
 8006bd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bd8:	f000 f8f6 	bl	8006dc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	1e5a      	subs	r2, r3, #1
 8006be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00f      	beq.n	8006c0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bee:	3310      	adds	r3, #16
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fe7f 	bl	80078f4 <xTaskRemoveFromEventList>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d007      	beq.n	8006c0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8006cf0 <xQueueReceive+0x1c0>)
 8006bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c0c:	f001 fdd6 	bl	80087bc <vPortExitCritical>
				return pdPASS;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e069      	b.n	8006ce8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d103      	bne.n	8006c22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c1a:	f001 fdcf 	bl	80087bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	e062      	b.n	8006ce8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d106      	bne.n	8006c36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c28:	f107 0310 	add.w	r3, r7, #16
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fec5 	bl	80079bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c32:	2301      	movs	r3, #1
 8006c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c36:	f001 fdc1 	bl	80087bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c3a:	f000 fc2d 	bl	8007498 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c3e:	f001 fd8b 	bl	8008758 <vPortEnterCritical>
 8006c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c48:	b25b      	sxtb	r3, r3
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4e:	d103      	bne.n	8006c58 <xQueueReceive+0x128>
 8006c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c5e:	b25b      	sxtb	r3, r3
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c64:	d103      	bne.n	8006c6e <xQueueReceive+0x13e>
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c6e:	f001 fda5 	bl	80087bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c72:	1d3a      	adds	r2, r7, #4
 8006c74:	f107 0310 	add.w	r3, r7, #16
 8006c78:	4611      	mov	r1, r2
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 feb4 	bl	80079e8 <xTaskCheckForTimeOut>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d123      	bne.n	8006cce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c88:	f000 f916 	bl	8006eb8 <prvIsQueueEmpty>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d017      	beq.n	8006cc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c94:	3324      	adds	r3, #36	@ 0x24
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	4611      	mov	r1, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fdd8 	bl	8007850 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ca2:	f000 f8b7 	bl	8006e14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ca6:	f000 fc05 	bl	80074b4 <xTaskResumeAll>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d189      	bne.n	8006bc4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf0 <xQueueReceive+0x1c0>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	e780      	b.n	8006bc4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cc4:	f000 f8a6 	bl	8006e14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cc8:	f000 fbf4 	bl	80074b4 <xTaskResumeAll>
 8006ccc:	e77a      	b.n	8006bc4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cd0:	f000 f8a0 	bl	8006e14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cd4:	f000 fbee 	bl	80074b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cda:	f000 f8ed 	bl	8006eb8 <prvIsQueueEmpty>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f43f af6f 	beq.w	8006bc4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ce6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3730      	adds	r7, #48	@ 0x30
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	e000ed04 	.word	0xe000ed04

08006cf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10d      	bne.n	8006d2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d14d      	bne.n	8006db6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 ffcc 	bl	8007cbc <xTaskPriorityDisinherit>
 8006d24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	609a      	str	r2, [r3, #8]
 8006d2c:	e043      	b.n	8006db6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d119      	bne.n	8006d68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6858      	ldr	r0, [r3, #4]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	f002 f89e 	bl	8008e80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4c:	441a      	add	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d32b      	bcc.n	8006db6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	605a      	str	r2, [r3, #4]
 8006d66:	e026      	b.n	8006db6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68d8      	ldr	r0, [r3, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d70:	461a      	mov	r2, r3
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	f002 f884 	bl	8008e80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d80:	425b      	negs	r3, r3
 8006d82:	441a      	add	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d207      	bcs.n	8006da4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9c:	425b      	negs	r3, r3
 8006d9e:	441a      	add	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d105      	bne.n	8006db6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006dbe:	697b      	ldr	r3, [r7, #20]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d018      	beq.n	8006e0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de2:	441a      	add	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d303      	bcc.n	8006dfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68d9      	ldr	r1, [r3, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e04:	461a      	mov	r2, r3
 8006e06:	6838      	ldr	r0, [r7, #0]
 8006e08:	f002 f83a 	bl	8008e80 <memcpy>
	}
}
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e1c:	f001 fc9c 	bl	8008758 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e28:	e011      	b.n	8006e4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d012      	beq.n	8006e58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	3324      	adds	r3, #36	@ 0x24
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 fd5c 	bl	80078f4 <xTaskRemoveFromEventList>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e42:	f000 fe35 	bl	8007ab0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	dce9      	bgt.n	8006e2a <prvUnlockQueue+0x16>
 8006e56:	e000      	b.n	8006e5a <prvUnlockQueue+0x46>
					break;
 8006e58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	22ff      	movs	r2, #255	@ 0xff
 8006e5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006e62:	f001 fcab 	bl	80087bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e66:	f001 fc77 	bl	8008758 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e72:	e011      	b.n	8006e98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d012      	beq.n	8006ea2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3310      	adds	r3, #16
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 fd37 	bl	80078f4 <xTaskRemoveFromEventList>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e8c:	f000 fe10 	bl	8007ab0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	dce9      	bgt.n	8006e74 <prvUnlockQueue+0x60>
 8006ea0:	e000      	b.n	8006ea4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ea2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	22ff      	movs	r2, #255	@ 0xff
 8006ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006eac:	f001 fc86 	bl	80087bc <vPortExitCritical>
}
 8006eb0:	bf00      	nop
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ec0:	f001 fc4a 	bl	8008758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	e001      	b.n	8006ed6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ed6:	f001 fc71 	bl	80087bc <vPortExitCritical>

	return xReturn;
 8006eda:	68fb      	ldr	r3, [r7, #12]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006eec:	f001 fc34 	bl	8008758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d102      	bne.n	8006f02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006efc:	2301      	movs	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	e001      	b.n	8006f06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f06:	f001 fc59 	bl	80087bc <vPortExitCritical>

	return xReturn;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	e014      	b.n	8006f4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f24:	4a0f      	ldr	r2, [pc, #60]	@ (8006f64 <vQueueAddToRegistry+0x50>)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10b      	bne.n	8006f48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f30:	490c      	ldr	r1, [pc, #48]	@ (8006f64 <vQueueAddToRegistry+0x50>)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006f64 <vQueueAddToRegistry+0x50>)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	4413      	add	r3, r2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f46:	e006      	b.n	8006f56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b07      	cmp	r3, #7
 8006f52:	d9e7      	bls.n	8006f24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20000d74 	.word	0x20000d74

08006f68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f78:	f001 fbee 	bl	8008758 <vPortEnterCritical>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f82:	b25b      	sxtb	r3, r3
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f88:	d103      	bne.n	8006f92 <vQueueWaitForMessageRestricted+0x2a>
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f98:	b25b      	sxtb	r3, r3
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9e:	d103      	bne.n	8006fa8 <vQueueWaitForMessageRestricted+0x40>
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fa8:	f001 fc08 	bl	80087bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d106      	bne.n	8006fc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	3324      	adds	r3, #36	@ 0x24
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	68b9      	ldr	r1, [r7, #8]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fc6d 	bl	800789c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fc2:	6978      	ldr	r0, [r7, #20]
 8006fc4:	f7ff ff26 	bl	8006e14 <prvUnlockQueue>
	}
 8006fc8:	bf00      	nop
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08e      	sub	sp, #56	@ 0x38
 8006fd4:	af04      	add	r7, sp, #16
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10b      	bne.n	8006ffc <xTaskCreateStatic+0x2c>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	623b      	str	r3, [r7, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	bf00      	nop
 8006ffa:	e7fd      	b.n	8006ff8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10b      	bne.n	800701a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	61fb      	str	r3, [r7, #28]
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	e7fd      	b.n	8007016 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800701a:	23a8      	movs	r3, #168	@ 0xa8
 800701c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2ba8      	cmp	r3, #168	@ 0xa8
 8007022:	d00b      	beq.n	800703c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	61bb      	str	r3, [r7, #24]
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	e7fd      	b.n	8007038 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800703c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800703e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01e      	beq.n	8007082 <xTaskCreateStatic+0xb2>
 8007044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007046:	2b00      	cmp	r3, #0
 8007048:	d01b      	beq.n	8007082 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800704a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007052:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	2202      	movs	r2, #2
 8007058:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800705c:	2300      	movs	r3, #0
 800705e:	9303      	str	r3, [sp, #12]
 8007060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007062:	9302      	str	r3, [sp, #8]
 8007064:	f107 0314 	add.w	r3, r7, #20
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	68b9      	ldr	r1, [r7, #8]
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 f851 	bl	800711c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800707a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800707c:	f000 f8f6 	bl	800726c <prvAddNewTaskToReadyList>
 8007080:	e001      	b.n	8007086 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007082:	2300      	movs	r3, #0
 8007084:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007086:	697b      	ldr	r3, [r7, #20]
	}
 8007088:	4618      	mov	r0, r3
 800708a:	3728      	adds	r7, #40	@ 0x28
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b08c      	sub	sp, #48	@ 0x30
 8007094:	af04      	add	r7, sp, #16
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	4613      	mov	r3, r2
 800709e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070a0:	88fb      	ldrh	r3, [r7, #6]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4618      	mov	r0, r3
 80070a6:	f001 fc79 	bl	800899c <pvPortMalloc>
 80070aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00e      	beq.n	80070d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070b2:	20a8      	movs	r0, #168	@ 0xa8
 80070b4:	f001 fc72 	bl	800899c <pvPortMalloc>
 80070b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80070c6:	e005      	b.n	80070d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070c8:	6978      	ldr	r0, [r7, #20]
 80070ca:	f001 fd35 	bl	8008b38 <vPortFree>
 80070ce:	e001      	b.n	80070d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d017      	beq.n	800710a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070e2:	88fa      	ldrh	r2, [r7, #6]
 80070e4:	2300      	movs	r3, #0
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	9302      	str	r3, [sp, #8]
 80070ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ee:	9301      	str	r3, [sp, #4]
 80070f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 f80f 	bl	800711c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070fe:	69f8      	ldr	r0, [r7, #28]
 8007100:	f000 f8b4 	bl	800726c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007104:	2301      	movs	r3, #1
 8007106:	61bb      	str	r3, [r7, #24]
 8007108:	e002      	b.n	8007110 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800710a:	f04f 33ff 	mov.w	r3, #4294967295
 800710e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007110:	69bb      	ldr	r3, [r7, #24]
	}
 8007112:	4618      	mov	r0, r3
 8007114:	3720      	adds	r7, #32
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	461a      	mov	r2, r3
 8007134:	21a5      	movs	r1, #165	@ 0xa5
 8007136:	f001 fe1f 	bl	8008d78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007144:	3b01      	subs	r3, #1
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f023 0307 	bic.w	r3, r3, #7
 8007152:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	617b      	str	r3, [r7, #20]
}
 8007170:	bf00      	nop
 8007172:	bf00      	nop
 8007174:	e7fd      	b.n	8007172 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d01f      	beq.n	80071bc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800717c:	2300      	movs	r3, #0
 800717e:	61fb      	str	r3, [r7, #28]
 8007180:	e012      	b.n	80071a8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	4413      	add	r3, r2
 8007188:	7819      	ldrb	r1, [r3, #0]
 800718a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	4413      	add	r3, r2
 8007190:	3334      	adds	r3, #52	@ 0x34
 8007192:	460a      	mov	r2, r1
 8007194:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	4413      	add	r3, r2
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d006      	beq.n	80071b0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	3301      	adds	r3, #1
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	2b0f      	cmp	r3, #15
 80071ac:	d9e9      	bls.n	8007182 <prvInitialiseNewTask+0x66>
 80071ae:	e000      	b.n	80071b2 <prvInitialiseNewTask+0x96>
			{
				break;
 80071b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071ba:	e003      	b.n	80071c4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c6:	2b37      	cmp	r3, #55	@ 0x37
 80071c8:	d901      	bls.n	80071ce <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071ca:	2337      	movs	r3, #55	@ 0x37
 80071cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071d8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	2200      	movs	r2, #0
 80071de:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e2:	3304      	adds	r3, #4
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7ff f965 	bl	80064b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	3318      	adds	r3, #24
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff f960 	bl	80064b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007208:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	2200      	movs	r2, #0
 800720e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	2200      	movs	r2, #0
 8007216:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800721a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721c:	3354      	adds	r3, #84	@ 0x54
 800721e:	224c      	movs	r2, #76	@ 0x4c
 8007220:	2100      	movs	r1, #0
 8007222:	4618      	mov	r0, r3
 8007224:	f001 fda8 	bl	8008d78 <memset>
 8007228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722a:	4a0d      	ldr	r2, [pc, #52]	@ (8007260 <prvInitialiseNewTask+0x144>)
 800722c:	659a      	str	r2, [r3, #88]	@ 0x58
 800722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007230:	4a0c      	ldr	r2, [pc, #48]	@ (8007264 <prvInitialiseNewTask+0x148>)
 8007232:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007236:	4a0c      	ldr	r2, [pc, #48]	@ (8007268 <prvInitialiseNewTask+0x14c>)
 8007238:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	68f9      	ldr	r1, [r7, #12]
 800723e:	69b8      	ldr	r0, [r7, #24]
 8007240:	f001 f95a 	bl	80084f8 <pxPortInitialiseStack>
 8007244:	4602      	mov	r2, r0
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800724a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007256:	bf00      	nop
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20002790 	.word	0x20002790
 8007264:	200027f8 	.word	0x200027f8
 8007268:	20002860 	.word	0x20002860

0800726c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007274:	f001 fa70 	bl	8008758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007278:	4b2d      	ldr	r3, [pc, #180]	@ (8007330 <prvAddNewTaskToReadyList+0xc4>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3301      	adds	r3, #1
 800727e:	4a2c      	ldr	r2, [pc, #176]	@ (8007330 <prvAddNewTaskToReadyList+0xc4>)
 8007280:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007282:	4b2c      	ldr	r3, [pc, #176]	@ (8007334 <prvAddNewTaskToReadyList+0xc8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d109      	bne.n	800729e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800728a:	4a2a      	ldr	r2, [pc, #168]	@ (8007334 <prvAddNewTaskToReadyList+0xc8>)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007290:	4b27      	ldr	r3, [pc, #156]	@ (8007330 <prvAddNewTaskToReadyList+0xc4>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d110      	bne.n	80072ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007298:	f000 fc2e 	bl	8007af8 <prvInitialiseTaskLists>
 800729c:	e00d      	b.n	80072ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800729e:	4b26      	ldr	r3, [pc, #152]	@ (8007338 <prvAddNewTaskToReadyList+0xcc>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072a6:	4b23      	ldr	r3, [pc, #140]	@ (8007334 <prvAddNewTaskToReadyList+0xc8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d802      	bhi.n	80072ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007334 <prvAddNewTaskToReadyList+0xc8>)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072ba:	4b20      	ldr	r3, [pc, #128]	@ (800733c <prvAddNewTaskToReadyList+0xd0>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3301      	adds	r3, #1
 80072c0:	4a1e      	ldr	r2, [pc, #120]	@ (800733c <prvAddNewTaskToReadyList+0xd0>)
 80072c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072c4:	4b1d      	ldr	r3, [pc, #116]	@ (800733c <prvAddNewTaskToReadyList+0xd0>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007340 <prvAddNewTaskToReadyList+0xd4>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d903      	bls.n	80072e0 <prvAddNewTaskToReadyList+0x74>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072dc:	4a18      	ldr	r2, [pc, #96]	@ (8007340 <prvAddNewTaskToReadyList+0xd4>)
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072e4:	4613      	mov	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4a15      	ldr	r2, [pc, #84]	@ (8007344 <prvAddNewTaskToReadyList+0xd8>)
 80072ee:	441a      	add	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f7ff f8e9 	bl	80064ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072fc:	f001 fa5e 	bl	80087bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007300:	4b0d      	ldr	r3, [pc, #52]	@ (8007338 <prvAddNewTaskToReadyList+0xcc>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00e      	beq.n	8007326 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007308:	4b0a      	ldr	r3, [pc, #40]	@ (8007334 <prvAddNewTaskToReadyList+0xc8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007312:	429a      	cmp	r2, r3
 8007314:	d207      	bcs.n	8007326 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007316:	4b0c      	ldr	r3, [pc, #48]	@ (8007348 <prvAddNewTaskToReadyList+0xdc>)
 8007318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007326:	bf00      	nop
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20001288 	.word	0x20001288
 8007334:	20000db4 	.word	0x20000db4
 8007338:	20001294 	.word	0x20001294
 800733c:	200012a4 	.word	0x200012a4
 8007340:	20001290 	.word	0x20001290
 8007344:	20000db8 	.word	0x20000db8
 8007348:	e000ed04 	.word	0xe000ed04

0800734c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d018      	beq.n	8007390 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800735e:	4b14      	ldr	r3, [pc, #80]	@ (80073b0 <vTaskDelay+0x64>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00b      	beq.n	800737e <vTaskDelay+0x32>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	60bb      	str	r3, [r7, #8]
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	e7fd      	b.n	800737a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800737e:	f000 f88b 	bl	8007498 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007382:	2100      	movs	r1, #0
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fd09 	bl	8007d9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800738a:	f000 f893 	bl	80074b4 <xTaskResumeAll>
 800738e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d107      	bne.n	80073a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007396:	4b07      	ldr	r3, [pc, #28]	@ (80073b4 <vTaskDelay+0x68>)
 8007398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073a6:	bf00      	nop
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	200012b0 	.word	0x200012b0
 80073b4:	e000ed04 	.word	0xe000ed04

080073b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08a      	sub	sp, #40	@ 0x28
 80073bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073be:	2300      	movs	r3, #0
 80073c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073c6:	463a      	mov	r2, r7
 80073c8:	1d39      	adds	r1, r7, #4
 80073ca:	f107 0308 	add.w	r3, r7, #8
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff f81c 	bl	800640c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	9202      	str	r2, [sp, #8]
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	2300      	movs	r3, #0
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	2300      	movs	r3, #0
 80073e4:	460a      	mov	r2, r1
 80073e6:	4924      	ldr	r1, [pc, #144]	@ (8007478 <vTaskStartScheduler+0xc0>)
 80073e8:	4824      	ldr	r0, [pc, #144]	@ (800747c <vTaskStartScheduler+0xc4>)
 80073ea:	f7ff fdf1 	bl	8006fd0 <xTaskCreateStatic>
 80073ee:	4603      	mov	r3, r0
 80073f0:	4a23      	ldr	r2, [pc, #140]	@ (8007480 <vTaskStartScheduler+0xc8>)
 80073f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073f4:	4b22      	ldr	r3, [pc, #136]	@ (8007480 <vTaskStartScheduler+0xc8>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073fc:	2301      	movs	r3, #1
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	e001      	b.n	8007406 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007402:	2300      	movs	r3, #0
 8007404:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d102      	bne.n	8007412 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800740c:	f000 fd1a 	bl	8007e44 <xTimerCreateTimerTask>
 8007410:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d11b      	bne.n	8007450 <vTaskStartScheduler+0x98>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	613b      	str	r3, [r7, #16]
}
 800742a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800742c:	4b15      	ldr	r3, [pc, #84]	@ (8007484 <vTaskStartScheduler+0xcc>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3354      	adds	r3, #84	@ 0x54
 8007432:	4a15      	ldr	r2, [pc, #84]	@ (8007488 <vTaskStartScheduler+0xd0>)
 8007434:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007436:	4b15      	ldr	r3, [pc, #84]	@ (800748c <vTaskStartScheduler+0xd4>)
 8007438:	f04f 32ff 	mov.w	r2, #4294967295
 800743c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800743e:	4b14      	ldr	r3, [pc, #80]	@ (8007490 <vTaskStartScheduler+0xd8>)
 8007440:	2201      	movs	r2, #1
 8007442:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007444:	4b13      	ldr	r3, [pc, #76]	@ (8007494 <vTaskStartScheduler+0xdc>)
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800744a:	f001 f8e1 	bl	8008610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800744e:	e00f      	b.n	8007470 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d10b      	bne.n	8007470 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	60fb      	str	r3, [r7, #12]
}
 800746a:	bf00      	nop
 800746c:	bf00      	nop
 800746e:	e7fd      	b.n	800746c <vTaskStartScheduler+0xb4>
}
 8007470:	bf00      	nop
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	08008fbc 	.word	0x08008fbc
 800747c:	08007ac9 	.word	0x08007ac9
 8007480:	200012ac 	.word	0x200012ac
 8007484:	20000db4 	.word	0x20000db4
 8007488:	20000010 	.word	0x20000010
 800748c:	200012a8 	.word	0x200012a8
 8007490:	20001294 	.word	0x20001294
 8007494:	2000128c 	.word	0x2000128c

08007498 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800749c:	4b04      	ldr	r3, [pc, #16]	@ (80074b0 <vTaskSuspendAll+0x18>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3301      	adds	r3, #1
 80074a2:	4a03      	ldr	r2, [pc, #12]	@ (80074b0 <vTaskSuspendAll+0x18>)
 80074a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80074a6:	bf00      	nop
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	200012b0 	.word	0x200012b0

080074b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074be:	2300      	movs	r3, #0
 80074c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074c2:	4b42      	ldr	r3, [pc, #264]	@ (80075cc <xTaskResumeAll+0x118>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10b      	bne.n	80074e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	603b      	str	r3, [r7, #0]
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	e7fd      	b.n	80074de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074e2:	f001 f939 	bl	8008758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074e6:	4b39      	ldr	r3, [pc, #228]	@ (80075cc <xTaskResumeAll+0x118>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	4a37      	ldr	r2, [pc, #220]	@ (80075cc <xTaskResumeAll+0x118>)
 80074ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074f0:	4b36      	ldr	r3, [pc, #216]	@ (80075cc <xTaskResumeAll+0x118>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d162      	bne.n	80075be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074f8:	4b35      	ldr	r3, [pc, #212]	@ (80075d0 <xTaskResumeAll+0x11c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d05e      	beq.n	80075be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007500:	e02f      	b.n	8007562 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007502:	4b34      	ldr	r3, [pc, #208]	@ (80075d4 <xTaskResumeAll+0x120>)
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3318      	adds	r3, #24
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff f83a 	bl	8006588 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3304      	adds	r3, #4
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff f835 	bl	8006588 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007522:	4b2d      	ldr	r3, [pc, #180]	@ (80075d8 <xTaskResumeAll+0x124>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d903      	bls.n	8007532 <xTaskResumeAll+0x7e>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752e:	4a2a      	ldr	r2, [pc, #168]	@ (80075d8 <xTaskResumeAll+0x124>)
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007536:	4613      	mov	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4a27      	ldr	r2, [pc, #156]	@ (80075dc <xTaskResumeAll+0x128>)
 8007540:	441a      	add	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	3304      	adds	r3, #4
 8007546:	4619      	mov	r1, r3
 8007548:	4610      	mov	r0, r2
 800754a:	f7fe ffc0 	bl	80064ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007552:	4b23      	ldr	r3, [pc, #140]	@ (80075e0 <xTaskResumeAll+0x12c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007558:	429a      	cmp	r2, r3
 800755a:	d302      	bcc.n	8007562 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800755c:	4b21      	ldr	r3, [pc, #132]	@ (80075e4 <xTaskResumeAll+0x130>)
 800755e:	2201      	movs	r2, #1
 8007560:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007562:	4b1c      	ldr	r3, [pc, #112]	@ (80075d4 <xTaskResumeAll+0x120>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1cb      	bne.n	8007502 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007570:	f000 fb66 	bl	8007c40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007574:	4b1c      	ldr	r3, [pc, #112]	@ (80075e8 <xTaskResumeAll+0x134>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d010      	beq.n	80075a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007580:	f000 f846 	bl	8007610 <xTaskIncrementTick>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800758a:	4b16      	ldr	r3, [pc, #88]	@ (80075e4 <xTaskResumeAll+0x130>)
 800758c:	2201      	movs	r2, #1
 800758e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3b01      	subs	r3, #1
 8007594:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1f1      	bne.n	8007580 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800759c:	4b12      	ldr	r3, [pc, #72]	@ (80075e8 <xTaskResumeAll+0x134>)
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075a2:	4b10      	ldr	r3, [pc, #64]	@ (80075e4 <xTaskResumeAll+0x130>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d009      	beq.n	80075be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075aa:	2301      	movs	r3, #1
 80075ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075ae:	4b0f      	ldr	r3, [pc, #60]	@ (80075ec <xTaskResumeAll+0x138>)
 80075b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075be:	f001 f8fd 	bl	80087bc <vPortExitCritical>

	return xAlreadyYielded;
 80075c2:	68bb      	ldr	r3, [r7, #8]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	200012b0 	.word	0x200012b0
 80075d0:	20001288 	.word	0x20001288
 80075d4:	20001248 	.word	0x20001248
 80075d8:	20001290 	.word	0x20001290
 80075dc:	20000db8 	.word	0x20000db8
 80075e0:	20000db4 	.word	0x20000db4
 80075e4:	2000129c 	.word	0x2000129c
 80075e8:	20001298 	.word	0x20001298
 80075ec:	e000ed04 	.word	0xe000ed04

080075f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075f6:	4b05      	ldr	r3, [pc, #20]	@ (800760c <xTaskGetTickCount+0x1c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075fc:	687b      	ldr	r3, [r7, #4]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	2000128c 	.word	0x2000128c

08007610 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007616:	2300      	movs	r3, #0
 8007618:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800761a:	4b4f      	ldr	r3, [pc, #316]	@ (8007758 <xTaskIncrementTick+0x148>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f040 8090 	bne.w	8007744 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007624:	4b4d      	ldr	r3, [pc, #308]	@ (800775c <xTaskIncrementTick+0x14c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3301      	adds	r3, #1
 800762a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800762c:	4a4b      	ldr	r2, [pc, #300]	@ (800775c <xTaskIncrementTick+0x14c>)
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d121      	bne.n	800767c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007638:	4b49      	ldr	r3, [pc, #292]	@ (8007760 <xTaskIncrementTick+0x150>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00b      	beq.n	800765a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	603b      	str	r3, [r7, #0]
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	e7fd      	b.n	8007656 <xTaskIncrementTick+0x46>
 800765a:	4b41      	ldr	r3, [pc, #260]	@ (8007760 <xTaskIncrementTick+0x150>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	4b40      	ldr	r3, [pc, #256]	@ (8007764 <xTaskIncrementTick+0x154>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a3e      	ldr	r2, [pc, #248]	@ (8007760 <xTaskIncrementTick+0x150>)
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	4a3e      	ldr	r2, [pc, #248]	@ (8007764 <xTaskIncrementTick+0x154>)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	4b3e      	ldr	r3, [pc, #248]	@ (8007768 <xTaskIncrementTick+0x158>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3301      	adds	r3, #1
 8007674:	4a3c      	ldr	r2, [pc, #240]	@ (8007768 <xTaskIncrementTick+0x158>)
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	f000 fae2 	bl	8007c40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800767c:	4b3b      	ldr	r3, [pc, #236]	@ (800776c <xTaskIncrementTick+0x15c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	429a      	cmp	r2, r3
 8007684:	d349      	bcc.n	800771a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007686:	4b36      	ldr	r3, [pc, #216]	@ (8007760 <xTaskIncrementTick+0x150>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d104      	bne.n	800769a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007690:	4b36      	ldr	r3, [pc, #216]	@ (800776c <xTaskIncrementTick+0x15c>)
 8007692:	f04f 32ff 	mov.w	r2, #4294967295
 8007696:	601a      	str	r2, [r3, #0]
					break;
 8007698:	e03f      	b.n	800771a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800769a:	4b31      	ldr	r3, [pc, #196]	@ (8007760 <xTaskIncrementTick+0x150>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d203      	bcs.n	80076ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076b2:	4a2e      	ldr	r2, [pc, #184]	@ (800776c <xTaskIncrementTick+0x15c>)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076b8:	e02f      	b.n	800771a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	3304      	adds	r3, #4
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fe ff62 	bl	8006588 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	3318      	adds	r3, #24
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fe ff59 	bl	8006588 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076da:	4b25      	ldr	r3, [pc, #148]	@ (8007770 <xTaskIncrementTick+0x160>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d903      	bls.n	80076ea <xTaskIncrementTick+0xda>
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e6:	4a22      	ldr	r2, [pc, #136]	@ (8007770 <xTaskIncrementTick+0x160>)
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007774 <xTaskIncrementTick+0x164>)
 80076f8:	441a      	add	r2, r3
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4619      	mov	r1, r3
 8007700:	4610      	mov	r0, r2
 8007702:	f7fe fee4 	bl	80064ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770a:	4b1b      	ldr	r3, [pc, #108]	@ (8007778 <xTaskIncrementTick+0x168>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007710:	429a      	cmp	r2, r3
 8007712:	d3b8      	bcc.n	8007686 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007714:	2301      	movs	r3, #1
 8007716:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007718:	e7b5      	b.n	8007686 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800771a:	4b17      	ldr	r3, [pc, #92]	@ (8007778 <xTaskIncrementTick+0x168>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007720:	4914      	ldr	r1, [pc, #80]	@ (8007774 <xTaskIncrementTick+0x164>)
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	440b      	add	r3, r1
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d901      	bls.n	8007736 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007732:	2301      	movs	r3, #1
 8007734:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007736:	4b11      	ldr	r3, [pc, #68]	@ (800777c <xTaskIncrementTick+0x16c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d007      	beq.n	800774e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800773e:	2301      	movs	r3, #1
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	e004      	b.n	800774e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007744:	4b0e      	ldr	r3, [pc, #56]	@ (8007780 <xTaskIncrementTick+0x170>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3301      	adds	r3, #1
 800774a:	4a0d      	ldr	r2, [pc, #52]	@ (8007780 <xTaskIncrementTick+0x170>)
 800774c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800774e:	697b      	ldr	r3, [r7, #20]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	200012b0 	.word	0x200012b0
 800775c:	2000128c 	.word	0x2000128c
 8007760:	20001240 	.word	0x20001240
 8007764:	20001244 	.word	0x20001244
 8007768:	200012a0 	.word	0x200012a0
 800776c:	200012a8 	.word	0x200012a8
 8007770:	20001290 	.word	0x20001290
 8007774:	20000db8 	.word	0x20000db8
 8007778:	20000db4 	.word	0x20000db4
 800777c:	2000129c 	.word	0x2000129c
 8007780:	20001298 	.word	0x20001298

08007784 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800778a:	4b2b      	ldr	r3, [pc, #172]	@ (8007838 <vTaskSwitchContext+0xb4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007792:	4b2a      	ldr	r3, [pc, #168]	@ (800783c <vTaskSwitchContext+0xb8>)
 8007794:	2201      	movs	r2, #1
 8007796:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007798:	e047      	b.n	800782a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800779a:	4b28      	ldr	r3, [pc, #160]	@ (800783c <vTaskSwitchContext+0xb8>)
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077a0:	4b27      	ldr	r3, [pc, #156]	@ (8007840 <vTaskSwitchContext+0xbc>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	e011      	b.n	80077cc <vTaskSwitchContext+0x48>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10b      	bne.n	80077c6 <vTaskSwitchContext+0x42>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	607b      	str	r3, [r7, #4]
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	e7fd      	b.n	80077c2 <vTaskSwitchContext+0x3e>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	491d      	ldr	r1, [pc, #116]	@ (8007844 <vTaskSwitchContext+0xc0>)
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	440b      	add	r3, r1
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0e3      	beq.n	80077a8 <vTaskSwitchContext+0x24>
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	4613      	mov	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4a16      	ldr	r2, [pc, #88]	@ (8007844 <vTaskSwitchContext+0xc0>)
 80077ec:	4413      	add	r3, r2
 80077ee:	60bb      	str	r3, [r7, #8]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	605a      	str	r2, [r3, #4]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	3308      	adds	r3, #8
 8007802:	429a      	cmp	r2, r3
 8007804:	d104      	bne.n	8007810 <vTaskSwitchContext+0x8c>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	605a      	str	r2, [r3, #4]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	4a0c      	ldr	r2, [pc, #48]	@ (8007848 <vTaskSwitchContext+0xc4>)
 8007818:	6013      	str	r3, [r2, #0]
 800781a:	4a09      	ldr	r2, [pc, #36]	@ (8007840 <vTaskSwitchContext+0xbc>)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007820:	4b09      	ldr	r3, [pc, #36]	@ (8007848 <vTaskSwitchContext+0xc4>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3354      	adds	r3, #84	@ 0x54
 8007826:	4a09      	ldr	r2, [pc, #36]	@ (800784c <vTaskSwitchContext+0xc8>)
 8007828:	6013      	str	r3, [r2, #0]
}
 800782a:	bf00      	nop
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	200012b0 	.word	0x200012b0
 800783c:	2000129c 	.word	0x2000129c
 8007840:	20001290 	.word	0x20001290
 8007844:	20000db8 	.word	0x20000db8
 8007848:	20000db4 	.word	0x20000db4
 800784c:	20000010 	.word	0x20000010

08007850 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10b      	bne.n	8007878 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	60fb      	str	r3, [r7, #12]
}
 8007872:	bf00      	nop
 8007874:	bf00      	nop
 8007876:	e7fd      	b.n	8007874 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007878:	4b07      	ldr	r3, [pc, #28]	@ (8007898 <vTaskPlaceOnEventList+0x48>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3318      	adds	r3, #24
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7fe fe48 	bl	8006516 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007886:	2101      	movs	r1, #1
 8007888:	6838      	ldr	r0, [r7, #0]
 800788a:	f000 fa87 	bl	8007d9c <prvAddCurrentTaskToDelayedList>
}
 800788e:	bf00      	nop
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20000db4 	.word	0x20000db4

0800789c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10b      	bne.n	80078c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	617b      	str	r3, [r7, #20]
}
 80078c0:	bf00      	nop
 80078c2:	bf00      	nop
 80078c4:	e7fd      	b.n	80078c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078c6:	4b0a      	ldr	r3, [pc, #40]	@ (80078f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3318      	adds	r3, #24
 80078cc:	4619      	mov	r1, r3
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f7fe fdfd 	bl	80064ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80078da:	f04f 33ff 	mov.w	r3, #4294967295
 80078de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	68b8      	ldr	r0, [r7, #8]
 80078e4:	f000 fa5a 	bl	8007d9c <prvAddCurrentTaskToDelayedList>
	}
 80078e8:	bf00      	nop
 80078ea:	3718      	adds	r7, #24
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20000db4 	.word	0x20000db4

080078f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10b      	bne.n	8007922 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	60fb      	str	r3, [r7, #12]
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	e7fd      	b.n	800791e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	3318      	adds	r3, #24
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fe2e 	bl	8006588 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800792c:	4b1d      	ldr	r3, [pc, #116]	@ (80079a4 <xTaskRemoveFromEventList+0xb0>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d11d      	bne.n	8007970 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	3304      	adds	r3, #4
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe fe25 	bl	8006588 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007942:	4b19      	ldr	r3, [pc, #100]	@ (80079a8 <xTaskRemoveFromEventList+0xb4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	429a      	cmp	r2, r3
 8007948:	d903      	bls.n	8007952 <xTaskRemoveFromEventList+0x5e>
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794e:	4a16      	ldr	r2, [pc, #88]	@ (80079a8 <xTaskRemoveFromEventList+0xb4>)
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4a13      	ldr	r2, [pc, #76]	@ (80079ac <xTaskRemoveFromEventList+0xb8>)
 8007960:	441a      	add	r2, r3
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	3304      	adds	r3, #4
 8007966:	4619      	mov	r1, r3
 8007968:	4610      	mov	r0, r2
 800796a:	f7fe fdb0 	bl	80064ce <vListInsertEnd>
 800796e:	e005      	b.n	800797c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	3318      	adds	r3, #24
 8007974:	4619      	mov	r1, r3
 8007976:	480e      	ldr	r0, [pc, #56]	@ (80079b0 <xTaskRemoveFromEventList+0xbc>)
 8007978:	f7fe fda9 	bl	80064ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007980:	4b0c      	ldr	r3, [pc, #48]	@ (80079b4 <xTaskRemoveFromEventList+0xc0>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007986:	429a      	cmp	r2, r3
 8007988:	d905      	bls.n	8007996 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800798a:	2301      	movs	r3, #1
 800798c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800798e:	4b0a      	ldr	r3, [pc, #40]	@ (80079b8 <xTaskRemoveFromEventList+0xc4>)
 8007990:	2201      	movs	r2, #1
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e001      	b.n	800799a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800799a:	697b      	ldr	r3, [r7, #20]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	200012b0 	.word	0x200012b0
 80079a8:	20001290 	.word	0x20001290
 80079ac:	20000db8 	.word	0x20000db8
 80079b0:	20001248 	.word	0x20001248
 80079b4:	20000db4 	.word	0x20000db4
 80079b8:	2000129c 	.word	0x2000129c

080079bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079c4:	4b06      	ldr	r3, [pc, #24]	@ (80079e0 <vTaskInternalSetTimeOutState+0x24>)
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079cc:	4b05      	ldr	r3, [pc, #20]	@ (80079e4 <vTaskInternalSetTimeOutState+0x28>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	605a      	str	r2, [r3, #4]
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	200012a0 	.word	0x200012a0
 80079e4:	2000128c 	.word	0x2000128c

080079e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10b      	bne.n	8007a10 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	613b      	str	r3, [r7, #16]
}
 8007a0a:	bf00      	nop
 8007a0c:	bf00      	nop
 8007a0e:	e7fd      	b.n	8007a0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10b      	bne.n	8007a2e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	60fb      	str	r3, [r7, #12]
}
 8007a28:	bf00      	nop
 8007a2a:	bf00      	nop
 8007a2c:	e7fd      	b.n	8007a2a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007a2e:	f000 fe93 	bl	8008758 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a32:	4b1d      	ldr	r3, [pc, #116]	@ (8007aa8 <xTaskCheckForTimeOut+0xc0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4a:	d102      	bne.n	8007a52 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	61fb      	str	r3, [r7, #28]
 8007a50:	e023      	b.n	8007a9a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	4b15      	ldr	r3, [pc, #84]	@ (8007aac <xTaskCheckForTimeOut+0xc4>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d007      	beq.n	8007a6e <xTaskCheckForTimeOut+0x86>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d302      	bcc.n	8007a6e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	61fb      	str	r3, [r7, #28]
 8007a6c:	e015      	b.n	8007a9a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d20b      	bcs.n	8007a90 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	1ad2      	subs	r2, r2, r3
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7ff ff99 	bl	80079bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61fb      	str	r3, [r7, #28]
 8007a8e:	e004      	b.n	8007a9a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a96:	2301      	movs	r3, #1
 8007a98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a9a:	f000 fe8f 	bl	80087bc <vPortExitCritical>

	return xReturn;
 8007a9e:	69fb      	ldr	r3, [r7, #28]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3720      	adds	r7, #32
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	2000128c 	.word	0x2000128c
 8007aac:	200012a0 	.word	0x200012a0

08007ab0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ab4:	4b03      	ldr	r3, [pc, #12]	@ (8007ac4 <vTaskMissedYield+0x14>)
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	601a      	str	r2, [r3, #0]
}
 8007aba:	bf00      	nop
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	2000129c 	.word	0x2000129c

08007ac8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ad0:	f000 f852 	bl	8007b78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ad4:	4b06      	ldr	r3, [pc, #24]	@ (8007af0 <prvIdleTask+0x28>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d9f9      	bls.n	8007ad0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007adc:	4b05      	ldr	r3, [pc, #20]	@ (8007af4 <prvIdleTask+0x2c>)
 8007ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007aec:	e7f0      	b.n	8007ad0 <prvIdleTask+0x8>
 8007aee:	bf00      	nop
 8007af0:	20000db8 	.word	0x20000db8
 8007af4:	e000ed04 	.word	0xe000ed04

08007af8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007afe:	2300      	movs	r3, #0
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	e00c      	b.n	8007b1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4a12      	ldr	r2, [pc, #72]	@ (8007b58 <prvInitialiseTaskLists+0x60>)
 8007b10:	4413      	add	r3, r2
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fcae 	bl	8006474 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	607b      	str	r3, [r7, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b37      	cmp	r3, #55	@ 0x37
 8007b22:	d9ef      	bls.n	8007b04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b24:	480d      	ldr	r0, [pc, #52]	@ (8007b5c <prvInitialiseTaskLists+0x64>)
 8007b26:	f7fe fca5 	bl	8006474 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b2a:	480d      	ldr	r0, [pc, #52]	@ (8007b60 <prvInitialiseTaskLists+0x68>)
 8007b2c:	f7fe fca2 	bl	8006474 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b30:	480c      	ldr	r0, [pc, #48]	@ (8007b64 <prvInitialiseTaskLists+0x6c>)
 8007b32:	f7fe fc9f 	bl	8006474 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b36:	480c      	ldr	r0, [pc, #48]	@ (8007b68 <prvInitialiseTaskLists+0x70>)
 8007b38:	f7fe fc9c 	bl	8006474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b3c:	480b      	ldr	r0, [pc, #44]	@ (8007b6c <prvInitialiseTaskLists+0x74>)
 8007b3e:	f7fe fc99 	bl	8006474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b42:	4b0b      	ldr	r3, [pc, #44]	@ (8007b70 <prvInitialiseTaskLists+0x78>)
 8007b44:	4a05      	ldr	r2, [pc, #20]	@ (8007b5c <prvInitialiseTaskLists+0x64>)
 8007b46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b48:	4b0a      	ldr	r3, [pc, #40]	@ (8007b74 <prvInitialiseTaskLists+0x7c>)
 8007b4a:	4a05      	ldr	r2, [pc, #20]	@ (8007b60 <prvInitialiseTaskLists+0x68>)
 8007b4c:	601a      	str	r2, [r3, #0]
}
 8007b4e:	bf00      	nop
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20000db8 	.word	0x20000db8
 8007b5c:	20001218 	.word	0x20001218
 8007b60:	2000122c 	.word	0x2000122c
 8007b64:	20001248 	.word	0x20001248
 8007b68:	2000125c 	.word	0x2000125c
 8007b6c:	20001274 	.word	0x20001274
 8007b70:	20001240 	.word	0x20001240
 8007b74:	20001244 	.word	0x20001244

08007b78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b7e:	e019      	b.n	8007bb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b80:	f000 fdea 	bl	8008758 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b84:	4b10      	ldr	r3, [pc, #64]	@ (8007bc8 <prvCheckTasksWaitingTermination+0x50>)
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe fcf9 	bl	8006588 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b96:	4b0d      	ldr	r3, [pc, #52]	@ (8007bcc <prvCheckTasksWaitingTermination+0x54>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8007bcc <prvCheckTasksWaitingTermination+0x54>)
 8007b9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd0 <prvCheckTasksWaitingTermination+0x58>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8007bd0 <prvCheckTasksWaitingTermination+0x58>)
 8007ba8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007baa:	f000 fe07 	bl	80087bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f810 	bl	8007bd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bb4:	4b06      	ldr	r3, [pc, #24]	@ (8007bd0 <prvCheckTasksWaitingTermination+0x58>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e1      	bne.n	8007b80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	2000125c 	.word	0x2000125c
 8007bcc:	20001288 	.word	0x20001288
 8007bd0:	20001270 	.word	0x20001270

08007bd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3354      	adds	r3, #84	@ 0x54
 8007be0:	4618      	mov	r0, r3
 8007be2:	f001 f8d1 	bl	8008d88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d108      	bne.n	8007c02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f000 ff9f 	bl	8008b38 <vPortFree>
				vPortFree( pxTCB );
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 ff9c 	bl	8008b38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c00:	e019      	b.n	8007c36 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d103      	bne.n	8007c14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 ff93 	bl	8008b38 <vPortFree>
	}
 8007c12:	e010      	b.n	8007c36 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d00b      	beq.n	8007c36 <prvDeleteTCB+0x62>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	60fb      	str	r3, [r7, #12]
}
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
 8007c34:	e7fd      	b.n	8007c32 <prvDeleteTCB+0x5e>
	}
 8007c36:	bf00      	nop
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
	...

08007c40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c46:	4b0c      	ldr	r3, [pc, #48]	@ (8007c78 <prvResetNextTaskUnblockTime+0x38>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d104      	bne.n	8007c5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c50:	4b0a      	ldr	r3, [pc, #40]	@ (8007c7c <prvResetNextTaskUnblockTime+0x3c>)
 8007c52:	f04f 32ff 	mov.w	r2, #4294967295
 8007c56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c58:	e008      	b.n	8007c6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c5a:	4b07      	ldr	r3, [pc, #28]	@ (8007c78 <prvResetNextTaskUnblockTime+0x38>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	4a04      	ldr	r2, [pc, #16]	@ (8007c7c <prvResetNextTaskUnblockTime+0x3c>)
 8007c6a:	6013      	str	r3, [r2, #0]
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	20001240 	.word	0x20001240
 8007c7c:	200012a8 	.word	0x200012a8

08007c80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c86:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb4 <xTaskGetSchedulerState+0x34>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	607b      	str	r3, [r7, #4]
 8007c92:	e008      	b.n	8007ca6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c94:	4b08      	ldr	r3, [pc, #32]	@ (8007cb8 <xTaskGetSchedulerState+0x38>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d102      	bne.n	8007ca2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	607b      	str	r3, [r7, #4]
 8007ca0:	e001      	b.n	8007ca6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ca6:	687b      	ldr	r3, [r7, #4]
	}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	20001294 	.word	0x20001294
 8007cb8:	200012b0 	.word	0x200012b0

08007cbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d058      	beq.n	8007d84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8007d90 <xTaskPriorityDisinherit+0xd4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d00b      	beq.n	8007cf4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	60fb      	str	r3, [r7, #12]
}
 8007cee:	bf00      	nop
 8007cf0:	bf00      	nop
 8007cf2:	e7fd      	b.n	8007cf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10b      	bne.n	8007d14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60bb      	str	r3, [r7, #8]
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	e7fd      	b.n	8007d10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d18:	1e5a      	subs	r2, r3, #1
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d02c      	beq.n	8007d84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d128      	bne.n	8007d84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	3304      	adds	r3, #4
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe fc26 	bl	8006588 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d54:	4b0f      	ldr	r3, [pc, #60]	@ (8007d94 <xTaskPriorityDisinherit+0xd8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d903      	bls.n	8007d64 <xTaskPriorityDisinherit+0xa8>
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d60:	4a0c      	ldr	r2, [pc, #48]	@ (8007d94 <xTaskPriorityDisinherit+0xd8>)
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d68:	4613      	mov	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4a09      	ldr	r2, [pc, #36]	@ (8007d98 <xTaskPriorityDisinherit+0xdc>)
 8007d72:	441a      	add	r2, r3
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	3304      	adds	r3, #4
 8007d78:	4619      	mov	r1, r3
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	f7fe fba7 	bl	80064ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d80:	2301      	movs	r3, #1
 8007d82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d84:	697b      	ldr	r3, [r7, #20]
	}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000db4 	.word	0x20000db4
 8007d94:	20001290 	.word	0x20001290
 8007d98:	20000db8 	.word	0x20000db8

08007d9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007da6:	4b21      	ldr	r3, [pc, #132]	@ (8007e2c <prvAddCurrentTaskToDelayedList+0x90>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dac:	4b20      	ldr	r3, [pc, #128]	@ (8007e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fe fbe8 	bl	8006588 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dbe:	d10a      	bne.n	8007dd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d007      	beq.n	8007dd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8007e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4819      	ldr	r0, [pc, #100]	@ (8007e34 <prvAddCurrentTaskToDelayedList+0x98>)
 8007dd0:	f7fe fb7d 	bl	80064ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dd4:	e026      	b.n	8007e24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4413      	add	r3, r2
 8007ddc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dde:	4b14      	ldr	r3, [pc, #80]	@ (8007e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d209      	bcs.n	8007e02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dee:	4b12      	ldr	r3, [pc, #72]	@ (8007e38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3304      	adds	r3, #4
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	f7fe fb8b 	bl	8006516 <vListInsert>
}
 8007e00:	e010      	b.n	8007e24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e02:	4b0e      	ldr	r3, [pc, #56]	@ (8007e3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	4b0a      	ldr	r3, [pc, #40]	@ (8007e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f7fe fb81 	bl	8006516 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e14:	4b0a      	ldr	r3, [pc, #40]	@ (8007e40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d202      	bcs.n	8007e24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e1e:	4a08      	ldr	r2, [pc, #32]	@ (8007e40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	6013      	str	r3, [r2, #0]
}
 8007e24:	bf00      	nop
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	2000128c 	.word	0x2000128c
 8007e30:	20000db4 	.word	0x20000db4
 8007e34:	20001274 	.word	0x20001274
 8007e38:	20001244 	.word	0x20001244
 8007e3c:	20001240 	.word	0x20001240
 8007e40:	200012a8 	.word	0x200012a8

08007e44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b08a      	sub	sp, #40	@ 0x28
 8007e48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e4e:	f000 fb13 	bl	8008478 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e52:	4b1d      	ldr	r3, [pc, #116]	@ (8007ec8 <xTimerCreateTimerTask+0x84>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d021      	beq.n	8007e9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e62:	1d3a      	adds	r2, r7, #4
 8007e64:	f107 0108 	add.w	r1, r7, #8
 8007e68:	f107 030c 	add.w	r3, r7, #12
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe fae7 	bl	8006440 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	9202      	str	r2, [sp, #8]
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	2300      	movs	r3, #0
 8007e82:	460a      	mov	r2, r1
 8007e84:	4911      	ldr	r1, [pc, #68]	@ (8007ecc <xTimerCreateTimerTask+0x88>)
 8007e86:	4812      	ldr	r0, [pc, #72]	@ (8007ed0 <xTimerCreateTimerTask+0x8c>)
 8007e88:	f7ff f8a2 	bl	8006fd0 <xTaskCreateStatic>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	4a11      	ldr	r2, [pc, #68]	@ (8007ed4 <xTimerCreateTimerTask+0x90>)
 8007e90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e92:	4b10      	ldr	r3, [pc, #64]	@ (8007ed4 <xTimerCreateTimerTask+0x90>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10b      	bne.n	8007ebc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	613b      	str	r3, [r7, #16]
}
 8007eb6:	bf00      	nop
 8007eb8:	bf00      	nop
 8007eba:	e7fd      	b.n	8007eb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ebc:	697b      	ldr	r3, [r7, #20]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	200012e4 	.word	0x200012e4
 8007ecc:	08008fc4 	.word	0x08008fc4
 8007ed0:	08008011 	.word	0x08008011
 8007ed4:	200012e8 	.word	0x200012e8

08007ed8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08a      	sub	sp, #40	@ 0x28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10b      	bne.n	8007f08 <xTimerGenericCommand+0x30>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	623b      	str	r3, [r7, #32]
}
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	e7fd      	b.n	8007f04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f08:	4b19      	ldr	r3, [pc, #100]	@ (8007f70 <xTimerGenericCommand+0x98>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d02a      	beq.n	8007f66 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2b05      	cmp	r3, #5
 8007f20:	dc18      	bgt.n	8007f54 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f22:	f7ff fead 	bl	8007c80 <xTaskGetSchedulerState>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d109      	bne.n	8007f40 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f2c:	4b10      	ldr	r3, [pc, #64]	@ (8007f70 <xTimerGenericCommand+0x98>)
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	f107 0110 	add.w	r1, r7, #16
 8007f34:	2300      	movs	r3, #0
 8007f36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f38:	f7fe fc5a 	bl	80067f0 <xQueueGenericSend>
 8007f3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f3e:	e012      	b.n	8007f66 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f40:	4b0b      	ldr	r3, [pc, #44]	@ (8007f70 <xTimerGenericCommand+0x98>)
 8007f42:	6818      	ldr	r0, [r3, #0]
 8007f44:	f107 0110 	add.w	r1, r7, #16
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f7fe fc50 	bl	80067f0 <xQueueGenericSend>
 8007f50:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f52:	e008      	b.n	8007f66 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f54:	4b06      	ldr	r3, [pc, #24]	@ (8007f70 <xTimerGenericCommand+0x98>)
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	f107 0110 	add.w	r1, r7, #16
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	f7fe fd48 	bl	80069f4 <xQueueGenericSendFromISR>
 8007f64:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3728      	adds	r7, #40	@ 0x28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	200012e4 	.word	0x200012e4

08007f74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af02      	add	r7, sp, #8
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f7e:	4b23      	ldr	r3, [pc, #140]	@ (800800c <prvProcessExpiredTimer+0x98>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fe fafb 	bl	8006588 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d023      	beq.n	8007fe8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	699a      	ldr	r2, [r3, #24]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	18d1      	adds	r1, r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	6978      	ldr	r0, [r7, #20]
 8007fae:	f000 f8d5 	bl	800815c <prvInsertTimerInActiveList>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d020      	beq.n	8007ffa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	6978      	ldr	r0, [r7, #20]
 8007fc4:	f7ff ff88 	bl	8007ed8 <xTimerGenericCommand>
 8007fc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d114      	bne.n	8007ffa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	60fb      	str	r3, [r7, #12]
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	e7fd      	b.n	8007fe4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fee:	f023 0301 	bic.w	r3, r3, #1
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	6978      	ldr	r0, [r7, #20]
 8008000:	4798      	blx	r3
}
 8008002:	bf00      	nop
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	200012dc 	.word	0x200012dc

08008010 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008018:	f107 0308 	add.w	r3, r7, #8
 800801c:	4618      	mov	r0, r3
 800801e:	f000 f859 	bl	80080d4 <prvGetNextExpireTime>
 8008022:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	4619      	mov	r1, r3
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f805 	bl	8008038 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800802e:	f000 f8d7 	bl	80081e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008032:	bf00      	nop
 8008034:	e7f0      	b.n	8008018 <prvTimerTask+0x8>
	...

08008038 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008042:	f7ff fa29 	bl	8007498 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008046:	f107 0308 	add.w	r3, r7, #8
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f866 	bl	800811c <prvSampleTimeNow>
 8008050:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d130      	bne.n	80080ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10a      	bne.n	8008074 <prvProcessTimerOrBlockTask+0x3c>
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	429a      	cmp	r2, r3
 8008064:	d806      	bhi.n	8008074 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008066:	f7ff fa25 	bl	80074b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800806a:	68f9      	ldr	r1, [r7, #12]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f7ff ff81 	bl	8007f74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008072:	e024      	b.n	80080be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d008      	beq.n	800808c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800807a:	4b13      	ldr	r3, [pc, #76]	@ (80080c8 <prvProcessTimerOrBlockTask+0x90>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <prvProcessTimerOrBlockTask+0x50>
 8008084:	2301      	movs	r3, #1
 8008086:	e000      	b.n	800808a <prvProcessTimerOrBlockTask+0x52>
 8008088:	2300      	movs	r3, #0
 800808a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800808c:	4b0f      	ldr	r3, [pc, #60]	@ (80080cc <prvProcessTimerOrBlockTask+0x94>)
 800808e:	6818      	ldr	r0, [r3, #0]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	4619      	mov	r1, r3
 800809a:	f7fe ff65 	bl	8006f68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800809e:	f7ff fa09 	bl	80074b4 <xTaskResumeAll>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080a8:	4b09      	ldr	r3, [pc, #36]	@ (80080d0 <prvProcessTimerOrBlockTask+0x98>)
 80080aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	f3bf 8f6f 	isb	sy
}
 80080b8:	e001      	b.n	80080be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080ba:	f7ff f9fb 	bl	80074b4 <xTaskResumeAll>
}
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	200012e0 	.word	0x200012e0
 80080cc:	200012e4 	.word	0x200012e4
 80080d0:	e000ed04 	.word	0xe000ed04

080080d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008118 <prvGetNextExpireTime+0x44>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <prvGetNextExpireTime+0x16>
 80080e6:	2201      	movs	r2, #1
 80080e8:	e000      	b.n	80080ec <prvGetNextExpireTime+0x18>
 80080ea:	2200      	movs	r2, #0
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d105      	bne.n	8008104 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080f8:	4b07      	ldr	r3, [pc, #28]	@ (8008118 <prvGetNextExpireTime+0x44>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	e001      	b.n	8008108 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008108:	68fb      	ldr	r3, [r7, #12]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	200012dc 	.word	0x200012dc

0800811c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008124:	f7ff fa64 	bl	80075f0 <xTaskGetTickCount>
 8008128:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800812a:	4b0b      	ldr	r3, [pc, #44]	@ (8008158 <prvSampleTimeNow+0x3c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	429a      	cmp	r2, r3
 8008132:	d205      	bcs.n	8008140 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008134:	f000 f93a 	bl	80083ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	e002      	b.n	8008146 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008146:	4a04      	ldr	r2, [pc, #16]	@ (8008158 <prvSampleTimeNow+0x3c>)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800814c:	68fb      	ldr	r3, [r7, #12]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	200012ec 	.word	0x200012ec

0800815c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	429a      	cmp	r2, r3
 8008180:	d812      	bhi.n	80081a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	1ad2      	subs	r2, r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	429a      	cmp	r2, r3
 800818e:	d302      	bcc.n	8008196 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008190:	2301      	movs	r3, #1
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	e01b      	b.n	80081ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008196:	4b10      	ldr	r3, [pc, #64]	@ (80081d8 <prvInsertTimerInActiveList+0x7c>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3304      	adds	r3, #4
 800819e:	4619      	mov	r1, r3
 80081a0:	4610      	mov	r0, r2
 80081a2:	f7fe f9b8 	bl	8006516 <vListInsert>
 80081a6:	e012      	b.n	80081ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d206      	bcs.n	80081be <prvInsertTimerInActiveList+0x62>
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d302      	bcc.n	80081be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081b8:	2301      	movs	r3, #1
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	e007      	b.n	80081ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081be:	4b07      	ldr	r3, [pc, #28]	@ (80081dc <prvInsertTimerInActiveList+0x80>)
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3304      	adds	r3, #4
 80081c6:	4619      	mov	r1, r3
 80081c8:	4610      	mov	r0, r2
 80081ca:	f7fe f9a4 	bl	8006516 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081ce:	697b      	ldr	r3, [r7, #20]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	200012e0 	.word	0x200012e0
 80081dc:	200012dc 	.word	0x200012dc

080081e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08e      	sub	sp, #56	@ 0x38
 80081e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081e6:	e0ce      	b.n	8008386 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	da19      	bge.n	8008222 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081ee:	1d3b      	adds	r3, r7, #4
 80081f0:	3304      	adds	r3, #4
 80081f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10b      	bne.n	8008212 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	61fb      	str	r3, [r7, #28]
}
 800820c:	bf00      	nop
 800820e:	bf00      	nop
 8008210:	e7fd      	b.n	800820e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008218:	6850      	ldr	r0, [r2, #4]
 800821a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800821c:	6892      	ldr	r2, [r2, #8]
 800821e:	4611      	mov	r1, r2
 8008220:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f2c0 80ae 	blt.w	8008386 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800822e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d004      	beq.n	8008240 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	3304      	adds	r3, #4
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe f9a4 	bl	8006588 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008240:	463b      	mov	r3, r7
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff ff6a 	bl	800811c <prvSampleTimeNow>
 8008248:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b09      	cmp	r3, #9
 800824e:	f200 8097 	bhi.w	8008380 <prvProcessReceivedCommands+0x1a0>
 8008252:	a201      	add	r2, pc, #4	@ (adr r2, 8008258 <prvProcessReceivedCommands+0x78>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	08008281 	.word	0x08008281
 800825c:	08008281 	.word	0x08008281
 8008260:	08008281 	.word	0x08008281
 8008264:	080082f7 	.word	0x080082f7
 8008268:	0800830b 	.word	0x0800830b
 800826c:	08008357 	.word	0x08008357
 8008270:	08008281 	.word	0x08008281
 8008274:	08008281 	.word	0x08008281
 8008278:	080082f7 	.word	0x080082f7
 800827c:	0800830b 	.word	0x0800830b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008282:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008286:	f043 0301 	orr.w	r3, r3, #1
 800828a:	b2da      	uxtb	r2, r3
 800828c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	18d1      	adds	r1, r2, r3
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800829e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082a0:	f7ff ff5c 	bl	800815c <prvInsertTimerInActiveList>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d06c      	beq.n	8008384 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d061      	beq.n	8008384 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	441a      	add	r2, r3
 80082c8:	2300      	movs	r3, #0
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	2300      	movs	r3, #0
 80082ce:	2100      	movs	r1, #0
 80082d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082d2:	f7ff fe01 	bl	8007ed8 <xTimerGenericCommand>
 80082d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d152      	bne.n	8008384 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	61bb      	str	r3, [r7, #24]
}
 80082f0:	bf00      	nop
 80082f2:	bf00      	nop
 80082f4:	e7fd      	b.n	80082f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082fc:	f023 0301 	bic.w	r3, r3, #1
 8008300:	b2da      	uxtb	r2, r3
 8008302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008304:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008308:	e03d      	b.n	8008386 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800830a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008310:	f043 0301 	orr.w	r3, r3, #1
 8008314:	b2da      	uxtb	r2, r3
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10b      	bne.n	8008342 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	617b      	str	r3, [r7, #20]
}
 800833c:	bf00      	nop
 800833e:	bf00      	nop
 8008340:	e7fd      	b.n	800833e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008344:	699a      	ldr	r2, [r3, #24]
 8008346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008348:	18d1      	adds	r1, r2, r3
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800834e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008350:	f7ff ff04 	bl	800815c <prvInsertTimerInActiveList>
					break;
 8008354:	e017      	b.n	8008386 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b00      	cmp	r3, #0
 8008362:	d103      	bne.n	800836c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008364:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008366:	f000 fbe7 	bl	8008b38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800836a:	e00c      	b.n	8008386 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800836c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008372:	f023 0301 	bic.w	r3, r3, #1
 8008376:	b2da      	uxtb	r2, r3
 8008378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800837e:	e002      	b.n	8008386 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008380:	bf00      	nop
 8008382:	e000      	b.n	8008386 <prvProcessReceivedCommands+0x1a6>
					break;
 8008384:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008386:	4b08      	ldr	r3, [pc, #32]	@ (80083a8 <prvProcessReceivedCommands+0x1c8>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	1d39      	adds	r1, r7, #4
 800838c:	2200      	movs	r2, #0
 800838e:	4618      	mov	r0, r3
 8008390:	f7fe fbce 	bl	8006b30 <xQueueReceive>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	f47f af26 	bne.w	80081e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	3730      	adds	r7, #48	@ 0x30
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	200012e4 	.word	0x200012e4

080083ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b088      	sub	sp, #32
 80083b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083b2:	e049      	b.n	8008448 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083b4:	4b2e      	ldr	r3, [pc, #184]	@ (8008470 <prvSwitchTimerLists+0xc4>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083be:	4b2c      	ldr	r3, [pc, #176]	@ (8008470 <prvSwitchTimerLists+0xc4>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fe f8db 	bl	8006588 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d02f      	beq.n	8008448 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4413      	add	r3, r2
 80083f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d90e      	bls.n	8008418 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008406:	4b1a      	ldr	r3, [pc, #104]	@ (8008470 <prvSwitchTimerLists+0xc4>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3304      	adds	r3, #4
 800840e:	4619      	mov	r1, r3
 8008410:	4610      	mov	r0, r2
 8008412:	f7fe f880 	bl	8006516 <vListInsert>
 8008416:	e017      	b.n	8008448 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008418:	2300      	movs	r3, #0
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	2300      	movs	r3, #0
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	2100      	movs	r1, #0
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff fd58 	bl	8007ed8 <xTimerGenericCommand>
 8008428:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10b      	bne.n	8008448 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	603b      	str	r3, [r7, #0]
}
 8008442:	bf00      	nop
 8008444:	bf00      	nop
 8008446:	e7fd      	b.n	8008444 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008448:	4b09      	ldr	r3, [pc, #36]	@ (8008470 <prvSwitchTimerLists+0xc4>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1b0      	bne.n	80083b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008452:	4b07      	ldr	r3, [pc, #28]	@ (8008470 <prvSwitchTimerLists+0xc4>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008458:	4b06      	ldr	r3, [pc, #24]	@ (8008474 <prvSwitchTimerLists+0xc8>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a04      	ldr	r2, [pc, #16]	@ (8008470 <prvSwitchTimerLists+0xc4>)
 800845e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008460:	4a04      	ldr	r2, [pc, #16]	@ (8008474 <prvSwitchTimerLists+0xc8>)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	6013      	str	r3, [r2, #0]
}
 8008466:	bf00      	nop
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	200012dc 	.word	0x200012dc
 8008474:	200012e0 	.word	0x200012e0

08008478 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800847e:	f000 f96b 	bl	8008758 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008482:	4b15      	ldr	r3, [pc, #84]	@ (80084d8 <prvCheckForValidListAndQueue+0x60>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d120      	bne.n	80084cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800848a:	4814      	ldr	r0, [pc, #80]	@ (80084dc <prvCheckForValidListAndQueue+0x64>)
 800848c:	f7fd fff2 	bl	8006474 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008490:	4813      	ldr	r0, [pc, #76]	@ (80084e0 <prvCheckForValidListAndQueue+0x68>)
 8008492:	f7fd ffef 	bl	8006474 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008496:	4b13      	ldr	r3, [pc, #76]	@ (80084e4 <prvCheckForValidListAndQueue+0x6c>)
 8008498:	4a10      	ldr	r2, [pc, #64]	@ (80084dc <prvCheckForValidListAndQueue+0x64>)
 800849a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800849c:	4b12      	ldr	r3, [pc, #72]	@ (80084e8 <prvCheckForValidListAndQueue+0x70>)
 800849e:	4a10      	ldr	r2, [pc, #64]	@ (80084e0 <prvCheckForValidListAndQueue+0x68>)
 80084a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084a2:	2300      	movs	r3, #0
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	4b11      	ldr	r3, [pc, #68]	@ (80084ec <prvCheckForValidListAndQueue+0x74>)
 80084a8:	4a11      	ldr	r2, [pc, #68]	@ (80084f0 <prvCheckForValidListAndQueue+0x78>)
 80084aa:	2110      	movs	r1, #16
 80084ac:	200a      	movs	r0, #10
 80084ae:	f7fe f8ff 	bl	80066b0 <xQueueGenericCreateStatic>
 80084b2:	4603      	mov	r3, r0
 80084b4:	4a08      	ldr	r2, [pc, #32]	@ (80084d8 <prvCheckForValidListAndQueue+0x60>)
 80084b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084b8:	4b07      	ldr	r3, [pc, #28]	@ (80084d8 <prvCheckForValidListAndQueue+0x60>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d005      	beq.n	80084cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084c0:	4b05      	ldr	r3, [pc, #20]	@ (80084d8 <prvCheckForValidListAndQueue+0x60>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	490b      	ldr	r1, [pc, #44]	@ (80084f4 <prvCheckForValidListAndQueue+0x7c>)
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe fd24 	bl	8006f14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084cc:	f000 f976 	bl	80087bc <vPortExitCritical>
}
 80084d0:	bf00      	nop
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	200012e4 	.word	0x200012e4
 80084dc:	200012b4 	.word	0x200012b4
 80084e0:	200012c8 	.word	0x200012c8
 80084e4:	200012dc 	.word	0x200012dc
 80084e8:	200012e0 	.word	0x200012e0
 80084ec:	20001390 	.word	0x20001390
 80084f0:	200012f0 	.word	0x200012f0
 80084f4:	08008fcc 	.word	0x08008fcc

080084f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	3b04      	subs	r3, #4
 8008508:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3b04      	subs	r3, #4
 8008516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f023 0201 	bic.w	r2, r3, #1
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3b04      	subs	r3, #4
 8008526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008528:	4a0c      	ldr	r2, [pc, #48]	@ (800855c <pxPortInitialiseStack+0x64>)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3b14      	subs	r3, #20
 8008532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3b04      	subs	r3, #4
 800853e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f06f 0202 	mvn.w	r2, #2
 8008546:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3b20      	subs	r3, #32
 800854c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800854e:	68fb      	ldr	r3, [r7, #12]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	08008561 	.word	0x08008561

08008560 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800856a:	4b13      	ldr	r3, [pc, #76]	@ (80085b8 <prvTaskExitError+0x58>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008572:	d00b      	beq.n	800858c <prvTaskExitError+0x2c>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	60fb      	str	r3, [r7, #12]
}
 8008586:	bf00      	nop
 8008588:	bf00      	nop
 800858a:	e7fd      	b.n	8008588 <prvTaskExitError+0x28>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	60bb      	str	r3, [r7, #8]
}
 800859e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085a0:	bf00      	nop
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d0fc      	beq.n	80085a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085a8:	bf00      	nop
 80085aa:	bf00      	nop
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	2000000c 	.word	0x2000000c
 80085bc:	00000000 	.word	0x00000000

080085c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085c0:	4b07      	ldr	r3, [pc, #28]	@ (80085e0 <pxCurrentTCBConst2>)
 80085c2:	6819      	ldr	r1, [r3, #0]
 80085c4:	6808      	ldr	r0, [r1, #0]
 80085c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ca:	f380 8809 	msr	PSP, r0
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f380 8811 	msr	BASEPRI, r0
 80085da:	4770      	bx	lr
 80085dc:	f3af 8000 	nop.w

080085e0 <pxCurrentTCBConst2>:
 80085e0:	20000db4 	.word	0x20000db4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop

080085e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085e8:	4808      	ldr	r0, [pc, #32]	@ (800860c <prvPortStartFirstTask+0x24>)
 80085ea:	6800      	ldr	r0, [r0, #0]
 80085ec:	6800      	ldr	r0, [r0, #0]
 80085ee:	f380 8808 	msr	MSP, r0
 80085f2:	f04f 0000 	mov.w	r0, #0
 80085f6:	f380 8814 	msr	CONTROL, r0
 80085fa:	b662      	cpsie	i
 80085fc:	b661      	cpsie	f
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	df00      	svc	0
 8008608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800860a:	bf00      	nop
 800860c:	e000ed08 	.word	0xe000ed08

08008610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008616:	4b47      	ldr	r3, [pc, #284]	@ (8008734 <xPortStartScheduler+0x124>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a47      	ldr	r2, [pc, #284]	@ (8008738 <xPortStartScheduler+0x128>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d10b      	bne.n	8008638 <xPortStartScheduler+0x28>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	613b      	str	r3, [r7, #16]
}
 8008632:	bf00      	nop
 8008634:	bf00      	nop
 8008636:	e7fd      	b.n	8008634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008638:	4b3e      	ldr	r3, [pc, #248]	@ (8008734 <xPortStartScheduler+0x124>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a3f      	ldr	r2, [pc, #252]	@ (800873c <xPortStartScheduler+0x12c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d10b      	bne.n	800865a <xPortStartScheduler+0x4a>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	60fb      	str	r3, [r7, #12]
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	e7fd      	b.n	8008656 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800865a:	4b39      	ldr	r3, [pc, #228]	@ (8008740 <xPortStartScheduler+0x130>)
 800865c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	22ff      	movs	r2, #255	@ 0xff
 800866a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800867c:	b2da      	uxtb	r2, r3
 800867e:	4b31      	ldr	r3, [pc, #196]	@ (8008744 <xPortStartScheduler+0x134>)
 8008680:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008682:	4b31      	ldr	r3, [pc, #196]	@ (8008748 <xPortStartScheduler+0x138>)
 8008684:	2207      	movs	r2, #7
 8008686:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008688:	e009      	b.n	800869e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800868a:	4b2f      	ldr	r3, [pc, #188]	@ (8008748 <xPortStartScheduler+0x138>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3b01      	subs	r3, #1
 8008690:	4a2d      	ldr	r2, [pc, #180]	@ (8008748 <xPortStartScheduler+0x138>)
 8008692:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	b2db      	uxtb	r3, r3
 800869c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a6:	2b80      	cmp	r3, #128	@ 0x80
 80086a8:	d0ef      	beq.n	800868a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086aa:	4b27      	ldr	r3, [pc, #156]	@ (8008748 <xPortStartScheduler+0x138>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f1c3 0307 	rsb	r3, r3, #7
 80086b2:	2b04      	cmp	r3, #4
 80086b4:	d00b      	beq.n	80086ce <xPortStartScheduler+0xbe>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	60bb      	str	r3, [r7, #8]
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	e7fd      	b.n	80086ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008748 <xPortStartScheduler+0x138>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008748 <xPortStartScheduler+0x138>)
 80086d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008748 <xPortStartScheduler+0x138>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80086e0:	4a19      	ldr	r2, [pc, #100]	@ (8008748 <xPortStartScheduler+0x138>)
 80086e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086ec:	4b17      	ldr	r3, [pc, #92]	@ (800874c <xPortStartScheduler+0x13c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a16      	ldr	r2, [pc, #88]	@ (800874c <xPortStartScheduler+0x13c>)
 80086f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086f8:	4b14      	ldr	r3, [pc, #80]	@ (800874c <xPortStartScheduler+0x13c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a13      	ldr	r2, [pc, #76]	@ (800874c <xPortStartScheduler+0x13c>)
 80086fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008704:	f000 f8da 	bl	80088bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008708:	4b11      	ldr	r3, [pc, #68]	@ (8008750 <xPortStartScheduler+0x140>)
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800870e:	f000 f8f9 	bl	8008904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008712:	4b10      	ldr	r3, [pc, #64]	@ (8008754 <xPortStartScheduler+0x144>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a0f      	ldr	r2, [pc, #60]	@ (8008754 <xPortStartScheduler+0x144>)
 8008718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800871c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800871e:	f7ff ff63 	bl	80085e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008722:	f7ff f82f 	bl	8007784 <vTaskSwitchContext>
	prvTaskExitError();
 8008726:	f7ff ff1b 	bl	8008560 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	e000ed00 	.word	0xe000ed00
 8008738:	410fc271 	.word	0x410fc271
 800873c:	410fc270 	.word	0x410fc270
 8008740:	e000e400 	.word	0xe000e400
 8008744:	200013e0 	.word	0x200013e0
 8008748:	200013e4 	.word	0x200013e4
 800874c:	e000ed20 	.word	0xe000ed20
 8008750:	2000000c 	.word	0x2000000c
 8008754:	e000ef34 	.word	0xe000ef34

08008758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	607b      	str	r3, [r7, #4]
}
 8008770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008772:	4b10      	ldr	r3, [pc, #64]	@ (80087b4 <vPortEnterCritical+0x5c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3301      	adds	r3, #1
 8008778:	4a0e      	ldr	r2, [pc, #56]	@ (80087b4 <vPortEnterCritical+0x5c>)
 800877a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800877c:	4b0d      	ldr	r3, [pc, #52]	@ (80087b4 <vPortEnterCritical+0x5c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d110      	bne.n	80087a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008784:	4b0c      	ldr	r3, [pc, #48]	@ (80087b8 <vPortEnterCritical+0x60>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00b      	beq.n	80087a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	603b      	str	r3, [r7, #0]
}
 80087a0:	bf00      	nop
 80087a2:	bf00      	nop
 80087a4:	e7fd      	b.n	80087a2 <vPortEnterCritical+0x4a>
	}
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	2000000c 	.word	0x2000000c
 80087b8:	e000ed04 	.word	0xe000ed04

080087bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087c2:	4b12      	ldr	r3, [pc, #72]	@ (800880c <vPortExitCritical+0x50>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10b      	bne.n	80087e2 <vPortExitCritical+0x26>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	607b      	str	r3, [r7, #4]
}
 80087dc:	bf00      	nop
 80087de:	bf00      	nop
 80087e0:	e7fd      	b.n	80087de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087e2:	4b0a      	ldr	r3, [pc, #40]	@ (800880c <vPortExitCritical+0x50>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	4a08      	ldr	r2, [pc, #32]	@ (800880c <vPortExitCritical+0x50>)
 80087ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087ec:	4b07      	ldr	r3, [pc, #28]	@ (800880c <vPortExitCritical+0x50>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d105      	bne.n	8008800 <vPortExitCritical+0x44>
 80087f4:	2300      	movs	r3, #0
 80087f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	f383 8811 	msr	BASEPRI, r3
}
 80087fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	2000000c 	.word	0x2000000c

08008810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008810:	f3ef 8009 	mrs	r0, PSP
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	4b15      	ldr	r3, [pc, #84]	@ (8008870 <pxCurrentTCBConst>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	f01e 0f10 	tst.w	lr, #16
 8008820:	bf08      	it	eq
 8008822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882a:	6010      	str	r0, [r2, #0]
 800882c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008834:	f380 8811 	msr	BASEPRI, r0
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f7fe ffa0 	bl	8007784 <vTaskSwitchContext>
 8008844:	f04f 0000 	mov.w	r0, #0
 8008848:	f380 8811 	msr	BASEPRI, r0
 800884c:	bc09      	pop	{r0, r3}
 800884e:	6819      	ldr	r1, [r3, #0]
 8008850:	6808      	ldr	r0, [r1, #0]
 8008852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008856:	f01e 0f10 	tst.w	lr, #16
 800885a:	bf08      	it	eq
 800885c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008860:	f380 8809 	msr	PSP, r0
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	f3af 8000 	nop.w

08008870 <pxCurrentTCBConst>:
 8008870:	20000db4 	.word	0x20000db4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop

08008878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	607b      	str	r3, [r7, #4]
}
 8008890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008892:	f7fe febd 	bl	8007610 <xTaskIncrementTick>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800889c:	4b06      	ldr	r3, [pc, #24]	@ (80088b8 <xPortSysTickHandler+0x40>)
 800889e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	2300      	movs	r3, #0
 80088a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f383 8811 	msr	BASEPRI, r3
}
 80088ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	e000ed04 	.word	0xe000ed04

080088bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088c0:	4b0b      	ldr	r3, [pc, #44]	@ (80088f0 <vPortSetupTimerInterrupt+0x34>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088c6:	4b0b      	ldr	r3, [pc, #44]	@ (80088f4 <vPortSetupTimerInterrupt+0x38>)
 80088c8:	2200      	movs	r2, #0
 80088ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088cc:	4b0a      	ldr	r3, [pc, #40]	@ (80088f8 <vPortSetupTimerInterrupt+0x3c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a0a      	ldr	r2, [pc, #40]	@ (80088fc <vPortSetupTimerInterrupt+0x40>)
 80088d2:	fba2 2303 	umull	r2, r3, r2, r3
 80088d6:	099b      	lsrs	r3, r3, #6
 80088d8:	4a09      	ldr	r2, [pc, #36]	@ (8008900 <vPortSetupTimerInterrupt+0x44>)
 80088da:	3b01      	subs	r3, #1
 80088dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088de:	4b04      	ldr	r3, [pc, #16]	@ (80088f0 <vPortSetupTimerInterrupt+0x34>)
 80088e0:	2207      	movs	r2, #7
 80088e2:	601a      	str	r2, [r3, #0]
}
 80088e4:	bf00      	nop
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	e000e010 	.word	0xe000e010
 80088f4:	e000e018 	.word	0xe000e018
 80088f8:	20000000 	.word	0x20000000
 80088fc:	10624dd3 	.word	0x10624dd3
 8008900:	e000e014 	.word	0xe000e014

08008904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008904:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008914 <vPortEnableVFP+0x10>
 8008908:	6801      	ldr	r1, [r0, #0]
 800890a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800890e:	6001      	str	r1, [r0, #0]
 8008910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008912:	bf00      	nop
 8008914:	e000ed88 	.word	0xe000ed88

08008918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800891e:	f3ef 8305 	mrs	r3, IPSR
 8008922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2b0f      	cmp	r3, #15
 8008928:	d915      	bls.n	8008956 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800892a:	4a18      	ldr	r2, [pc, #96]	@ (800898c <vPortValidateInterruptPriority+0x74>)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4413      	add	r3, r2
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008934:	4b16      	ldr	r3, [pc, #88]	@ (8008990 <vPortValidateInterruptPriority+0x78>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	7afa      	ldrb	r2, [r7, #11]
 800893a:	429a      	cmp	r2, r3
 800893c:	d20b      	bcs.n	8008956 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	607b      	str	r3, [r7, #4]
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop
 8008954:	e7fd      	b.n	8008952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008956:	4b0f      	ldr	r3, [pc, #60]	@ (8008994 <vPortValidateInterruptPriority+0x7c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800895e:	4b0e      	ldr	r3, [pc, #56]	@ (8008998 <vPortValidateInterruptPriority+0x80>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d90b      	bls.n	800897e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	603b      	str	r3, [r7, #0]
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	e7fd      	b.n	800897a <vPortValidateInterruptPriority+0x62>
	}
 800897e:	bf00      	nop
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	e000e3f0 	.word	0xe000e3f0
 8008990:	200013e0 	.word	0x200013e0
 8008994:	e000ed0c 	.word	0xe000ed0c
 8008998:	200013e4 	.word	0x200013e4

0800899c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08a      	sub	sp, #40	@ 0x28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089a4:	2300      	movs	r3, #0
 80089a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089a8:	f7fe fd76 	bl	8007498 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008b20 <pvPortMalloc+0x184>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80089b4:	f000 f924 	bl	8008c00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008b24 <pvPortMalloc+0x188>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4013      	ands	r3, r2
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f040 8095 	bne.w	8008af0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01e      	beq.n	8008a0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80089cc:	2208      	movs	r2, #8
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4413      	add	r3, r2
 80089d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d015      	beq.n	8008a0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f023 0307 	bic.w	r3, r3, #7
 80089e4:	3308      	adds	r3, #8
 80089e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f003 0307 	and.w	r3, r3, #7
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00b      	beq.n	8008a0a <pvPortMalloc+0x6e>
	__asm volatile
 80089f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	617b      	str	r3, [r7, #20]
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	e7fd      	b.n	8008a06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d06f      	beq.n	8008af0 <pvPortMalloc+0x154>
 8008a10:	4b45      	ldr	r3, [pc, #276]	@ (8008b28 <pvPortMalloc+0x18c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d86a      	bhi.n	8008af0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a1a:	4b44      	ldr	r3, [pc, #272]	@ (8008b2c <pvPortMalloc+0x190>)
 8008a1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a1e:	4b43      	ldr	r3, [pc, #268]	@ (8008b2c <pvPortMalloc+0x190>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a24:	e004      	b.n	8008a30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d903      	bls.n	8008a42 <pvPortMalloc+0xa6>
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1f1      	bne.n	8008a26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a42:	4b37      	ldr	r3, [pc, #220]	@ (8008b20 <pvPortMalloc+0x184>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d051      	beq.n	8008af0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2208      	movs	r2, #8
 8008a52:	4413      	add	r3, r2
 8008a54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	685a      	ldr	r2, [r3, #4]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	1ad2      	subs	r2, r2, r3
 8008a66:	2308      	movs	r3, #8
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d920      	bls.n	8008ab0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4413      	add	r3, r2
 8008a74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	f003 0307 	and.w	r3, r3, #7
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00b      	beq.n	8008a98 <pvPortMalloc+0xfc>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	613b      	str	r3, [r7, #16]
}
 8008a92:	bf00      	nop
 8008a94:	bf00      	nop
 8008a96:	e7fd      	b.n	8008a94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	1ad2      	subs	r2, r2, r3
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008aaa:	69b8      	ldr	r0, [r7, #24]
 8008aac:	f000 f90a 	bl	8008cc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b28 <pvPortMalloc+0x18c>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	4a1b      	ldr	r2, [pc, #108]	@ (8008b28 <pvPortMalloc+0x18c>)
 8008abc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008abe:	4b1a      	ldr	r3, [pc, #104]	@ (8008b28 <pvPortMalloc+0x18c>)
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b30 <pvPortMalloc+0x194>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d203      	bcs.n	8008ad2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008aca:	4b17      	ldr	r3, [pc, #92]	@ (8008b28 <pvPortMalloc+0x18c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a18      	ldr	r2, [pc, #96]	@ (8008b30 <pvPortMalloc+0x194>)
 8008ad0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	4b13      	ldr	r3, [pc, #76]	@ (8008b24 <pvPortMalloc+0x188>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	431a      	orrs	r2, r3
 8008adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ade:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ae6:	4b13      	ldr	r3, [pc, #76]	@ (8008b34 <pvPortMalloc+0x198>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3301      	adds	r3, #1
 8008aec:	4a11      	ldr	r2, [pc, #68]	@ (8008b34 <pvPortMalloc+0x198>)
 8008aee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008af0:	f7fe fce0 	bl	80074b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00b      	beq.n	8008b16 <pvPortMalloc+0x17a>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	60fb      	str	r3, [r7, #12]
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	e7fd      	b.n	8008b12 <pvPortMalloc+0x176>
	return pvReturn;
 8008b16:	69fb      	ldr	r3, [r7, #28]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3728      	adds	r7, #40	@ 0x28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20002778 	.word	0x20002778
 8008b24:	2000278c 	.word	0x2000278c
 8008b28:	2000277c 	.word	0x2000277c
 8008b2c:	20002770 	.word	0x20002770
 8008b30:	20002780 	.word	0x20002780
 8008b34:	20002784 	.word	0x20002784

08008b38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d04f      	beq.n	8008bea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b4a:	2308      	movs	r3, #8
 8008b4c:	425b      	negs	r3, r3
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	4413      	add	r3, r2
 8008b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	4b25      	ldr	r3, [pc, #148]	@ (8008bf4 <vPortFree+0xbc>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4013      	ands	r3, r2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10b      	bne.n	8008b7e <vPortFree+0x46>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	60fb      	str	r3, [r7, #12]
}
 8008b78:	bf00      	nop
 8008b7a:	bf00      	nop
 8008b7c:	e7fd      	b.n	8008b7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00b      	beq.n	8008b9e <vPortFree+0x66>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	60bb      	str	r3, [r7, #8]
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	e7fd      	b.n	8008b9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	4b14      	ldr	r3, [pc, #80]	@ (8008bf4 <vPortFree+0xbc>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d01e      	beq.n	8008bea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d11a      	bne.n	8008bea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8008bf4 <vPortFree+0xbc>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	43db      	mvns	r3, r3
 8008bbe:	401a      	ands	r2, r3
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008bc4:	f7fe fc68 	bl	8007498 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf8 <vPortFree+0xc0>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	4a09      	ldr	r2, [pc, #36]	@ (8008bf8 <vPortFree+0xc0>)
 8008bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bd6:	6938      	ldr	r0, [r7, #16]
 8008bd8:	f000 f874 	bl	8008cc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008bdc:	4b07      	ldr	r3, [pc, #28]	@ (8008bfc <vPortFree+0xc4>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3301      	adds	r3, #1
 8008be2:	4a06      	ldr	r2, [pc, #24]	@ (8008bfc <vPortFree+0xc4>)
 8008be4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008be6:	f7fe fc65 	bl	80074b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008bea:	bf00      	nop
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	2000278c 	.word	0x2000278c
 8008bf8:	2000277c 	.word	0x2000277c
 8008bfc:	20002788 	.word	0x20002788

08008c00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008c0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c0c:	4b27      	ldr	r3, [pc, #156]	@ (8008cac <prvHeapInit+0xac>)
 8008c0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f003 0307 	and.w	r3, r3, #7
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00c      	beq.n	8008c34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3307      	adds	r3, #7
 8008c1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 0307 	bic.w	r3, r3, #7
 8008c26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8008cac <prvHeapInit+0xac>)
 8008c30:	4413      	add	r3, r2
 8008c32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c38:	4a1d      	ldr	r2, [pc, #116]	@ (8008cb0 <prvHeapInit+0xb0>)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8008cb0 <prvHeapInit+0xb0>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	4413      	add	r3, r2
 8008c4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c4c:	2208      	movs	r2, #8
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f023 0307 	bic.w	r3, r3, #7
 8008c5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4a15      	ldr	r2, [pc, #84]	@ (8008cb4 <prvHeapInit+0xb4>)
 8008c60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c62:	4b14      	ldr	r3, [pc, #80]	@ (8008cb4 <prvHeapInit+0xb4>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2200      	movs	r2, #0
 8008c68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c6a:	4b12      	ldr	r3, [pc, #72]	@ (8008cb4 <prvHeapInit+0xb4>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	1ad2      	subs	r2, r2, r3
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c80:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb4 <prvHeapInit+0xb4>)
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8008cb8 <prvHeapInit+0xb8>)
 8008c8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	4a09      	ldr	r2, [pc, #36]	@ (8008cbc <prvHeapInit+0xbc>)
 8008c96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c98:	4b09      	ldr	r3, [pc, #36]	@ (8008cc0 <prvHeapInit+0xc0>)
 8008c9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c9e:	601a      	str	r2, [r3, #0]
}
 8008ca0:	bf00      	nop
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	200013e8 	.word	0x200013e8
 8008cb0:	20002770 	.word	0x20002770
 8008cb4:	20002778 	.word	0x20002778
 8008cb8:	20002780 	.word	0x20002780
 8008cbc:	2000277c 	.word	0x2000277c
 8008cc0:	2000278c 	.word	0x2000278c

08008cc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ccc:	4b28      	ldr	r3, [pc, #160]	@ (8008d70 <prvInsertBlockIntoFreeList+0xac>)
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	e002      	b.n	8008cd8 <prvInsertBlockIntoFreeList+0x14>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d8f7      	bhi.n	8008cd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	4413      	add	r3, r2
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d108      	bne.n	8008d06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	441a      	add	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	441a      	add	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d118      	bne.n	8008d4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	4b15      	ldr	r3, [pc, #84]	@ (8008d74 <prvInsertBlockIntoFreeList+0xb0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d00d      	beq.n	8008d42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	441a      	add	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e008      	b.n	8008d54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d42:	4b0c      	ldr	r3, [pc, #48]	@ (8008d74 <prvInsertBlockIntoFreeList+0xb0>)
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	601a      	str	r2, [r3, #0]
 8008d4a:	e003      	b.n	8008d54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d002      	beq.n	8008d62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d62:	bf00      	nop
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	20002770 	.word	0x20002770
 8008d74:	20002778 	.word	0x20002778

08008d78 <memset>:
 8008d78:	4402      	add	r2, r0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d100      	bne.n	8008d82 <memset+0xa>
 8008d80:	4770      	bx	lr
 8008d82:	f803 1b01 	strb.w	r1, [r3], #1
 8008d86:	e7f9      	b.n	8008d7c <memset+0x4>

08008d88 <_reclaim_reent>:
 8008d88:	4b29      	ldr	r3, [pc, #164]	@ (8008e30 <_reclaim_reent+0xa8>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4283      	cmp	r3, r0
 8008d8e:	b570      	push	{r4, r5, r6, lr}
 8008d90:	4604      	mov	r4, r0
 8008d92:	d04b      	beq.n	8008e2c <_reclaim_reent+0xa4>
 8008d94:	69c3      	ldr	r3, [r0, #28]
 8008d96:	b1ab      	cbz	r3, 8008dc4 <_reclaim_reent+0x3c>
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	b16b      	cbz	r3, 8008db8 <_reclaim_reent+0x30>
 8008d9c:	2500      	movs	r5, #0
 8008d9e:	69e3      	ldr	r3, [r4, #28]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	5959      	ldr	r1, [r3, r5]
 8008da4:	2900      	cmp	r1, #0
 8008da6:	d13b      	bne.n	8008e20 <_reclaim_reent+0x98>
 8008da8:	3504      	adds	r5, #4
 8008daa:	2d80      	cmp	r5, #128	@ 0x80
 8008dac:	d1f7      	bne.n	8008d9e <_reclaim_reent+0x16>
 8008dae:	69e3      	ldr	r3, [r4, #28]
 8008db0:	4620      	mov	r0, r4
 8008db2:	68d9      	ldr	r1, [r3, #12]
 8008db4:	f000 f872 	bl	8008e9c <_free_r>
 8008db8:	69e3      	ldr	r3, [r4, #28]
 8008dba:	6819      	ldr	r1, [r3, #0]
 8008dbc:	b111      	cbz	r1, 8008dc4 <_reclaim_reent+0x3c>
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f000 f86c 	bl	8008e9c <_free_r>
 8008dc4:	6961      	ldr	r1, [r4, #20]
 8008dc6:	b111      	cbz	r1, 8008dce <_reclaim_reent+0x46>
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f000 f867 	bl	8008e9c <_free_r>
 8008dce:	69e1      	ldr	r1, [r4, #28]
 8008dd0:	b111      	cbz	r1, 8008dd8 <_reclaim_reent+0x50>
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 f862 	bl	8008e9c <_free_r>
 8008dd8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008dda:	b111      	cbz	r1, 8008de2 <_reclaim_reent+0x5a>
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f000 f85d 	bl	8008e9c <_free_r>
 8008de2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008de4:	b111      	cbz	r1, 8008dec <_reclaim_reent+0x64>
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 f858 	bl	8008e9c <_free_r>
 8008dec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008dee:	b111      	cbz	r1, 8008df6 <_reclaim_reent+0x6e>
 8008df0:	4620      	mov	r0, r4
 8008df2:	f000 f853 	bl	8008e9c <_free_r>
 8008df6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008df8:	b111      	cbz	r1, 8008e00 <_reclaim_reent+0x78>
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f000 f84e 	bl	8008e9c <_free_r>
 8008e00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008e02:	b111      	cbz	r1, 8008e0a <_reclaim_reent+0x82>
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 f849 	bl	8008e9c <_free_r>
 8008e0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008e0c:	b111      	cbz	r1, 8008e14 <_reclaim_reent+0x8c>
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 f844 	bl	8008e9c <_free_r>
 8008e14:	6a23      	ldr	r3, [r4, #32]
 8008e16:	b14b      	cbz	r3, 8008e2c <_reclaim_reent+0xa4>
 8008e18:	4620      	mov	r0, r4
 8008e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e1e:	4718      	bx	r3
 8008e20:	680e      	ldr	r6, [r1, #0]
 8008e22:	4620      	mov	r0, r4
 8008e24:	f000 f83a 	bl	8008e9c <_free_r>
 8008e28:	4631      	mov	r1, r6
 8008e2a:	e7bb      	b.n	8008da4 <_reclaim_reent+0x1c>
 8008e2c:	bd70      	pop	{r4, r5, r6, pc}
 8008e2e:	bf00      	nop
 8008e30:	20000010 	.word	0x20000010

08008e34 <__libc_init_array>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	4d0d      	ldr	r5, [pc, #52]	@ (8008e6c <__libc_init_array+0x38>)
 8008e38:	4c0d      	ldr	r4, [pc, #52]	@ (8008e70 <__libc_init_array+0x3c>)
 8008e3a:	1b64      	subs	r4, r4, r5
 8008e3c:	10a4      	asrs	r4, r4, #2
 8008e3e:	2600      	movs	r6, #0
 8008e40:	42a6      	cmp	r6, r4
 8008e42:	d109      	bne.n	8008e58 <__libc_init_array+0x24>
 8008e44:	4d0b      	ldr	r5, [pc, #44]	@ (8008e74 <__libc_init_array+0x40>)
 8008e46:	4c0c      	ldr	r4, [pc, #48]	@ (8008e78 <__libc_init_array+0x44>)
 8008e48:	f000 f87e 	bl	8008f48 <_init>
 8008e4c:	1b64      	subs	r4, r4, r5
 8008e4e:	10a4      	asrs	r4, r4, #2
 8008e50:	2600      	movs	r6, #0
 8008e52:	42a6      	cmp	r6, r4
 8008e54:	d105      	bne.n	8008e62 <__libc_init_array+0x2e>
 8008e56:	bd70      	pop	{r4, r5, r6, pc}
 8008e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e5c:	4798      	blx	r3
 8008e5e:	3601      	adds	r6, #1
 8008e60:	e7ee      	b.n	8008e40 <__libc_init_array+0xc>
 8008e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e66:	4798      	blx	r3
 8008e68:	3601      	adds	r6, #1
 8008e6a:	e7f2      	b.n	8008e52 <__libc_init_array+0x1e>
 8008e6c:	080090f4 	.word	0x080090f4
 8008e70:	080090f4 	.word	0x080090f4
 8008e74:	080090f4 	.word	0x080090f4
 8008e78:	080090fc 	.word	0x080090fc

08008e7c <__retarget_lock_acquire_recursive>:
 8008e7c:	4770      	bx	lr

08008e7e <__retarget_lock_release_recursive>:
 8008e7e:	4770      	bx	lr

08008e80 <memcpy>:
 8008e80:	440a      	add	r2, r1
 8008e82:	4291      	cmp	r1, r2
 8008e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e88:	d100      	bne.n	8008e8c <memcpy+0xc>
 8008e8a:	4770      	bx	lr
 8008e8c:	b510      	push	{r4, lr}
 8008e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e96:	4291      	cmp	r1, r2
 8008e98:	d1f9      	bne.n	8008e8e <memcpy+0xe>
 8008e9a:	bd10      	pop	{r4, pc}

08008e9c <_free_r>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	2900      	cmp	r1, #0
 8008ea2:	d041      	beq.n	8008f28 <_free_r+0x8c>
 8008ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ea8:	1f0c      	subs	r4, r1, #4
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	bfb8      	it	lt
 8008eae:	18e4      	addlt	r4, r4, r3
 8008eb0:	f000 f83e 	bl	8008f30 <__malloc_lock>
 8008eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8008f2c <_free_r+0x90>)
 8008eb6:	6813      	ldr	r3, [r2, #0]
 8008eb8:	b933      	cbnz	r3, 8008ec8 <_free_r+0x2c>
 8008eba:	6063      	str	r3, [r4, #4]
 8008ebc:	6014      	str	r4, [r2, #0]
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ec4:	f000 b83a 	b.w	8008f3c <__malloc_unlock>
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	d908      	bls.n	8008ede <_free_r+0x42>
 8008ecc:	6820      	ldr	r0, [r4, #0]
 8008ece:	1821      	adds	r1, r4, r0
 8008ed0:	428b      	cmp	r3, r1
 8008ed2:	bf01      	itttt	eq
 8008ed4:	6819      	ldreq	r1, [r3, #0]
 8008ed6:	685b      	ldreq	r3, [r3, #4]
 8008ed8:	1809      	addeq	r1, r1, r0
 8008eda:	6021      	streq	r1, [r4, #0]
 8008edc:	e7ed      	b.n	8008eba <_free_r+0x1e>
 8008ede:	461a      	mov	r2, r3
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	b10b      	cbz	r3, 8008ee8 <_free_r+0x4c>
 8008ee4:	42a3      	cmp	r3, r4
 8008ee6:	d9fa      	bls.n	8008ede <_free_r+0x42>
 8008ee8:	6811      	ldr	r1, [r2, #0]
 8008eea:	1850      	adds	r0, r2, r1
 8008eec:	42a0      	cmp	r0, r4
 8008eee:	d10b      	bne.n	8008f08 <_free_r+0x6c>
 8008ef0:	6820      	ldr	r0, [r4, #0]
 8008ef2:	4401      	add	r1, r0
 8008ef4:	1850      	adds	r0, r2, r1
 8008ef6:	4283      	cmp	r3, r0
 8008ef8:	6011      	str	r1, [r2, #0]
 8008efa:	d1e0      	bne.n	8008ebe <_free_r+0x22>
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	6053      	str	r3, [r2, #4]
 8008f02:	4408      	add	r0, r1
 8008f04:	6010      	str	r0, [r2, #0]
 8008f06:	e7da      	b.n	8008ebe <_free_r+0x22>
 8008f08:	d902      	bls.n	8008f10 <_free_r+0x74>
 8008f0a:	230c      	movs	r3, #12
 8008f0c:	602b      	str	r3, [r5, #0]
 8008f0e:	e7d6      	b.n	8008ebe <_free_r+0x22>
 8008f10:	6820      	ldr	r0, [r4, #0]
 8008f12:	1821      	adds	r1, r4, r0
 8008f14:	428b      	cmp	r3, r1
 8008f16:	bf04      	itt	eq
 8008f18:	6819      	ldreq	r1, [r3, #0]
 8008f1a:	685b      	ldreq	r3, [r3, #4]
 8008f1c:	6063      	str	r3, [r4, #4]
 8008f1e:	bf04      	itt	eq
 8008f20:	1809      	addeq	r1, r1, r0
 8008f22:	6021      	streq	r1, [r4, #0]
 8008f24:	6054      	str	r4, [r2, #4]
 8008f26:	e7ca      	b.n	8008ebe <_free_r+0x22>
 8008f28:	bd38      	pop	{r3, r4, r5, pc}
 8008f2a:	bf00      	nop
 8008f2c:	200028cc 	.word	0x200028cc

08008f30 <__malloc_lock>:
 8008f30:	4801      	ldr	r0, [pc, #4]	@ (8008f38 <__malloc_lock+0x8>)
 8008f32:	f7ff bfa3 	b.w	8008e7c <__retarget_lock_acquire_recursive>
 8008f36:	bf00      	nop
 8008f38:	200028c8 	.word	0x200028c8

08008f3c <__malloc_unlock>:
 8008f3c:	4801      	ldr	r0, [pc, #4]	@ (8008f44 <__malloc_unlock+0x8>)
 8008f3e:	f7ff bf9e 	b.w	8008e7e <__retarget_lock_release_recursive>
 8008f42:	bf00      	nop
 8008f44:	200028c8 	.word	0x200028c8

08008f48 <_init>:
 8008f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4a:	bf00      	nop
 8008f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f4e:	bc08      	pop	{r3}
 8008f50:	469e      	mov	lr, r3
 8008f52:	4770      	bx	lr

08008f54 <_fini>:
 8008f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f56:	bf00      	nop
 8008f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f5a:	bc08      	pop	{r3}
 8008f5c:	469e      	mov	lr, r3
 8008f5e:	4770      	bx	lr
