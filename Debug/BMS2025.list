
BMS2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071b0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08007360  08007360  00008360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f4  080074f4  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  080074f4  080074f4  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074f4  080074f4  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f4  080074f4  000084f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074f8  080074f8  000084f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080074fc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000283c  20000060  0800755c  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000289c  0800755c  0000989c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f61a  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff2  00000000  00000000  000286aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  0002c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000158e  00000000  00000000  0002e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d4b  00000000  00000000  0002f7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee34  00000000  00000000  00033541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d0a5  00000000  00000000  00052375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f41a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079b0  00000000  00000000  0015f460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00166e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007348 	.word	0x08007348

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08007348 	.word	0x08007348

080001f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f4:	f000 ff61 	bl	80010ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f8:	f000 f86c 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fc:	f000 fabc 	bl	8000778 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000200:	f000 f8b8 	bl	8000374 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000204:	f000 f8ec 	bl	80003e0 <MX_CAN2_Init>
  MX_I2C2_Init();
 8000208:	f000 f920 	bl	800044c <MX_I2C2_Init>
  MX_I2C3_Init();
 800020c:	f000 f95e 	bl	80004cc <MX_I2C3_Init>
  MX_I2C4_Init();
 8000210:	f000 f99c 	bl	800054c <MX_I2C4_Init>
  MX_TIM2_Init();
 8000214:	f000 f9da 	bl	80005cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000218:	f000 fa32 	bl	8000680 <MX_TIM3_Init>
  MX_USB_OTG_FS_HCD_Init();
 800021c:	f000 fa8a 	bl	8000734 <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000220:	f004 f9fc 	bl	800461c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000224:	4a19      	ldr	r2, [pc, #100]	@ (800028c <main+0x9c>)
 8000226:	2100      	movs	r1, #0
 8000228:	4819      	ldr	r0, [pc, #100]	@ (8000290 <main+0xa0>)
 800022a:	f004 fa41 	bl	80046b0 <osThreadNew>
 800022e:	4603      	mov	r3, r0
 8000230:	4a18      	ldr	r2, [pc, #96]	@ (8000294 <main+0xa4>)
 8000232:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(StartTask02, NULL, &Voltage_Monitor_attributes);
 8000234:	4a18      	ldr	r2, [pc, #96]	@ (8000298 <main+0xa8>)
 8000236:	2100      	movs	r1, #0
 8000238:	4818      	ldr	r0, [pc, #96]	@ (800029c <main+0xac>)
 800023a:	f004 fa39 	bl	80046b0 <osThreadNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a17      	ldr	r2, [pc, #92]	@ (80002a0 <main+0xb0>)
 8000242:	6013      	str	r3, [r2, #0]

  /* creation of Temp_Monitoring */
  Temp_MonitoringHandle = osThreadNew(StartTask03, NULL, &Temp_Monitoring_attributes);
 8000244:	4a17      	ldr	r2, [pc, #92]	@ (80002a4 <main+0xb4>)
 8000246:	2100      	movs	r1, #0
 8000248:	4817      	ldr	r0, [pc, #92]	@ (80002a8 <main+0xb8>)
 800024a:	f004 fa31 	bl	80046b0 <osThreadNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a16      	ldr	r2, [pc, #88]	@ (80002ac <main+0xbc>)
 8000252:	6013      	str	r3, [r2, #0]

  /* creation of Current_Monitor */
  Current_MonitorHandle = osThreadNew(StartTask04, NULL, &Current_Monitor_attributes);
 8000254:	4a16      	ldr	r2, [pc, #88]	@ (80002b0 <main+0xc0>)
 8000256:	2100      	movs	r1, #0
 8000258:	4816      	ldr	r0, [pc, #88]	@ (80002b4 <main+0xc4>)
 800025a:	f004 fa29 	bl	80046b0 <osThreadNew>
 800025e:	4603      	mov	r3, r0
 8000260:	4a15      	ldr	r2, [pc, #84]	@ (80002b8 <main+0xc8>)
 8000262:	6013      	str	r3, [r2, #0]

  /* creation of Battery_Data_Tr */
  Battery_Data_TrHandle = osThreadNew(StartTask05, NULL, &Battery_Data_Tr_attributes);
 8000264:	4a15      	ldr	r2, [pc, #84]	@ (80002bc <main+0xcc>)
 8000266:	2100      	movs	r1, #0
 8000268:	4815      	ldr	r0, [pc, #84]	@ (80002c0 <main+0xd0>)
 800026a:	f004 fa21 	bl	80046b0 <osThreadNew>
 800026e:	4603      	mov	r3, r0
 8000270:	4a14      	ldr	r2, [pc, #80]	@ (80002c4 <main+0xd4>)
 8000272:	6013      	str	r3, [r2, #0]

  /* creation of Update_Fan_Spee */
  Update_Fan_SpeeHandle = osThreadNew(StartTask06, NULL, &Update_Fan_Spee_attributes);
 8000274:	4a14      	ldr	r2, [pc, #80]	@ (80002c8 <main+0xd8>)
 8000276:	2100      	movs	r1, #0
 8000278:	4814      	ldr	r0, [pc, #80]	@ (80002cc <main+0xdc>)
 800027a:	f004 fa19 	bl	80046b0 <osThreadNew>
 800027e:	4603      	mov	r3, r0
 8000280:	4a13      	ldr	r2, [pc, #76]	@ (80002d0 <main+0xe0>)
 8000282:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000284:	f004 f9ee 	bl	8004664 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000288:	bf00      	nop
 800028a:	e7fd      	b.n	8000288 <main+0x98>
 800028c:	080073d4 	.word	0x080073d4
 8000290:	080008d5 	.word	0x080008d5
 8000294:	20000580 	.word	0x20000580
 8000298:	080073f8 	.word	0x080073f8
 800029c:	080008e5 	.word	0x080008e5
 80002a0:	20000584 	.word	0x20000584
 80002a4:	0800741c 	.word	0x0800741c
 80002a8:	080008f5 	.word	0x080008f5
 80002ac:	20000588 	.word	0x20000588
 80002b0:	08007440 	.word	0x08007440
 80002b4:	08000905 	.word	0x08000905
 80002b8:	2000058c 	.word	0x2000058c
 80002bc:	08007464 	.word	0x08007464
 80002c0:	08000915 	.word	0x08000915
 80002c4:	20000590 	.word	0x20000590
 80002c8:	08007488 	.word	0x08007488
 80002cc:	08000925 	.word	0x08000925
 80002d0:	20000594 	.word	0x20000594

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b096      	sub	sp, #88	@ 0x58
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0314 	add.w	r3, r7, #20
 80002de:	2244      	movs	r2, #68	@ 0x44
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f006 ff48 	bl	8007178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	463b      	mov	r3, r7
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002fa:	f001 fc87 	bl	8001c0c <HAL_PWREx_ControlVoltageScaling>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000304:	f000 fb28 	bl	8000958 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000308:	2301      	movs	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000316:	2303      	movs	r3, #3
 8000318:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800031a:	2301      	movs	r3, #1
 800031c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800031e:	230a      	movs	r3, #10
 8000320:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000322:	2302      	movs	r3, #2
 8000324:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000326:	2302      	movs	r3, #2
 8000328:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800032a:	2302      	movs	r3, #2
 800032c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	4618      	mov	r0, r3
 8000334:	f001 fcd0 	bl	8001cd8 <HAL_RCC_OscConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800033e:	f000 fb0b 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	230f      	movs	r3, #15
 8000344:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000346:	2303      	movs	r3, #3
 8000348:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000356:	463b      	mov	r3, r7
 8000358:	2104      	movs	r1, #4
 800035a:	4618      	mov	r0, r3
 800035c:	f002 f8d6 	bl	800250c <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000366:	f000 faf7 	bl	8000958 <Error_Handler>
  }
}
 800036a:	bf00      	nop
 800036c:	3758      	adds	r7, #88	@ 0x58
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000378:	4b17      	ldr	r3, [pc, #92]	@ (80003d8 <MX_CAN1_Init+0x64>)
 800037a:	4a18      	ldr	r2, [pc, #96]	@ (80003dc <MX_CAN1_Init+0x68>)
 800037c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 800037e:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <MX_CAN1_Init+0x64>)
 8000380:	220a      	movs	r2, #10
 8000382:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000384:	4b14      	ldr	r3, [pc, #80]	@ (80003d8 <MX_CAN1_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800038a:	4b13      	ldr	r3, [pc, #76]	@ (80003d8 <MX_CAN1_Init+0x64>)
 800038c:	2200      	movs	r2, #0
 800038e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000390:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <MX_CAN1_Init+0x64>)
 8000392:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000396:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <MX_CAN1_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <MX_CAN1_Init+0x64>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <MX_CAN1_Init+0x64>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <MX_CAN1_Init+0x64>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80003b0:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <MX_CAN1_Init+0x64>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80003b6:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <MX_CAN1_Init+0x64>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <MX_CAN1_Init+0x64>)
 80003be:	2200      	movs	r2, #0
 80003c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80003c2:	4805      	ldr	r0, [pc, #20]	@ (80003d8 <MX_CAN1_Init+0x64>)
 80003c4:	f000 fed6 	bl	8001174 <HAL_CAN_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80003ce:	f000 fac3 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	2000007c 	.word	0x2000007c
 80003dc:	40006400 	.word	0x40006400

080003e0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80003e4:	4b17      	ldr	r3, [pc, #92]	@ (8000444 <MX_CAN2_Init+0x64>)
 80003e6:	4a18      	ldr	r2, [pc, #96]	@ (8000448 <MX_CAN2_Init+0x68>)
 80003e8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 80003ea:	4b16      	ldr	r3, [pc, #88]	@ (8000444 <MX_CAN2_Init+0x64>)
 80003ec:	220a      	movs	r2, #10
 80003ee:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80003f0:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <MX_CAN2_Init+0x64>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003f6:	4b13      	ldr	r3, [pc, #76]	@ (8000444 <MX_CAN2_Init+0x64>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_14TQ;
 80003fc:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <MX_CAN2_Init+0x64>)
 80003fe:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000402:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <MX_CAN2_Init+0x64>)
 8000406:	2200      	movs	r2, #0
 8000408:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800040a:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <MX_CAN2_Init+0x64>)
 800040c:	2200      	movs	r2, #0
 800040e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000410:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <MX_CAN2_Init+0x64>)
 8000412:	2200      	movs	r2, #0
 8000414:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000416:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <MX_CAN2_Init+0x64>)
 8000418:	2200      	movs	r2, #0
 800041a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800041c:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <MX_CAN2_Init+0x64>)
 800041e:	2200      	movs	r2, #0
 8000420:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000422:	4b08      	ldr	r3, [pc, #32]	@ (8000444 <MX_CAN2_Init+0x64>)
 8000424:	2200      	movs	r2, #0
 8000426:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000428:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <MX_CAN2_Init+0x64>)
 800042a:	2200      	movs	r2, #0
 800042c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800042e:	4805      	ldr	r0, [pc, #20]	@ (8000444 <MX_CAN2_Init+0x64>)
 8000430:	f000 fea0 	bl	8001174 <HAL_CAN_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800043a:	f000 fa8d 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	200000a4 	.word	0x200000a4
 8000448:	40006800 	.word	0x40006800

0800044c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000450:	4b1b      	ldr	r3, [pc, #108]	@ (80004c0 <MX_I2C2_Init+0x74>)
 8000452:	4a1c      	ldr	r2, [pc, #112]	@ (80004c4 <MX_I2C2_Init+0x78>)
 8000454:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000456:	4b1a      	ldr	r3, [pc, #104]	@ (80004c0 <MX_I2C2_Init+0x74>)
 8000458:	4a1b      	ldr	r2, [pc, #108]	@ (80004c8 <MX_I2C2_Init+0x7c>)
 800045a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800045c:	4b18      	ldr	r3, [pc, #96]	@ (80004c0 <MX_I2C2_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000462:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <MX_I2C2_Init+0x74>)
 8000464:	2201      	movs	r2, #1
 8000466:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000468:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <MX_I2C2_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800046e:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <MX_I2C2_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000474:	4b12      	ldr	r3, [pc, #72]	@ (80004c0 <MX_I2C2_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800047a:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <MX_I2C2_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000480:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <MX_I2C2_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000486:	480e      	ldr	r0, [pc, #56]	@ (80004c0 <MX_I2C2_Init+0x74>)
 8000488:	f001 fa7f 	bl	800198a <HAL_I2C_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000492:	f000 fa61 	bl	8000958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000496:	2100      	movs	r1, #0
 8000498:	4809      	ldr	r0, [pc, #36]	@ (80004c0 <MX_I2C2_Init+0x74>)
 800049a:	f001 fb11 	bl	8001ac0 <HAL_I2CEx_ConfigAnalogFilter>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004a4:	f000 fa58 	bl	8000958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004a8:	2100      	movs	r1, #0
 80004aa:	4805      	ldr	r0, [pc, #20]	@ (80004c0 <MX_I2C2_Init+0x74>)
 80004ac:	f001 fb53 	bl	8001b56 <HAL_I2CEx_ConfigDigitalFilter>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004b6:	f000 fa4f 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200000cc 	.word	0x200000cc
 80004c4:	40005800 	.word	0x40005800
 80004c8:	10d19ce4 	.word	0x10d19ce4

080004cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <MX_I2C3_Init+0x74>)
 80004d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000544 <MX_I2C3_Init+0x78>)
 80004d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 80004d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000540 <MX_I2C3_Init+0x74>)
 80004d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000548 <MX_I2C3_Init+0x7c>)
 80004da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80004dc:	4b18      	ldr	r3, [pc, #96]	@ (8000540 <MX_I2C3_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004e2:	4b17      	ldr	r3, [pc, #92]	@ (8000540 <MX_I2C3_Init+0x74>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e8:	4b15      	ldr	r3, [pc, #84]	@ (8000540 <MX_I2C3_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80004ee:	4b14      	ldr	r3, [pc, #80]	@ (8000540 <MX_I2C3_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004f4:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <MX_I2C3_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004fa:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <MX_I2C3_Init+0x74>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000500:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <MX_I2C3_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000506:	480e      	ldr	r0, [pc, #56]	@ (8000540 <MX_I2C3_Init+0x74>)
 8000508:	f001 fa3f 	bl	800198a <HAL_I2C_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000512:	f000 fa21 	bl	8000958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000516:	2100      	movs	r1, #0
 8000518:	4809      	ldr	r0, [pc, #36]	@ (8000540 <MX_I2C3_Init+0x74>)
 800051a:	f001 fad1 	bl	8001ac0 <HAL_I2CEx_ConfigAnalogFilter>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000524:	f000 fa18 	bl	8000958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000528:	2100      	movs	r1, #0
 800052a:	4805      	ldr	r0, [pc, #20]	@ (8000540 <MX_I2C3_Init+0x74>)
 800052c:	f001 fb13 	bl	8001b56 <HAL_I2CEx_ConfigDigitalFilter>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000536:	f000 fa0f 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000120 	.word	0x20000120
 8000544:	40005c00 	.word	0x40005c00
 8000548:	10d19ce4 	.word	0x10d19ce4

0800054c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000550:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_I2C4_Init+0x74>)
 8000552:	4a1c      	ldr	r2, [pc, #112]	@ (80005c4 <MX_I2C4_Init+0x78>)
 8000554:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10D19CE4;
 8000556:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <MX_I2C4_Init+0x74>)
 8000558:	4a1b      	ldr	r2, [pc, #108]	@ (80005c8 <MX_I2C4_Init+0x7c>)
 800055a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800055c:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <MX_I2C4_Init+0x74>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000562:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <MX_I2C4_Init+0x74>)
 8000564:	2201      	movs	r2, #1
 8000566:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000568:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <MX_I2C4_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800056e:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <MX_I2C4_Init+0x74>)
 8000570:	2200      	movs	r2, #0
 8000572:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <MX_I2C4_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800057a:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <MX_I2C4_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000580:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <MX_I2C4_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000586:	480e      	ldr	r0, [pc, #56]	@ (80005c0 <MX_I2C4_Init+0x74>)
 8000588:	f001 f9ff 	bl	800198a <HAL_I2C_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000592:	f000 f9e1 	bl	8000958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000596:	2100      	movs	r1, #0
 8000598:	4809      	ldr	r0, [pc, #36]	@ (80005c0 <MX_I2C4_Init+0x74>)
 800059a:	f001 fa91 	bl	8001ac0 <HAL_I2CEx_ConfigAnalogFilter>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80005a4:	f000 f9d8 	bl	8000958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80005a8:	2100      	movs	r1, #0
 80005aa:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <MX_I2C4_Init+0x74>)
 80005ac:	f001 fad3 	bl	8001b56 <HAL_I2CEx_ConfigDigitalFilter>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80005b6:	f000 f9cf 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000174 	.word	0x20000174
 80005c4:	40008400 	.word	0x40008400
 80005c8:	10d19ce4 	.word	0x10d19ce4

080005cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
 80005ec:	615a      	str	r2, [r3, #20]
 80005ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f0:	4b22      	ldr	r3, [pc, #136]	@ (800067c <MX_TIM2_Init+0xb0>)
 80005f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005f8:	4b20      	ldr	r3, [pc, #128]	@ (800067c <MX_TIM2_Init+0xb0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fe:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <MX_TIM2_Init+0xb0>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000604:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <MX_TIM2_Init+0xb0>)
 8000606:	f04f 32ff 	mov.w	r2, #4294967295
 800060a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060c:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <MX_TIM2_Init+0xb0>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000612:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <MX_TIM2_Init+0xb0>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000618:	4818      	ldr	r0, [pc, #96]	@ (800067c <MX_TIM2_Init+0xb0>)
 800061a:	f002 ff51 	bl	80034c0 <HAL_TIM_PWM_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000624:	f000 f998 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4619      	mov	r1, r3
 8000636:	4811      	ldr	r0, [pc, #68]	@ (800067c <MX_TIM2_Init+0xb0>)
 8000638:	f003 fd58 	bl	80040ec <HAL_TIMEx_MasterConfigSynchronization>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000642:	f000 f989 	bl	8000958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000646:	2360      	movs	r3, #96	@ 0x60
 8000648:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	4619      	mov	r1, r3
 800065c:	4807      	ldr	r0, [pc, #28]	@ (800067c <MX_TIM2_Init+0xb0>)
 800065e:	f003 f88d 	bl	800377c <HAL_TIM_PWM_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000668:	f000 f976 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800066c:	4803      	ldr	r0, [pc, #12]	@ (800067c <MX_TIM2_Init+0xb0>)
 800066e:	f000 fb61 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 8000672:	bf00      	nop
 8000674:	3728      	adds	r7, #40	@ 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200001c8 	.word	0x200001c8

08000680 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a4:	4b21      	ldr	r3, [pc, #132]	@ (800072c <MX_TIM3_Init+0xac>)
 80006a6:	4a22      	ldr	r2, [pc, #136]	@ (8000730 <MX_TIM3_Init+0xb0>)
 80006a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006aa:	4b20      	ldr	r3, [pc, #128]	@ (800072c <MX_TIM3_Init+0xac>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <MX_TIM3_Init+0xac>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <MX_TIM3_Init+0xac>)
 80006b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006be:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <MX_TIM3_Init+0xac>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c4:	4b19      	ldr	r3, [pc, #100]	@ (800072c <MX_TIM3_Init+0xac>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006ca:	4818      	ldr	r0, [pc, #96]	@ (800072c <MX_TIM3_Init+0xac>)
 80006cc:	f002 fef8 	bl	80034c0 <HAL_TIM_PWM_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80006d6:	f000 f93f 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	4619      	mov	r1, r3
 80006e8:	4810      	ldr	r0, [pc, #64]	@ (800072c <MX_TIM3_Init+0xac>)
 80006ea:	f003 fcff 	bl	80040ec <HAL_TIMEx_MasterConfigSynchronization>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80006f4:	f000 f930 	bl	8000958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f8:	2360      	movs	r3, #96	@ 0x60
 80006fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	4619      	mov	r1, r3
 800070e:	4807      	ldr	r0, [pc, #28]	@ (800072c <MX_TIM3_Init+0xac>)
 8000710:	f003 f834 	bl	800377c <HAL_TIM_PWM_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800071a:	f000 f91d 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800071e:	4803      	ldr	r0, [pc, #12]	@ (800072c <MX_TIM3_Init+0xac>)
 8000720:	f000 fb08 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	@ 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000214 	.word	0x20000214
 8000730:	40000400 	.word	0x40000400

08000734 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800073a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800073e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000742:	220c      	movs	r2, #12
 8000744:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000748:	2201      	movs	r2, #1
 800074a:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800074e:	2200      	movs	r2, #0
 8000750:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000754:	2202      	movs	r2, #2
 8000756:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800075a:	2200      	movs	r2, #0
 800075c:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000760:	f001 f8b3 	bl	80018ca <HAL_HCD_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 800076a:	f000 f8f5 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000260 	.word	0x20000260

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	@ 0x28
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4b4e      	ldr	r3, [pc, #312]	@ (80008c8 <MX_GPIO_Init+0x150>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a4d      	ldr	r2, [pc, #308]	@ (80008c8 <MX_GPIO_Init+0x150>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b4b      	ldr	r3, [pc, #300]	@ (80008c8 <MX_GPIO_Init+0x150>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b48      	ldr	r3, [pc, #288]	@ (80008c8 <MX_GPIO_Init+0x150>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	4a47      	ldr	r2, [pc, #284]	@ (80008c8 <MX_GPIO_Init+0x150>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b2:	4b45      	ldr	r3, [pc, #276]	@ (80008c8 <MX_GPIO_Init+0x150>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b42      	ldr	r3, [pc, #264]	@ (80008c8 <MX_GPIO_Init+0x150>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	4a41      	ldr	r2, [pc, #260]	@ (80008c8 <MX_GPIO_Init+0x150>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ca:	4b3f      	ldr	r3, [pc, #252]	@ (80008c8 <MX_GPIO_Init+0x150>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b3c      	ldr	r3, [pc, #240]	@ (80008c8 <MX_GPIO_Init+0x150>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4a3b      	ldr	r2, [pc, #236]	@ (80008c8 <MX_GPIO_Init+0x150>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e2:	4b39      	ldr	r3, [pc, #228]	@ (80008c8 <MX_GPIO_Init+0x150>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2134      	movs	r1, #52	@ 0x34
 80007f2:	4836      	ldr	r0, [pc, #216]	@ (80008cc <MX_GPIO_Init+0x154>)
 80007f4:	f001 f82e 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 80007f8:	2200      	movs	r2, #0
 80007fa:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000802:	f001 f827 	bl	8001854 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2107      	movs	r1, #7
 800080a:	4831      	ldr	r0, [pc, #196]	@ (80008d0 <MX_GPIO_Init+0x158>)
 800080c:	f001 f822 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8000810:	2334      	movs	r3, #52	@ 0x34
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4829      	ldr	r0, [pc, #164]	@ (80008cc <MX_GPIO_Init+0x154>)
 8000828:	f000 fe82 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800082c:	2308      	movs	r3, #8
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000830:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4822      	ldr	r0, [pc, #136]	@ (80008cc <MX_GPIO_Init+0x154>)
 8000842:	f000 fe75 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 PA7
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 8000846:	f240 43c3 	movw	r3, #1219	@ 0x4c3
 800084a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000862:	f000 fe65 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000866:	2320      	movs	r3, #32
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087e:	f000 fe57 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000882:	2307      	movs	r3, #7
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	480d      	ldr	r0, [pc, #52]	@ (80008d0 <MX_GPIO_Init+0x158>)
 800089a:	f000 fe49 	bl	8001530 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2009      	movs	r0, #9
 80008a4:	f000 fe1a 	bl	80014dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008a8:	2009      	movs	r0, #9
 80008aa:	f000 fe33 	bl	8001514 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	2017      	movs	r0, #23
 80008b4:	f000 fe12 	bl	80014dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008b8:	2017      	movs	r0, #23
 80008ba:	f000 fe2b 	bl	8001514 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	@ 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000800 	.word	0x48000800
 80008d0:	48000400 	.word	0x48000400

080008d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008dc:	2001      	movs	r0, #1
 80008de:	f003 ff79 	bl	80047d4 <osDelay>
 80008e2:	e7fb      	b.n	80008dc <StartDefaultTask+0x8>

080008e4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f003 ff71 	bl	80047d4 <osDelay>
 80008f2:	e7fb      	b.n	80008ec <StartTask02+0x8>

080008f4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f003 ff69 	bl	80047d4 <osDelay>
 8000902:	e7fb      	b.n	80008fc <StartTask03+0x8>

08000904 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f003 ff61 	bl	80047d4 <osDelay>
 8000912:	e7fb      	b.n	800090c <StartTask04+0x8>

08000914 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f003 ff59 	bl	80047d4 <osDelay>
 8000922:	e7fb      	b.n	800091c <StartTask05+0x8>

08000924 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800092c:	2001      	movs	r0, #1
 800092e:	f003 ff51 	bl	80047d4 <osDelay>
 8000932:	e7fb      	b.n	800092c <StartTask06+0x8>

08000934 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d101      	bne.n	800094a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000946:	f000 fbd1 	bl	80010ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40012c00 	.word	0x40012c00

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <Error_Handler+0x8>

08000964 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <HAL_MspInit+0x4c>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800096e:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6613      	str	r3, [r2, #96]	@ 0x60
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098c:	6593      	str	r3, [r2, #88]	@ 0x58
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	210f      	movs	r1, #15
 800099e:	f06f 0001 	mvn.w	r0, #1
 80009a2:	f000 fd9b 	bl	80014dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	@ 0x30
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a45      	ldr	r2, [pc, #276]	@ (8000ae8 <HAL_CAN_MspInit+0x134>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d132      	bne.n	8000a3c <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009d6:	4b45      	ldr	r3, [pc, #276]	@ (8000aec <HAL_CAN_MspInit+0x138>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	4a43      	ldr	r2, [pc, #268]	@ (8000aec <HAL_CAN_MspInit+0x138>)
 80009de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80009e0:	4b42      	ldr	r3, [pc, #264]	@ (8000aec <HAL_CAN_MspInit+0x138>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d10b      	bne.n	8000a00 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009e8:	4b41      	ldr	r3, [pc, #260]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 80009ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ec:	4a40      	ldr	r2, [pc, #256]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 80009ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f4:	4b3e      	ldr	r3, [pc, #248]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 80009f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009fc:	61bb      	str	r3, [r7, #24]
 80009fe:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a00:	4b3b      	ldr	r3, [pc, #236]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a04:	4a3a      	ldr	r2, [pc, #232]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 8000a06:	f043 0302 	orr.w	r3, r3, #2
 8000a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0c:	4b38      	ldr	r3, [pc, #224]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a18:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a2a:	2309      	movs	r3, #9
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	482f      	ldr	r0, [pc, #188]	@ (8000af4 <HAL_CAN_MspInit+0x140>)
 8000a36:	f000 fd7b 	bl	8001530 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000a3a:	e051      	b.n	8000ae0 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a2d      	ldr	r2, [pc, #180]	@ (8000af8 <HAL_CAN_MspInit+0x144>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d14c      	bne.n	8000ae0 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000a46:	4b2a      	ldr	r3, [pc, #168]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4a:	4a29      	ldr	r2, [pc, #164]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 8000a4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a52:	4b27      	ldr	r3, [pc, #156]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a5e:	4b23      	ldr	r3, [pc, #140]	@ (8000aec <HAL_CAN_MspInit+0x138>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	4a21      	ldr	r2, [pc, #132]	@ (8000aec <HAL_CAN_MspInit+0x138>)
 8000a66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a68:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <HAL_CAN_MspInit+0x138>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d10b      	bne.n	8000a88 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a70:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 8000a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a74:	4a1e      	ldr	r2, [pc, #120]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 8000a76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 8000a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8c:	4a18      	ldr	r2, [pc, #96]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <HAL_CAN_MspInit+0x13c>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aa0:	2320      	movs	r3, #32
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480e      	ldr	r0, [pc, #56]	@ (8000af4 <HAL_CAN_MspInit+0x140>)
 8000abc:	f000 fd38 	bl	8001530 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ac0:	2340      	movs	r3, #64	@ 0x40
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	@ (8000af4 <HAL_CAN_MspInit+0x140>)
 8000adc:	f000 fd28 	bl	8001530 <HAL_GPIO_Init>
}
 8000ae0:	bf00      	nop
 8000ae2:	3730      	adds	r7, #48	@ 0x30
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40006400 	.word	0x40006400
 8000aec:	20000598 	.word	0x20000598
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48000400 	.word	0x48000400
 8000af8:	40006800 	.word	0x40006800

08000afc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0b0      	sub	sp, #192	@ 0xc0
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b14:	f107 0320 	add.w	r3, r7, #32
 8000b18:	228c      	movs	r2, #140	@ 0x8c
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f006 fb2b 	bl	8007178 <memset>
  if(hi2c->Instance==I2C2)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a64      	ldr	r2, [pc, #400]	@ (8000cb8 <HAL_I2C_MspInit+0x1bc>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d13c      	bne.n	8000ba6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 ff25 	bl	8002988 <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b44:	f7ff ff08 	bl	8000958 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b5c      	ldr	r3, [pc, #368]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4c:	4a5b      	ldr	r2, [pc, #364]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000b4e:	f043 0302 	orr.w	r3, r3, #2
 8000b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b54:	4b59      	ldr	r3, [pc, #356]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	61fb      	str	r3, [r7, #28]
 8000b5e:	69fb      	ldr	r3, [r7, #28]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000b60:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000b64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b84:	4619      	mov	r1, r3
 8000b86:	484e      	ldr	r0, [pc, #312]	@ (8000cc0 <HAL_I2C_MspInit+0x1c4>)
 8000b88:	f000 fcd2 	bl	8001530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b90:	4a4a      	ldr	r2, [pc, #296]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000b92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b96:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b98:	4b48      	ldr	r3, [pc, #288]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ba0:	61bb      	str	r3, [r7, #24]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000ba4:	e083      	b.n	8000cae <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C3)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a46      	ldr	r2, [pc, #280]	@ (8000cc4 <HAL_I2C_MspInit+0x1c8>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d13c      	bne.n	8000c2a <HAL_I2C_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000bb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bb4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fee2 	bl	8002988 <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8000bca:	f7ff fec5 	bl	8000958 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	4b3b      	ldr	r3, [pc, #236]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	4a3a      	ldr	r2, [pc, #232]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bda:	4b38      	ldr	r3, [pc, #224]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000be6:	2303      	movs	r3, #3
 8000be8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bec:	2312      	movs	r3, #18
 8000bee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c08:	4619      	mov	r1, r3
 8000c0a:	482f      	ldr	r0, [pc, #188]	@ (8000cc8 <HAL_I2C_MspInit+0x1cc>)
 8000c0c:	f000 fc90 	bl	8001530 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c10:	4b2a      	ldr	r3, [pc, #168]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c14:	4a29      	ldr	r2, [pc, #164]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000c16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c1c:	4b27      	ldr	r3, [pc, #156]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
}
 8000c28:	e041      	b.n	8000cae <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C4)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a27      	ldr	r2, [pc, #156]	@ (8000ccc <HAL_I2C_MspInit+0x1d0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d13c      	bne.n	8000cae <HAL_I2C_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000c34:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c38:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fea0 	bl	8002988 <HAL_RCCEx_PeriphCLKConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_I2C_MspInit+0x156>
      Error_Handler();
 8000c4e:	f7ff fe83 	bl	8000958 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	4a19      	ldr	r2, [pc, #100]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5e:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c6a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c72:	2312      	movs	r3, #18
 8000c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8000c84:	2303      	movs	r3, #3
 8000c86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480b      	ldr	r0, [pc, #44]	@ (8000cc0 <HAL_I2C_MspInit+0x1c4>)
 8000c92:	f000 fc4d 	bl	8001530 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c9a:	4a08      	ldr	r2, [pc, #32]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_I2C_MspInit+0x1c0>)
 8000ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
}
 8000cae:	bf00      	nop
 8000cb0:	37c0      	adds	r7, #192	@ 0xc0
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40005800 	.word	0x40005800
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	48000400 	.word	0x48000400
 8000cc4:	40005c00 	.word	0x40005c00
 8000cc8:	48000800 	.word	0x48000800
 8000ccc:	40008400 	.word	0x40008400

08000cd0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ce0:	d10c      	bne.n	8000cfc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x5c>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce6:	4a11      	ldr	r2, [pc, #68]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x5c>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x5c>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cfa:	e010      	b.n	8000d1e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0b      	ldr	r2, [pc, #44]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x60>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10b      	bne.n	8000d1e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x5c>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0a:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x5c>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x5c>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40000400 	.word	0x40000400

08000d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	@ 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d54:	d11e      	bne.n	8000d94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b22      	ldr	r3, [pc, #136]	@ (8000de0 <HAL_TIM_MspPostInit+0xac>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	4a21      	ldr	r2, [pc, #132]	@ (8000de0 <HAL_TIM_MspPostInit+0xac>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d62:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <HAL_TIM_MspPostInit+0xac>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d80:	2301      	movs	r3, #1
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8e:	f000 fbcf 	bl	8001530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d92:	e020      	b.n	8000dd6 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <HAL_TIM_MspPostInit+0xb0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d11b      	bne.n	8000dd6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <HAL_TIM_MspPostInit+0xac>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	4a0f      	ldr	r2, [pc, #60]	@ (8000de0 <HAL_TIM_MspPostInit+0xac>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000daa:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <HAL_TIM_MspPostInit+0xac>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000db6:	2310      	movs	r3, #16
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <HAL_TIM_MspPostInit+0xb4>)
 8000dd2:	f000 fbad 	bl	8001530 <HAL_GPIO_Init>
}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	@ 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40000400 	.word	0x40000400
 8000de8:	48000400 	.word	0x48000400

08000dec <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0ae      	sub	sp, #184	@ 0xb8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	228c      	movs	r2, #140	@ 0x8c
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f006 f9b3 	bl	8007178 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e1a:	d16b      	bne.n	8000ef4 <HAL_HCD_MspInit+0x108>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e22:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000e26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000e32:	230c      	movs	r3, #12
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000e42:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e46:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fd9b 	bl	8002988 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 8000e58:	f7ff fd7e 	bl	8000958 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b27      	ldr	r3, [pc, #156]	@ (8000efc <HAL_HCD_MspInit+0x110>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e60:	4a26      	ldr	r2, [pc, #152]	@ (8000efc <HAL_HCD_MspInit+0x110>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e68:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <HAL_HCD_MspInit+0x110>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e74:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e8e:	230a      	movs	r3, #10
 8000e90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9e:	f000 fb47 	bl	8001530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <HAL_HCD_MspInit+0x110>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	4a15      	ldr	r2, [pc, #84]	@ (8000efc <HAL_HCD_MspInit+0x110>)
 8000ea8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <HAL_HCD_MspInit+0x110>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <HAL_HCD_MspInit+0x110>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d114      	bne.n	8000ef0 <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8000efc <HAL_HCD_MspInit+0x110>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eca:	4a0c      	ldr	r2, [pc, #48]	@ (8000efc <HAL_HCD_MspInit+0x110>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <HAL_HCD_MspInit+0x110>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000ede:	f000 feeb 	bl	8001cb8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_HCD_MspInit+0x110>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <HAL_HCD_MspInit+0x110>)
 8000ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000eec:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000eee:	e001      	b.n	8000ef4 <HAL_HCD_MspInit+0x108>
      HAL_PWREx_EnableVddUSB();
 8000ef0:	f000 fee2 	bl	8001cb8 <HAL_PWREx_EnableVddUSB>
}
 8000ef4:	bf00      	nop
 8000ef6:	37b8      	adds	r7, #184	@ 0xb8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021000 	.word	0x40021000

08000f00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	@ 0x30
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc8 <HAL_InitTick+0xc8>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f12:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc8 <HAL_InitTick+0xc8>)
 8000f14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f18:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc8 <HAL_InitTick+0xc8>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f26:	f107 020c 	add.w	r2, r7, #12
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 fc97 	bl	8002864 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f36:	f001 fc7f 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 8000f3a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f3e:	4a23      	ldr	r2, [pc, #140]	@ (8000fcc <HAL_InitTick+0xcc>)
 8000f40:	fba2 2303 	umull	r2, r3, r2, r3
 8000f44:	0c9b      	lsrs	r3, r3, #18
 8000f46:	3b01      	subs	r3, #1
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f4c:	4a21      	ldr	r2, [pc, #132]	@ (8000fd4 <HAL_InitTick+0xd4>)
 8000f4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f56:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f58:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f70:	4817      	ldr	r0, [pc, #92]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f72:	f002 f9d3 	bl	800331c <HAL_TIM_Base_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d11b      	bne.n	8000fbc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f84:	4812      	ldr	r0, [pc, #72]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f86:	f002 fa2b 	bl	80033e0 <HAL_TIM_Base_Start_IT>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d111      	bne.n	8000fbc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f98:	2019      	movs	r0, #25
 8000f9a:	f000 fabb 	bl	8001514 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d808      	bhi.n	8000fb6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	2019      	movs	r0, #25
 8000faa:	f000 fa97 	bl	80014dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <HAL_InitTick+0xd8>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	e002      	b.n	8000fbc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3730      	adds	r7, #48	@ 0x30
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	431bde83 	.word	0x431bde83
 8000fd0:	2000059c 	.word	0x2000059c
 8000fd4:	40012c00 	.word	0x40012c00
 8000fd8:	20000004 	.word	0x20000004

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <UsageFault_Handler+0x4>

08001004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001016:	2008      	movs	r0, #8
 8001018:	f000 fc34 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001024:	2020      	movs	r0, #32
 8001026:	f000 fc2d 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001036:	f002 fa9a 	bl	800356e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000059c 	.word	0x2000059c

08001044 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800106c:	f7ff ffea 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	@ (80010a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	@ (80010b4 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001096:	f006 f8cd 	bl	8007234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109a:	f7ff f8a9 	bl	80001f0 <main>

0800109e <LoopForever>:

LoopForever:
    b LoopForever
 800109e:	e7fe      	b.n	800109e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010ac:	080074fc 	.word	0x080074fc
  ldr r2, =_sbss
 80010b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010b4:	2000289c 	.word	0x2000289c

080010b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_2_IRQHandler>

080010ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f9fe 	bl	80014c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ca:	200f      	movs	r0, #15
 80010cc:	f7ff ff18 	bl	8000f00 <HAL_InitTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	e001      	b.n	80010e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010dc:	f7ff fc42 	bl	8000964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <HAL_IncTick+0x20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_IncTick+0x24>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <HAL_IncTick+0x24>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008
 8001110:	200005e8 	.word	0x200005e8

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200005e8 	.word	0x200005e8

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff ffee 	bl	8001114 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001146:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <HAL_Delay+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001152:	bf00      	nop
 8001154:	f7ff ffde 	bl	8001114 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008

08001174 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e0ed      	b.n	8001362 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fc0e 	bl	80009b4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0201 	orr.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a8:	f7ff ffb4 	bl	8001114 <HAL_GetTick>
 80011ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ae:	e012      	b.n	80011d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011b0:	f7ff ffb0 	bl	8001114 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b0a      	cmp	r3, #10
 80011bc:	d90b      	bls.n	80011d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2205      	movs	r2, #5
 80011ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e0c5      	b.n	8001362 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0e5      	beq.n	80011b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0202 	bic.w	r2, r2, #2
 80011f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f4:	f7ff ff8e 	bl	8001114 <HAL_GetTick>
 80011f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011fa:	e012      	b.n	8001222 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011fc:	f7ff ff8a 	bl	8001114 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b0a      	cmp	r3, #10
 8001208:	d90b      	bls.n	8001222 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2205      	movs	r2, #5
 800121a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e09f      	b.n	8001362 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1e5      	bne.n	80011fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7e1b      	ldrb	r3, [r3, #24]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d108      	bne.n	800124a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e007      	b.n	800125a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7e5b      	ldrb	r3, [r3, #25]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d108      	bne.n	8001274 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	e007      	b.n	8001284 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001282:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7e9b      	ldrb	r3, [r3, #26]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d108      	bne.n	800129e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0220 	orr.w	r2, r2, #32
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e007      	b.n	80012ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0220 	bic.w	r2, r2, #32
 80012ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7edb      	ldrb	r3, [r3, #27]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d108      	bne.n	80012c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0210 	bic.w	r2, r2, #16
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	e007      	b.n	80012d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0210 	orr.w	r2, r2, #16
 80012d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	7f1b      	ldrb	r3, [r3, #28]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d108      	bne.n	80012f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0208 	orr.w	r2, r2, #8
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	e007      	b.n	8001302 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0208 	bic.w	r2, r2, #8
 8001300:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7f5b      	ldrb	r3, [r3, #29]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d108      	bne.n	800131c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f042 0204 	orr.w	r2, r2, #4
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	e007      	b.n	800132c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0204 	bic.w	r2, r2, #4
 800132a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	ea42 0103 	orr.w	r1, r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	1e5a      	subs	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001394:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f003 021f 	and.w	r2, r3, #31
 80013e8:	4907      	ldr	r1, [pc, #28]	@ (8001408 <__NVIC_EnableIRQ+0x38>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	@ (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	@ (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	@ 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	@ 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ff4c 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014ee:	f7ff ff61 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 80014f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	68b9      	ldr	r1, [r7, #8]
 80014f8:	6978      	ldr	r0, [r7, #20]
 80014fa:	f7ff ffb1 	bl	8001460 <NVIC_EncodePriority>
 80014fe:	4602      	mov	r2, r0
 8001500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff80 	bl	800140c <__NVIC_SetPriority>
}
 800150c:	bf00      	nop
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff54 	bl	80013d0 <__NVIC_EnableIRQ>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153e:	e166      	b.n	800180e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8158 	beq.w	8001808 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d005      	beq.n	8001570 <HAL_GPIO_Init+0x40>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d130      	bne.n	80015d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015a6:	2201      	movs	r2, #1
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f003 0201 	and.w	r2, r3, #1
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d017      	beq.n	800160e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d123      	bne.n	8001662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	220f      	movs	r2, #15
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	6939      	ldr	r1, [r7, #16]
 800165e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0203 	and.w	r2, r3, #3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80b2 	beq.w	8001808 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a4:	4b61      	ldr	r3, [pc, #388]	@ (800182c <HAL_GPIO_Init+0x2fc>)
 80016a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a8:	4a60      	ldr	r2, [pc, #384]	@ (800182c <HAL_GPIO_Init+0x2fc>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80016b0:	4b5e      	ldr	r3, [pc, #376]	@ (800182c <HAL_GPIO_Init+0x2fc>)
 80016b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016bc:	4a5c      	ldr	r2, [pc, #368]	@ (8001830 <HAL_GPIO_Init+0x300>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016e6:	d02b      	beq.n	8001740 <HAL_GPIO_Init+0x210>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a52      	ldr	r2, [pc, #328]	@ (8001834 <HAL_GPIO_Init+0x304>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d025      	beq.n	800173c <HAL_GPIO_Init+0x20c>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a51      	ldr	r2, [pc, #324]	@ (8001838 <HAL_GPIO_Init+0x308>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d01f      	beq.n	8001738 <HAL_GPIO_Init+0x208>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a50      	ldr	r2, [pc, #320]	@ (800183c <HAL_GPIO_Init+0x30c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d019      	beq.n	8001734 <HAL_GPIO_Init+0x204>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a4f      	ldr	r2, [pc, #316]	@ (8001840 <HAL_GPIO_Init+0x310>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d013      	beq.n	8001730 <HAL_GPIO_Init+0x200>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a4e      	ldr	r2, [pc, #312]	@ (8001844 <HAL_GPIO_Init+0x314>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d00d      	beq.n	800172c <HAL_GPIO_Init+0x1fc>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a4d      	ldr	r2, [pc, #308]	@ (8001848 <HAL_GPIO_Init+0x318>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d007      	beq.n	8001728 <HAL_GPIO_Init+0x1f8>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a4c      	ldr	r2, [pc, #304]	@ (800184c <HAL_GPIO_Init+0x31c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_GPIO_Init+0x1f4>
 8001720:	2307      	movs	r3, #7
 8001722:	e00e      	b.n	8001742 <HAL_GPIO_Init+0x212>
 8001724:	2308      	movs	r3, #8
 8001726:	e00c      	b.n	8001742 <HAL_GPIO_Init+0x212>
 8001728:	2306      	movs	r3, #6
 800172a:	e00a      	b.n	8001742 <HAL_GPIO_Init+0x212>
 800172c:	2305      	movs	r3, #5
 800172e:	e008      	b.n	8001742 <HAL_GPIO_Init+0x212>
 8001730:	2304      	movs	r3, #4
 8001732:	e006      	b.n	8001742 <HAL_GPIO_Init+0x212>
 8001734:	2303      	movs	r3, #3
 8001736:	e004      	b.n	8001742 <HAL_GPIO_Init+0x212>
 8001738:	2302      	movs	r3, #2
 800173a:	e002      	b.n	8001742 <HAL_GPIO_Init+0x212>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <HAL_GPIO_Init+0x212>
 8001740:	2300      	movs	r3, #0
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	f002 0203 	and.w	r2, r2, #3
 8001748:	0092      	lsls	r2, r2, #2
 800174a:	4093      	lsls	r3, r2
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001752:	4937      	ldr	r1, [pc, #220]	@ (8001830 <HAL_GPIO_Init+0x300>)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	3302      	adds	r3, #2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001760:	4b3b      	ldr	r3, [pc, #236]	@ (8001850 <HAL_GPIO_Init+0x320>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	43db      	mvns	r3, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001784:	4a32      	ldr	r2, [pc, #200]	@ (8001850 <HAL_GPIO_Init+0x320>)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800178a:	4b31      	ldr	r3, [pc, #196]	@ (8001850 <HAL_GPIO_Init+0x320>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017ae:	4a28      	ldr	r2, [pc, #160]	@ (8001850 <HAL_GPIO_Init+0x320>)
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017b4:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <HAL_GPIO_Init+0x320>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001850 <HAL_GPIO_Init+0x320>)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017de:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <HAL_GPIO_Init+0x320>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001802:	4a13      	ldr	r2, [pc, #76]	@ (8001850 <HAL_GPIO_Init+0x320>)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	f47f ae91 	bne.w	8001540 <HAL_GPIO_Init+0x10>
  }
}
 800181e:	bf00      	nop
 8001820:	bf00      	nop
 8001822:	371c      	adds	r7, #28
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40021000 	.word	0x40021000
 8001830:	40010000 	.word	0x40010000
 8001834:	48000400 	.word	0x48000400
 8001838:	48000800 	.word	0x48000800
 800183c:	48000c00 	.word	0x48000c00
 8001840:	48001000 	.word	0x48001000
 8001844:	48001400 	.word	0x48001400
 8001848:	48001800 	.word	0x48001800
 800184c:	48001c00 	.word	0x48001c00
 8001850:	40010400 	.word	0x40010400

08001854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001870:	e002      	b.n	8001878 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800188e:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800189a:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f806 	bl	80018b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af02      	add	r7, sp, #8
 80018d0:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e052      	b.n	8001982 <HAL_HCD_Init+0xb8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3315 	ldrb.w	r3, [r3, #789]	@ 0x315
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d106      	bne.n	80018f6 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fa7b 	bl	8000dec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2203      	movs	r2, #3
 80018fa:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315

  /* Disable DMA mode for FS instance */
  hhcd->Init.dma_enable = 0U;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f002 fcc2 	bl	8004292 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7c1a      	ldrb	r2, [r3, #16]
 8001916:	f88d 2000 	strb.w	r2, [sp]
 800191a:	3304      	adds	r3, #4
 800191c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800191e:	f002 fc8b 	bl	8004238 <USB_CoreInit>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_HCD_Init+0x6a>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e026      	b.n	8001982 <HAL_HCD_Init+0xb8>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	4618      	mov	r0, r3
 800193c:	f002 fcba 	bl	80042b4 <USB_SetCurrentMode>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_HCD_Init+0x88>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2202      	movs	r2, #2
 800194a:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e017      	b.n	8001982 <HAL_HCD_Init+0xb8>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7c1a      	ldrb	r2, [r3, #16]
 800195a:	f88d 2000 	strb.w	r2, [sp]
 800195e:	3304      	adds	r3, #4
 8001960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001962:	f002 fd93 	bl	800448c <USB_HostInit>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_HCD_Init+0xae>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e004      	b.n	8001982 <HAL_HCD_Init+0xb8>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e08d      	b.n	8001ab8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d106      	bne.n	80019b6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff f8a3 	bl	8000afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2224      	movs	r2, #36	@ 0x24
 80019ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0201 	bic.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d107      	bne.n	8001a04 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	e006      	b.n	8001a12 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d108      	bne.n	8001a2c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	e007      	b.n	8001a3c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a3a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a4e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69d9      	ldr	r1, [r3, #28]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1a      	ldr	r2, [r3, #32]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 0201 	orr.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	d138      	bne.n	8001b48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e032      	b.n	8001b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2224      	movs	r2, #36	@ 0x24
 8001af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b48:	2302      	movs	r3, #2
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d139      	bne.n	8001be0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e033      	b.n	8001be2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2224      	movs	r2, #36	@ 0x24
 8001b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0201 	bic.w	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ba8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e000      	b.n	8001be2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
  }
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bf4:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40007000 	.word	0x40007000

08001c0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c1a:	d130      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c1c:	4b23      	ldr	r3, [pc, #140]	@ (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c28:	d038      	beq.n	8001c9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c2a:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c32:	4a1e      	ldr	r2, [pc, #120]	@ (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2232      	movs	r2, #50	@ 0x32
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0c9b      	lsrs	r3, r3, #18
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c50:	e002      	b.n	8001c58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c58:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c64:	d102      	bne.n	8001c6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f2      	bne.n	8001c52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c78:	d110      	bne.n	8001c9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e00f      	b.n	8001c9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c8a:	d007      	beq.n	8001c9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c8c:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c94:	4a05      	ldr	r2, [pc, #20]	@ (8001cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40007000 	.word	0x40007000
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	431bde83 	.word	0x431bde83

08001cb8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001cc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cc6:	6053      	str	r3, [r2, #4]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40007000 	.word	0x40007000

08001cd8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f000 bc08 	b.w	80024fc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cec:	4b96      	ldr	r3, [pc, #600]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf6:	4b94      	ldr	r3, [pc, #592]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80e4 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <HAL_RCC_OscConfig+0x4c>
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	f040 808b 	bne.w	8001e32 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	f040 8087 	bne.w	8001e32 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d24:	4b88      	ldr	r3, [pc, #544]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_OscConfig+0x64>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e3df      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1a      	ldr	r2, [r3, #32]
 8001d40:	4b81      	ldr	r3, [pc, #516]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <HAL_RCC_OscConfig+0x7e>
 8001d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d54:	e005      	b.n	8001d62 <HAL_RCC_OscConfig+0x8a>
 8001d56:	4b7c      	ldr	r3, [pc, #496]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d223      	bcs.n	8001dae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fdac 	bl	80028c8 <RCC_SetFlashLatencyFromMSIRange>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e3c0      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d7a:	4b73      	ldr	r3, [pc, #460]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a72      	ldr	r2, [pc, #456]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b70      	ldr	r3, [pc, #448]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	496d      	ldr	r1, [pc, #436]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d98:	4b6b      	ldr	r3, [pc, #428]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	4968      	ldr	r1, [pc, #416]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
 8001dac:	e025      	b.n	8001dfa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dae:	4b66      	ldr	r3, [pc, #408]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a65      	ldr	r2, [pc, #404]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001db4:	f043 0308 	orr.w	r3, r3, #8
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b63      	ldr	r3, [pc, #396]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4960      	ldr	r1, [pc, #384]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	495b      	ldr	r1, [pc, #364]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 fd6c 	bl	80028c8 <RCC_SetFlashLatencyFromMSIRange>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e380      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dfa:	f000 fc87 	bl	800270c <HAL_RCC_GetSysClockFreq>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	4b51      	ldr	r3, [pc, #324]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	4950      	ldr	r1, [pc, #320]	@ (8001f4c <HAL_RCC_OscConfig+0x274>)
 8001e0c:	5ccb      	ldrb	r3, [r1, r3]
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	4a4e      	ldr	r2, [pc, #312]	@ (8001f50 <HAL_RCC_OscConfig+0x278>)
 8001e18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001f54 <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f86e 	bl	8000f00 <HAL_InitTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d052      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	e364      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d032      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e3a:	4b43      	ldr	r3, [pc, #268]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a42      	ldr	r2, [pc, #264]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e46:	f7ff f965 	bl	8001114 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e4e:	f7ff f961 	bl	8001114 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e34d      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e60:	4b39      	ldr	r3, [pc, #228]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e6c:	4b36      	ldr	r3, [pc, #216]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a35      	ldr	r2, [pc, #212]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001e72:	f043 0308 	orr.w	r3, r3, #8
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b33      	ldr	r3, [pc, #204]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4930      	ldr	r1, [pc, #192]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	492b      	ldr	r1, [pc, #172]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
 8001e9e:	e01a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ea0:	4b29      	ldr	r3, [pc, #164]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a28      	ldr	r2, [pc, #160]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	f023 0301 	bic.w	r3, r3, #1
 8001eaa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eac:	f7ff f932 	bl	8001114 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eb4:	f7ff f92e 	bl	8001114 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e31a      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ec6:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x1dc>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d073      	beq.n	8001fca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x21c>
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d10e      	bne.n	8001f0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d10b      	bne.n	8001f0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d063      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x2f0>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d15f      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e2f7      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f14:	d106      	bne.n	8001f24 <HAL_RCC_OscConfig+0x24c>
 8001f16:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e025      	b.n	8001f70 <HAL_RCC_OscConfig+0x298>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f2c:	d114      	bne.n	8001f58 <HAL_RCC_OscConfig+0x280>
 8001f2e:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a05      	ldr	r2, [pc, #20]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b03      	ldr	r3, [pc, #12]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a02      	ldr	r2, [pc, #8]	@ (8001f48 <HAL_RCC_OscConfig+0x270>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e013      	b.n	8001f70 <HAL_RCC_OscConfig+0x298>
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	080074ac 	.word	0x080074ac
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004
 8001f58:	4ba0      	ldr	r3, [pc, #640]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a9f      	ldr	r2, [pc, #636]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8001f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b9d      	ldr	r3, [pc, #628]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a9c      	ldr	r2, [pc, #624]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8001f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff f8cc 	bl	8001114 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff f8c8 	bl	8001114 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	@ 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e2b4      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f92:	4b92      	ldr	r3, [pc, #584]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x2a8>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7ff f8b8 	bl	8001114 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7ff f8b4 	bl	8001114 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	@ 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e2a0      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fba:	4b88      	ldr	r3, [pc, #544]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x2d0>
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d060      	beq.n	8002098 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x310>
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	d119      	bne.n	8002016 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d116      	bne.n	8002016 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe8:	4b7c      	ldr	r3, [pc, #496]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_OscConfig+0x328>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e27d      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b76      	ldr	r3, [pc, #472]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	061b      	lsls	r3, r3, #24
 800200e:	4973      	ldr	r1, [pc, #460]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002014:	e040      	b.n	8002098 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d023      	beq.n	8002066 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800201e:	4b6f      	ldr	r3, [pc, #444]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a6e      	ldr	r2, [pc, #440]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8002024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202a:	f7ff f873 	bl	8001114 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002032:	f7ff f86f 	bl	8001114 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e25b      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b65      	ldr	r3, [pc, #404]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002050:	4b62      	ldr	r3, [pc, #392]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	061b      	lsls	r3, r3, #24
 800205e:	495f      	ldr	r1, [pc, #380]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
 8002064:	e018      	b.n	8002098 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002066:	4b5d      	ldr	r3, [pc, #372]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a5c      	ldr	r2, [pc, #368]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 800206c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002072:	f7ff f84f 	bl	8001114 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207a:	f7ff f84b 	bl	8001114 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e237      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800208c:	4b53      	ldr	r3, [pc, #332]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d03c      	beq.n	800211e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ac:	4b4b      	ldr	r3, [pc, #300]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 80020ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b2:	4a4a      	ldr	r2, [pc, #296]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7ff f82a 	bl	8001114 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c4:	f7ff f826 	bl	8001114 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e212      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d6:	4b41      	ldr	r3, [pc, #260]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 80020d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ef      	beq.n	80020c4 <HAL_RCC_OscConfig+0x3ec>
 80020e4:	e01b      	b.n	800211e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e6:	4b3d      	ldr	r3, [pc, #244]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 80020e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ec:	4a3b      	ldr	r2, [pc, #236]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 80020ee:	f023 0301 	bic.w	r3, r3, #1
 80020f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f6:	f7ff f80d 	bl	8001114 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fe:	f7ff f809 	bl	8001114 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e1f5      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002110:	4b32      	ldr	r3, [pc, #200]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8002112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ef      	bne.n	80020fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80a6 	beq.w	8002278 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212c:	2300      	movs	r3, #0
 800212e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002130:	4b2a      	ldr	r3, [pc, #168]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10d      	bne.n	8002158 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213c:	4b27      	ldr	r3, [pc, #156]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	4a26      	ldr	r2, [pc, #152]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 8002142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002146:	6593      	str	r3, [r2, #88]	@ 0x58
 8002148:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002154:	2301      	movs	r3, #1
 8002156:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002158:	4b21      	ldr	r3, [pc, #132]	@ (80021e0 <HAL_RCC_OscConfig+0x508>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d118      	bne.n	8002196 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002164:	4b1e      	ldr	r3, [pc, #120]	@ (80021e0 <HAL_RCC_OscConfig+0x508>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1d      	ldr	r2, [pc, #116]	@ (80021e0 <HAL_RCC_OscConfig+0x508>)
 800216a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002170:	f7fe ffd0 	bl	8001114 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002178:	f7fe ffcc 	bl	8001114 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1b8      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800218a:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <HAL_RCC_OscConfig+0x508>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d108      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4d8>
 800219e:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021ae:	e029      	b.n	8002204 <HAL_RCC_OscConfig+0x52c>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d115      	bne.n	80021e4 <HAL_RCC_OscConfig+0x50c>
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021be:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021c8:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ce:	4a03      	ldr	r2, [pc, #12]	@ (80021dc <HAL_RCC_OscConfig+0x504>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021d8:	e014      	b.n	8002204 <HAL_RCC_OscConfig+0x52c>
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
 80021e4:	4b9d      	ldr	r3, [pc, #628]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ea:	4a9c      	ldr	r2, [pc, #624]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021f4:	4b99      	ldr	r3, [pc, #612]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fa:	4a98      	ldr	r2, [pc, #608]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d016      	beq.n	800223a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220c:	f7fe ff82 	bl	8001114 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002212:	e00a      	b.n	800222a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002214:	f7fe ff7e 	bl	8001114 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002222:	4293      	cmp	r3, r2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e168      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800222a:	4b8c      	ldr	r3, [pc, #560]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0ed      	beq.n	8002214 <HAL_RCC_OscConfig+0x53c>
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223a:	f7fe ff6b 	bl	8001114 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002240:	e00a      	b.n	8002258 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7fe ff67 	bl	8001114 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e151      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002258:	4b80      	ldr	r3, [pc, #512]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ed      	bne.n	8002242 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002266:	7ffb      	ldrb	r3, [r7, #31]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226c:	4b7b      	ldr	r3, [pc, #492]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002270:	4a7a      	ldr	r2, [pc, #488]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 8002272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002276:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d03c      	beq.n	80022fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01c      	beq.n	80022c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800228c:	4b73      	ldr	r3, [pc, #460]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 800228e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002292:	4a72      	ldr	r2, [pc, #456]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7fe ff3a 	bl	8001114 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022a4:	f7fe ff36 	bl	8001114 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e122      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022b6:	4b69      	ldr	r3, [pc, #420]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 80022b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0ef      	beq.n	80022a4 <HAL_RCC_OscConfig+0x5cc>
 80022c4:	e01b      	b.n	80022fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022c6:	4b65      	ldr	r3, [pc, #404]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 80022c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022cc:	4a63      	ldr	r2, [pc, #396]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7fe ff1d 	bl	8001114 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022de:	f7fe ff19 	bl	8001114 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e105      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022f0:	4b5a      	ldr	r3, [pc, #360]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 80022f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1ef      	bne.n	80022de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80f9 	beq.w	80024fa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230c:	2b02      	cmp	r3, #2
 800230e:	f040 80cf 	bne.w	80024b0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002312:	4b52      	ldr	r3, [pc, #328]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0203 	and.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	429a      	cmp	r2, r3
 8002324:	d12c      	bne.n	8002380 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002330:	3b01      	subs	r3, #1
 8002332:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d123      	bne.n	8002380 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002342:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d11b      	bne.n	8002380 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002352:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d113      	bne.n	8002380 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	3b01      	subs	r3, #1
 8002366:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d109      	bne.n	8002380 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	085b      	lsrs	r3, r3, #1
 8002378:	3b01      	subs	r3, #1
 800237a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d071      	beq.n	8002464 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b0c      	cmp	r3, #12
 8002384:	d068      	beq.n	8002458 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002386:	4b35      	ldr	r3, [pc, #212]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002392:	4b32      	ldr	r3, [pc, #200]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0ac      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023a2:	4b2e      	ldr	r3, [pc, #184]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a2d      	ldr	r2, [pc, #180]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 80023a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023ae:	f7fe feb1 	bl	8001114 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b6:	f7fe fead 	bl	8001114 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e099      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c8:	4b24      	ldr	r3, [pc, #144]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d4:	4b21      	ldr	r3, [pc, #132]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	4b21      	ldr	r3, [pc, #132]	@ (8002460 <HAL_RCC_OscConfig+0x788>)
 80023da:	4013      	ands	r3, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023e4:	3a01      	subs	r2, #1
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	4311      	orrs	r1, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023ee:	0212      	lsls	r2, r2, #8
 80023f0:	4311      	orrs	r1, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023f6:	0852      	lsrs	r2, r2, #1
 80023f8:	3a01      	subs	r2, #1
 80023fa:	0552      	lsls	r2, r2, #21
 80023fc:	4311      	orrs	r1, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002402:	0852      	lsrs	r2, r2, #1
 8002404:	3a01      	subs	r2, #1
 8002406:	0652      	lsls	r2, r2, #25
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800240e:	06d2      	lsls	r2, r2, #27
 8002410:	430a      	orrs	r2, r1
 8002412:	4912      	ldr	r1, [pc, #72]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 8002414:	4313      	orrs	r3, r2
 8002416:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002418:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0f      	ldr	r2, [pc, #60]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 800241e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002422:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002424:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a0c      	ldr	r2, [pc, #48]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 800242a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800242e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002430:	f7fe fe70 	bl	8001114 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fe6c 	bl	8001114 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e058      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244a:	4b04      	ldr	r3, [pc, #16]	@ (800245c <HAL_RCC_OscConfig+0x784>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002456:	e050      	b.n	80024fa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e04f      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
 800245c:	40021000 	.word	0x40021000
 8002460:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002464:	4b27      	ldr	r3, [pc, #156]	@ (8002504 <HAL_RCC_OscConfig+0x82c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d144      	bne.n	80024fa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002470:	4b24      	ldr	r3, [pc, #144]	@ (8002504 <HAL_RCC_OscConfig+0x82c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a23      	ldr	r2, [pc, #140]	@ (8002504 <HAL_RCC_OscConfig+0x82c>)
 8002476:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800247a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800247c:	4b21      	ldr	r3, [pc, #132]	@ (8002504 <HAL_RCC_OscConfig+0x82c>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4a20      	ldr	r2, [pc, #128]	@ (8002504 <HAL_RCC_OscConfig+0x82c>)
 8002482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002486:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002488:	f7fe fe44 	bl	8001114 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fe40 	bl	8001114 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e02c      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a2:	4b18      	ldr	r3, [pc, #96]	@ (8002504 <HAL_RCC_OscConfig+0x82c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x7b8>
 80024ae:	e024      	b.n	80024fa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d01f      	beq.n	80024f6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b13      	ldr	r3, [pc, #76]	@ (8002504 <HAL_RCC_OscConfig+0x82c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <HAL_RCC_OscConfig+0x82c>)
 80024bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7fe fe27 	bl	8001114 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ca:	f7fe fe23 	bl	8001114 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e00f      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024dc:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <HAL_RCC_OscConfig+0x82c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_RCC_OscConfig+0x82c>)
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	4905      	ldr	r1, [pc, #20]	@ (8002504 <HAL_RCC_OscConfig+0x82c>)
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_RCC_OscConfig+0x830>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	60cb      	str	r3, [r1, #12]
 80024f4:	e001      	b.n	80024fa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	feeefffc 	.word	0xfeeefffc

0800250c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0e7      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b75      	ldr	r3, [pc, #468]	@ (80026f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d910      	bls.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b72      	ldr	r3, [pc, #456]	@ (80026f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0207 	bic.w	r2, r3, #7
 8002536:	4970      	ldr	r1, [pc, #448]	@ (80026f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b6e      	ldr	r3, [pc, #440]	@ (80026f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0cf      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d010      	beq.n	800257e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	4b66      	ldr	r3, [pc, #408]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002568:	429a      	cmp	r2, r3
 800256a:	d908      	bls.n	800257e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800256c:	4b63      	ldr	r3, [pc, #396]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4960      	ldr	r1, [pc, #384]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d04c      	beq.n	8002624 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002592:	4b5a      	ldr	r3, [pc, #360]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d121      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0a6      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025aa:	4b54      	ldr	r3, [pc, #336]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d115      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e09a      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c2:	4b4e      	ldr	r3, [pc, #312]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e08e      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d2:	4b4a      	ldr	r3, [pc, #296]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e086      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025e2:	4b46      	ldr	r3, [pc, #280]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f023 0203 	bic.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4943      	ldr	r1, [pc, #268]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f4:	f7fe fd8e 	bl	8001114 <HAL_GetTick>
 80025f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fc:	f7fe fd8a 	bl	8001114 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e06e      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	4b3a      	ldr	r3, [pc, #232]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 020c 	and.w	r2, r3, #12
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	429a      	cmp	r2, r3
 8002622:	d1eb      	bne.n	80025fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d010      	beq.n	8002652 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	4b31      	ldr	r3, [pc, #196]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800263c:	429a      	cmp	r2, r3
 800263e:	d208      	bcs.n	8002652 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b2e      	ldr	r3, [pc, #184]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	492b      	ldr	r1, [pc, #172]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002652:	4b29      	ldr	r3, [pc, #164]	@ (80026f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d210      	bcs.n	8002682 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002660:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 0207 	bic.w	r2, r3, #7
 8002668:	4923      	ldr	r1, [pc, #140]	@ (80026f8 <HAL_RCC_ClockConfig+0x1ec>)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002670:	4b21      	ldr	r3, [pc, #132]	@ (80026f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d001      	beq.n	8002682 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e036      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268e:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	4918      	ldr	r1, [pc, #96]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 800269c:	4313      	orrs	r3, r2
 800269e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d009      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ac:	4b13      	ldr	r3, [pc, #76]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4910      	ldr	r1, [pc, #64]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026c0:	f000 f824 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <HAL_RCC_ClockConfig+0x1f0>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	490b      	ldr	r1, [pc, #44]	@ (8002700 <HAL_RCC_ClockConfig+0x1f4>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
 80026dc:	4a09      	ldr	r2, [pc, #36]	@ (8002704 <HAL_RCC_ClockConfig+0x1f8>)
 80026de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <HAL_RCC_ClockConfig+0x1fc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fc0b 	bl	8000f00 <HAL_InitTick>
 80026ea:	4603      	mov	r3, r0
 80026ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80026ee:	7afb      	ldrb	r3, [r7, #11]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40022000 	.word	0x40022000
 80026fc:	40021000 	.word	0x40021000
 8002700:	080074ac 	.word	0x080074ac
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	@ 0x24
 8002710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271a:	4b3e      	ldr	r3, [pc, #248]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002724:	4b3b      	ldr	r3, [pc, #236]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x34>
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d121      	bne.n	800277e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d11e      	bne.n	800277e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002740:	4b34      	ldr	r3, [pc, #208]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d107      	bne.n	800275c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800274c:	4b31      	ldr	r3, [pc, #196]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 800274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	e005      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800275c:	4b2d      	ldr	r3, [pc, #180]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002768:	4a2b      	ldr	r2, [pc, #172]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x10c>)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002770:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10d      	bne.n	8002794 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d102      	bne.n	800278a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002784:	4b25      	ldr	r3, [pc, #148]	@ (800281c <HAL_RCC_GetSysClockFreq+0x110>)
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	e004      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d101      	bne.n	8002794 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002790:	4b22      	ldr	r3, [pc, #136]	@ (800281c <HAL_RCC_GetSysClockFreq+0x110>)
 8002792:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d134      	bne.n	8002804 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800279a:	4b1e      	ldr	r3, [pc, #120]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d003      	beq.n	80027b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d003      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0xac>
 80027b0:	e005      	b.n	80027be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027b2:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <HAL_RCC_GetSysClockFreq+0x110>)
 80027b4:	617b      	str	r3, [r7, #20]
      break;
 80027b6:	e005      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027b8:	4b18      	ldr	r3, [pc, #96]	@ (800281c <HAL_RCC_GetSysClockFreq+0x110>)
 80027ba:	617b      	str	r3, [r7, #20]
      break;
 80027bc:	e002      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	617b      	str	r3, [r7, #20]
      break;
 80027c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027c4:	4b13      	ldr	r3, [pc, #76]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	3301      	adds	r3, #1
 80027d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	fb03 f202 	mul.w	r2, r3, r2
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	0e5b      	lsrs	r3, r3, #25
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	3301      	adds	r3, #1
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002802:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002804:	69bb      	ldr	r3, [r7, #24]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	@ 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	080074c4 	.word	0x080074c4
 800281c:	00f42400 	.word	0x00f42400

08002820 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002824:	4b03      	ldr	r3, [pc, #12]	@ (8002834 <HAL_RCC_GetHCLKFreq+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000000 	.word	0x20000000

08002838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800283c:	f7ff fff0 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	0adb      	lsrs	r3, r3, #11
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4904      	ldr	r1, [pc, #16]	@ (8002860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	080074bc 	.word	0x080074bc

08002864 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	220f      	movs	r2, #15
 8002872:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002874:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0203 	and.w	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002880:	4b0f      	ldr	r3, [pc, #60]	@ (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800288c:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <HAL_RCC_GetClockConfig+0x5c>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	08db      	lsrs	r3, r3, #3
 800289e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80028a6:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <HAL_RCC_GetClockConfig+0x60>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0207 	and.w	r2, r3, #7
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	601a      	str	r2, [r3, #0]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40022000 	.word	0x40022000

080028c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028e0:	f7ff f986 	bl	8001bf0 <HAL_PWREx_GetVoltageRange>
 80028e4:	6178      	str	r0, [r7, #20]
 80028e6:	e014      	b.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028e8:	4b25      	ldr	r3, [pc, #148]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ec:	4a24      	ldr	r2, [pc, #144]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80028f4:	4b22      	ldr	r3, [pc, #136]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002900:	f7ff f976 	bl	8001bf0 <HAL_PWREx_GetVoltageRange>
 8002904:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002906:	4b1e      	ldr	r3, [pc, #120]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290a:	4a1d      	ldr	r2, [pc, #116]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002910:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002918:	d10b      	bne.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b80      	cmp	r3, #128	@ 0x80
 800291e:	d919      	bls.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2ba0      	cmp	r3, #160	@ 0xa0
 8002924:	d902      	bls.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002926:	2302      	movs	r3, #2
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	e013      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800292c:	2301      	movs	r3, #1
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	e010      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b80      	cmp	r3, #128	@ 0x80
 8002936:	d902      	bls.n	800293e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002938:	2303      	movs	r3, #3
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	e00a      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b80      	cmp	r3, #128	@ 0x80
 8002942:	d102      	bne.n	800294a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002944:	2302      	movs	r3, #2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	e004      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b70      	cmp	r3, #112	@ 0x70
 800294e:	d101      	bne.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002950:	2301      	movs	r3, #1
 8002952:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 0207 	bic.w	r2, r3, #7
 800295c:	4909      	ldr	r1, [pc, #36]	@ (8002984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002964:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	40022000 	.word	0x40022000

08002988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002990:	2300      	movs	r3, #0
 8002992:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002994:	2300      	movs	r3, #0
 8002996:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d041      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029ac:	d02a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029b2:	d824      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029b8:	d008      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029be:	d81e      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029c8:	d010      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029ca:	e018      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029cc:	4b86      	ldr	r3, [pc, #536]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4a85      	ldr	r2, [pc, #532]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d8:	e015      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3304      	adds	r3, #4
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 facd 	bl	8002f80 <RCCEx_PLLSAI1_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029ea:	e00c      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3320      	adds	r3, #32
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fbb6 	bl	8003164 <RCCEx_PLLSAI2_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029fc:	e003      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	74fb      	strb	r3, [r7, #19]
      break;
 8002a02:	e000      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10b      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a0c:	4b76      	ldr	r3, [pc, #472]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a1a:	4973      	ldr	r1, [pc, #460]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a22:	e001      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d041      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a3c:	d02a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a42:	d824      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a48:	d008      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a4e:	d81e      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a58:	d010      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a5a:	e018      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a5c:	4b62      	ldr	r3, [pc, #392]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a61      	ldr	r2, [pc, #388]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a68:	e015      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fa85 	bl	8002f80 <RCCEx_PLLSAI1_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a7a:	e00c      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3320      	adds	r3, #32
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fb6e 	bl	8003164 <RCCEx_PLLSAI2_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a8c:	e003      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	74fb      	strb	r3, [r7, #19]
      break;
 8002a92:	e000      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a96:	7cfb      	ldrb	r3, [r7, #19]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a9c:	4b52      	ldr	r3, [pc, #328]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aaa:	494f      	ldr	r1, [pc, #316]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ab2:	e001      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a0 	beq.w	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aca:	4b47      	ldr	r3, [pc, #284]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00d      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae0:	4b41      	ldr	r3, [pc, #260]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae4:	4a40      	ldr	r2, [pc, #256]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aec:	4b3e      	ldr	r3, [pc, #248]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af8:	2301      	movs	r3, #1
 8002afa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002afc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a3a      	ldr	r2, [pc, #232]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b08:	f7fe fb04 	bl	8001114 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b0e:	e009      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b10:	f7fe fb00 	bl	8001114 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d902      	bls.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	74fb      	strb	r3, [r7, #19]
        break;
 8002b22:	e005      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b24:	4b31      	ldr	r3, [pc, #196]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ef      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d15c      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b36:	4b2c      	ldr	r3, [pc, #176]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01f      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d019      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b54:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b60:	4b21      	ldr	r3, [pc, #132]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b66:	4a20      	ldr	r2, [pc, #128]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b70:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	4a1c      	ldr	r2, [pc, #112]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b80:	4a19      	ldr	r2, [pc, #100]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d016      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7fe fabf 	bl	8001114 <HAL_GetTick>
 8002b96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b98:	e00b      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fe fabb 	bl	8001114 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d902      	bls.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	74fb      	strb	r3, [r7, #19]
            break;
 8002bb0:	e006      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ec      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc6:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd6:	4904      	ldr	r1, [pc, #16]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002bde:	e009      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	74bb      	strb	r3, [r7, #18]
 8002be4:	e006      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf4:	7c7b      	ldrb	r3, [r7, #17]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4ba6      	ldr	r3, [pc, #664]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfe:	4aa5      	ldr	r2, [pc, #660]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c12:	4ba0      	ldr	r3, [pc, #640]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c18:	f023 0203 	bic.w	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c20:	499c      	ldr	r1, [pc, #624]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c34:	4b97      	ldr	r3, [pc, #604]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3a:	f023 020c 	bic.w	r2, r3, #12
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c42:	4994      	ldr	r1, [pc, #592]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c56:	4b8f      	ldr	r3, [pc, #572]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	498b      	ldr	r1, [pc, #556]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c78:	4b86      	ldr	r3, [pc, #536]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	4983      	ldr	r1, [pc, #524]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c9a:	4b7e      	ldr	r3, [pc, #504]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca8:	497a      	ldr	r1, [pc, #488]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cbc:	4b75      	ldr	r3, [pc, #468]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cca:	4972      	ldr	r1, [pc, #456]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cde:	4b6d      	ldr	r3, [pc, #436]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cec:	4969      	ldr	r1, [pc, #420]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d00:	4b64      	ldr	r3, [pc, #400]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d0e:	4961      	ldr	r1, [pc, #388]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d22:	4b5c      	ldr	r3, [pc, #368]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d28:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d30:	4958      	ldr	r1, [pc, #352]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d44:	4b53      	ldr	r3, [pc, #332]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d52:	4950      	ldr	r1, [pc, #320]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d66:	4b4b      	ldr	r3, [pc, #300]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d74:	4947      	ldr	r1, [pc, #284]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d88:	4b42      	ldr	r3, [pc, #264]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d8e:	f023 0203 	bic.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d96:	493f      	ldr	r1, [pc, #252]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d028      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002daa:	4b3a      	ldr	r3, [pc, #232]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db8:	4936      	ldr	r1, [pc, #216]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dc8:	d106      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dca:	4b32      	ldr	r3, [pc, #200]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	4a31      	ldr	r2, [pc, #196]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dd4:	60d3      	str	r3, [r2, #12]
 8002dd6:	e011      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ddc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2101      	movs	r1, #1
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f8c9 	bl	8002f80 <RCCEx_PLLSAI1_Config>
 8002dee:	4603      	mov	r3, r0
 8002df0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002df2:	7cfb      	ldrb	r3, [r7, #19]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d028      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e08:	4b22      	ldr	r3, [pc, #136]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e16:	491f      	ldr	r1, [pc, #124]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e26:	d106      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e28:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a19      	ldr	r2, [pc, #100]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e32:	60d3      	str	r3, [r2, #12]
 8002e34:	e011      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e3e:	d10c      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
 8002e44:	2101      	movs	r1, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f89a 	bl	8002f80 <RCCEx_PLLSAI1_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d02a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e66:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e74:	4907      	ldr	r1, [pc, #28]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e84:	d108      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e86:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	4a02      	ldr	r2, [pc, #8]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e90:	60d3      	str	r3, [r2, #12]
 8002e92:	e013      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002e94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 f869 	bl	8002f80 <RCCEx_PLLSAI1_Config>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d02f      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ece:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ed6:	4929      	ldr	r1, [pc, #164]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ee6:	d10d      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	2102      	movs	r1, #2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f846 	bl	8002f80 <RCCEx_PLLSAI1_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d014      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	74bb      	strb	r3, [r7, #18]
 8002f02:	e011      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3320      	adds	r3, #32
 8002f12:	2102      	movs	r1, #2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 f925 	bl	8003164 <RCCEx_PLLSAI2_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00b      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f44:	490d      	ldr	r1, [pc, #52]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f58:	4b08      	ldr	r3, [pc, #32]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f68:	4904      	ldr	r1, [pc, #16]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f70:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000

08002f80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f8e:	4b74      	ldr	r3, [pc, #464]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d018      	beq.n	8002fcc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f9a:	4b71      	ldr	r3, [pc, #452]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0203 	and.w	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d10d      	bne.n	8002fc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
       ||
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fb2:	4b6b      	ldr	r3, [pc, #428]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
       ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d047      	beq.n	8003056 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
 8002fca:	e044      	b.n	8003056 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d018      	beq.n	8003006 <RCCEx_PLLSAI1_Config+0x86>
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d825      	bhi.n	8003024 <RCCEx_PLLSAI1_Config+0xa4>
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d002      	beq.n	8002fe2 <RCCEx_PLLSAI1_Config+0x62>
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d009      	beq.n	8002ff4 <RCCEx_PLLSAI1_Config+0x74>
 8002fe0:	e020      	b.n	8003024 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11d      	bne.n	800302a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff2:	e01a      	b.n	800302a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ff4:	4b5a      	ldr	r3, [pc, #360]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d116      	bne.n	800302e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003004:	e013      	b.n	800302e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003006:	4b56      	ldr	r3, [pc, #344]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003012:	4b53      	ldr	r3, [pc, #332]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003022:	e006      	b.n	8003032 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
      break;
 8003028:	e004      	b.n	8003034 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003032:	bf00      	nop
    }

    if(status == HAL_OK)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800303a:	4b49      	ldr	r3, [pc, #292]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	430b      	orrs	r3, r1
 8003050:	4943      	ldr	r1, [pc, #268]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003052:	4313      	orrs	r3, r2
 8003054:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d17c      	bne.n	8003156 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800305c:	4b40      	ldr	r3, [pc, #256]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a3f      	ldr	r2, [pc, #252]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003062:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003068:	f7fe f854 	bl	8001114 <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800306e:	e009      	b.n	8003084 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003070:	f7fe f850 	bl	8001114 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d902      	bls.n	8003084 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	73fb      	strb	r3, [r7, #15]
        break;
 8003082:	e005      	b.n	8003090 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003084:	4b36      	ldr	r3, [pc, #216]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ef      	bne.n	8003070 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d15f      	bne.n	8003156 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d110      	bne.n	80030be <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800309c:	4b30      	ldr	r3, [pc, #192]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80030a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6892      	ldr	r2, [r2, #8]
 80030ac:	0211      	lsls	r1, r2, #8
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68d2      	ldr	r2, [r2, #12]
 80030b2:	06d2      	lsls	r2, r2, #27
 80030b4:	430a      	orrs	r2, r1
 80030b6:	492a      	ldr	r1, [pc, #168]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	610b      	str	r3, [r1, #16]
 80030bc:	e027      	b.n	800310e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d112      	bne.n	80030ea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030c4:	4b26      	ldr	r3, [pc, #152]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80030cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6892      	ldr	r2, [r2, #8]
 80030d4:	0211      	lsls	r1, r2, #8
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6912      	ldr	r2, [r2, #16]
 80030da:	0852      	lsrs	r2, r2, #1
 80030dc:	3a01      	subs	r2, #1
 80030de:	0552      	lsls	r2, r2, #21
 80030e0:	430a      	orrs	r2, r1
 80030e2:	491f      	ldr	r1, [pc, #124]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	610b      	str	r3, [r1, #16]
 80030e8:	e011      	b.n	800310e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80030f2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6892      	ldr	r2, [r2, #8]
 80030fa:	0211      	lsls	r1, r2, #8
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6952      	ldr	r2, [r2, #20]
 8003100:	0852      	lsrs	r2, r2, #1
 8003102:	3a01      	subs	r2, #1
 8003104:	0652      	lsls	r2, r2, #25
 8003106:	430a      	orrs	r2, r1
 8003108:	4915      	ldr	r1, [pc, #84]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 800310a:	4313      	orrs	r3, r2
 800310c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800310e:	4b14      	ldr	r3, [pc, #80]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a13      	ldr	r2, [pc, #76]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003114:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003118:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311a:	f7fd fffb 	bl	8001114 <HAL_GetTick>
 800311e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003120:	e009      	b.n	8003136 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003122:	f7fd fff7 	bl	8001114 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d902      	bls.n	8003136 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	73fb      	strb	r3, [r7, #15]
          break;
 8003134:	e005      	b.n	8003142 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003136:	4b0a      	ldr	r3, [pc, #40]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0ef      	beq.n	8003122 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d106      	bne.n	8003156 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003148:	4b05      	ldr	r3, [pc, #20]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	4903      	ldr	r1, [pc, #12]	@ (8003160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003152:	4313      	orrs	r3, r2
 8003154:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021000 	.word	0x40021000

08003164 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003172:	4b69      	ldr	r3, [pc, #420]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d018      	beq.n	80031b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800317e:	4b66      	ldr	r3, [pc, #408]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f003 0203 	and.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d10d      	bne.n	80031aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
       ||
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003196:	4b60      	ldr	r3, [pc, #384]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
       ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d047      	beq.n	800323a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
 80031ae:	e044      	b.n	800323a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d018      	beq.n	80031ea <RCCEx_PLLSAI2_Config+0x86>
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d825      	bhi.n	8003208 <RCCEx_PLLSAI2_Config+0xa4>
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d002      	beq.n	80031c6 <RCCEx_PLLSAI2_Config+0x62>
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d009      	beq.n	80031d8 <RCCEx_PLLSAI2_Config+0x74>
 80031c4:	e020      	b.n	8003208 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031c6:	4b54      	ldr	r3, [pc, #336]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d11d      	bne.n	800320e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d6:	e01a      	b.n	800320e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d116      	bne.n	8003212 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e8:	e013      	b.n	8003212 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10f      	bne.n	8003216 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031f6:	4b48      	ldr	r3, [pc, #288]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003206:	e006      	b.n	8003216 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
      break;
 800320c:	e004      	b.n	8003218 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800320e:	bf00      	nop
 8003210:	e002      	b.n	8003218 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003212:	bf00      	nop
 8003214:	e000      	b.n	8003218 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003216:	bf00      	nop
    }

    if(status == HAL_OK)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10d      	bne.n	800323a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800321e:	4b3e      	ldr	r3, [pc, #248]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6819      	ldr	r1, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	430b      	orrs	r3, r1
 8003234:	4938      	ldr	r1, [pc, #224]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d166      	bne.n	800330e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003240:	4b35      	ldr	r3, [pc, #212]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a34      	ldr	r2, [pc, #208]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800324a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800324c:	f7fd ff62 	bl	8001114 <HAL_GetTick>
 8003250:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003252:	e009      	b.n	8003268 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003254:	f7fd ff5e 	bl	8001114 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d902      	bls.n	8003268 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	73fb      	strb	r3, [r7, #15]
        break;
 8003266:	e005      	b.n	8003274 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003268:	4b2b      	ldr	r3, [pc, #172]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ef      	bne.n	8003254 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d149      	bne.n	800330e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d110      	bne.n	80032a2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003280:	4b25      	ldr	r3, [pc, #148]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003288:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6892      	ldr	r2, [r2, #8]
 8003290:	0211      	lsls	r1, r2, #8
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68d2      	ldr	r2, [r2, #12]
 8003296:	06d2      	lsls	r2, r2, #27
 8003298:	430a      	orrs	r2, r1
 800329a:	491f      	ldr	r1, [pc, #124]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 800329c:	4313      	orrs	r3, r2
 800329e:	614b      	str	r3, [r1, #20]
 80032a0:	e011      	b.n	80032c6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80032aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6892      	ldr	r2, [r2, #8]
 80032b2:	0211      	lsls	r1, r2, #8
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6912      	ldr	r2, [r2, #16]
 80032b8:	0852      	lsrs	r2, r2, #1
 80032ba:	3a01      	subs	r2, #1
 80032bc:	0652      	lsls	r2, r2, #25
 80032be:	430a      	orrs	r2, r1
 80032c0:	4915      	ldr	r1, [pc, #84]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032c6:	4b14      	ldr	r3, [pc, #80]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a13      	ldr	r2, [pc, #76]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fd ff1f 	bl	8001114 <HAL_GetTick>
 80032d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032d8:	e009      	b.n	80032ee <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032da:	f7fd ff1b 	bl	8001114 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d902      	bls.n	80032ee <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	73fb      	strb	r3, [r7, #15]
          break;
 80032ec:	e005      	b.n	80032fa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0ef      	beq.n	80032da <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003300:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	4903      	ldr	r1, [pc, #12]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1b4>)
 800330a:	4313      	orrs	r3, r2
 800330c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000

0800331c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e049      	b.n	80033c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f841 	bl	80033ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	4619      	mov	r1, r3
 800335a:	4610      	mov	r0, r2
 800335c:	f000 fb4a 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d001      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e04f      	b.n	8003498 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a23      	ldr	r2, [pc, #140]	@ (80034a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01d      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x76>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003422:	d018      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x76>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1f      	ldr	r2, [pc, #124]	@ (80034a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x76>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1e      	ldr	r2, [pc, #120]	@ (80034ac <HAL_TIM_Base_Start_IT+0xcc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x76>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1c      	ldr	r2, [pc, #112]	@ (80034b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x76>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1b      	ldr	r2, [pc, #108]	@ (80034b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x76>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a19      	ldr	r2, [pc, #100]	@ (80034b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d115      	bne.n	8003482 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	4b17      	ldr	r3, [pc, #92]	@ (80034bc <HAL_TIM_Base_Start_IT+0xdc>)
 800345e:	4013      	ands	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b06      	cmp	r3, #6
 8003466:	d015      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0xb4>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800346e:	d011      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003480:	e008      	b.n	8003494 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	e000      	b.n	8003496 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003494:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40000400 	.word	0x40000400
 80034ac:	40000800 	.word	0x40000800
 80034b0:	40000c00 	.word	0x40000c00
 80034b4:	40013400 	.word	0x40013400
 80034b8:	40014000 	.word	0x40014000
 80034bc:	00010007 	.word	0x00010007

080034c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e049      	b.n	8003566 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd fbf2 	bl	8000cd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3304      	adds	r3, #4
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f000 fa78 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d020      	beq.n	80035d2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01b      	beq.n	80035d2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f06f 0202 	mvn.w	r2, #2
 80035a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f9fd 	bl	80039b8 <HAL_TIM_IC_CaptureCallback>
 80035be:	e005      	b.n	80035cc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f9ef 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fa00 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01b      	beq.n	800361e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f06f 0204 	mvn.w	r2, #4
 80035ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f9d7 	bl	80039b8 <HAL_TIM_IC_CaptureCallback>
 800360a:	e005      	b.n	8003618 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f9c9 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f9da 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d020      	beq.n	800366a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01b      	beq.n	800366a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f06f 0208 	mvn.w	r2, #8
 800363a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2204      	movs	r2, #4
 8003640:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f9b1 	bl	80039b8 <HAL_TIM_IC_CaptureCallback>
 8003656:	e005      	b.n	8003664 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f9a3 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f9b4 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d020      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01b      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f06f 0210 	mvn.w	r2, #16
 8003686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2208      	movs	r2, #8
 800368c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f98b 	bl	80039b8 <HAL_TIM_IC_CaptureCallback>
 80036a2:	e005      	b.n	80036b0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f97d 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f98e 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00c      	beq.n	80036da <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f06f 0201 	mvn.w	r2, #1
 80036d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7fd f92d 	bl	8000934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fd84 	bl	8004210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00c      	beq.n	800372c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fd7c 	bl	8004224 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00c      	beq.n	8003750 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d007      	beq.n	8003750 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f948 	bl	80039e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00c      	beq.n	8003774 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0220 	mvn.w	r2, #32
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fd44 	bl	80041fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003796:	2302      	movs	r3, #2
 8003798:	e0ff      	b.n	800399a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b14      	cmp	r3, #20
 80037a6:	f200 80f0 	bhi.w	800398a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037aa:	a201      	add	r2, pc, #4	@ (adr r2, 80037b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b0:	08003805 	.word	0x08003805
 80037b4:	0800398b 	.word	0x0800398b
 80037b8:	0800398b 	.word	0x0800398b
 80037bc:	0800398b 	.word	0x0800398b
 80037c0:	08003845 	.word	0x08003845
 80037c4:	0800398b 	.word	0x0800398b
 80037c8:	0800398b 	.word	0x0800398b
 80037cc:	0800398b 	.word	0x0800398b
 80037d0:	08003887 	.word	0x08003887
 80037d4:	0800398b 	.word	0x0800398b
 80037d8:	0800398b 	.word	0x0800398b
 80037dc:	0800398b 	.word	0x0800398b
 80037e0:	080038c7 	.word	0x080038c7
 80037e4:	0800398b 	.word	0x0800398b
 80037e8:	0800398b 	.word	0x0800398b
 80037ec:	0800398b 	.word	0x0800398b
 80037f0:	08003909 	.word	0x08003909
 80037f4:	0800398b 	.word	0x0800398b
 80037f8:	0800398b 	.word	0x0800398b
 80037fc:	0800398b 	.word	0x0800398b
 8003800:	08003949 	.word	0x08003949
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f998 	bl	8003b40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0208 	orr.w	r2, r2, #8
 800381e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0204 	bic.w	r2, r2, #4
 800382e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6999      	ldr	r1, [r3, #24]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	619a      	str	r2, [r3, #24]
      break;
 8003842:	e0a5      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fa08 	bl	8003c60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800385e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800386e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6999      	ldr	r1, [r3, #24]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	021a      	lsls	r2, r3, #8
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	619a      	str	r2, [r3, #24]
      break;
 8003884:	e084      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fa71 	bl	8003d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0208 	orr.w	r2, r2, #8
 80038a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0204 	bic.w	r2, r2, #4
 80038b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69d9      	ldr	r1, [r3, #28]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	61da      	str	r2, [r3, #28]
      break;
 80038c4:	e064      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fad9 	bl	8003e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69d9      	ldr	r1, [r3, #28]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	021a      	lsls	r2, r3, #8
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	61da      	str	r2, [r3, #28]
      break;
 8003906:	e043      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fb22 	bl	8003f58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0208 	orr.w	r2, r2, #8
 8003922:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0204 	bic.w	r2, r2, #4
 8003932:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003946:	e023      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fb66 	bl	8004020 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003962:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003972:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	021a      	lsls	r2, r3, #8
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003988:	e002      	b.n	8003990 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	75fb      	strb	r3, [r7, #23]
      break;
 800398e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003998:	7dfb      	ldrb	r3, [r7, #23]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop

080039a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a46      	ldr	r2, [pc, #280]	@ (8003b20 <TIM_Base_SetConfig+0x12c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a12:	d00f      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a43      	ldr	r2, [pc, #268]	@ (8003b24 <TIM_Base_SetConfig+0x130>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a42      	ldr	r2, [pc, #264]	@ (8003b28 <TIM_Base_SetConfig+0x134>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a41      	ldr	r2, [pc, #260]	@ (8003b2c <TIM_Base_SetConfig+0x138>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a40      	ldr	r2, [pc, #256]	@ (8003b30 <TIM_Base_SetConfig+0x13c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d108      	bne.n	8003a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a35      	ldr	r2, [pc, #212]	@ (8003b20 <TIM_Base_SetConfig+0x12c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01f      	beq.n	8003a8e <TIM_Base_SetConfig+0x9a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a54:	d01b      	beq.n	8003a8e <TIM_Base_SetConfig+0x9a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a32      	ldr	r2, [pc, #200]	@ (8003b24 <TIM_Base_SetConfig+0x130>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d017      	beq.n	8003a8e <TIM_Base_SetConfig+0x9a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a31      	ldr	r2, [pc, #196]	@ (8003b28 <TIM_Base_SetConfig+0x134>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <TIM_Base_SetConfig+0x9a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a30      	ldr	r2, [pc, #192]	@ (8003b2c <TIM_Base_SetConfig+0x138>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00f      	beq.n	8003a8e <TIM_Base_SetConfig+0x9a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a2f      	ldr	r2, [pc, #188]	@ (8003b30 <TIM_Base_SetConfig+0x13c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00b      	beq.n	8003a8e <TIM_Base_SetConfig+0x9a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a2e      	ldr	r2, [pc, #184]	@ (8003b34 <TIM_Base_SetConfig+0x140>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <TIM_Base_SetConfig+0x9a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2d      	ldr	r2, [pc, #180]	@ (8003b38 <TIM_Base_SetConfig+0x144>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d003      	beq.n	8003a8e <TIM_Base_SetConfig+0x9a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2c      	ldr	r2, [pc, #176]	@ (8003b3c <TIM_Base_SetConfig+0x148>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d108      	bne.n	8003aa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a16      	ldr	r2, [pc, #88]	@ (8003b20 <TIM_Base_SetConfig+0x12c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00f      	beq.n	8003aec <TIM_Base_SetConfig+0xf8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a18      	ldr	r2, [pc, #96]	@ (8003b30 <TIM_Base_SetConfig+0x13c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00b      	beq.n	8003aec <TIM_Base_SetConfig+0xf8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a17      	ldr	r2, [pc, #92]	@ (8003b34 <TIM_Base_SetConfig+0x140>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d007      	beq.n	8003aec <TIM_Base_SetConfig+0xf8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a16      	ldr	r2, [pc, #88]	@ (8003b38 <TIM_Base_SetConfig+0x144>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_Base_SetConfig+0xf8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a15      	ldr	r2, [pc, #84]	@ (8003b3c <TIM_Base_SetConfig+0x148>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d103      	bne.n	8003af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f023 0201 	bic.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	611a      	str	r2, [r3, #16]
  }
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800
 8003b2c:	40000c00 	.word	0x40000c00
 8003b30:	40013400 	.word	0x40013400
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800

08003b40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f023 0201 	bic.w	r2, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0303 	bic.w	r3, r3, #3
 8003b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f023 0302 	bic.w	r3, r3, #2
 8003b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c4c <TIM_OC1_SetConfig+0x10c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00f      	beq.n	8003bc0 <TIM_OC1_SetConfig+0x80>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8003c50 <TIM_OC1_SetConfig+0x110>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <TIM_OC1_SetConfig+0x80>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a2a      	ldr	r2, [pc, #168]	@ (8003c54 <TIM_OC1_SetConfig+0x114>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d007      	beq.n	8003bc0 <TIM_OC1_SetConfig+0x80>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a29      	ldr	r2, [pc, #164]	@ (8003c58 <TIM_OC1_SetConfig+0x118>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d003      	beq.n	8003bc0 <TIM_OC1_SetConfig+0x80>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a28      	ldr	r2, [pc, #160]	@ (8003c5c <TIM_OC1_SetConfig+0x11c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d10c      	bne.n	8003bda <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0308 	bic.w	r3, r3, #8
 8003bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f023 0304 	bic.w	r3, r3, #4
 8003bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8003c4c <TIM_OC1_SetConfig+0x10c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00f      	beq.n	8003c02 <TIM_OC1_SetConfig+0xc2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1a      	ldr	r2, [pc, #104]	@ (8003c50 <TIM_OC1_SetConfig+0x110>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00b      	beq.n	8003c02 <TIM_OC1_SetConfig+0xc2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a19      	ldr	r2, [pc, #100]	@ (8003c54 <TIM_OC1_SetConfig+0x114>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <TIM_OC1_SetConfig+0xc2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a18      	ldr	r2, [pc, #96]	@ (8003c58 <TIM_OC1_SetConfig+0x118>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_OC1_SetConfig+0xc2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a17      	ldr	r2, [pc, #92]	@ (8003c5c <TIM_OC1_SetConfig+0x11c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d111      	bne.n	8003c26 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	621a      	str	r2, [r3, #32]
}
 8003c40:	bf00      	nop
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40013400 	.word	0x40013400
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40014400 	.word	0x40014400
 8003c5c:	40014800 	.word	0x40014800

08003c60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f023 0210 	bic.w	r2, r3, #16
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0320 	bic.w	r3, r3, #32
 8003cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a28      	ldr	r2, [pc, #160]	@ (8003d60 <TIM_OC2_SetConfig+0x100>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_OC2_SetConfig+0x6c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a27      	ldr	r2, [pc, #156]	@ (8003d64 <TIM_OC2_SetConfig+0x104>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d10d      	bne.n	8003ce8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ce6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a1d      	ldr	r2, [pc, #116]	@ (8003d60 <TIM_OC2_SetConfig+0x100>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00f      	beq.n	8003d10 <TIM_OC2_SetConfig+0xb0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d64 <TIM_OC2_SetConfig+0x104>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00b      	beq.n	8003d10 <TIM_OC2_SetConfig+0xb0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8003d68 <TIM_OC2_SetConfig+0x108>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d007      	beq.n	8003d10 <TIM_OC2_SetConfig+0xb0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a1a      	ldr	r2, [pc, #104]	@ (8003d6c <TIM_OC2_SetConfig+0x10c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d003      	beq.n	8003d10 <TIM_OC2_SetConfig+0xb0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a19      	ldr	r2, [pc, #100]	@ (8003d70 <TIM_OC2_SetConfig+0x110>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d113      	bne.n	8003d38 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	621a      	str	r2, [r3, #32]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40013400 	.word	0x40013400
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	40014400 	.word	0x40014400
 8003d70:	40014800 	.word	0x40014800

08003d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a27      	ldr	r2, [pc, #156]	@ (8003e70 <TIM_OC3_SetConfig+0xfc>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d003      	beq.n	8003dde <TIM_OC3_SetConfig+0x6a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a26      	ldr	r2, [pc, #152]	@ (8003e74 <TIM_OC3_SetConfig+0x100>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d10d      	bne.n	8003dfa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8003e70 <TIM_OC3_SetConfig+0xfc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00f      	beq.n	8003e22 <TIM_OC3_SetConfig+0xae>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a1b      	ldr	r2, [pc, #108]	@ (8003e74 <TIM_OC3_SetConfig+0x100>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00b      	beq.n	8003e22 <TIM_OC3_SetConfig+0xae>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8003e78 <TIM_OC3_SetConfig+0x104>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d007      	beq.n	8003e22 <TIM_OC3_SetConfig+0xae>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a19      	ldr	r2, [pc, #100]	@ (8003e7c <TIM_OC3_SetConfig+0x108>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d003      	beq.n	8003e22 <TIM_OC3_SetConfig+0xae>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a18      	ldr	r2, [pc, #96]	@ (8003e80 <TIM_OC3_SetConfig+0x10c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d113      	bne.n	8003e4a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	621a      	str	r2, [r3, #32]
}
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	40013400 	.word	0x40013400
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800

08003e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	031b      	lsls	r3, r3, #12
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a18      	ldr	r2, [pc, #96]	@ (8003f44 <TIM_OC4_SetConfig+0xc0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00f      	beq.n	8003f08 <TIM_OC4_SetConfig+0x84>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a17      	ldr	r2, [pc, #92]	@ (8003f48 <TIM_OC4_SetConfig+0xc4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <TIM_OC4_SetConfig+0x84>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a16      	ldr	r2, [pc, #88]	@ (8003f4c <TIM_OC4_SetConfig+0xc8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <TIM_OC4_SetConfig+0x84>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a15      	ldr	r2, [pc, #84]	@ (8003f50 <TIM_OC4_SetConfig+0xcc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_OC4_SetConfig+0x84>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a14      	ldr	r2, [pc, #80]	@ (8003f54 <TIM_OC4_SetConfig+0xd0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d109      	bne.n	8003f1c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	019b      	lsls	r3, r3, #6
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	40013400 	.word	0x40013400
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800

08003f58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a17      	ldr	r2, [pc, #92]	@ (800400c <TIM_OC5_SetConfig+0xb4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00f      	beq.n	8003fd2 <TIM_OC5_SetConfig+0x7a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a16      	ldr	r2, [pc, #88]	@ (8004010 <TIM_OC5_SetConfig+0xb8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00b      	beq.n	8003fd2 <TIM_OC5_SetConfig+0x7a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a15      	ldr	r2, [pc, #84]	@ (8004014 <TIM_OC5_SetConfig+0xbc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d007      	beq.n	8003fd2 <TIM_OC5_SetConfig+0x7a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a14      	ldr	r2, [pc, #80]	@ (8004018 <TIM_OC5_SetConfig+0xc0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d003      	beq.n	8003fd2 <TIM_OC5_SetConfig+0x7a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a13      	ldr	r2, [pc, #76]	@ (800401c <TIM_OC5_SetConfig+0xc4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d109      	bne.n	8003fe6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	621a      	str	r2, [r3, #32]
}
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40012c00 	.word	0x40012c00
 8004010:	40013400 	.word	0x40013400
 8004014:	40014000 	.word	0x40014000
 8004018:	40014400 	.word	0x40014400
 800401c:	40014800 	.word	0x40014800

08004020 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	051b      	lsls	r3, r3, #20
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a18      	ldr	r2, [pc, #96]	@ (80040d8 <TIM_OC6_SetConfig+0xb8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00f      	beq.n	800409c <TIM_OC6_SetConfig+0x7c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a17      	ldr	r2, [pc, #92]	@ (80040dc <TIM_OC6_SetConfig+0xbc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00b      	beq.n	800409c <TIM_OC6_SetConfig+0x7c>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a16      	ldr	r2, [pc, #88]	@ (80040e0 <TIM_OC6_SetConfig+0xc0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d007      	beq.n	800409c <TIM_OC6_SetConfig+0x7c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a15      	ldr	r2, [pc, #84]	@ (80040e4 <TIM_OC6_SetConfig+0xc4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_OC6_SetConfig+0x7c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a14      	ldr	r2, [pc, #80]	@ (80040e8 <TIM_OC6_SetConfig+0xc8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d109      	bne.n	80040b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	029b      	lsls	r3, r3, #10
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40012c00 	.word	0x40012c00
 80040dc:	40013400 	.word	0x40013400
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800

080040ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004100:	2302      	movs	r3, #2
 8004102:	e068      	b.n	80041d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2e      	ldr	r2, [pc, #184]	@ (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2d      	ldr	r2, [pc, #180]	@ (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d108      	bne.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800413e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004150:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1e      	ldr	r2, [pc, #120]	@ (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01d      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004176:	d018      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d013      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1a      	ldr	r2, [pc, #104]	@ (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00e      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a18      	ldr	r2, [pc, #96]	@ (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d009      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a13      	ldr	r2, [pc, #76]	@ (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d004      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a14      	ldr	r2, [pc, #80]	@ (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d10c      	bne.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40013400 	.word	0x40013400
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00
 80041f8:	40014000 	.word	0x40014000

080041fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004238:	b084      	sub	sp, #16
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	f107 001c 	add.w	r0, r7, #28
 8004246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f8e6 	bl	8004428 <USB_CoreReset>
 800425c:	4603      	mov	r3, r0
 800425e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004260:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	639a      	str	r2, [r3, #56]	@ 0x38
 8004274:	e005      	b.n	8004282 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800428e:	b004      	add	sp, #16
 8004290:	4770      	bx	lr

08004292 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f023 0201 	bic.w	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d115      	bne.n	8004302 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80042e2:	200a      	movs	r0, #10
 80042e4:	f7fc ff22 	bl	800112c <HAL_Delay>
      ms += 10U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	330a      	adds	r3, #10
 80042ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f88c 	bl	800440c <USB_GetMode>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d01e      	beq.n	8004338 <USB_SetCurrentMode+0x84>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80042fe:	d9f0      	bls.n	80042e2 <USB_SetCurrentMode+0x2e>
 8004300:	e01a      	b.n	8004338 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d115      	bne.n	8004334 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004314:	200a      	movs	r0, #10
 8004316:	f7fc ff09 	bl	800112c <HAL_Delay>
      ms += 10U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	330a      	adds	r3, #10
 800431e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f873 	bl	800440c <USB_GetMode>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <USB_SetCurrentMode+0x84>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004330:	d9f0      	bls.n	8004314 <USB_SetCurrentMode+0x60>
 8004332:	e001      	b.n	8004338 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e005      	b.n	8004344 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2bc8      	cmp	r3, #200	@ 0xc8
 800433c:	d101      	bne.n	8004342 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3301      	adds	r3, #1
 800435e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004366:	d901      	bls.n	800436c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e01b      	b.n	80043a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	daf2      	bge.n	800435a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	019b      	lsls	r3, r3, #6
 800437c:	f043 0220 	orr.w	r2, r3, #32
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3301      	adds	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004390:	d901      	bls.n	8004396 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e006      	b.n	80043a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d0f0      	beq.n	8004384 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3301      	adds	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043c8:	d901      	bls.n	80043ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e018      	b.n	8004400 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	daf2      	bge.n	80043bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2210      	movs	r2, #16
 80043de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3301      	adds	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043ec:	d901      	bls.n	80043f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e006      	b.n	8004400 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0310 	and.w	r3, r3, #16
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d0f0      	beq.n	80043e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0301 	and.w	r3, r3, #1
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004440:	d901      	bls.n	8004446 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e01b      	b.n	800447e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	daf2      	bge.n	8004434 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f043 0201 	orr.w	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3301      	adds	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800446a:	d901      	bls.n	8004470 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e006      	b.n	800447e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	d0f0      	beq.n	800445e <USB_CoreReset+0x36>

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800448c:	b084      	sub	sp, #16
 800448e:	b580      	push	{r7, lr}
 8004490:	b086      	sub	sp, #24
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800449a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80044ac:	461a      	mov	r2, r3
 80044ae:	2300      	movs	r3, #0
 80044b0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80044d8:	f023 0304 	bic.w	r3, r3, #4
 80044dc:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044de:	2110      	movs	r1, #16
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff ff33 	bl	800434c <USB_FlushTxFifo>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff5d 	bl	80043b0 <USB_FlushRxFifo>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	e015      	b.n	8004532 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4413      	add	r3, r2
 800450e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004512:	461a      	mov	r2, r3
 8004514:	f04f 33ff 	mov.w	r3, #4294967295
 8004518:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4413      	add	r3, r2
 8004522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004526:	461a      	mov	r2, r3
 8004528:	2300      	movs	r3, #0
 800452a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	3301      	adds	r3, #1
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004536:	461a      	mov	r2, r3
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4293      	cmp	r3, r2
 800453c:	d3e3      	bcc.n	8004506 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f04f 32ff 	mov.w	r2, #4294967295
 800454a:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2280      	movs	r2, #128	@ 0x80
 8004550:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a0c      	ldr	r2, [pc, #48]	@ (8004588 <USB_HostInit+0xfc>)
 8004556:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a0c      	ldr	r2, [pc, #48]	@ (800458c <USB_HostInit+0x100>)
 800455c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f043 0210 	orr.w	r2, r3, #16
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	4b07      	ldr	r3, [pc, #28]	@ (8004590 <USB_HostInit+0x104>)
 8004572:	4313      	orrs	r3, r2
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004578:	7dfb      	ldrb	r3, [r7, #23]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004584:	b004      	add	sp, #16
 8004586:	4770      	bx	lr
 8004588:	00600080 	.word	0x00600080
 800458c:	004000e0 	.word	0x004000e0
 8004590:	a3200008 	.word	0xa3200008

08004594 <__NVIC_SetPriority>:
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	6039      	str	r1, [r7, #0]
 800459e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	db0a      	blt.n	80045be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	490c      	ldr	r1, [pc, #48]	@ (80045e0 <__NVIC_SetPriority+0x4c>)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	0112      	lsls	r2, r2, #4
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	440b      	add	r3, r1
 80045b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80045bc:	e00a      	b.n	80045d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	4908      	ldr	r1, [pc, #32]	@ (80045e4 <__NVIC_SetPriority+0x50>)
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	3b04      	subs	r3, #4
 80045cc:	0112      	lsls	r2, r2, #4
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	440b      	add	r3, r1
 80045d2:	761a      	strb	r2, [r3, #24]
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000e100 	.word	0xe000e100
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045ec:	4b05      	ldr	r3, [pc, #20]	@ (8004604 <SysTick_Handler+0x1c>)
 80045ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045f0:	f001 fd46 	bl	8006080 <xTaskGetSchedulerState>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d001      	beq.n	80045fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045fa:	f002 fb3d 	bl	8006c78 <xPortSysTickHandler>
  }
}
 80045fe:	bf00      	nop
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	e000e010 	.word	0xe000e010

08004608 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800460c:	2100      	movs	r1, #0
 800460e:	f06f 0004 	mvn.w	r0, #4
 8004612:	f7ff ffbf 	bl	8004594 <__NVIC_SetPriority>
#endif
}
 8004616:	bf00      	nop
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004622:	f3ef 8305 	mrs	r3, IPSR
 8004626:	603b      	str	r3, [r7, #0]
  return(result);
 8004628:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800462e:	f06f 0305 	mvn.w	r3, #5
 8004632:	607b      	str	r3, [r7, #4]
 8004634:	e00c      	b.n	8004650 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004636:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <osKernelInitialize+0x44>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d105      	bne.n	800464a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800463e:	4b08      	ldr	r3, [pc, #32]	@ (8004660 <osKernelInitialize+0x44>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004644:	2300      	movs	r3, #0
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	e002      	b.n	8004650 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800464a:	f04f 33ff 	mov.w	r3, #4294967295
 800464e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004650:	687b      	ldr	r3, [r7, #4]
}
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	200005ec 	.word	0x200005ec

08004664 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800466a:	f3ef 8305 	mrs	r3, IPSR
 800466e:	603b      	str	r3, [r7, #0]
  return(result);
 8004670:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004676:	f06f 0305 	mvn.w	r3, #5
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	e010      	b.n	80046a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800467e:	4b0b      	ldr	r3, [pc, #44]	@ (80046ac <osKernelStart+0x48>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d109      	bne.n	800469a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004686:	f7ff ffbf 	bl	8004608 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800468a:	4b08      	ldr	r3, [pc, #32]	@ (80046ac <osKernelStart+0x48>)
 800468c:	2202      	movs	r2, #2
 800468e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004690:	f001 f892 	bl	80057b8 <vTaskStartScheduler>
      stat = osOK;
 8004694:	2300      	movs	r3, #0
 8004696:	607b      	str	r3, [r7, #4]
 8004698:	e002      	b.n	80046a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800469a:	f04f 33ff 	mov.w	r3, #4294967295
 800469e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046a0:	687b      	ldr	r3, [r7, #4]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	200005ec 	.word	0x200005ec

080046b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08e      	sub	sp, #56	@ 0x38
 80046b4:	af04      	add	r7, sp, #16
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046c0:	f3ef 8305 	mrs	r3, IPSR
 80046c4:	617b      	str	r3, [r7, #20]
  return(result);
 80046c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d17e      	bne.n	80047ca <osThreadNew+0x11a>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d07b      	beq.n	80047ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046d2:	2380      	movs	r3, #128	@ 0x80
 80046d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046d6:	2318      	movs	r3, #24
 80046d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80046de:	f04f 33ff 	mov.w	r3, #4294967295
 80046e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d045      	beq.n	8004776 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <osThreadNew+0x48>
        name = attr->name;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <osThreadNew+0x6e>
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	2b38      	cmp	r3, #56	@ 0x38
 8004710:	d805      	bhi.n	800471e <osThreadNew+0x6e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <osThreadNew+0x72>
        return (NULL);
 800471e:	2300      	movs	r3, #0
 8004720:	e054      	b.n	80047cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	089b      	lsrs	r3, r3, #2
 8004730:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00e      	beq.n	8004758 <osThreadNew+0xa8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004740:	d90a      	bls.n	8004758 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004746:	2b00      	cmp	r3, #0
 8004748:	d006      	beq.n	8004758 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <osThreadNew+0xa8>
        mem = 1;
 8004752:	2301      	movs	r3, #1
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	e010      	b.n	800477a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10c      	bne.n	800477a <osThreadNew+0xca>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d108      	bne.n	800477a <osThreadNew+0xca>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d104      	bne.n	800477a <osThreadNew+0xca>
          mem = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e001      	b.n	800477a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d110      	bne.n	80047a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004788:	9202      	str	r2, [sp, #8]
 800478a:	9301      	str	r3, [sp, #4]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6a3a      	ldr	r2, [r7, #32]
 8004794:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fe1a 	bl	80053d0 <xTaskCreateStatic>
 800479c:	4603      	mov	r3, r0
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	e013      	b.n	80047ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d110      	bne.n	80047ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	f107 0310 	add.w	r3, r7, #16
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fe68 	bl	8005490 <xTaskCreate>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d001      	beq.n	80047ca <osThreadNew+0x11a>
            hTask = NULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047ca:	693b      	ldr	r3, [r7, #16]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3728      	adds	r7, #40	@ 0x28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047dc:	f3ef 8305 	mrs	r3, IPSR
 80047e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80047e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <osDelay+0x1c>
    stat = osErrorISR;
 80047e8:	f06f 0305 	mvn.w	r3, #5
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	e007      	b.n	8004800 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <osDelay+0x2c>
      vTaskDelay(ticks);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 ffa6 	bl	800574c <vTaskDelay>
    }
  }

  return (stat);
 8004800:	68fb      	ldr	r3, [r7, #12]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a07      	ldr	r2, [pc, #28]	@ (8004838 <vApplicationGetIdleTaskMemory+0x2c>)
 800481c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4a06      	ldr	r2, [pc, #24]	@ (800483c <vApplicationGetIdleTaskMemory+0x30>)
 8004822:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2280      	movs	r2, #128	@ 0x80
 8004828:	601a      	str	r2, [r3, #0]
}
 800482a:	bf00      	nop
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	200005f0 	.word	0x200005f0
 800483c:	20000698 	.word	0x20000698

08004840 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a07      	ldr	r2, [pc, #28]	@ (800486c <vApplicationGetTimerTaskMemory+0x2c>)
 8004850:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	4a06      	ldr	r2, [pc, #24]	@ (8004870 <vApplicationGetTimerTaskMemory+0x30>)
 8004856:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800485e:	601a      	str	r2, [r3, #0]
}
 8004860:	bf00      	nop
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	20000898 	.word	0x20000898
 8004870:	20000940 	.word	0x20000940

08004874 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f103 0208 	add.w	r2, r3, #8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f103 0208 	add.w	r2, r3, #8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f103 0208 	add.w	r2, r3, #8
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]
}
 800490a:	bf00      	nop
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d103      	bne.n	8004936 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e00c      	b.n	8004950 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3308      	adds	r3, #8
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e002      	b.n	8004944 <vListInsert+0x2e>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	d2f6      	bcs.n	800493e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	601a      	str	r2, [r3, #0]
}
 800497c:	bf00      	nop
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6892      	ldr	r2, [r2, #8]
 800499e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6852      	ldr	r2, [r2, #4]
 80049a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d103      	bne.n	80049bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	1e5a      	subs	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	e7fd      	b.n	8004a04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a08:	f002 f8a6 	bl	8006b58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a14:	68f9      	ldr	r1, [r7, #12]
 8004a16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	441a      	add	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	68f9      	ldr	r1, [r7, #12]
 8004a3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a3e:	fb01 f303 	mul.w	r3, r1, r3
 8004a42:	441a      	add	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	22ff      	movs	r2, #255	@ 0xff
 8004a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	22ff      	movs	r2, #255	@ 0xff
 8004a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d114      	bne.n	8004a88 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d01a      	beq.n	8004a9c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3310      	adds	r3, #16
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 f942 	bl	8005cf4 <xTaskRemoveFromEventList>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d012      	beq.n	8004a9c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a76:	4b0d      	ldr	r3, [pc, #52]	@ (8004aac <xQueueGenericReset+0xd0>)
 8004a78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	e009      	b.n	8004a9c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3310      	adds	r3, #16
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fef1 	bl	8004874 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3324      	adds	r3, #36	@ 0x24
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff feec 	bl	8004874 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a9c:	f002 f88e 	bl	8006bbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004aa0:	2301      	movs	r3, #1
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08e      	sub	sp, #56	@ 0x38
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10b      	bne.n	8004adc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
 8004ada:	e7fd      	b.n	8004ad8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10b      	bne.n	8004afa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	e7fd      	b.n	8004af6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <xQueueGenericCreateStatic+0x56>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <xQueueGenericCreateStatic+0x5a>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <xQueueGenericCreateStatic+0x5c>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10b      	bne.n	8004b28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	623b      	str	r3, [r7, #32]
}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	e7fd      	b.n	8004b24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d102      	bne.n	8004b34 <xQueueGenericCreateStatic+0x84>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <xQueueGenericCreateStatic+0x88>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <xQueueGenericCreateStatic+0x8a>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	61fb      	str	r3, [r7, #28]
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	e7fd      	b.n	8004b52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b56:	2350      	movs	r3, #80	@ 0x50
 8004b58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b50      	cmp	r3, #80	@ 0x50
 8004b5e:	d00b      	beq.n	8004b78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	61bb      	str	r3, [r7, #24]
}
 8004b72:	bf00      	nop
 8004b74:	bf00      	nop
 8004b76:	e7fd      	b.n	8004b74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00d      	beq.n	8004ba0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f805 	bl	8004baa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3730      	adds	r7, #48	@ 0x30
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d103      	bne.n	8004bc6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	e002      	b.n	8004bcc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bd8:	2101      	movs	r1, #1
 8004bda:	69b8      	ldr	r0, [r7, #24]
 8004bdc:	f7ff fefe 	bl	80049dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	78fa      	ldrb	r2, [r7, #3]
 8004be4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08e      	sub	sp, #56	@ 0x38
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10b      	bne.n	8004c24 <xQueueGenericSend+0x34>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c1e:	bf00      	nop
 8004c20:	bf00      	nop
 8004c22:	e7fd      	b.n	8004c20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d103      	bne.n	8004c32 <xQueueGenericSend+0x42>
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <xQueueGenericSend+0x46>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <xQueueGenericSend+0x48>
 8004c36:	2300      	movs	r3, #0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10b      	bne.n	8004c54 <xQueueGenericSend+0x64>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	e7fd      	b.n	8004c50 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d103      	bne.n	8004c62 <xQueueGenericSend+0x72>
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <xQueueGenericSend+0x76>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <xQueueGenericSend+0x78>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10b      	bne.n	8004c84 <xQueueGenericSend+0x94>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	623b      	str	r3, [r7, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	bf00      	nop
 8004c82:	e7fd      	b.n	8004c80 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c84:	f001 f9fc 	bl	8006080 <xTaskGetSchedulerState>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d102      	bne.n	8004c94 <xQueueGenericSend+0xa4>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <xQueueGenericSend+0xa8>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <xQueueGenericSend+0xaa>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <xQueueGenericSend+0xc6>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	61fb      	str	r3, [r7, #28]
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	e7fd      	b.n	8004cb2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cb6:	f001 ff4f 	bl	8006b58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d302      	bcc.n	8004ccc <xQueueGenericSend+0xdc>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d129      	bne.n	8004d20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cd2:	f000 fa0f 	bl	80050f4 <prvCopyDataToQueue>
 8004cd6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d010      	beq.n	8004d02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce2:	3324      	adds	r3, #36	@ 0x24
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f001 f805 	bl	8005cf4 <xTaskRemoveFromEventList>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d013      	beq.n	8004d18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8004df0 <xQueueGenericSend+0x200>)
 8004cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	e00a      	b.n	8004d18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d08:	4b39      	ldr	r3, [pc, #228]	@ (8004df0 <xQueueGenericSend+0x200>)
 8004d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d18:	f001 ff50 	bl	8006bbc <vPortExitCritical>
				return pdPASS;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e063      	b.n	8004de8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d26:	f001 ff49 	bl	8006bbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e05c      	b.n	8004de8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d34:	f107 0314 	add.w	r3, r7, #20
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f001 f83f 	bl	8005dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d42:	f001 ff3b 	bl	8006bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d46:	f000 fda7 	bl	8005898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d4a:	f001 ff05 	bl	8006b58 <vPortEnterCritical>
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d103      	bne.n	8004d64 <xQueueGenericSend+0x174>
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d6a:	b25b      	sxtb	r3, r3
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d103      	bne.n	8004d7a <xQueueGenericSend+0x18a>
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d7a:	f001 ff1f 	bl	8006bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d7e:	1d3a      	adds	r2, r7, #4
 8004d80:	f107 0314 	add.w	r3, r7, #20
 8004d84:	4611      	mov	r1, r2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 f82e 	bl	8005de8 <xTaskCheckForTimeOut>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d124      	bne.n	8004ddc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d94:	f000 faa6 	bl	80052e4 <prvIsQueueFull>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d018      	beq.n	8004dd0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da0:	3310      	adds	r3, #16
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	4611      	mov	r1, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 ff52 	bl	8005c50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004dac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dae:	f000 fa31 	bl	8005214 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004db2:	f000 fd7f 	bl	80058b4 <xTaskResumeAll>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f47f af7c 	bne.w	8004cb6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <xQueueGenericSend+0x200>)
 8004dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	e772      	b.n	8004cb6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004dd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dd2:	f000 fa1f 	bl	8005214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dd6:	f000 fd6d 	bl	80058b4 <xTaskResumeAll>
 8004dda:	e76c      	b.n	8004cb6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ddc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dde:	f000 fa19 	bl	8005214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004de2:	f000 fd67 	bl	80058b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004de6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3738      	adds	r7, #56	@ 0x38
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	e000ed04 	.word	0xe000ed04

08004df4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b090      	sub	sp, #64	@ 0x40
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10b      	bne.n	8004e24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e1e:	bf00      	nop
 8004e20:	bf00      	nop
 8004e22:	e7fd      	b.n	8004e20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d103      	bne.n	8004e32 <xQueueGenericSendFromISR+0x3e>
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <xQueueGenericSendFromISR+0x42>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <xQueueGenericSendFromISR+0x44>
 8004e36:	2300      	movs	r3, #0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10b      	bne.n	8004e54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e4e:	bf00      	nop
 8004e50:	bf00      	nop
 8004e52:	e7fd      	b.n	8004e50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d103      	bne.n	8004e62 <xQueueGenericSendFromISR+0x6e>
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <xQueueGenericSendFromISR+0x72>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <xQueueGenericSendFromISR+0x74>
 8004e66:	2300      	movs	r3, #0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10b      	bne.n	8004e84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	623b      	str	r3, [r7, #32]
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	e7fd      	b.n	8004e80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e84:	f001 ff48 	bl	8006d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e88:	f3ef 8211 	mrs	r2, BASEPRI
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	61fa      	str	r2, [r7, #28]
 8004e9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ea2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d302      	bcc.n	8004eb6 <xQueueGenericSendFromISR+0xc2>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d12f      	bne.n	8004f16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ebc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ecc:	f000 f912 	bl	80050f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ed0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d112      	bne.n	8004f00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d016      	beq.n	8004f10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	3324      	adds	r3, #36	@ 0x24
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 ff04 	bl	8005cf4 <xTaskRemoveFromEventList>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00e      	beq.n	8004f10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00b      	beq.n	8004f10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	e007      	b.n	8004f10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f04:	3301      	adds	r3, #1
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	b25a      	sxtb	r2, r3
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004f10:	2301      	movs	r3, #1
 8004f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004f14:	e001      	b.n	8004f1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3740      	adds	r7, #64	@ 0x40
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08c      	sub	sp, #48	@ 0x30
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <xQueueReceive+0x32>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	623b      	str	r3, [r7, #32]
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	e7fd      	b.n	8004f5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d103      	bne.n	8004f70 <xQueueReceive+0x40>
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <xQueueReceive+0x44>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <xQueueReceive+0x46>
 8004f74:	2300      	movs	r3, #0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10b      	bne.n	8004f92 <xQueueReceive+0x62>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	61fb      	str	r3, [r7, #28]
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	e7fd      	b.n	8004f8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f92:	f001 f875 	bl	8006080 <xTaskGetSchedulerState>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <xQueueReceive+0x72>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <xQueueReceive+0x76>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <xQueueReceive+0x78>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <xQueueReceive+0x94>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	61bb      	str	r3, [r7, #24]
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	e7fd      	b.n	8004fc0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fc4:	f001 fdc8 	bl	8006b58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01f      	beq.n	8005014 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fd8:	f000 f8f6 	bl	80051c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	1e5a      	subs	r2, r3, #1
 8004fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00f      	beq.n	800500c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fee:	3310      	adds	r3, #16
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fe7f 	bl	8005cf4 <xTaskRemoveFromEventList>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ffc:	4b3c      	ldr	r3, [pc, #240]	@ (80050f0 <xQueueReceive+0x1c0>)
 8004ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800500c:	f001 fdd6 	bl	8006bbc <vPortExitCritical>
				return pdPASS;
 8005010:	2301      	movs	r3, #1
 8005012:	e069      	b.n	80050e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d103      	bne.n	8005022 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800501a:	f001 fdcf 	bl	8006bbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800501e:	2300      	movs	r3, #0
 8005020:	e062      	b.n	80050e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005028:	f107 0310 	add.w	r3, r7, #16
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fec5 	bl	8005dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005032:	2301      	movs	r3, #1
 8005034:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005036:	f001 fdc1 	bl	8006bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800503a:	f000 fc2d 	bl	8005898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800503e:	f001 fd8b 	bl	8006b58 <vPortEnterCritical>
 8005042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005044:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005048:	b25b      	sxtb	r3, r3
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d103      	bne.n	8005058 <xQueueReceive+0x128>
 8005050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800505e:	b25b      	sxtb	r3, r3
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d103      	bne.n	800506e <xQueueReceive+0x13e>
 8005066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800506e:	f001 fda5 	bl	8006bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005072:	1d3a      	adds	r2, r7, #4
 8005074:	f107 0310 	add.w	r3, r7, #16
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f000 feb4 	bl	8005de8 <xTaskCheckForTimeOut>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d123      	bne.n	80050ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005086:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005088:	f000 f916 	bl	80052b8 <prvIsQueueEmpty>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d017      	beq.n	80050c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005094:	3324      	adds	r3, #36	@ 0x24
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	4611      	mov	r1, r2
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fdd8 	bl	8005c50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050a2:	f000 f8b7 	bl	8005214 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050a6:	f000 fc05 	bl	80058b4 <xTaskResumeAll>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d189      	bne.n	8004fc4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80050b0:	4b0f      	ldr	r3, [pc, #60]	@ (80050f0 <xQueueReceive+0x1c0>)
 80050b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	e780      	b.n	8004fc4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050c4:	f000 f8a6 	bl	8005214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050c8:	f000 fbf4 	bl	80058b4 <xTaskResumeAll>
 80050cc:	e77a      	b.n	8004fc4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050d0:	f000 f8a0 	bl	8005214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050d4:	f000 fbee 	bl	80058b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050da:	f000 f8ed 	bl	80052b8 <prvIsQueueEmpty>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f43f af6f 	beq.w	8004fc4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3730      	adds	r7, #48	@ 0x30
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	e000ed04 	.word	0xe000ed04

080050f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005108:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10d      	bne.n	800512e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d14d      	bne.n	80051b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 ffcc 	bl	80060bc <xTaskPriorityDisinherit>
 8005124:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	e043      	b.n	80051b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d119      	bne.n	8005168 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6858      	ldr	r0, [r3, #4]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513c:	461a      	mov	r2, r3
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	f002 f89e 	bl	8007280 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514c:	441a      	add	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	429a      	cmp	r2, r3
 800515c:	d32b      	bcc.n	80051b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	e026      	b.n	80051b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	68d8      	ldr	r0, [r3, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005170:	461a      	mov	r2, r3
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	f002 f884 	bl	8007280 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005180:	425b      	negs	r3, r3
 8005182:	441a      	add	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d207      	bcs.n	80051a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519c:	425b      	negs	r3, r3
 800519e:	441a      	add	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d105      	bne.n	80051b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80051be:	697b      	ldr	r3, [r7, #20]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d018      	beq.n	800520c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	441a      	add	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d303      	bcc.n	80051fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68d9      	ldr	r1, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005204:	461a      	mov	r2, r3
 8005206:	6838      	ldr	r0, [r7, #0]
 8005208:	f002 f83a 	bl	8007280 <memcpy>
	}
}
 800520c:	bf00      	nop
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800521c:	f001 fc9c 	bl	8006b58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005226:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005228:	e011      	b.n	800524e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	2b00      	cmp	r3, #0
 8005230:	d012      	beq.n	8005258 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3324      	adds	r3, #36	@ 0x24
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fd5c 	bl	8005cf4 <xTaskRemoveFromEventList>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005242:	f000 fe35 	bl	8005eb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	3b01      	subs	r3, #1
 800524a:	b2db      	uxtb	r3, r3
 800524c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800524e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005252:	2b00      	cmp	r3, #0
 8005254:	dce9      	bgt.n	800522a <prvUnlockQueue+0x16>
 8005256:	e000      	b.n	800525a <prvUnlockQueue+0x46>
					break;
 8005258:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	22ff      	movs	r2, #255	@ 0xff
 800525e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005262:	f001 fcab 	bl	8006bbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005266:	f001 fc77 	bl	8006b58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005270:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005272:	e011      	b.n	8005298 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d012      	beq.n	80052a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3310      	adds	r3, #16
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fd37 	bl	8005cf4 <xTaskRemoveFromEventList>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800528c:	f000 fe10 	bl	8005eb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005290:	7bbb      	ldrb	r3, [r7, #14]
 8005292:	3b01      	subs	r3, #1
 8005294:	b2db      	uxtb	r3, r3
 8005296:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800529c:	2b00      	cmp	r3, #0
 800529e:	dce9      	bgt.n	8005274 <prvUnlockQueue+0x60>
 80052a0:	e000      	b.n	80052a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	22ff      	movs	r2, #255	@ 0xff
 80052a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80052ac:	f001 fc86 	bl	8006bbc <vPortExitCritical>
}
 80052b0:	bf00      	nop
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052c0:	f001 fc4a 	bl	8006b58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052cc:	2301      	movs	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	e001      	b.n	80052d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052d6:	f001 fc71 	bl	8006bbc <vPortExitCritical>

	return xReturn;
 80052da:	68fb      	ldr	r3, [r7, #12]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052ec:	f001 fc34 	bl	8006b58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d102      	bne.n	8005302 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052fc:	2301      	movs	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	e001      	b.n	8005306 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005306:	f001 fc59 	bl	8006bbc <vPortExitCritical>

	return xReturn;
 800530a:	68fb      	ldr	r3, [r7, #12]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e014      	b.n	800534e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005324:	4a0f      	ldr	r2, [pc, #60]	@ (8005364 <vQueueAddToRegistry+0x50>)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10b      	bne.n	8005348 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005330:	490c      	ldr	r1, [pc, #48]	@ (8005364 <vQueueAddToRegistry+0x50>)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800533a:	4a0a      	ldr	r2, [pc, #40]	@ (8005364 <vQueueAddToRegistry+0x50>)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005346:	e006      	b.n	8005356 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3301      	adds	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b07      	cmp	r3, #7
 8005352:	d9e7      	bls.n	8005324 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000d40 	.word	0x20000d40

08005368 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005378:	f001 fbee 	bl	8006b58 <vPortEnterCritical>
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005382:	b25b      	sxtb	r3, r3
 8005384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005388:	d103      	bne.n	8005392 <vQueueWaitForMessageRestricted+0x2a>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005398:	b25b      	sxtb	r3, r3
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d103      	bne.n	80053a8 <vQueueWaitForMessageRestricted+0x40>
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053a8:	f001 fc08 	bl	8006bbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d106      	bne.n	80053c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	3324      	adds	r3, #36	@ 0x24
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fc6d 	bl	8005c9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053c2:	6978      	ldr	r0, [r7, #20]
 80053c4:	f7ff ff26 	bl	8005214 <prvUnlockQueue>
	}
 80053c8:	bf00      	nop
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08e      	sub	sp, #56	@ 0x38
 80053d4:	af04      	add	r7, sp, #16
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10b      	bne.n	80053fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	623b      	str	r3, [r7, #32]
}
 80053f6:	bf00      	nop
 80053f8:	bf00      	nop
 80053fa:	e7fd      	b.n	80053f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10b      	bne.n	800541a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	61fb      	str	r3, [r7, #28]
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop
 8005418:	e7fd      	b.n	8005416 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800541a:	23a8      	movs	r3, #168	@ 0xa8
 800541c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	2ba8      	cmp	r3, #168	@ 0xa8
 8005422:	d00b      	beq.n	800543c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	61bb      	str	r3, [r7, #24]
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800543c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800543e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01e      	beq.n	8005482 <xTaskCreateStatic+0xb2>
 8005444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01b      	beq.n	8005482 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800544a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005452:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	2202      	movs	r2, #2
 8005458:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800545c:	2300      	movs	r3, #0
 800545e:	9303      	str	r3, [sp, #12]
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	9302      	str	r3, [sp, #8]
 8005464:	f107 0314 	add.w	r3, r7, #20
 8005468:	9301      	str	r3, [sp, #4]
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f851 	bl	800551c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800547a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800547c:	f000 f8f6 	bl	800566c <prvAddNewTaskToReadyList>
 8005480:	e001      	b.n	8005486 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005486:	697b      	ldr	r3, [r7, #20]
	}
 8005488:	4618      	mov	r0, r3
 800548a:	3728      	adds	r7, #40	@ 0x28
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08c      	sub	sp, #48	@ 0x30
 8005494:	af04      	add	r7, sp, #16
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 fc79 	bl	8006d9c <pvPortMalloc>
 80054aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00e      	beq.n	80054d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054b2:	20a8      	movs	r0, #168	@ 0xa8
 80054b4:	f001 fc72 	bl	8006d9c <pvPortMalloc>
 80054b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80054c6:	e005      	b.n	80054d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054c8:	6978      	ldr	r0, [r7, #20]
 80054ca:	f001 fd35 	bl	8006f38 <vPortFree>
 80054ce:	e001      	b.n	80054d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d017      	beq.n	800550a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	2300      	movs	r3, #0
 80054e6:	9303      	str	r3, [sp, #12]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	9302      	str	r3, [sp, #8]
 80054ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f80f 	bl	800551c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054fe:	69f8      	ldr	r0, [r7, #28]
 8005500:	f000 f8b4 	bl	800566c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005504:	2301      	movs	r3, #1
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	e002      	b.n	8005510 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800550a:	f04f 33ff 	mov.w	r3, #4294967295
 800550e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005510:	69bb      	ldr	r3, [r7, #24]
	}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	461a      	mov	r2, r3
 8005534:	21a5      	movs	r1, #165	@ 0xa5
 8005536:	f001 fe1f 	bl	8007178 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005544:	3b01      	subs	r3, #1
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f023 0307 	bic.w	r3, r3, #7
 8005552:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	617b      	str	r3, [r7, #20]
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	e7fd      	b.n	8005572 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01f      	beq.n	80055bc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800557c:	2300      	movs	r3, #0
 800557e:	61fb      	str	r3, [r7, #28]
 8005580:	e012      	b.n	80055a8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	4413      	add	r3, r2
 8005588:	7819      	ldrb	r1, [r3, #0]
 800558a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	3334      	adds	r3, #52	@ 0x34
 8005592:	460a      	mov	r2, r1
 8005594:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d006      	beq.n	80055b0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	3301      	adds	r3, #1
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b0f      	cmp	r3, #15
 80055ac:	d9e9      	bls.n	8005582 <prvInitialiseNewTask+0x66>
 80055ae:	e000      	b.n	80055b2 <prvInitialiseNewTask+0x96>
			{
				break;
 80055b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055ba:	e003      	b.n	80055c4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	2b37      	cmp	r3, #55	@ 0x37
 80055c8:	d901      	bls.n	80055ce <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055ca:	2337      	movs	r3, #55	@ 0x37
 80055cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055d8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	2200      	movs	r2, #0
 80055de:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e2:	3304      	adds	r3, #4
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff f965 	bl	80048b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ec:	3318      	adds	r3, #24
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff f960 	bl	80048b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005602:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005608:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	2200      	movs	r2, #0
 800560e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005614:	2200      	movs	r2, #0
 8005616:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800561a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561c:	3354      	adds	r3, #84	@ 0x54
 800561e:	224c      	movs	r2, #76	@ 0x4c
 8005620:	2100      	movs	r1, #0
 8005622:	4618      	mov	r0, r3
 8005624:	f001 fda8 	bl	8007178 <memset>
 8005628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562a:	4a0d      	ldr	r2, [pc, #52]	@ (8005660 <prvInitialiseNewTask+0x144>)
 800562c:	659a      	str	r2, [r3, #88]	@ 0x58
 800562e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005630:	4a0c      	ldr	r2, [pc, #48]	@ (8005664 <prvInitialiseNewTask+0x148>)
 8005632:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005636:	4a0c      	ldr	r2, [pc, #48]	@ (8005668 <prvInitialiseNewTask+0x14c>)
 8005638:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	68f9      	ldr	r1, [r7, #12]
 800563e:	69b8      	ldr	r0, [r7, #24]
 8005640:	f001 f95a 	bl	80068f8 <pxPortInitialiseStack>
 8005644:	4602      	mov	r2, r0
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800564a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005656:	bf00      	nop
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	2000275c 	.word	0x2000275c
 8005664:	200027c4 	.word	0x200027c4
 8005668:	2000282c 	.word	0x2000282c

0800566c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005674:	f001 fa70 	bl	8006b58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005678:	4b2d      	ldr	r3, [pc, #180]	@ (8005730 <prvAddNewTaskToReadyList+0xc4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3301      	adds	r3, #1
 800567e:	4a2c      	ldr	r2, [pc, #176]	@ (8005730 <prvAddNewTaskToReadyList+0xc4>)
 8005680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005682:	4b2c      	ldr	r3, [pc, #176]	@ (8005734 <prvAddNewTaskToReadyList+0xc8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800568a:	4a2a      	ldr	r2, [pc, #168]	@ (8005734 <prvAddNewTaskToReadyList+0xc8>)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005690:	4b27      	ldr	r3, [pc, #156]	@ (8005730 <prvAddNewTaskToReadyList+0xc4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d110      	bne.n	80056ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005698:	f000 fc2e 	bl	8005ef8 <prvInitialiseTaskLists>
 800569c:	e00d      	b.n	80056ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800569e:	4b26      	ldr	r3, [pc, #152]	@ (8005738 <prvAddNewTaskToReadyList+0xcc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056a6:	4b23      	ldr	r3, [pc, #140]	@ (8005734 <prvAddNewTaskToReadyList+0xc8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d802      	bhi.n	80056ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005734 <prvAddNewTaskToReadyList+0xc8>)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056ba:	4b20      	ldr	r3, [pc, #128]	@ (800573c <prvAddNewTaskToReadyList+0xd0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3301      	adds	r3, #1
 80056c0:	4a1e      	ldr	r2, [pc, #120]	@ (800573c <prvAddNewTaskToReadyList+0xd0>)
 80056c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056c4:	4b1d      	ldr	r3, [pc, #116]	@ (800573c <prvAddNewTaskToReadyList+0xd0>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005740 <prvAddNewTaskToReadyList+0xd4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d903      	bls.n	80056e0 <prvAddNewTaskToReadyList+0x74>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056dc:	4a18      	ldr	r2, [pc, #96]	@ (8005740 <prvAddNewTaskToReadyList+0xd4>)
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4a15      	ldr	r2, [pc, #84]	@ (8005744 <prvAddNewTaskToReadyList+0xd8>)
 80056ee:	441a      	add	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f7ff f8e9 	bl	80048ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056fc:	f001 fa5e 	bl	8006bbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005700:	4b0d      	ldr	r3, [pc, #52]	@ (8005738 <prvAddNewTaskToReadyList+0xcc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00e      	beq.n	8005726 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005708:	4b0a      	ldr	r3, [pc, #40]	@ (8005734 <prvAddNewTaskToReadyList+0xc8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005712:	429a      	cmp	r2, r3
 8005714:	d207      	bcs.n	8005726 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005716:	4b0c      	ldr	r3, [pc, #48]	@ (8005748 <prvAddNewTaskToReadyList+0xdc>)
 8005718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20001254 	.word	0x20001254
 8005734:	20000d80 	.word	0x20000d80
 8005738:	20001260 	.word	0x20001260
 800573c:	20001270 	.word	0x20001270
 8005740:	2000125c 	.word	0x2000125c
 8005744:	20000d84 	.word	0x20000d84
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d018      	beq.n	8005790 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800575e:	4b14      	ldr	r3, [pc, #80]	@ (80057b0 <vTaskDelay+0x64>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <vTaskDelay+0x32>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	60bb      	str	r3, [r7, #8]
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	e7fd      	b.n	800577a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800577e:	f000 f88b 	bl	8005898 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005782:	2100      	movs	r1, #0
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fd09 	bl	800619c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800578a:	f000 f893 	bl	80058b4 <xTaskResumeAll>
 800578e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d107      	bne.n	80057a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005796:	4b07      	ldr	r3, [pc, #28]	@ (80057b4 <vTaskDelay+0x68>)
 8005798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	2000127c 	.word	0x2000127c
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	@ 0x28
 80057bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057c6:	463a      	mov	r2, r7
 80057c8:	1d39      	adds	r1, r7, #4
 80057ca:	f107 0308 	add.w	r3, r7, #8
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff f81c 	bl	800480c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057d4:	6839      	ldr	r1, [r7, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	9202      	str	r2, [sp, #8]
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	2300      	movs	r3, #0
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	2300      	movs	r3, #0
 80057e4:	460a      	mov	r2, r1
 80057e6:	4924      	ldr	r1, [pc, #144]	@ (8005878 <vTaskStartScheduler+0xc0>)
 80057e8:	4824      	ldr	r0, [pc, #144]	@ (800587c <vTaskStartScheduler+0xc4>)
 80057ea:	f7ff fdf1 	bl	80053d0 <xTaskCreateStatic>
 80057ee:	4603      	mov	r3, r0
 80057f0:	4a23      	ldr	r2, [pc, #140]	@ (8005880 <vTaskStartScheduler+0xc8>)
 80057f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057f4:	4b22      	ldr	r3, [pc, #136]	@ (8005880 <vTaskStartScheduler+0xc8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057fc:	2301      	movs	r3, #1
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e001      	b.n	8005806 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d102      	bne.n	8005812 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800580c:	f000 fd1a 	bl	8006244 <xTimerCreateTimerTask>
 8005810:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d11b      	bne.n	8005850 <vTaskStartScheduler+0x98>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	613b      	str	r3, [r7, #16]
}
 800582a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800582c:	4b15      	ldr	r3, [pc, #84]	@ (8005884 <vTaskStartScheduler+0xcc>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3354      	adds	r3, #84	@ 0x54
 8005832:	4a15      	ldr	r2, [pc, #84]	@ (8005888 <vTaskStartScheduler+0xd0>)
 8005834:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005836:	4b15      	ldr	r3, [pc, #84]	@ (800588c <vTaskStartScheduler+0xd4>)
 8005838:	f04f 32ff 	mov.w	r2, #4294967295
 800583c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800583e:	4b14      	ldr	r3, [pc, #80]	@ (8005890 <vTaskStartScheduler+0xd8>)
 8005840:	2201      	movs	r2, #1
 8005842:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005844:	4b13      	ldr	r3, [pc, #76]	@ (8005894 <vTaskStartScheduler+0xdc>)
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800584a:	f001 f8e1 	bl	8006a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800584e:	e00f      	b.n	8005870 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d10b      	bne.n	8005870 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	60fb      	str	r3, [r7, #12]
}
 800586a:	bf00      	nop
 800586c:	bf00      	nop
 800586e:	e7fd      	b.n	800586c <vTaskStartScheduler+0xb4>
}
 8005870:	bf00      	nop
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	080073bc 	.word	0x080073bc
 800587c:	08005ec9 	.word	0x08005ec9
 8005880:	20001278 	.word	0x20001278
 8005884:	20000d80 	.word	0x20000d80
 8005888:	20000010 	.word	0x20000010
 800588c:	20001274 	.word	0x20001274
 8005890:	20001260 	.word	0x20001260
 8005894:	20001258 	.word	0x20001258

08005898 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800589c:	4b04      	ldr	r3, [pc, #16]	@ (80058b0 <vTaskSuspendAll+0x18>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	4a03      	ldr	r2, [pc, #12]	@ (80058b0 <vTaskSuspendAll+0x18>)
 80058a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058a6:	bf00      	nop
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	2000127c 	.word	0x2000127c

080058b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058be:	2300      	movs	r3, #0
 80058c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058c2:	4b42      	ldr	r3, [pc, #264]	@ (80059cc <xTaskResumeAll+0x118>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10b      	bne.n	80058e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	603b      	str	r3, [r7, #0]
}
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	e7fd      	b.n	80058de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058e2:	f001 f939 	bl	8006b58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058e6:	4b39      	ldr	r3, [pc, #228]	@ (80059cc <xTaskResumeAll+0x118>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	4a37      	ldr	r2, [pc, #220]	@ (80059cc <xTaskResumeAll+0x118>)
 80058ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058f0:	4b36      	ldr	r3, [pc, #216]	@ (80059cc <xTaskResumeAll+0x118>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d162      	bne.n	80059be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058f8:	4b35      	ldr	r3, [pc, #212]	@ (80059d0 <xTaskResumeAll+0x11c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d05e      	beq.n	80059be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005900:	e02f      	b.n	8005962 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005902:	4b34      	ldr	r3, [pc, #208]	@ (80059d4 <xTaskResumeAll+0x120>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3318      	adds	r3, #24
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff f83a 	bl	8004988 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3304      	adds	r3, #4
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff f835 	bl	8004988 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005922:	4b2d      	ldr	r3, [pc, #180]	@ (80059d8 <xTaskResumeAll+0x124>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d903      	bls.n	8005932 <xTaskResumeAll+0x7e>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	4a2a      	ldr	r2, [pc, #168]	@ (80059d8 <xTaskResumeAll+0x124>)
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4a27      	ldr	r2, [pc, #156]	@ (80059dc <xTaskResumeAll+0x128>)
 8005940:	441a      	add	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3304      	adds	r3, #4
 8005946:	4619      	mov	r1, r3
 8005948:	4610      	mov	r0, r2
 800594a:	f7fe ffc0 	bl	80048ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005952:	4b23      	ldr	r3, [pc, #140]	@ (80059e0 <xTaskResumeAll+0x12c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	429a      	cmp	r2, r3
 800595a:	d302      	bcc.n	8005962 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800595c:	4b21      	ldr	r3, [pc, #132]	@ (80059e4 <xTaskResumeAll+0x130>)
 800595e:	2201      	movs	r2, #1
 8005960:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005962:	4b1c      	ldr	r3, [pc, #112]	@ (80059d4 <xTaskResumeAll+0x120>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1cb      	bne.n	8005902 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005970:	f000 fb66 	bl	8006040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005974:	4b1c      	ldr	r3, [pc, #112]	@ (80059e8 <xTaskResumeAll+0x134>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d010      	beq.n	80059a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005980:	f000 f846 	bl	8005a10 <xTaskIncrementTick>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800598a:	4b16      	ldr	r3, [pc, #88]	@ (80059e4 <xTaskResumeAll+0x130>)
 800598c:	2201      	movs	r2, #1
 800598e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3b01      	subs	r3, #1
 8005994:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1f1      	bne.n	8005980 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800599c:	4b12      	ldr	r3, [pc, #72]	@ (80059e8 <xTaskResumeAll+0x134>)
 800599e:	2200      	movs	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059a2:	4b10      	ldr	r3, [pc, #64]	@ (80059e4 <xTaskResumeAll+0x130>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059aa:	2301      	movs	r3, #1
 80059ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059ae:	4b0f      	ldr	r3, [pc, #60]	@ (80059ec <xTaskResumeAll+0x138>)
 80059b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059be:	f001 f8fd 	bl	8006bbc <vPortExitCritical>

	return xAlreadyYielded;
 80059c2:	68bb      	ldr	r3, [r7, #8]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	2000127c 	.word	0x2000127c
 80059d0:	20001254 	.word	0x20001254
 80059d4:	20001214 	.word	0x20001214
 80059d8:	2000125c 	.word	0x2000125c
 80059dc:	20000d84 	.word	0x20000d84
 80059e0:	20000d80 	.word	0x20000d80
 80059e4:	20001268 	.word	0x20001268
 80059e8:	20001264 	.word	0x20001264
 80059ec:	e000ed04 	.word	0xe000ed04

080059f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059f6:	4b05      	ldr	r3, [pc, #20]	@ (8005a0c <xTaskGetTickCount+0x1c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059fc:	687b      	ldr	r3, [r7, #4]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	20001258 	.word	0x20001258

08005a10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8005b58 <xTaskIncrementTick+0x148>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f040 8090 	bne.w	8005b44 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a24:	4b4d      	ldr	r3, [pc, #308]	@ (8005b5c <xTaskIncrementTick+0x14c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8005b5c <xTaskIncrementTick+0x14c>)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d121      	bne.n	8005a7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a38:	4b49      	ldr	r3, [pc, #292]	@ (8005b60 <xTaskIncrementTick+0x150>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	603b      	str	r3, [r7, #0]
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	e7fd      	b.n	8005a56 <xTaskIncrementTick+0x46>
 8005a5a:	4b41      	ldr	r3, [pc, #260]	@ (8005b60 <xTaskIncrementTick+0x150>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	4b40      	ldr	r3, [pc, #256]	@ (8005b64 <xTaskIncrementTick+0x154>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a3e      	ldr	r2, [pc, #248]	@ (8005b60 <xTaskIncrementTick+0x150>)
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	4a3e      	ldr	r2, [pc, #248]	@ (8005b64 <xTaskIncrementTick+0x154>)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b68 <xTaskIncrementTick+0x158>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3301      	adds	r3, #1
 8005a74:	4a3c      	ldr	r2, [pc, #240]	@ (8005b68 <xTaskIncrementTick+0x158>)
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	f000 fae2 	bl	8006040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8005b6c <xTaskIncrementTick+0x15c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d349      	bcc.n	8005b1a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a86:	4b36      	ldr	r3, [pc, #216]	@ (8005b60 <xTaskIncrementTick+0x150>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d104      	bne.n	8005a9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a90:	4b36      	ldr	r3, [pc, #216]	@ (8005b6c <xTaskIncrementTick+0x15c>)
 8005a92:	f04f 32ff 	mov.w	r2, #4294967295
 8005a96:	601a      	str	r2, [r3, #0]
					break;
 8005a98:	e03f      	b.n	8005b1a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a9a:	4b31      	ldr	r3, [pc, #196]	@ (8005b60 <xTaskIncrementTick+0x150>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d203      	bcs.n	8005aba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8005b6c <xTaskIncrementTick+0x15c>)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ab8:	e02f      	b.n	8005b1a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	3304      	adds	r3, #4
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fe ff62 	bl	8004988 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	3318      	adds	r3, #24
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fe ff59 	bl	8004988 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ada:	4b25      	ldr	r3, [pc, #148]	@ (8005b70 <xTaskIncrementTick+0x160>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d903      	bls.n	8005aea <xTaskIncrementTick+0xda>
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae6:	4a22      	ldr	r2, [pc, #136]	@ (8005b70 <xTaskIncrementTick+0x160>)
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4a1f      	ldr	r2, [pc, #124]	@ (8005b74 <xTaskIncrementTick+0x164>)
 8005af8:	441a      	add	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4619      	mov	r1, r3
 8005b00:	4610      	mov	r0, r2
 8005b02:	f7fe fee4 	bl	80048ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005b78 <xTaskIncrementTick+0x168>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d3b8      	bcc.n	8005a86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b18:	e7b5      	b.n	8005a86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b1a:	4b17      	ldr	r3, [pc, #92]	@ (8005b78 <xTaskIncrementTick+0x168>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b20:	4914      	ldr	r1, [pc, #80]	@ (8005b74 <xTaskIncrementTick+0x164>)
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d901      	bls.n	8005b36 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005b32:	2301      	movs	r3, #1
 8005b34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b36:	4b11      	ldr	r3, [pc, #68]	@ (8005b7c <xTaskIncrementTick+0x16c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	e004      	b.n	8005b4e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b44:	4b0e      	ldr	r3, [pc, #56]	@ (8005b80 <xTaskIncrementTick+0x170>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8005b80 <xTaskIncrementTick+0x170>)
 8005b4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b4e:	697b      	ldr	r3, [r7, #20]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	2000127c 	.word	0x2000127c
 8005b5c:	20001258 	.word	0x20001258
 8005b60:	2000120c 	.word	0x2000120c
 8005b64:	20001210 	.word	0x20001210
 8005b68:	2000126c 	.word	0x2000126c
 8005b6c:	20001274 	.word	0x20001274
 8005b70:	2000125c 	.word	0x2000125c
 8005b74:	20000d84 	.word	0x20000d84
 8005b78:	20000d80 	.word	0x20000d80
 8005b7c:	20001268 	.word	0x20001268
 8005b80:	20001264 	.word	0x20001264

08005b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8005c38 <vTaskSwitchContext+0xb4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b92:	4b2a      	ldr	r3, [pc, #168]	@ (8005c3c <vTaskSwitchContext+0xb8>)
 8005b94:	2201      	movs	r2, #1
 8005b96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b98:	e047      	b.n	8005c2a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005b9a:	4b28      	ldr	r3, [pc, #160]	@ (8005c3c <vTaskSwitchContext+0xb8>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba0:	4b27      	ldr	r3, [pc, #156]	@ (8005c40 <vTaskSwitchContext+0xbc>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	e011      	b.n	8005bcc <vTaskSwitchContext+0x48>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10b      	bne.n	8005bc6 <vTaskSwitchContext+0x42>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	607b      	str	r3, [r7, #4]
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	e7fd      	b.n	8005bc2 <vTaskSwitchContext+0x3e>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	491d      	ldr	r1, [pc, #116]	@ (8005c44 <vTaskSwitchContext+0xc0>)
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d0e3      	beq.n	8005ba8 <vTaskSwitchContext+0x24>
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4a16      	ldr	r2, [pc, #88]	@ (8005c44 <vTaskSwitchContext+0xc0>)
 8005bec:	4413      	add	r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	605a      	str	r2, [r3, #4]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	3308      	adds	r3, #8
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d104      	bne.n	8005c10 <vTaskSwitchContext+0x8c>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	605a      	str	r2, [r3, #4]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	4a0c      	ldr	r2, [pc, #48]	@ (8005c48 <vTaskSwitchContext+0xc4>)
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	4a09      	ldr	r2, [pc, #36]	@ (8005c40 <vTaskSwitchContext+0xbc>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c20:	4b09      	ldr	r3, [pc, #36]	@ (8005c48 <vTaskSwitchContext+0xc4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3354      	adds	r3, #84	@ 0x54
 8005c26:	4a09      	ldr	r2, [pc, #36]	@ (8005c4c <vTaskSwitchContext+0xc8>)
 8005c28:	6013      	str	r3, [r2, #0]
}
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	2000127c 	.word	0x2000127c
 8005c3c:	20001268 	.word	0x20001268
 8005c40:	2000125c 	.word	0x2000125c
 8005c44:	20000d84 	.word	0x20000d84
 8005c48:	20000d80 	.word	0x20000d80
 8005c4c:	20000010 	.word	0x20000010

08005c50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	60fb      	str	r3, [r7, #12]
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c78:	4b07      	ldr	r3, [pc, #28]	@ (8005c98 <vTaskPlaceOnEventList+0x48>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3318      	adds	r3, #24
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7fe fe48 	bl	8004916 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c86:	2101      	movs	r1, #1
 8005c88:	6838      	ldr	r0, [r7, #0]
 8005c8a:	f000 fa87 	bl	800619c <prvAddCurrentTaskToDelayedList>
}
 8005c8e:	bf00      	nop
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000d80 	.word	0x20000d80

08005c9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10b      	bne.n	8005cc6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	617b      	str	r3, [r7, #20]
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3318      	adds	r3, #24
 8005ccc:	4619      	mov	r1, r3
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f7fe fdfd 	bl	80048ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005cda:	f04f 33ff 	mov.w	r3, #4294967295
 8005cde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	68b8      	ldr	r0, [r7, #8]
 8005ce4:	f000 fa5a 	bl	800619c <prvAddCurrentTaskToDelayedList>
	}
 8005ce8:	bf00      	nop
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20000d80 	.word	0x20000d80

08005cf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10b      	bne.n	8005d22 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	60fb      	str	r3, [r7, #12]
}
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	e7fd      	b.n	8005d1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	3318      	adds	r3, #24
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fe fe2e 	bl	8004988 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005da4 <xTaskRemoveFromEventList+0xb0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d11d      	bne.n	8005d70 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fe fe25 	bl	8004988 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d42:	4b19      	ldr	r3, [pc, #100]	@ (8005da8 <xTaskRemoveFromEventList+0xb4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d903      	bls.n	8005d52 <xTaskRemoveFromEventList+0x5e>
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4e:	4a16      	ldr	r2, [pc, #88]	@ (8005da8 <xTaskRemoveFromEventList+0xb4>)
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4a13      	ldr	r2, [pc, #76]	@ (8005dac <xTaskRemoveFromEventList+0xb8>)
 8005d60:	441a      	add	r2, r3
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	3304      	adds	r3, #4
 8005d66:	4619      	mov	r1, r3
 8005d68:	4610      	mov	r0, r2
 8005d6a:	f7fe fdb0 	bl	80048ce <vListInsertEnd>
 8005d6e:	e005      	b.n	8005d7c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	3318      	adds	r3, #24
 8005d74:	4619      	mov	r1, r3
 8005d76:	480e      	ldr	r0, [pc, #56]	@ (8005db0 <xTaskRemoveFromEventList+0xbc>)
 8005d78:	f7fe fda9 	bl	80048ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d80:	4b0c      	ldr	r3, [pc, #48]	@ (8005db4 <xTaskRemoveFromEventList+0xc0>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d905      	bls.n	8005d96 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005db8 <xTaskRemoveFromEventList+0xc4>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e001      	b.n	8005d9a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d9a:	697b      	ldr	r3, [r7, #20]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	2000127c 	.word	0x2000127c
 8005da8:	2000125c 	.word	0x2000125c
 8005dac:	20000d84 	.word	0x20000d84
 8005db0:	20001214 	.word	0x20001214
 8005db4:	20000d80 	.word	0x20000d80
 8005db8:	20001268 	.word	0x20001268

08005dbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005dc4:	4b06      	ldr	r3, [pc, #24]	@ (8005de0 <vTaskInternalSetTimeOutState+0x24>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005dcc:	4b05      	ldr	r3, [pc, #20]	@ (8005de4 <vTaskInternalSetTimeOutState+0x28>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	605a      	str	r2, [r3, #4]
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	2000126c 	.word	0x2000126c
 8005de4:	20001258 	.word	0x20001258

08005de8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10b      	bne.n	8005e10 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	613b      	str	r3, [r7, #16]
}
 8005e0a:	bf00      	nop
 8005e0c:	bf00      	nop
 8005e0e:	e7fd      	b.n	8005e0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60fb      	str	r3, [r7, #12]
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	e7fd      	b.n	8005e2a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005e2e:	f000 fe93 	bl	8006b58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e32:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea8 <xTaskCheckForTimeOut+0xc0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	d102      	bne.n	8005e52 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	e023      	b.n	8005e9a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	4b15      	ldr	r3, [pc, #84]	@ (8005eac <xTaskCheckForTimeOut+0xc4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d007      	beq.n	8005e6e <xTaskCheckForTimeOut+0x86>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d302      	bcc.n	8005e6e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	e015      	b.n	8005e9a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d20b      	bcs.n	8005e90 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	1ad2      	subs	r2, r2, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff ff99 	bl	8005dbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	e004      	b.n	8005e9a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e96:	2301      	movs	r3, #1
 8005e98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e9a:	f000 fe8f 	bl	8006bbc <vPortExitCritical>

	return xReturn;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20001258 	.word	0x20001258
 8005eac:	2000126c 	.word	0x2000126c

08005eb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005eb4:	4b03      	ldr	r3, [pc, #12]	@ (8005ec4 <vTaskMissedYield+0x14>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
}
 8005eba:	bf00      	nop
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	20001268 	.word	0x20001268

08005ec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ed0:	f000 f852 	bl	8005f78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ed4:	4b06      	ldr	r3, [pc, #24]	@ (8005ef0 <prvIdleTask+0x28>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d9f9      	bls.n	8005ed0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005edc:	4b05      	ldr	r3, [pc, #20]	@ (8005ef4 <prvIdleTask+0x2c>)
 8005ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005eec:	e7f0      	b.n	8005ed0 <prvIdleTask+0x8>
 8005eee:	bf00      	nop
 8005ef0:	20000d84 	.word	0x20000d84
 8005ef4:	e000ed04 	.word	0xe000ed04

08005ef8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005efe:	2300      	movs	r3, #0
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	e00c      	b.n	8005f1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4a12      	ldr	r2, [pc, #72]	@ (8005f58 <prvInitialiseTaskLists+0x60>)
 8005f10:	4413      	add	r3, r2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fe fcae 	bl	8004874 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	607b      	str	r3, [r7, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b37      	cmp	r3, #55	@ 0x37
 8005f22:	d9ef      	bls.n	8005f04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f24:	480d      	ldr	r0, [pc, #52]	@ (8005f5c <prvInitialiseTaskLists+0x64>)
 8005f26:	f7fe fca5 	bl	8004874 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f2a:	480d      	ldr	r0, [pc, #52]	@ (8005f60 <prvInitialiseTaskLists+0x68>)
 8005f2c:	f7fe fca2 	bl	8004874 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f30:	480c      	ldr	r0, [pc, #48]	@ (8005f64 <prvInitialiseTaskLists+0x6c>)
 8005f32:	f7fe fc9f 	bl	8004874 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f36:	480c      	ldr	r0, [pc, #48]	@ (8005f68 <prvInitialiseTaskLists+0x70>)
 8005f38:	f7fe fc9c 	bl	8004874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f3c:	480b      	ldr	r0, [pc, #44]	@ (8005f6c <prvInitialiseTaskLists+0x74>)
 8005f3e:	f7fe fc99 	bl	8004874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f42:	4b0b      	ldr	r3, [pc, #44]	@ (8005f70 <prvInitialiseTaskLists+0x78>)
 8005f44:	4a05      	ldr	r2, [pc, #20]	@ (8005f5c <prvInitialiseTaskLists+0x64>)
 8005f46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f48:	4b0a      	ldr	r3, [pc, #40]	@ (8005f74 <prvInitialiseTaskLists+0x7c>)
 8005f4a:	4a05      	ldr	r2, [pc, #20]	@ (8005f60 <prvInitialiseTaskLists+0x68>)
 8005f4c:	601a      	str	r2, [r3, #0]
}
 8005f4e:	bf00      	nop
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000d84 	.word	0x20000d84
 8005f5c:	200011e4 	.word	0x200011e4
 8005f60:	200011f8 	.word	0x200011f8
 8005f64:	20001214 	.word	0x20001214
 8005f68:	20001228 	.word	0x20001228
 8005f6c:	20001240 	.word	0x20001240
 8005f70:	2000120c 	.word	0x2000120c
 8005f74:	20001210 	.word	0x20001210

08005f78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f7e:	e019      	b.n	8005fb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f80:	f000 fdea 	bl	8006b58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f84:	4b10      	ldr	r3, [pc, #64]	@ (8005fc8 <prvCheckTasksWaitingTermination+0x50>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe fcf9 	bl	8004988 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f96:	4b0d      	ldr	r3, [pc, #52]	@ (8005fcc <prvCheckTasksWaitingTermination+0x54>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8005fcc <prvCheckTasksWaitingTermination+0x54>)
 8005f9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd0 <prvCheckTasksWaitingTermination+0x58>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8005fd0 <prvCheckTasksWaitingTermination+0x58>)
 8005fa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005faa:	f000 fe07 	bl	8006bbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f810 	bl	8005fd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fb4:	4b06      	ldr	r3, [pc, #24]	@ (8005fd0 <prvCheckTasksWaitingTermination+0x58>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e1      	bne.n	8005f80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20001228 	.word	0x20001228
 8005fcc:	20001254 	.word	0x20001254
 8005fd0:	2000123c 	.word	0x2000123c

08005fd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3354      	adds	r3, #84	@ 0x54
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f001 f8d1 	bl	8007188 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d108      	bne.n	8006002 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 ff9f 	bl	8006f38 <vPortFree>
				vPortFree( pxTCB );
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 ff9c 	bl	8006f38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006000:	e019      	b.n	8006036 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006008:	2b01      	cmp	r3, #1
 800600a:	d103      	bne.n	8006014 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 ff93 	bl	8006f38 <vPortFree>
	}
 8006012:	e010      	b.n	8006036 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800601a:	2b02      	cmp	r3, #2
 800601c:	d00b      	beq.n	8006036 <prvDeleteTCB+0x62>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	60fb      	str	r3, [r7, #12]
}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	e7fd      	b.n	8006032 <prvDeleteTCB+0x5e>
	}
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006046:	4b0c      	ldr	r3, [pc, #48]	@ (8006078 <prvResetNextTaskUnblockTime+0x38>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006050:	4b0a      	ldr	r3, [pc, #40]	@ (800607c <prvResetNextTaskUnblockTime+0x3c>)
 8006052:	f04f 32ff 	mov.w	r2, #4294967295
 8006056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006058:	e008      	b.n	800606c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800605a:	4b07      	ldr	r3, [pc, #28]	@ (8006078 <prvResetNextTaskUnblockTime+0x38>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	4a04      	ldr	r2, [pc, #16]	@ (800607c <prvResetNextTaskUnblockTime+0x3c>)
 800606a:	6013      	str	r3, [r2, #0]
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	2000120c 	.word	0x2000120c
 800607c:	20001274 	.word	0x20001274

08006080 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006086:	4b0b      	ldr	r3, [pc, #44]	@ (80060b4 <xTaskGetSchedulerState+0x34>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800608e:	2301      	movs	r3, #1
 8006090:	607b      	str	r3, [r7, #4]
 8006092:	e008      	b.n	80060a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006094:	4b08      	ldr	r3, [pc, #32]	@ (80060b8 <xTaskGetSchedulerState+0x38>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d102      	bne.n	80060a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800609c:	2302      	movs	r3, #2
 800609e:	607b      	str	r3, [r7, #4]
 80060a0:	e001      	b.n	80060a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060a2:	2300      	movs	r3, #0
 80060a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060a6:	687b      	ldr	r3, [r7, #4]
	}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	20001260 	.word	0x20001260
 80060b8:	2000127c 	.word	0x2000127c

080060bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060c8:	2300      	movs	r3, #0
 80060ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d058      	beq.n	8006184 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060d2:	4b2f      	ldr	r3, [pc, #188]	@ (8006190 <xTaskPriorityDisinherit+0xd4>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d00b      	beq.n	80060f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	60fb      	str	r3, [r7, #12]
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	e7fd      	b.n	80060f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10b      	bne.n	8006114 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60bb      	str	r3, [r7, #8]
}
 800610e:	bf00      	nop
 8006110:	bf00      	nop
 8006112:	e7fd      	b.n	8006110 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006118:	1e5a      	subs	r2, r3, #1
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006126:	429a      	cmp	r2, r3
 8006128:	d02c      	beq.n	8006184 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800612e:	2b00      	cmp	r3, #0
 8006130:	d128      	bne.n	8006184 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	3304      	adds	r3, #4
 8006136:	4618      	mov	r0, r3
 8006138:	f7fe fc26 	bl	8004988 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006148:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006154:	4b0f      	ldr	r3, [pc, #60]	@ (8006194 <xTaskPriorityDisinherit+0xd8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	429a      	cmp	r2, r3
 800615a:	d903      	bls.n	8006164 <xTaskPriorityDisinherit+0xa8>
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006160:	4a0c      	ldr	r2, [pc, #48]	@ (8006194 <xTaskPriorityDisinherit+0xd8>)
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4a09      	ldr	r2, [pc, #36]	@ (8006198 <xTaskPriorityDisinherit+0xdc>)
 8006172:	441a      	add	r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	3304      	adds	r3, #4
 8006178:	4619      	mov	r1, r3
 800617a:	4610      	mov	r0, r2
 800617c:	f7fe fba7 	bl	80048ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006180:	2301      	movs	r3, #1
 8006182:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006184:	697b      	ldr	r3, [r7, #20]
	}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000d80 	.word	0x20000d80
 8006194:	2000125c 	.word	0x2000125c
 8006198:	20000d84 	.word	0x20000d84

0800619c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061a6:	4b21      	ldr	r3, [pc, #132]	@ (800622c <prvAddCurrentTaskToDelayedList+0x90>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061ac:	4b20      	ldr	r3, [pc, #128]	@ (8006230 <prvAddCurrentTaskToDelayedList+0x94>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe fbe8 	bl	8004988 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d10a      	bne.n	80061d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006230 <prvAddCurrentTaskToDelayedList+0x94>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4619      	mov	r1, r3
 80061ce:	4819      	ldr	r0, [pc, #100]	@ (8006234 <prvAddCurrentTaskToDelayedList+0x98>)
 80061d0:	f7fe fb7d 	bl	80048ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061d4:	e026      	b.n	8006224 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4413      	add	r3, r2
 80061dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061de:	4b14      	ldr	r3, [pc, #80]	@ (8006230 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d209      	bcs.n	8006202 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ee:	4b12      	ldr	r3, [pc, #72]	@ (8006238 <prvAddCurrentTaskToDelayedList+0x9c>)
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006230 <prvAddCurrentTaskToDelayedList+0x94>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3304      	adds	r3, #4
 80061f8:	4619      	mov	r1, r3
 80061fa:	4610      	mov	r0, r2
 80061fc:	f7fe fb8b 	bl	8004916 <vListInsert>
}
 8006200:	e010      	b.n	8006224 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006202:	4b0e      	ldr	r3, [pc, #56]	@ (800623c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	4b0a      	ldr	r3, [pc, #40]	@ (8006230 <prvAddCurrentTaskToDelayedList+0x94>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3304      	adds	r3, #4
 800620c:	4619      	mov	r1, r3
 800620e:	4610      	mov	r0, r2
 8006210:	f7fe fb81 	bl	8004916 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006214:	4b0a      	ldr	r3, [pc, #40]	@ (8006240 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	429a      	cmp	r2, r3
 800621c:	d202      	bcs.n	8006224 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800621e:	4a08      	ldr	r2, [pc, #32]	@ (8006240 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6013      	str	r3, [r2, #0]
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20001258 	.word	0x20001258
 8006230:	20000d80 	.word	0x20000d80
 8006234:	20001240 	.word	0x20001240
 8006238:	20001210 	.word	0x20001210
 800623c:	2000120c 	.word	0x2000120c
 8006240:	20001274 	.word	0x20001274

08006244 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08a      	sub	sp, #40	@ 0x28
 8006248:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800624e:	f000 fb13 	bl	8006878 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006252:	4b1d      	ldr	r3, [pc, #116]	@ (80062c8 <xTimerCreateTimerTask+0x84>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d021      	beq.n	800629e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006262:	1d3a      	adds	r2, r7, #4
 8006264:	f107 0108 	add.w	r1, r7, #8
 8006268:	f107 030c 	add.w	r3, r7, #12
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe fae7 	bl	8004840 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	9202      	str	r2, [sp, #8]
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	2302      	movs	r3, #2
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	2300      	movs	r3, #0
 8006282:	460a      	mov	r2, r1
 8006284:	4911      	ldr	r1, [pc, #68]	@ (80062cc <xTimerCreateTimerTask+0x88>)
 8006286:	4812      	ldr	r0, [pc, #72]	@ (80062d0 <xTimerCreateTimerTask+0x8c>)
 8006288:	f7ff f8a2 	bl	80053d0 <xTaskCreateStatic>
 800628c:	4603      	mov	r3, r0
 800628e:	4a11      	ldr	r2, [pc, #68]	@ (80062d4 <xTimerCreateTimerTask+0x90>)
 8006290:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006292:	4b10      	ldr	r3, [pc, #64]	@ (80062d4 <xTimerCreateTimerTask+0x90>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800629a:	2301      	movs	r3, #1
 800629c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10b      	bne.n	80062bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	613b      	str	r3, [r7, #16]
}
 80062b6:	bf00      	nop
 80062b8:	bf00      	nop
 80062ba:	e7fd      	b.n	80062b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062bc:	697b      	ldr	r3, [r7, #20]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	200012b0 	.word	0x200012b0
 80062cc:	080073c4 	.word	0x080073c4
 80062d0:	08006411 	.word	0x08006411
 80062d4:	200012b4 	.word	0x200012b4

080062d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08a      	sub	sp, #40	@ 0x28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10b      	bne.n	8006308 <xTimerGenericCommand+0x30>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	623b      	str	r3, [r7, #32]
}
 8006302:	bf00      	nop
 8006304:	bf00      	nop
 8006306:	e7fd      	b.n	8006304 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006308:	4b19      	ldr	r3, [pc, #100]	@ (8006370 <xTimerGenericCommand+0x98>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d02a      	beq.n	8006366 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b05      	cmp	r3, #5
 8006320:	dc18      	bgt.n	8006354 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006322:	f7ff fead 	bl	8006080 <xTaskGetSchedulerState>
 8006326:	4603      	mov	r3, r0
 8006328:	2b02      	cmp	r3, #2
 800632a:	d109      	bne.n	8006340 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800632c:	4b10      	ldr	r3, [pc, #64]	@ (8006370 <xTimerGenericCommand+0x98>)
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	f107 0110 	add.w	r1, r7, #16
 8006334:	2300      	movs	r3, #0
 8006336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006338:	f7fe fc5a 	bl	8004bf0 <xQueueGenericSend>
 800633c:	6278      	str	r0, [r7, #36]	@ 0x24
 800633e:	e012      	b.n	8006366 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006340:	4b0b      	ldr	r3, [pc, #44]	@ (8006370 <xTimerGenericCommand+0x98>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	f107 0110 	add.w	r1, r7, #16
 8006348:	2300      	movs	r3, #0
 800634a:	2200      	movs	r2, #0
 800634c:	f7fe fc50 	bl	8004bf0 <xQueueGenericSend>
 8006350:	6278      	str	r0, [r7, #36]	@ 0x24
 8006352:	e008      	b.n	8006366 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006354:	4b06      	ldr	r3, [pc, #24]	@ (8006370 <xTimerGenericCommand+0x98>)
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	f107 0110 	add.w	r1, r7, #16
 800635c:	2300      	movs	r3, #0
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	f7fe fd48 	bl	8004df4 <xQueueGenericSendFromISR>
 8006364:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006368:	4618      	mov	r0, r3
 800636a:	3728      	adds	r7, #40	@ 0x28
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	200012b0 	.word	0x200012b0

08006374 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af02      	add	r7, sp, #8
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637e:	4b23      	ldr	r3, [pc, #140]	@ (800640c <prvProcessExpiredTimer+0x98>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3304      	adds	r3, #4
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe fafb 	bl	8004988 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d023      	beq.n	80063e8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	18d1      	adds	r1, r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	6978      	ldr	r0, [r7, #20]
 80063ae:	f000 f8d5 	bl	800655c <prvInsertTimerInActiveList>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d020      	beq.n	80063fa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063b8:	2300      	movs	r3, #0
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	2300      	movs	r3, #0
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	2100      	movs	r1, #0
 80063c2:	6978      	ldr	r0, [r7, #20]
 80063c4:	f7ff ff88 	bl	80062d8 <xTimerGenericCommand>
 80063c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d114      	bne.n	80063fa <prvProcessExpiredTimer+0x86>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	bf00      	nop
 80063e6:	e7fd      	b.n	80063e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	6978      	ldr	r0, [r7, #20]
 8006400:	4798      	blx	r3
}
 8006402:	bf00      	nop
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	200012a8 	.word	0x200012a8

08006410 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006418:	f107 0308 	add.w	r3, r7, #8
 800641c:	4618      	mov	r0, r3
 800641e:	f000 f859 	bl	80064d4 <prvGetNextExpireTime>
 8006422:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4619      	mov	r1, r3
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f805 	bl	8006438 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800642e:	f000 f8d7 	bl	80065e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006432:	bf00      	nop
 8006434:	e7f0      	b.n	8006418 <prvTimerTask+0x8>
	...

08006438 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006442:	f7ff fa29 	bl	8005898 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f866 	bl	800651c <prvSampleTimeNow>
 8006450:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d130      	bne.n	80064ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <prvProcessTimerOrBlockTask+0x3c>
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	429a      	cmp	r2, r3
 8006464:	d806      	bhi.n	8006474 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006466:	f7ff fa25 	bl	80058b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800646a:	68f9      	ldr	r1, [r7, #12]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff ff81 	bl	8006374 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006472:	e024      	b.n	80064be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800647a:	4b13      	ldr	r3, [pc, #76]	@ (80064c8 <prvProcessTimerOrBlockTask+0x90>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <prvProcessTimerOrBlockTask+0x50>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <prvProcessTimerOrBlockTask+0x52>
 8006488:	2300      	movs	r3, #0
 800648a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800648c:	4b0f      	ldr	r3, [pc, #60]	@ (80064cc <prvProcessTimerOrBlockTask+0x94>)
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	4619      	mov	r1, r3
 800649a:	f7fe ff65 	bl	8005368 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800649e:	f7ff fa09 	bl	80058b4 <xTaskResumeAll>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064a8:	4b09      	ldr	r3, [pc, #36]	@ (80064d0 <prvProcessTimerOrBlockTask+0x98>)
 80064aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	f3bf 8f6f 	isb	sy
}
 80064b8:	e001      	b.n	80064be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064ba:	f7ff f9fb 	bl	80058b4 <xTaskResumeAll>
}
 80064be:	bf00      	nop
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	200012ac 	.word	0x200012ac
 80064cc:	200012b0 	.word	0x200012b0
 80064d0:	e000ed04 	.word	0xe000ed04

080064d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006518 <prvGetNextExpireTime+0x44>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <prvGetNextExpireTime+0x16>
 80064e6:	2201      	movs	r2, #1
 80064e8:	e000      	b.n	80064ec <prvGetNextExpireTime+0x18>
 80064ea:	2200      	movs	r2, #0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d105      	bne.n	8006504 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064f8:	4b07      	ldr	r3, [pc, #28]	@ (8006518 <prvGetNextExpireTime+0x44>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	e001      	b.n	8006508 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006508:	68fb      	ldr	r3, [r7, #12]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	200012a8 	.word	0x200012a8

0800651c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006524:	f7ff fa64 	bl	80059f0 <xTaskGetTickCount>
 8006528:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800652a:	4b0b      	ldr	r3, [pc, #44]	@ (8006558 <prvSampleTimeNow+0x3c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	429a      	cmp	r2, r3
 8006532:	d205      	bcs.n	8006540 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006534:	f000 f93a 	bl	80067ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e002      	b.n	8006546 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006546:	4a04      	ldr	r2, [pc, #16]	@ (8006558 <prvSampleTimeNow+0x3c>)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800654c:	68fb      	ldr	r3, [r7, #12]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	200012b8 	.word	0x200012b8

0800655c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800656a:	2300      	movs	r3, #0
 800656c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	429a      	cmp	r2, r3
 8006580:	d812      	bhi.n	80065a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	1ad2      	subs	r2, r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	429a      	cmp	r2, r3
 800658e:	d302      	bcc.n	8006596 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006590:	2301      	movs	r3, #1
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	e01b      	b.n	80065ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006596:	4b10      	ldr	r3, [pc, #64]	@ (80065d8 <prvInsertTimerInActiveList+0x7c>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f7fe f9b8 	bl	8004916 <vListInsert>
 80065a6:	e012      	b.n	80065ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d206      	bcs.n	80065be <prvInsertTimerInActiveList+0x62>
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d302      	bcc.n	80065be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065b8:	2301      	movs	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e007      	b.n	80065ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065be:	4b07      	ldr	r3, [pc, #28]	@ (80065dc <prvInsertTimerInActiveList+0x80>)
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f7fe f9a4 	bl	8004916 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065ce:	697b      	ldr	r3, [r7, #20]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	200012ac 	.word	0x200012ac
 80065dc:	200012a8 	.word	0x200012a8

080065e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08e      	sub	sp, #56	@ 0x38
 80065e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065e6:	e0ce      	b.n	8006786 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	da19      	bge.n	8006622 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	3304      	adds	r3, #4
 80065f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80065f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10b      	bne.n	8006612 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	61fb      	str	r3, [r7, #28]
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	e7fd      	b.n	800660e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006618:	6850      	ldr	r0, [r2, #4]
 800661a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800661c:	6892      	ldr	r2, [r2, #8]
 800661e:	4611      	mov	r1, r2
 8006620:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f2c0 80ae 	blt.w	8006786 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800662e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006638:	3304      	adds	r3, #4
 800663a:	4618      	mov	r0, r3
 800663c:	f7fe f9a4 	bl	8004988 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006640:	463b      	mov	r3, r7
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff ff6a 	bl	800651c <prvSampleTimeNow>
 8006648:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b09      	cmp	r3, #9
 800664e:	f200 8097 	bhi.w	8006780 <prvProcessReceivedCommands+0x1a0>
 8006652:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <prvProcessReceivedCommands+0x78>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	08006681 	.word	0x08006681
 800665c:	08006681 	.word	0x08006681
 8006660:	08006681 	.word	0x08006681
 8006664:	080066f7 	.word	0x080066f7
 8006668:	0800670b 	.word	0x0800670b
 800666c:	08006757 	.word	0x08006757
 8006670:	08006681 	.word	0x08006681
 8006674:	08006681 	.word	0x08006681
 8006678:	080066f7 	.word	0x080066f7
 800667c:	0800670b 	.word	0x0800670b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006682:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	b2da      	uxtb	r2, r3
 800668c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	18d1      	adds	r1, r2, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800669e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066a0:	f7ff ff5c 	bl	800655c <prvInsertTimerInActiveList>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d06c      	beq.n	8006784 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d061      	beq.n	8006784 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	441a      	add	r2, r3
 80066c8:	2300      	movs	r3, #0
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	2300      	movs	r3, #0
 80066ce:	2100      	movs	r1, #0
 80066d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d2:	f7ff fe01 	bl	80062d8 <xTimerGenericCommand>
 80066d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d152      	bne.n	8006784 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	61bb      	str	r3, [r7, #24]
}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	e7fd      	b.n	80066f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	b2da      	uxtb	r2, r3
 8006702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006704:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006708:	e03d      	b.n	8006786 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800670a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006710:	f043 0301 	orr.w	r3, r3, #1
 8006714:	b2da      	uxtb	r2, r3
 8006716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006718:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006720:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10b      	bne.n	8006742 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	617b      	str	r3, [r7, #20]
}
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	e7fd      	b.n	800673e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	18d1      	adds	r1, r2, r3
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800674e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006750:	f7ff ff04 	bl	800655c <prvInsertTimerInActiveList>
					break;
 8006754:	e017      	b.n	8006786 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d103      	bne.n	800676c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006764:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006766:	f000 fbe7 	bl	8006f38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800676a:	e00c      	b.n	8006786 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800676c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	b2da      	uxtb	r2, r3
 8006778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800677e:	e002      	b.n	8006786 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006780:	bf00      	nop
 8006782:	e000      	b.n	8006786 <prvProcessReceivedCommands+0x1a6>
					break;
 8006784:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006786:	4b08      	ldr	r3, [pc, #32]	@ (80067a8 <prvProcessReceivedCommands+0x1c8>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	1d39      	adds	r1, r7, #4
 800678c:	2200      	movs	r2, #0
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe fbce 	bl	8004f30 <xQueueReceive>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	f47f af26 	bne.w	80065e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	3730      	adds	r7, #48	@ 0x30
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200012b0 	.word	0x200012b0

080067ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067b2:	e049      	b.n	8006848 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006870 <prvSwitchTimerLists+0xc4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067be:	4b2c      	ldr	r3, [pc, #176]	@ (8006870 <prvSwitchTimerLists+0xc4>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fe f8db 	bl	8004988 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d02f      	beq.n	8006848 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4413      	add	r3, r2
 80067f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d90e      	bls.n	8006818 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006806:	4b1a      	ldr	r3, [pc, #104]	@ (8006870 <prvSwitchTimerLists+0xc4>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3304      	adds	r3, #4
 800680e:	4619      	mov	r1, r3
 8006810:	4610      	mov	r0, r2
 8006812:	f7fe f880 	bl	8004916 <vListInsert>
 8006816:	e017      	b.n	8006848 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006818:	2300      	movs	r3, #0
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	2300      	movs	r3, #0
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	2100      	movs	r1, #0
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f7ff fd58 	bl	80062d8 <xTimerGenericCommand>
 8006828:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10b      	bne.n	8006848 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	603b      	str	r3, [r7, #0]
}
 8006842:	bf00      	nop
 8006844:	bf00      	nop
 8006846:	e7fd      	b.n	8006844 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006848:	4b09      	ldr	r3, [pc, #36]	@ (8006870 <prvSwitchTimerLists+0xc4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1b0      	bne.n	80067b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006852:	4b07      	ldr	r3, [pc, #28]	@ (8006870 <prvSwitchTimerLists+0xc4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006858:	4b06      	ldr	r3, [pc, #24]	@ (8006874 <prvSwitchTimerLists+0xc8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a04      	ldr	r2, [pc, #16]	@ (8006870 <prvSwitchTimerLists+0xc4>)
 800685e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006860:	4a04      	ldr	r2, [pc, #16]	@ (8006874 <prvSwitchTimerLists+0xc8>)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	6013      	str	r3, [r2, #0]
}
 8006866:	bf00      	nop
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	200012a8 	.word	0x200012a8
 8006874:	200012ac 	.word	0x200012ac

08006878 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800687e:	f000 f96b 	bl	8006b58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006882:	4b15      	ldr	r3, [pc, #84]	@ (80068d8 <prvCheckForValidListAndQueue+0x60>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d120      	bne.n	80068cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800688a:	4814      	ldr	r0, [pc, #80]	@ (80068dc <prvCheckForValidListAndQueue+0x64>)
 800688c:	f7fd fff2 	bl	8004874 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006890:	4813      	ldr	r0, [pc, #76]	@ (80068e0 <prvCheckForValidListAndQueue+0x68>)
 8006892:	f7fd ffef 	bl	8004874 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006896:	4b13      	ldr	r3, [pc, #76]	@ (80068e4 <prvCheckForValidListAndQueue+0x6c>)
 8006898:	4a10      	ldr	r2, [pc, #64]	@ (80068dc <prvCheckForValidListAndQueue+0x64>)
 800689a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800689c:	4b12      	ldr	r3, [pc, #72]	@ (80068e8 <prvCheckForValidListAndQueue+0x70>)
 800689e:	4a10      	ldr	r2, [pc, #64]	@ (80068e0 <prvCheckForValidListAndQueue+0x68>)
 80068a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068a2:	2300      	movs	r3, #0
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	4b11      	ldr	r3, [pc, #68]	@ (80068ec <prvCheckForValidListAndQueue+0x74>)
 80068a8:	4a11      	ldr	r2, [pc, #68]	@ (80068f0 <prvCheckForValidListAndQueue+0x78>)
 80068aa:	2110      	movs	r1, #16
 80068ac:	200a      	movs	r0, #10
 80068ae:	f7fe f8ff 	bl	8004ab0 <xQueueGenericCreateStatic>
 80068b2:	4603      	mov	r3, r0
 80068b4:	4a08      	ldr	r2, [pc, #32]	@ (80068d8 <prvCheckForValidListAndQueue+0x60>)
 80068b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068b8:	4b07      	ldr	r3, [pc, #28]	@ (80068d8 <prvCheckForValidListAndQueue+0x60>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068c0:	4b05      	ldr	r3, [pc, #20]	@ (80068d8 <prvCheckForValidListAndQueue+0x60>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	490b      	ldr	r1, [pc, #44]	@ (80068f4 <prvCheckForValidListAndQueue+0x7c>)
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe fd24 	bl	8005314 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068cc:	f000 f976 	bl	8006bbc <vPortExitCritical>
}
 80068d0:	bf00      	nop
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	200012b0 	.word	0x200012b0
 80068dc:	20001280 	.word	0x20001280
 80068e0:	20001294 	.word	0x20001294
 80068e4:	200012a8 	.word	0x200012a8
 80068e8:	200012ac 	.word	0x200012ac
 80068ec:	2000135c 	.word	0x2000135c
 80068f0:	200012bc 	.word	0x200012bc
 80068f4:	080073cc 	.word	0x080073cc

080068f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3b04      	subs	r3, #4
 8006908:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3b04      	subs	r3, #4
 8006916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f023 0201 	bic.w	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3b04      	subs	r3, #4
 8006926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006928:	4a0c      	ldr	r2, [pc, #48]	@ (800695c <pxPortInitialiseStack+0x64>)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3b14      	subs	r3, #20
 8006932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3b04      	subs	r3, #4
 800693e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f06f 0202 	mvn.w	r2, #2
 8006946:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3b20      	subs	r3, #32
 800694c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800694e:	68fb      	ldr	r3, [r7, #12]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	08006961 	.word	0x08006961

08006960 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800696a:	4b13      	ldr	r3, [pc, #76]	@ (80069b8 <prvTaskExitError+0x58>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d00b      	beq.n	800698c <prvTaskExitError+0x2c>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	60fb      	str	r3, [r7, #12]
}
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	e7fd      	b.n	8006988 <prvTaskExitError+0x28>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	60bb      	str	r3, [r7, #8]
}
 800699e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069a0:	bf00      	nop
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0fc      	beq.n	80069a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	2000000c 	.word	0x2000000c
 80069bc:	00000000 	.word	0x00000000

080069c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069c0:	4b07      	ldr	r3, [pc, #28]	@ (80069e0 <pxCurrentTCBConst2>)
 80069c2:	6819      	ldr	r1, [r3, #0]
 80069c4:	6808      	ldr	r0, [r1, #0]
 80069c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ca:	f380 8809 	msr	PSP, r0
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f04f 0000 	mov.w	r0, #0
 80069d6:	f380 8811 	msr	BASEPRI, r0
 80069da:	4770      	bx	lr
 80069dc:	f3af 8000 	nop.w

080069e0 <pxCurrentTCBConst2>:
 80069e0:	20000d80 	.word	0x20000d80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop

080069e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069e8:	4808      	ldr	r0, [pc, #32]	@ (8006a0c <prvPortStartFirstTask+0x24>)
 80069ea:	6800      	ldr	r0, [r0, #0]
 80069ec:	6800      	ldr	r0, [r0, #0]
 80069ee:	f380 8808 	msr	MSP, r0
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8814 	msr	CONTROL, r0
 80069fa:	b662      	cpsie	i
 80069fc:	b661      	cpsie	f
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	df00      	svc	0
 8006a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a0a:	bf00      	nop
 8006a0c:	e000ed08 	.word	0xe000ed08

08006a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a16:	4b47      	ldr	r3, [pc, #284]	@ (8006b34 <xPortStartScheduler+0x124>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a47      	ldr	r2, [pc, #284]	@ (8006b38 <xPortStartScheduler+0x128>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d10b      	bne.n	8006a38 <xPortStartScheduler+0x28>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	613b      	str	r3, [r7, #16]
}
 8006a32:	bf00      	nop
 8006a34:	bf00      	nop
 8006a36:	e7fd      	b.n	8006a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a38:	4b3e      	ldr	r3, [pc, #248]	@ (8006b34 <xPortStartScheduler+0x124>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b3c <xPortStartScheduler+0x12c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d10b      	bne.n	8006a5a <xPortStartScheduler+0x4a>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	60fb      	str	r3, [r7, #12]
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop
 8006a58:	e7fd      	b.n	8006a56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a5a:	4b39      	ldr	r3, [pc, #228]	@ (8006b40 <xPortStartScheduler+0x130>)
 8006a5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	22ff      	movs	r2, #255	@ 0xff
 8006a6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	4b31      	ldr	r3, [pc, #196]	@ (8006b44 <xPortStartScheduler+0x134>)
 8006a80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a82:	4b31      	ldr	r3, [pc, #196]	@ (8006b48 <xPortStartScheduler+0x138>)
 8006a84:	2207      	movs	r2, #7
 8006a86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a88:	e009      	b.n	8006a9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8006b48 <xPortStartScheduler+0x138>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	4a2d      	ldr	r2, [pc, #180]	@ (8006b48 <xPortStartScheduler+0x138>)
 8006a92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a9e:	78fb      	ldrb	r3, [r7, #3]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aa6:	2b80      	cmp	r3, #128	@ 0x80
 8006aa8:	d0ef      	beq.n	8006a8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006aaa:	4b27      	ldr	r3, [pc, #156]	@ (8006b48 <xPortStartScheduler+0x138>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f1c3 0307 	rsb	r3, r3, #7
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d00b      	beq.n	8006ace <xPortStartScheduler+0xbe>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	60bb      	str	r3, [r7, #8]
}
 8006ac8:	bf00      	nop
 8006aca:	bf00      	nop
 8006acc:	e7fd      	b.n	8006aca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ace:	4b1e      	ldr	r3, [pc, #120]	@ (8006b48 <xPortStartScheduler+0x138>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b48 <xPortStartScheduler+0x138>)
 8006ad6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b48 <xPortStartScheduler+0x138>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ae0:	4a19      	ldr	r2, [pc, #100]	@ (8006b48 <xPortStartScheduler+0x138>)
 8006ae2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006aec:	4b17      	ldr	r3, [pc, #92]	@ (8006b4c <xPortStartScheduler+0x13c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a16      	ldr	r2, [pc, #88]	@ (8006b4c <xPortStartScheduler+0x13c>)
 8006af2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006af6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006af8:	4b14      	ldr	r3, [pc, #80]	@ (8006b4c <xPortStartScheduler+0x13c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a13      	ldr	r2, [pc, #76]	@ (8006b4c <xPortStartScheduler+0x13c>)
 8006afe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b04:	f000 f8da 	bl	8006cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b08:	4b11      	ldr	r3, [pc, #68]	@ (8006b50 <xPortStartScheduler+0x140>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b0e:	f000 f8f9 	bl	8006d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b12:	4b10      	ldr	r3, [pc, #64]	@ (8006b54 <xPortStartScheduler+0x144>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a0f      	ldr	r2, [pc, #60]	@ (8006b54 <xPortStartScheduler+0x144>)
 8006b18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b1e:	f7ff ff63 	bl	80069e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b22:	f7ff f82f 	bl	8005b84 <vTaskSwitchContext>
	prvTaskExitError();
 8006b26:	f7ff ff1b 	bl	8006960 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	e000ed00 	.word	0xe000ed00
 8006b38:	410fc271 	.word	0x410fc271
 8006b3c:	410fc270 	.word	0x410fc270
 8006b40:	e000e400 	.word	0xe000e400
 8006b44:	200013ac 	.word	0x200013ac
 8006b48:	200013b0 	.word	0x200013b0
 8006b4c:	e000ed20 	.word	0xe000ed20
 8006b50:	2000000c 	.word	0x2000000c
 8006b54:	e000ef34 	.word	0xe000ef34

08006b58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	607b      	str	r3, [r7, #4]
}
 8006b70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b72:	4b10      	ldr	r3, [pc, #64]	@ (8006bb4 <vPortEnterCritical+0x5c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3301      	adds	r3, #1
 8006b78:	4a0e      	ldr	r2, [pc, #56]	@ (8006bb4 <vPortEnterCritical+0x5c>)
 8006b7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb4 <vPortEnterCritical+0x5c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d110      	bne.n	8006ba6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b84:	4b0c      	ldr	r3, [pc, #48]	@ (8006bb8 <vPortEnterCritical+0x60>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00b      	beq.n	8006ba6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	603b      	str	r3, [r7, #0]
}
 8006ba0:	bf00      	nop
 8006ba2:	bf00      	nop
 8006ba4:	e7fd      	b.n	8006ba2 <vPortEnterCritical+0x4a>
	}
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	2000000c 	.word	0x2000000c
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bc2:	4b12      	ldr	r3, [pc, #72]	@ (8006c0c <vPortExitCritical+0x50>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10b      	bne.n	8006be2 <vPortExitCritical+0x26>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	607b      	str	r3, [r7, #4]
}
 8006bdc:	bf00      	nop
 8006bde:	bf00      	nop
 8006be0:	e7fd      	b.n	8006bde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006be2:	4b0a      	ldr	r3, [pc, #40]	@ (8006c0c <vPortExitCritical+0x50>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	4a08      	ldr	r2, [pc, #32]	@ (8006c0c <vPortExitCritical+0x50>)
 8006bea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006bec:	4b07      	ldr	r3, [pc, #28]	@ (8006c0c <vPortExitCritical+0x50>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d105      	bne.n	8006c00 <vPortExitCritical+0x44>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	f383 8811 	msr	BASEPRI, r3
}
 8006bfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	2000000c 	.word	0x2000000c

08006c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c10:	f3ef 8009 	mrs	r0, PSP
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	4b15      	ldr	r3, [pc, #84]	@ (8006c70 <pxCurrentTCBConst>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	f01e 0f10 	tst.w	lr, #16
 8006c20:	bf08      	it	eq
 8006c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2a:	6010      	str	r0, [r2, #0]
 8006c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c34:	f380 8811 	msr	BASEPRI, r0
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f7fe ffa0 	bl	8005b84 <vTaskSwitchContext>
 8006c44:	f04f 0000 	mov.w	r0, #0
 8006c48:	f380 8811 	msr	BASEPRI, r0
 8006c4c:	bc09      	pop	{r0, r3}
 8006c4e:	6819      	ldr	r1, [r3, #0]
 8006c50:	6808      	ldr	r0, [r1, #0]
 8006c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c56:	f01e 0f10 	tst.w	lr, #16
 8006c5a:	bf08      	it	eq
 8006c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c60:	f380 8809 	msr	PSP, r0
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	f3af 8000 	nop.w

08006c70 <pxCurrentTCBConst>:
 8006c70:	20000d80 	.word	0x20000d80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop

08006c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	607b      	str	r3, [r7, #4]
}
 8006c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c92:	f7fe febd 	bl	8005a10 <xTaskIncrementTick>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c9c:	4b06      	ldr	r3, [pc, #24]	@ (8006cb8 <xPortSysTickHandler+0x40>)
 8006c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f383 8811 	msr	BASEPRI, r3
}
 8006cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf0 <vPortSetupTimerInterrupt+0x34>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf4 <vPortSetupTimerInterrupt+0x38>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf8 <vPortSetupTimerInterrupt+0x3c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8006cfc <vPortSetupTimerInterrupt+0x40>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	099b      	lsrs	r3, r3, #6
 8006cd8:	4a09      	ldr	r2, [pc, #36]	@ (8006d00 <vPortSetupTimerInterrupt+0x44>)
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cde:	4b04      	ldr	r3, [pc, #16]	@ (8006cf0 <vPortSetupTimerInterrupt+0x34>)
 8006ce0:	2207      	movs	r2, #7
 8006ce2:	601a      	str	r2, [r3, #0]
}
 8006ce4:	bf00      	nop
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	e000e010 	.word	0xe000e010
 8006cf4:	e000e018 	.word	0xe000e018
 8006cf8:	20000000 	.word	0x20000000
 8006cfc:	10624dd3 	.word	0x10624dd3
 8006d00:	e000e014 	.word	0xe000e014

08006d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d14 <vPortEnableVFP+0x10>
 8006d08:	6801      	ldr	r1, [r0, #0]
 8006d0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d0e:	6001      	str	r1, [r0, #0]
 8006d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d12:	bf00      	nop
 8006d14:	e000ed88 	.word	0xe000ed88

08006d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d1e:	f3ef 8305 	mrs	r3, IPSR
 8006d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b0f      	cmp	r3, #15
 8006d28:	d915      	bls.n	8006d56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d2a:	4a18      	ldr	r2, [pc, #96]	@ (8006d8c <vPortValidateInterruptPriority+0x74>)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d34:	4b16      	ldr	r3, [pc, #88]	@ (8006d90 <vPortValidateInterruptPriority+0x78>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	7afa      	ldrb	r2, [r7, #11]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d20b      	bcs.n	8006d56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	607b      	str	r3, [r7, #4]
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	e7fd      	b.n	8006d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d56:	4b0f      	ldr	r3, [pc, #60]	@ (8006d94 <vPortValidateInterruptPriority+0x7c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d98 <vPortValidateInterruptPriority+0x80>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d90b      	bls.n	8006d7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	603b      	str	r3, [r7, #0]
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	e7fd      	b.n	8006d7a <vPortValidateInterruptPriority+0x62>
	}
 8006d7e:	bf00      	nop
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	e000e3f0 	.word	0xe000e3f0
 8006d90:	200013ac 	.word	0x200013ac
 8006d94:	e000ed0c 	.word	0xe000ed0c
 8006d98:	200013b0 	.word	0x200013b0

08006d9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	@ 0x28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006da8:	f7fe fd76 	bl	8005898 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dac:	4b5c      	ldr	r3, [pc, #368]	@ (8006f20 <pvPortMalloc+0x184>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006db4:	f000 f924 	bl	8007000 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006db8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f24 <pvPortMalloc+0x188>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f040 8095 	bne.w	8006ef0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01e      	beq.n	8006e0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006dcc:	2208      	movs	r2, #8
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d015      	beq.n	8006e0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f023 0307 	bic.w	r3, r3, #7
 8006de4:	3308      	adds	r3, #8
 8006de6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00b      	beq.n	8006e0a <pvPortMalloc+0x6e>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	617b      	str	r3, [r7, #20]
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop
 8006e08:	e7fd      	b.n	8006e06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d06f      	beq.n	8006ef0 <pvPortMalloc+0x154>
 8006e10:	4b45      	ldr	r3, [pc, #276]	@ (8006f28 <pvPortMalloc+0x18c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d86a      	bhi.n	8006ef0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e1a:	4b44      	ldr	r3, [pc, #272]	@ (8006f2c <pvPortMalloc+0x190>)
 8006e1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e1e:	4b43      	ldr	r3, [pc, #268]	@ (8006f2c <pvPortMalloc+0x190>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e24:	e004      	b.n	8006e30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d903      	bls.n	8006e42 <pvPortMalloc+0xa6>
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1f1      	bne.n	8006e26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e42:	4b37      	ldr	r3, [pc, #220]	@ (8006f20 <pvPortMalloc+0x184>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d051      	beq.n	8006ef0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2208      	movs	r2, #8
 8006e52:	4413      	add	r3, r2
 8006e54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	1ad2      	subs	r2, r2, r3
 8006e66:	2308      	movs	r3, #8
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d920      	bls.n	8006eb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4413      	add	r3, r2
 8006e74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <pvPortMalloc+0xfc>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	613b      	str	r3, [r7, #16]
}
 8006e92:	bf00      	nop
 8006e94:	bf00      	nop
 8006e96:	e7fd      	b.n	8006e94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	1ad2      	subs	r2, r2, r3
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006eaa:	69b8      	ldr	r0, [r7, #24]
 8006eac:	f000 f90a 	bl	80070c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f28 <pvPortMalloc+0x18c>)
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	4a1b      	ldr	r2, [pc, #108]	@ (8006f28 <pvPortMalloc+0x18c>)
 8006ebc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8006f28 <pvPortMalloc+0x18c>)
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f30 <pvPortMalloc+0x194>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d203      	bcs.n	8006ed2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006eca:	4b17      	ldr	r3, [pc, #92]	@ (8006f28 <pvPortMalloc+0x18c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a18      	ldr	r2, [pc, #96]	@ (8006f30 <pvPortMalloc+0x194>)
 8006ed0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	4b13      	ldr	r3, [pc, #76]	@ (8006f24 <pvPortMalloc+0x188>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	431a      	orrs	r2, r3
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ee6:	4b13      	ldr	r3, [pc, #76]	@ (8006f34 <pvPortMalloc+0x198>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3301      	adds	r3, #1
 8006eec:	4a11      	ldr	r2, [pc, #68]	@ (8006f34 <pvPortMalloc+0x198>)
 8006eee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ef0:	f7fe fce0 	bl	80058b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00b      	beq.n	8006f16 <pvPortMalloc+0x17a>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	60fb      	str	r3, [r7, #12]
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	e7fd      	b.n	8006f12 <pvPortMalloc+0x176>
	return pvReturn;
 8006f16:	69fb      	ldr	r3, [r7, #28]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3728      	adds	r7, #40	@ 0x28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20002744 	.word	0x20002744
 8006f24:	20002758 	.word	0x20002758
 8006f28:	20002748 	.word	0x20002748
 8006f2c:	2000273c 	.word	0x2000273c
 8006f30:	2000274c 	.word	0x2000274c
 8006f34:	20002750 	.word	0x20002750

08006f38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d04f      	beq.n	8006fea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f4a:	2308      	movs	r3, #8
 8006f4c:	425b      	negs	r3, r3
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4413      	add	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	4b25      	ldr	r3, [pc, #148]	@ (8006ff4 <vPortFree+0xbc>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4013      	ands	r3, r2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10b      	bne.n	8006f7e <vPortFree+0x46>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	60fb      	str	r3, [r7, #12]
}
 8006f78:	bf00      	nop
 8006f7a:	bf00      	nop
 8006f7c:	e7fd      	b.n	8006f7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00b      	beq.n	8006f9e <vPortFree+0x66>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	60bb      	str	r3, [r7, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	bf00      	nop
 8006f9c:	e7fd      	b.n	8006f9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	4b14      	ldr	r3, [pc, #80]	@ (8006ff4 <vPortFree+0xbc>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01e      	beq.n	8006fea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d11a      	bne.n	8006fea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff4 <vPortFree+0xbc>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	43db      	mvns	r3, r3
 8006fbe:	401a      	ands	r2, r3
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fc4:	f7fe fc68 	bl	8005898 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff8 <vPortFree+0xc0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	4a09      	ldr	r2, [pc, #36]	@ (8006ff8 <vPortFree+0xc0>)
 8006fd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fd6:	6938      	ldr	r0, [r7, #16]
 8006fd8:	f000 f874 	bl	80070c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006fdc:	4b07      	ldr	r3, [pc, #28]	@ (8006ffc <vPortFree+0xc4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	4a06      	ldr	r2, [pc, #24]	@ (8006ffc <vPortFree+0xc4>)
 8006fe4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006fe6:	f7fe fc65 	bl	80058b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fea:	bf00      	nop
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20002758 	.word	0x20002758
 8006ff8:	20002748 	.word	0x20002748
 8006ffc:	20002754 	.word	0x20002754

08007000 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007006:	f241 3388 	movw	r3, #5000	@ 0x1388
 800700a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800700c:	4b27      	ldr	r3, [pc, #156]	@ (80070ac <prvHeapInit+0xac>)
 800700e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00c      	beq.n	8007034 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3307      	adds	r3, #7
 800701e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0307 	bic.w	r3, r3, #7
 8007026:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	4a1f      	ldr	r2, [pc, #124]	@ (80070ac <prvHeapInit+0xac>)
 8007030:	4413      	add	r3, r2
 8007032:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007038:	4a1d      	ldr	r2, [pc, #116]	@ (80070b0 <prvHeapInit+0xb0>)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800703e:	4b1c      	ldr	r3, [pc, #112]	@ (80070b0 <prvHeapInit+0xb0>)
 8007040:	2200      	movs	r2, #0
 8007042:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	4413      	add	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800704c:	2208      	movs	r2, #8
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	1a9b      	subs	r3, r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0307 	bic.w	r3, r3, #7
 800705a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4a15      	ldr	r2, [pc, #84]	@ (80070b4 <prvHeapInit+0xb4>)
 8007060:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007062:	4b14      	ldr	r3, [pc, #80]	@ (80070b4 <prvHeapInit+0xb4>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2200      	movs	r2, #0
 8007068:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800706a:	4b12      	ldr	r3, [pc, #72]	@ (80070b4 <prvHeapInit+0xb4>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	1ad2      	subs	r2, r2, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007080:	4b0c      	ldr	r3, [pc, #48]	@ (80070b4 <prvHeapInit+0xb4>)
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	4a0a      	ldr	r2, [pc, #40]	@ (80070b8 <prvHeapInit+0xb8>)
 800708e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	4a09      	ldr	r2, [pc, #36]	@ (80070bc <prvHeapInit+0xbc>)
 8007096:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007098:	4b09      	ldr	r3, [pc, #36]	@ (80070c0 <prvHeapInit+0xc0>)
 800709a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800709e:	601a      	str	r2, [r3, #0]
}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	200013b4 	.word	0x200013b4
 80070b0:	2000273c 	.word	0x2000273c
 80070b4:	20002744 	.word	0x20002744
 80070b8:	2000274c 	.word	0x2000274c
 80070bc:	20002748 	.word	0x20002748
 80070c0:	20002758 	.word	0x20002758

080070c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070cc:	4b28      	ldr	r3, [pc, #160]	@ (8007170 <prvInsertBlockIntoFreeList+0xac>)
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	e002      	b.n	80070d8 <prvInsertBlockIntoFreeList+0x14>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d8f7      	bhi.n	80070d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	4413      	add	r3, r2
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d108      	bne.n	8007106 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	441a      	add	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	441a      	add	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d118      	bne.n	800714c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4b15      	ldr	r3, [pc, #84]	@ (8007174 <prvInsertBlockIntoFreeList+0xb0>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d00d      	beq.n	8007142 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	441a      	add	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	e008      	b.n	8007154 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007142:	4b0c      	ldr	r3, [pc, #48]	@ (8007174 <prvInsertBlockIntoFreeList+0xb0>)
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	e003      	b.n	8007154 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	429a      	cmp	r2, r3
 800715a:	d002      	beq.n	8007162 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007162:	bf00      	nop
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	2000273c 	.word	0x2000273c
 8007174:	20002744 	.word	0x20002744

08007178 <memset>:
 8007178:	4402      	add	r2, r0
 800717a:	4603      	mov	r3, r0
 800717c:	4293      	cmp	r3, r2
 800717e:	d100      	bne.n	8007182 <memset+0xa>
 8007180:	4770      	bx	lr
 8007182:	f803 1b01 	strb.w	r1, [r3], #1
 8007186:	e7f9      	b.n	800717c <memset+0x4>

08007188 <_reclaim_reent>:
 8007188:	4b29      	ldr	r3, [pc, #164]	@ (8007230 <_reclaim_reent+0xa8>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4283      	cmp	r3, r0
 800718e:	b570      	push	{r4, r5, r6, lr}
 8007190:	4604      	mov	r4, r0
 8007192:	d04b      	beq.n	800722c <_reclaim_reent+0xa4>
 8007194:	69c3      	ldr	r3, [r0, #28]
 8007196:	b1ab      	cbz	r3, 80071c4 <_reclaim_reent+0x3c>
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	b16b      	cbz	r3, 80071b8 <_reclaim_reent+0x30>
 800719c:	2500      	movs	r5, #0
 800719e:	69e3      	ldr	r3, [r4, #28]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	5959      	ldr	r1, [r3, r5]
 80071a4:	2900      	cmp	r1, #0
 80071a6:	d13b      	bne.n	8007220 <_reclaim_reent+0x98>
 80071a8:	3504      	adds	r5, #4
 80071aa:	2d80      	cmp	r5, #128	@ 0x80
 80071ac:	d1f7      	bne.n	800719e <_reclaim_reent+0x16>
 80071ae:	69e3      	ldr	r3, [r4, #28]
 80071b0:	4620      	mov	r0, r4
 80071b2:	68d9      	ldr	r1, [r3, #12]
 80071b4:	f000 f872 	bl	800729c <_free_r>
 80071b8:	69e3      	ldr	r3, [r4, #28]
 80071ba:	6819      	ldr	r1, [r3, #0]
 80071bc:	b111      	cbz	r1, 80071c4 <_reclaim_reent+0x3c>
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 f86c 	bl	800729c <_free_r>
 80071c4:	6961      	ldr	r1, [r4, #20]
 80071c6:	b111      	cbz	r1, 80071ce <_reclaim_reent+0x46>
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 f867 	bl	800729c <_free_r>
 80071ce:	69e1      	ldr	r1, [r4, #28]
 80071d0:	b111      	cbz	r1, 80071d8 <_reclaim_reent+0x50>
 80071d2:	4620      	mov	r0, r4
 80071d4:	f000 f862 	bl	800729c <_free_r>
 80071d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80071da:	b111      	cbz	r1, 80071e2 <_reclaim_reent+0x5a>
 80071dc:	4620      	mov	r0, r4
 80071de:	f000 f85d 	bl	800729c <_free_r>
 80071e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071e4:	b111      	cbz	r1, 80071ec <_reclaim_reent+0x64>
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 f858 	bl	800729c <_free_r>
 80071ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80071ee:	b111      	cbz	r1, 80071f6 <_reclaim_reent+0x6e>
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 f853 	bl	800729c <_free_r>
 80071f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80071f8:	b111      	cbz	r1, 8007200 <_reclaim_reent+0x78>
 80071fa:	4620      	mov	r0, r4
 80071fc:	f000 f84e 	bl	800729c <_free_r>
 8007200:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007202:	b111      	cbz	r1, 800720a <_reclaim_reent+0x82>
 8007204:	4620      	mov	r0, r4
 8007206:	f000 f849 	bl	800729c <_free_r>
 800720a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800720c:	b111      	cbz	r1, 8007214 <_reclaim_reent+0x8c>
 800720e:	4620      	mov	r0, r4
 8007210:	f000 f844 	bl	800729c <_free_r>
 8007214:	6a23      	ldr	r3, [r4, #32]
 8007216:	b14b      	cbz	r3, 800722c <_reclaim_reent+0xa4>
 8007218:	4620      	mov	r0, r4
 800721a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800721e:	4718      	bx	r3
 8007220:	680e      	ldr	r6, [r1, #0]
 8007222:	4620      	mov	r0, r4
 8007224:	f000 f83a 	bl	800729c <_free_r>
 8007228:	4631      	mov	r1, r6
 800722a:	e7bb      	b.n	80071a4 <_reclaim_reent+0x1c>
 800722c:	bd70      	pop	{r4, r5, r6, pc}
 800722e:	bf00      	nop
 8007230:	20000010 	.word	0x20000010

08007234 <__libc_init_array>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	4d0d      	ldr	r5, [pc, #52]	@ (800726c <__libc_init_array+0x38>)
 8007238:	4c0d      	ldr	r4, [pc, #52]	@ (8007270 <__libc_init_array+0x3c>)
 800723a:	1b64      	subs	r4, r4, r5
 800723c:	10a4      	asrs	r4, r4, #2
 800723e:	2600      	movs	r6, #0
 8007240:	42a6      	cmp	r6, r4
 8007242:	d109      	bne.n	8007258 <__libc_init_array+0x24>
 8007244:	4d0b      	ldr	r5, [pc, #44]	@ (8007274 <__libc_init_array+0x40>)
 8007246:	4c0c      	ldr	r4, [pc, #48]	@ (8007278 <__libc_init_array+0x44>)
 8007248:	f000 f87e 	bl	8007348 <_init>
 800724c:	1b64      	subs	r4, r4, r5
 800724e:	10a4      	asrs	r4, r4, #2
 8007250:	2600      	movs	r6, #0
 8007252:	42a6      	cmp	r6, r4
 8007254:	d105      	bne.n	8007262 <__libc_init_array+0x2e>
 8007256:	bd70      	pop	{r4, r5, r6, pc}
 8007258:	f855 3b04 	ldr.w	r3, [r5], #4
 800725c:	4798      	blx	r3
 800725e:	3601      	adds	r6, #1
 8007260:	e7ee      	b.n	8007240 <__libc_init_array+0xc>
 8007262:	f855 3b04 	ldr.w	r3, [r5], #4
 8007266:	4798      	blx	r3
 8007268:	3601      	adds	r6, #1
 800726a:	e7f2      	b.n	8007252 <__libc_init_array+0x1e>
 800726c:	080074f4 	.word	0x080074f4
 8007270:	080074f4 	.word	0x080074f4
 8007274:	080074f4 	.word	0x080074f4
 8007278:	080074f8 	.word	0x080074f8

0800727c <__retarget_lock_acquire_recursive>:
 800727c:	4770      	bx	lr

0800727e <__retarget_lock_release_recursive>:
 800727e:	4770      	bx	lr

08007280 <memcpy>:
 8007280:	440a      	add	r2, r1
 8007282:	4291      	cmp	r1, r2
 8007284:	f100 33ff 	add.w	r3, r0, #4294967295
 8007288:	d100      	bne.n	800728c <memcpy+0xc>
 800728a:	4770      	bx	lr
 800728c:	b510      	push	{r4, lr}
 800728e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007296:	4291      	cmp	r1, r2
 8007298:	d1f9      	bne.n	800728e <memcpy+0xe>
 800729a:	bd10      	pop	{r4, pc}

0800729c <_free_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4605      	mov	r5, r0
 80072a0:	2900      	cmp	r1, #0
 80072a2:	d041      	beq.n	8007328 <_free_r+0x8c>
 80072a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072a8:	1f0c      	subs	r4, r1, #4
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bfb8      	it	lt
 80072ae:	18e4      	addlt	r4, r4, r3
 80072b0:	f000 f83e 	bl	8007330 <__malloc_lock>
 80072b4:	4a1d      	ldr	r2, [pc, #116]	@ (800732c <_free_r+0x90>)
 80072b6:	6813      	ldr	r3, [r2, #0]
 80072b8:	b933      	cbnz	r3, 80072c8 <_free_r+0x2c>
 80072ba:	6063      	str	r3, [r4, #4]
 80072bc:	6014      	str	r4, [r2, #0]
 80072be:	4628      	mov	r0, r5
 80072c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072c4:	f000 b83a 	b.w	800733c <__malloc_unlock>
 80072c8:	42a3      	cmp	r3, r4
 80072ca:	d908      	bls.n	80072de <_free_r+0x42>
 80072cc:	6820      	ldr	r0, [r4, #0]
 80072ce:	1821      	adds	r1, r4, r0
 80072d0:	428b      	cmp	r3, r1
 80072d2:	bf01      	itttt	eq
 80072d4:	6819      	ldreq	r1, [r3, #0]
 80072d6:	685b      	ldreq	r3, [r3, #4]
 80072d8:	1809      	addeq	r1, r1, r0
 80072da:	6021      	streq	r1, [r4, #0]
 80072dc:	e7ed      	b.n	80072ba <_free_r+0x1e>
 80072de:	461a      	mov	r2, r3
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	b10b      	cbz	r3, 80072e8 <_free_r+0x4c>
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	d9fa      	bls.n	80072de <_free_r+0x42>
 80072e8:	6811      	ldr	r1, [r2, #0]
 80072ea:	1850      	adds	r0, r2, r1
 80072ec:	42a0      	cmp	r0, r4
 80072ee:	d10b      	bne.n	8007308 <_free_r+0x6c>
 80072f0:	6820      	ldr	r0, [r4, #0]
 80072f2:	4401      	add	r1, r0
 80072f4:	1850      	adds	r0, r2, r1
 80072f6:	4283      	cmp	r3, r0
 80072f8:	6011      	str	r1, [r2, #0]
 80072fa:	d1e0      	bne.n	80072be <_free_r+0x22>
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	6053      	str	r3, [r2, #4]
 8007302:	4408      	add	r0, r1
 8007304:	6010      	str	r0, [r2, #0]
 8007306:	e7da      	b.n	80072be <_free_r+0x22>
 8007308:	d902      	bls.n	8007310 <_free_r+0x74>
 800730a:	230c      	movs	r3, #12
 800730c:	602b      	str	r3, [r5, #0]
 800730e:	e7d6      	b.n	80072be <_free_r+0x22>
 8007310:	6820      	ldr	r0, [r4, #0]
 8007312:	1821      	adds	r1, r4, r0
 8007314:	428b      	cmp	r3, r1
 8007316:	bf04      	itt	eq
 8007318:	6819      	ldreq	r1, [r3, #0]
 800731a:	685b      	ldreq	r3, [r3, #4]
 800731c:	6063      	str	r3, [r4, #4]
 800731e:	bf04      	itt	eq
 8007320:	1809      	addeq	r1, r1, r0
 8007322:	6021      	streq	r1, [r4, #0]
 8007324:	6054      	str	r4, [r2, #4]
 8007326:	e7ca      	b.n	80072be <_free_r+0x22>
 8007328:	bd38      	pop	{r3, r4, r5, pc}
 800732a:	bf00      	nop
 800732c:	20002898 	.word	0x20002898

08007330 <__malloc_lock>:
 8007330:	4801      	ldr	r0, [pc, #4]	@ (8007338 <__malloc_lock+0x8>)
 8007332:	f7ff bfa3 	b.w	800727c <__retarget_lock_acquire_recursive>
 8007336:	bf00      	nop
 8007338:	20002894 	.word	0x20002894

0800733c <__malloc_unlock>:
 800733c:	4801      	ldr	r0, [pc, #4]	@ (8007344 <__malloc_unlock+0x8>)
 800733e:	f7ff bf9e 	b.w	800727e <__retarget_lock_release_recursive>
 8007342:	bf00      	nop
 8007344:	20002894 	.word	0x20002894

08007348 <_init>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	bf00      	nop
 800734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734e:	bc08      	pop	{r3}
 8007350:	469e      	mov	lr, r3
 8007352:	4770      	bx	lr

08007354 <_fini>:
 8007354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007356:	bf00      	nop
 8007358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800735a:	bc08      	pop	{r3}
 800735c:	469e      	mov	lr, r3
 800735e:	4770      	bx	lr
