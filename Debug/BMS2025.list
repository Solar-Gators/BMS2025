
BMS2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001227c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08012430  08012430  00013430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012980  08012980  000142e0  2**0
                  CONTENTS
  4 .ARM          00000008  08012980  08012980  00013980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012988  08012988  000142e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012988  08012988  00013988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012990  08012990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e0  20000000  08012994  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043e8  200002e0  08012c74  000142e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046c8  08012c74  000146c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003337b  00000000  00000000  00014310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000686b  00000000  00000000  0004768b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024d0  00000000  00000000  0004def8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c3d  00000000  00000000  000503c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003260f  00000000  00000000  00052005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c397  00000000  00000000  00084614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119fc6  00000000  00000000  000b09ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ca971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aad4  00000000  00000000  001ca9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001d5488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e0 	.word	0x200002e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012414 	.word	0x08012414

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002e4 	.word	0x200002e4
 80001ec:	08012414 	.word	0x08012414

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <_ZN7ADS7138C1Ev>:
#include "ADS7138.h"

/**
 * @brief Instantiates a new ADS7138 class.
 */
ADS7138::ADS7138() {}
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh>:
 * @brief Sets up the I2C connection.
 *
 * @param hi2c Pointer to the HAL I2C handle.
 * @param deviceAddress The 7-bit I2C address of the ADS7138.
 */
void ADS7138::begin(I2C_HandleTypeDef* hi2c, uint8_t deviceAddress) {
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71fb      	strb	r3, [r7, #7]
    _i2cHandle = hi2c;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	601a      	str	r2, [r3, #0]
    _deviceAddress = (deviceAddress != 0) ? deviceAddress << 1 : (ADS7138_I2CADDR_DEFAULT << 1); // STM32 expects 8-bit address
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh+0x22>
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	e000      	b.n	8000c42 <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh+0x24>
 8000c40:	2220      	movs	r2, #32
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	711a      	strb	r2, [r3, #4]
    _currentOsr = OSR_1;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	731a      	strb	r2, [r3, #12]
    _referenceVoltage = 3300; // default in mV
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000c52:	609a      	str	r2, [r3, #8]
    _currentChannel = MANUAL_CHID_AIN0;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2200      	movs	r2, #0
 8000c58:	735a      	strb	r2, [r3, #13]
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_ZN7ADS713819setReferenceVoltageEm>:

void ADS7138::setReferenceVoltage(uint32_t reference) {
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
    _referenceVoltage = reference;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	609a      	str	r2, [r3, #8]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_ZN7ADS713814writeRegister8Ehh>:

void ADS7138::writeRegister8(uint8_t registerAddress, uint8_t value) {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af02      	add	r7, sp, #8
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	70fb      	strb	r3, [r7, #3]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	70bb      	strb	r3, [r7, #2]
    uint8_t data[3] = { SINGLE_REGISTER_WRITE, registerAddress, value };
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2100      	movs	r1, #0
 8000c98:	460a      	mov	r2, r1
 8000c9a:	801a      	strh	r2, [r3, #0]
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	709a      	strb	r2, [r3, #2]
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	733b      	strb	r3, [r7, #12]
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	737b      	strb	r3, [r7, #13]
 8000ca8:	78bb      	ldrb	r3, [r7, #2]
 8000caa:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(_i2cHandle, _deviceAddress, data, 3, HAL_MAX_DELAY);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	791b      	ldrb	r3, [r3, #4]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f107 020c 	add.w	r2, r7, #12
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	f003 fb83 	bl	80043cc <HAL_I2C_Master_Transmit>
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZN7ADS713815configureOpModeE16ADS7138__OSC_SEL18ADS7138__CONV_MODE20ADS7138__CONV_ON_ERR>:

void ADS7138::configureOpMode(ADS7138__OSC_SEL oscSel, ADS7138__CONV_MODE convMode, ADS7138__CONV_ON_ERR convOnErr) {
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	4611      	mov	r1, r2
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4603      	mov	r3, r0
 8000cde:	70fb      	strb	r3, [r7, #3]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	70bb      	strb	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	707b      	strb	r3, [r7, #1]
    uint8_t config = (0x00 & CLK_DIV_MASK) | (oscSel & OSC_SEL_MASK) | (convMode & CONV_MODE_MASK) | (convOnErr & CONV_ON_ERR_MASK);
 8000ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	b25a      	sxtb	r2, r3
 8000cf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000cf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b25a      	sxtb	r2, r3
 8000d00:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000d04:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	73fb      	strb	r3, [r7, #15]
    writeRegister8(OPMODE_CFG_ADDRESS, config);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	461a      	mov	r2, r3
 8000d14:	2104      	movs	r1, #4
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffb3 	bl	8000c82 <_ZN7ADS713814writeRegister8Ehh>
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN7ADS713821configureSequenceModeE17ADS7138__SEQ_MODE18ADS7138__SEQ_START>:

void ADS7138::configureSequenceMode(ADS7138__SEQ_MODE seqMode, ADS7138__SEQ_START seqStart) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
 8000d30:	4613      	mov	r3, r2
 8000d32:	70bb      	strb	r3, [r7, #2]
    uint8_t config = (seqMode & SEQ_MODE_MASK) | (seqStart & SEQ_START_MASK);
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	78bb      	ldrb	r3, [r7, #2]
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	73fb      	strb	r3, [r7, #15]
    writeRegister8(SEQUENCE_CFG_ADDRESS, config);
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff97 	bl	8000c82 <_ZN7ADS713814writeRegister8Ehh>
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_ZN7ADS713812configureOsrE12ADS7138__OSR>:

void ADS7138::configureOsr(ADS7138__OSR osr) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
    _currentOsr = osr;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	78fa      	ldrb	r2, [r7, #3]
 8000d6c:	731a      	strb	r2, [r3, #12]
    writeRegister8(OSR_CFG_ADDRESS, osr & OSR_MASK);
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	2103      	movs	r1, #3
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ff81 	bl	8000c82 <_ZN7ADS713814writeRegister8Ehh>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_ZN7ADS713813selectChannelE20ADS7138__MANUAL_CHID>:

void ADS7138::selectChannel(ADS7138__MANUAL_CHID channel) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
    _currentChannel = channel;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	78fa      	ldrb	r2, [r7, #3]
 8000d98:	735a      	strb	r2, [r3, #13]
    writeRegister8(MANUAL_CH_SEL_ADDRESS, channel & MANUAL_CHID_MASK);
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	f003 030f 	and.w	r3, r3, #15
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	2111      	movs	r1, #17
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ff6b 	bl	8000c82 <_ZN7ADS713814writeRegister8Ehh>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_ZN7ADS71384readEv>:

uint16_t ADS7138::read() {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	6078      	str	r0, [r7, #4]
    uint8_t buf[2] = {0};
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	81bb      	strh	r3, [r7, #12]
    HAL_I2C_Master_Receive(_i2cHandle, _deviceAddress, buf, 2, HAL_MAX_DELAY);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	791b      	ldrb	r3, [r3, #4]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f107 020c 	add.w	r2, r7, #12
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f003 fc11 	bl	80045fc <HAL_I2C_Master_Receive>

    uint16_t value = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	81fb      	strh	r3, [r7, #14]
    if (_currentOsr != OSR_1) {
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7b1b      	ldrb	r3, [r3, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00a      	beq.n	8000dfc <_ZN7ADS71384readEv+0x48>
        value = (buf[0] << 4) | (buf[1] >> 4);
 8000de6:	7b3b      	ldrb	r3, [r7, #12]
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	7b7b      	ldrb	r3, [r7, #13]
 8000dee:	091b      	lsrs	r3, r3, #4
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	4313      	orrs	r3, r2
 8000df6:	b21b      	sxth	r3, r3
 8000df8:	81fb      	strh	r3, [r7, #14]
 8000dfa:	e007      	b.n	8000e0c <_ZN7ADS71384readEv+0x58>
    } else {
        value = (buf[0] << 8) | buf[1];
 8000dfc:	7b3b      	ldrb	r3, [r7, #12]
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	b21a      	sxth	r2, r3
 8000e02:	7b7b      	ldrb	r3, [r7, #13]
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	81fb      	strh	r3, [r7, #14]
    }
    return value;
 8000e0c:	89fb      	ldrh	r3, [r7, #14]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <_ZN7ADS713811readVoltageEv>:
        selectChannel(channel);
    }
    return read();
}

uint32_t ADS7138::readVoltage() {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    uint16_t raw = read();
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ffc7 	bl	8000db4 <_ZN7ADS71384readEv>
 8000e26:	4603      	mov	r3, r0
 8000e28:	81fb      	strh	r3, [r7, #14]
    return (static_cast<uint32_t>(raw) * _referenceVoltage) / 4095;
 8000e2a:	89fb      	ldrh	r3, [r7, #14]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	6892      	ldr	r2, [r2, #8]
 8000e30:	fb03 f202 	mul.w	r2, r3, r2
 8000e34:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <_ZN7ADS713811readVoltageEv+0x34>)
 8000e36:	fba3 1302 	umull	r1, r3, r3, r2
 8000e3a:	1ad2      	subs	r2, r2, r3
 8000e3c:	0852      	lsrs	r2, r2, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	0adb      	lsrs	r3, r3, #11
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	00100101 	.word	0x00100101

08000e50 <_ZN7ADS713818readChannelVoltageE20ADS7138__MANUAL_CHID>:

uint32_t ADS7138::readChannelVoltage(ADS7138__MANUAL_CHID channel) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
    if (channel != _currentChannel) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7b5b      	ldrb	r3, [r3, #13]
 8000e60:	78fa      	ldrb	r2, [r7, #3]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d004      	beq.n	8000e70 <_ZN7ADS713818readChannelVoltageE20ADS7138__MANUAL_CHID+0x20>
        selectChannel(channel);
 8000e66:	78fb      	ldrb	r3, [r7, #3]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff8c 	bl	8000d88 <_ZN7ADS713813selectChannelE20ADS7138__MANUAL_CHID>
    }
    return readVoltage();
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ffd1 	bl	8000e18 <_ZN7ADS713811readVoltageEv>
 8000e76:	4603      	mov	r3, r0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_ZN7BQ7695215CELL_NO_TO_ADDREh>:
    int16_t GetHighCellVoltage();
    int16_t GetLowCellVoltage();
    int16_t GetPackCurrent();
    bool GetConfigUpdateStatus();

    constexpr uint8_t CELL_NO_TO_ADDR(uint8_t cell_no) { return BQ769X2_CMD_VOLTAGE_CELL_1 + ((cell_no-1)*2); }
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	3309      	adds	r3, #9
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_ZN7BQ76952C1Ev>:
#include <stdbool.h>

#ifndef BQ76952_
#define BQ76952_

BQ76952::BQ76952(){
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3308      	adds	r3, #8
 8000eae:	2220      	movs	r2, #32
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00f fb35 	bl	8010522 <memset>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	865a      	strh	r2, [r3, #50]	@ 0x32
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3334      	adds	r3, #52	@ 0x34
 8000ee0:	2224      	movs	r2, #36	@ 0x24
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f00f fb1c 	bl	8010522 <memset>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	659a      	str	r2, [r3, #88]	@ 0x58
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	661a      	str	r2, [r3, #96]	@ 0x60
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	665a      	str	r2, [r3, #100]	@ 0x64
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f

}
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_ZN7BQ769524InitEP19__I2C_HandleTypeDefh>:

HAL_StatusTypeDef BQ76952::Init(I2C_HandleTypeDef *hi2c, uint8_t i2cAddress){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	71fb      	strb	r3, [r7, #7]
    hi2c_ = hi2c;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	605a      	str	r2, [r3, #4]
    i2cAddressWrite = i2cAddress;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	701a      	strb	r2, [r3, #0]
    i2cAddressRead = i2cAddress+1;
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	3301      	adds	r3, #1
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	705a      	strb	r2, [r3, #1]

    Reset();
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f000 f81d 	bl	8000fb8 <_ZN7BQ769525ResetEv>
    volatile uint32_t delay = 100000;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <_ZN7BQ769524InitEP19__I2C_HandleTypeDefh+0x60>)
 8000f80:	617b      	str	r3, [r7, #20]
    while(delay--);
 8000f82:	bf00      	nop
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	617a      	str	r2, [r7, #20]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	bf14      	ite	ne
 8000f8e:	2301      	movne	r3, #1
 8000f90:	2300      	moveq	r3, #0
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f5      	bne.n	8000f84 <_ZN7BQ769524InitEP19__I2C_HandleTypeDefh+0x30>

    // DatamemWriteU1(BQ769X2_SET_PROT_ENABLED_A, 12);

    return HAL_I2C_IsDeviceReady(hi2c_, i2cAddressWrite, 100, 50);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6858      	ldr	r0, [r3, #4]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2332      	movs	r3, #50	@ 0x32
 8000fa4:	2264      	movs	r2, #100	@ 0x64
 8000fa6:	f003 fc1f 	bl	80047e8 <HAL_I2C_IsDeviceReady>
 8000faa:	4603      	mov	r3, r0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	000186a0 	.word	0x000186a0

08000fb8 <_ZN7BQ769525ResetEv>:

HAL_StatusTypeDef BQ76952::Init(I2C_HandleTypeDef *hi2c){
	return Init(hi2c, BQ_I2C_ADDR_WRITE);
}

HAL_StatusTypeDef BQ76952::Reset() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    return SubcmdCmdOnly(BQ769X2_SUBCMD_RESET);
 8000fc0:	2112      	movs	r1, #18
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f9d8 	bl	8001378 <_ZN7BQ7695213SubcmdCmdOnlyEt>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_ZN7BQ7695212ReadVoltagesEv>:

HAL_StatusTypeDef BQ76952::ConfigureVoltageRegs() {
    return HAL_OK;
}

HAL_StatusTypeDef BQ76952::ReadVoltages() {
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	75fb      	strb	r3, [r7, #23]

    int16_t voltage_sum = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	82bb      	strh	r3, [r7, #20]
    low_cell_voltage_ = INT16_MAX;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000fe8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    high_cell_voltage_ = INT16_MIN;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    for (int i = 0; i < 16; i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	e087      	b.n	8001108 <_ZN7BQ7695212ReadVoltagesEv+0x136>

    	if((i == 0) || (i == 1) || (i == 15)){
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d005      	beq.n	800100a <_ZN7BQ7695212ReadVoltagesEv+0x38>
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d002      	beq.n	800100a <_ZN7BQ7695212ReadVoltagesEv+0x38>
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	2b0f      	cmp	r3, #15
 8001008:	d134      	bne.n	8001074 <_ZN7BQ7695212ReadVoltagesEv+0xa2>
    		for (int retry = 0; retry < 3; retry++) {
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e02b      	b.n	8001068 <_ZN7BQ7695212ReadVoltagesEv+0x96>
				status = DirectReadI2(CELL_NO_TO_ADDR(i+1), &cell_voltages_[i]);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3301      	adds	r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff30 	bl	8000e80 <_ZN7BQ7695215CELL_NO_TO_ADDREh>
 8001020:	4603      	mov	r3, r0
 8001022:	4619      	mov	r1, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	3304      	adds	r3, #4
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	461a      	mov	r2, r3
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f902 	bl	800123a <_ZN7BQ7695212DirectReadI2EhPs>
 8001036:	4603      	mov	r3, r0
 8001038:	75fb      	strb	r3, [r7, #23]
				if (status == HAL_OK && cell_voltages_[i] < 5000 && cell_voltages_[i] > 1000) break;  // 1V to 5V is reasonable
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d110      	bne.n	8001062 <_ZN7BQ7695212ReadVoltagesEv+0x90>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	3204      	adds	r2, #4
 8001046:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800104a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800104e:	4293      	cmp	r3, r2
 8001050:	dc07      	bgt.n	8001062 <_ZN7BQ7695212ReadVoltagesEv+0x90>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	3204      	adds	r2, #4
 8001058:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800105c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001060:	dc06      	bgt.n	8001070 <_ZN7BQ7695212ReadVoltagesEv+0x9e>
    		for (int retry = 0; retry < 3; retry++) {
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b02      	cmp	r3, #2
 800106c:	ddd0      	ble.n	8001010 <_ZN7BQ7695212ReadVoltagesEv+0x3e>
    		}
    	}else{
 800106e:	e016      	b.n	800109e <_ZN7BQ7695212ReadVoltagesEv+0xcc>
				if (status == HAL_OK && cell_voltages_[i] < 5000 && cell_voltages_[i] > 1000) break;  // 1V to 5V is reasonable
 8001070:	bf00      	nop
    	}else{
 8001072:	e014      	b.n	800109e <_ZN7BQ7695212ReadVoltagesEv+0xcc>
    		status = DirectReadI2(CELL_NO_TO_ADDR(i+1), &cell_voltages_[i]);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	3301      	adds	r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4619      	mov	r1, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fefe 	bl	8000e80 <_ZN7BQ7695215CELL_NO_TO_ADDREh>
 8001084:	4603      	mov	r3, r0
 8001086:	4619      	mov	r1, r3
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	3304      	adds	r3, #4
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	461a      	mov	r2, r3
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f8d0 	bl	800123a <_ZN7BQ7695212DirectReadI2EhPs>
 800109a:	4603      	mov	r3, r0
 800109c:	75fb      	strb	r3, [r7, #23]
    	}
        if (status != HAL_OK) { return status; }
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <_ZN7BQ7695212ReadVoltagesEv+0xd6>
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	e06f      	b.n	8001188 <_ZN7BQ7695212ReadVoltagesEv+0x1b6>

        if (cell_voltages_[i] > high_cell_voltage_) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	3204      	adds	r2, #4
 80010ae:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dd07      	ble.n	80010cc <_ZN7BQ7695212ReadVoltagesEv+0xfa>
            high_cell_voltage_ = cell_voltages_[i];
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	3204      	adds	r2, #4
 80010c2:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80010ca:	e010      	b.n	80010ee <_ZN7BQ7695212ReadVoltagesEv+0x11c>
        }
        else if (cell_voltages_[i] < low_cell_voltage_) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	3204      	adds	r2, #4
 80010d2:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80010dc:	429a      	cmp	r2, r3
 80010de:	da06      	bge.n	80010ee <_ZN7BQ7695212ReadVoltagesEv+0x11c>
            low_cell_voltage_ = cell_voltages_[i];
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	3204      	adds	r2, #4
 80010e6:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
        }

        voltage_sum += cell_voltages_[i];
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	3204      	adds	r2, #4
 80010f4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	4413      	add	r3, r2
 80010fe:	b29b      	uxth	r3, r3
 8001100:	82bb      	strh	r3, [r7, #20]
    for (int i = 0; i < 16; i++) {
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	3301      	adds	r3, #1
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	f77f af74 	ble.w	8000ff8 <_ZN7BQ7695212ReadVoltagesEv+0x26>
    }

    avg_cell_voltage_ = voltage_sum / 16;
 8001110:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	da00      	bge.n	800111a <_ZN7BQ7695212ReadVoltagesEv+0x148>
 8001118:	330f      	adds	r3, #15
 800111a:	111b      	asrs	r3, r3, #4
 800111c:	b21a      	sxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	851a      	strh	r2, [r3, #40]	@ 0x28

    int16_t pack_voltage_temp; // this number will be in userV, by default 1 userV = 10 mV
    status = DirectReadI2(BQ769X2_CMD_VOLTAGE_PACK, &pack_voltage_temp);
 8001122:	f107 030a 	add.w	r3, r7, #10
 8001126:	461a      	mov	r2, r3
 8001128:	2136      	movs	r1, #54	@ 0x36
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f885 	bl	800123a <_ZN7BQ7695212DirectReadI2EhPs>
 8001130:	4603      	mov	r3, r0
 8001132:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) { return status; }
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <_ZN7BQ7695212ReadVoltagesEv+0x16c>
 800113a:	7dfb      	ldrb	r3, [r7, #23]
 800113c:	e024      	b.n	8001188 <_ZN7BQ7695212ReadVoltagesEv+0x1b6>
    pack_voltage_ = pack_voltage_temp*10; // pack_voltage_ is in mV
 800113e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001142:	b29b      	uxth	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4413      	add	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	b29b      	uxth	r3, r3
 800114e:	b21a      	sxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	861a      	strh	r2, [r3, #48]	@ 0x30


    int16_t stack_voltage_temp; // this number will be in userV, by default 1 userV = 10 mV
    status = DirectReadI2(BQ769X2_CMD_VOLTAGE_STACK, &stack_voltage_temp);
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	461a      	mov	r2, r3
 800115a:	2134      	movs	r1, #52	@ 0x34
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f86c 	bl	800123a <_ZN7BQ7695212DirectReadI2EhPs>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) { return status; }
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <_ZN7BQ7695212ReadVoltagesEv+0x19e>
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	e00b      	b.n	8001188 <_ZN7BQ7695212ReadVoltagesEv+0x1b6>
    stack_voltage_ = stack_voltage_temp*10; //stack_voltage_ is in mV
 8001170:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001174:	b29b      	uxth	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b29b      	uxth	r3, r3
 8001180:	b21a      	sxth	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	865a      	strh	r2, [r3, #50]	@ 0x32

    return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN7BQ7695210WriteBytesEhPKhj>:

bool BQ76952::GetConfigUpdateStatus(){
    return current_mode_ == BQ_MODE_CONFIGUPDATE;
}

HAL_StatusTypeDef BQ76952::WriteBytes(const uint8_t reg_addr, const uint8_t *data, const size_t num_bytes) {
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	460b      	mov	r3, r1
 800119e:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[5];

    if (num_bytes > 4){
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d901      	bls.n	80011aa <_ZN7BQ7695210WriteBytesEhPKhj+0x1a>
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e01c      	b.n	80011e4 <_ZN7BQ7695210WriteBytesEhPKhj+0x54>
    }

    buf[0] = reg_addr;
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	743b      	strb	r3, [r7, #16]
    memcpy(buf + 1, data, num_bytes);
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	3301      	adds	r3, #1
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00f fa88 	bl	80106ce <memcpy>

    return HAL_I2C_Master_Transmit(hi2c_, i2cAddressWrite, buf, num_bytes + 1, 1000);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6858      	ldr	r0, [r3, #4]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461c      	mov	r4, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	3301      	adds	r3, #1
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	f107 0210 	add.w	r2, r7, #16
 80011d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011d8:	9100      	str	r1, [sp, #0]
 80011da:	4621      	mov	r1, r4
 80011dc:	f003 f8f6 	bl	80043cc <HAL_I2C_Master_Transmit>
 80011e0:	4603      	mov	r3, r0
 80011e2:	bf00      	nop
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd90      	pop	{r4, r7, pc}

080011ec <_ZN7BQ769529ReadBytesEhPhj>:

HAL_StatusTypeDef BQ76952::ReadBytes(uint8_t reg_addr, uint8_t *data, const size_t num_bytes) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	460b      	mov	r3, r1
 80011fa:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(hi2c_, i2cAddressRead, &reg_addr, 1, 1000);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6858      	ldr	r0, [r3, #4]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	4619      	mov	r1, r3
 8001206:	f107 020b 	add.w	r2, r7, #11
 800120a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	f003 f8db 	bl	80043cc <HAL_I2C_Master_Transmit>
    
    return HAL_I2C_Master_Receive(hi2c_, i2cAddressRead, data, num_bytes, 1000);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6858      	ldr	r0, [r3, #4]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	785b      	ldrb	r3, [r3, #1]
 800121e:	4619      	mov	r1, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001228:	9200      	str	r2, [sp, #0]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	f003 f9e6 	bl	80045fc <HAL_I2C_Master_Receive>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_ZN7BQ7695212DirectReadI2EhPs>:
    *value = (buf[1] << 8) | buf[0];

    return HAL_OK;
}

HAL_StatusTypeDef BQ76952::DirectReadI2(const uint8_t reg_addr, int16_t *value) {
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	460b      	mov	r3, r1
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[2];

    HAL_StatusTypeDef status = ReadBytes(reg_addr, buf, 2);
 8001248:	f107 0214 	add.w	r2, r7, #20
 800124c:	7af9      	ldrb	r1, [r7, #11]
 800124e:	2302      	movs	r3, #2
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f7ff ffcb 	bl	80011ec <_ZN7BQ769529ReadBytesEhPhj>
 8001256:	4603      	mov	r3, r0
 8001258:	75fb      	strb	r3, [r7, #23]

    if (status != HAL_OK) 
 800125a:	7dfb      	ldrb	r3, [r7, #23]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <_ZN7BQ7695212DirectReadI2EhPs+0x2a>
        return status;
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	e009      	b.n	8001278 <_ZN7BQ7695212DirectReadI2EhPs+0x3e>

    *value = (int16_t)((buf[1] << 8) | buf[0]);
 8001264:	7d7b      	ldrb	r3, [r7, #21]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	7d3b      	ldrb	r3, [r7, #20]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21a      	sxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZN7BQ7695211SubcmdWriteEtmj>:

    *value = f32;
    return HAL_OK;
}

HAL_StatusTypeDef BQ76952::SubcmdWrite(const uint16_t subcmd, const uint32_t value, const size_t num_bytes) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	@ 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	460b      	mov	r3, r1
 800128e:	817b      	strh	r3, [r7, #10]
    uint8_t buf_data[4];
    uint8_t buf_subcmd[2] = { (uint8_t)(subcmd & 0x00FF), (uint8_t)(subcmd >> 8) };
 8001290:	897b      	ldrh	r3, [r7, #10]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	763b      	strb	r3, [r7, #24]
 8001296:	897b      	ldrh	r3, [r7, #10]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	b29b      	uxth	r3, r3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	767b      	strb	r3, [r7, #25]
    uint8_t buf_len_and_check[2];

    HAL_StatusTypeDef status = WriteBytes(BQ769X2_CMD_SUBCMD_LOWER, buf_subcmd, 2);
 80012a0:	f107 0218 	add.w	r2, r7, #24
 80012a4:	2302      	movs	r3, #2
 80012a6:	213e      	movs	r1, #62	@ 0x3e
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f7ff ff71 	bl	8001190 <_ZN7BQ7695210WriteBytesEhPKhj>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if(status != HAL_OK)
 80012b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <_ZN7BQ7695211SubcmdWriteEtmj+0x42>
        return status;
 80012bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012c0:	e056      	b.n	8001370 <_ZN7BQ7695211SubcmdWriteEtmj+0xf0>

    if (num_bytes > 4){
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d901      	bls.n	80012cc <_ZN7BQ7695211SubcmdWriteEtmj+0x4c>
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e051      	b.n	8001370 <_ZN7BQ7695211SubcmdWriteEtmj+0xf0>
    }

    uint8_t checksum = (uint8_t)(buf_subcmd[0] + buf_subcmd[1]);
 80012cc:	7e3a      	ldrb	r2, [r7, #24]
 80012ce:	7e7b      	ldrb	r3, [r7, #25]
 80012d0:	4413      	add	r3, r2
 80012d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (num_bytes > 0){
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d029      	beq.n	8001330 <_ZN7BQ7695211SubcmdWriteEtmj+0xb0>
        for(int i = 0; i < (int)num_bytes; i++){
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
 80012e0:	e018      	b.n	8001314 <_ZN7BQ7695211SubcmdWriteEtmj+0x94>
            buf_data[i] = (value >> (i * 8) & 0x000000FF);
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	b2d9      	uxtb	r1, r3
 80012ee:	f107 021c 	add.w	r2, r7, #28
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	4413      	add	r3, r2
 80012f6:	460a      	mov	r2, r1
 80012f8:	701a      	strb	r2, [r3, #0]
            checksum = (uint8_t)(checksum + buf_data[i]);
 80012fa:	f107 021c 	add.w	r2, r7, #28
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	4413      	add	r3, r2
 8001302:	781a      	ldrb	r2, [r3, #0]
 8001304:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001308:	4413      	add	r3, r2
 800130a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for(int i = 0; i < (int)num_bytes; i++){
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	3301      	adds	r3, #1
 8001312:	623b      	str	r3, [r7, #32]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	6a3a      	ldr	r2, [r7, #32]
 8001318:	429a      	cmp	r2, r3
 800131a:	dbe2      	blt.n	80012e2 <_ZN7BQ7695211SubcmdWriteEtmj+0x62>
        }
        status = WriteBytes(BQ769X2_SUBCMD_DATA_START, buf_data, num_bytes);
 800131c:	f107 021c 	add.w	r2, r7, #28
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2140      	movs	r1, #64	@ 0x40
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f7ff ff33 	bl	8001190 <_ZN7BQ7695210WriteBytesEhPKhj>
 800132a:	4603      	mov	r3, r0
 800132c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    checksum = ~checksum;
 8001330:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001334:	43db      	mvns	r3, r3
 8001336:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (status != HAL_OK)
 800133a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <_ZN7BQ7695211SubcmdWriteEtmj+0xc8>
    	return status;
 8001342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001346:	e013      	b.n	8001370 <_ZN7BQ7695211SubcmdWriteEtmj+0xf0>

    buf_len_and_check[1] = num_bytes + 4;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3304      	adds	r3, #4
 800134e:	b2db      	uxtb	r3, r3
 8001350:	757b      	strb	r3, [r7, #21]
    buf_len_and_check[0] = checksum;
 8001352:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001356:	753b      	strb	r3, [r7, #20]

    status = WriteBytes(BQ769X2_SUBCMD_DATA_CHECKSUM, buf_len_and_check, 2);
 8001358:	f107 0214 	add.w	r2, r7, #20
 800135c:	2302      	movs	r3, #2
 800135e:	2160      	movs	r1, #96	@ 0x60
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff ff15 	bl	8001190 <_ZN7BQ7695210WriteBytesEhPKhj>
 8001366:	4603      	mov	r3, r0
 8001368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    return status;
 800136c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001370:	4618      	mov	r0, r3
 8001372:	3728      	adds	r7, #40	@ 0x28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_ZN7BQ7695213SubcmdCmdOnlyEt>:

HAL_StatusTypeDef BQ76952::SubcmdCmdOnly(const uint16_t subcmd) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
    return SubcmdWrite(subcmd, 0, 0);
 8001384:	8879      	ldrh	r1, [r7, #2]
 8001386:	2300      	movs	r3, #0
 8001388:	2200      	movs	r2, #0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff78 	bl	8001280 <_ZN7BQ7695211SubcmdWriteEtmj>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <_ZN7BQChipsC1EP7BQ76952S1_>:
#ifndef BQCHIPS_
#define BQCHIPS_

#include <BQChips.hpp>

BQChips::BQChips(BQ76952 *chip1, BQ76952 *chip2){
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4618      	mov	r0, r3
 80013aa:	2340      	movs	r3, #64	@ 0x40
 80013ac:	461a      	mov	r2, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	f00f f8b7 	bl	8010522 <memset>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	pChip1 = chip1;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	649a      	str	r2, [r3, #72]	@ 0x48
	pChip2 = chip2;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_ZN7BQChips12readVoltagesEv>:

// read functions
HAL_StatusTypeDef BQChips::readVoltages(){
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = pChip1 -> ReadVoltages();
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fdeb 	bl	8000fd2 <_ZN7BQ7695212ReadVoltagesEv>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)	{return status;}
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <_ZN7BQChips12readVoltagesEv+0x20>
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	e076      	b.n	80014f8 <_ZN7BQChips12readVoltagesEv+0x10e>

//	status = pChip2 -> ReadVoltages();
//	if (status != HAL_OK)	{return status;}

	for (int i = 0; i < 16; i++){
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e00c      	b.n	800142a <_ZN7BQChips12readVoltagesEv+0x40>
		cellVoltages[i] = pChip1 -> cell_voltages_[i];
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	3204      	adds	r2, #4
 8001418:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 16; i++){
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	ddef      	ble.n	8001410 <_ZN7BQChips12readVoltagesEv+0x26>
	}
	for (int j = 0; j < 16; j++){
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	e00d      	b.n	8001452 <_ZN7BQChips12readVoltagesEv+0x68>
		cellVoltages[j+16] = pChip2 -> cell_voltages_[j];
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	3210      	adds	r2, #16
 800143e:	6939      	ldr	r1, [r7, #16]
 8001440:	3104      	adds	r1, #4
 8001442:	f933 1011 	ldrsh.w	r1, [r3, r1, lsl #1]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int j = 0; j < 16; j++){
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	3301      	adds	r3, #1
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	ddee      	ble.n	8001436 <_ZN7BQChips12readVoltagesEv+0x4c>
	}

	totalVoltage = (pChip1 -> stack_voltage_) + (pChip2 -> stack_voltage_); // check that this shouldn't be pack_voltage
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800145c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001460:	b29a      	uxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 800146a:	b29b      	uxth	r3, r3
 800146c:	4413      	add	r3, r2
 800146e:	b29b      	uxth	r3, r3
 8001470:	b21a      	sxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	averageVoltage = ((pChip1 -> avg_cell_voltage_) + (pChip2 -> avg_cell_voltage_))/2;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800148a:	4413      	add	r3, r2
 800148c:	0fda      	lsrs	r2, r3, #31
 800148e:	4413      	add	r3, r2
 8001490:	105b      	asrs	r3, r3, #1
 8001492:	b21a      	sxth	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	maxVoltage = pChip1 -> high_cell_voltage_;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149e:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	if (pChip2 -> high_cell_voltage_ > maxVoltage){
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ac:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dd06      	ble.n	80014c8 <_ZN7BQChips12readVoltagesEv+0xde>
		maxVoltage = pChip2 -> high_cell_voltage_;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	}

	minVoltage = pChip1 -> low_cell_voltage_;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014cc:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		if (pChip2 -> low_cell_voltage_ < minVoltage){
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 80014e4:	429a      	cmp	r2, r3
 80014e6:	da06      	bge.n	80014f6 <_ZN7BQChips12readVoltagesEv+0x10c>
			minVoltage = pChip2 -> low_cell_voltage_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ec:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		}

	return status;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_ZN7BQChips14getCellVoltageEi>:

//voltages
int16_t BQChips::getCellVoltage(int cellID){
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	return cellVoltages[cellID];
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_ZN7BQChips20getAll32CellVoltagesEPs>:

void BQChips::getAll32CellVoltages(int16_t arrData[]){
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 32; i++){
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	e00b      	b.n	8001546 <_ZN7BQChips20getAll32CellVoltagesEPs+0x28>
		arrData[i] = cellVoltages[i];
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	4413      	add	r3, r2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800153e:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 32; i++){
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b1f      	cmp	r3, #31
 800154a:	ddf0      	ble.n	800152e <_ZN7BQChips20getAll32CellVoltagesEPs+0x10>
	}
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	ed87 0a01 	vstr	s0, [r7, #4]
 8001564:	edd7 7a01 	vldr	s15, [r7, #4]
 8001568:	eef0 7ae7 	vabs.f32	s15, s15
 800156c:	eeb0 0a67 	vmov.f32	s0, s15
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <_Z13CPP_UserSetupv>:

char buffer[512];  // Make sure this is large enough for your data
int pos = 0;


void CPP_UserSetup(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
    // Make sure that timer priorities are configured correctly
    HAL_Delay(10);
 8001582:	200a      	movs	r0, #10
 8001584:	f001 fcfe 	bl	8002f84 <HAL_Delay>

    debug = false;
 8001588:	4b51      	ldr	r3, [pc, #324]	@ (80016d0 <_Z13CPP_UserSetupv+0x154>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]

    //set contactor pins low
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	2101      	movs	r1, #1
 8001592:	4850      	ldr	r0, [pc, #320]	@ (80016d4 <_Z13CPP_UserSetupv+0x158>)
 8001594:	f002 fe2a 	bl	80041ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	2120      	movs	r1, #32
 800159c:	484e      	ldr	r0, [pc, #312]	@ (80016d8 <_Z13CPP_UserSetupv+0x15c>)
 800159e:	f002 fe25 	bl	80041ec <HAL_GPIO_WritePin>
    //set power mux
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2180      	movs	r1, #128	@ 0x80
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015aa:	f002 fe1f 	bl	80041ec <HAL_GPIO_WritePin>

    //toggle BQ reset
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2140      	movs	r1, #64	@ 0x40
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b6:	f002 fe19 	bl	80041ec <HAL_GPIO_WritePin>
    HAL_Delay(300);
 80015ba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015be:	f001 fce1 	bl	8002f84 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2140      	movs	r1, #64	@ 0x40
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ca:	f002 fe0f 	bl	80041ec <HAL_GPIO_WritePin>
    HAL_Delay(200);
 80015ce:	20c8      	movs	r0, #200	@ 0xc8
 80015d0:	f001 fcd8 	bl	8002f84 <HAL_Delay>

    //toggle BQ reset
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2104      	movs	r1, #4
 80015d8:	483f      	ldr	r0, [pc, #252]	@ (80016d8 <_Z13CPP_UserSetupv+0x15c>)
 80015da:	f002 fe07 	bl	80041ec <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015de:	200a      	movs	r0, #10
 80015e0:	f001 fcd0 	bl	8002f84 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2104      	movs	r1, #4
 80015e8:	483b      	ldr	r0, [pc, #236]	@ (80016d8 <_Z13CPP_UserSetupv+0x15c>)
 80015ea:	f002 fdff 	bl	80041ec <HAL_GPIO_WritePin>

	//initalize BMS ICs
	HAL_StatusTypeDef status;
	status = bqChip2.Init(&hi2c4, bqChipI2CAddress);
 80015ee:	2210      	movs	r2, #16
 80015f0:	493a      	ldr	r1, [pc, #232]	@ (80016dc <_Z13CPP_UserSetupv+0x160>)
 80015f2:	483b      	ldr	r0, [pc, #236]	@ (80016e0 <_Z13CPP_UserSetupv+0x164>)
 80015f4:	f7ff fcae 	bl	8000f54 <_ZN7BQ769524InitEP19__I2C_HandleTypeDefh>
 80015f8:	4603      	mov	r3, r0
 80015fa:	70fb      	strb	r3, [r7, #3]
	status = bqChip1.Init(&hi2c3, bqChipI2CAddress);
 80015fc:	2210      	movs	r2, #16
 80015fe:	4939      	ldr	r1, [pc, #228]	@ (80016e4 <_Z13CPP_UserSetupv+0x168>)
 8001600:	4839      	ldr	r0, [pc, #228]	@ (80016e8 <_Z13CPP_UserSetupv+0x16c>)
 8001602:	f7ff fca7 	bl	8000f54 <_ZN7BQ769524InitEP19__I2C_HandleTypeDefh>
 8001606:	4603      	mov	r3, r0
 8001608:	70fb      	strb	r3, [r7, #3]


	//initalize current ADC
	current_adc.begin(&hi2c2, 0x10); // Default address: 0x10
 800160a:	2210      	movs	r2, #16
 800160c:	4937      	ldr	r1, [pc, #220]	@ (80016ec <_Z13CPP_UserSetupv+0x170>)
 800160e:	4838      	ldr	r0, [pc, #224]	@ (80016f0 <_Z13CPP_UserSetupv+0x174>)
 8001610:	f7ff fb05 	bl	8000c1e <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh>
	// Configure operating mode (example: internal oscillator, manual mode)
	current_adc.configureOpMode(OSC_SEL_LOW_POWER, CONV_MODE_MANUAL, CONV_ON_ERR_CONTINUE);
 8001614:	2300      	movs	r3, #0
 8001616:	2200      	movs	r2, #0
 8001618:	2110      	movs	r1, #16
 800161a:	4835      	ldr	r0, [pc, #212]	@ (80016f0 <_Z13CPP_UserSetupv+0x174>)
 800161c:	f7ff fb57 	bl	8000cce <_ZN7ADS713815configureOpModeE16ADS7138__OSC_SEL18ADS7138__CONV_MODE20ADS7138__CONV_ON_ERR>
	// Use manual channel selection
	current_adc.configureSequenceMode(SEQ_MODE_MANUAL, SEQ_START_END);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	4832      	ldr	r0, [pc, #200]	@ (80016f0 <_Z13CPP_UserSetupv+0x174>)
 8001626:	f7ff fb7d 	bl	8000d24 <_ZN7ADS713821configureSequenceModeE17ADS7138__SEQ_MODE18ADS7138__SEQ_START>
	// Set oversampling to 1 (no averaging)
	current_adc.configureOsr(OSR_1);
 800162a:	2100      	movs	r1, #0
 800162c:	4830      	ldr	r0, [pc, #192]	@ (80016f0 <_Z13CPP_UserSetupv+0x174>)
 800162e:	f7ff fb95 	bl	8000d5c <_ZN7ADS713812configureOsrE12ADS7138__OSR>
	// Set reference voltage (e.g., 3300 mV if powered from 3.3 V)
	current_adc.setReferenceVoltage(3300);
 8001632:	f640 41e4 	movw	r1, #3300	@ 0xce4
 8001636:	482e      	ldr	r0, [pc, #184]	@ (80016f0 <_Z13CPP_UserSetupv+0x174>)
 8001638:	f7ff fb15 	bl	8000c66 <_ZN7ADS713819setReferenceVoltageEm>

    //temp sensor inits
    for (int i = 0; i < 4; i++) {
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	e031      	b.n	80016a6 <_Z13CPP_UserSetupv+0x12a>
    	temp_adcs[i].begin(&hi2c2, 0x14+i);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	4a2b      	ldr	r2, [pc, #172]	@ (80016f4 <_Z13CPP_UserSetupv+0x178>)
 8001648:	1898      	adds	r0, r3, r2
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	3314      	adds	r3, #20
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	4925      	ldr	r1, [pc, #148]	@ (80016ec <_Z13CPP_UserSetupv+0x170>)
 8001656:	f7ff fae2 	bl	8000c1e <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh>
    	temp_adcs[i].configureOpMode(OSC_SEL_LOW_POWER, CONV_MODE_MANUAL, CONV_ON_ERR_CONTINUE);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	4a25      	ldr	r2, [pc, #148]	@ (80016f4 <_Z13CPP_UserSetupv+0x178>)
 8001660:	1898      	adds	r0, r3, r2
 8001662:	2300      	movs	r3, #0
 8001664:	2200      	movs	r2, #0
 8001666:	2110      	movs	r1, #16
 8001668:	f7ff fb31 	bl	8000cce <_ZN7ADS713815configureOpModeE16ADS7138__OSC_SEL18ADS7138__CONV_MODE20ADS7138__CONV_ON_ERR>
    	temp_adcs[i].configureSequenceMode(SEQ_MODE_MANUAL, SEQ_START_END);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	4a20      	ldr	r2, [pc, #128]	@ (80016f4 <_Z13CPP_UserSetupv+0x178>)
 8001672:	4413      	add	r3, r2
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fb53 	bl	8000d24 <_ZN7ADS713821configureSequenceModeE17ADS7138__SEQ_MODE18ADS7138__SEQ_START>
    	temp_adcs[i].configureOsr(OSR_1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	4a1c      	ldr	r2, [pc, #112]	@ (80016f4 <_Z13CPP_UserSetupv+0x178>)
 8001684:	4413      	add	r3, r2
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fb67 	bl	8000d5c <_ZN7ADS713812configureOsrE12ADS7138__OSR>
    	temp_adcs[i].setReferenceVoltage(3300);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4a18      	ldr	r2, [pc, #96]	@ (80016f4 <_Z13CPP_UserSetupv+0x178>)
 8001694:	4413      	add	r3, r2
 8001696:	f640 41e4 	movw	r1, #3300	@ 0xce4
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fae3 	bl	8000c66 <_ZN7ADS713819setReferenceVoltageEm>
    for (int i = 0; i < 4; i++) {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3301      	adds	r3, #1
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	ddca      	ble.n	8001642 <_Z13CPP_UserSetupv+0xc6>
    }

    HAL_TIM_Base_Start(&htim2);
 80016ac:	4812      	ldr	r0, [pc, #72]	@ (80016f8 <_Z13CPP_UserSetupv+0x17c>)
 80016ae:	f006 fa53 	bl	8007b58 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim3);
 80016b2:	4812      	ldr	r0, [pc, #72]	@ (80016fc <_Z13CPP_UserSetupv+0x180>)
 80016b4:	f006 fa50 	bl	8007b58 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80016b8:	2100      	movs	r1, #0
 80016ba:	480f      	ldr	r0, [pc, #60]	@ (80016f8 <_Z13CPP_UserSetupv+0x17c>)
 80016bc:	f006 fb7c 	bl	8007db8 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016c0:	2100      	movs	r1, #0
 80016c2:	480e      	ldr	r0, [pc, #56]	@ (80016fc <_Z13CPP_UserSetupv+0x180>)
 80016c4:	f006 fb78 	bl	8007db8 <HAL_TIM_PWM_Start>




}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000320 	.word	0x20000320
 80016d4:	48000400 	.word	0x48000400
 80016d8:	48000800 	.word	0x48000800
 80016dc:	200006cc 	.word	0x200006cc
 80016e0:	2000050c 	.word	0x2000050c
 80016e4:	20000678 	.word	0x20000678
 80016e8:	2000049c 	.word	0x2000049c
 80016ec:	20000624 	.word	0x20000624
 80016f0:	20000328 	.word	0x20000328
 80016f4:	20000338 	.word	0x20000338
 80016f8:	20000720 	.word	0x20000720
 80016fc:	2000076c 	.word	0x2000076c

08001700 <_Z16StartDefaultTaskPv>:


void StartDefaultTask(void *argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001708:	2102      	movs	r1, #2
 800170a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170e:	f002 fd85 	bl	800421c <HAL_GPIO_TogglePin>
    osDelay(500);
 8001712:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001716:	f00a fe67 	bl	800c3e8 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800171a:	bf00      	nop
 800171c:	e7f4      	b.n	8001708 <_Z16StartDefaultTaskPv+0x8>
	...

08001720 <_Z11StartTask02Pv>:
  /* USER CODE END 5 */
}

// CURRENT MONITORING TASK
void StartTask02(void *argument)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	float low;

	for (;;)
	{

		if(hi2c2.State == HAL_I2C_STATE_READY){
 8001728:	4b2c      	ldr	r3, [pc, #176]	@ (80017dc <_Z11StartTask02Pv+0xbc>)
 800172a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b20      	cmp	r3, #32
 8001732:	bf0c      	ite	eq
 8001734:	2301      	moveq	r3, #1
 8001736:	2300      	movne	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d043      	beq.n	80017c6 <_Z11StartTask02Pv+0xa6>

			rawData = current_adc.readChannelVoltage((ADS7138__MANUAL_CHID)(MANUAL_CHID_AIN0));
 800173e:	2100      	movs	r1, #0
 8001740:	4827      	ldr	r0, [pc, #156]	@ (80017e0 <_Z11StartTask02Pv+0xc0>)
 8001742:	f7ff fb85 	bl	8000e50 <_ZN7ADS713818readChannelVoltageE20ADS7138__MANUAL_CHID>
 8001746:	60b8      	str	r0, [r7, #8]
			low  = ADCToCurrentL(rawData);
 8001748:	68b8      	ldr	r0, [r7, #8]
 800174a:	f000 fb35 	bl	8001db8 <_Z13ADCToCurrentLm>
 800174e:	ed87 0a03 	vstr	s0, [r7, #12]

			if(abs(low) == low){
 8001752:	ed97 0a03 	vldr	s0, [r7, #12]
 8001756:	f7ff ff00 	bl	800155a <_ZSt3absf>
 800175a:	eeb0 7a40 	vmov.f32	s14, s0
 800175e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001762:	eef4 7a47 	vcmp.f32	s15, s14
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	bf0c      	ite	eq
 800176c:	2301      	moveq	r3, #1
 800176e:	2300      	movne	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00f      	beq.n	8001796 <_Z11StartTask02Pv+0x76>
				currentDirrection = discharging;
 8001776:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <_Z11StartTask02Pv+0xc4>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
				if(low > 26){
 800177c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001780:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8001784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178c:	dd1b      	ble.n	80017c6 <_Z11StartTask02Pv+0xa6>
					faultCondition = overCurrentCharge;
 800178e:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <_Z11StartTask02Pv+0xc8>)
 8001790:	2205      	movs	r2, #5
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	e017      	b.n	80017c6 <_Z11StartTask02Pv+0xa6>

				}
			}else{
				currentDirrection = charging;
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <_Z11StartTask02Pv+0xc4>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
				if(abs(low) > 60){
 800179c:	ed97 0a03 	vldr	s0, [r7, #12]
 80017a0:	f7ff fedb 	bl	800155a <_ZSt3absf>
 80017a4:	eef0 7a40 	vmov.f32	s15, s0
 80017a8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80017ec <_Z11StartTask02Pv+0xcc>
 80017ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	bfcc      	ite	gt
 80017b6:	2301      	movgt	r3, #1
 80017b8:	2300      	movle	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <_Z11StartTask02Pv+0xa6>
					faultCondition = overCurrentDischarge;
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <_Z11StartTask02Pv+0xc8>)
 80017c2:	2206      	movs	r2, #6
 80017c4:	701a      	strb	r2, [r3, #0]

				}

			}
		}
		BMS.lowCurrent_A = low;
 80017c6:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <_Z11StartTask02Pv+0xd0>)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6213      	str	r3, [r2, #32]
		fb.value = low;
 80017cc:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <_Z11StartTask02Pv+0xd4>)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6013      	str	r3, [r2, #0]


		osDelay(50);
 80017d2:	2032      	movs	r0, #50	@ 0x32
 80017d4:	f00a fe08 	bl	800c3e8 <osDelay>
		if(hi2c2.State == HAL_I2C_STATE_READY){
 80017d8:	e7a6      	b.n	8001728 <_Z11StartTask02Pv+0x8>
 80017da:	bf00      	nop
 80017dc:	20000624 	.word	0x20000624
 80017e0:	20000328 	.word	0x20000328
 80017e4:	20000323 	.word	0x20000323
 80017e8:	20000322 	.word	0x20000322
 80017ec:	42700000 	.word	0x42700000
 80017f0:	20000378 	.word	0x20000378
 80017f4:	200005cc 	.word	0x200005cc

080017f8 <_Z11StartTask03Pv>:

}

// VOLTAGE MONITORING TASK
void StartTask03(void *argument)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b096      	sub	sp, #88	@ 0x58
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]


	int16_t cellVoltages[32] = {0};
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2240      	movs	r2, #64	@ 0x40
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f00e fe8a 	bl	8010522 <memset>

	uint16_t highestCell = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	uint16_t lowestCell = 10000;
 8001814:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001818:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

	BMS.highVoltage_index = 0;
 800181c:	4b41      	ldr	r3, [pc, #260]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 800181e:	2200      	movs	r2, #0
 8001820:	731a      	strb	r2, [r3, #12]
	BMS.lowVoltage_index = 0;
 8001822:	4b40      	ldr	r3, [pc, #256]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 8001824:	2200      	movs	r2, #0
 8001826:	735a      	strb	r2, [r3, #13]

	uint32_t total = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	653b      	str	r3, [r7, #80]	@ 0x50

	for(;;)
	{

	  total = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	653b      	str	r3, [r7, #80]	@ 0x50

	  bqChips.readVoltages();
 8001830:	483d      	ldr	r0, [pc, #244]	@ (8001928 <_Z11StartTask03Pv+0x130>)
 8001832:	f7ff fdda 	bl	80013ea <_ZN7BQChips12readVoltagesEv>
	  bqChips.getAll32CellVoltages(cellVoltages);
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	4619      	mov	r1, r3
 800183c:	483a      	ldr	r0, [pc, #232]	@ (8001928 <_Z11StartTask03Pv+0x130>)
 800183e:	f7ff fe6e 	bl	800151e <_ZN7BQChips20getAll32CellVoltagesEPs>

	  for(int i = 0; i < 29; i++){
 8001842:	2300      	movs	r3, #0
 8001844:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001846:	e03e      	b.n	80018c6 <_Z11StartTask03Pv+0xce>
		  BMS.cellVoltages[i] = bqChips.getCellVoltage(i);
 8001848:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800184a:	4837      	ldr	r0, [pc, #220]	@ (8001928 <_Z11StartTask03Pv+0x130>)
 800184c:	f7ff fe58 	bl	8001500 <_ZN7BQChips14getCellVoltageEi>
 8001850:	4603      	mov	r3, r0
 8001852:	b299      	uxth	r1, r3
 8001854:	4a33      	ldr	r2, [pc, #204]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 8001856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001858:	3314      	adds	r3, #20
 800185a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  if(BMS.cellVoltages[i] > highestCell){
 800185e:	4a31      	ldr	r2, [pc, #196]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 8001860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001862:	3314      	adds	r3, #20
 8001864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001868:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800186c:	429a      	cmp	r2, r3
 800186e:	d20a      	bcs.n	8001886 <_Z11StartTask03Pv+0x8e>
			  highestCell = BMS.cellVoltages[i];
 8001870:	4a2c      	ldr	r2, [pc, #176]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 8001872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001874:	3314      	adds	r3, #20
 8001876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800187a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
			  BMS.highVoltage_index = i;
 800187e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b28      	ldr	r3, [pc, #160]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 8001884:	731a      	strb	r2, [r3, #12]
		  }
		  if(BMS.cellVoltages[i] < lowestCell){
 8001886:	4a27      	ldr	r2, [pc, #156]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 8001888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800188a:	3314      	adds	r3, #20
 800188c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001890:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8001894:	429a      	cmp	r2, r3
 8001896:	d90a      	bls.n	80018ae <_Z11StartTask03Pv+0xb6>
			  lowestCell = BMS.cellVoltages[i];
 8001898:	4a22      	ldr	r2, [pc, #136]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 800189a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800189c:	3314      	adds	r3, #20
 800189e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018a2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
			  BMS.lowVoltage_index = i;
 80018a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 80018ac:	735a      	strb	r2, [r3, #13]
		  }
		  total += BMS.cellVoltages[i];
 80018ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 80018b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018b2:	3314      	adds	r3, #20
 80018b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018b8:	461a      	mov	r2, r3
 80018ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018bc:	4413      	add	r3, r2
 80018be:	653b      	str	r3, [r7, #80]	@ 0x50
	  for(int i = 0; i < 29; i++){
 80018c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018c2:	3301      	adds	r3, #1
 80018c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018c8:	2b1c      	cmp	r3, #28
 80018ca:	ddbd      	ble.n	8001848 <_Z11StartTask03Pv+0x50>
	  }

	  BMS.totalVoltage_mV = total;
 80018cc:	4a15      	ldr	r2, [pc, #84]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 80018ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018d0:	6093      	str	r3, [r2, #8]
	  BMS.avgVoltage_mV = (uint16_t)(total/29);
 80018d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018d4:	4a15      	ldr	r2, [pc, #84]	@ (800192c <_Z11StartTask03Pv+0x134>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	b29a      	uxth	r2, r3
 80018de:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 80018e0:	809a      	strh	r2, [r3, #4]
	  BMS.lowVoltage_mV = lowestCell;
 80018e2:	4a10      	ldr	r2, [pc, #64]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 80018e4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80018e8:	8053      	strh	r3, [r2, #2]
	  BMS.highVoltage_mV = highestCell;
 80018ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001924 <_Z11StartTask03Pv+0x12c>)
 80018ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80018f0:	8013      	strh	r3, [r2, #0]

	  numBytes.value = total;
 80018f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001930 <_Z11StartTask03Pv+0x138>)
 80018f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018f6:	6013      	str	r3, [r2, #0]

	  if(lowestCell < 2500){
 80018f8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80018fc:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001900:	4293      	cmp	r3, r2
 8001902:	d802      	bhi.n	800190a <_Z11StartTask03Pv+0x112>
		  faultCondition = lowCellVoltage;
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <_Z11StartTask03Pv+0x13c>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]

	  }
	  if(highestCell > 4200){
 800190a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800190e:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001912:	4293      	cmp	r3, r2
 8001914:	d902      	bls.n	800191c <_Z11StartTask03Pv+0x124>
		  faultCondition = highCellVoltage;
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <_Z11StartTask03Pv+0x13c>)
 8001918:	2202      	movs	r2, #2
 800191a:	701a      	strb	r2, [r3, #0]

	  }

	  osDelay(100);
 800191c:	2064      	movs	r0, #100	@ 0x64
 800191e:	f00a fd63 	bl	800c3e8 <osDelay>
  }
 8001922:	e783      	b.n	800182c <_Z11StartTask03Pv+0x34>
 8001924:	20000378 	.word	0x20000378
 8001928:	2000057c 	.word	0x2000057c
 800192c:	8d3dcb09 	.word	0x8d3dcb09
 8001930:	200005d0 	.word	0x200005d0
 8001934:	20000322 	.word	0x20000322

08001938 <_Z11StartTask04Pv>:

}

// TEMPERATURE MONITORING TASK
void StartTask04(void *argument)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b0a9      	sub	sp, #164	@ 0xa4
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

	uint32_t rawData[32];

	float highestCell = 0.0;
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	float lowestCell = 1000.0;
 8001948:	4b8c      	ldr	r3, [pc, #560]	@ (8001b7c <_Z11StartTask04Pv+0x244>)
 800194a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	BMS.highTemp_index = 0;
 800194e:	4b8c      	ldr	r3, [pc, #560]	@ (8001b80 <_Z11StartTask04Pv+0x248>)
 8001950:	2200      	movs	r2, #0
 8001952:	839a      	strh	r2, [r3, #28]
	BMS.lowTemp_index = 0;
 8001954:	4b8a      	ldr	r3, [pc, #552]	@ (8001b80 <_Z11StartTask04Pv+0x248>)
 8001956:	2200      	movs	r2, #0
 8001958:	83da      	strh	r2, [r3, #30]

	float total = 0;
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	for(;;)
	{
		total = 0;
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		highestCell = 0.0;
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		lowestCell = 1000.0;
 8001972:	4b82      	ldr	r3, [pc, #520]	@ (8001b7c <_Z11StartTask04Pv+0x244>)
 8001974:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		for (int i = 0; i < 4; i++){
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800197e:	e0c1      	b.n	8001b04 <_Z11StartTask04Pv+0x1cc>
		//cycle throught each ADC
			for (uint8_t ch = 0; ch < 8; ch++) {
 8001980:	2300      	movs	r3, #0
 8001982:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001986:	e0b3      	b.n	8001af0 <_Z11StartTask04Pv+0x1b8>
				  //cycle through each channel
				  if(hi2c2.State == HAL_I2C_STATE_READY){
 8001988:	4b7e      	ldr	r3, [pc, #504]	@ (8001b84 <_Z11StartTask04Pv+0x24c>)
 800198a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b20      	cmp	r3, #32
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80a3 	beq.w	8001ae6 <_Z11StartTask04Pv+0x1ae>

					  rawData[i*8+ch] = temp_adcs[i].readChannelVoltage((ADS7138__MANUAL_CHID)(MANUAL_CHID_AIN0 + ch));
 80019a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	4a78      	ldr	r2, [pc, #480]	@ (8001b88 <_Z11StartTask04Pv+0x250>)
 80019a8:	1898      	adds	r0, r3, r2
 80019aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019ae:	00da      	lsls	r2, r3, #3
 80019b0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80019b4:	18d4      	adds	r4, r2, r3
 80019b6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80019ba:	4619      	mov	r1, r3
 80019bc:	f7ff fa48 	bl	8000e50 <_ZN7ADS713818readChannelVoltageE20ADS7138__MANUAL_CHID>
 80019c0:	4602      	mov	r2, r0
 80019c2:	00a3      	lsls	r3, r4, #2
 80019c4:	33a0      	adds	r3, #160	@ 0xa0
 80019c6:	443b      	add	r3, r7
 80019c8:	f843 2c94 	str.w	r2, [r3, #-148]
					  BMS.allTempatues[i*8 + ch] = ADCToTemp(rawData[i*8 + ch]);
 80019cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019d0:	00da      	lsls	r2, r3, #3
 80019d2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	33a0      	adds	r3, #160	@ 0xa0
 80019dc:	443b      	add	r3, r7
 80019de:	f853 1c94 	ldr.w	r1, [r3, #-148]
 80019e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019e6:	00da      	lsls	r2, r3, #3
 80019e8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80019ec:	18d4      	adds	r4, r2, r3
 80019ee:	4608      	mov	r0, r1
 80019f0:	f000 f9fe 	bl	8001df0 <_Z9ADCToTempm>
 80019f4:	eef0 7a40 	vmov.f32	s15, s0
 80019f8:	4a61      	ldr	r2, [pc, #388]	@ (8001b80 <_Z11StartTask04Pv+0x248>)
 80019fa:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3304      	adds	r3, #4
 8001a04:	edc3 7a00 	vstr	s15, [r3]

					  if(BMS.allTempatues[i*8 + ch] > highestCell){
 8001a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a0c:	00da      	lsls	r2, r3, #3
 8001a0e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001a12:	4413      	add	r3, r2
 8001a14:	4a5a      	ldr	r2, [pc, #360]	@ (8001b80 <_Z11StartTask04Pv+0x248>)
 8001a16:	3328      	adds	r3, #40	@ 0x28
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8001a26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	d519      	bpl.n	8001a64 <_Z11StartTask04Pv+0x12c>
						  highestCell = BMS.allTempatues[i*8 + ch];
 8001a30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a34:	00da      	lsls	r2, r3, #3
 8001a36:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a50      	ldr	r2, [pc, #320]	@ (8001b80 <_Z11StartTask04Pv+0x248>)
 8001a3e:	3328      	adds	r3, #40	@ 0x28
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	3304      	adds	r3, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						  BMS.highTemp_index = (i*8 + ch);
 8001a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	4b47      	ldr	r3, [pc, #284]	@ (8001b80 <_Z11StartTask04Pv+0x248>)
 8001a62:	839a      	strh	r2, [r3, #28]
					  }
					  if(BMS.allTempatues[i*8 + ch] < lowestCell){
 8001a64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a68:	00da      	lsls	r2, r3, #3
 8001a6a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a43      	ldr	r2, [pc, #268]	@ (8001b80 <_Z11StartTask04Pv+0x248>)
 8001a72:	3328      	adds	r3, #40	@ 0x28
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	3304      	adds	r3, #4
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8a:	dd19      	ble.n	8001ac0 <_Z11StartTask04Pv+0x188>
						  lowestCell = BMS.allTempatues[i*8 + ch];
 8001a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a90:	00da      	lsls	r2, r3, #3
 8001a92:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001a96:	4413      	add	r3, r2
 8001a98:	4a39      	ldr	r2, [pc, #228]	@ (8001b80 <_Z11StartTask04Pv+0x248>)
 8001a9a:	3328      	adds	r3, #40	@ 0x28
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						  BMS.lowTemp_index = (i*8 + ch);
 8001aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b30      	ldr	r3, [pc, #192]	@ (8001b80 <_Z11StartTask04Pv+0x248>)
 8001abe:	83da      	strh	r2, [r3, #30]
					  }
					  total += BMS.allTempatues[i*8 + ch];
 8001ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ac4:	00da      	lsls	r2, r3, #3
 8001ac6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001aca:	4413      	add	r3, r2
 8001acc:	4a2c      	ldr	r2, [pc, #176]	@ (8001b80 <_Z11StartTask04Pv+0x248>)
 8001ace:	3328      	adds	r3, #40	@ 0x28
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae2:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
			for (uint8_t ch = 0; ch < 8; ch++) {
 8001ae6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001aea:	3301      	adds	r3, #1
 8001aec:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8001af0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001af4:	2b07      	cmp	r3, #7
 8001af6:	f67f af47 	bls.w	8001988 <_Z11StartTask04Pv+0x50>
		for (int i = 0; i < 4; i++){
 8001afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001afe:	3301      	adds	r3, #1
 8001b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	f77f af39 	ble.w	8001980 <_Z11StartTask04Pv+0x48>
				  }
			}
		}
		BMS.avgTemp = total/29;
 8001b0e:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001b12:	eef3 6a0d 	vmov.f32	s13, #61	@ 0x41e80000  29.0
 8001b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <_Z11StartTask04Pv+0x248>)
 8001b1c:	edc3 7a06 	vstr	s15, [r3, #24]
		BMS.lowTemp = lowestCell;
 8001b20:	4a17      	ldr	r2, [pc, #92]	@ (8001b80 <_Z11StartTask04Pv+0x248>)
 8001b22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b26:	6153      	str	r3, [r2, #20]
		BMS.highTemp = highestCell;
 8001b28:	4a15      	ldr	r2, [pc, #84]	@ (8001b80 <_Z11StartTask04Pv+0x248>)
 8001b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b2e:	6113      	str	r3, [r2, #16]

		if(currentDirrection == charging){
 8001b30:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <_Z11StartTask04Pv+0x254>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d10b      	bne.n	8001b50 <_Z11StartTask04Pv+0x218>
			if(highestCell > 45){
 8001b38:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001b3c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001b90 <_Z11StartTask04Pv+0x258>
 8001b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	dd02      	ble.n	8001b50 <_Z11StartTask04Pv+0x218>
			  faultCondition = overTempCharge;
 8001b4a:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <_Z11StartTask04Pv+0x25c>)
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	701a      	strb	r2, [r3, #0]

			}
		}
		if(currentDirrection == discharging){
 8001b50:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <_Z11StartTask04Pv+0x254>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10b      	bne.n	8001b70 <_Z11StartTask04Pv+0x238>
			if(highestCell > 60){
 8001b58:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001b5c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001b98 <_Z11StartTask04Pv+0x260>
 8001b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	dd02      	ble.n	8001b70 <_Z11StartTask04Pv+0x238>
			  faultCondition = overTempDischarge;
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <_Z11StartTask04Pv+0x25c>)
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	701a      	strb	r2, [r3, #0]

			}
		}

		osDelay(1000);
 8001b70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b74:	f00a fc38 	bl	800c3e8 <osDelay>
	}
 8001b78:	e6f3      	b.n	8001962 <_Z11StartTask04Pv+0x2a>
 8001b7a:	bf00      	nop
 8001b7c:	447a0000 	.word	0x447a0000
 8001b80:	20000378 	.word	0x20000378
 8001b84:	20000624 	.word	0x20000624
 8001b88:	20000338 	.word	0x20000338
 8001b8c:	20000323 	.word	0x20000323
 8001b90:	42340000 	.word	0x42340000
 8001b94:	20000322 	.word	0x20000322
 8001b98:	42700000 	.word	0x42700000

08001b9c <_Z11StartTask05Pv>:

}


void StartTask05(void *argument)
{
 8001b9c:	b5b0      	push	{r4, r5, r7, lr}
 8001b9e:	b090      	sub	sp, #64	@ 0x40
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
// CAN DATA TRANSMISSION TASK

  CAN_TxHeaderTypeDef TxHeader;
  uint8_t TxData[8] = { 0 };
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
  uint32_t TxMailbox = { 0 };
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  int HAL_CAN_BUSY = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t messages_sent = 0;
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  for(;;)
  {



	  TxData[0] = fb.bytes[0];
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <_Z11StartTask05Pv+0xa0>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	733b      	strb	r3, [r7, #12]
	  TxData[1] = fb.bytes[1];
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <_Z11StartTask05Pv+0xa0>)
 8001bc8:	785b      	ldrb	r3, [r3, #1]
 8001bca:	737b      	strb	r3, [r7, #13]
	  TxData[2] = fb.bytes[2];
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <_Z11StartTask05Pv+0xa0>)
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	73bb      	strb	r3, [r7, #14]
	  TxData[3] = fb.bytes[3];
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <_Z11StartTask05Pv+0xa0>)
 8001bd4:	78db      	ldrb	r3, [r3, #3]
 8001bd6:	73fb      	strb	r3, [r7, #15]

	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001bd8:	bf00      	nop
 8001bda:	4819      	ldr	r0, [pc, #100]	@ (8001c40 <_Z11StartTask05Pv+0xa4>)
 8001bdc:	f001 fce6 	bl	80035ac <HAL_CAN_GetTxMailboxesFreeLevel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bf0c      	ite	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	2300      	movne	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f4      	bne.n	8001bda <_Z11StartTask05Pv+0x3e>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	f107 020c 	add.w	r2, r7, #12
 8001bf8:	f107 0114 	add.w	r1, r7, #20
 8001bfc:	4810      	ldr	r0, [pc, #64]	@ (8001c40 <_Z11StartTask05Pv+0xa4>)
 8001bfe:	f001 fc05 	bl	800340c <HAL_CAN_AddTxMessage>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  messages_sent++;
 8001c08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c0c:	1c54      	adds	r4, r2, #1
 8001c0e:	f143 0500 	adc.w	r5, r3, #0
 8001c12:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	  if (status == HAL_ERROR)
 8001c16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <_Z11StartTask05Pv+0x88>
	  {
		  Error_Handler();
 8001c1e:	f000 fd6f 	bl	8002700 <Error_Handler>
 8001c22:	e006      	b.n	8001c32 <_Z11StartTask05Pv+0x96>
	  }
	  else if (status == HAL_BUSY)
 8001c24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d102      	bne.n	8001c32 <_Z11StartTask05Pv+0x96>
	  {
	  HAL_CAN_BUSY++;
 8001c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c2e:	3301      	adds	r3, #1
 8001c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  }

	  //send_bms_data(BMS.cellVoltages, BMS.allTempatues, BMS.lowCurrent_A);


    osDelay(100);
 8001c32:	2064      	movs	r0, #100	@ 0x64
 8001c34:	f00a fbd8 	bl	800c3e8 <osDelay>
  }
 8001c38:	e7c2      	b.n	8001bc0 <_Z11StartTask05Pv+0x24>
 8001c3a:	bf00      	nop
 8001c3c:	200005cc 	.word	0x200005cc
 8001c40:	200005d4 	.word	0x200005d4

08001c44 <_Z11StartTask06Pv>:

  /* USER CODE END StartTask05 */
}

void StartTask06(void *argument)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  //control contactors
	  if((debug == true || faultCondition == noFault) && shutdown == false){
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d08 <_Z11StartTask06Pv+0xc4>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d003      	beq.n	8001c5c <_Z11StartTask06Pv+0x18>
 8001c54:	4b2d      	ldr	r3, [pc, #180]	@ (8001d0c <_Z11StartTask06Pv+0xc8>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d112      	bne.n	8001c82 <_Z11StartTask06Pv+0x3e>
 8001c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d10 <_Z11StartTask06Pv+0xcc>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10e      	bne.n	8001c82 <_Z11StartTask06Pv+0x3e>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2101      	movs	r1, #1
 8001c68:	482a      	ldr	r0, [pc, #168]	@ (8001d14 <_Z11StartTask06Pv+0xd0>)
 8001c6a:	f002 fabf 	bl	80041ec <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001c6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c72:	f001 f987 	bl	8002f84 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2120      	movs	r1, #32
 8001c7a:	4827      	ldr	r0, [pc, #156]	@ (8001d18 <_Z11StartTask06Pv+0xd4>)
 8001c7c:	f002 fab6 	bl	80041ec <HAL_GPIO_WritePin>
 8001c80:	e00d      	b.n	8001c9e <_Z11StartTask06Pv+0x5a>
	  }else{

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001c82:	2201      	movs	r2, #1
 8001c84:	2101      	movs	r1, #1
 8001c86:	4823      	ldr	r0, [pc, #140]	@ (8001d14 <_Z11StartTask06Pv+0xd0>)
 8001c88:	f002 fab0 	bl	80041ec <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001c8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c90:	f001 f978 	bl	8002f84 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	2120      	movs	r1, #32
 8001c98:	481f      	ldr	r0, [pc, #124]	@ (8001d18 <_Z11StartTask06Pv+0xd4>)
 8001c9a:	f002 faa7 	bl	80041ec <HAL_GPIO_WritePin>
	  }

	  //set fan speeds
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, fanSpeedPrecentage/2.5);
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d1c <_Z11StartTask06Pv+0xd8>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fc4e 	bl	8000544 <__aeabi_i2d>
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <_Z11StartTask06Pv+0xdc>)
 8001cae:	f7fe fddd 	bl	800086c <__aeabi_ddiv>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	491b      	ldr	r1, [pc, #108]	@ (8001d24 <_Z11StartTask06Pv+0xe0>)
 8001cb8:	680c      	ldr	r4, [r1, #0]
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7fe ff83 	bl	8000bc8 <__aeabi_d2uiz>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6363      	str	r3, [r4, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, fanSpeedPrecentage/2.5);
 8001cc6:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <_Z11StartTask06Pv+0xd8>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc3a 	bl	8000544 <__aeabi_i2d>
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <_Z11StartTask06Pv+0xdc>)
 8001cd6:	f7fe fdc9 	bl	800086c <__aeabi_ddiv>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4912      	ldr	r1, [pc, #72]	@ (8001d28 <_Z11StartTask06Pv+0xe4>)
 8001ce0:	680c      	ldr	r4, [r1, #0]
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7fe ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8001cea:	4603      	mov	r3, r0
 8001cec:	6363      	str	r3, [r4, #52]	@ 0x34

	  send_bms_data(BMS.cellVoltages, BMS.allTempatues, BMS.lowCurrent_A);
 8001cee:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <_Z11StartTask06Pv+0xe8>)
 8001cf0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf8:	490d      	ldr	r1, [pc, #52]	@ (8001d30 <_Z11StartTask06Pv+0xec>)
 8001cfa:	480e      	ldr	r0, [pc, #56]	@ (8001d34 <_Z11StartTask06Pv+0xf0>)
 8001cfc:	f000 f894 	bl	8001e28 <_Z13send_bms_dataPtPff>



      osDelay(100);
 8001d00:	2064      	movs	r0, #100	@ 0x64
 8001d02:	f00a fb71 	bl	800c3e8 <osDelay>
	  if((debug == true || faultCondition == noFault) && shutdown == false){
 8001d06:	e7a1      	b.n	8001c4c <_Z11StartTask06Pv+0x8>
 8001d08:	20000320 	.word	0x20000320
 8001d0c:	20000322 	.word	0x20000322
 8001d10:	20000321 	.word	0x20000321
 8001d14:	48000400 	.word	0x48000400
 8001d18:	48000800 	.word	0x48000800
 8001d1c:	20000324 	.word	0x20000324
 8001d20:	40040000 	.word	0x40040000
 8001d24:	20000720 	.word	0x20000720
 8001d28:	2000076c 	.word	0x2000076c
 8001d2c:	20000378 	.word	0x20000378
 8001d30:	2000041c 	.word	0x2000041c
 8001d34:	200003a0 	.word	0x200003a0

08001d38 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END StartTask06 */
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001d40:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001d42:	4a1a      	ldr	r2, [pc, #104]	@ (8001dac <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001d44:	2100      	movs	r1, #0
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f001 fc65 	bl	8003616 <HAL_CAN_GetRxMessage>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
  {
    Error_Handler();
 8001d5c:	f000 fcd0 	bl	8002700 <Error_Handler>
  }

  if (RxHeader.StdId == 0x7FF){
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d118      	bne.n	8001d9e <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
	  if(RxData[0] == 1){
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d114      	bne.n	8001d9e <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
		  //byte 1
		  //ignition switch
		  if((RxData[1] & 0x80) != 0x00){
 8001d74:	4b0c      	ldr	r3, [pc, #48]	@ (8001da8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	da02      	bge.n	8001d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			  shutdown = true;
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x08) != 0x00){
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
			  debug = true;
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
		  }


	  }
  }
}
 8001d96:	e002      	b.n	8001d9e <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
			  debug = false;
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000318 	.word	0x20000318
 8001dac:	200002fc 	.word	0x200002fc
 8001db0:	20000321 	.word	0x20000321
 8001db4:	20000320 	.word	0x20000320

08001db8 <_Z13ADCToCurrentLm>:

float ADCToCurrentL(uint32_t adc_val) {
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

    // Constant offset for linear estimator
    static constexpr float b = -62.87;

    // Convert ADC value to current
    return (float)adc_val * m + b;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dca:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001de8 <_Z13ADCToCurrentLm+0x30>
 8001dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001dec <_Z13ADCToCurrentLm+0x34>
 8001dd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8001dda:	eeb0 0a67 	vmov.f32	s0, s15
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	3af84018 	.word	0x3af84018
 8001dec:	427b7ae1 	.word	0x427b7ae1

08001df0 <_Z9ADCToTempm>:
	float x = ((float)adc_val) * (3.3/4096.0);

	return (thermCoeffA * x*x) + (thermCoeffB * x) + thermCoeffC;
}

float ADCToTemp(uint32_t adc_val) {
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

    // Constant offset for linear estimator
    static constexpr float b = 19000.0 / 1180;

    // Convert ADC value to temperature
    return (float)adc_val * m + b;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e02:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001e20 <_Z9ADCToTempm+0x30>
 8001e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001e24 <_Z9ADCToTempm+0x34>
 8001e0e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	3a5e27eb 	.word	0x3a5e27eb
 8001e24:	4180d045 	.word	0x4180d045

08001e28 <_Z13send_bms_dataPtPff>:
typedef struct {
    uint16_t voltages[32];    // 32 voltage readings
    float temperatures[32];   // 32 temperature readings
    float current;            // Current reading
} BMS_Data_t;
void send_bms_data(uint16_t* cell_voltages, float* temperatures, float current) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b0b6      	sub	sp, #216	@ 0xd8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	ed87 0a01 	vstr	s0, [r7, #4]
    BMS_Data_t data;

    // Copy data into structure
    for(int i = 0; i < 32; i++) {
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001e3c:	e01f      	b.n	8001e7e <_Z13send_bms_dataPtPff+0x56>
        data.voltages[i] = cell_voltages[i];
 8001e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	881a      	ldrh	r2, [r3, #0]
 8001e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	33d8      	adds	r3, #216	@ 0xd8
 8001e52:	443b      	add	r3, r7
 8001e54:	f823 2cc8 	strh.w	r2, [r3, #-200]
        data.temperatures[i] = temperatures[i];
 8001e58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	4413      	add	r3, r2
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e68:	3310      	adds	r3, #16
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	33d8      	adds	r3, #216	@ 0xd8
 8001e6e:	443b      	add	r3, r7
 8001e70:	3bc8      	subs	r3, #200	@ 0xc8
 8001e72:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 32; i++) {
 8001e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e82:	2b1f      	cmp	r3, #31
 8001e84:	dddb      	ble.n	8001e3e <_Z13send_bms_dataPtPff+0x16>
    }
    data.current = current;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    // Send the entire structure as raw data
    CDC_Transmit_FS((uint8_t*)&data, sizeof(BMS_Data_t));
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	21c4      	movs	r1, #196	@ 0xc4
 8001e92:	4618      	mov	r0, r3
 8001e94:	f00d f84a 	bl	800ef2c <CDC_Transmit_FS>
}
 8001e98:	bf00      	nop
 8001e9a:	37d8      	adds	r7, #216	@ 0xd8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_Z41__static_initialization_and_destruction_0ii>:
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d11d      	bne.n	8001eec <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d118      	bne.n	8001eec <_Z41__static_initialization_and_destruction_0ii+0x4c>
ADS7138 current_adc;
 8001eba:	480e      	ldr	r0, [pc, #56]	@ (8001ef4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001ebc:	f7fe fea4 	bl	8000c08 <_ZN7ADS7138C1Ev>
ADS7138 temp_adcs[4];
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001ec2:	2403      	movs	r4, #3
 8001ec4:	461d      	mov	r5, r3
 8001ec6:	e004      	b.n	8001ed2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001ec8:	4628      	mov	r0, r5
 8001eca:	f7fe fe9d 	bl	8000c08 <_ZN7ADS7138C1Ev>
 8001ece:	3c01      	subs	r4, #1
 8001ed0:	3510      	adds	r5, #16
 8001ed2:	2c00      	cmp	r4, #0
 8001ed4:	daf8      	bge.n	8001ec8 <_Z41__static_initialization_and_destruction_0ii+0x28>
BQ76952 bqChip1 = BQ76952(); // 16 cells = i2c4
 8001ed6:	4809      	ldr	r0, [pc, #36]	@ (8001efc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001ed8:	f7fe ffe3 	bl	8000ea2 <_ZN7BQ76952C1Ev>
BQ76952 bqChip2 = BQ76952(); // 13 cells = i2c3
 8001edc:	4808      	ldr	r0, [pc, #32]	@ (8001f00 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001ede:	f7fe ffe0 	bl	8000ea2 <_ZN7BQ76952C1Ev>
BQChips bqChips = BQChips(&bqChip1, &bqChip2);
 8001ee2:	4a07      	ldr	r2, [pc, #28]	@ (8001f00 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001ee4:	4905      	ldr	r1, [pc, #20]	@ (8001efc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001ee6:	4807      	ldr	r0, [pc, #28]	@ (8001f04 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001ee8:	f7ff fa57 	bl	800139a <_ZN7BQChipsC1EP7BQ76952S1_>
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef4:	20000328 	.word	0x20000328
 8001ef8:	20000338 	.word	0x20000338
 8001efc:	2000049c 	.word	0x2000049c
 8001f00:	2000050c 	.word	0x2000050c
 8001f04:	2000057c 	.word	0x2000057c

08001f08 <_GLOBAL__sub_I_RxHeader>:
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f10:	2001      	movs	r0, #1
 8001f12:	f7ff ffc5 	bl	8001ea0 <_Z41__static_initialization_and_destruction_0ii>
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f1c:	f000 fff9 	bl	8002f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f20:	f000 f882 	bl	8002028 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f24:	f000 fb2c 	bl	8002580 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8001f28:	f000 f8e0 	bl	80020ec <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 8001f2c:	f000 f934 	bl	8002198 <_ZL12MX_CAN2_Initv>
  MX_I2C2_Init();
 8001f30:	f000 f96c 	bl	800220c <_ZL12MX_I2C2_Initv>
  MX_I2C3_Init();
 8001f34:	f000 f9b8 	bl	80022a8 <_ZL12MX_I2C3_Initv>
  MX_I2C4_Init();
 8001f38:	f000 fa04 	bl	8002344 <_ZL12MX_I2C4_Initv>
  MX_TIM2_Init();
 8001f3c:	f000 fa50 	bl	80023e0 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001f40:	f000 fab6 	bl	80024b0 <_ZL12MX_TIM3_Initv>


  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8001f44:	f00c ff20 	bl	800ed88 <MX_USB_DEVICE_Init>

  HAL_CAN_Start(&hcan1);
 8001f48:	4824      	ldr	r0, [pc, #144]	@ (8001fdc <main+0xc4>)
 8001f4a:	f001 fa1b 	bl	8003384 <HAL_CAN_Start>



  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001f4e:	2102      	movs	r1, #2
 8001f50:	4822      	ldr	r0, [pc, #136]	@ (8001fdc <main+0xc4>)
 8001f52:	f001 fc82 	bl	800385a <HAL_CAN_ActivateNotification>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <main+0x52>
  {
	  Error_Handler();
 8001f66:	f000 fbcb 	bl	8002700 <Error_Handler>
  }

  CPP_UserSetup();
 8001f6a:	f7ff fb07 	bl	800157c <_Z13CPP_UserSetupv>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f6e:	f00a f95f 	bl	800c230 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001f72:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe0 <main+0xc8>)
 8001f74:	2100      	movs	r1, #0
 8001f76:	481b      	ldr	r0, [pc, #108]	@ (8001fe4 <main+0xcc>)
 8001f78:	f00a f9a4 	bl	800c2c4 <osThreadNew>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fe8 <main+0xd0>)
 8001f80:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(StartTask02, NULL, &Voltage_Monitor_attributes);
 8001f82:	4a1a      	ldr	r2, [pc, #104]	@ (8001fec <main+0xd4>)
 8001f84:	2100      	movs	r1, #0
 8001f86:	481a      	ldr	r0, [pc, #104]	@ (8001ff0 <main+0xd8>)
 8001f88:	f00a f99c 	bl	800c2c4 <osThreadNew>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4a19      	ldr	r2, [pc, #100]	@ (8001ff4 <main+0xdc>)
 8001f90:	6013      	str	r3, [r2, #0]

  /* creation of Temp_Monitoring */
  Temp_MonitoringHandle = osThreadNew(StartTask03, NULL, &Temp_Monitoring_attributes);
 8001f92:	4a19      	ldr	r2, [pc, #100]	@ (8001ff8 <main+0xe0>)
 8001f94:	2100      	movs	r1, #0
 8001f96:	4819      	ldr	r0, [pc, #100]	@ (8001ffc <main+0xe4>)
 8001f98:	f00a f994 	bl	800c2c4 <osThreadNew>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4a18      	ldr	r2, [pc, #96]	@ (8002000 <main+0xe8>)
 8001fa0:	6013      	str	r3, [r2, #0]

  /* creation of Current_Monitor */
  Current_MonitorHandle = osThreadNew(StartTask04, NULL, &Current_Monitor_attributes);
 8001fa2:	4a18      	ldr	r2, [pc, #96]	@ (8002004 <main+0xec>)
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4818      	ldr	r0, [pc, #96]	@ (8002008 <main+0xf0>)
 8001fa8:	f00a f98c 	bl	800c2c4 <osThreadNew>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a17      	ldr	r2, [pc, #92]	@ (800200c <main+0xf4>)
 8001fb0:	6013      	str	r3, [r2, #0]

  /* creation of Battery_Data_Tr */
  Battery_Data_TrHandle = osThreadNew(StartTask05, NULL, &Battery_Data_Tr_attributes);
 8001fb2:	4a17      	ldr	r2, [pc, #92]	@ (8002010 <main+0xf8>)
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4817      	ldr	r0, [pc, #92]	@ (8002014 <main+0xfc>)
 8001fb8:	f00a f984 	bl	800c2c4 <osThreadNew>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a16      	ldr	r2, [pc, #88]	@ (8002018 <main+0x100>)
 8001fc0:	6013      	str	r3, [r2, #0]

  /* creation of Update_Fan_Spee */
  Update_Fan_SpeeHandle = osThreadNew(StartTask06, NULL, &Update_Fan_Spee_attributes);
 8001fc2:	4a16      	ldr	r2, [pc, #88]	@ (800201c <main+0x104>)
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4816      	ldr	r0, [pc, #88]	@ (8002020 <main+0x108>)
 8001fc8:	f00a f97c 	bl	800c2c4 <osThreadNew>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a15      	ldr	r2, [pc, #84]	@ (8002024 <main+0x10c>)
 8001fd0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001fd2:	f00a f951 	bl	800c278 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001fd6:	bf00      	nop
 8001fd8:	e7fd      	b.n	8001fd6 <main+0xbe>
 8001fda:	bf00      	nop
 8001fdc:	200005d4 	.word	0x200005d4
 8001fe0:	080124ec 	.word	0x080124ec
 8001fe4:	08001701 	.word	0x08001701
 8001fe8:	200007b8 	.word	0x200007b8
 8001fec:	08012510 	.word	0x08012510
 8001ff0:	08001721 	.word	0x08001721
 8001ff4:	200007bc 	.word	0x200007bc
 8001ff8:	08012534 	.word	0x08012534
 8001ffc:	080017f9 	.word	0x080017f9
 8002000:	200007c0 	.word	0x200007c0
 8002004:	08012558 	.word	0x08012558
 8002008:	08001939 	.word	0x08001939
 800200c:	200007c4 	.word	0x200007c4
 8002010:	0801257c 	.word	0x0801257c
 8002014:	08001b9d 	.word	0x08001b9d
 8002018:	200007c8 	.word	0x200007c8
 800201c:	080125a0 	.word	0x080125a0
 8002020:	08001c45 	.word	0x08001c45
 8002024:	200007cc 	.word	0x200007cc

08002028 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b096      	sub	sp, #88	@ 0x58
 800202c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	2244      	movs	r2, #68	@ 0x44
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f00e fa73 	bl	8010522 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800203c:	463b      	mov	r3, r7
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800204a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800204e:	f004 f999 	bl	8006384 <HAL_PWREx_ControlVoltageScaling>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf14      	ite	ne
 8002058:	2301      	movne	r3, #1
 800205a:	2300      	moveq	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002062:	f000 fb4d 	bl	8002700 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002066:	2310      	movs	r3, #16
 8002068:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800206a:	2301      	movs	r3, #1
 800206c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002072:	2360      	movs	r3, #96	@ 0x60
 8002074:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002076:	2302      	movs	r3, #2
 8002078:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800207a:	2301      	movs	r3, #1
 800207c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002082:	2310      	movs	r3, #16
 8002084:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002086:	2302      	movs	r3, #2
 8002088:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800208a:	2302      	movs	r3, #2
 800208c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800208e:	2302      	movs	r3, #2
 8002090:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4618      	mov	r0, r3
 8002098:	f004 f9da 	bl	8006450 <HAL_RCC_OscConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	bf14      	ite	ne
 80020a2:	2301      	movne	r3, #1
 80020a4:	2300      	moveq	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80020ac:	f000 fb28 	bl	8002700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020b0:	230f      	movs	r3, #15
 80020b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020b4:	2303      	movs	r3, #3
 80020b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80020bc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80020c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80020c6:	463b      	mov	r3, r7
 80020c8:	2101      	movs	r1, #1
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 fdda 	bl	8006c84 <HAL_RCC_ClockConfig>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bf14      	ite	ne
 80020d6:	2301      	movne	r3, #1
 80020d8:	2300      	moveq	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 80020e0:	f000 fb0e 	bl	8002700 <Error_Handler>
  }
}
 80020e4:	bf00      	nop
 80020e6:	3758      	adds	r7, #88	@ 0x58
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	@ 0x28
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80020f2:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 80020f4:	4a27      	ldr	r2, [pc, #156]	@ (8002194 <_ZL12MX_CAN1_Initv+0xa8>)
 80020f6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80020f8:	4b25      	ldr	r3, [pc, #148]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 80020fa:	2202      	movs	r2, #2
 80020fc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80020fe:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002104:	4b22      	ldr	r3, [pc, #136]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800210a:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 800210c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002110:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002112:	4b1f      	ldr	r3, [pc, #124]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 8002114:	2200      	movs	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002118:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 800211a:	2200      	movs	r2, #0
 800211c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800211e:	4b1c      	ldr	r3, [pc, #112]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 8002120:	2200      	movs	r2, #0
 8002122:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002124:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 8002126:	2200      	movs	r2, #0
 8002128:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800212a:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 800212c:	2200      	movs	r2, #0
 800212e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002130:	4b17      	ldr	r3, [pc, #92]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 8002132:	2200      	movs	r2, #0
 8002134:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002136:	4b16      	ldr	r3, [pc, #88]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 8002138:	2200      	movs	r2, #0
 800213a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800213c:	4814      	ldr	r0, [pc, #80]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 800213e:	f000 ff45 	bl	8002fcc <HAL_CAN_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf14      	ite	ne
 8002148:	2301      	movne	r3, #1
 800214a:	2300      	moveq	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 8002152:	f000 fad5 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterBank = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800215e:	2301      	movs	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8002162:	2300      	movs	r3, #0
 8002164:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8002176:	2301      	movs	r3, #1
 8002178:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800217a:	230e      	movs	r3, #14
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800217e:	463b      	mov	r3, r7
 8002180:	4619      	mov	r1, r3
 8002182:	4803      	ldr	r0, [pc, #12]	@ (8002190 <_ZL12MX_CAN1_Initv+0xa4>)
 8002184:	f001 f81e 	bl	80031c4 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	3728      	adds	r7, #40	@ 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200005d4 	.word	0x200005d4
 8002194:	40006400 	.word	0x40006400

08002198 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <_ZL12MX_CAN2_Initv+0x6c>)
 800219e:	4a1a      	ldr	r2, [pc, #104]	@ (8002208 <_ZL12MX_CAN2_Initv+0x70>)
 80021a0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 80021a2:	4b18      	ldr	r3, [pc, #96]	@ (8002204 <_ZL12MX_CAN2_Initv+0x6c>)
 80021a4:	220a      	movs	r2, #10
 80021a6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80021a8:	4b16      	ldr	r3, [pc, #88]	@ (8002204 <_ZL12MX_CAN2_Initv+0x6c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <_ZL12MX_CAN2_Initv+0x6c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_14TQ;
 80021b4:	4b13      	ldr	r3, [pc, #76]	@ (8002204 <_ZL12MX_CAN2_Initv+0x6c>)
 80021b6:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 80021ba:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80021bc:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <_ZL12MX_CAN2_Initv+0x6c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <_ZL12MX_CAN2_Initv+0x6c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80021c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <_ZL12MX_CAN2_Initv+0x6c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80021ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <_ZL12MX_CAN2_Initv+0x6c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <_ZL12MX_CAN2_Initv+0x6c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <_ZL12MX_CAN2_Initv+0x6c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80021e0:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <_ZL12MX_CAN2_Initv+0x6c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80021e6:	4807      	ldr	r0, [pc, #28]	@ (8002204 <_ZL12MX_CAN2_Initv+0x6c>)
 80021e8:	f000 fef0 	bl	8002fcc <HAL_CAN_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bf14      	ite	ne
 80021f2:	2301      	movne	r3, #1
 80021f4:	2300      	moveq	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 80021fc:	f000 fa80 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	200005fc 	.word	0x200005fc
 8002208:	40006800 	.word	0x40006800

0800220c <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002210:	4b22      	ldr	r3, [pc, #136]	@ (800229c <_ZL12MX_I2C2_Initv+0x90>)
 8002212:	4a23      	ldr	r2, [pc, #140]	@ (80022a0 <_ZL12MX_I2C2_Initv+0x94>)
 8002214:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 8002216:	4b21      	ldr	r3, [pc, #132]	@ (800229c <_ZL12MX_I2C2_Initv+0x90>)
 8002218:	4a22      	ldr	r2, [pc, #136]	@ (80022a4 <_ZL12MX_I2C2_Initv+0x98>)
 800221a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800221c:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <_ZL12MX_I2C2_Initv+0x90>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002222:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <_ZL12MX_I2C2_Initv+0x90>)
 8002224:	2201      	movs	r2, #1
 8002226:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002228:	4b1c      	ldr	r3, [pc, #112]	@ (800229c <_ZL12MX_I2C2_Initv+0x90>)
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800222e:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <_ZL12MX_I2C2_Initv+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002234:	4b19      	ldr	r3, [pc, #100]	@ (800229c <_ZL12MX_I2C2_Initv+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800223a:	4b18      	ldr	r3, [pc, #96]	@ (800229c <_ZL12MX_I2C2_Initv+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002240:	4b16      	ldr	r3, [pc, #88]	@ (800229c <_ZL12MX_I2C2_Initv+0x90>)
 8002242:	2200      	movs	r2, #0
 8002244:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002246:	4815      	ldr	r0, [pc, #84]	@ (800229c <_ZL12MX_I2C2_Initv+0x90>)
 8002248:	f002 f825 	bl	8004296 <HAL_I2C_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	bf14      	ite	ne
 8002252:	2301      	movne	r3, #1
 8002254:	2300      	moveq	r3, #0
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 800225c:	f000 fa50 	bl	8002700 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002260:	2100      	movs	r1, #0
 8002262:	480e      	ldr	r0, [pc, #56]	@ (800229c <_ZL12MX_I2C2_Initv+0x90>)
 8002264:	f002 fe52 	bl	8004f0c <HAL_I2CEx_ConfigAnalogFilter>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	bf14      	ite	ne
 800226e:	2301      	movne	r3, #1
 8002270:	2300      	moveq	r3, #0
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8002278:	f000 fa42 	bl	8002700 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800227c:	2100      	movs	r1, #0
 800227e:	4807      	ldr	r0, [pc, #28]	@ (800229c <_ZL12MX_I2C2_Initv+0x90>)
 8002280:	f002 fe8f 	bl	8004fa2 <HAL_I2CEx_ConfigDigitalFilter>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	bf14      	ite	ne
 800228a:	2301      	movne	r3, #1
 800228c:	2300      	moveq	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8002294:	f000 fa34 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000624 	.word	0x20000624
 80022a0:	40005800 	.word	0x40005800
 80022a4:	00100d14 	.word	0x00100d14

080022a8 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80022ac:	4b22      	ldr	r3, [pc, #136]	@ (8002338 <_ZL12MX_I2C3_Initv+0x90>)
 80022ae:	4a23      	ldr	r2, [pc, #140]	@ (800233c <_ZL12MX_I2C3_Initv+0x94>)
 80022b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100D14;
 80022b2:	4b21      	ldr	r3, [pc, #132]	@ (8002338 <_ZL12MX_I2C3_Initv+0x90>)
 80022b4:	4a22      	ldr	r2, [pc, #136]	@ (8002340 <_ZL12MX_I2C3_Initv+0x98>)
 80022b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80022b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002338 <_ZL12MX_I2C3_Initv+0x90>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022be:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <_ZL12MX_I2C3_Initv+0x90>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002338 <_ZL12MX_I2C3_Initv+0x90>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80022ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <_ZL12MX_I2C3_Initv+0x90>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <_ZL12MX_I2C3_Initv+0x90>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d6:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <_ZL12MX_I2C3_Initv+0x90>)
 80022d8:	2200      	movs	r2, #0
 80022da:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022dc:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <_ZL12MX_I2C3_Initv+0x90>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80022e2:	4815      	ldr	r0, [pc, #84]	@ (8002338 <_ZL12MX_I2C3_Initv+0x90>)
 80022e4:	f001 ffd7 	bl	8004296 <HAL_I2C_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf14      	ite	ne
 80022ee:	2301      	movne	r3, #1
 80022f0:	2300      	moveq	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 80022f8:	f000 fa02 	bl	8002700 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022fc:	2100      	movs	r1, #0
 80022fe:	480e      	ldr	r0, [pc, #56]	@ (8002338 <_ZL12MX_I2C3_Initv+0x90>)
 8002300:	f002 fe04 	bl	8004f0c <HAL_I2CEx_ConfigAnalogFilter>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	bf14      	ite	ne
 800230a:	2301      	movne	r3, #1
 800230c:	2300      	moveq	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8002314:	f000 f9f4 	bl	8002700 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002318:	2100      	movs	r1, #0
 800231a:	4807      	ldr	r0, [pc, #28]	@ (8002338 <_ZL12MX_I2C3_Initv+0x90>)
 800231c:	f002 fe41 	bl	8004fa2 <HAL_I2CEx_ConfigDigitalFilter>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	bf14      	ite	ne
 8002326:	2301      	movne	r3, #1
 8002328:	2300      	moveq	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8002330:	f000 f9e6 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000678 	.word	0x20000678
 800233c:	40005c00 	.word	0x40005c00
 8002340:	00100d14 	.word	0x00100d14

08002344 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002348:	4b22      	ldr	r3, [pc, #136]	@ (80023d4 <_ZL12MX_I2C4_Initv+0x90>)
 800234a:	4a23      	ldr	r2, [pc, #140]	@ (80023d8 <_ZL12MX_I2C4_Initv+0x94>)
 800234c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 800234e:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <_ZL12MX_I2C4_Initv+0x90>)
 8002350:	4a22      	ldr	r2, [pc, #136]	@ (80023dc <_ZL12MX_I2C4_Initv+0x98>)
 8002352:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002354:	4b1f      	ldr	r3, [pc, #124]	@ (80023d4 <_ZL12MX_I2C4_Initv+0x90>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800235a:	4b1e      	ldr	r3, [pc, #120]	@ (80023d4 <_ZL12MX_I2C4_Initv+0x90>)
 800235c:	2201      	movs	r2, #1
 800235e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002360:	4b1c      	ldr	r3, [pc, #112]	@ (80023d4 <_ZL12MX_I2C4_Initv+0x90>)
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002366:	4b1b      	ldr	r3, [pc, #108]	@ (80023d4 <_ZL12MX_I2C4_Initv+0x90>)
 8002368:	2200      	movs	r2, #0
 800236a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800236c:	4b19      	ldr	r3, [pc, #100]	@ (80023d4 <_ZL12MX_I2C4_Initv+0x90>)
 800236e:	2200      	movs	r2, #0
 8002370:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002372:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <_ZL12MX_I2C4_Initv+0x90>)
 8002374:	2200      	movs	r2, #0
 8002376:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002378:	4b16      	ldr	r3, [pc, #88]	@ (80023d4 <_ZL12MX_I2C4_Initv+0x90>)
 800237a:	2200      	movs	r2, #0
 800237c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800237e:	4815      	ldr	r0, [pc, #84]	@ (80023d4 <_ZL12MX_I2C4_Initv+0x90>)
 8002380:	f001 ff89 	bl	8004296 <HAL_I2C_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf14      	ite	ne
 800238a:	2301      	movne	r3, #1
 800238c:	2300      	moveq	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8002394:	f000 f9b4 	bl	8002700 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002398:	2100      	movs	r1, #0
 800239a:	480e      	ldr	r0, [pc, #56]	@ (80023d4 <_ZL12MX_I2C4_Initv+0x90>)
 800239c:	f002 fdb6 	bl	8004f0c <HAL_I2CEx_ConfigAnalogFilter>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	bf14      	ite	ne
 80023a6:	2301      	movne	r3, #1
 80023a8:	2300      	moveq	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 80023b0:	f000 f9a6 	bl	8002700 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80023b4:	2100      	movs	r1, #0
 80023b6:	4807      	ldr	r0, [pc, #28]	@ (80023d4 <_ZL12MX_I2C4_Initv+0x90>)
 80023b8:	f002 fdf3 	bl	8004fa2 <HAL_I2CEx_ConfigDigitalFilter>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bf14      	ite	ne
 80023c2:	2301      	movne	r3, #1
 80023c4:	2300      	moveq	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 80023cc:	f000 f998 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200006cc 	.word	0x200006cc
 80023d8:	40008400 	.word	0x40008400
 80023dc:	00100d14 	.word	0x00100d14

080023e0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	@ 0x28
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e6:	f107 031c 	add.w	r3, r7, #28
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023f2:	463b      	mov	r3, r7
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
 8002400:	615a      	str	r2, [r3, #20]
 8002402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002404:	4b29      	ldr	r3, [pc, #164]	@ (80024ac <_ZL12MX_TIM2_Initv+0xcc>)
 8002406:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800240a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 800240c:	4b27      	ldr	r3, [pc, #156]	@ (80024ac <_ZL12MX_TIM2_Initv+0xcc>)
 800240e:	2203      	movs	r2, #3
 8002410:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002412:	4b26      	ldr	r3, [pc, #152]	@ (80024ac <_ZL12MX_TIM2_Initv+0xcc>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40-1;
 8002418:	4b24      	ldr	r3, [pc, #144]	@ (80024ac <_ZL12MX_TIM2_Initv+0xcc>)
 800241a:	2227      	movs	r2, #39	@ 0x27
 800241c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241e:	4b23      	ldr	r3, [pc, #140]	@ (80024ac <_ZL12MX_TIM2_Initv+0xcc>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002424:	4b21      	ldr	r3, [pc, #132]	@ (80024ac <_ZL12MX_TIM2_Initv+0xcc>)
 8002426:	2200      	movs	r2, #0
 8002428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800242a:	4820      	ldr	r0, [pc, #128]	@ (80024ac <_ZL12MX_TIM2_Initv+0xcc>)
 800242c:	f005 fc6c 	bl	8007d08 <HAL_TIM_PWM_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	bf14      	ite	ne
 8002436:	2301      	movne	r3, #1
 8002438:	2300      	moveq	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8002440:	f000 f95e 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800244c:	f107 031c 	add.w	r3, r7, #28
 8002450:	4619      	mov	r1, r3
 8002452:	4816      	ldr	r0, [pc, #88]	@ (80024ac <_ZL12MX_TIM2_Initv+0xcc>)
 8002454:	f006 fb9c 	bl	8008b90 <HAL_TIMEx_MasterConfigSynchronization>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf14      	ite	ne
 800245e:	2301      	movne	r3, #1
 8002460:	2300      	moveq	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8002468:	f000 f94a 	bl	8002700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800246c:	2360      	movs	r3, #96	@ 0x60
 800246e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800247c:	463b      	mov	r3, r7
 800247e:	2200      	movs	r2, #0
 8002480:	4619      	mov	r1, r3
 8002482:	480a      	ldr	r0, [pc, #40]	@ (80024ac <_ZL12MX_TIM2_Initv+0xcc>)
 8002484:	f005 fea6 	bl	80081d4 <HAL_TIM_PWM_ConfigChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf14      	ite	ne
 800248e:	2301      	movne	r3, #1
 8002490:	2300      	moveq	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8002498:	f000 f932 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800249c:	4803      	ldr	r0, [pc, #12]	@ (80024ac <_ZL12MX_TIM2_Initv+0xcc>)
 800249e:	f000 fb25 	bl	8002aec <HAL_TIM_MspPostInit>

}
 80024a2:	bf00      	nop
 80024a4:	3728      	adds	r7, #40	@ 0x28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000720 	.word	0x20000720

080024b0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	@ 0x28
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024c2:	463b      	mov	r3, r7
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
 80024d0:	615a      	str	r2, [r3, #20]
 80024d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024d4:	4b28      	ldr	r3, [pc, #160]	@ (8002578 <_ZL12MX_TIM3_Initv+0xc8>)
 80024d6:	4a29      	ldr	r2, [pc, #164]	@ (800257c <_ZL12MX_TIM3_Initv+0xcc>)
 80024d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 80024da:	4b27      	ldr	r3, [pc, #156]	@ (8002578 <_ZL12MX_TIM3_Initv+0xc8>)
 80024dc:	2203      	movs	r2, #3
 80024de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e0:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <_ZL12MX_TIM3_Initv+0xc8>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 80024e6:	4b24      	ldr	r3, [pc, #144]	@ (8002578 <_ZL12MX_TIM3_Initv+0xc8>)
 80024e8:	2227      	movs	r2, #39	@ 0x27
 80024ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ec:	4b22      	ldr	r3, [pc, #136]	@ (8002578 <_ZL12MX_TIM3_Initv+0xc8>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f2:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <_ZL12MX_TIM3_Initv+0xc8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024f8:	481f      	ldr	r0, [pc, #124]	@ (8002578 <_ZL12MX_TIM3_Initv+0xc8>)
 80024fa:	f005 fc05 	bl	8007d08 <HAL_TIM_PWM_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 800250e:	f000 f8f7 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800251a:	f107 031c 	add.w	r3, r7, #28
 800251e:	4619      	mov	r1, r3
 8002520:	4815      	ldr	r0, [pc, #84]	@ (8002578 <_ZL12MX_TIM3_Initv+0xc8>)
 8002522:	f006 fb35 	bl	8008b90 <HAL_TIMEx_MasterConfigSynchronization>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8002536:	f000 f8e3 	bl	8002700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800253a:	2360      	movs	r3, #96	@ 0x60
 800253c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800254a:	463b      	mov	r3, r7
 800254c:	2200      	movs	r2, #0
 800254e:	4619      	mov	r1, r3
 8002550:	4809      	ldr	r0, [pc, #36]	@ (8002578 <_ZL12MX_TIM3_Initv+0xc8>)
 8002552:	f005 fe3f 	bl	80081d4 <HAL_TIM_PWM_ConfigChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8002566:	f000 f8cb 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800256a:	4803      	ldr	r0, [pc, #12]	@ (8002578 <_ZL12MX_TIM3_Initv+0xc8>)
 800256c:	f000 fabe 	bl	8002aec <HAL_TIM_MspPostInit>

}
 8002570:	bf00      	nop
 8002572:	3728      	adds	r7, #40	@ 0x28
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	2000076c 	.word	0x2000076c
 800257c:	40000400 	.word	0x40000400

08002580 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	@ 0x28
 8002584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002596:	4b4e      	ldr	r3, [pc, #312]	@ (80026d0 <_ZL12MX_GPIO_Initv+0x150>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	4a4d      	ldr	r2, [pc, #308]	@ (80026d0 <_ZL12MX_GPIO_Initv+0x150>)
 800259c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a2:	4b4b      	ldr	r3, [pc, #300]	@ (80026d0 <_ZL12MX_GPIO_Initv+0x150>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ae:	4b48      	ldr	r3, [pc, #288]	@ (80026d0 <_ZL12MX_GPIO_Initv+0x150>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b2:	4a47      	ldr	r2, [pc, #284]	@ (80026d0 <_ZL12MX_GPIO_Initv+0x150>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ba:	4b45      	ldr	r3, [pc, #276]	@ (80026d0 <_ZL12MX_GPIO_Initv+0x150>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c6:	4b42      	ldr	r3, [pc, #264]	@ (80026d0 <_ZL12MX_GPIO_Initv+0x150>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ca:	4a41      	ldr	r2, [pc, #260]	@ (80026d0 <_ZL12MX_GPIO_Initv+0x150>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025d2:	4b3f      	ldr	r3, [pc, #252]	@ (80026d0 <_ZL12MX_GPIO_Initv+0x150>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	4b3c      	ldr	r3, [pc, #240]	@ (80026d0 <_ZL12MX_GPIO_Initv+0x150>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e2:	4a3b      	ldr	r2, [pc, #236]	@ (80026d0 <_ZL12MX_GPIO_Initv+0x150>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ea:	4b39      	ldr	r3, [pc, #228]	@ (80026d0 <_ZL12MX_GPIO_Initv+0x150>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2134      	movs	r1, #52	@ 0x34
 80025fa:	4836      	ldr	r0, [pc, #216]	@ (80026d4 <_ZL12MX_GPIO_Initv+0x154>)
 80025fc:	f001 fdf6 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 8002600:	2200      	movs	r2, #0
 8002602:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8002606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800260a:	f001 fdef 	bl	80041ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800260e:	2200      	movs	r2, #0
 8002610:	2107      	movs	r1, #7
 8002612:	4831      	ldr	r0, [pc, #196]	@ (80026d8 <_ZL12MX_GPIO_Initv+0x158>)
 8002614:	f001 fdea 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8002618:	2334      	movs	r3, #52	@ 0x34
 800261a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261c:	2301      	movs	r3, #1
 800261e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4619      	mov	r1, r3
 800262e:	4829      	ldr	r0, [pc, #164]	@ (80026d4 <_ZL12MX_GPIO_Initv+0x154>)
 8002630:	f001 fc4a 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002634:	2308      	movs	r3, #8
 8002636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002638:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800263c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4619      	mov	r1, r3
 8002648:	4822      	ldr	r0, [pc, #136]	@ (80026d4 <_ZL12MX_GPIO_Initv+0x154>)
 800264a:	f001 fc3d 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 PA7
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 800264e:	f240 43c3 	movw	r3, #1219	@ 0x4c3
 8002652:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002654:	2301      	movs	r3, #1
 8002656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	4619      	mov	r1, r3
 8002666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800266a:	f001 fc2d 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800266e:	2320      	movs	r3, #32
 8002670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002672:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	4619      	mov	r1, r3
 8002682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002686:	f001 fc1f 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800268a:	2307      	movs	r3, #7
 800268c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268e:	2301      	movs	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <_ZL12MX_GPIO_Initv+0x158>)
 80026a2:	f001 fc11 	bl	8003ec8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2105      	movs	r1, #5
 80026aa:	2009      	movs	r0, #9
 80026ac:	f001 fbe2 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80026b0:	2009      	movs	r0, #9
 80026b2:	f001 fbfb 	bl	8003eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2105      	movs	r1, #5
 80026ba:	2017      	movs	r0, #23
 80026bc:	f001 fbda 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026c0:	2017      	movs	r0, #23
 80026c2:	f001 fbf3 	bl	8003eac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026c6:	bf00      	nop
 80026c8:	3728      	adds	r7, #40	@ 0x28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	48000800 	.word	0x48000800
 80026d8:	48000400 	.word	0x48000400

080026dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a04      	ldr	r2, [pc, #16]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026ee:	f000 fc29 	bl	8002f44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40012c00 	.word	0x40012c00

08002700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
}
 8002706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <Error_Handler+0x8>

0800270c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <HAL_MspInit+0x4c>)
 8002714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002716:	4a10      	ldr	r2, [pc, #64]	@ (8002758 <HAL_MspInit+0x4c>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6613      	str	r3, [r2, #96]	@ 0x60
 800271e:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <HAL_MspInit+0x4c>)
 8002720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <HAL_MspInit+0x4c>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	4a0a      	ldr	r2, [pc, #40]	@ (8002758 <HAL_MspInit+0x4c>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002734:	6593      	str	r3, [r2, #88]	@ 0x58
 8002736:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <HAL_MspInit+0x4c>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	210f      	movs	r1, #15
 8002746:	f06f 0001 	mvn.w	r0, #1
 800274a:	f001 fb93 	bl	8003e74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	@ 0x30
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a49      	ldr	r2, [pc, #292]	@ (80028a0 <HAL_CAN_MspInit+0x144>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d13a      	bne.n	80027f4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800277e:	4b49      	ldr	r3, [pc, #292]	@ (80028a4 <HAL_CAN_MspInit+0x148>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3301      	adds	r3, #1
 8002784:	4a47      	ldr	r2, [pc, #284]	@ (80028a4 <HAL_CAN_MspInit+0x148>)
 8002786:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002788:	4b46      	ldr	r3, [pc, #280]	@ (80028a4 <HAL_CAN_MspInit+0x148>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d10b      	bne.n	80027a8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002790:	4b45      	ldr	r3, [pc, #276]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 8002792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002794:	4a44      	ldr	r2, [pc, #272]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 8002796:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800279a:	6593      	str	r3, [r2, #88]	@ 0x58
 800279c:	4b42      	ldr	r3, [pc, #264]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a8:	4b3f      	ldr	r3, [pc, #252]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 80027aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ac:	4a3e      	ldr	r2, [pc, #248]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b4:	4b3c      	ldr	r3, [pc, #240]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ce:	2303      	movs	r3, #3
 80027d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80027d2:	2309      	movs	r3, #9
 80027d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d6:	f107 031c 	add.w	r3, r7, #28
 80027da:	4619      	mov	r1, r3
 80027dc:	4833      	ldr	r0, [pc, #204]	@ (80028ac <HAL_CAN_MspInit+0x150>)
 80027de:	f001 fb73 	bl	8003ec8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2105      	movs	r1, #5
 80027e6:	2014      	movs	r0, #20
 80027e8:	f001 fb44 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80027ec:	2014      	movs	r0, #20
 80027ee:	f001 fb5d 	bl	8003eac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80027f2:	e051      	b.n	8002898 <HAL_CAN_MspInit+0x13c>
  else if(hcan->Instance==CAN2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a2d      	ldr	r2, [pc, #180]	@ (80028b0 <HAL_CAN_MspInit+0x154>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d14c      	bne.n	8002898 <HAL_CAN_MspInit+0x13c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80027fe:	4b2a      	ldr	r3, [pc, #168]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002802:	4a29      	ldr	r2, [pc, #164]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 8002804:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002808:	6593      	str	r3, [r2, #88]	@ 0x58
 800280a:	4b27      	ldr	r3, [pc, #156]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002816:	4b23      	ldr	r3, [pc, #140]	@ (80028a4 <HAL_CAN_MspInit+0x148>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3301      	adds	r3, #1
 800281c:	4a21      	ldr	r2, [pc, #132]	@ (80028a4 <HAL_CAN_MspInit+0x148>)
 800281e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002820:	4b20      	ldr	r3, [pc, #128]	@ (80028a4 <HAL_CAN_MspInit+0x148>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d10b      	bne.n	8002840 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002828:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282c:	4a1e      	ldr	r2, [pc, #120]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 800282e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002832:	6593      	str	r3, [r2, #88]	@ 0x58
 8002834:	4b1c      	ldr	r3, [pc, #112]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002840:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 8002842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002844:	4a18      	ldr	r2, [pc, #96]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 8002846:	f043 0302 	orr.w	r3, r3, #2
 800284a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800284c:	4b16      	ldr	r3, [pc, #88]	@ (80028a8 <HAL_CAN_MspInit+0x14c>)
 800284e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002858:	2320      	movs	r3, #32
 800285a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002864:	2303      	movs	r3, #3
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8002868:	2303      	movs	r3, #3
 800286a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	4619      	mov	r1, r3
 8002872:	480e      	ldr	r0, [pc, #56]	@ (80028ac <HAL_CAN_MspInit+0x150>)
 8002874:	f001 fb28 	bl	8003ec8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002878:	2340      	movs	r3, #64	@ 0x40
 800287a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8002888:	2308      	movs	r3, #8
 800288a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288c:	f107 031c 	add.w	r3, r7, #28
 8002890:	4619      	mov	r1, r3
 8002892:	4806      	ldr	r0, [pc, #24]	@ (80028ac <HAL_CAN_MspInit+0x150>)
 8002894:	f001 fb18 	bl	8003ec8 <HAL_GPIO_Init>
}
 8002898:	bf00      	nop
 800289a:	3730      	adds	r7, #48	@ 0x30
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40006400 	.word	0x40006400
 80028a4:	200007d0 	.word	0x200007d0
 80028a8:	40021000 	.word	0x40021000
 80028ac:	48000400 	.word	0x48000400
 80028b0:	40006800 	.word	0x40006800

080028b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b0b0      	sub	sp, #192	@ 0xc0
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028cc:	f107 0320 	add.w	r3, r7, #32
 80028d0:	228c      	movs	r2, #140	@ 0x8c
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f00d fe24 	bl	8010522 <memset>
  if(hi2c->Instance==I2C2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a64      	ldr	r2, [pc, #400]	@ (8002a70 <HAL_I2C_MspInit+0x1bc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d13c      	bne.n	800295e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028e8:	2300      	movs	r3, #0
 80028ea:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ec:	f107 0320 	add.w	r3, r7, #32
 80028f0:	4618      	mov	r0, r3
 80028f2:	f004 fc05 	bl	8007100 <HAL_RCCEx_PeriphCLKConfig>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80028fc:	f7ff ff00 	bl	8002700 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002900:	4b5c      	ldr	r3, [pc, #368]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 8002902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002904:	4a5b      	ldr	r2, [pc, #364]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800290c:	4b59      	ldr	r3, [pc, #356]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 800290e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	69fb      	ldr	r3, [r7, #28]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002918:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800291c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002920:	2312      	movs	r3, #18
 8002922:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002932:	2304      	movs	r3, #4
 8002934:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002938:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800293c:	4619      	mov	r1, r3
 800293e:	484e      	ldr	r0, [pc, #312]	@ (8002a78 <HAL_I2C_MspInit+0x1c4>)
 8002940:	f001 fac2 	bl	8003ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002944:	4b4b      	ldr	r3, [pc, #300]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002948:	4a4a      	ldr	r2, [pc, #296]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 800294a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800294e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002950:	4b48      	ldr	r3, [pc, #288]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800295c:	e083      	b.n	8002a66 <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C3)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a46      	ldr	r2, [pc, #280]	@ (8002a7c <HAL_I2C_MspInit+0x1c8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d13c      	bne.n	80029e2 <HAL_I2C_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002968:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800296c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800296e:	2300      	movs	r3, #0
 8002970:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002972:	f107 0320 	add.w	r3, r7, #32
 8002976:	4618      	mov	r0, r3
 8002978:	f004 fbc2 	bl	8007100 <HAL_RCCEx_PeriphCLKConfig>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8002982:	f7ff febd 	bl	8002700 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002986:	4b3b      	ldr	r3, [pc, #236]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 800298c:	f043 0304 	orr.w	r3, r3, #4
 8002990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002992:	4b38      	ldr	r3, [pc, #224]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800299e:	2303      	movs	r3, #3
 80029a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029a4:	2312      	movs	r3, #18
 80029a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b0:	2303      	movs	r3, #3
 80029b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029b6:	2304      	movs	r3, #4
 80029b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029bc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80029c0:	4619      	mov	r1, r3
 80029c2:	482f      	ldr	r0, [pc, #188]	@ (8002a80 <HAL_I2C_MspInit+0x1cc>)
 80029c4:	f001 fa80 	bl	8003ec8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029cc:	4a29      	ldr	r2, [pc, #164]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 80029ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80029d4:	4b27      	ldr	r3, [pc, #156]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	693b      	ldr	r3, [r7, #16]
}
 80029e0:	e041      	b.n	8002a66 <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C4)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a27      	ldr	r2, [pc, #156]	@ (8002a84 <HAL_I2C_MspInit+0x1d0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d13c      	bne.n	8002a66 <HAL_I2C_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80029ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80029f2:	2300      	movs	r3, #0
 80029f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029f6:	f107 0320 	add.w	r3, r7, #32
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 fb80 	bl	8007100 <HAL_RCCEx_PeriphCLKConfig>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_MspInit+0x156>
      Error_Handler();
 8002a06:	f7ff fe7b 	bl	8002700 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0e:	4a19      	ldr	r2, [pc, #100]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a16:	4b17      	ldr	r3, [pc, #92]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a22:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a2a:	2312      	movs	r3, #18
 8002a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a42:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a46:	4619      	mov	r1, r3
 8002a48:	480b      	ldr	r0, [pc, #44]	@ (8002a78 <HAL_I2C_MspInit+0x1c4>)
 8002a4a:	f001 fa3d 	bl	8003ec8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002a4e:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	4a08      	ldr	r2, [pc, #32]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002a5a:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_I2C_MspInit+0x1c0>)
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
}
 8002a66:	bf00      	nop
 8002a68:	37c0      	adds	r7, #192	@ 0xc0
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40005800 	.word	0x40005800
 8002a74:	40021000 	.word	0x40021000
 8002a78:	48000400 	.word	0x48000400
 8002a7c:	40005c00 	.word	0x40005c00
 8002a80:	48000800 	.word	0x48000800
 8002a84:	40008400 	.word	0x40008400

08002a88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a98:	d10c      	bne.n	8002ab4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <HAL_TIM_PWM_MspInit+0x5c>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	4a11      	ldr	r2, [pc, #68]	@ (8002ae4 <HAL_TIM_PWM_MspInit+0x5c>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <HAL_TIM_PWM_MspInit+0x5c>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ab2:	e010      	b.n	8002ad6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ae8 <HAL_TIM_PWM_MspInit+0x60>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10b      	bne.n	8002ad6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002abe:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <HAL_TIM_PWM_MspInit+0x5c>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	4a08      	ldr	r2, [pc, #32]	@ (8002ae4 <HAL_TIM_PWM_MspInit+0x5c>)
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aca:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <HAL_TIM_PWM_MspInit+0x5c>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40000400 	.word	0x40000400

08002aec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	@ 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b0c:	d11e      	bne.n	8002b4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0e:	4b22      	ldr	r3, [pc, #136]	@ (8002b98 <HAL_TIM_MspPostInit+0xac>)
 8002b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b12:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <HAL_TIM_MspPostInit+0xac>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b98 <HAL_TIM_MspPostInit+0xac>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4619      	mov	r1, r3
 8002b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b46:	f001 f9bf 	bl	8003ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b4a:	e020      	b.n	8002b8e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a12      	ldr	r2, [pc, #72]	@ (8002b9c <HAL_TIM_MspPostInit+0xb0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d11b      	bne.n	8002b8e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b56:	4b10      	ldr	r3, [pc, #64]	@ (8002b98 <HAL_TIM_MspPostInit+0xac>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b98 <HAL_TIM_MspPostInit+0xac>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b62:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <HAL_TIM_MspPostInit+0xac>)
 8002b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b6e:	2310      	movs	r3, #16
 8002b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	4619      	mov	r1, r3
 8002b88:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <HAL_TIM_MspPostInit+0xb4>)
 8002b8a:	f001 f99d 	bl	8003ec8 <HAL_GPIO_Init>
}
 8002b8e:	bf00      	nop
 8002b90:	3728      	adds	r7, #40	@ 0x28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	48000400 	.word	0x48000400

08002ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	@ 0x30
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8002c6c <HAL_InitTick+0xc8>)
 8002bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8002c6c <HAL_InitTick+0xc8>)
 8002bb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002bbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bbe:	4b2b      	ldr	r3, [pc, #172]	@ (8002c6c <HAL_InitTick+0xc8>)
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bca:	f107 020c 	add.w	r2, r7, #12
 8002bce:	f107 0310 	add.w	r3, r7, #16
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 fa01 	bl	8006fdc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002bda:	f004 f9e9 	bl	8006fb0 <HAL_RCC_GetPCLK2Freq>
 8002bde:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be2:	4a23      	ldr	r2, [pc, #140]	@ (8002c70 <HAL_InitTick+0xcc>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	0c9b      	lsrs	r3, r3, #18
 8002bea:	3b01      	subs	r3, #1
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002bee:	4b21      	ldr	r3, [pc, #132]	@ (8002c74 <HAL_InitTick+0xd0>)
 8002bf0:	4a21      	ldr	r2, [pc, #132]	@ (8002c78 <HAL_InitTick+0xd4>)
 8002bf2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c74 <HAL_InitTick+0xd0>)
 8002bf6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bfa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <HAL_InitTick+0xd0>)
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002c02:	4b1c      	ldr	r3, [pc, #112]	@ (8002c74 <HAL_InitTick+0xd0>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c08:	4b1a      	ldr	r3, [pc, #104]	@ (8002c74 <HAL_InitTick+0xd0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0e:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <HAL_InitTick+0xd0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002c14:	4817      	ldr	r0, [pc, #92]	@ (8002c74 <HAL_InitTick+0xd0>)
 8002c16:	f004 ff3d 	bl	8007a94 <HAL_TIM_Base_Init>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002c20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11b      	bne.n	8002c60 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002c28:	4812      	ldr	r0, [pc, #72]	@ (8002c74 <HAL_InitTick+0xd0>)
 8002c2a:	f004 fffd 	bl	8007c28 <HAL_TIM_Base_Start_IT>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002c34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d111      	bne.n	8002c60 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c3c:	2019      	movs	r0, #25
 8002c3e:	f001 f935 	bl	8003eac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b0f      	cmp	r3, #15
 8002c46:	d808      	bhi.n	8002c5a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	2019      	movs	r0, #25
 8002c4e:	f001 f911 	bl	8003e74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c52:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <HAL_InitTick+0xd8>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	e002      	b.n	8002c60 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002c60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3730      	adds	r7, #48	@ 0x30
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	431bde83 	.word	0x431bde83
 8002c74:	200007d4 	.word	0x200007d4
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	20000004 	.word	0x20000004

08002c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <NMI_Handler+0x4>

08002c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c8c:	bf00      	nop
 8002c8e:	e7fd      	b.n	8002c8c <HardFault_Handler+0x4>

08002c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c94:	bf00      	nop
 8002c96:	e7fd      	b.n	8002c94 <MemManage_Handler+0x4>

08002c98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <BusFault_Handler+0x4>

08002ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca4:	bf00      	nop
 8002ca6:	e7fd      	b.n	8002ca4 <UsageFault_Handler+0x4>

08002ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002cba:	2008      	movs	r0, #8
 8002cbc:	f001 fac8 	bl	8004250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <CAN1_RX0_IRQHandler+0x10>)
 8002cca:	f000 fdec 	bl	80038a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200005d4 	.word	0x200005d4

08002cd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002cdc:	2020      	movs	r0, #32
 8002cde:	f001 fab7 	bl	8004250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cec:	4802      	ldr	r0, [pc, #8]	@ (8002cf8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002cee:	f005 f969 	bl	8007fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200007d4 	.word	0x200007d4

08002cfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d00:	4802      	ldr	r0, [pc, #8]	@ (8002d0c <OTG_FS_IRQHandler+0x10>)
 8002d02:	f002 fad8 	bl	80052b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20003e78 	.word	0x20003e78

08002d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return 1;
 8002d14:	2301      	movs	r3, #1
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_kill>:

int _kill(int pid, int sig)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d2a:	f00d fca3 	bl	8010674 <__errno>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2216      	movs	r2, #22
 8002d32:	601a      	str	r2, [r3, #0]
  return -1;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_exit>:

void _exit (int status)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ffe7 	bl	8002d20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d52:	bf00      	nop
 8002d54:	e7fd      	b.n	8002d52 <_exit+0x12>

08002d56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e00a      	b.n	8002d7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d68:	f3af 8000 	nop.w
 8002d6c:	4601      	mov	r1, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	60ba      	str	r2, [r7, #8]
 8002d74:	b2ca      	uxtb	r2, r1
 8002d76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	dbf0      	blt.n	8002d68 <_read+0x12>
  }

  return len;
 8002d86:	687b      	ldr	r3, [r7, #4]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e009      	b.n	8002db6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	60ba      	str	r2, [r7, #8]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3301      	adds	r3, #1
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	dbf1      	blt.n	8002da2 <_write+0x12>
  }
  return len;
 8002dbe:	687b      	ldr	r3, [r7, #4]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_close>:

int _close(int file)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002df0:	605a      	str	r2, [r3, #4]
  return 0;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <_isatty>:

int _isatty(int file)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e08:	2301      	movs	r3, #1
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e38:	4a14      	ldr	r2, [pc, #80]	@ (8002e8c <_sbrk+0x5c>)
 8002e3a:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <_sbrk+0x60>)
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e44:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <_sbrk+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <_sbrk+0x64>)
 8002e4e:	4a12      	ldr	r2, [pc, #72]	@ (8002e98 <_sbrk+0x68>)
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e52:	4b10      	ldr	r3, [pc, #64]	@ (8002e94 <_sbrk+0x64>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d207      	bcs.n	8002e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e60:	f00d fc08 	bl	8010674 <__errno>
 8002e64:	4603      	mov	r3, r0
 8002e66:	220c      	movs	r2, #12
 8002e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6e:	e009      	b.n	8002e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e70:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <_sbrk+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e76:	4b07      	ldr	r3, [pc, #28]	@ (8002e94 <_sbrk+0x64>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a05      	ldr	r2, [pc, #20]	@ (8002e94 <_sbrk+0x64>)
 8002e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e82:	68fb      	ldr	r3, [r7, #12]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20050000 	.word	0x20050000
 8002e90:	00000400 	.word	0x00000400
 8002e94:	20000820 	.word	0x20000820
 8002e98:	200046c8 	.word	0x200046c8

08002e9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ea0:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <SystemInit+0x20>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea6:	4a05      	ldr	r2, [pc, #20]	@ (8002ebc <SystemInit+0x20>)
 8002ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8002ec0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ef8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ec4:	f7ff ffea 	bl	8002e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ec8:	480c      	ldr	r0, [pc, #48]	@ (8002efc <LoopForever+0x6>)
  ldr r1, =_edata
 8002eca:	490d      	ldr	r1, [pc, #52]	@ (8002f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f04 <LoopForever+0xe>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed0:	e002      	b.n	8002ed8 <LoopCopyDataInit>

08002ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ed6:	3304      	adds	r3, #4

08002ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002edc:	d3f9      	bcc.n	8002ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ede:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8002f0c <LoopForever+0x16>)
  movs r3, #0
 8002ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee4:	e001      	b.n	8002eea <LoopFillZerobss>

08002ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee8:	3204      	adds	r2, #4

08002eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eec:	d3fb      	bcc.n	8002ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eee:	f00d fbc7 	bl	8010680 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ef2:	f7ff f811 	bl	8001f18 <main>

08002ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ef6:	e7fe      	b.n	8002ef6 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8002ef8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f00:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8002f04:	08012994 	.word	0x08012994
  ldr r2, =_sbss
 8002f08:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8002f0c:	200046c8 	.word	0x200046c8

08002f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f10:	e7fe      	b.n	8002f10 <ADC1_2_IRQHandler>

08002f12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1c:	2003      	movs	r0, #3
 8002f1e:	f000 ff9e 	bl	8003e5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f22:	200f      	movs	r0, #15
 8002f24:	f7ff fe3e 	bl	8002ba4 <HAL_InitTick>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	71fb      	strb	r3, [r7, #7]
 8002f32:	e001      	b.n	8002f38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f34:	f7ff fbea 	bl	800270c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f38:	79fb      	ldrb	r3, [r7, #7]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <HAL_IncTick+0x20>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <HAL_IncTick+0x24>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	4a04      	ldr	r2, [pc, #16]	@ (8002f68 <HAL_IncTick+0x24>)
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000008 	.word	0x20000008
 8002f68:	20000824 	.word	0x20000824

08002f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f70:	4b03      	ldr	r3, [pc, #12]	@ (8002f80 <HAL_GetTick+0x14>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000824 	.word	0x20000824

08002f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f8c:	f7ff ffee 	bl	8002f6c <HAL_GetTick>
 8002f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d005      	beq.n	8002faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <HAL_Delay+0x44>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002faa:	bf00      	nop
 8002fac:	f7ff ffde 	bl	8002f6c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d8f7      	bhi.n	8002fac <HAL_Delay+0x28>
  {
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000008 	.word	0x20000008

08002fcc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0ed      	b.n	80031ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fbb6 	bl	800275c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003000:	f7ff ffb4 	bl	8002f6c <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003006:	e012      	b.n	800302e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003008:	f7ff ffb0 	bl	8002f6c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b0a      	cmp	r3, #10
 8003014:	d90b      	bls.n	800302e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2205      	movs	r2, #5
 8003026:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0c5      	b.n	80031ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0e5      	beq.n	8003008 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0202 	bic.w	r2, r2, #2
 800304a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800304c:	f7ff ff8e 	bl	8002f6c <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003052:	e012      	b.n	800307a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003054:	f7ff ff8a 	bl	8002f6c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b0a      	cmp	r3, #10
 8003060:	d90b      	bls.n	800307a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2205      	movs	r2, #5
 8003072:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e09f      	b.n	80031ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e5      	bne.n	8003054 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	7e1b      	ldrb	r3, [r3, #24]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d108      	bne.n	80030a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e007      	b.n	80030b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7e5b      	ldrb	r3, [r3, #25]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d108      	bne.n	80030cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e007      	b.n	80030dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	7e9b      	ldrb	r3, [r3, #26]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d108      	bne.n	80030f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0220 	orr.w	r2, r2, #32
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e007      	b.n	8003106 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0220 	bic.w	r2, r2, #32
 8003104:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	7edb      	ldrb	r3, [r3, #27]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d108      	bne.n	8003120 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0210 	bic.w	r2, r2, #16
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e007      	b.n	8003130 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0210 	orr.w	r2, r2, #16
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	7f1b      	ldrb	r3, [r3, #28]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d108      	bne.n	800314a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0208 	orr.w	r2, r2, #8
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e007      	b.n	800315a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0208 	bic.w	r2, r2, #8
 8003158:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7f5b      	ldrb	r3, [r3, #29]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d108      	bne.n	8003174 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0204 	orr.w	r2, r2, #4
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	e007      	b.n	8003184 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0204 	bic.w	r2, r2, #4
 8003182:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	ea42 0103 	orr.w	r1, r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	1e5a      	subs	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031da:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d003      	beq.n	80031ea <HAL_CAN_ConfigFilter+0x26>
 80031e2:	7cfb      	ldrb	r3, [r7, #19]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	f040 80be 	bne.w	8003366 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80031ea:	4b65      	ldr	r3, [pc, #404]	@ (8003380 <HAL_CAN_ConfigFilter+0x1bc>)
 80031ec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003204:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	431a      	orrs	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2201      	movs	r2, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	43db      	mvns	r3, r3
 800323c:	401a      	ands	r2, r3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d123      	bne.n	8003294 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	43db      	mvns	r3, r3
 8003256:	401a      	ands	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800326e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3248      	adds	r2, #72	@ 0x48
 8003274:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003288:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800328a:	6979      	ldr	r1, [r7, #20]
 800328c:	3348      	adds	r3, #72	@ 0x48
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d122      	bne.n	80032e2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80032bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	3248      	adds	r2, #72	@ 0x48
 80032c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032d8:	6979      	ldr	r1, [r7, #20]
 80032da:	3348      	adds	r3, #72	@ 0x48
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	440b      	add	r3, r1
 80032e0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	43db      	mvns	r3, r3
 80032f4:	401a      	ands	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80032fc:	e007      	b.n	800330e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	431a      	orrs	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	43db      	mvns	r3, r3
 8003320:	401a      	ands	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003328:	e007      	b.n	800333a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	431a      	orrs	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d107      	bne.n	8003352 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	431a      	orrs	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003358:	f023 0201 	bic.w	r2, r3, #1
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e006      	b.n	8003374 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
  }
}
 8003374:	4618      	mov	r0, r3
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40006400 	.word	0x40006400

08003384 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d12e      	bne.n	80033f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033b0:	f7ff fddc 	bl	8002f6c <HAL_GetTick>
 80033b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033b6:	e012      	b.n	80033de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033b8:	f7ff fdd8 	bl	8002f6c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b0a      	cmp	r3, #10
 80033c4:	d90b      	bls.n	80033de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2205      	movs	r2, #5
 80033d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e012      	b.n	8003404 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e5      	bne.n	80033b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e006      	b.n	8003404 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
  }
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	@ 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003420:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800342a:	7ffb      	ldrb	r3, [r7, #31]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d003      	beq.n	8003438 <HAL_CAN_AddTxMessage+0x2c>
 8003430:	7ffb      	ldrb	r3, [r7, #31]
 8003432:	2b02      	cmp	r3, #2
 8003434:	f040 80ad 	bne.w	8003592 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8095 	beq.w	8003582 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	0e1b      	lsrs	r3, r3, #24
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003462:	2201      	movs	r2, #1
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	409a      	lsls	r2, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10d      	bne.n	8003490 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	6809      	ldr	r1, [r1, #0]
 8003482:	431a      	orrs	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	3318      	adds	r3, #24
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	440b      	add	r3, r1
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e00f      	b.n	80034b0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800349a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034a0:	68f9      	ldr	r1, [r7, #12]
 80034a2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80034a4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	3318      	adds	r3, #24
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	440b      	add	r3, r1
 80034ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6819      	ldr	r1, [r3, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3318      	adds	r3, #24
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	440b      	add	r3, r1
 80034c0:	3304      	adds	r3, #4
 80034c2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	7d1b      	ldrb	r3, [r3, #20]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d111      	bne.n	80034f0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3318      	adds	r3, #24
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	4413      	add	r3, r2
 80034d8:	3304      	adds	r3, #4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	6811      	ldr	r1, [r2, #0]
 80034e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	3318      	adds	r3, #24
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	440b      	add	r3, r1
 80034ec:	3304      	adds	r3, #4
 80034ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3307      	adds	r3, #7
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	061a      	lsls	r2, r3, #24
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3306      	adds	r3, #6
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3305      	adds	r3, #5
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	021b      	lsls	r3, r3, #8
 800350a:	4313      	orrs	r3, r2
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	3204      	adds	r2, #4
 8003510:	7812      	ldrb	r2, [r2, #0]
 8003512:	4610      	mov	r0, r2
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	6811      	ldr	r1, [r2, #0]
 8003518:	ea43 0200 	orr.w	r2, r3, r0
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	440b      	add	r3, r1
 8003522:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003526:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3303      	adds	r3, #3
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	061a      	lsls	r2, r3, #24
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3302      	adds	r3, #2
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	041b      	lsls	r3, r3, #16
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3301      	adds	r3, #1
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	4313      	orrs	r3, r2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	7812      	ldrb	r2, [r2, #0]
 8003548:	4610      	mov	r0, r2
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	6811      	ldr	r1, [r2, #0]
 800354e:	ea43 0200 	orr.w	r2, r3, r0
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	440b      	add	r3, r1
 8003558:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800355c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	3318      	adds	r3, #24
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	4413      	add	r3, r2
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	6811      	ldr	r1, [r2, #0]
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3318      	adds	r3, #24
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	440b      	add	r3, r1
 800357c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	e00e      	b.n	80035a0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e006      	b.n	80035a0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
  }
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3724      	adds	r7, #36	@ 0x24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035be:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80035c0:	7afb      	ldrb	r3, [r7, #11]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d002      	beq.n	80035cc <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d11d      	bne.n	8003608 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3301      	adds	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3301      	adds	r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3301      	adds	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003616:	b480      	push	{r7}
 8003618:	b087      	sub	sp, #28
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800362a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800362c:	7dfb      	ldrb	r3, [r7, #23]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d003      	beq.n	800363a <HAL_CAN_GetRxMessage+0x24>
 8003632:	7dfb      	ldrb	r3, [r7, #23]
 8003634:	2b02      	cmp	r3, #2
 8003636:	f040 8103 	bne.w	8003840 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10e      	bne.n	800365e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d116      	bne.n	800367c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0f7      	b.n	800384e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d107      	bne.n	800367c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0e8      	b.n	800384e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	331b      	adds	r3, #27
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	4413      	add	r3, r2
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0204 	and.w	r2, r3, #4
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10c      	bne.n	80036b4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	331b      	adds	r3, #27
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0d5b      	lsrs	r3, r3, #21
 80036aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	e00b      	b.n	80036cc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	331b      	adds	r3, #27
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	4413      	add	r3, r2
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	08db      	lsrs	r3, r3, #3
 80036c4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	331b      	adds	r3, #27
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	4413      	add	r3, r2
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0202 	and.w	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	331b      	adds	r3, #27
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	4413      	add	r3, r2
 80036ee:	3304      	adds	r3, #4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2208      	movs	r2, #8
 80036fe:	611a      	str	r2, [r3, #16]
 8003700:	e00b      	b.n	800371a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	331b      	adds	r3, #27
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	4413      	add	r3, r2
 800370e:	3304      	adds	r3, #4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 020f 	and.w	r2, r3, #15
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	331b      	adds	r3, #27
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	4413      	add	r3, r2
 8003726:	3304      	adds	r3, #4
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	b2da      	uxtb	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	331b      	adds	r3, #27
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	4413      	add	r3, r2
 800373e:	3304      	adds	r3, #4
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	0c1b      	lsrs	r3, r3, #16
 8003744:	b29a      	uxth	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	4413      	add	r3, r2
 8003754:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	4413      	add	r3, r2
 800376a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	0a1a      	lsrs	r2, r3, #8
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	4413      	add	r3, r2
 8003784:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0c1a      	lsrs	r2, r3, #16
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	3302      	adds	r3, #2
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	4413      	add	r3, r2
 800379e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	0e1a      	lsrs	r2, r3, #24
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	3303      	adds	r3, #3
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	3304      	adds	r3, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	0a1a      	lsrs	r2, r3, #8
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	3305      	adds	r3, #5
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	0c1a      	lsrs	r2, r3, #16
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	3306      	adds	r3, #6
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	4413      	add	r3, r2
 8003804:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	0e1a      	lsrs	r2, r3, #24
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	3307      	adds	r3, #7
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0220 	orr.w	r2, r2, #32
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	e007      	b.n	800383c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0220 	orr.w	r2, r2, #32
 800383a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	e006      	b.n	800384e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d002      	beq.n	8003878 <HAL_CAN_ActivateNotification+0x1e>
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d109      	bne.n	800388c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6959      	ldr	r1, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	e006      	b.n	800389a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08a      	sub	sp, #40	@ 0x28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d07c      	beq.n	80039e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d023      	beq.n	800393e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2201      	movs	r2, #1
 80038fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f983 	bl	8003c14 <HAL_CAN_TxMailbox0CompleteCallback>
 800390e:	e016      	b.n	800393e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d004      	beq.n	8003924 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
 8003922:	e00c      	b.n	800393e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d004      	beq.n	8003938 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
 8003936:	e002      	b.n	800393e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f989 	bl	8003c50 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d024      	beq.n	8003992 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003950:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f963 	bl	8003c28 <HAL_CAN_TxMailbox1CompleteCallback>
 8003962:	e016      	b.n	8003992 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
 8003976:	e00c      	b.n	8003992 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
 800398a:	e002      	b.n	8003992 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f969 	bl	8003c64 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d024      	beq.n	80039e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80039a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f943 	bl	8003c3c <HAL_CAN_TxMailbox2CompleteCallback>
 80039b6:	e016      	b.n	80039e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ca:	e00c      	b.n	80039e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80039de:	e002      	b.n	80039e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f949 	bl	8003c78 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00c      	beq.n	8003a0a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2210      	movs	r2, #16
 8003a08:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00b      	beq.n	8003a2c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d006      	beq.n	8003a2c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2208      	movs	r2, #8
 8003a24:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f930 	bl	8003c8c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fe f977 	bl	8001d38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00c      	beq.n	8003a6e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00b      	beq.n	8003a90 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d006      	beq.n	8003a90 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2208      	movs	r2, #8
 8003a88:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f912 	bl	8003cb4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f8f9 	bl	8003ca0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8fc 	bl	8003cc8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d006      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2208      	movs	r2, #8
 8003aea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f8f5 	bl	8003cdc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d07b      	beq.n	8003bf4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d072      	beq.n	8003bec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	f043 0304 	orr.w	r3, r3, #4
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d043      	beq.n	8003bec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d03e      	beq.n	8003bec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b74:	2b60      	cmp	r3, #96	@ 0x60
 8003b76:	d02b      	beq.n	8003bd0 <HAL_CAN_IRQHandler+0x32a>
 8003b78:	2b60      	cmp	r3, #96	@ 0x60
 8003b7a:	d82e      	bhi.n	8003bda <HAL_CAN_IRQHandler+0x334>
 8003b7c:	2b50      	cmp	r3, #80	@ 0x50
 8003b7e:	d022      	beq.n	8003bc6 <HAL_CAN_IRQHandler+0x320>
 8003b80:	2b50      	cmp	r3, #80	@ 0x50
 8003b82:	d82a      	bhi.n	8003bda <HAL_CAN_IRQHandler+0x334>
 8003b84:	2b40      	cmp	r3, #64	@ 0x40
 8003b86:	d019      	beq.n	8003bbc <HAL_CAN_IRQHandler+0x316>
 8003b88:	2b40      	cmp	r3, #64	@ 0x40
 8003b8a:	d826      	bhi.n	8003bda <HAL_CAN_IRQHandler+0x334>
 8003b8c:	2b30      	cmp	r3, #48	@ 0x30
 8003b8e:	d010      	beq.n	8003bb2 <HAL_CAN_IRQHandler+0x30c>
 8003b90:	2b30      	cmp	r3, #48	@ 0x30
 8003b92:	d822      	bhi.n	8003bda <HAL_CAN_IRQHandler+0x334>
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d002      	beq.n	8003b9e <HAL_CAN_IRQHandler+0x2f8>
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d005      	beq.n	8003ba8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b9c:	e01d      	b.n	8003bda <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	f043 0308 	orr.w	r3, r3, #8
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ba6:	e019      	b.n	8003bdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	f043 0310 	orr.w	r3, r3, #16
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003bb0:	e014      	b.n	8003bdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb4:	f043 0320 	orr.w	r3, r3, #32
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003bba:	e00f      	b.n	8003bdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bc2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003bc4:	e00a      	b.n	8003bdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003bce:	e005      	b.n	8003bdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003bd8:	e000      	b.n	8003bdc <HAL_CAN_IRQHandler+0x336>
            break;
 8003bda:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003bea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f872 	bl	8003cf0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3728      	adds	r7, #40	@ 0x28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d14:	4b0c      	ldr	r3, [pc, #48]	@ (8003d48 <__NVIC_SetPriorityGrouping+0x44>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d20:	4013      	ands	r3, r2
 8003d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d36:	4a04      	ldr	r2, [pc, #16]	@ (8003d48 <__NVIC_SetPriorityGrouping+0x44>)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	60d3      	str	r3, [r2, #12]
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	e000ed00 	.word	0xe000ed00

08003d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d50:	4b04      	ldr	r3, [pc, #16]	@ (8003d64 <__NVIC_GetPriorityGrouping+0x18>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	0a1b      	lsrs	r3, r3, #8
 8003d56:	f003 0307 	and.w	r3, r3, #7
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	e000ed00 	.word	0xe000ed00

08003d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	db0b      	blt.n	8003d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	f003 021f 	and.w	r2, r3, #31
 8003d80:	4907      	ldr	r1, [pc, #28]	@ (8003da0 <__NVIC_EnableIRQ+0x38>)
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2001      	movs	r0, #1
 8003d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	e000e100 	.word	0xe000e100

08003da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	6039      	str	r1, [r7, #0]
 8003dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	db0a      	blt.n	8003dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	490c      	ldr	r1, [pc, #48]	@ (8003df0 <__NVIC_SetPriority+0x4c>)
 8003dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc2:	0112      	lsls	r2, r2, #4
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dcc:	e00a      	b.n	8003de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	4908      	ldr	r1, [pc, #32]	@ (8003df4 <__NVIC_SetPriority+0x50>)
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	3b04      	subs	r3, #4
 8003ddc:	0112      	lsls	r2, r2, #4
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	440b      	add	r3, r1
 8003de2:	761a      	strb	r2, [r3, #24]
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000e100 	.word	0xe000e100
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b089      	sub	sp, #36	@ 0x24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f1c3 0307 	rsb	r3, r3, #7
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	bf28      	it	cs
 8003e16:	2304      	movcs	r3, #4
 8003e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d902      	bls.n	8003e28 <NVIC_EncodePriority+0x30>
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	3b03      	subs	r3, #3
 8003e26:	e000      	b.n	8003e2a <NVIC_EncodePriority+0x32>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43da      	mvns	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e40:	f04f 31ff 	mov.w	r1, #4294967295
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4a:	43d9      	mvns	r1, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e50:	4313      	orrs	r3, r2
         );
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3724      	adds	r7, #36	@ 0x24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ff4c 	bl	8003d04 <__NVIC_SetPriorityGrouping>
}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e86:	f7ff ff61 	bl	8003d4c <__NVIC_GetPriorityGrouping>
 8003e8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	6978      	ldr	r0, [r7, #20]
 8003e92:	f7ff ffb1 	bl	8003df8 <NVIC_EncodePriority>
 8003e96:	4602      	mov	r2, r0
 8003e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff ff80 	bl	8003da4 <__NVIC_SetPriority>
}
 8003ea4:	bf00      	nop
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff ff54 	bl	8003d68 <__NVIC_EnableIRQ>
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ed6:	e166      	b.n	80041a6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	2101      	movs	r1, #1
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8158 	beq.w	80041a0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d005      	beq.n	8003f08 <HAL_GPIO_Init+0x40>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 0303 	and.w	r3, r3, #3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d130      	bne.n	8003f6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	2203      	movs	r2, #3
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f3e:	2201      	movs	r2, #1
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	f003 0201 	and.w	r2, r3, #1
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d017      	beq.n	8003fa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	2203      	movs	r2, #3
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d123      	bne.n	8003ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	08da      	lsrs	r2, r3, #3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3208      	adds	r2, #8
 8003fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	220f      	movs	r2, #15
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	08da      	lsrs	r2, r3, #3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3208      	adds	r2, #8
 8003ff4:	6939      	ldr	r1, [r7, #16]
 8003ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	2203      	movs	r2, #3
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 0203 	and.w	r2, r3, #3
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80b2 	beq.w	80041a0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800403c:	4b61      	ldr	r3, [pc, #388]	@ (80041c4 <HAL_GPIO_Init+0x2fc>)
 800403e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004040:	4a60      	ldr	r2, [pc, #384]	@ (80041c4 <HAL_GPIO_Init+0x2fc>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6613      	str	r3, [r2, #96]	@ 0x60
 8004048:	4b5e      	ldr	r3, [pc, #376]	@ (80041c4 <HAL_GPIO_Init+0x2fc>)
 800404a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004054:	4a5c      	ldr	r2, [pc, #368]	@ (80041c8 <HAL_GPIO_Init+0x300>)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	089b      	lsrs	r3, r3, #2
 800405a:	3302      	adds	r3, #2
 800405c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004060:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	220f      	movs	r2, #15
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800407e:	d02b      	beq.n	80040d8 <HAL_GPIO_Init+0x210>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a52      	ldr	r2, [pc, #328]	@ (80041cc <HAL_GPIO_Init+0x304>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d025      	beq.n	80040d4 <HAL_GPIO_Init+0x20c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a51      	ldr	r2, [pc, #324]	@ (80041d0 <HAL_GPIO_Init+0x308>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d01f      	beq.n	80040d0 <HAL_GPIO_Init+0x208>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a50      	ldr	r2, [pc, #320]	@ (80041d4 <HAL_GPIO_Init+0x30c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d019      	beq.n	80040cc <HAL_GPIO_Init+0x204>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a4f      	ldr	r2, [pc, #316]	@ (80041d8 <HAL_GPIO_Init+0x310>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d013      	beq.n	80040c8 <HAL_GPIO_Init+0x200>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a4e      	ldr	r2, [pc, #312]	@ (80041dc <HAL_GPIO_Init+0x314>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00d      	beq.n	80040c4 <HAL_GPIO_Init+0x1fc>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a4d      	ldr	r2, [pc, #308]	@ (80041e0 <HAL_GPIO_Init+0x318>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d007      	beq.n	80040c0 <HAL_GPIO_Init+0x1f8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a4c      	ldr	r2, [pc, #304]	@ (80041e4 <HAL_GPIO_Init+0x31c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d101      	bne.n	80040bc <HAL_GPIO_Init+0x1f4>
 80040b8:	2307      	movs	r3, #7
 80040ba:	e00e      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040bc:	2308      	movs	r3, #8
 80040be:	e00c      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040c0:	2306      	movs	r3, #6
 80040c2:	e00a      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040c4:	2305      	movs	r3, #5
 80040c6:	e008      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040c8:	2304      	movs	r3, #4
 80040ca:	e006      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040cc:	2303      	movs	r3, #3
 80040ce:	e004      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e002      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040d8:	2300      	movs	r3, #0
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	f002 0203 	and.w	r2, r2, #3
 80040e0:	0092      	lsls	r2, r2, #2
 80040e2:	4093      	lsls	r3, r2
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040ea:	4937      	ldr	r1, [pc, #220]	@ (80041c8 <HAL_GPIO_Init+0x300>)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	3302      	adds	r3, #2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040f8:	4b3b      	ldr	r3, [pc, #236]	@ (80041e8 <HAL_GPIO_Init+0x320>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	43db      	mvns	r3, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800411c:	4a32      	ldr	r2, [pc, #200]	@ (80041e8 <HAL_GPIO_Init+0x320>)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004122:	4b31      	ldr	r3, [pc, #196]	@ (80041e8 <HAL_GPIO_Init+0x320>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	43db      	mvns	r3, r3
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004146:	4a28      	ldr	r2, [pc, #160]	@ (80041e8 <HAL_GPIO_Init+0x320>)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800414c:	4b26      	ldr	r3, [pc, #152]	@ (80041e8 <HAL_GPIO_Init+0x320>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	43db      	mvns	r3, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004170:	4a1d      	ldr	r2, [pc, #116]	@ (80041e8 <HAL_GPIO_Init+0x320>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004176:	4b1c      	ldr	r3, [pc, #112]	@ (80041e8 <HAL_GPIO_Init+0x320>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	43db      	mvns	r3, r3
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800419a:	4a13      	ldr	r2, [pc, #76]	@ (80041e8 <HAL_GPIO_Init+0x320>)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	3301      	adds	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f47f ae91 	bne.w	8003ed8 <HAL_GPIO_Init+0x10>
  }
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40010000 	.word	0x40010000
 80041cc:	48000400 	.word	0x48000400
 80041d0:	48000800 	.word	0x48000800
 80041d4:	48000c00 	.word	0x48000c00
 80041d8:	48001000 	.word	0x48001000
 80041dc:	48001400 	.word	0x48001400
 80041e0:	48001800 	.word	0x48001800
 80041e4:	48001c00 	.word	0x48001c00
 80041e8:	40010400 	.word	0x40010400

080041ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
 80041f8:	4613      	mov	r3, r2
 80041fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041fc:	787b      	ldrb	r3, [r7, #1]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004208:	e002      	b.n	8004210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800420a:	887a      	ldrh	r2, [r7, #2]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4013      	ands	r3, r2
 8004234:	041a      	lsls	r2, r3, #16
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	43d9      	mvns	r1, r3
 800423a:	887b      	ldrh	r3, [r7, #2]
 800423c:	400b      	ands	r3, r1
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	619a      	str	r2, [r3, #24]
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800425a:	4b08      	ldr	r3, [pc, #32]	@ (800427c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d006      	beq.n	8004274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004266:	4a05      	ldr	r2, [pc, #20]	@ (800427c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f806 	bl	8004280 <HAL_GPIO_EXTI_Callback>
  }
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40010400 	.word	0x40010400

08004280 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e08d      	b.n	80043c4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d106      	bne.n	80042c2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7fe faf9 	bl	80028b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2224      	movs	r2, #36	@ 0x24
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d107      	bne.n	8004310 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800430c:	609a      	str	r2, [r3, #8]
 800430e:	e006      	b.n	800431e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800431c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d108      	bne.n	8004338 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	e007      	b.n	8004348 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004346:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800435a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800436a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69d9      	ldr	r1, [r3, #28]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1a      	ldr	r2, [r3, #32]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	461a      	mov	r2, r3
 80043d8:	460b      	mov	r3, r1
 80043da:	817b      	strh	r3, [r7, #10]
 80043dc:	4613      	mov	r3, r2
 80043de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	f040 80fd 	bne.w	80045e8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_I2C_Master_Transmit+0x30>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e0f6      	b.n	80045ea <HAL_I2C_Master_Transmit+0x21e>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004404:	f7fe fdb2 	bl	8002f6c <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	2319      	movs	r3, #25
 8004410:	2201      	movs	r2, #1
 8004412:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 faf6 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e0e1      	b.n	80045ea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2221      	movs	r2, #33	@ 0x21
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2210      	movs	r2, #16
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	893a      	ldrh	r2, [r7, #8]
 8004446:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	2bff      	cmp	r3, #255	@ 0xff
 8004456:	d906      	bls.n	8004466 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	22ff      	movs	r2, #255	@ 0xff
 800445c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800445e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e007      	b.n	8004476 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004470:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004474:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d024      	beq.n	80044c8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	781a      	ldrb	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	3301      	adds	r3, #1
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	8979      	ldrh	r1, [r7, #10]
 80044ba:	4b4e      	ldr	r3, [pc, #312]	@ (80045f4 <HAL_I2C_Master_Transmit+0x228>)
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fcf1 	bl	8004ea8 <I2C_TransferConfig>
 80044c6:	e066      	b.n	8004596 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	8979      	ldrh	r1, [r7, #10]
 80044d0:	4b48      	ldr	r3, [pc, #288]	@ (80045f4 <HAL_I2C_Master_Transmit+0x228>)
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fce6 	bl	8004ea8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80044dc:	e05b      	b.n	8004596 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	6a39      	ldr	r1, [r7, #32]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fae9 	bl	8004aba <I2C_WaitOnTXISFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e07b      	b.n	80045ea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	781a      	ldrb	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d034      	beq.n	8004596 <HAL_I2C_Master_Transmit+0x1ca>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004530:	2b00      	cmp	r3, #0
 8004532:	d130      	bne.n	8004596 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	2200      	movs	r2, #0
 800453c:	2180      	movs	r1, #128	@ 0x80
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fa62 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e04d      	b.n	80045ea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004552:	b29b      	uxth	r3, r3
 8004554:	2bff      	cmp	r3, #255	@ 0xff
 8004556:	d90e      	bls.n	8004576 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	22ff      	movs	r2, #255	@ 0xff
 800455c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004562:	b2da      	uxtb	r2, r3
 8004564:	8979      	ldrh	r1, [r7, #10]
 8004566:	2300      	movs	r3, #0
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 fc9a 	bl	8004ea8 <I2C_TransferConfig>
 8004574:	e00f      	b.n	8004596 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004584:	b2da      	uxtb	r2, r3
 8004586:	8979      	ldrh	r1, [r7, #10]
 8004588:	2300      	movs	r3, #0
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fc89 	bl	8004ea8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d19e      	bne.n	80044de <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	6a39      	ldr	r1, [r7, #32]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 facf 	bl	8004b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e01a      	b.n	80045ea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2220      	movs	r2, #32
 80045ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6859      	ldr	r1, [r3, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b0c      	ldr	r3, [pc, #48]	@ (80045f8 <HAL_I2C_Master_Transmit+0x22c>)
 80045c8:	400b      	ands	r3, r1
 80045ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	e000      	b.n	80045ea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80045e8:	2302      	movs	r3, #2
  }
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	80002000 	.word	0x80002000
 80045f8:	fe00e800 	.word	0xfe00e800

080045fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	461a      	mov	r2, r3
 8004608:	460b      	mov	r3, r1
 800460a:	817b      	strh	r3, [r7, #10]
 800460c:	4613      	mov	r3, r2
 800460e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b20      	cmp	r3, #32
 800461a:	f040 80db 	bne.w	80047d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_I2C_Master_Receive+0x30>
 8004628:	2302      	movs	r3, #2
 800462a:	e0d4      	b.n	80047d6 <HAL_I2C_Master_Receive+0x1da>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004634:	f7fe fc9a 	bl	8002f6c <HAL_GetTick>
 8004638:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	2319      	movs	r3, #25
 8004640:	2201      	movs	r2, #1
 8004642:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f9de 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e0bf      	b.n	80047d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2222      	movs	r2, #34	@ 0x22
 800465a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2210      	movs	r2, #16
 8004662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	893a      	ldrh	r2, [r7, #8]
 8004676:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	2bff      	cmp	r3, #255	@ 0xff
 8004686:	d90e      	bls.n	80046a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004692:	b2da      	uxtb	r2, r3
 8004694:	8979      	ldrh	r1, [r7, #10]
 8004696:	4b52      	ldr	r3, [pc, #328]	@ (80047e0 <HAL_I2C_Master_Receive+0x1e4>)
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fc02 	bl	8004ea8 <I2C_TransferConfig>
 80046a4:	e06d      	b.n	8004782 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	8979      	ldrh	r1, [r7, #10]
 80046b8:	4b49      	ldr	r3, [pc, #292]	@ (80047e0 <HAL_I2C_Master_Receive+0x1e4>)
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fbf1 	bl	8004ea8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80046c6:	e05c      	b.n	8004782 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	6a39      	ldr	r1, [r7, #32]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 fa7f 	bl	8004bd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e07c      	b.n	80047d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d034      	beq.n	8004782 <HAL_I2C_Master_Receive+0x186>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471c:	2b00      	cmp	r3, #0
 800471e:	d130      	bne.n	8004782 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	2200      	movs	r2, #0
 8004728:	2180      	movs	r1, #128	@ 0x80
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f96c 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e04d      	b.n	80047d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	2bff      	cmp	r3, #255	@ 0xff
 8004742:	d90e      	bls.n	8004762 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	22ff      	movs	r2, #255	@ 0xff
 8004748:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474e:	b2da      	uxtb	r2, r3
 8004750:	8979      	ldrh	r1, [r7, #10]
 8004752:	2300      	movs	r3, #0
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fba4 	bl	8004ea8 <I2C_TransferConfig>
 8004760:	e00f      	b.n	8004782 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004770:	b2da      	uxtb	r2, r3
 8004772:	8979      	ldrh	r1, [r7, #10]
 8004774:	2300      	movs	r3, #0
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fb93 	bl	8004ea8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d19d      	bne.n	80046c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	6a39      	ldr	r1, [r7, #32]
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f9d9 	bl	8004b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e01a      	b.n	80047d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2220      	movs	r2, #32
 80047a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6859      	ldr	r1, [r3, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4b0c      	ldr	r3, [pc, #48]	@ (80047e4 <HAL_I2C_Master_Receive+0x1e8>)
 80047b4:	400b      	ands	r3, r1
 80047b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	e000      	b.n	80047d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80047d4:	2302      	movs	r3, #2
  }
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	80002400 	.word	0x80002400
 80047e4:	fe00e800 	.word	0xfe00e800

080047e8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	@ 0x28
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	460b      	mov	r3, r1
 80047f6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b20      	cmp	r3, #32
 8004806:	f040 80d6 	bne.w	80049b6 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004814:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004818:	d101      	bne.n	800481e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800481a:	2302      	movs	r3, #2
 800481c:	e0cc      	b.n	80049b8 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_I2C_IsDeviceReady+0x44>
 8004828:	2302      	movs	r3, #2
 800482a:	e0c5      	b.n	80049b8 <HAL_I2C_IsDeviceReady+0x1d0>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2224      	movs	r2, #36	@ 0x24
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <HAL_I2C_IsDeviceReady+0x72>
 800484a:	897b      	ldrh	r3, [r7, #10]
 800484c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004850:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004854:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004858:	e006      	b.n	8004868 <HAL_I2C_IsDeviceReady+0x80>
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004860:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004864:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800486e:	f7fe fb7d 	bl	8002f6c <HAL_GetTick>
 8004872:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b20      	cmp	r3, #32
 8004880:	bf0c      	ite	eq
 8004882:	2301      	moveq	r3, #1
 8004884:	2300      	movne	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b10      	cmp	r3, #16
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80048a0:	e034      	b.n	800490c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a8:	d01a      	beq.n	80048e0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048aa:	f7fe fb5f 	bl	8002f6c <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d302      	bcc.n	80048c0 <HAL_I2C_IsDeviceReady+0xd8>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10f      	bne.n	80048e0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e06b      	b.n	80049b8 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	bf0c      	ite	eq
 80048ee:	2301      	moveq	r3, #1
 80048f0:	2300      	movne	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b10      	cmp	r3, #16
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800490c:	7ffb      	ldrb	r3, [r7, #31]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <HAL_I2C_IsDeviceReady+0x130>
 8004912:	7fbb      	ldrb	r3, [r7, #30]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0c4      	beq.n	80048a2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b10      	cmp	r3, #16
 8004924:	d01a      	beq.n	800495c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2200      	movs	r2, #0
 800492e:	2120      	movs	r1, #32
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f869 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e03b      	b.n	80049b8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2220      	movs	r2, #32
 8004946:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e02d      	b.n	80049b8 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2200      	movs	r2, #0
 8004964:	2120      	movs	r1, #32
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f84e 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e020      	b.n	80049b8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2210      	movs	r2, #16
 800497c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2220      	movs	r2, #32
 8004984:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	3301      	adds	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	f63f af56 	bhi.w	8004842 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a2:	f043 0220 	orr.w	r2, r3, #32
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
  }
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3720      	adds	r7, #32
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d103      	bne.n	80049de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2200      	movs	r2, #0
 80049dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d007      	beq.n	80049fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	619a      	str	r2, [r3, #24]
  }
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a18:	e03b      	b.n	8004a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	6839      	ldr	r1, [r7, #0]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f962 	bl	8004ce8 <I2C_IsErrorOccurred>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e041      	b.n	8004ab2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a34:	d02d      	beq.n	8004a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fe fa99 	bl	8002f6c <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d122      	bne.n	8004a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d113      	bne.n	8004a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	f043 0220 	orr.w	r2, r3, #32
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e00f      	b.n	8004ab2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699a      	ldr	r2, [r3, #24]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	bf0c      	ite	eq
 8004aa2:	2301      	moveq	r3, #1
 8004aa4:	2300      	movne	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d0b4      	beq.n	8004a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ac6:	e033      	b.n	8004b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f90b 	bl	8004ce8 <I2C_IsErrorOccurred>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e031      	b.n	8004b40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d025      	beq.n	8004b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae4:	f7fe fa42 	bl	8002f6c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d302      	bcc.n	8004afa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d11a      	bne.n	8004b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d013      	beq.n	8004b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0c:	f043 0220 	orr.w	r2, r3, #32
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e007      	b.n	8004b40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d1c4      	bne.n	8004ac8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b54:	e02f      	b.n	8004bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f8c4 	bl	8004ce8 <I2C_IsErrorOccurred>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e02d      	b.n	8004bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6a:	f7fe f9ff 	bl	8002f6c <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d11a      	bne.n	8004bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d013      	beq.n	8004bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b92:	f043 0220 	orr.w	r2, r3, #32
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e007      	b.n	8004bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f003 0320 	and.w	r3, r3, #32
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d1c8      	bne.n	8004b56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004be0:	e071      	b.n	8004cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f87e 	bl	8004ce8 <I2C_IsErrorOccurred>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d13b      	bne.n	8004c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d138      	bne.n	8004c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d105      	bne.n	8004c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d121      	bne.n	8004c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2210      	movs	r2, #16
 8004c38:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2220      	movs	r2, #32
 8004c46:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b24      	ldr	r3, [pc, #144]	@ (8004ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004c54:	400b      	ands	r3, r1
 8004c56:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	75fb      	strb	r3, [r7, #23]
 8004c74:	e002      	b.n	8004c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004c7c:	f7fe f976 	bl	8002f6c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d302      	bcc.n	8004c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d119      	bne.n	8004cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004c92:	7dfb      	ldrb	r3, [r7, #23]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d116      	bne.n	8004cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d00f      	beq.n	8004cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004caa:	f043 0220 	orr.w	r2, r3, #32
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d002      	beq.n	8004cda <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d083      	beq.n	8004be2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	fe00e800 	.word	0xfe00e800

08004ce8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d068      	beq.n	8004de6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2210      	movs	r2, #16
 8004d1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d1c:	e049      	b.n	8004db2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d045      	beq.n	8004db2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d26:	f7fe f921 	bl	8002f6c <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d302      	bcc.n	8004d3c <I2C_IsErrorOccurred+0x54>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d13a      	bne.n	8004db2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d5e:	d121      	bne.n	8004da4 <I2C_IsErrorOccurred+0xbc>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d66:	d01d      	beq.n	8004da4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004d68:	7cfb      	ldrb	r3, [r7, #19]
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d01a      	beq.n	8004da4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d7e:	f7fe f8f5 	bl	8002f6c <HAL_GetTick>
 8004d82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d84:	e00e      	b.n	8004da4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d86:	f7fe f8f1 	bl	8002f6c <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b19      	cmp	r3, #25
 8004d92:	d907      	bls.n	8004da4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	f043 0320 	orr.w	r3, r3, #32
 8004d9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004da2:	e006      	b.n	8004db2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	d1e9      	bne.n	8004d86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d003      	beq.n	8004dc8 <I2C_IsErrorOccurred+0xe0>
 8004dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0aa      	beq.n	8004d1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d103      	bne.n	8004dd8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	f043 0304 	orr.w	r3, r3, #4
 8004dde:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00b      	beq.n	8004e32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	f043 0308 	orr.w	r3, r3, #8
 8004e20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00b      	beq.n	8004e54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	f043 0302 	orr.w	r3, r3, #2
 8004e42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004e54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01c      	beq.n	8004e96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7ff fdaf 	bl	80049c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6859      	ldr	r1, [r3, #4]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea4 <I2C_IsErrorOccurred+0x1bc>)
 8004e6e:	400b      	ands	r3, r1
 8004e70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004e96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3728      	adds	r7, #40	@ 0x28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	fe00e800 	.word	0xfe00e800

08004ea8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	817b      	strh	r3, [r7, #10]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004eba:	897b      	ldrh	r3, [r7, #10]
 8004ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ec0:	7a7b      	ldrb	r3, [r7, #9]
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ec8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ed6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	0d5b      	lsrs	r3, r3, #21
 8004ee2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004ee6:	4b08      	ldr	r3, [pc, #32]	@ (8004f08 <I2C_TransferConfig+0x60>)
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	43db      	mvns	r3, r3
 8004eec:	ea02 0103 	and.w	r1, r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	03ff63ff 	.word	0x03ff63ff

08004f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d138      	bne.n	8004f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e032      	b.n	8004f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2224      	movs	r2, #36	@ 0x24
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6819      	ldr	r1, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e000      	b.n	8004f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f94:	2302      	movs	r3, #2
  }
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d139      	bne.n	800502c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e033      	b.n	800502e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2224      	movs	r2, #36	@ 0x24
 8004fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0201 	bic.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ff4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e000      	b.n	800502e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800502c:	2302      	movs	r3, #2
  }
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b086      	sub	sp, #24
 800503e:	af02      	add	r7, sp, #8
 8005040:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e101      	b.n	8005250 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f00a f8bd 	bl	800f1e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2203      	movs	r2, #3
 800506a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f003 ff0a 	bl	8008e92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	7c1a      	ldrb	r2, [r3, #16]
 8005086:	f88d 2000 	strb.w	r2, [sp]
 800508a:	3304      	adds	r3, #4
 800508c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800508e:	f003 fe25 	bl	8008cdc <USB_CoreInit>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0d5      	b.n	8005250 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f003 ff02 	bl	8008eb4 <USB_SetCurrentMode>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e0c6      	b.n	8005250 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050c2:	2300      	movs	r3, #0
 80050c4:	73fb      	strb	r3, [r7, #15]
 80050c6:	e04a      	b.n	800515e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050c8:	7bfa      	ldrb	r2, [r7, #15]
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	3315      	adds	r3, #21
 80050d8:	2201      	movs	r2, #1
 80050da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050dc:	7bfa      	ldrb	r2, [r7, #15]
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	4613      	mov	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	3314      	adds	r3, #20
 80050ec:	7bfa      	ldrb	r2, [r7, #15]
 80050ee:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050f0:	7bfa      	ldrb	r2, [r7, #15]
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	b298      	uxth	r0, r3
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	4613      	mov	r3, r2
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	332e      	adds	r3, #46	@ 0x2e
 8005104:	4602      	mov	r2, r0
 8005106:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005108:	7bfa      	ldrb	r2, [r7, #15]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	3318      	adds	r3, #24
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800511c:	7bfa      	ldrb	r2, [r7, #15]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	331c      	adds	r3, #28
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005130:	7bfa      	ldrb	r2, [r7, #15]
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	3320      	adds	r3, #32
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005144:	7bfa      	ldrb	r2, [r7, #15]
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	4613      	mov	r3, r2
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	3324      	adds	r3, #36	@ 0x24
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	3301      	adds	r3, #1
 800515c:	73fb      	strb	r3, [r7, #15]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	791b      	ldrb	r3, [r3, #4]
 8005162:	7bfa      	ldrb	r2, [r7, #15]
 8005164:	429a      	cmp	r2, r3
 8005166:	d3af      	bcc.n	80050c8 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]
 800516c:	e044      	b.n	80051f8 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800516e:	7bfa      	ldrb	r2, [r7, #15]
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	4613      	mov	r3, r2
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005184:	7bfa      	ldrb	r2, [r7, #15]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005196:	7bfa      	ldrb	r2, [r7, #15]
 8005198:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800519a:	7bfa      	ldrb	r2, [r7, #15]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80051b0:	7bfa      	ldrb	r2, [r7, #15]
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051dc:	7bfa      	ldrb	r2, [r7, #15]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	3301      	adds	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	791b      	ldrb	r3, [r3, #4]
 80051fc:	7bfa      	ldrb	r2, [r7, #15]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d3b5      	bcc.n	800516e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	7c1a      	ldrb	r2, [r3, #16]
 800520a:	f88d 2000 	strb.w	r2, [sp]
 800520e:	3304      	adds	r3, #4
 8005210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005212:	f003 fe9b 	bl	8008f4c <USB_DevInit>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e013      	b.n	8005250 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	7b1b      	ldrb	r3, [r3, #12]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d102      	bne.n	8005244 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f001 f86e 	bl	8006320 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f004 fe52 	bl	8009ef2 <USB_DevDisconnect>

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_PCD_Start+0x1c>
 8005270:	2302      	movs	r3, #2
 8005272:	e01c      	b.n	80052ae <HAL_PCD_Start+0x56>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	7b5b      	ldrb	r3, [r3, #13]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d105      	bne.n	8005290 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f003 fdeb 	bl	8008e70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f004 fe06 	bl	8009eb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80052b6:	b590      	push	{r4, r7, lr}
 80052b8:	b08d      	sub	sp, #52	@ 0x34
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f004 fec4 	bl	800a05a <USB_GetMode>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f040 8481 	bne.w	8005bdc <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f004 fe28 	bl	8009f34 <USB_ReadInterrupts>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 8477 	beq.w	8005bda <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	0a1b      	lsrs	r3, r3, #8
 80052f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f004 fe15 	bl	8009f34 <USB_ReadInterrupts>
 800530a:	4603      	mov	r3, r0
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b02      	cmp	r3, #2
 8005312:	d107      	bne.n	8005324 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695a      	ldr	r2, [r3, #20]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f002 0202 	and.w	r2, r2, #2
 8005322:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f004 fe03 	bl	8009f34 <USB_ReadInterrupts>
 800532e:	4603      	mov	r3, r0
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b10      	cmp	r3, #16
 8005336:	d161      	bne.n	80053fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0210 	bic.w	r2, r2, #16
 8005346:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	f003 020f 	and.w	r2, r3, #15
 8005354:	4613      	mov	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4413      	add	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4413      	add	r3, r2
 8005364:	3304      	adds	r3, #4
 8005366:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	0c5b      	lsrs	r3, r3, #17
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	2b02      	cmp	r3, #2
 8005372:	d124      	bne.n	80053be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d035      	beq.n	80053ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	091b      	lsrs	r3, r3, #4
 8005388:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800538a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800538e:	b29b      	uxth	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	6a38      	ldr	r0, [r7, #32]
 8005394:	f004 fc3a 	bl	8009c0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	091b      	lsrs	r3, r3, #4
 80053a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053a4:	441a      	add	r2, r3
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	091b      	lsrs	r3, r3, #4
 80053b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053b6:	441a      	add	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	615a      	str	r2, [r3, #20]
 80053bc:	e016      	b.n	80053ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	0c5b      	lsrs	r3, r3, #17
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	2b06      	cmp	r3, #6
 80053c8:	d110      	bne.n	80053ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053d0:	2208      	movs	r2, #8
 80053d2:	4619      	mov	r1, r3
 80053d4:	6a38      	ldr	r0, [r7, #32]
 80053d6:	f004 fc19 	bl	8009c0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053e6:	441a      	add	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0210 	orr.w	r2, r2, #16
 80053fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f004 fd97 	bl	8009f34 <USB_ReadInterrupts>
 8005406:	4603      	mov	r3, r0
 8005408:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800540c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005410:	f040 80a7 	bne.w	8005562 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f004 fd9c 	bl	8009f5a <USB_ReadDevAllOutEpInterrupt>
 8005422:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005424:	e099      	b.n	800555a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 808e 	beq.w	800554e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	4611      	mov	r1, r2
 800543c:	4618      	mov	r0, r3
 800543e:	f004 fdc0 	bl	8009fc2 <USB_ReadDevOutEPInterrupt>
 8005442:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00c      	beq.n	8005468 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800545a:	461a      	mov	r2, r3
 800545c:	2301      	movs	r3, #1
 800545e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005460:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fe82 	bl	800616c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00c      	beq.n	800548c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800547e:	461a      	mov	r2, r3
 8005480:	2308      	movs	r3, #8
 8005482:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 febe 	bl	8006208 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a2:	461a      	mov	r2, r3
 80054a4:	2310      	movs	r3, #16
 80054a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d030      	beq.n	8005514 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ba:	2b80      	cmp	r3, #128	@ 0x80
 80054bc:	d109      	bne.n	80054d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80054d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	4413      	add	r3, r2
 80054e4:	3304      	adds	r3, #4
 80054e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	78db      	ldrb	r3, [r3, #3]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d108      	bne.n	8005502 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2200      	movs	r2, #0
 80054f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f009 ffc3 	bl	800f488 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550e:	461a      	mov	r2, r3
 8005510:	2302      	movs	r3, #2
 8005512:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d008      	beq.n	8005530 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552a:	461a      	mov	r2, r3
 800552c:	2320      	movs	r3, #32
 800552e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005546:	461a      	mov	r2, r3
 8005548:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800554c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	3301      	adds	r3, #1
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005556:	085b      	lsrs	r3, r3, #1
 8005558:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800555a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555c:	2b00      	cmp	r3, #0
 800555e:	f47f af62 	bne.w	8005426 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f004 fce4 	bl	8009f34 <USB_ReadInterrupts>
 800556c:	4603      	mov	r3, r0
 800556e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005572:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005576:	f040 80a4 	bne.w	80056c2 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f004 fd05 	bl	8009f8e <USB_ReadDevAllInEpInterrupt>
 8005584:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800558a:	e096      	b.n	80056ba <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 808b 	beq.w	80056ae <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	4611      	mov	r1, r2
 80055a2:	4618      	mov	r0, r3
 80055a4:	f004 fd2b 	bl	8009ffe <USB_ReadDevInEPInterrupt>
 80055a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d020      	beq.n	80055f6 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	2201      	movs	r2, #1
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	43db      	mvns	r3, r3
 80055ce:	69f9      	ldr	r1, [r7, #28]
 80055d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055d4:	4013      	ands	r3, r2
 80055d6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80055d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e4:	461a      	mov	r2, r3
 80055e6:	2301      	movs	r3, #1
 80055e8:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f009 feb4 	bl	800f35e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800560c:	461a      	mov	r2, r3
 800560e:	2308      	movs	r3, #8
 8005610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005628:	461a      	mov	r2, r3
 800562a:	2310      	movs	r3, #16
 800562c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005634:	2b00      	cmp	r3, #0
 8005636:	d008      	beq.n	800564a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005644:	461a      	mov	r2, r3
 8005646:	2340      	movs	r3, #64	@ 0x40
 8005648:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d023      	beq.n	800569c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005654:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005656:	6a38      	ldr	r0, [r7, #32]
 8005658:	f003 fdc0 	bl	80091dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800565c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800565e:	4613      	mov	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	3310      	adds	r3, #16
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	4413      	add	r3, r2
 800566c:	3304      	adds	r3, #4
 800566e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	78db      	ldrb	r3, [r3, #3]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d108      	bne.n	800568a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2200      	movs	r2, #0
 800567c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	b2db      	uxtb	r3, r3
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f009 ff11 	bl	800f4ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005696:	461a      	mov	r2, r3
 8005698:	2302      	movs	r3, #2
 800569a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80056a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fcd6 	bl	800605a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	3301      	adds	r3, #1
 80056b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80056b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b6:	085b      	lsrs	r3, r3, #1
 80056b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80056ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f47f af65 	bne.w	800558c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f004 fc34 	bl	8009f34 <USB_ReadInterrupts>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056d6:	d122      	bne.n	800571e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d108      	bne.n	8005708 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80056fe:	2100      	movs	r1, #0
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f00a f945 	bl	800f990 <HAL_PCDEx_LPM_Callback>
 8005706:	e002      	b.n	800570e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f009 fe95 	bl	800f438 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695a      	ldr	r2, [r3, #20]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800571c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f004 fc06 	bl	8009f34 <USB_ReadInterrupts>
 8005728:	4603      	mov	r3, r0
 800572a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800572e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005732:	d112      	bne.n	800575a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b01      	cmp	r3, #1
 8005742:	d102      	bne.n	800574a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f009 fe51 	bl	800f3ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005758:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f004 fbe8 	bl	8009f34 <USB_ReadInterrupts>
 8005764:	4603      	mov	r3, r0
 8005766:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800576a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800576e:	d121      	bne.n	80057b4 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695a      	ldr	r2, [r3, #20]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800577e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005786:	2b00      	cmp	r3, #0
 8005788:	d111      	bne.n	80057ae <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005798:	089b      	lsrs	r3, r3, #2
 800579a:	f003 020f 	and.w	r2, r3, #15
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80057a4:	2101      	movs	r1, #1
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f00a f8f2 	bl	800f990 <HAL_PCDEx_LPM_Callback>
 80057ac:	e002      	b.n	80057b4 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f009 fe1c 	bl	800f3ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f004 fbbb 	bl	8009f34 <USB_ReadInterrupts>
 80057be:	4603      	mov	r3, r0
 80057c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057c8:	f040 80b6 	bne.w	8005938 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057da:	f023 0301 	bic.w	r3, r3, #1
 80057de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2110      	movs	r1, #16
 80057e6:	4618      	mov	r0, r3
 80057e8:	f003 fcf8 	bl	80091dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ec:	2300      	movs	r3, #0
 80057ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057f0:	e046      	b.n	8005880 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80057f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057fe:	461a      	mov	r2, r3
 8005800:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005804:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	440a      	add	r2, r1
 800581c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005820:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005824:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005832:	461a      	mov	r2, r3
 8005834:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005838:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800583a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005854:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005858:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800585a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005874:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005878:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800587a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587c:	3301      	adds	r3, #1
 800587e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	791b      	ldrb	r3, [r3, #4]
 8005884:	461a      	mov	r2, r3
 8005886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005888:	4293      	cmp	r3, r2
 800588a:	d3b2      	bcc.n	80057f2 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800589a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800589e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	7bdb      	ldrb	r3, [r3, #15]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d016      	beq.n	80058d6 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058b8:	f043 030b 	orr.w	r3, r3, #11
 80058bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058ce:	f043 030b 	orr.w	r3, r3, #11
 80058d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80058d4:	e015      	b.n	8005902 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80058e8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80058ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058fc:	f043 030b 	orr.w	r3, r3, #11
 8005900:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005910:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005914:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f004 fbca 	bl	800a0bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695a      	ldr	r2, [r3, #20]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f004 faf9 	bl	8009f34 <USB_ReadInterrupts>
 8005942:	4603      	mov	r3, r0
 8005944:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800594c:	d123      	bne.n	8005996 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f004 fb8f 	bl	800a076 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4618      	mov	r0, r3
 800595e:	f003 fcb6 	bl	80092ce <USB_GetDevSpeed>
 8005962:	4603      	mov	r3, r0
 8005964:	461a      	mov	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681c      	ldr	r4, [r3, #0]
 800596e:	f001 fb13 	bl	8006f98 <HAL_RCC_GetHCLKFreq>
 8005972:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005978:	461a      	mov	r2, r3
 800597a:	4620      	mov	r0, r4
 800597c:	f003 f9dc 	bl	8008d38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f009 fd14 	bl	800f3ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695a      	ldr	r2, [r3, #20]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005994:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f004 faca 	bl	8009f34 <USB_ReadInterrupts>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d10a      	bne.n	80059c0 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f009 fcf1 	bl	800f392 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695a      	ldr	r2, [r3, #20]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f002 0208 	and.w	r2, r2, #8
 80059be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f004 fab5 	bl	8009f34 <USB_ReadInterrupts>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d0:	2b80      	cmp	r3, #128	@ 0x80
 80059d2:	d123      	bne.n	8005a1c <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059e0:	2301      	movs	r3, #1
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e4:	e014      	b.n	8005a10 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ea:	4613      	mov	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d105      	bne.n	8005a0a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 faf7 	bl	8005ff8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	791b      	ldrb	r3, [r3, #4]
 8005a14:	461a      	mov	r2, r3
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d3e4      	bcc.n	80059e6 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f004 fa87 	bl	8009f34 <USB_ReadInterrupts>
 8005a26:	4603      	mov	r3, r0
 8005a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a30:	d13c      	bne.n	8005aac <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a32:	2301      	movs	r3, #1
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a36:	e02b      	b.n	8005a90 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	3318      	adds	r3, #24
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d115      	bne.n	8005a8a <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005a5e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	da12      	bge.n	8005a8a <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a68:	4613      	mov	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	3317      	adds	r3, #23
 8005a74:	2201      	movs	r2, #1
 8005a76:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fab7 	bl	8005ff8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	791b      	ldrb	r3, [r3, #4]
 8005a94:	461a      	mov	r2, r3
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d3cd      	bcc.n	8005a38 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695a      	ldr	r2, [r3, #20]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f004 fa3f 	bl	8009f34 <USB_ReadInterrupts>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005abc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ac0:	d156      	bne.n	8005b70 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac6:	e045      	b.n	8005b54 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d12e      	bne.n	8005b4e <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005af0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	da2b      	bge.n	8005b4e <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005b02:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d121      	bne.n	8005b4e <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b0e:	4613      	mov	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	440b      	add	r3, r1
 8005b18:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b4a:	6053      	str	r3, [r2, #4]
            break;
 8005b4c:	e008      	b.n	8005b60 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	3301      	adds	r3, #1
 8005b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	791b      	ldrb	r3, [r3, #4]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d3b3      	bcc.n	8005ac8 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f004 f9dd 	bl	8009f34 <USB_ReadInterrupts>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b84:	d10a      	bne.n	8005b9c <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f009 fca2 	bl	800f4d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695a      	ldr	r2, [r3, #20]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f004 f9c7 	bl	8009f34 <USB_ReadInterrupts>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d115      	bne.n	8005bdc <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f009 fc92 	bl	800f4ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6859      	ldr	r1, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	605a      	str	r2, [r3, #4]
 8005bd8:	e000      	b.n	8005bdc <HAL_PCD_IRQHandler+0x926>
      return;
 8005bda:	bf00      	nop
    }
  }
}
 8005bdc:	3734      	adds	r7, #52	@ 0x34
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd90      	pop	{r4, r7, pc}

08005be2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	460b      	mov	r3, r1
 8005bec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_PCD_SetAddress+0x1a>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e012      	b.n	8005c22 <HAL_PCD_SetAddress+0x40>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	78fa      	ldrb	r2, [r7, #3]
 8005c08:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	78fa      	ldrb	r2, [r7, #3]
 8005c10:	4611      	mov	r1, r2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f004 f926 	bl	8009e64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	4608      	mov	r0, r1
 8005c34:	4611      	mov	r1, r2
 8005c36:	461a      	mov	r2, r3
 8005c38:	4603      	mov	r3, r0
 8005c3a:	70fb      	strb	r3, [r7, #3]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	803b      	strh	r3, [r7, #0]
 8005c40:	4613      	mov	r3, r2
 8005c42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	da0f      	bge.n	8005c70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	f003 020f 	and.w	r2, r3, #15
 8005c56:	4613      	mov	r3, r2
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	3310      	adds	r3, #16
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	4413      	add	r3, r2
 8005c64:	3304      	adds	r3, #4
 8005c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	705a      	strb	r2, [r3, #1]
 8005c6e:	e00f      	b.n	8005c90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	f003 020f 	and.w	r2, r3, #15
 8005c76:	4613      	mov	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	4413      	add	r3, r2
 8005c86:	3304      	adds	r3, #4
 8005c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005c9c:	883b      	ldrh	r3, [r7, #0]
 8005c9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	78ba      	ldrb	r2, [r7, #2]
 8005caa:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	785b      	ldrb	r3, [r3, #1]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005cbe:	78bb      	ldrb	r3, [r7, #2]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d102      	bne.n	8005cca <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_PCD_EP_Open+0xae>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e00e      	b.n	8005cf6 <HAL_PCD_EP_Open+0xcc>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68f9      	ldr	r1, [r7, #12]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f003 fb10 	bl	800930c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005cf4:	7afb      	ldrb	r3, [r7, #11]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	da0f      	bge.n	8005d32 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	f003 020f 	and.w	r2, r3, #15
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	3310      	adds	r3, #16
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4413      	add	r3, r2
 8005d26:	3304      	adds	r3, #4
 8005d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	705a      	strb	r2, [r3, #1]
 8005d30:	e00f      	b.n	8005d52 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	f003 020f 	and.w	r2, r3, #15
 8005d38:	4613      	mov	r3, r2
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	4413      	add	r3, r2
 8005d48:	3304      	adds	r3, #4
 8005d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_PCD_EP_Close+0x6e>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e00e      	b.n	8005d8a <HAL_PCD_EP_Close+0x8c>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68f9      	ldr	r1, [r7, #12]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f003 fb4e 	bl	800941c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b086      	sub	sp, #24
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005da2:	7afb      	ldrb	r3, [r7, #11]
 8005da4:	f003 020f 	and.w	r2, r3, #15
 8005da8:	4613      	mov	r3, r2
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	4413      	add	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	3304      	adds	r3, #4
 8005dba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dd4:	7afb      	ldrb	r3, [r7, #11]
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6979      	ldr	r1, [r7, #20]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f003 fbf4 	bl	80095d4 <USB_EPStartXfer>

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	f003 020f 	and.w	r2, r3, #15
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005e18:	681b      	ldr	r3, [r3, #0]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b086      	sub	sp, #24
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
 8005e32:	460b      	mov	r3, r1
 8005e34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e36:	7afb      	ldrb	r3, [r7, #11]
 8005e38:	f003 020f 	and.w	r2, r3, #15
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	3310      	adds	r3, #16
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4413      	add	r3, r2
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2201      	movs	r2, #1
 8005e64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e66:	7afb      	ldrb	r3, [r7, #11]
 8005e68:	f003 030f 	and.w	r3, r3, #15
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6979      	ldr	r1, [r7, #20]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f003 fbab 	bl	80095d4 <USB_EPStartXfer>

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	7912      	ldrb	r2, [r2, #4]
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e04e      	b.n	8005f44 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	da0f      	bge.n	8005ece <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	f003 020f 	and.w	r2, r3, #15
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	3310      	adds	r3, #16
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	705a      	strb	r2, [r3, #1]
 8005ecc:	e00d      	b.n	8005eea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ece:	78fa      	ldrb	r2, [r7, #3]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_PCD_EP_SetStall+0x82>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e01c      	b.n	8005f44 <HAL_PCD_EP_SetStall+0xbc>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f003 fecf 	bl	8009cbc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f1e:	78fb      	ldrb	r3, [r7, #3]
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d108      	bne.n	8005f3a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f004 f8c1 	bl	800a0bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	7912      	ldrb	r2, [r2, #4]
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e042      	b.n	8005ff0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da0f      	bge.n	8005f92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	f003 020f 	and.w	r2, r3, #15
 8005f78:	4613      	mov	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	4413      	add	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	3310      	adds	r3, #16
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	4413      	add	r3, r2
 8005f86:	3304      	adds	r3, #4
 8005f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	705a      	strb	r2, [r3, #1]
 8005f90:	e00f      	b.n	8005fb2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	f003 020f 	and.w	r2, r3, #15
 8005f98:	4613      	mov	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	3304      	adds	r3, #4
 8005faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_PCD_EP_ClrStall+0x86>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e00e      	b.n	8005ff0 <HAL_PCD_EP_ClrStall+0xa4>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68f9      	ldr	r1, [r7, #12]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f003 fed9 	bl	8009d98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006008:	2b00      	cmp	r3, #0
 800600a:	da0c      	bge.n	8006026 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	f003 020f 	and.w	r2, r3, #15
 8006012:	4613      	mov	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	3310      	adds	r3, #16
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	4413      	add	r3, r2
 8006020:	3304      	adds	r3, #4
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e00c      	b.n	8006040 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	f003 020f 	and.w	r2, r3, #15
 800602c:	4613      	mov	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	4413      	add	r3, r2
 800603c:	3304      	adds	r3, #4
 800603e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68f9      	ldr	r1, [r7, #12]
 8006046:	4618      	mov	r0, r3
 8006048:	f003 fcfc 	bl	8009a44 <USB_EPStopXfer>
 800604c:	4603      	mov	r3, r0
 800604e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006050:	7afb      	ldrb	r3, [r7, #11]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b088      	sub	sp, #32
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	4613      	mov	r3, r2
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	4413      	add	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	3310      	adds	r3, #16
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	4413      	add	r3, r2
 800607e:	3304      	adds	r3, #4
 8006080:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	429a      	cmp	r2, r3
 800608c:	d901      	bls.n	8006092 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e067      	b.n	8006162 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	691a      	ldr	r2, [r3, #16]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d902      	bls.n	80060ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	3303      	adds	r3, #3
 80060b2:	089b      	lsrs	r3, r3, #2
 80060b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060b6:	e026      	b.n	8006106 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d902      	bls.n	80060d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	3303      	adds	r3, #3
 80060d8:	089b      	lsrs	r3, r3, #2
 80060da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	68d9      	ldr	r1, [r3, #12]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	6978      	ldr	r0, [r7, #20]
 80060ea:	f003 fd55 	bl	8009b98 <USB_WritePacket>

    ep->xfer_buff  += len;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	441a      	add	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	695a      	ldr	r2, [r3, #20]
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	441a      	add	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	429a      	cmp	r2, r3
 800611a:	d809      	bhi.n	8006130 <PCD_WriteEmptyTxFifo+0xd6>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006124:	429a      	cmp	r2, r3
 8006126:	d203      	bcs.n	8006130 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1c3      	bne.n	80060b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	691a      	ldr	r2, [r3, #16]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	429a      	cmp	r2, r3
 800613a:	d811      	bhi.n	8006160 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	2201      	movs	r2, #1
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	43db      	mvns	r3, r3
 8006156:	6939      	ldr	r1, [r7, #16]
 8006158:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800615c:	4013      	ands	r3, r2
 800615e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	333c      	adds	r3, #60	@ 0x3c
 8006184:	3304      	adds	r3, #4
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4a19      	ldr	r2, [pc, #100]	@ (8006204 <PCD_EP_OutXfrComplete_int+0x98>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d124      	bne.n	80061ec <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b8:	461a      	mov	r2, r3
 80061ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061be:	6093      	str	r3, [r2, #8]
 80061c0:	e01a      	b.n	80061f8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f003 0320 	and.w	r3, r3, #32
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d008      	beq.n	80061de <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d8:	461a      	mov	r2, r3
 80061da:	2320      	movs	r3, #32
 80061dc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f009 f89f 	bl	800f328 <HAL_PCD_DataOutStageCallback>
 80061ea:	e005      	b.n	80061f8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	4619      	mov	r1, r3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f009 f898 	bl	800f328 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	4f54310a 	.word	0x4f54310a

08006208 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	333c      	adds	r3, #60	@ 0x3c
 8006220:	3304      	adds	r3, #4
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4a0c      	ldr	r2, [pc, #48]	@ (800626c <PCD_EP_OutSetupPacket_int+0x64>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d90e      	bls.n	800625c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006244:	2b00      	cmp	r3, #0
 8006246:	d009      	beq.n	800625c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006254:	461a      	mov	r2, r3
 8006256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800625a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f009 f851 	bl	800f304 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	4f54300a 	.word	0x4f54300a

08006270 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	70fb      	strb	r3, [r7, #3]
 800627c:	4613      	mov	r3, r2
 800627e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006286:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d107      	bne.n	800629e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800628e:	883b      	ldrh	r3, [r7, #0]
 8006290:	0419      	lsls	r1, r3, #16
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	430a      	orrs	r2, r1
 800629a:	629a      	str	r2, [r3, #40]	@ 0x28
 800629c:	e028      	b.n	80062f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a4:	0c1b      	lsrs	r3, r3, #16
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	4413      	add	r3, r2
 80062aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80062ac:	2300      	movs	r3, #0
 80062ae:	73fb      	strb	r3, [r7, #15]
 80062b0:	e00d      	b.n	80062ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	3340      	adds	r3, #64	@ 0x40
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	0c1b      	lsrs	r3, r3, #16
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	4413      	add	r3, r2
 80062c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	3301      	adds	r3, #1
 80062cc:	73fb      	strb	r3, [r7, #15]
 80062ce:	7bfa      	ldrb	r2, [r7, #15]
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d3ec      	bcc.n	80062b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80062d8:	883b      	ldrh	r3, [r7, #0]
 80062da:	0418      	lsls	r0, r3, #16
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6819      	ldr	r1, [r3, #0]
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	4302      	orrs	r2, r0
 80062e8:	3340      	adds	r3, #64	@ 0x40
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	460b      	mov	r3, r1
 8006308:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	887a      	ldrh	r2, [r7, #2]
 8006310:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800634e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006352:	f043 0303 	orr.w	r3, r3, #3
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800636c:	4b04      	ldr	r3, [pc, #16]	@ (8006380 <HAL_PWREx_GetVoltageRange+0x18>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006374:	4618      	mov	r0, r3
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40007000 	.word	0x40007000

08006384 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006392:	d130      	bne.n	80063f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006394:	4b23      	ldr	r3, [pc, #140]	@ (8006424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800639c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063a0:	d038      	beq.n	8006414 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063a2:	4b20      	ldr	r3, [pc, #128]	@ (8006424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80063aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006428 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2232      	movs	r2, #50	@ 0x32
 80063b8:	fb02 f303 	mul.w	r3, r2, r3
 80063bc:	4a1b      	ldr	r2, [pc, #108]	@ (800642c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80063be:	fba2 2303 	umull	r2, r3, r2, r3
 80063c2:	0c9b      	lsrs	r3, r3, #18
 80063c4:	3301      	adds	r3, #1
 80063c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063c8:	e002      	b.n	80063d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063d0:	4b14      	ldr	r3, [pc, #80]	@ (8006424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063dc:	d102      	bne.n	80063e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f2      	bne.n	80063ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f0:	d110      	bne.n	8006414 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e00f      	b.n	8006416 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80063f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006402:	d007      	beq.n	8006414 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006404:	4b07      	ldr	r3, [pc, #28]	@ (8006424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800640c:	4a05      	ldr	r2, [pc, #20]	@ (8006424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800640e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006412:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40007000 	.word	0x40007000
 8006428:	20000000 	.word	0x20000000
 800642c:	431bde83 	.word	0x431bde83

08006430 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006434:	4b05      	ldr	r3, [pc, #20]	@ (800644c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	4a04      	ldr	r2, [pc, #16]	@ (800644c <HAL_PWREx_EnableVddUSB+0x1c>)
 800643a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800643e:	6053      	str	r3, [r2, #4]
}
 8006440:	bf00      	nop
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40007000 	.word	0x40007000

08006450 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d102      	bne.n	8006464 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	f000 bc08 	b.w	8006c74 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006464:	4b96      	ldr	r3, [pc, #600]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 030c 	and.w	r3, r3, #12
 800646c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800646e:	4b94      	ldr	r3, [pc, #592]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 80e4 	beq.w	800664e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d007      	beq.n	800649c <HAL_RCC_OscConfig+0x4c>
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b0c      	cmp	r3, #12
 8006490:	f040 808b 	bne.w	80065aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2b01      	cmp	r3, #1
 8006498:	f040 8087 	bne.w	80065aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800649c:	4b88      	ldr	r3, [pc, #544]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <HAL_RCC_OscConfig+0x64>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e3df      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1a      	ldr	r2, [r3, #32]
 80064b8:	4b81      	ldr	r3, [pc, #516]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d004      	beq.n	80064ce <HAL_RCC_OscConfig+0x7e>
 80064c4:	4b7e      	ldr	r3, [pc, #504]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064cc:	e005      	b.n	80064da <HAL_RCC_OscConfig+0x8a>
 80064ce:	4b7c      	ldr	r3, [pc, #496]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80064d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064d4:	091b      	lsrs	r3, r3, #4
 80064d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064da:	4293      	cmp	r3, r2
 80064dc:	d223      	bcs.n	8006526 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fdac 	bl	8007040 <RCC_SetFlashLatencyFromMSIRange>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e3c0      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064f2:	4b73      	ldr	r3, [pc, #460]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a72      	ldr	r2, [pc, #456]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80064f8:	f043 0308 	orr.w	r3, r3, #8
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	4b70      	ldr	r3, [pc, #448]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	496d      	ldr	r1, [pc, #436]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 800650c:	4313      	orrs	r3, r2
 800650e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006510:	4b6b      	ldr	r3, [pc, #428]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	4968      	ldr	r1, [pc, #416]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006520:	4313      	orrs	r3, r2
 8006522:	604b      	str	r3, [r1, #4]
 8006524:	e025      	b.n	8006572 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006526:	4b66      	ldr	r3, [pc, #408]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a65      	ldr	r2, [pc, #404]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 800652c:	f043 0308 	orr.w	r3, r3, #8
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	4b63      	ldr	r3, [pc, #396]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	4960      	ldr	r1, [pc, #384]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006540:	4313      	orrs	r3, r2
 8006542:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006544:	4b5e      	ldr	r3, [pc, #376]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	495b      	ldr	r1, [pc, #364]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006554:	4313      	orrs	r3, r2
 8006556:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fd6c 	bl	8007040 <RCC_SetFlashLatencyFromMSIRange>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e380      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006572:	f000 fc87 	bl	8006e84 <HAL_RCC_GetSysClockFreq>
 8006576:	4602      	mov	r2, r0
 8006578:	4b51      	ldr	r3, [pc, #324]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	091b      	lsrs	r3, r3, #4
 800657e:	f003 030f 	and.w	r3, r3, #15
 8006582:	4950      	ldr	r1, [pc, #320]	@ (80066c4 <HAL_RCC_OscConfig+0x274>)
 8006584:	5ccb      	ldrb	r3, [r1, r3]
 8006586:	f003 031f 	and.w	r3, r3, #31
 800658a:	fa22 f303 	lsr.w	r3, r2, r3
 800658e:	4a4e      	ldr	r2, [pc, #312]	@ (80066c8 <HAL_RCC_OscConfig+0x278>)
 8006590:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006592:	4b4e      	ldr	r3, [pc, #312]	@ (80066cc <HAL_RCC_OscConfig+0x27c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f7fc fb04 	bl	8002ba4 <HAL_InitTick>
 800659c:	4603      	mov	r3, r0
 800659e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d052      	beq.n	800664c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	e364      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d032      	beq.n	8006618 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80065b2:	4b43      	ldr	r3, [pc, #268]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a42      	ldr	r2, [pc, #264]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80065b8:	f043 0301 	orr.w	r3, r3, #1
 80065bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065be:	f7fc fcd5 	bl	8002f6c <HAL_GetTick>
 80065c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065c6:	f7fc fcd1 	bl	8002f6c <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e34d      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065d8:	4b39      	ldr	r3, [pc, #228]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0f0      	beq.n	80065c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065e4:	4b36      	ldr	r3, [pc, #216]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a35      	ldr	r2, [pc, #212]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80065ea:	f043 0308 	orr.w	r3, r3, #8
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	4b33      	ldr	r3, [pc, #204]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	4930      	ldr	r1, [pc, #192]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006602:	4b2f      	ldr	r3, [pc, #188]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	492b      	ldr	r1, [pc, #172]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006612:	4313      	orrs	r3, r2
 8006614:	604b      	str	r3, [r1, #4]
 8006616:	e01a      	b.n	800664e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006618:	4b29      	ldr	r3, [pc, #164]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a28      	ldr	r2, [pc, #160]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006624:	f7fc fca2 	bl	8002f6c <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800662c:	f7fc fc9e 	bl	8002f6c <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e31a      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800663e:	4b20      	ldr	r3, [pc, #128]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f0      	bne.n	800662c <HAL_RCC_OscConfig+0x1dc>
 800664a:	e000      	b.n	800664e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800664c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d073      	beq.n	8006742 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d005      	beq.n	800666c <HAL_RCC_OscConfig+0x21c>
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b0c      	cmp	r3, #12
 8006664:	d10e      	bne.n	8006684 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b03      	cmp	r3, #3
 800666a:	d10b      	bne.n	8006684 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800666c:	4b14      	ldr	r3, [pc, #80]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d063      	beq.n	8006740 <HAL_RCC_OscConfig+0x2f0>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d15f      	bne.n	8006740 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e2f7      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800668c:	d106      	bne.n	800669c <HAL_RCC_OscConfig+0x24c>
 800668e:	4b0c      	ldr	r3, [pc, #48]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a0b      	ldr	r2, [pc, #44]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 8006694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	e025      	b.n	80066e8 <HAL_RCC_OscConfig+0x298>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066a4:	d114      	bne.n	80066d0 <HAL_RCC_OscConfig+0x280>
 80066a6:	4b06      	ldr	r3, [pc, #24]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a05      	ldr	r2, [pc, #20]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80066ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	4b03      	ldr	r3, [pc, #12]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a02      	ldr	r2, [pc, #8]	@ (80066c0 <HAL_RCC_OscConfig+0x270>)
 80066b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	e013      	b.n	80066e8 <HAL_RCC_OscConfig+0x298>
 80066c0:	40021000 	.word	0x40021000
 80066c4:	080125c4 	.word	0x080125c4
 80066c8:	20000000 	.word	0x20000000
 80066cc:	20000004 	.word	0x20000004
 80066d0:	4ba0      	ldr	r3, [pc, #640]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a9f      	ldr	r2, [pc, #636]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 80066d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	4b9d      	ldr	r3, [pc, #628]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a9c      	ldr	r2, [pc, #624]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 80066e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d013      	beq.n	8006718 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f0:	f7fc fc3c 	bl	8002f6c <HAL_GetTick>
 80066f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066f6:	e008      	b.n	800670a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066f8:	f7fc fc38 	bl	8002f6c <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b64      	cmp	r3, #100	@ 0x64
 8006704:	d901      	bls.n	800670a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e2b4      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800670a:	4b92      	ldr	r3, [pc, #584]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0f0      	beq.n	80066f8 <HAL_RCC_OscConfig+0x2a8>
 8006716:	e014      	b.n	8006742 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006718:	f7fc fc28 	bl	8002f6c <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006720:	f7fc fc24 	bl	8002f6c <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b64      	cmp	r3, #100	@ 0x64
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e2a0      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006732:	4b88      	ldr	r3, [pc, #544]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1f0      	bne.n	8006720 <HAL_RCC_OscConfig+0x2d0>
 800673e:	e000      	b.n	8006742 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d060      	beq.n	8006810 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b04      	cmp	r3, #4
 8006752:	d005      	beq.n	8006760 <HAL_RCC_OscConfig+0x310>
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	2b0c      	cmp	r3, #12
 8006758:	d119      	bne.n	800678e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d116      	bne.n	800678e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006760:	4b7c      	ldr	r3, [pc, #496]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <HAL_RCC_OscConfig+0x328>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e27d      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006778:	4b76      	ldr	r3, [pc, #472]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	061b      	lsls	r3, r3, #24
 8006786:	4973      	ldr	r1, [pc, #460]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006788:	4313      	orrs	r3, r2
 800678a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800678c:	e040      	b.n	8006810 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d023      	beq.n	80067de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006796:	4b6f      	ldr	r3, [pc, #444]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a6e      	ldr	r2, [pc, #440]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 800679c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a2:	f7fc fbe3 	bl	8002f6c <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067aa:	f7fc fbdf 	bl	8002f6c <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e25b      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067bc:	4b65      	ldr	r3, [pc, #404]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0f0      	beq.n	80067aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067c8:	4b62      	ldr	r3, [pc, #392]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	061b      	lsls	r3, r3, #24
 80067d6:	495f      	ldr	r1, [pc, #380]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	604b      	str	r3, [r1, #4]
 80067dc:	e018      	b.n	8006810 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067de:	4b5d      	ldr	r3, [pc, #372]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a5c      	ldr	r2, [pc, #368]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 80067e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ea:	f7fc fbbf 	bl	8002f6c <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067f2:	f7fc fbbb 	bl	8002f6c <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e237      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006804:	4b53      	ldr	r3, [pc, #332]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1f0      	bne.n	80067f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b00      	cmp	r3, #0
 800681a:	d03c      	beq.n	8006896 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01c      	beq.n	800685e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006824:	4b4b      	ldr	r3, [pc, #300]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800682a:	4a4a      	ldr	r2, [pc, #296]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 800682c:	f043 0301 	orr.w	r3, r3, #1
 8006830:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006834:	f7fc fb9a 	bl	8002f6c <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800683c:	f7fc fb96 	bl	8002f6c <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e212      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800684e:	4b41      	ldr	r3, [pc, #260]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0ef      	beq.n	800683c <HAL_RCC_OscConfig+0x3ec>
 800685c:	e01b      	b.n	8006896 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800685e:	4b3d      	ldr	r3, [pc, #244]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006864:	4a3b      	ldr	r2, [pc, #236]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006866:	f023 0301 	bic.w	r3, r3, #1
 800686a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686e:	f7fc fb7d 	bl	8002f6c <HAL_GetTick>
 8006872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006874:	e008      	b.n	8006888 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006876:	f7fc fb79 	bl	8002f6c <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e1f5      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006888:	4b32      	ldr	r3, [pc, #200]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 800688a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1ef      	bne.n	8006876 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80a6 	beq.w	80069f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068a4:	2300      	movs	r3, #0
 80068a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80068a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 80068aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10d      	bne.n	80068d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b4:	4b27      	ldr	r3, [pc, #156]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 80068b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b8:	4a26      	ldr	r2, [pc, #152]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 80068ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068be:	6593      	str	r3, [r2, #88]	@ 0x58
 80068c0:	4b24      	ldr	r3, [pc, #144]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 80068c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068c8:	60bb      	str	r3, [r7, #8]
 80068ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068cc:	2301      	movs	r3, #1
 80068ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068d0:	4b21      	ldr	r3, [pc, #132]	@ (8006958 <HAL_RCC_OscConfig+0x508>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d118      	bne.n	800690e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006958 <HAL_RCC_OscConfig+0x508>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006958 <HAL_RCC_OscConfig+0x508>)
 80068e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068e8:	f7fc fb40 	bl	8002f6c <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068f0:	f7fc fb3c 	bl	8002f6c <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e1b8      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006902:	4b15      	ldr	r3, [pc, #84]	@ (8006958 <HAL_RCC_OscConfig+0x508>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0f0      	beq.n	80068f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d108      	bne.n	8006928 <HAL_RCC_OscConfig+0x4d8>
 8006916:	4b0f      	ldr	r3, [pc, #60]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691c:	4a0d      	ldr	r2, [pc, #52]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 800691e:	f043 0301 	orr.w	r3, r3, #1
 8006922:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006926:	e029      	b.n	800697c <HAL_RCC_OscConfig+0x52c>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2b05      	cmp	r3, #5
 800692e:	d115      	bne.n	800695c <HAL_RCC_OscConfig+0x50c>
 8006930:	4b08      	ldr	r3, [pc, #32]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006936:	4a07      	ldr	r2, [pc, #28]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006938:	f043 0304 	orr.w	r3, r3, #4
 800693c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006940:	4b04      	ldr	r3, [pc, #16]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006946:	4a03      	ldr	r2, [pc, #12]	@ (8006954 <HAL_RCC_OscConfig+0x504>)
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006950:	e014      	b.n	800697c <HAL_RCC_OscConfig+0x52c>
 8006952:	bf00      	nop
 8006954:	40021000 	.word	0x40021000
 8006958:	40007000 	.word	0x40007000
 800695c:	4b9d      	ldr	r3, [pc, #628]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 800695e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006962:	4a9c      	ldr	r2, [pc, #624]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006964:	f023 0301 	bic.w	r3, r3, #1
 8006968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800696c:	4b99      	ldr	r3, [pc, #612]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 800696e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006972:	4a98      	ldr	r2, [pc, #608]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006974:	f023 0304 	bic.w	r3, r3, #4
 8006978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d016      	beq.n	80069b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006984:	f7fc faf2 	bl	8002f6c <HAL_GetTick>
 8006988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800698a:	e00a      	b.n	80069a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800698c:	f7fc faee 	bl	8002f6c <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e168      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069a2:	4b8c      	ldr	r3, [pc, #560]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 80069a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0ed      	beq.n	800698c <HAL_RCC_OscConfig+0x53c>
 80069b0:	e015      	b.n	80069de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b2:	f7fc fadb 	bl	8002f6c <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069b8:	e00a      	b.n	80069d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ba:	f7fc fad7 	bl	8002f6c <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e151      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069d0:	4b80      	ldr	r3, [pc, #512]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 80069d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1ed      	bne.n	80069ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069de:	7ffb      	ldrb	r3, [r7, #31]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d105      	bne.n	80069f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e4:	4b7b      	ldr	r3, [pc, #492]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 80069e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e8:	4a7a      	ldr	r2, [pc, #488]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 80069ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d03c      	beq.n	8006a76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01c      	beq.n	8006a3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a04:	4b73      	ldr	r3, [pc, #460]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a0a:	4a72      	ldr	r2, [pc, #456]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006a0c:	f043 0301 	orr.w	r3, r3, #1
 8006a10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a14:	f7fc faaa 	bl	8002f6c <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a1c:	f7fc faa6 	bl	8002f6c <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e122      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a2e:	4b69      	ldr	r3, [pc, #420]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d0ef      	beq.n	8006a1c <HAL_RCC_OscConfig+0x5cc>
 8006a3c:	e01b      	b.n	8006a76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a3e:	4b65      	ldr	r3, [pc, #404]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a44:	4a63      	ldr	r2, [pc, #396]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006a46:	f023 0301 	bic.w	r3, r3, #1
 8006a4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4e:	f7fc fa8d 	bl	8002f6c <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a56:	f7fc fa89 	bl	8002f6c <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e105      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a68:	4b5a      	ldr	r3, [pc, #360]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1ef      	bne.n	8006a56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 80f9 	beq.w	8006c72 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	f040 80cf 	bne.w	8006c28 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a8a:	4b52      	ldr	r3, [pc, #328]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f003 0203 	and.w	r2, r3, #3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d12c      	bne.n	8006af8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d123      	bne.n	8006af8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d11b      	bne.n	8006af8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d113      	bne.n	8006af8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ada:	085b      	lsrs	r3, r3, #1
 8006adc:	3b01      	subs	r3, #1
 8006ade:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d109      	bne.n	8006af8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aee:	085b      	lsrs	r3, r3, #1
 8006af0:	3b01      	subs	r3, #1
 8006af2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d071      	beq.n	8006bdc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b0c      	cmp	r3, #12
 8006afc:	d068      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006afe:	4b35      	ldr	r3, [pc, #212]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d105      	bne.n	8006b16 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006b0a:	4b32      	ldr	r3, [pc, #200]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e0ac      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006b20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b26:	f7fc fa21 	bl	8002f6c <HAL_GetTick>
 8006b2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b2c:	e008      	b.n	8006b40 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b2e:	f7fc fa1d 	bl	8002f6c <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e099      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b40:	4b24      	ldr	r3, [pc, #144]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f0      	bne.n	8006b2e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b4c:	4b21      	ldr	r3, [pc, #132]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	4b21      	ldr	r3, [pc, #132]	@ (8006bd8 <HAL_RCC_OscConfig+0x788>)
 8006b52:	4013      	ands	r3, r2
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b5c:	3a01      	subs	r2, #1
 8006b5e:	0112      	lsls	r2, r2, #4
 8006b60:	4311      	orrs	r1, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b66:	0212      	lsls	r2, r2, #8
 8006b68:	4311      	orrs	r1, r2
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b6e:	0852      	lsrs	r2, r2, #1
 8006b70:	3a01      	subs	r2, #1
 8006b72:	0552      	lsls	r2, r2, #21
 8006b74:	4311      	orrs	r1, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006b7a:	0852      	lsrs	r2, r2, #1
 8006b7c:	3a01      	subs	r2, #1
 8006b7e:	0652      	lsls	r2, r2, #25
 8006b80:	4311      	orrs	r1, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b86:	06d2      	lsls	r2, r2, #27
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	4912      	ldr	r1, [pc, #72]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b90:	4b10      	ldr	r3, [pc, #64]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a0f      	ldr	r2, [pc, #60]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ba6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ba8:	f7fc f9e0 	bl	8002f6c <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb0:	f7fc f9dc 	bl	8002f6c <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e058      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc2:	4b04      	ldr	r3, [pc, #16]	@ (8006bd4 <HAL_RCC_OscConfig+0x784>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0f0      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bce:	e050      	b.n	8006c72 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e04f      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bdc:	4b27      	ldr	r3, [pc, #156]	@ (8006c7c <HAL_RCC_OscConfig+0x82c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d144      	bne.n	8006c72 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006be8:	4b24      	ldr	r3, [pc, #144]	@ (8006c7c <HAL_RCC_OscConfig+0x82c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a23      	ldr	r2, [pc, #140]	@ (8006c7c <HAL_RCC_OscConfig+0x82c>)
 8006bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bf2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bf4:	4b21      	ldr	r3, [pc, #132]	@ (8006c7c <HAL_RCC_OscConfig+0x82c>)
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	4a20      	ldr	r2, [pc, #128]	@ (8006c7c <HAL_RCC_OscConfig+0x82c>)
 8006bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c00:	f7fc f9b4 	bl	8002f6c <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c08:	f7fc f9b0 	bl	8002f6c <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e02c      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c1a:	4b18      	ldr	r3, [pc, #96]	@ (8006c7c <HAL_RCC_OscConfig+0x82c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0x7b8>
 8006c26:	e024      	b.n	8006c72 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b0c      	cmp	r3, #12
 8006c2c:	d01f      	beq.n	8006c6e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c2e:	4b13      	ldr	r3, [pc, #76]	@ (8006c7c <HAL_RCC_OscConfig+0x82c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a12      	ldr	r2, [pc, #72]	@ (8006c7c <HAL_RCC_OscConfig+0x82c>)
 8006c34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3a:	f7fc f997 	bl	8002f6c <HAL_GetTick>
 8006c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c40:	e008      	b.n	8006c54 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c42:	f7fc f993 	bl	8002f6c <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d901      	bls.n	8006c54 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e00f      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c54:	4b09      	ldr	r3, [pc, #36]	@ (8006c7c <HAL_RCC_OscConfig+0x82c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1f0      	bne.n	8006c42 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006c60:	4b06      	ldr	r3, [pc, #24]	@ (8006c7c <HAL_RCC_OscConfig+0x82c>)
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	4905      	ldr	r1, [pc, #20]	@ (8006c7c <HAL_RCC_OscConfig+0x82c>)
 8006c66:	4b06      	ldr	r3, [pc, #24]	@ (8006c80 <HAL_RCC_OscConfig+0x830>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	60cb      	str	r3, [r1, #12]
 8006c6c:	e001      	b.n	8006c72 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	feeefffc 	.word	0xfeeefffc

08006c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e0e7      	b.n	8006e68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c98:	4b75      	ldr	r3, [pc, #468]	@ (8006e70 <HAL_RCC_ClockConfig+0x1ec>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d910      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ca6:	4b72      	ldr	r3, [pc, #456]	@ (8006e70 <HAL_RCC_ClockConfig+0x1ec>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f023 0207 	bic.w	r2, r3, #7
 8006cae:	4970      	ldr	r1, [pc, #448]	@ (8006e70 <HAL_RCC_ClockConfig+0x1ec>)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8006e70 <HAL_RCC_ClockConfig+0x1ec>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0307 	and.w	r3, r3, #7
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d001      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e0cf      	b.n	8006e68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d010      	beq.n	8006cf6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	4b66      	ldr	r3, [pc, #408]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d908      	bls.n	8006cf6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ce4:	4b63      	ldr	r3, [pc, #396]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	4960      	ldr	r1, [pc, #384]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d04c      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d107      	bne.n	8006d1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d121      	bne.n	8006d5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e0a6      	b.n	8006e68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d107      	bne.n	8006d32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d22:	4b54      	ldr	r3, [pc, #336]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d115      	bne.n	8006d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e09a      	b.n	8006e68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d107      	bne.n	8006d4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e08e      	b.n	8006e68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e086      	b.n	8006e68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d5a:	4b46      	ldr	r3, [pc, #280]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f023 0203 	bic.w	r2, r3, #3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	4943      	ldr	r1, [pc, #268]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d6c:	f7fc f8fe 	bl	8002f6c <HAL_GetTick>
 8006d70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d72:	e00a      	b.n	8006d8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d74:	f7fc f8fa 	bl	8002f6c <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e06e      	b.n	8006e68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 020c 	and.w	r2, r3, #12
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d1eb      	bne.n	8006d74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d010      	beq.n	8006dca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	4b31      	ldr	r3, [pc, #196]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d208      	bcs.n	8006dca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006db8:	4b2e      	ldr	r3, [pc, #184]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	492b      	ldr	r1, [pc, #172]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dca:	4b29      	ldr	r3, [pc, #164]	@ (8006e70 <HAL_RCC_ClockConfig+0x1ec>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0307 	and.w	r3, r3, #7
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d210      	bcs.n	8006dfa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dd8:	4b25      	ldr	r3, [pc, #148]	@ (8006e70 <HAL_RCC_ClockConfig+0x1ec>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f023 0207 	bic.w	r2, r3, #7
 8006de0:	4923      	ldr	r1, [pc, #140]	@ (8006e70 <HAL_RCC_ClockConfig+0x1ec>)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de8:	4b21      	ldr	r3, [pc, #132]	@ (8006e70 <HAL_RCC_ClockConfig+0x1ec>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0307 	and.w	r3, r3, #7
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d001      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e036      	b.n	8006e68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d008      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e06:	4b1b      	ldr	r3, [pc, #108]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	4918      	ldr	r1, [pc, #96]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d009      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e24:	4b13      	ldr	r3, [pc, #76]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	4910      	ldr	r1, [pc, #64]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e38:	f000 f824 	bl	8006e84 <HAL_RCC_GetSysClockFreq>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e74 <HAL_RCC_ClockConfig+0x1f0>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	091b      	lsrs	r3, r3, #4
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	490b      	ldr	r1, [pc, #44]	@ (8006e78 <HAL_RCC_ClockConfig+0x1f4>)
 8006e4a:	5ccb      	ldrb	r3, [r1, r3]
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
 8006e54:	4a09      	ldr	r2, [pc, #36]	@ (8006e7c <HAL_RCC_ClockConfig+0x1f8>)
 8006e56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e58:	4b09      	ldr	r3, [pc, #36]	@ (8006e80 <HAL_RCC_ClockConfig+0x1fc>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fb fea1 	bl	8002ba4 <HAL_InitTick>
 8006e62:	4603      	mov	r3, r0
 8006e64:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e66:	7afb      	ldrb	r3, [r7, #11]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40022000 	.word	0x40022000
 8006e74:	40021000 	.word	0x40021000
 8006e78:	080125c4 	.word	0x080125c4
 8006e7c:	20000000 	.word	0x20000000
 8006e80:	20000004 	.word	0x20000004

08006e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b089      	sub	sp, #36	@ 0x24
 8006e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e92:	4b3e      	ldr	r3, [pc, #248]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 030c 	and.w	r3, r3, #12
 8006e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	2b0c      	cmp	r3, #12
 8006eb0:	d121      	bne.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d11e      	bne.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006eb8:	4b34      	ldr	r3, [pc, #208]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d107      	bne.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ec4:	4b31      	ldr	r3, [pc, #196]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006eca:	0a1b      	lsrs	r3, r3, #8
 8006ecc:	f003 030f 	and.w	r3, r3, #15
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	e005      	b.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8006f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10d      	bne.n	8006f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ef4:	e00a      	b.n	8006f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d102      	bne.n	8006f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006efc:	4b25      	ldr	r3, [pc, #148]	@ (8006f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	e004      	b.n	8006f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d101      	bne.n	8006f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f08:	4b22      	ldr	r3, [pc, #136]	@ (8006f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b0c      	cmp	r3, #12
 8006f10:	d134      	bne.n	8006f7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f12:	4b1e      	ldr	r3, [pc, #120]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d003      	beq.n	8006f2a <HAL_RCC_GetSysClockFreq+0xa6>
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d003      	beq.n	8006f30 <HAL_RCC_GetSysClockFreq+0xac>
 8006f28:	e005      	b.n	8006f36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8006f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f2c:	617b      	str	r3, [r7, #20]
      break;
 8006f2e:	e005      	b.n	8006f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f30:	4b18      	ldr	r3, [pc, #96]	@ (8006f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f32:	617b      	str	r3, [r7, #20]
      break;
 8006f34:	e002      	b.n	8006f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	617b      	str	r3, [r7, #20]
      break;
 8006f3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f3c:	4b13      	ldr	r3, [pc, #76]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	091b      	lsrs	r3, r3, #4
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	3301      	adds	r3, #1
 8006f48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f4a:	4b10      	ldr	r3, [pc, #64]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	0a1b      	lsrs	r3, r3, #8
 8006f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	fb03 f202 	mul.w	r2, r3, r2
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f62:	4b0a      	ldr	r3, [pc, #40]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	0e5b      	lsrs	r3, r3, #25
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	005b      	lsls	r3, r3, #1
 8006f70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3724      	adds	r7, #36	@ 0x24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40021000 	.word	0x40021000
 8006f90:	080125dc 	.word	0x080125dc
 8006f94:	00f42400 	.word	0x00f42400

08006f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f9c:	4b03      	ldr	r3, [pc, #12]	@ (8006fac <HAL_RCC_GetHCLKFreq+0x14>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	20000000 	.word	0x20000000

08006fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006fb4:	f7ff fff0 	bl	8006f98 <HAL_RCC_GetHCLKFreq>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	4b06      	ldr	r3, [pc, #24]	@ (8006fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	0adb      	lsrs	r3, r3, #11
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	4904      	ldr	r1, [pc, #16]	@ (8006fd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fc6:	5ccb      	ldrb	r3, [r1, r3]
 8006fc8:	f003 031f 	and.w	r3, r3, #31
 8006fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	080125d4 	.word	0x080125d4

08006fdc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	220f      	movs	r2, #15
 8006fea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006fec:	4b12      	ldr	r3, [pc, #72]	@ (8007038 <HAL_RCC_GetClockConfig+0x5c>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f003 0203 	and.w	r2, r3, #3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8007038 <HAL_RCC_GetClockConfig+0x5c>)
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007004:	4b0c      	ldr	r3, [pc, #48]	@ (8007038 <HAL_RCC_GetClockConfig+0x5c>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007010:	4b09      	ldr	r3, [pc, #36]	@ (8007038 <HAL_RCC_GetClockConfig+0x5c>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	08db      	lsrs	r3, r3, #3
 8007016:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800701e:	4b07      	ldr	r3, [pc, #28]	@ (800703c <HAL_RCC_GetClockConfig+0x60>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0207 	and.w	r2, r3, #7
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	601a      	str	r2, [r3, #0]
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	40021000 	.word	0x40021000
 800703c:	40022000 	.word	0x40022000

08007040 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007048:	2300      	movs	r3, #0
 800704a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800704c:	4b2a      	ldr	r3, [pc, #168]	@ (80070f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800704e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d003      	beq.n	8007060 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007058:	f7ff f986 	bl	8006368 <HAL_PWREx_GetVoltageRange>
 800705c:	6178      	str	r0, [r7, #20]
 800705e:	e014      	b.n	800708a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007060:	4b25      	ldr	r3, [pc, #148]	@ (80070f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007064:	4a24      	ldr	r2, [pc, #144]	@ (80070f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800706a:	6593      	str	r3, [r2, #88]	@ 0x58
 800706c:	4b22      	ldr	r3, [pc, #136]	@ (80070f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800706e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007074:	60fb      	str	r3, [r7, #12]
 8007076:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007078:	f7ff f976 	bl	8006368 <HAL_PWREx_GetVoltageRange>
 800707c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800707e:	4b1e      	ldr	r3, [pc, #120]	@ (80070f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007082:	4a1d      	ldr	r2, [pc, #116]	@ (80070f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007084:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007088:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007090:	d10b      	bne.n	80070aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b80      	cmp	r3, #128	@ 0x80
 8007096:	d919      	bls.n	80070cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2ba0      	cmp	r3, #160	@ 0xa0
 800709c:	d902      	bls.n	80070a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800709e:	2302      	movs	r3, #2
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	e013      	b.n	80070cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80070a4:	2301      	movs	r3, #1
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	e010      	b.n	80070cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b80      	cmp	r3, #128	@ 0x80
 80070ae:	d902      	bls.n	80070b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80070b0:	2303      	movs	r3, #3
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	e00a      	b.n	80070cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b80      	cmp	r3, #128	@ 0x80
 80070ba:	d102      	bne.n	80070c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80070bc:	2302      	movs	r3, #2
 80070be:	613b      	str	r3, [r7, #16]
 80070c0:	e004      	b.n	80070cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b70      	cmp	r3, #112	@ 0x70
 80070c6:	d101      	bne.n	80070cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80070c8:	2301      	movs	r3, #1
 80070ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80070cc:	4b0b      	ldr	r3, [pc, #44]	@ (80070fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f023 0207 	bic.w	r2, r3, #7
 80070d4:	4909      	ldr	r1, [pc, #36]	@ (80070fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80070dc:	4b07      	ldr	r3, [pc, #28]	@ (80070fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0307 	and.w	r3, r3, #7
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d001      	beq.n	80070ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40021000 	.word	0x40021000
 80070fc:	40022000 	.word	0x40022000

08007100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007108:	2300      	movs	r3, #0
 800710a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800710c:	2300      	movs	r3, #0
 800710e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007118:	2b00      	cmp	r3, #0
 800711a:	d041      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007120:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007124:	d02a      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007126:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800712a:	d824      	bhi.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800712c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007130:	d008      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007132:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007136:	d81e      	bhi.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00a      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800713c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007140:	d010      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007142:	e018      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007144:	4b86      	ldr	r3, [pc, #536]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	4a85      	ldr	r2, [pc, #532]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800714a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800714e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007150:	e015      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	3304      	adds	r3, #4
 8007156:	2100      	movs	r1, #0
 8007158:	4618      	mov	r0, r3
 800715a:	f000 facd 	bl	80076f8 <RCCEx_PLLSAI1_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007162:	e00c      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3320      	adds	r3, #32
 8007168:	2100      	movs	r1, #0
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fbb6 	bl	80078dc <RCCEx_PLLSAI2_Config>
 8007170:	4603      	mov	r3, r0
 8007172:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007174:	e003      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	74fb      	strb	r3, [r7, #19]
      break;
 800717a:	e000      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800717c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800717e:	7cfb      	ldrb	r3, [r7, #19]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10b      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007184:	4b76      	ldr	r3, [pc, #472]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800718a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007192:	4973      	ldr	r1, [pc, #460]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007194:	4313      	orrs	r3, r2
 8007196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800719a:	e001      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719c:	7cfb      	ldrb	r3, [r7, #19]
 800719e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d041      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071b4:	d02a      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80071b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071ba:	d824      	bhi.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80071bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071c0:	d008      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80071c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071c6:	d81e      	bhi.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80071cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071d0:	d010      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80071d2:	e018      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80071d4:	4b62      	ldr	r3, [pc, #392]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	4a61      	ldr	r2, [pc, #388]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80071e0:	e015      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3304      	adds	r3, #4
 80071e6:	2100      	movs	r1, #0
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fa85 	bl	80076f8 <RCCEx_PLLSAI1_Config>
 80071ee:	4603      	mov	r3, r0
 80071f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80071f2:	e00c      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3320      	adds	r3, #32
 80071f8:	2100      	movs	r1, #0
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fb6e 	bl	80078dc <RCCEx_PLLSAI2_Config>
 8007200:	4603      	mov	r3, r0
 8007202:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007204:	e003      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	74fb      	strb	r3, [r7, #19]
      break;
 800720a:	e000      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800720c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800720e:	7cfb      	ldrb	r3, [r7, #19]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10b      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007214:	4b52      	ldr	r3, [pc, #328]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800721a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007222:	494f      	ldr	r1, [pc, #316]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800722a:	e001      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722c:	7cfb      	ldrb	r3, [r7, #19]
 800722e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 80a0 	beq.w	800737e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800723e:	2300      	movs	r3, #0
 8007240:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007242:	4b47      	ldr	r3, [pc, #284]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800724e:	2301      	movs	r3, #1
 8007250:	e000      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007252:	2300      	movs	r3, #0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00d      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007258:	4b41      	ldr	r3, [pc, #260]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800725a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800725c:	4a40      	ldr	r2, [pc, #256]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800725e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007262:	6593      	str	r3, [r2, #88]	@ 0x58
 8007264:	4b3e      	ldr	r3, [pc, #248]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800726c:	60bb      	str	r3, [r7, #8]
 800726e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007270:	2301      	movs	r3, #1
 8007272:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007274:	4b3b      	ldr	r3, [pc, #236]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a3a      	ldr	r2, [pc, #232]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800727a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800727e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007280:	f7fb fe74 	bl	8002f6c <HAL_GetTick>
 8007284:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007286:	e009      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007288:	f7fb fe70 	bl	8002f6c <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d902      	bls.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	74fb      	strb	r3, [r7, #19]
        break;
 800729a:	e005      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800729c:	4b31      	ldr	r3, [pc, #196]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0ef      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80072a8:	7cfb      	ldrb	r3, [r7, #19]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d15c      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072ae:	4b2c      	ldr	r3, [pc, #176]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01f      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d019      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80072cc:	4b24      	ldr	r3, [pc, #144]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072d8:	4b21      	ldr	r3, [pc, #132]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072de:	4a20      	ldr	r2, [pc, #128]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80072f8:	4a19      	ldr	r2, [pc, #100]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d016      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730a:	f7fb fe2f 	bl	8002f6c <HAL_GetTick>
 800730e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007310:	e00b      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007312:	f7fb fe2b 	bl	8002f6c <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007320:	4293      	cmp	r3, r2
 8007322:	d902      	bls.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	74fb      	strb	r3, [r7, #19]
            break;
 8007328:	e006      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800732a:	4b0d      	ldr	r3, [pc, #52]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800732c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0ec      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007338:	7cfb      	ldrb	r3, [r7, #19]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10c      	bne.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800733e:	4b08      	ldr	r3, [pc, #32]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800734e:	4904      	ldr	r1, [pc, #16]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007350:	4313      	orrs	r3, r2
 8007352:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007356:	e009      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007358:	7cfb      	ldrb	r3, [r7, #19]
 800735a:	74bb      	strb	r3, [r7, #18]
 800735c:	e006      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800735e:	bf00      	nop
 8007360:	40021000 	.word	0x40021000
 8007364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007368:	7cfb      	ldrb	r3, [r7, #19]
 800736a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800736c:	7c7b      	ldrb	r3, [r7, #17]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d105      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007372:	4ba6      	ldr	r3, [pc, #664]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007376:	4aa5      	ldr	r2, [pc, #660]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800737c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800738a:	4ba0      	ldr	r3, [pc, #640]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800738c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007390:	f023 0203 	bic.w	r2, r3, #3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007398:	499c      	ldr	r1, [pc, #624]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800739a:	4313      	orrs	r3, r2
 800739c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073ac:	4b97      	ldr	r3, [pc, #604]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b2:	f023 020c 	bic.w	r2, r3, #12
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ba:	4994      	ldr	r1, [pc, #592]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0304 	and.w	r3, r3, #4
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073ce:	4b8f      	ldr	r3, [pc, #572]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073dc:	498b      	ldr	r1, [pc, #556]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0308 	and.w	r3, r3, #8
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073f0:	4b86      	ldr	r3, [pc, #536]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fe:	4983      	ldr	r1, [pc, #524]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007400:	4313      	orrs	r3, r2
 8007402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0310 	and.w	r3, r3, #16
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007412:	4b7e      	ldr	r3, [pc, #504]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007420:	497a      	ldr	r1, [pc, #488]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007434:	4b75      	ldr	r3, [pc, #468]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800743a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007442:	4972      	ldr	r1, [pc, #456]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007444:	4313      	orrs	r3, r2
 8007446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007456:	4b6d      	ldr	r3, [pc, #436]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800745c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007464:	4969      	ldr	r1, [pc, #420]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007478:	4b64      	ldr	r3, [pc, #400]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800747a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800747e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007486:	4961      	ldr	r1, [pc, #388]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007488:	4313      	orrs	r3, r2
 800748a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800749a:	4b5c      	ldr	r3, [pc, #368]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800749c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074a8:	4958      	ldr	r1, [pc, #352]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074bc:	4b53      	ldr	r3, [pc, #332]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ca:	4950      	ldr	r1, [pc, #320]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074de:	4b4b      	ldr	r3, [pc, #300]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ec:	4947      	ldr	r1, [pc, #284]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007500:	4b42      	ldr	r3, [pc, #264]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007502:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007506:	f023 0203 	bic.w	r2, r3, #3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800750e:	493f      	ldr	r1, [pc, #252]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007510:	4313      	orrs	r3, r2
 8007512:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d028      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007522:	4b3a      	ldr	r3, [pc, #232]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007528:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007530:	4936      	ldr	r1, [pc, #216]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007532:	4313      	orrs	r3, r2
 8007534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800753c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007540:	d106      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007542:	4b32      	ldr	r3, [pc, #200]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	4a31      	ldr	r2, [pc, #196]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007548:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800754c:	60d3      	str	r3, [r2, #12]
 800754e:	e011      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007554:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007558:	d10c      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3304      	adds	r3, #4
 800755e:	2101      	movs	r1, #1
 8007560:	4618      	mov	r0, r3
 8007562:	f000 f8c9 	bl	80076f8 <RCCEx_PLLSAI1_Config>
 8007566:	4603      	mov	r3, r0
 8007568:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800756a:	7cfb      	ldrb	r3, [r7, #19]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8007570:	7cfb      	ldrb	r3, [r7, #19]
 8007572:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d028      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007580:	4b22      	ldr	r3, [pc, #136]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007586:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800758e:	491f      	ldr	r1, [pc, #124]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007590:	4313      	orrs	r3, r2
 8007592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800759a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800759e:	d106      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075a0:	4b1a      	ldr	r3, [pc, #104]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	4a19      	ldr	r2, [pc, #100]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075aa:	60d3      	str	r3, [r2, #12]
 80075ac:	e011      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075b6:	d10c      	bne.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	2101      	movs	r1, #1
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 f89a 	bl	80076f8 <RCCEx_PLLSAI1_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075c8:	7cfb      	ldrb	r3, [r7, #19]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80075ce:	7cfb      	ldrb	r3, [r7, #19]
 80075d0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d02a      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075de:	4b0b      	ldr	r3, [pc, #44]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075ec:	4907      	ldr	r1, [pc, #28]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075fc:	d108      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075fe:	4b03      	ldr	r3, [pc, #12]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	4a02      	ldr	r2, [pc, #8]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007608:	60d3      	str	r3, [r2, #12]
 800760a:	e013      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800760c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007614:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007618:	d10c      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3304      	adds	r3, #4
 800761e:	2101      	movs	r1, #1
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f869 	bl	80076f8 <RCCEx_PLLSAI1_Config>
 8007626:	4603      	mov	r3, r0
 8007628:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800762a:	7cfb      	ldrb	r3, [r7, #19]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8007630:	7cfb      	ldrb	r3, [r7, #19]
 8007632:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d02f      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007640:	4b2c      	ldr	r3, [pc, #176]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007646:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800764e:	4929      	ldr	r1, [pc, #164]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800765a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800765e:	d10d      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3304      	adds	r3, #4
 8007664:	2102      	movs	r1, #2
 8007666:	4618      	mov	r0, r3
 8007668:	f000 f846 	bl	80076f8 <RCCEx_PLLSAI1_Config>
 800766c:	4603      	mov	r3, r0
 800766e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007670:	7cfb      	ldrb	r3, [r7, #19]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d014      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007676:	7cfb      	ldrb	r3, [r7, #19]
 8007678:	74bb      	strb	r3, [r7, #18]
 800767a:	e011      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007680:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007684:	d10c      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3320      	adds	r3, #32
 800768a:	2102      	movs	r1, #2
 800768c:	4618      	mov	r0, r3
 800768e:	f000 f925 	bl	80078dc <RCCEx_PLLSAI2_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007696:	7cfb      	ldrb	r3, [r7, #19]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800769c:	7cfb      	ldrb	r3, [r7, #19]
 800769e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00b      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076ac:	4b11      	ldr	r3, [pc, #68]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80076ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076bc:	490d      	ldr	r1, [pc, #52]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076d0:	4b08      	ldr	r3, [pc, #32]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80076d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076e0:	4904      	ldr	r1, [pc, #16]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80076e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	40021000 	.word	0x40021000

080076f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007706:	4b74      	ldr	r3, [pc, #464]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d018      	beq.n	8007744 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007712:	4b71      	ldr	r3, [pc, #452]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	f003 0203 	and.w	r2, r3, #3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	429a      	cmp	r2, r3
 8007720:	d10d      	bne.n	800773e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
       ||
 8007726:	2b00      	cmp	r3, #0
 8007728:	d009      	beq.n	800773e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800772a:	4b6b      	ldr	r3, [pc, #428]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	091b      	lsrs	r3, r3, #4
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
       ||
 800773a:	429a      	cmp	r2, r3
 800773c:	d047      	beq.n	80077ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	73fb      	strb	r3, [r7, #15]
 8007742:	e044      	b.n	80077ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b03      	cmp	r3, #3
 800774a:	d018      	beq.n	800777e <RCCEx_PLLSAI1_Config+0x86>
 800774c:	2b03      	cmp	r3, #3
 800774e:	d825      	bhi.n	800779c <RCCEx_PLLSAI1_Config+0xa4>
 8007750:	2b01      	cmp	r3, #1
 8007752:	d002      	beq.n	800775a <RCCEx_PLLSAI1_Config+0x62>
 8007754:	2b02      	cmp	r3, #2
 8007756:	d009      	beq.n	800776c <RCCEx_PLLSAI1_Config+0x74>
 8007758:	e020      	b.n	800779c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800775a:	4b5f      	ldr	r3, [pc, #380]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d11d      	bne.n	80077a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800776a:	e01a      	b.n	80077a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800776c:	4b5a      	ldr	r3, [pc, #360]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007774:	2b00      	cmp	r3, #0
 8007776:	d116      	bne.n	80077a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800777c:	e013      	b.n	80077a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800777e:	4b56      	ldr	r3, [pc, #344]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10f      	bne.n	80077aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800778a:	4b53      	ldr	r3, [pc, #332]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d109      	bne.n	80077aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800779a:	e006      	b.n	80077aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
      break;
 80077a0:	e004      	b.n	80077ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077a2:	bf00      	nop
 80077a4:	e002      	b.n	80077ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077a6:	bf00      	nop
 80077a8:	e000      	b.n	80077ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10d      	bne.n	80077ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80077b2:	4b49      	ldr	r3, [pc, #292]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6819      	ldr	r1, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	430b      	orrs	r3, r1
 80077c8:	4943      	ldr	r1, [pc, #268]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d17c      	bne.n	80078ce <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80077d4:	4b40      	ldr	r3, [pc, #256]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a3f      	ldr	r2, [pc, #252]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077e0:	f7fb fbc4 	bl	8002f6c <HAL_GetTick>
 80077e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80077e6:	e009      	b.n	80077fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077e8:	f7fb fbc0 	bl	8002f6c <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d902      	bls.n	80077fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	73fb      	strb	r3, [r7, #15]
        break;
 80077fa:	e005      	b.n	8007808 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80077fc:	4b36      	ldr	r3, [pc, #216]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1ef      	bne.n	80077e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d15f      	bne.n	80078ce <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d110      	bne.n	8007836 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007814:	4b30      	ldr	r3, [pc, #192]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800781c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6892      	ldr	r2, [r2, #8]
 8007824:	0211      	lsls	r1, r2, #8
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	68d2      	ldr	r2, [r2, #12]
 800782a:	06d2      	lsls	r2, r2, #27
 800782c:	430a      	orrs	r2, r1
 800782e:	492a      	ldr	r1, [pc, #168]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007830:	4313      	orrs	r3, r2
 8007832:	610b      	str	r3, [r1, #16]
 8007834:	e027      	b.n	8007886 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d112      	bne.n	8007862 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800783c:	4b26      	ldr	r3, [pc, #152]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007844:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6892      	ldr	r2, [r2, #8]
 800784c:	0211      	lsls	r1, r2, #8
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	6912      	ldr	r2, [r2, #16]
 8007852:	0852      	lsrs	r2, r2, #1
 8007854:	3a01      	subs	r2, #1
 8007856:	0552      	lsls	r2, r2, #21
 8007858:	430a      	orrs	r2, r1
 800785a:	491f      	ldr	r1, [pc, #124]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800785c:	4313      	orrs	r3, r2
 800785e:	610b      	str	r3, [r1, #16]
 8007860:	e011      	b.n	8007886 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007862:	4b1d      	ldr	r3, [pc, #116]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800786a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6892      	ldr	r2, [r2, #8]
 8007872:	0211      	lsls	r1, r2, #8
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	6952      	ldr	r2, [r2, #20]
 8007878:	0852      	lsrs	r2, r2, #1
 800787a:	3a01      	subs	r2, #1
 800787c:	0652      	lsls	r2, r2, #25
 800787e:	430a      	orrs	r2, r1
 8007880:	4915      	ldr	r1, [pc, #84]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007882:	4313      	orrs	r3, r2
 8007884:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007886:	4b14      	ldr	r3, [pc, #80]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a13      	ldr	r2, [pc, #76]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800788c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007890:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007892:	f7fb fb6b 	bl	8002f6c <HAL_GetTick>
 8007896:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007898:	e009      	b.n	80078ae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800789a:	f7fb fb67 	bl	8002f6c <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d902      	bls.n	80078ae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	73fb      	strb	r3, [r7, #15]
          break;
 80078ac:	e005      	b.n	80078ba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078ae:	4b0a      	ldr	r3, [pc, #40]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d0ef      	beq.n	800789a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d106      	bne.n	80078ce <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80078c0:	4b05      	ldr	r3, [pc, #20]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078c2:	691a      	ldr	r2, [r3, #16]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	4903      	ldr	r1, [pc, #12]	@ (80078d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	40021000 	.word	0x40021000

080078dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80078ea:	4b69      	ldr	r3, [pc, #420]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f003 0303 	and.w	r3, r3, #3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d018      	beq.n	8007928 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80078f6:	4b66      	ldr	r3, [pc, #408]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f003 0203 	and.w	r2, r3, #3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d10d      	bne.n	8007922 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
       ||
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800790e:	4b60      	ldr	r3, [pc, #384]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	091b      	lsrs	r3, r3, #4
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
       ||
 800791e:	429a      	cmp	r2, r3
 8007920:	d047      	beq.n	80079b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	73fb      	strb	r3, [r7, #15]
 8007926:	e044      	b.n	80079b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b03      	cmp	r3, #3
 800792e:	d018      	beq.n	8007962 <RCCEx_PLLSAI2_Config+0x86>
 8007930:	2b03      	cmp	r3, #3
 8007932:	d825      	bhi.n	8007980 <RCCEx_PLLSAI2_Config+0xa4>
 8007934:	2b01      	cmp	r3, #1
 8007936:	d002      	beq.n	800793e <RCCEx_PLLSAI2_Config+0x62>
 8007938:	2b02      	cmp	r3, #2
 800793a:	d009      	beq.n	8007950 <RCCEx_PLLSAI2_Config+0x74>
 800793c:	e020      	b.n	8007980 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800793e:	4b54      	ldr	r3, [pc, #336]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b00      	cmp	r3, #0
 8007948:	d11d      	bne.n	8007986 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800794e:	e01a      	b.n	8007986 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007950:	4b4f      	ldr	r3, [pc, #316]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007958:	2b00      	cmp	r3, #0
 800795a:	d116      	bne.n	800798a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007960:	e013      	b.n	800798a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007962:	4b4b      	ldr	r3, [pc, #300]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10f      	bne.n	800798e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800796e:	4b48      	ldr	r3, [pc, #288]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d109      	bne.n	800798e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800797e:	e006      	b.n	800798e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	73fb      	strb	r3, [r7, #15]
      break;
 8007984:	e004      	b.n	8007990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007986:	bf00      	nop
 8007988:	e002      	b.n	8007990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800798a:	bf00      	nop
 800798c:	e000      	b.n	8007990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800798e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10d      	bne.n	80079b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007996:	4b3e      	ldr	r3, [pc, #248]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6819      	ldr	r1, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	430b      	orrs	r3, r1
 80079ac:	4938      	ldr	r1, [pc, #224]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d166      	bne.n	8007a86 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80079b8:	4b35      	ldr	r3, [pc, #212]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a34      	ldr	r2, [pc, #208]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 80079be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079c4:	f7fb fad2 	bl	8002f6c <HAL_GetTick>
 80079c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80079ca:	e009      	b.n	80079e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80079cc:	f7fb face 	bl	8002f6c <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d902      	bls.n	80079e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	73fb      	strb	r3, [r7, #15]
        break;
 80079de:	e005      	b.n	80079ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80079e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1ef      	bne.n	80079cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d149      	bne.n	8007a86 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d110      	bne.n	8007a1a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80079f8:	4b25      	ldr	r3, [pc, #148]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007a00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	6892      	ldr	r2, [r2, #8]
 8007a08:	0211      	lsls	r1, r2, #8
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	68d2      	ldr	r2, [r2, #12]
 8007a0e:	06d2      	lsls	r2, r2, #27
 8007a10:	430a      	orrs	r2, r1
 8007a12:	491f      	ldr	r1, [pc, #124]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	614b      	str	r3, [r1, #20]
 8007a18:	e011      	b.n	8007a3e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007a22:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6892      	ldr	r2, [r2, #8]
 8007a2a:	0211      	lsls	r1, r2, #8
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6912      	ldr	r2, [r2, #16]
 8007a30:	0852      	lsrs	r2, r2, #1
 8007a32:	3a01      	subs	r2, #1
 8007a34:	0652      	lsls	r2, r2, #25
 8007a36:	430a      	orrs	r2, r1
 8007a38:	4915      	ldr	r1, [pc, #84]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007a3e:	4b14      	ldr	r3, [pc, #80]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a13      	ldr	r2, [pc, #76]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a4a:	f7fb fa8f 	bl	8002f6c <HAL_GetTick>
 8007a4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007a50:	e009      	b.n	8007a66 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007a52:	f7fb fa8b 	bl	8002f6c <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d902      	bls.n	8007a66 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	73fb      	strb	r3, [r7, #15]
          break;
 8007a64:	e005      	b.n	8007a72 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007a66:	4b0a      	ldr	r3, [pc, #40]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0ef      	beq.n	8007a52 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d106      	bne.n	8007a86 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007a78:	4b05      	ldr	r3, [pc, #20]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a7a:	695a      	ldr	r2, [r3, #20]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	4903      	ldr	r1, [pc, #12]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	40021000 	.word	0x40021000

08007a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e049      	b.n	8007b3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d106      	bne.n	8007ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f841 	bl	8007b42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3304      	adds	r3, #4
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	f000 fcba 	bl	800844c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b083      	sub	sp, #12
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007b4a:	bf00      	nop
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
	...

08007b58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d001      	beq.n	8007b70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e047      	b.n	8007c00 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a23      	ldr	r2, [pc, #140]	@ (8007c0c <HAL_TIM_Base_Start+0xb4>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d01d      	beq.n	8007bbe <HAL_TIM_Base_Start+0x66>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8a:	d018      	beq.n	8007bbe <HAL_TIM_Base_Start+0x66>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1f      	ldr	r2, [pc, #124]	@ (8007c10 <HAL_TIM_Base_Start+0xb8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d013      	beq.n	8007bbe <HAL_TIM_Base_Start+0x66>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8007c14 <HAL_TIM_Base_Start+0xbc>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d00e      	beq.n	8007bbe <HAL_TIM_Base_Start+0x66>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8007c18 <HAL_TIM_Base_Start+0xc0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d009      	beq.n	8007bbe <HAL_TIM_Base_Start+0x66>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a1b      	ldr	r2, [pc, #108]	@ (8007c1c <HAL_TIM_Base_Start+0xc4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d004      	beq.n	8007bbe <HAL_TIM_Base_Start+0x66>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a19      	ldr	r2, [pc, #100]	@ (8007c20 <HAL_TIM_Base_Start+0xc8>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d115      	bne.n	8007bea <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	4b17      	ldr	r3, [pc, #92]	@ (8007c24 <HAL_TIM_Base_Start+0xcc>)
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b06      	cmp	r3, #6
 8007bce:	d015      	beq.n	8007bfc <HAL_TIM_Base_Start+0xa4>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bd6:	d011      	beq.n	8007bfc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be8:	e008      	b.n	8007bfc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f042 0201 	orr.w	r2, r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	e000      	b.n	8007bfe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	40012c00 	.word	0x40012c00
 8007c10:	40000400 	.word	0x40000400
 8007c14:	40000800 	.word	0x40000800
 8007c18:	40000c00 	.word	0x40000c00
 8007c1c:	40013400 	.word	0x40013400
 8007c20:	40014000 	.word	0x40014000
 8007c24:	00010007 	.word	0x00010007

08007c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d001      	beq.n	8007c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e04f      	b.n	8007ce0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f042 0201 	orr.w	r2, r2, #1
 8007c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a23      	ldr	r2, [pc, #140]	@ (8007cec <HAL_TIM_Base_Start_IT+0xc4>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d01d      	beq.n	8007c9e <HAL_TIM_Base_Start_IT+0x76>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c6a:	d018      	beq.n	8007c9e <HAL_TIM_Base_Start_IT+0x76>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a1f      	ldr	r2, [pc, #124]	@ (8007cf0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d013      	beq.n	8007c9e <HAL_TIM_Base_Start_IT+0x76>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8007cf4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d00e      	beq.n	8007c9e <HAL_TIM_Base_Start_IT+0x76>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a1c      	ldr	r2, [pc, #112]	@ (8007cf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d009      	beq.n	8007c9e <HAL_TIM_Base_Start_IT+0x76>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8007cfc <HAL_TIM_Base_Start_IT+0xd4>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d004      	beq.n	8007c9e <HAL_TIM_Base_Start_IT+0x76>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a19      	ldr	r2, [pc, #100]	@ (8007d00 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d115      	bne.n	8007cca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	4b17      	ldr	r3, [pc, #92]	@ (8007d04 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2b06      	cmp	r3, #6
 8007cae:	d015      	beq.n	8007cdc <HAL_TIM_Base_Start_IT+0xb4>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cb6:	d011      	beq.n	8007cdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0201 	orr.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc8:	e008      	b.n	8007cdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0201 	orr.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	e000      	b.n	8007cde <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	40012c00 	.word	0x40012c00
 8007cf0:	40000400 	.word	0x40000400
 8007cf4:	40000800 	.word	0x40000800
 8007cf8:	40000c00 	.word	0x40000c00
 8007cfc:	40013400 	.word	0x40013400
 8007d00:	40014000 	.word	0x40014000
 8007d04:	00010007 	.word	0x00010007

08007d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e049      	b.n	8007dae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7fa feaa 	bl	8002a88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3304      	adds	r3, #4
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f000 fb80 	bl	800844c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
	...

08007db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d109      	bne.n	8007ddc <HAL_TIM_PWM_Start+0x24>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	bf14      	ite	ne
 8007dd4:	2301      	movne	r3, #1
 8007dd6:	2300      	moveq	r3, #0
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	e03c      	b.n	8007e56 <HAL_TIM_PWM_Start+0x9e>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d109      	bne.n	8007df6 <HAL_TIM_PWM_Start+0x3e>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	bf14      	ite	ne
 8007dee:	2301      	movne	r3, #1
 8007df0:	2300      	moveq	r3, #0
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	e02f      	b.n	8007e56 <HAL_TIM_PWM_Start+0x9e>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d109      	bne.n	8007e10 <HAL_TIM_PWM_Start+0x58>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	bf14      	ite	ne
 8007e08:	2301      	movne	r3, #1
 8007e0a:	2300      	moveq	r3, #0
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	e022      	b.n	8007e56 <HAL_TIM_PWM_Start+0x9e>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2b0c      	cmp	r3, #12
 8007e14:	d109      	bne.n	8007e2a <HAL_TIM_PWM_Start+0x72>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	bf14      	ite	ne
 8007e22:	2301      	movne	r3, #1
 8007e24:	2300      	moveq	r3, #0
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	e015      	b.n	8007e56 <HAL_TIM_PWM_Start+0x9e>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b10      	cmp	r3, #16
 8007e2e:	d109      	bne.n	8007e44 <HAL_TIM_PWM_Start+0x8c>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	bf14      	ite	ne
 8007e3c:	2301      	movne	r3, #1
 8007e3e:	2300      	moveq	r3, #0
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	e008      	b.n	8007e56 <HAL_TIM_PWM_Start+0x9e>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	bf14      	ite	ne
 8007e50:	2301      	movne	r3, #1
 8007e52:	2300      	moveq	r3, #0
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e09c      	b.n	8007f98 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d104      	bne.n	8007e6e <HAL_TIM_PWM_Start+0xb6>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e6c:	e023      	b.n	8007eb6 <HAL_TIM_PWM_Start+0xfe>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d104      	bne.n	8007e7e <HAL_TIM_PWM_Start+0xc6>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e7c:	e01b      	b.n	8007eb6 <HAL_TIM_PWM_Start+0xfe>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d104      	bne.n	8007e8e <HAL_TIM_PWM_Start+0xd6>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e8c:	e013      	b.n	8007eb6 <HAL_TIM_PWM_Start+0xfe>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b0c      	cmp	r3, #12
 8007e92:	d104      	bne.n	8007e9e <HAL_TIM_PWM_Start+0xe6>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e9c:	e00b      	b.n	8007eb6 <HAL_TIM_PWM_Start+0xfe>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b10      	cmp	r3, #16
 8007ea2:	d104      	bne.n	8007eae <HAL_TIM_PWM_Start+0xf6>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007eac:	e003      	b.n	8007eb6 <HAL_TIM_PWM_Start+0xfe>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 fe40 	bl	8008b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a35      	ldr	r2, [pc, #212]	@ (8007fa0 <HAL_TIM_PWM_Start+0x1e8>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d013      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x13e>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a34      	ldr	r2, [pc, #208]	@ (8007fa4 <HAL_TIM_PWM_Start+0x1ec>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00e      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x13e>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a32      	ldr	r2, [pc, #200]	@ (8007fa8 <HAL_TIM_PWM_Start+0x1f0>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d009      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x13e>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a31      	ldr	r2, [pc, #196]	@ (8007fac <HAL_TIM_PWM_Start+0x1f4>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d004      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x13e>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a2f      	ldr	r2, [pc, #188]	@ (8007fb0 <HAL_TIM_PWM_Start+0x1f8>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d101      	bne.n	8007efa <HAL_TIM_PWM_Start+0x142>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <HAL_TIM_PWM_Start+0x144>
 8007efa:	2300      	movs	r3, #0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d007      	beq.n	8007f10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a22      	ldr	r2, [pc, #136]	@ (8007fa0 <HAL_TIM_PWM_Start+0x1e8>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d01d      	beq.n	8007f56 <HAL_TIM_PWM_Start+0x19e>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f22:	d018      	beq.n	8007f56 <HAL_TIM_PWM_Start+0x19e>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a22      	ldr	r2, [pc, #136]	@ (8007fb4 <HAL_TIM_PWM_Start+0x1fc>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d013      	beq.n	8007f56 <HAL_TIM_PWM_Start+0x19e>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a21      	ldr	r2, [pc, #132]	@ (8007fb8 <HAL_TIM_PWM_Start+0x200>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d00e      	beq.n	8007f56 <HAL_TIM_PWM_Start+0x19e>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007fbc <HAL_TIM_PWM_Start+0x204>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d009      	beq.n	8007f56 <HAL_TIM_PWM_Start+0x19e>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a17      	ldr	r2, [pc, #92]	@ (8007fa4 <HAL_TIM_PWM_Start+0x1ec>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d004      	beq.n	8007f56 <HAL_TIM_PWM_Start+0x19e>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a15      	ldr	r2, [pc, #84]	@ (8007fa8 <HAL_TIM_PWM_Start+0x1f0>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d115      	bne.n	8007f82 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	4b18      	ldr	r3, [pc, #96]	@ (8007fc0 <HAL_TIM_PWM_Start+0x208>)
 8007f5e:	4013      	ands	r3, r2
 8007f60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b06      	cmp	r3, #6
 8007f66:	d015      	beq.n	8007f94 <HAL_TIM_PWM_Start+0x1dc>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f6e:	d011      	beq.n	8007f94 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0201 	orr.w	r2, r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f80:	e008      	b.n	8007f94 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f042 0201 	orr.w	r2, r2, #1
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	e000      	b.n	8007f96 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	40012c00 	.word	0x40012c00
 8007fa4:	40013400 	.word	0x40013400
 8007fa8:	40014000 	.word	0x40014000
 8007fac:	40014400 	.word	0x40014400
 8007fb0:	40014800 	.word	0x40014800
 8007fb4:	40000400 	.word	0x40000400
 8007fb8:	40000800 	.word	0x40000800
 8007fbc:	40000c00 	.word	0x40000c00
 8007fc0:	00010007 	.word	0x00010007

08007fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d020      	beq.n	8008028 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d01b      	beq.n	8008028 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f06f 0202 	mvn.w	r2, #2
 8007ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	f003 0303 	and.w	r3, r3, #3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f9fe 	bl	8008410 <HAL_TIM_IC_CaptureCallback>
 8008014:	e005      	b.n	8008022 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f9f0 	bl	80083fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fa01 	bl	8008424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d020      	beq.n	8008074 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01b      	beq.n	8008074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0204 	mvn.w	r2, #4
 8008044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2202      	movs	r2, #2
 800804a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f9d8 	bl	8008410 <HAL_TIM_IC_CaptureCallback>
 8008060:	e005      	b.n	800806e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9ca 	bl	80083fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f9db 	bl	8008424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b00      	cmp	r3, #0
 800807c:	d020      	beq.n	80080c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f003 0308 	and.w	r3, r3, #8
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01b      	beq.n	80080c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f06f 0208 	mvn.w	r2, #8
 8008090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2204      	movs	r2, #4
 8008096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f9b2 	bl	8008410 <HAL_TIM_IC_CaptureCallback>
 80080ac:	e005      	b.n	80080ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f9a4 	bl	80083fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f9b5 	bl	8008424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f003 0310 	and.w	r3, r3, #16
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d020      	beq.n	800810c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f003 0310 	and.w	r3, r3, #16
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01b      	beq.n	800810c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f06f 0210 	mvn.w	r2, #16
 80080dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2208      	movs	r2, #8
 80080e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f98c 	bl	8008410 <HAL_TIM_IC_CaptureCallback>
 80080f8:	e005      	b.n	8008106 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f97e 	bl	80083fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f98f 	bl	8008424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00c      	beq.n	8008130 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b00      	cmp	r3, #0
 800811e:	d007      	beq.n	8008130 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0201 	mvn.w	r2, #1
 8008128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7fa fad6 	bl	80026dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008136:	2b00      	cmp	r3, #0
 8008138:	d104      	bne.n	8008144 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00c      	beq.n	800815e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800814a:	2b00      	cmp	r3, #0
 800814c:	d007      	beq.n	800815e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fdab 	bl	8008cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00c      	beq.n	8008182 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800816e:	2b00      	cmp	r3, #0
 8008170:	d007      	beq.n	8008182 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800817a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fda3 	bl	8008cc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00c      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800819e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f949 	bl	8008438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00c      	beq.n	80081ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f06f 0220 	mvn.w	r2, #32
 80081c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fd6b 	bl	8008ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081ca:	bf00      	nop
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d101      	bne.n	80081f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081ee:	2302      	movs	r3, #2
 80081f0:	e0ff      	b.n	80083f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b14      	cmp	r3, #20
 80081fe:	f200 80f0 	bhi.w	80083e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008202:	a201      	add	r2, pc, #4	@ (adr r2, 8008208 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	0800825d 	.word	0x0800825d
 800820c:	080083e3 	.word	0x080083e3
 8008210:	080083e3 	.word	0x080083e3
 8008214:	080083e3 	.word	0x080083e3
 8008218:	0800829d 	.word	0x0800829d
 800821c:	080083e3 	.word	0x080083e3
 8008220:	080083e3 	.word	0x080083e3
 8008224:	080083e3 	.word	0x080083e3
 8008228:	080082df 	.word	0x080082df
 800822c:	080083e3 	.word	0x080083e3
 8008230:	080083e3 	.word	0x080083e3
 8008234:	080083e3 	.word	0x080083e3
 8008238:	0800831f 	.word	0x0800831f
 800823c:	080083e3 	.word	0x080083e3
 8008240:	080083e3 	.word	0x080083e3
 8008244:	080083e3 	.word	0x080083e3
 8008248:	08008361 	.word	0x08008361
 800824c:	080083e3 	.word	0x080083e3
 8008250:	080083e3 	.word	0x080083e3
 8008254:	080083e3 	.word	0x080083e3
 8008258:	080083a1 	.word	0x080083a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68b9      	ldr	r1, [r7, #8]
 8008262:	4618      	mov	r0, r3
 8008264:	f000 f998 	bl	8008598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699a      	ldr	r2, [r3, #24]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f042 0208 	orr.w	r2, r2, #8
 8008276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0204 	bic.w	r2, r2, #4
 8008286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6999      	ldr	r1, [r3, #24]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	691a      	ldr	r2, [r3, #16]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	619a      	str	r2, [r3, #24]
      break;
 800829a:	e0a5      	b.n	80083e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fa08 	bl	80086b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	699a      	ldr	r2, [r3, #24]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6999      	ldr	r1, [r3, #24]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	021a      	lsls	r2, r3, #8
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	619a      	str	r2, [r3, #24]
      break;
 80082dc:	e084      	b.n	80083e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68b9      	ldr	r1, [r7, #8]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 fa71 	bl	80087cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69da      	ldr	r2, [r3, #28]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f042 0208 	orr.w	r2, r2, #8
 80082f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69da      	ldr	r2, [r3, #28]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0204 	bic.w	r2, r2, #4
 8008308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69d9      	ldr	r1, [r3, #28]
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	691a      	ldr	r2, [r3, #16]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	61da      	str	r2, [r3, #28]
      break;
 800831c:	e064      	b.n	80083e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	4618      	mov	r0, r3
 8008326:	f000 fad9 	bl	80088dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69da      	ldr	r2, [r3, #28]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69da      	ldr	r2, [r3, #28]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69d9      	ldr	r1, [r3, #28]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	021a      	lsls	r2, r3, #8
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	61da      	str	r2, [r3, #28]
      break;
 800835e:	e043      	b.n	80083e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	4618      	mov	r0, r3
 8008368:	f000 fb22 	bl	80089b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0208 	orr.w	r2, r2, #8
 800837a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 0204 	bic.w	r2, r2, #4
 800838a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	691a      	ldr	r2, [r3, #16]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800839e:	e023      	b.n	80083e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68b9      	ldr	r1, [r7, #8]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 fb66 	bl	8008a78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	021a      	lsls	r2, r3, #8
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80083e0:	e002      	b.n	80083e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	75fb      	strb	r3, [r7, #23]
      break;
 80083e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop

080083fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a46      	ldr	r2, [pc, #280]	@ (8008578 <TIM_Base_SetConfig+0x12c>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d013      	beq.n	800848c <TIM_Base_SetConfig+0x40>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800846a:	d00f      	beq.n	800848c <TIM_Base_SetConfig+0x40>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a43      	ldr	r2, [pc, #268]	@ (800857c <TIM_Base_SetConfig+0x130>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00b      	beq.n	800848c <TIM_Base_SetConfig+0x40>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a42      	ldr	r2, [pc, #264]	@ (8008580 <TIM_Base_SetConfig+0x134>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d007      	beq.n	800848c <TIM_Base_SetConfig+0x40>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a41      	ldr	r2, [pc, #260]	@ (8008584 <TIM_Base_SetConfig+0x138>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d003      	beq.n	800848c <TIM_Base_SetConfig+0x40>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a40      	ldr	r2, [pc, #256]	@ (8008588 <TIM_Base_SetConfig+0x13c>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d108      	bne.n	800849e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a35      	ldr	r2, [pc, #212]	@ (8008578 <TIM_Base_SetConfig+0x12c>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d01f      	beq.n	80084e6 <TIM_Base_SetConfig+0x9a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ac:	d01b      	beq.n	80084e6 <TIM_Base_SetConfig+0x9a>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a32      	ldr	r2, [pc, #200]	@ (800857c <TIM_Base_SetConfig+0x130>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d017      	beq.n	80084e6 <TIM_Base_SetConfig+0x9a>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a31      	ldr	r2, [pc, #196]	@ (8008580 <TIM_Base_SetConfig+0x134>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d013      	beq.n	80084e6 <TIM_Base_SetConfig+0x9a>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a30      	ldr	r2, [pc, #192]	@ (8008584 <TIM_Base_SetConfig+0x138>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d00f      	beq.n	80084e6 <TIM_Base_SetConfig+0x9a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a2f      	ldr	r2, [pc, #188]	@ (8008588 <TIM_Base_SetConfig+0x13c>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00b      	beq.n	80084e6 <TIM_Base_SetConfig+0x9a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a2e      	ldr	r2, [pc, #184]	@ (800858c <TIM_Base_SetConfig+0x140>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d007      	beq.n	80084e6 <TIM_Base_SetConfig+0x9a>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a2d      	ldr	r2, [pc, #180]	@ (8008590 <TIM_Base_SetConfig+0x144>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d003      	beq.n	80084e6 <TIM_Base_SetConfig+0x9a>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a2c      	ldr	r2, [pc, #176]	@ (8008594 <TIM_Base_SetConfig+0x148>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d108      	bne.n	80084f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	4313      	orrs	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	689a      	ldr	r2, [r3, #8]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a16      	ldr	r2, [pc, #88]	@ (8008578 <TIM_Base_SetConfig+0x12c>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00f      	beq.n	8008544 <TIM_Base_SetConfig+0xf8>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a18      	ldr	r2, [pc, #96]	@ (8008588 <TIM_Base_SetConfig+0x13c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d00b      	beq.n	8008544 <TIM_Base_SetConfig+0xf8>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a17      	ldr	r2, [pc, #92]	@ (800858c <TIM_Base_SetConfig+0x140>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d007      	beq.n	8008544 <TIM_Base_SetConfig+0xf8>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a16      	ldr	r2, [pc, #88]	@ (8008590 <TIM_Base_SetConfig+0x144>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d003      	beq.n	8008544 <TIM_Base_SetConfig+0xf8>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a15      	ldr	r2, [pc, #84]	@ (8008594 <TIM_Base_SetConfig+0x148>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d103      	bne.n	800854c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	691a      	ldr	r2, [r3, #16]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b01      	cmp	r3, #1
 800855c:	d105      	bne.n	800856a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	f023 0201 	bic.w	r2, r3, #1
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	611a      	str	r2, [r3, #16]
  }
}
 800856a:	bf00      	nop
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	40012c00 	.word	0x40012c00
 800857c:	40000400 	.word	0x40000400
 8008580:	40000800 	.word	0x40000800
 8008584:	40000c00 	.word	0x40000c00
 8008588:	40013400 	.word	0x40013400
 800858c:	40014000 	.word	0x40014000
 8008590:	40014400 	.word	0x40014400
 8008594:	40014800 	.word	0x40014800

08008598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a1b      	ldr	r3, [r3, #32]
 80085ac:	f023 0201 	bic.w	r2, r3, #1
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f023 0303 	bic.w	r3, r3, #3
 80085d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	4313      	orrs	r3, r2
 80085dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f023 0302 	bic.w	r3, r3, #2
 80085e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a2c      	ldr	r2, [pc, #176]	@ (80086a4 <TIM_OC1_SetConfig+0x10c>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d00f      	beq.n	8008618 <TIM_OC1_SetConfig+0x80>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a2b      	ldr	r2, [pc, #172]	@ (80086a8 <TIM_OC1_SetConfig+0x110>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d00b      	beq.n	8008618 <TIM_OC1_SetConfig+0x80>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a2a      	ldr	r2, [pc, #168]	@ (80086ac <TIM_OC1_SetConfig+0x114>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d007      	beq.n	8008618 <TIM_OC1_SetConfig+0x80>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a29      	ldr	r2, [pc, #164]	@ (80086b0 <TIM_OC1_SetConfig+0x118>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d003      	beq.n	8008618 <TIM_OC1_SetConfig+0x80>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a28      	ldr	r2, [pc, #160]	@ (80086b4 <TIM_OC1_SetConfig+0x11c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d10c      	bne.n	8008632 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f023 0308 	bic.w	r3, r3, #8
 800861e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	4313      	orrs	r3, r2
 8008628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f023 0304 	bic.w	r3, r3, #4
 8008630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a1b      	ldr	r2, [pc, #108]	@ (80086a4 <TIM_OC1_SetConfig+0x10c>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d00f      	beq.n	800865a <TIM_OC1_SetConfig+0xc2>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a1a      	ldr	r2, [pc, #104]	@ (80086a8 <TIM_OC1_SetConfig+0x110>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00b      	beq.n	800865a <TIM_OC1_SetConfig+0xc2>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a19      	ldr	r2, [pc, #100]	@ (80086ac <TIM_OC1_SetConfig+0x114>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d007      	beq.n	800865a <TIM_OC1_SetConfig+0xc2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a18      	ldr	r2, [pc, #96]	@ (80086b0 <TIM_OC1_SetConfig+0x118>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d003      	beq.n	800865a <TIM_OC1_SetConfig+0xc2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a17      	ldr	r2, [pc, #92]	@ (80086b4 <TIM_OC1_SetConfig+0x11c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d111      	bne.n	800867e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	4313      	orrs	r3, r2
 8008672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	4313      	orrs	r3, r2
 800867c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	621a      	str	r2, [r3, #32]
}
 8008698:	bf00      	nop
 800869a:	371c      	adds	r7, #28
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	40012c00 	.word	0x40012c00
 80086a8:	40013400 	.word	0x40013400
 80086ac:	40014000 	.word	0x40014000
 80086b0:	40014400 	.word	0x40014400
 80086b4:	40014800 	.word	0x40014800

080086b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	f023 0210 	bic.w	r2, r3, #16
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	021b      	lsls	r3, r3, #8
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f023 0320 	bic.w	r3, r3, #32
 8008706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	011b      	lsls	r3, r3, #4
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	4313      	orrs	r3, r2
 8008712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a28      	ldr	r2, [pc, #160]	@ (80087b8 <TIM_OC2_SetConfig+0x100>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d003      	beq.n	8008724 <TIM_OC2_SetConfig+0x6c>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a27      	ldr	r2, [pc, #156]	@ (80087bc <TIM_OC2_SetConfig+0x104>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d10d      	bne.n	8008740 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800872a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	4313      	orrs	r3, r2
 8008736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800873e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a1d      	ldr	r2, [pc, #116]	@ (80087b8 <TIM_OC2_SetConfig+0x100>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00f      	beq.n	8008768 <TIM_OC2_SetConfig+0xb0>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a1c      	ldr	r2, [pc, #112]	@ (80087bc <TIM_OC2_SetConfig+0x104>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00b      	beq.n	8008768 <TIM_OC2_SetConfig+0xb0>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a1b      	ldr	r2, [pc, #108]	@ (80087c0 <TIM_OC2_SetConfig+0x108>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d007      	beq.n	8008768 <TIM_OC2_SetConfig+0xb0>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a1a      	ldr	r2, [pc, #104]	@ (80087c4 <TIM_OC2_SetConfig+0x10c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d003      	beq.n	8008768 <TIM_OC2_SetConfig+0xb0>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a19      	ldr	r2, [pc, #100]	@ (80087c8 <TIM_OC2_SetConfig+0x110>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d113      	bne.n	8008790 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800876e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	4313      	orrs	r3, r2
 8008782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	4313      	orrs	r3, r2
 800878e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	621a      	str	r2, [r3, #32]
}
 80087aa:	bf00      	nop
 80087ac:	371c      	adds	r7, #28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	40012c00 	.word	0x40012c00
 80087bc:	40013400 	.word	0x40013400
 80087c0:	40014000 	.word	0x40014000
 80087c4:	40014400 	.word	0x40014400
 80087c8:	40014800 	.word	0x40014800

080087cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f023 0303 	bic.w	r3, r3, #3
 8008806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	021b      	lsls	r3, r3, #8
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	4313      	orrs	r3, r2
 8008824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a27      	ldr	r2, [pc, #156]	@ (80088c8 <TIM_OC3_SetConfig+0xfc>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d003      	beq.n	8008836 <TIM_OC3_SetConfig+0x6a>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a26      	ldr	r2, [pc, #152]	@ (80088cc <TIM_OC3_SetConfig+0x100>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d10d      	bne.n	8008852 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800883c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	021b      	lsls	r3, r3, #8
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	4313      	orrs	r3, r2
 8008848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a1c      	ldr	r2, [pc, #112]	@ (80088c8 <TIM_OC3_SetConfig+0xfc>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d00f      	beq.n	800887a <TIM_OC3_SetConfig+0xae>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a1b      	ldr	r2, [pc, #108]	@ (80088cc <TIM_OC3_SetConfig+0x100>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d00b      	beq.n	800887a <TIM_OC3_SetConfig+0xae>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a1a      	ldr	r2, [pc, #104]	@ (80088d0 <TIM_OC3_SetConfig+0x104>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d007      	beq.n	800887a <TIM_OC3_SetConfig+0xae>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a19      	ldr	r2, [pc, #100]	@ (80088d4 <TIM_OC3_SetConfig+0x108>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d003      	beq.n	800887a <TIM_OC3_SetConfig+0xae>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a18      	ldr	r2, [pc, #96]	@ (80088d8 <TIM_OC3_SetConfig+0x10c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d113      	bne.n	80088a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	4313      	orrs	r3, r2
 8008894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	011b      	lsls	r3, r3, #4
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	4313      	orrs	r3, r2
 80088a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	621a      	str	r2, [r3, #32]
}
 80088bc:	bf00      	nop
 80088be:	371c      	adds	r7, #28
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	40012c00 	.word	0x40012c00
 80088cc:	40013400 	.word	0x40013400
 80088d0:	40014000 	.word	0x40014000
 80088d4:	40014400 	.word	0x40014400
 80088d8:	40014800 	.word	0x40014800

080088dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
 80088f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800890a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800890e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	021b      	lsls	r3, r3, #8
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	4313      	orrs	r3, r2
 8008922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800892a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	031b      	lsls	r3, r3, #12
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	4313      	orrs	r3, r2
 8008936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a18      	ldr	r2, [pc, #96]	@ (800899c <TIM_OC4_SetConfig+0xc0>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d00f      	beq.n	8008960 <TIM_OC4_SetConfig+0x84>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a17      	ldr	r2, [pc, #92]	@ (80089a0 <TIM_OC4_SetConfig+0xc4>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00b      	beq.n	8008960 <TIM_OC4_SetConfig+0x84>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a16      	ldr	r2, [pc, #88]	@ (80089a4 <TIM_OC4_SetConfig+0xc8>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d007      	beq.n	8008960 <TIM_OC4_SetConfig+0x84>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a15      	ldr	r2, [pc, #84]	@ (80089a8 <TIM_OC4_SetConfig+0xcc>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d003      	beq.n	8008960 <TIM_OC4_SetConfig+0x84>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a14      	ldr	r2, [pc, #80]	@ (80089ac <TIM_OC4_SetConfig+0xd0>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d109      	bne.n	8008974 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	019b      	lsls	r3, r3, #6
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	4313      	orrs	r3, r2
 8008972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	621a      	str	r2, [r3, #32]
}
 800898e:	bf00      	nop
 8008990:	371c      	adds	r7, #28
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	40012c00 	.word	0x40012c00
 80089a0:	40013400 	.word	0x40013400
 80089a4:	40014000 	.word	0x40014000
 80089a8:	40014400 	.word	0x40014400
 80089ac:	40014800 	.word	0x40014800

080089b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80089f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	041b      	lsls	r3, r3, #16
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a17      	ldr	r2, [pc, #92]	@ (8008a64 <TIM_OC5_SetConfig+0xb4>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d00f      	beq.n	8008a2a <TIM_OC5_SetConfig+0x7a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a16      	ldr	r2, [pc, #88]	@ (8008a68 <TIM_OC5_SetConfig+0xb8>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d00b      	beq.n	8008a2a <TIM_OC5_SetConfig+0x7a>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a15      	ldr	r2, [pc, #84]	@ (8008a6c <TIM_OC5_SetConfig+0xbc>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d007      	beq.n	8008a2a <TIM_OC5_SetConfig+0x7a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a14      	ldr	r2, [pc, #80]	@ (8008a70 <TIM_OC5_SetConfig+0xc0>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d003      	beq.n	8008a2a <TIM_OC5_SetConfig+0x7a>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a13      	ldr	r2, [pc, #76]	@ (8008a74 <TIM_OC5_SetConfig+0xc4>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d109      	bne.n	8008a3e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	021b      	lsls	r3, r3, #8
 8008a38:	697a      	ldr	r2, [r7, #20]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	621a      	str	r2, [r3, #32]
}
 8008a58:	bf00      	nop
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	40012c00 	.word	0x40012c00
 8008a68:	40013400 	.word	0x40013400
 8008a6c:	40014000 	.word	0x40014000
 8008a70:	40014400 	.word	0x40014400
 8008a74:	40014800 	.word	0x40014800

08008a78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	021b      	lsls	r3, r3, #8
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	051b      	lsls	r3, r3, #20
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a18      	ldr	r2, [pc, #96]	@ (8008b30 <TIM_OC6_SetConfig+0xb8>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d00f      	beq.n	8008af4 <TIM_OC6_SetConfig+0x7c>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a17      	ldr	r2, [pc, #92]	@ (8008b34 <TIM_OC6_SetConfig+0xbc>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d00b      	beq.n	8008af4 <TIM_OC6_SetConfig+0x7c>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a16      	ldr	r2, [pc, #88]	@ (8008b38 <TIM_OC6_SetConfig+0xc0>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d007      	beq.n	8008af4 <TIM_OC6_SetConfig+0x7c>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a15      	ldr	r2, [pc, #84]	@ (8008b3c <TIM_OC6_SetConfig+0xc4>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d003      	beq.n	8008af4 <TIM_OC6_SetConfig+0x7c>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a14      	ldr	r2, [pc, #80]	@ (8008b40 <TIM_OC6_SetConfig+0xc8>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d109      	bne.n	8008b08 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008afa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	029b      	lsls	r3, r3, #10
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	621a      	str	r2, [r3, #32]
}
 8008b22:	bf00      	nop
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	40012c00 	.word	0x40012c00
 8008b34:	40013400 	.word	0x40013400
 8008b38:	40014000 	.word	0x40014000
 8008b3c:	40014400 	.word	0x40014400
 8008b40:	40014800 	.word	0x40014800

08008b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f003 031f 	and.w	r3, r3, #31
 8008b56:	2201      	movs	r2, #1
 8008b58:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6a1a      	ldr	r2, [r3, #32]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	43db      	mvns	r3, r3
 8008b66:	401a      	ands	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6a1a      	ldr	r2, [r3, #32]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f003 031f 	and.w	r3, r3, #31
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	621a      	str	r2, [r3, #32]
}
 8008b82:	bf00      	nop
 8008b84:	371c      	adds	r7, #28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
	...

08008b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d101      	bne.n	8008ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	e068      	b.n	8008c7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d004      	beq.n	8008bdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8008c8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d108      	bne.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008be2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d01d      	beq.n	8008c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c1a:	d018      	beq.n	8008c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a1b      	ldr	r2, [pc, #108]	@ (8008c90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d013      	beq.n	8008c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8008c94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d00e      	beq.n	8008c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a18      	ldr	r2, [pc, #96]	@ (8008c98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d009      	beq.n	8008c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a13      	ldr	r2, [pc, #76]	@ (8008c8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d004      	beq.n	8008c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a14      	ldr	r2, [pc, #80]	@ (8008c9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d10c      	bne.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	40012c00 	.word	0x40012c00
 8008c8c:	40013400 	.word	0x40013400
 8008c90:	40000400 	.word	0x40000400
 8008c94:	40000800 	.word	0x40000800
 8008c98:	40000c00 	.word	0x40000c00
 8008c9c:	40014000 	.word	0x40014000

08008ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cdc:	b084      	sub	sp, #16
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	f107 001c 	add.w	r0, r7, #28
 8008cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 fa26 	bl	800a14c <USB_CoreReset>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008d04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d106      	bne.n	8008d1a <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d18:	e005      	b.n	8008d26 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d32:	b004      	add	sp, #16
 8008d34:	4770      	bx	lr
	...

08008d38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	4613      	mov	r3, r2
 8008d44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d165      	bne.n	8008e18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8008e48 <USB_SetTurnaroundTime+0x110>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d906      	bls.n	8008d62 <USB_SetTurnaroundTime+0x2a>
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	4a3d      	ldr	r2, [pc, #244]	@ (8008e4c <USB_SetTurnaroundTime+0x114>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d202      	bcs.n	8008d62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008d5c:	230f      	movs	r3, #15
 8008d5e:	617b      	str	r3, [r7, #20]
 8008d60:	e05c      	b.n	8008e1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	4a39      	ldr	r2, [pc, #228]	@ (8008e4c <USB_SetTurnaroundTime+0x114>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d306      	bcc.n	8008d78 <USB_SetTurnaroundTime+0x40>
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	4a38      	ldr	r2, [pc, #224]	@ (8008e50 <USB_SetTurnaroundTime+0x118>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d202      	bcs.n	8008d78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008d72:	230e      	movs	r3, #14
 8008d74:	617b      	str	r3, [r7, #20]
 8008d76:	e051      	b.n	8008e1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4a35      	ldr	r2, [pc, #212]	@ (8008e50 <USB_SetTurnaroundTime+0x118>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d306      	bcc.n	8008d8e <USB_SetTurnaroundTime+0x56>
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	4a34      	ldr	r2, [pc, #208]	@ (8008e54 <USB_SetTurnaroundTime+0x11c>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d202      	bcs.n	8008d8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008d88:	230d      	movs	r3, #13
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	e046      	b.n	8008e1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	4a30      	ldr	r2, [pc, #192]	@ (8008e54 <USB_SetTurnaroundTime+0x11c>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d306      	bcc.n	8008da4 <USB_SetTurnaroundTime+0x6c>
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	4a2f      	ldr	r2, [pc, #188]	@ (8008e58 <USB_SetTurnaroundTime+0x120>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d802      	bhi.n	8008da4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008d9e:	230c      	movs	r3, #12
 8008da0:	617b      	str	r3, [r7, #20]
 8008da2:	e03b      	b.n	8008e1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	4a2c      	ldr	r2, [pc, #176]	@ (8008e58 <USB_SetTurnaroundTime+0x120>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d906      	bls.n	8008dba <USB_SetTurnaroundTime+0x82>
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	4a2b      	ldr	r2, [pc, #172]	@ (8008e5c <USB_SetTurnaroundTime+0x124>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d802      	bhi.n	8008dba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008db4:	230b      	movs	r3, #11
 8008db6:	617b      	str	r3, [r7, #20]
 8008db8:	e030      	b.n	8008e1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	4a27      	ldr	r2, [pc, #156]	@ (8008e5c <USB_SetTurnaroundTime+0x124>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d906      	bls.n	8008dd0 <USB_SetTurnaroundTime+0x98>
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	4a26      	ldr	r2, [pc, #152]	@ (8008e60 <USB_SetTurnaroundTime+0x128>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d802      	bhi.n	8008dd0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008dca:	230a      	movs	r3, #10
 8008dcc:	617b      	str	r3, [r7, #20]
 8008dce:	e025      	b.n	8008e1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	4a23      	ldr	r2, [pc, #140]	@ (8008e60 <USB_SetTurnaroundTime+0x128>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d906      	bls.n	8008de6 <USB_SetTurnaroundTime+0xae>
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	4a22      	ldr	r2, [pc, #136]	@ (8008e64 <USB_SetTurnaroundTime+0x12c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d202      	bcs.n	8008de6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008de0:	2309      	movs	r3, #9
 8008de2:	617b      	str	r3, [r7, #20]
 8008de4:	e01a      	b.n	8008e1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	4a1e      	ldr	r2, [pc, #120]	@ (8008e64 <USB_SetTurnaroundTime+0x12c>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d306      	bcc.n	8008dfc <USB_SetTurnaroundTime+0xc4>
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e68 <USB_SetTurnaroundTime+0x130>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d802      	bhi.n	8008dfc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008df6:	2308      	movs	r3, #8
 8008df8:	617b      	str	r3, [r7, #20]
 8008dfa:	e00f      	b.n	8008e1c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8008e68 <USB_SetTurnaroundTime+0x130>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d906      	bls.n	8008e12 <USB_SetTurnaroundTime+0xda>
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	4a19      	ldr	r2, [pc, #100]	@ (8008e6c <USB_SetTurnaroundTime+0x134>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d202      	bcs.n	8008e12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008e0c:	2307      	movs	r3, #7
 8008e0e:	617b      	str	r3, [r7, #20]
 8008e10:	e004      	b.n	8008e1c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008e12:	2306      	movs	r3, #6
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	e001      	b.n	8008e1c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008e18:	2309      	movs	r3, #9
 8008e1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	029b      	lsls	r3, r3, #10
 8008e30:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008e34:	431a      	orrs	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	371c      	adds	r7, #28
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	00d8acbf 	.word	0x00d8acbf
 8008e4c:	00e4e1c0 	.word	0x00e4e1c0
 8008e50:	00f42400 	.word	0x00f42400
 8008e54:	01067380 	.word	0x01067380
 8008e58:	011a499f 	.word	0x011a499f
 8008e5c:	01312cff 	.word	0x01312cff
 8008e60:	014ca43f 	.word	0x014ca43f
 8008e64:	016e3600 	.word	0x016e3600
 8008e68:	01a6ab1f 	.word	0x01a6ab1f
 8008e6c:	01e84800 	.word	0x01e84800

08008e70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f043 0201 	orr.w	r2, r3, #1
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f023 0201 	bic.w	r2, r3, #1
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d115      	bne.n	8008f02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008ee2:	200a      	movs	r0, #10
 8008ee4:	f7fa f84e 	bl	8002f84 <HAL_Delay>
      ms += 10U;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	330a      	adds	r3, #10
 8008eec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f001 f8b3 	bl	800a05a <USB_GetMode>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d01e      	beq.n	8008f38 <USB_SetCurrentMode+0x84>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2bc7      	cmp	r3, #199	@ 0xc7
 8008efe:	d9f0      	bls.n	8008ee2 <USB_SetCurrentMode+0x2e>
 8008f00:	e01a      	b.n	8008f38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d115      	bne.n	8008f34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f14:	200a      	movs	r0, #10
 8008f16:	f7fa f835 	bl	8002f84 <HAL_Delay>
      ms += 10U;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	330a      	adds	r3, #10
 8008f1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 f89a 	bl	800a05a <USB_GetMode>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d005      	beq.n	8008f38 <USB_SetCurrentMode+0x84>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f30:	d9f0      	bls.n	8008f14 <USB_SetCurrentMode+0x60>
 8008f32:	e001      	b.n	8008f38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e005      	b.n	8008f44 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2bc8      	cmp	r3, #200	@ 0xc8
 8008f3c:	d101      	bne.n	8008f42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e000      	b.n	8008f44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b086      	sub	sp, #24
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f66:	2300      	movs	r3, #0
 8008f68:	613b      	str	r3, [r7, #16]
 8008f6a:	e009      	b.n	8008f80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	3340      	adds	r3, #64	@ 0x40
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	2200      	movs	r2, #0
 8008f78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	613b      	str	r3, [r7, #16]
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2b0e      	cmp	r3, #14
 8008f84:	d9f2      	bls.n	8008f6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008f86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d11c      	bne.n	8008fc8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f9c:	f043 0302 	orr.w	r3, r3, #2
 8008fa0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	e005      	b.n	8008fd4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fcc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008fda:	461a      	mov	r2, r3
 8008fdc:	2300      	movs	r3, #0
 8008fde:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008fe0:	2103      	movs	r1, #3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f95a 	bl	800929c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008fe8:	2110      	movs	r1, #16
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f8f6 	bl	80091dc <USB_FlushTxFifo>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f920 	bl	8009240 <USB_FlushRxFifo>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009010:	461a      	mov	r2, r3
 8009012:	2300      	movs	r3, #0
 8009014:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800901c:	461a      	mov	r2, r3
 800901e:	2300      	movs	r3, #0
 8009020:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009028:	461a      	mov	r2, r3
 800902a:	2300      	movs	r3, #0
 800902c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800902e:	2300      	movs	r3, #0
 8009030:	613b      	str	r3, [r7, #16]
 8009032:	e043      	b.n	80090bc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009046:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800904a:	d118      	bne.n	800907e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10a      	bne.n	8009068 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	015a      	lsls	r2, r3, #5
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	4413      	add	r3, r2
 800905a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800905e:	461a      	mov	r2, r3
 8009060:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	e013      	b.n	8009090 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4413      	add	r3, r2
 8009070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009074:	461a      	mov	r2, r3
 8009076:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800907a:	6013      	str	r3, [r2, #0]
 800907c:	e008      	b.n	8009090 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	015a      	lsls	r2, r3, #5
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	4413      	add	r3, r2
 8009086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800908a:	461a      	mov	r2, r3
 800908c:	2300      	movs	r3, #0
 800908e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	015a      	lsls	r2, r3, #5
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	4413      	add	r3, r2
 8009098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800909c:	461a      	mov	r2, r3
 800909e:	2300      	movs	r3, #0
 80090a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ae:	461a      	mov	r2, r3
 80090b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80090b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	3301      	adds	r3, #1
 80090ba:	613b      	str	r3, [r7, #16]
 80090bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80090c0:	461a      	mov	r2, r3
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d3b5      	bcc.n	8009034 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090c8:	2300      	movs	r3, #0
 80090ca:	613b      	str	r3, [r7, #16]
 80090cc:	e043      	b.n	8009156 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090e4:	d118      	bne.n	8009118 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10a      	bne.n	8009102 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090f8:	461a      	mov	r2, r3
 80090fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	e013      	b.n	800912a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800910e:	461a      	mov	r2, r3
 8009110:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009114:	6013      	str	r3, [r2, #0]
 8009116:	e008      	b.n	800912a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	4413      	add	r3, r2
 8009120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009124:	461a      	mov	r2, r3
 8009126:	2300      	movs	r3, #0
 8009128:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009136:	461a      	mov	r2, r3
 8009138:	2300      	movs	r3, #0
 800913a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	015a      	lsls	r2, r3, #5
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4413      	add	r3, r2
 8009144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009148:	461a      	mov	r2, r3
 800914a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800914e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	3301      	adds	r3, #1
 8009154:	613b      	str	r3, [r7, #16]
 8009156:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800915a:	461a      	mov	r2, r3
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	4293      	cmp	r3, r2
 8009160:	d3b5      	bcc.n	80090ce <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009174:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009182:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	f043 0210 	orr.w	r2, r3, #16
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	699a      	ldr	r2, [r3, #24]
 8009194:	4b10      	ldr	r3, [pc, #64]	@ (80091d8 <USB_DevInit+0x28c>)
 8009196:	4313      	orrs	r3, r2
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800919c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d005      	beq.n	80091b0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	f043 0208 	orr.w	r2, r3, #8
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80091b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d107      	bne.n	80091c8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091c0:	f043 0304 	orr.w	r3, r3, #4
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80091c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3718      	adds	r7, #24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091d4:	b004      	add	sp, #16
 80091d6:	4770      	bx	lr
 80091d8:	803c3800 	.word	0x803c3800

080091dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3301      	adds	r3, #1
 80091ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091f6:	d901      	bls.n	80091fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e01b      	b.n	8009234 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	daf2      	bge.n	80091ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	019b      	lsls	r3, r3, #6
 800920c:	f043 0220 	orr.w	r2, r3, #32
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3301      	adds	r3, #1
 8009218:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009220:	d901      	bls.n	8009226 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009222:	2303      	movs	r3, #3
 8009224:	e006      	b.n	8009234 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	f003 0320 	and.w	r3, r3, #32
 800922e:	2b20      	cmp	r3, #32
 8009230:	d0f0      	beq.n	8009214 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009248:	2300      	movs	r3, #0
 800924a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	3301      	adds	r3, #1
 8009250:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009258:	d901      	bls.n	800925e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e018      	b.n	8009290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	daf2      	bge.n	800924c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2210      	movs	r2, #16
 800926e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3301      	adds	r3, #1
 8009274:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800927c:	d901      	bls.n	8009282 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e006      	b.n	8009290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	f003 0310 	and.w	r3, r3, #16
 800928a:	2b10      	cmp	r3, #16
 800928c:	d0f0      	beq.n	8009270 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	78fb      	ldrb	r3, [r7, #3]
 80092b6:	68f9      	ldr	r1, [r7, #12]
 80092b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092bc:	4313      	orrs	r3, r2
 80092be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b087      	sub	sp, #28
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f003 0306 	and.w	r3, r3, #6
 80092e6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d002      	beq.n	80092f4 <USB_GetDevSpeed+0x26>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b06      	cmp	r3, #6
 80092f2:	d102      	bne.n	80092fa <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80092f4:	2302      	movs	r3, #2
 80092f6:	75fb      	strb	r3, [r7, #23]
 80092f8:	e001      	b.n	80092fe <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80092fa:	230f      	movs	r3, #15
 80092fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80092fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009300:	4618      	mov	r0, r3
 8009302:	371c      	adds	r7, #28
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	785b      	ldrb	r3, [r3, #1]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d13a      	bne.n	800939e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800932e:	69da      	ldr	r2, [r3, #28]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	f003 030f 	and.w	r3, r3, #15
 8009338:	2101      	movs	r1, #1
 800933a:	fa01 f303 	lsl.w	r3, r1, r3
 800933e:	b29b      	uxth	r3, r3
 8009340:	68f9      	ldr	r1, [r7, #12]
 8009342:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009346:	4313      	orrs	r3, r2
 8009348:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d155      	bne.n	800940c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4413      	add	r3, r2
 8009368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	791b      	ldrb	r3, [r3, #4]
 800937a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800937c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	059b      	lsls	r3, r3, #22
 8009382:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009384:	4313      	orrs	r3, r2
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	0151      	lsls	r1, r2, #5
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	440a      	add	r2, r1
 800938e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	e036      	b.n	800940c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093a4:	69da      	ldr	r2, [r3, #28]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	f003 030f 	and.w	r3, r3, #15
 80093ae:	2101      	movs	r1, #1
 80093b0:	fa01 f303 	lsl.w	r3, r1, r3
 80093b4:	041b      	lsls	r3, r3, #16
 80093b6:	68f9      	ldr	r1, [r7, #12]
 80093b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093bc:	4313      	orrs	r3, r2
 80093be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d11a      	bne.n	800940c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	015a      	lsls	r2, r3, #5
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	4413      	add	r3, r2
 80093de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	791b      	ldrb	r3, [r3, #4]
 80093f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80093f2:	430b      	orrs	r3, r1
 80093f4:	4313      	orrs	r3, r2
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	0151      	lsls	r1, r2, #5
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	440a      	add	r2, r1
 80093fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800940a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
	...

0800941c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	785b      	ldrb	r3, [r3, #1]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d161      	bne.n	80094fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4413      	add	r3, r2
 8009440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800944a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800944e:	d11f      	bne.n	8009490 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	0151      	lsls	r1, r2, #5
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	440a      	add	r2, r1
 8009466:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800946a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800946e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4413      	add	r3, r2
 8009478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	0151      	lsls	r1, r2, #5
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	440a      	add	r2, r1
 8009486:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800948a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800948e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009496:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	f003 030f 	and.w	r3, r3, #15
 80094a0:	2101      	movs	r1, #1
 80094a2:	fa01 f303 	lsl.w	r3, r1, r3
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	43db      	mvns	r3, r3
 80094aa:	68f9      	ldr	r1, [r7, #12]
 80094ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094b0:	4013      	ands	r3, r2
 80094b2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ba:	69da      	ldr	r2, [r3, #28]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	f003 030f 	and.w	r3, r3, #15
 80094c4:	2101      	movs	r1, #1
 80094c6:	fa01 f303 	lsl.w	r3, r1, r3
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	43db      	mvns	r3, r3
 80094ce:	68f9      	ldr	r1, [r7, #12]
 80094d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094d4:	4013      	ands	r3, r2
 80094d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	015a      	lsls	r2, r3, #5
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4413      	add	r3, r2
 80094e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	0159      	lsls	r1, r3, #5
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	440b      	add	r3, r1
 80094ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094f2:	4619      	mov	r1, r3
 80094f4:	4b35      	ldr	r3, [pc, #212]	@ (80095cc <USB_DeactivateEndpoint+0x1b0>)
 80094f6:	4013      	ands	r3, r2
 80094f8:	600b      	str	r3, [r1, #0]
 80094fa:	e060      	b.n	80095be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	015a      	lsls	r2, r3, #5
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	4413      	add	r3, r2
 8009504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800950e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009512:	d11f      	bne.n	8009554 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	0151      	lsls	r1, r2, #5
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	440a      	add	r2, r1
 800952a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800952e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009532:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4413      	add	r3, r2
 800953c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	0151      	lsls	r1, r2, #5
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	440a      	add	r2, r1
 800954a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800954e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009552:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800955a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	f003 030f 	and.w	r3, r3, #15
 8009564:	2101      	movs	r1, #1
 8009566:	fa01 f303 	lsl.w	r3, r1, r3
 800956a:	041b      	lsls	r3, r3, #16
 800956c:	43db      	mvns	r3, r3
 800956e:	68f9      	ldr	r1, [r7, #12]
 8009570:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009574:	4013      	ands	r3, r2
 8009576:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800957e:	69da      	ldr	r2, [r3, #28]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	f003 030f 	and.w	r3, r3, #15
 8009588:	2101      	movs	r1, #1
 800958a:	fa01 f303 	lsl.w	r3, r1, r3
 800958e:	041b      	lsls	r3, r3, #16
 8009590:	43db      	mvns	r3, r3
 8009592:	68f9      	ldr	r1, [r7, #12]
 8009594:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009598:	4013      	ands	r3, r2
 800959a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	0159      	lsls	r1, r3, #5
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	440b      	add	r3, r1
 80095b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095b6:	4619      	mov	r1, r3
 80095b8:	4b05      	ldr	r3, [pc, #20]	@ (80095d0 <USB_DeactivateEndpoint+0x1b4>)
 80095ba:	4013      	ands	r3, r2
 80095bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	ec337800 	.word	0xec337800
 80095d0:	eff37800 	.word	0xeff37800

080095d4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	785b      	ldrb	r3, [r3, #1]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	f040 812d 	bne.w	800984c <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d132      	bne.n	8009660 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	015a      	lsls	r2, r3, #5
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	4413      	add	r3, r2
 8009602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	0151      	lsls	r1, r2, #5
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	440a      	add	r2, r1
 8009610:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009614:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009618:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800961c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	015a      	lsls	r2, r3, #5
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	4413      	add	r3, r2
 8009626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	0151      	lsls	r1, r2, #5
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	440a      	add	r2, r1
 8009634:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009638:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800963c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	0151      	lsls	r1, r2, #5
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	440a      	add	r2, r1
 8009654:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009658:	0cdb      	lsrs	r3, r3, #19
 800965a:	04db      	lsls	r3, r3, #19
 800965c:	6113      	str	r3, [r2, #16]
 800965e:	e097      	b.n	8009790 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	015a      	lsls	r2, r3, #5
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	4413      	add	r3, r2
 8009668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	0151      	lsls	r1, r2, #5
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	440a      	add	r2, r1
 8009676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800967a:	0cdb      	lsrs	r3, r3, #19
 800967c:	04db      	lsls	r3, r3, #19
 800967e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	0151      	lsls	r1, r2, #5
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	440a      	add	r2, r1
 8009696:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800969a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800969e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80096a2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d11a      	bne.n	80096e0 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	691a      	ldr	r2, [r3, #16]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d903      	bls.n	80096be <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	689a      	ldr	r2, [r3, #8]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	0151      	lsls	r1, r2, #5
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	440a      	add	r2, r1
 80096d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096dc:	6113      	str	r3, [r2, #16]
 80096de:	e044      	b.n	800976a <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	691a      	ldr	r2, [r3, #16]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	4413      	add	r3, r2
 80096ea:	1e5a      	subs	r2, r3, #1
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096f4:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009702:	691a      	ldr	r2, [r3, #16]
 8009704:	89fb      	ldrh	r3, [r7, #14]
 8009706:	04d9      	lsls	r1, r3, #19
 8009708:	4b8f      	ldr	r3, [pc, #572]	@ (8009948 <USB_EPStartXfer+0x374>)
 800970a:	400b      	ands	r3, r1
 800970c:	6939      	ldr	r1, [r7, #16]
 800970e:	0148      	lsls	r0, r1, #5
 8009710:	6979      	ldr	r1, [r7, #20]
 8009712:	4401      	add	r1, r0
 8009714:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009718:	4313      	orrs	r3, r2
 800971a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	791b      	ldrb	r3, [r3, #4]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d122      	bne.n	800976a <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	0151      	lsls	r1, r2, #5
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	440a      	add	r2, r1
 800973a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800973e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009742:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009750:	691a      	ldr	r2, [r3, #16]
 8009752:	89fb      	ldrh	r3, [r7, #14]
 8009754:	075b      	lsls	r3, r3, #29
 8009756:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800975a:	6939      	ldr	r1, [r7, #16]
 800975c:	0148      	lsls	r0, r1, #5
 800975e:	6979      	ldr	r1, [r7, #20]
 8009760:	4401      	add	r1, r0
 8009762:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009766:	4313      	orrs	r3, r2
 8009768:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	4413      	add	r3, r2
 8009772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009776:	691a      	ldr	r2, [r3, #16]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009780:	6939      	ldr	r1, [r7, #16]
 8009782:	0148      	lsls	r0, r1, #5
 8009784:	6979      	ldr	r1, [r7, #20]
 8009786:	4401      	add	r1, r0
 8009788:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800978c:	4313      	orrs	r3, r2
 800978e:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	0151      	lsls	r1, r2, #5
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	440a      	add	r2, r1
 80097a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80097ae:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	791b      	ldrb	r3, [r3, #4]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d015      	beq.n	80097e4 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 813a 	beq.w	8009a36 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	f003 030f 	and.w	r3, r3, #15
 80097d2:	2101      	movs	r1, #1
 80097d4:	fa01 f303 	lsl.w	r3, r1, r3
 80097d8:	6979      	ldr	r1, [r7, #20]
 80097da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097de:	4313      	orrs	r3, r2
 80097e0:	634b      	str	r3, [r1, #52]	@ 0x34
 80097e2:	e128      	b.n	8009a36 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d110      	bne.n	8009816 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	015a      	lsls	r2, r3, #5
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	0151      	lsls	r1, r2, #5
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	440a      	add	r2, r1
 800980a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800980e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	e00f      	b.n	8009836 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	4413      	add	r3, r2
 800981e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	0151      	lsls	r1, r2, #5
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	440a      	add	r2, r1
 800982c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009834:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	68d9      	ldr	r1, [r3, #12]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	781a      	ldrb	r2, [r3, #0]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	b29b      	uxth	r3, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f9a7 	bl	8009b98 <USB_WritePacket>
 800984a:	e0f4      	b.n	8009a36 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	0151      	lsls	r1, r2, #5
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	440a      	add	r2, r1
 8009862:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009866:	0cdb      	lsrs	r3, r3, #19
 8009868:	04db      	lsls	r3, r3, #19
 800986a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	440a      	add	r2, r1
 8009882:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009886:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800988a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800988e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d12f      	bne.n	80098f6 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	689a      	ldr	r2, [r3, #8]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	689a      	ldr	r2, [r3, #8]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ba:	691a      	ldr	r2, [r3, #16]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	6a1b      	ldr	r3, [r3, #32]
 80098c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098c4:	6939      	ldr	r1, [r7, #16]
 80098c6:	0148      	lsls	r0, r1, #5
 80098c8:	6979      	ldr	r1, [r7, #20]
 80098ca:	4401      	add	r1, r0
 80098cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80098d0:	4313      	orrs	r3, r2
 80098d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	0151      	lsls	r1, r2, #5
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	440a      	add	r2, r1
 80098ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098f2:	6113      	str	r3, [r2, #16]
 80098f4:	e062      	b.n	80099bc <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d126      	bne.n	800994c <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800990a:	691a      	ldr	r2, [r3, #16]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009914:	6939      	ldr	r1, [r7, #16]
 8009916:	0148      	lsls	r0, r1, #5
 8009918:	6979      	ldr	r1, [r7, #20]
 800991a:	4401      	add	r1, r0
 800991c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009920:	4313      	orrs	r3, r2
 8009922:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	0151      	lsls	r1, r2, #5
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	440a      	add	r2, r1
 800993a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800993e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009942:	6113      	str	r3, [r2, #16]
 8009944:	e03a      	b.n	80099bc <USB_EPStartXfer+0x3e8>
 8009946:	bf00      	nop
 8009948:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	691a      	ldr	r2, [r3, #16]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	4413      	add	r3, r2
 8009956:	1e5a      	subs	r2, r3, #1
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009960:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	89fa      	ldrh	r2, [r7, #14]
 8009968:	fb03 f202 	mul.w	r2, r3, r2
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	015a      	lsls	r2, r3, #5
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	4413      	add	r3, r2
 8009978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800997c:	691a      	ldr	r2, [r3, #16]
 800997e:	89fb      	ldrh	r3, [r7, #14]
 8009980:	04d9      	lsls	r1, r3, #19
 8009982:	4b2f      	ldr	r3, [pc, #188]	@ (8009a40 <USB_EPStartXfer+0x46c>)
 8009984:	400b      	ands	r3, r1
 8009986:	6939      	ldr	r1, [r7, #16]
 8009988:	0148      	lsls	r0, r1, #5
 800998a:	6979      	ldr	r1, [r7, #20]
 800998c:	4401      	add	r1, r0
 800998e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009992:	4313      	orrs	r3, r2
 8009994:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	015a      	lsls	r2, r3, #5
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	4413      	add	r3, r2
 800999e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099a2:	691a      	ldr	r2, [r3, #16]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	6a1b      	ldr	r3, [r3, #32]
 80099a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099ac:	6939      	ldr	r1, [r7, #16]
 80099ae:	0148      	lsls	r0, r1, #5
 80099b0:	6979      	ldr	r1, [r7, #20]
 80099b2:	4401      	add	r1, r0
 80099b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80099b8:	4313      	orrs	r3, r2
 80099ba:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	791b      	ldrb	r3, [r3, #4]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d128      	bne.n	8009a16 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d110      	bne.n	80099f6 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	0151      	lsls	r1, r2, #5
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	440a      	add	r2, r1
 80099ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	e00f      	b.n	8009a16 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	015a      	lsls	r2, r3, #5
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	0151      	lsls	r1, r2, #5
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	440a      	add	r2, r1
 8009a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a14:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	015a      	lsls	r2, r3, #5
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	0151      	lsls	r1, r2, #5
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	440a      	add	r2, r1
 8009a2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a30:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009a34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	1ff80000 	.word	0x1ff80000

08009a44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	785b      	ldrb	r3, [r3, #1]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d14a      	bne.n	8009af8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a7a:	f040 8086 	bne.w	8009b8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	7812      	ldrb	r2, [r2, #0]
 8009a92:	0151      	lsls	r1, r2, #5
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	440a      	add	r2, r1
 8009a98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009aa0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	7812      	ldrb	r2, [r2, #0]
 8009ab6:	0151      	lsls	r1, r2, #5
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	440a      	add	r2, r1
 8009abc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ac0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ac4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d902      	bls.n	8009adc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8009ada:	e056      	b.n	8009b8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009af0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009af4:	d0e7      	beq.n	8009ac6 <USB_EPStopXfer+0x82>
 8009af6:	e048      	b.n	8009b8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b10:	d13b      	bne.n	8009b8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	015a      	lsls	r2, r3, #5
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	7812      	ldrb	r2, [r2, #0]
 8009b26:	0151      	lsls	r1, r2, #5
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	440a      	add	r2, r1
 8009b2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009b34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	7812      	ldrb	r2, [r2, #0]
 8009b4a:	0151      	lsls	r1, r2, #5
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	440a      	add	r2, r1
 8009b50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d902      	bls.n	8009b70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8009b6e:	e00c      	b.n	8009b8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b88:	d0e7      	beq.n	8009b5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	371c      	adds	r7, #28
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b089      	sub	sp, #36	@ 0x24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	71fb      	strb	r3, [r7, #7]
 8009baa:	4613      	mov	r3, r2
 8009bac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009bb6:	88bb      	ldrh	r3, [r7, #4]
 8009bb8:	3303      	adds	r3, #3
 8009bba:	089b      	lsrs	r3, r3, #2
 8009bbc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	61bb      	str	r3, [r7, #24]
 8009bc2:	e018      	b.n	8009bf6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009bc4:	79fb      	ldrb	r3, [r7, #7]
 8009bc6:	031a      	lsls	r2, r3, #12
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	3301      	adds	r3, #1
 8009be2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	3301      	adds	r3, #1
 8009be8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	3301      	adds	r3, #1
 8009bee:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	61bb      	str	r3, [r7, #24]
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d3e2      	bcc.n	8009bc4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3724      	adds	r7, #36	@ 0x24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b08b      	sub	sp, #44	@ 0x2c
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	4613      	mov	r3, r2
 8009c18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009c22:	88fb      	ldrh	r3, [r7, #6]
 8009c24:	089b      	lsrs	r3, r3, #2
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009c2a:	88fb      	ldrh	r3, [r7, #6]
 8009c2c:	f003 0303 	and.w	r3, r3, #3
 8009c30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009c32:	2300      	movs	r3, #0
 8009c34:	623b      	str	r3, [r7, #32]
 8009c36:	e014      	b.n	8009c62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c42:	601a      	str	r2, [r3, #0]
    pDest++;
 8009c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c46:	3301      	adds	r3, #1
 8009c48:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c52:	3301      	adds	r3, #1
 8009c54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	3301      	adds	r3, #1
 8009c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	623b      	str	r3, [r7, #32]
 8009c62:	6a3a      	ldr	r2, [r7, #32]
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d3e6      	bcc.n	8009c38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009c6a:	8bfb      	ldrh	r3, [r7, #30]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d01e      	beq.n	8009cae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	f107 0310 	add.w	r3, r7, #16
 8009c80:	6812      	ldr	r2, [r2, #0]
 8009c82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c94:	701a      	strb	r2, [r3, #0]
      i++;
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009ca2:	8bfb      	ldrh	r3, [r7, #30]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009ca8:	8bfb      	ldrh	r3, [r7, #30]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1ea      	bne.n	8009c84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	372c      	adds	r7, #44	@ 0x2c
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	785b      	ldrb	r3, [r3, #1]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d12c      	bne.n	8009d32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	db12      	blt.n	8009d10 <USB_EPSetStall+0x54>
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00f      	beq.n	8009d10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	0151      	lsls	r1, r2, #5
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	440a      	add	r2, r1
 8009d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009d0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	0151      	lsls	r1, r2, #5
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	440a      	add	r2, r1
 8009d26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	e02b      	b.n	8009d8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	015a      	lsls	r2, r3, #5
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	4413      	add	r3, r2
 8009d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	db12      	blt.n	8009d6a <USB_EPSetStall+0xae>
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00f      	beq.n	8009d6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	015a      	lsls	r2, r3, #5
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	4413      	add	r3, r2
 8009d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	0151      	lsls	r1, r2, #5
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	440a      	add	r2, r1
 8009d60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009d68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	0151      	lsls	r1, r2, #5
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	440a      	add	r2, r1
 8009d80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009d88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d128      	bne.n	8009e06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	0151      	lsls	r1, r2, #5
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	440a      	add	r2, r1
 8009dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009dd2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	791b      	ldrb	r3, [r3, #4]
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d003      	beq.n	8009de4 <USB_EPClearStall+0x4c>
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	791b      	ldrb	r3, [r3, #4]
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d138      	bne.n	8009e56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	015a      	lsls	r2, r3, #5
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	4413      	add	r3, r2
 8009dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	0151      	lsls	r1, r2, #5
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	440a      	add	r2, r1
 8009dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e02:	6013      	str	r3, [r2, #0]
 8009e04:	e027      	b.n	8009e56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	0151      	lsls	r1, r2, #5
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	440a      	add	r2, r1
 8009e1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e20:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	791b      	ldrb	r3, [r3, #4]
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d003      	beq.n	8009e36 <USB_EPClearStall+0x9e>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	791b      	ldrb	r3, [r3, #4]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d10f      	bne.n	8009e56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	015a      	lsls	r2, r3, #5
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	0151      	lsls	r1, r2, #5
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	440a      	add	r2, r1
 8009e4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e82:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009e86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	011b      	lsls	r3, r3, #4
 8009e94:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009e98:	68f9      	ldr	r1, [r7, #12]
 8009e9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009eca:	f023 0303 	bic.w	r3, r3, #3
 8009ece:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ede:	f023 0302 	bic.w	r3, r3, #2
 8009ee2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b085      	sub	sp, #20
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009f0c:	f023 0303 	bic.w	r3, r3, #3
 8009f10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f20:	f043 0302 	orr.w	r3, r3, #2
 8009f24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	695b      	ldr	r3, [r3, #20]
 8009f40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4013      	ands	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b085      	sub	sp, #20
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	0c1b      	lsrs	r3, r3, #16
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b085      	sub	sp, #20
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009faa:	69db      	ldr	r3, [r3, #28]
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	4013      	ands	r3, r2
 8009fb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	b29b      	uxth	r3, r3
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b085      	sub	sp, #20
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009fd2:	78fb      	ldrb	r3, [r7, #3]
 8009fd4:	015a      	lsls	r2, r3, #5
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	4013      	ands	r3, r2
 8009fee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ff0:	68bb      	ldr	r3, [r7, #8]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr

08009ffe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ffe:	b480      	push	{r7}
 800a000:	b087      	sub	sp, #28
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	460b      	mov	r3, r1
 800a008:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a020:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a022:	78fb      	ldrb	r3, [r7, #3]
 800a024:	f003 030f 	and.w	r3, r3, #15
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	fa22 f303 	lsr.w	r3, r2, r3
 800a02e:	01db      	lsls	r3, r3, #7
 800a030:	b2db      	uxtb	r3, r3
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	4313      	orrs	r3, r2
 800a036:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	4013      	ands	r3, r2
 800a04a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a04c:	68bb      	ldr	r3, [r7, #8]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	371c      	adds	r7, #28
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b083      	sub	sp, #12
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	f003 0301 	and.w	r3, r3, #1
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a076:	b480      	push	{r7}
 800a078:	b085      	sub	sp, #20
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a090:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a094:	f023 0307 	bic.w	r3, r3, #7
 800a098:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	333c      	adds	r3, #60	@ 0x3c
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	4a1c      	ldr	r2, [pc, #112]	@ (800a148 <USB_EP0_OutStart+0x8c>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d90a      	bls.n	800a0f2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0ec:	d101      	bne.n	800a0f2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	e024      	b.n	800a13c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a10c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a120:	f043 0318 	orr.w	r3, r3, #24
 800a124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a134:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a138:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	4f54300a 	.word	0x4f54300a

0800a14c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a154:	2300      	movs	r3, #0
 800a156:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	3301      	adds	r3, #1
 800a15c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a164:	d901      	bls.n	800a16a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e01b      	b.n	800a1a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	daf2      	bge.n	800a158 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	f043 0201 	orr.w	r2, r3, #1
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	3301      	adds	r3, #1
 800a186:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a18e:	d901      	bls.n	800a194 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	e006      	b.n	800a1a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	f003 0301 	and.w	r3, r3, #1
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d0f0      	beq.n	800a182 <USB_CoreReset+0x36>

  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3714      	adds	r7, #20
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
	...

0800a1b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a1bc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a1c0:	f005 fc34 	bl	800fa2c <USBD_static_malloc>
 800a1c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d109      	bne.n	800a1e0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	32b0      	adds	r2, #176	@ 0xb0
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a1dc:	2302      	movs	r3, #2
 800a1de:	e0d4      	b.n	800a38a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a1e0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f006 f99b 	bl	8010522 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	32b0      	adds	r2, #176	@ 0xb0
 800a1f6:	68f9      	ldr	r1, [r7, #12]
 800a1f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	32b0      	adds	r2, #176	@ 0xb0
 800a206:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	7c1b      	ldrb	r3, [r3, #16]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d138      	bne.n	800a28a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a218:	4b5e      	ldr	r3, [pc, #376]	@ (800a394 <USBD_CDC_Init+0x1e4>)
 800a21a:	7819      	ldrb	r1, [r3, #0]
 800a21c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a220:	2202      	movs	r2, #2
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f005 f9ee 	bl	800f604 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a228:	4b5a      	ldr	r3, [pc, #360]	@ (800a394 <USBD_CDC_Init+0x1e4>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	f003 020f 	and.w	r2, r3, #15
 800a230:	6879      	ldr	r1, [r7, #4]
 800a232:	4613      	mov	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	440b      	add	r3, r1
 800a23c:	3324      	adds	r3, #36	@ 0x24
 800a23e:	2201      	movs	r2, #1
 800a240:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a242:	4b55      	ldr	r3, [pc, #340]	@ (800a398 <USBD_CDC_Init+0x1e8>)
 800a244:	7819      	ldrb	r1, [r3, #0]
 800a246:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a24a:	2202      	movs	r2, #2
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f005 f9d9 	bl	800f604 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a252:	4b51      	ldr	r3, [pc, #324]	@ (800a398 <USBD_CDC_Init+0x1e8>)
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	f003 020f 	and.w	r2, r3, #15
 800a25a:	6879      	ldr	r1, [r7, #4]
 800a25c:	4613      	mov	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	4413      	add	r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	440b      	add	r3, r1
 800a266:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a26a:	2201      	movs	r2, #1
 800a26c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a26e:	4b4b      	ldr	r3, [pc, #300]	@ (800a39c <USBD_CDC_Init+0x1ec>)
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	f003 020f 	and.w	r2, r3, #15
 800a276:	6879      	ldr	r1, [r7, #4]
 800a278:	4613      	mov	r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4413      	add	r3, r2
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	440b      	add	r3, r1
 800a282:	3326      	adds	r3, #38	@ 0x26
 800a284:	2210      	movs	r2, #16
 800a286:	801a      	strh	r2, [r3, #0]
 800a288:	e035      	b.n	800a2f6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a28a:	4b42      	ldr	r3, [pc, #264]	@ (800a394 <USBD_CDC_Init+0x1e4>)
 800a28c:	7819      	ldrb	r1, [r3, #0]
 800a28e:	2340      	movs	r3, #64	@ 0x40
 800a290:	2202      	movs	r2, #2
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f005 f9b6 	bl	800f604 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a298:	4b3e      	ldr	r3, [pc, #248]	@ (800a394 <USBD_CDC_Init+0x1e4>)
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	f003 020f 	and.w	r2, r3, #15
 800a2a0:	6879      	ldr	r1, [r7, #4]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	440b      	add	r3, r1
 800a2ac:	3324      	adds	r3, #36	@ 0x24
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a2b2:	4b39      	ldr	r3, [pc, #228]	@ (800a398 <USBD_CDC_Init+0x1e8>)
 800a2b4:	7819      	ldrb	r1, [r3, #0]
 800a2b6:	2340      	movs	r3, #64	@ 0x40
 800a2b8:	2202      	movs	r2, #2
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f005 f9a2 	bl	800f604 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a2c0:	4b35      	ldr	r3, [pc, #212]	@ (800a398 <USBD_CDC_Init+0x1e8>)
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	f003 020f 	and.w	r2, r3, #15
 800a2c8:	6879      	ldr	r1, [r7, #4]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	440b      	add	r3, r1
 800a2d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a2d8:	2201      	movs	r2, #1
 800a2da:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a2dc:	4b2f      	ldr	r3, [pc, #188]	@ (800a39c <USBD_CDC_Init+0x1ec>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	f003 020f 	and.w	r2, r3, #15
 800a2e4:	6879      	ldr	r1, [r7, #4]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	440b      	add	r3, r1
 800a2f0:	3326      	adds	r3, #38	@ 0x26
 800a2f2:	2210      	movs	r2, #16
 800a2f4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a2f6:	4b29      	ldr	r3, [pc, #164]	@ (800a39c <USBD_CDC_Init+0x1ec>)
 800a2f8:	7819      	ldrb	r1, [r3, #0]
 800a2fa:	2308      	movs	r3, #8
 800a2fc:	2203      	movs	r2, #3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f005 f980 	bl	800f604 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a304:	4b25      	ldr	r3, [pc, #148]	@ (800a39c <USBD_CDC_Init+0x1ec>)
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	f003 020f 	and.w	r2, r3, #15
 800a30c:	6879      	ldr	r1, [r7, #4]
 800a30e:	4613      	mov	r3, r2
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4413      	add	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	440b      	add	r3, r1
 800a318:	3324      	adds	r3, #36	@ 0x24
 800a31a:	2201      	movs	r2, #1
 800a31c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	33b0      	adds	r3, #176	@ 0xb0
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a354:	2302      	movs	r3, #2
 800a356:	e018      	b.n	800a38a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	7c1b      	ldrb	r3, [r3, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10a      	bne.n	800a376 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a360:	4b0d      	ldr	r3, [pc, #52]	@ (800a398 <USBD_CDC_Init+0x1e8>)
 800a362:	7819      	ldrb	r1, [r3, #0]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a36a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f005 fac2 	bl	800f8f8 <USBD_LL_PrepareReceive>
 800a374:	e008      	b.n	800a388 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a376:	4b08      	ldr	r3, [pc, #32]	@ (800a398 <USBD_CDC_Init+0x1e8>)
 800a378:	7819      	ldrb	r1, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a380:	2340      	movs	r3, #64	@ 0x40
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f005 fab8 	bl	800f8f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20000093 	.word	0x20000093
 800a398:	20000094 	.word	0x20000094
 800a39c:	20000095 	.word	0x20000095

0800a3a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a3ac:	4b3a      	ldr	r3, [pc, #232]	@ (800a498 <USBD_CDC_DeInit+0xf8>)
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f005 f964 	bl	800f680 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a3b8:	4b37      	ldr	r3, [pc, #220]	@ (800a498 <USBD_CDC_DeInit+0xf8>)
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	f003 020f 	and.w	r2, r3, #15
 800a3c0:	6879      	ldr	r1, [r7, #4]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4413      	add	r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	440b      	add	r3, r1
 800a3cc:	3324      	adds	r3, #36	@ 0x24
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a3d2:	4b32      	ldr	r3, [pc, #200]	@ (800a49c <USBD_CDC_DeInit+0xfc>)
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f005 f951 	bl	800f680 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a3de:	4b2f      	ldr	r3, [pc, #188]	@ (800a49c <USBD_CDC_DeInit+0xfc>)
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	f003 020f 	and.w	r2, r3, #15
 800a3e6:	6879      	ldr	r1, [r7, #4]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	440b      	add	r3, r1
 800a3f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a3fa:	4b29      	ldr	r3, [pc, #164]	@ (800a4a0 <USBD_CDC_DeInit+0x100>)
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f005 f93d 	bl	800f680 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a406:	4b26      	ldr	r3, [pc, #152]	@ (800a4a0 <USBD_CDC_DeInit+0x100>)
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	f003 020f 	and.w	r2, r3, #15
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	4613      	mov	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	440b      	add	r3, r1
 800a41a:	3324      	adds	r3, #36	@ 0x24
 800a41c:	2200      	movs	r2, #0
 800a41e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a420:	4b1f      	ldr	r3, [pc, #124]	@ (800a4a0 <USBD_CDC_DeInit+0x100>)
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	f003 020f 	and.w	r2, r3, #15
 800a428:	6879      	ldr	r1, [r7, #4]
 800a42a:	4613      	mov	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	440b      	add	r3, r1
 800a434:	3326      	adds	r3, #38	@ 0x26
 800a436:	2200      	movs	r2, #0
 800a438:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	32b0      	adds	r2, #176	@ 0xb0
 800a444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d01f      	beq.n	800a48c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	33b0      	adds	r3, #176	@ 0xb0
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	4413      	add	r3, r2
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	32b0      	adds	r2, #176	@ 0xb0
 800a46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a46e:	4618      	mov	r0, r3
 800a470:	f005 faea 	bl	800fa48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	32b0      	adds	r2, #176	@ 0xb0
 800a47e:	2100      	movs	r1, #0
 800a480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	20000093 	.word	0x20000093
 800a49c:	20000094 	.word	0x20000094
 800a4a0:	20000095 	.word	0x20000095

0800a4a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	32b0      	adds	r2, #176	@ 0xb0
 800a4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4bc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d101      	bne.n	800a4d4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a4d0:	2303      	movs	r3, #3
 800a4d2:	e0bf      	b.n	800a654 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d050      	beq.n	800a582 <USBD_CDC_Setup+0xde>
 800a4e0:	2b20      	cmp	r3, #32
 800a4e2:	f040 80af 	bne.w	800a644 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	88db      	ldrh	r3, [r3, #6]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d03a      	beq.n	800a564 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	b25b      	sxtb	r3, r3
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	da1b      	bge.n	800a530 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	33b0      	adds	r3, #176	@ 0xb0
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a50e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	88d2      	ldrh	r2, [r2, #6]
 800a514:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	88db      	ldrh	r3, [r3, #6]
 800a51a:	2b07      	cmp	r3, #7
 800a51c:	bf28      	it	cs
 800a51e:	2307      	movcs	r3, #7
 800a520:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	89fa      	ldrh	r2, [r7, #14]
 800a526:	4619      	mov	r1, r3
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f001 fdbd 	bl	800c0a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a52e:	e090      	b.n	800a652 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	785a      	ldrb	r2, [r3, #1]
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	88db      	ldrh	r3, [r3, #6]
 800a53e:	2b3f      	cmp	r3, #63	@ 0x3f
 800a540:	d803      	bhi.n	800a54a <USBD_CDC_Setup+0xa6>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	88db      	ldrh	r3, [r3, #6]
 800a546:	b2da      	uxtb	r2, r3
 800a548:	e000      	b.n	800a54c <USBD_CDC_Setup+0xa8>
 800a54a:	2240      	movs	r2, #64	@ 0x40
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a552:	6939      	ldr	r1, [r7, #16]
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a55a:	461a      	mov	r2, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 fdcf 	bl	800c100 <USBD_CtlPrepareRx>
      break;
 800a562:	e076      	b.n	800a652 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	33b0      	adds	r3, #176	@ 0xb0
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	4413      	add	r3, r2
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	7850      	ldrb	r0, [r2, #1]
 800a57a:	2200      	movs	r2, #0
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	4798      	blx	r3
      break;
 800a580:	e067      	b.n	800a652 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	785b      	ldrb	r3, [r3, #1]
 800a586:	2b0b      	cmp	r3, #11
 800a588:	d851      	bhi.n	800a62e <USBD_CDC_Setup+0x18a>
 800a58a:	a201      	add	r2, pc, #4	@ (adr r2, 800a590 <USBD_CDC_Setup+0xec>)
 800a58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a590:	0800a5c1 	.word	0x0800a5c1
 800a594:	0800a63d 	.word	0x0800a63d
 800a598:	0800a62f 	.word	0x0800a62f
 800a59c:	0800a62f 	.word	0x0800a62f
 800a5a0:	0800a62f 	.word	0x0800a62f
 800a5a4:	0800a62f 	.word	0x0800a62f
 800a5a8:	0800a62f 	.word	0x0800a62f
 800a5ac:	0800a62f 	.word	0x0800a62f
 800a5b0:	0800a62f 	.word	0x0800a62f
 800a5b4:	0800a62f 	.word	0x0800a62f
 800a5b8:	0800a5eb 	.word	0x0800a5eb
 800a5bc:	0800a615 	.word	0x0800a615
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b03      	cmp	r3, #3
 800a5ca:	d107      	bne.n	800a5dc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a5cc:	f107 030a 	add.w	r3, r7, #10
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f001 fd67 	bl	800c0a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5da:	e032      	b.n	800a642 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a5dc:	6839      	ldr	r1, [r7, #0]
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f001 fce5 	bl	800bfae <USBD_CtlError>
            ret = USBD_FAIL;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	75fb      	strb	r3, [r7, #23]
          break;
 800a5e8:	e02b      	b.n	800a642 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b03      	cmp	r3, #3
 800a5f4:	d107      	bne.n	800a606 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a5f6:	f107 030d 	add.w	r3, r7, #13
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f001 fd52 	bl	800c0a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a604:	e01d      	b.n	800a642 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a606:	6839      	ldr	r1, [r7, #0]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 fcd0 	bl	800bfae <USBD_CtlError>
            ret = USBD_FAIL;
 800a60e:	2303      	movs	r3, #3
 800a610:	75fb      	strb	r3, [r7, #23]
          break;
 800a612:	e016      	b.n	800a642 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b03      	cmp	r3, #3
 800a61e:	d00f      	beq.n	800a640 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a620:	6839      	ldr	r1, [r7, #0]
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f001 fcc3 	bl	800bfae <USBD_CtlError>
            ret = USBD_FAIL;
 800a628:	2303      	movs	r3, #3
 800a62a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a62c:	e008      	b.n	800a640 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 fcbc 	bl	800bfae <USBD_CtlError>
          ret = USBD_FAIL;
 800a636:	2303      	movs	r3, #3
 800a638:	75fb      	strb	r3, [r7, #23]
          break;
 800a63a:	e002      	b.n	800a642 <USBD_CDC_Setup+0x19e>
          break;
 800a63c:	bf00      	nop
 800a63e:	e008      	b.n	800a652 <USBD_CDC_Setup+0x1ae>
          break;
 800a640:	bf00      	nop
      }
      break;
 800a642:	e006      	b.n	800a652 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f001 fcb1 	bl	800bfae <USBD_CtlError>
      ret = USBD_FAIL;
 800a64c:	2303      	movs	r3, #3
 800a64e:	75fb      	strb	r3, [r7, #23]
      break;
 800a650:	bf00      	nop
  }

  return (uint8_t)ret;
 800a652:	7dfb      	ldrb	r3, [r7, #23]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3718      	adds	r7, #24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a66e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	32b0      	adds	r2, #176	@ 0xb0
 800a67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a682:	2303      	movs	r3, #3
 800a684:	e065      	b.n	800a752 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	32b0      	adds	r2, #176	@ 0xb0
 800a690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a694:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a696:	78fb      	ldrb	r3, [r7, #3]
 800a698:	f003 020f 	and.w	r2, r3, #15
 800a69c:	6879      	ldr	r1, [r7, #4]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	440b      	add	r3, r1
 800a6a8:	3318      	adds	r3, #24
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d02f      	beq.n	800a710 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a6b0:	78fb      	ldrb	r3, [r7, #3]
 800a6b2:	f003 020f 	and.w	r2, r3, #15
 800a6b6:	6879      	ldr	r1, [r7, #4]
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4413      	add	r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	440b      	add	r3, r1
 800a6c2:	3318      	adds	r3, #24
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	78fb      	ldrb	r3, [r7, #3]
 800a6c8:	f003 010f 	and.w	r1, r3, #15
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	440b      	add	r3, r1
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4403      	add	r3, r0
 800a6d8:	331c      	adds	r3, #28
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a6e0:	fb01 f303 	mul.w	r3, r1, r3
 800a6e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d112      	bne.n	800a710 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a6ea:	78fb      	ldrb	r3, [r7, #3]
 800a6ec:	f003 020f 	and.w	r2, r3, #15
 800a6f0:	6879      	ldr	r1, [r7, #4]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	440b      	add	r3, r1
 800a6fc:	3318      	adds	r3, #24
 800a6fe:	2200      	movs	r2, #0
 800a700:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a702:	78f9      	ldrb	r1, [r7, #3]
 800a704:	2300      	movs	r3, #0
 800a706:	2200      	movs	r2, #0
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f005 f8bd 	bl	800f888 <USBD_LL_Transmit>
 800a70e:	e01f      	b.n	800a750 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2200      	movs	r2, #0
 800a714:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	33b0      	adds	r3, #176	@ 0xb0
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4413      	add	r3, r2
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d010      	beq.n	800a750 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	33b0      	adds	r3, #176	@ 0xb0
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	691b      	ldr	r3, [r3, #16]
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a74c:	78fa      	ldrb	r2, [r7, #3]
 800a74e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b084      	sub	sp, #16
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	460b      	mov	r3, r1
 800a764:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	32b0      	adds	r2, #176	@ 0xb0
 800a770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a774:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	32b0      	adds	r2, #176	@ 0xb0
 800a780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d101      	bne.n	800a78c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a788:	2303      	movs	r3, #3
 800a78a:	e01a      	b.n	800a7c2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a78c:	78fb      	ldrb	r3, [r7, #3]
 800a78e:	4619      	mov	r1, r3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f005 f8e9 	bl	800f968 <USBD_LL_GetRxDataSize>
 800a796:	4602      	mov	r2, r0
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	33b0      	adds	r3, #176	@ 0xb0
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a7bc:	4611      	mov	r1, r2
 800a7be:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	32b0      	adds	r2, #176	@ 0xb0
 800a7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d101      	bne.n	800a7ec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	e024      	b.n	800a836 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	33b0      	adds	r3, #176	@ 0xb0
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d019      	beq.n	800a834 <USBD_CDC_EP0_RxReady+0x6a>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a806:	2bff      	cmp	r3, #255	@ 0xff
 800a808:	d014      	beq.n	800a834 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	33b0      	adds	r3, #176	@ 0xb0
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a822:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a82a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	22ff      	movs	r2, #255	@ 0xff
 800a830:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a848:	2182      	movs	r1, #130	@ 0x82
 800a84a:	4818      	ldr	r0, [pc, #96]	@ (800a8ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a84c:	f000 fd4f 	bl	800b2ee <USBD_GetEpDesc>
 800a850:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a852:	2101      	movs	r1, #1
 800a854:	4815      	ldr	r0, [pc, #84]	@ (800a8ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a856:	f000 fd4a 	bl	800b2ee <USBD_GetEpDesc>
 800a85a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a85c:	2181      	movs	r1, #129	@ 0x81
 800a85e:	4813      	ldr	r0, [pc, #76]	@ (800a8ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a860:	f000 fd45 	bl	800b2ee <USBD_GetEpDesc>
 800a864:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d002      	beq.n	800a872 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	2210      	movs	r2, #16
 800a870:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d006      	beq.n	800a886 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a880:	711a      	strb	r2, [r3, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d006      	beq.n	800a89a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a894:	711a      	strb	r2, [r3, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2243      	movs	r2, #67	@ 0x43
 800a89e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a8a0:	4b02      	ldr	r3, [pc, #8]	@ (800a8ac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3718      	adds	r7, #24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	20000050 	.word	0x20000050

0800a8b0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a8b8:	2182      	movs	r1, #130	@ 0x82
 800a8ba:	4818      	ldr	r0, [pc, #96]	@ (800a91c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a8bc:	f000 fd17 	bl	800b2ee <USBD_GetEpDesc>
 800a8c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	4815      	ldr	r0, [pc, #84]	@ (800a91c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a8c6:	f000 fd12 	bl	800b2ee <USBD_GetEpDesc>
 800a8ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a8cc:	2181      	movs	r1, #129	@ 0x81
 800a8ce:	4813      	ldr	r0, [pc, #76]	@ (800a91c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a8d0:	f000 fd0d 	bl	800b2ee <USBD_GetEpDesc>
 800a8d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	2210      	movs	r2, #16
 800a8e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d006      	beq.n	800a8f6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	711a      	strb	r2, [r3, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f042 0202 	orr.w	r2, r2, #2
 800a8f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d006      	beq.n	800a90a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	711a      	strb	r2, [r3, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f042 0202 	orr.w	r2, r2, #2
 800a908:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2243      	movs	r2, #67	@ 0x43
 800a90e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a910:	4b02      	ldr	r3, [pc, #8]	@ (800a91c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a912:	4618      	mov	r0, r3
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	20000050 	.word	0x20000050

0800a920 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a928:	2182      	movs	r1, #130	@ 0x82
 800a92a:	4818      	ldr	r0, [pc, #96]	@ (800a98c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a92c:	f000 fcdf 	bl	800b2ee <USBD_GetEpDesc>
 800a930:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a932:	2101      	movs	r1, #1
 800a934:	4815      	ldr	r0, [pc, #84]	@ (800a98c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a936:	f000 fcda 	bl	800b2ee <USBD_GetEpDesc>
 800a93a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a93c:	2181      	movs	r1, #129	@ 0x81
 800a93e:	4813      	ldr	r0, [pc, #76]	@ (800a98c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a940:	f000 fcd5 	bl	800b2ee <USBD_GetEpDesc>
 800a944:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	2210      	movs	r2, #16
 800a950:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d006      	beq.n	800a966 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a960:	711a      	strb	r2, [r3, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d006      	beq.n	800a97a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a974:	711a      	strb	r2, [r3, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2243      	movs	r2, #67	@ 0x43
 800a97e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a980:	4b02      	ldr	r3, [pc, #8]	@ (800a98c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a982:	4618      	mov	r0, r3
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	20000050 	.word	0x20000050

0800a990 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	220a      	movs	r2, #10
 800a99c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a99e:	4b03      	ldr	r3, [pc, #12]	@ (800a9ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	2000000c 	.word	0x2000000c

0800a9b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d101      	bne.n	800a9c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	e009      	b.n	800a9d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	33b0      	adds	r3, #176	@ 0xb0
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b087      	sub	sp, #28
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	32b0      	adds	r2, #176	@ 0xb0
 800a9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e008      	b.n	800aa1c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	371c      	adds	r7, #28
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	32b0      	adds	r2, #176	@ 0xb0
 800aa3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d101      	bne.n	800aa4c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e004      	b.n	800aa56 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3714      	adds	r7, #20
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
	...

0800aa64 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	32b0      	adds	r2, #176	@ 0xb0
 800aa76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa7a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aa86:	2303      	movs	r3, #3
 800aa88:	e025      	b.n	800aad6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d11f      	bne.n	800aad4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800aa9c:	4b10      	ldr	r3, [pc, #64]	@ (800aae0 <USBD_CDC_TransmitPacket+0x7c>)
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	f003 020f 	and.w	r2, r3, #15
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	4613      	mov	r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	4413      	add	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4403      	add	r3, r0
 800aab6:	3318      	adds	r3, #24
 800aab8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800aaba:	4b09      	ldr	r3, [pc, #36]	@ (800aae0 <USBD_CDC_TransmitPacket+0x7c>)
 800aabc:	7819      	ldrb	r1, [r3, #0]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f004 fedc 	bl	800f888 <USBD_LL_Transmit>

    ret = USBD_OK;
 800aad0:	2300      	movs	r3, #0
 800aad2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	20000093 	.word	0x20000093

0800aae4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	32b0      	adds	r2, #176	@ 0xb0
 800aaf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	32b0      	adds	r2, #176	@ 0xb0
 800ab06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d101      	bne.n	800ab12 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e018      	b.n	800ab44 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	7c1b      	ldrb	r3, [r3, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10a      	bne.n	800ab30 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab4c <USBD_CDC_ReceivePacket+0x68>)
 800ab1c:	7819      	ldrb	r1, [r3, #0]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f004 fee5 	bl	800f8f8 <USBD_LL_PrepareReceive>
 800ab2e:	e008      	b.n	800ab42 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab30:	4b06      	ldr	r3, [pc, #24]	@ (800ab4c <USBD_CDC_ReceivePacket+0x68>)
 800ab32:	7819      	ldrb	r1, [r3, #0]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab3a:	2340      	movs	r3, #64	@ 0x40
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f004 fedb 	bl	800f8f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	20000094 	.word	0x20000094

0800ab50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ab64:	2303      	movs	r3, #3
 800ab66:	e01f      	b.n	800aba8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	79fa      	ldrb	r2, [r7, #7]
 800ab9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f004 fcb3 	bl	800f508 <USBD_LL_Init>
 800aba2:	4603      	mov	r3, r0
 800aba4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3718      	adds	r7, #24
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abba:	2300      	movs	r3, #0
 800abbc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e025      	b.n	800ac14 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	32ae      	adds	r2, #174	@ 0xae
 800abda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00f      	beq.n	800ac04 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	32ae      	adds	r2, #174	@ 0xae
 800abee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf4:	f107 020e 	add.w	r2, r7, #14
 800abf8:	4610      	mov	r0, r2
 800abfa:	4798      	blx	r3
 800abfc:	4602      	mov	r2, r0
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ac0a:	1c5a      	adds	r2, r3, #1
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f004 fcbb 	bl	800f5a0 <USBD_LL_Start>
 800ac2a:	4603      	mov	r3, r0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3708      	adds	r7, #8
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac3c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	460b      	mov	r3, r1
 800ac54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d009      	beq.n	800ac78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	78fa      	ldrb	r2, [r7, #3]
 800ac6e:	4611      	mov	r1, r2
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	4798      	blx	r3
 800ac74:	4603      	mov	r3, r0
 800ac76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b084      	sub	sp, #16
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	78fa      	ldrb	r2, [r7, #3]
 800ac9c:	4611      	mov	r1, r2
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	4798      	blx	r3
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aca8:	2303      	movs	r3, #3
 800acaa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800acac:	7bfb      	ldrb	r3, [r7, #15]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b084      	sub	sp, #16
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800acc6:	6839      	ldr	r1, [r7, #0]
 800acc8:	4618      	mov	r0, r3
 800acca:	f001 f936 	bl	800bf3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800acdc:	461a      	mov	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800acea:	f003 031f 	and.w	r3, r3, #31
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d01a      	beq.n	800ad28 <USBD_LL_SetupStage+0x72>
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d822      	bhi.n	800ad3c <USBD_LL_SetupStage+0x86>
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d002      	beq.n	800ad00 <USBD_LL_SetupStage+0x4a>
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d00a      	beq.n	800ad14 <USBD_LL_SetupStage+0x5e>
 800acfe:	e01d      	b.n	800ad3c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fb63 	bl	800b3d4 <USBD_StdDevReq>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73fb      	strb	r3, [r7, #15]
      break;
 800ad12:	e020      	b.n	800ad56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fbcb 	bl	800b4b8 <USBD_StdItfReq>
 800ad22:	4603      	mov	r3, r0
 800ad24:	73fb      	strb	r3, [r7, #15]
      break;
 800ad26:	e016      	b.n	800ad56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fc2d 	bl	800b590 <USBD_StdEPReq>
 800ad36:	4603      	mov	r3, r0
 800ad38:	73fb      	strb	r3, [r7, #15]
      break;
 800ad3a:	e00c      	b.n	800ad56 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ad42:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	4619      	mov	r1, r3
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f004 fcce 	bl	800f6ec <USBD_LL_StallEP>
 800ad50:	4603      	mov	r3, r0
 800ad52:	73fb      	strb	r3, [r7, #15]
      break;
 800ad54:	bf00      	nop
  }

  return ret;
 800ad56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ad72:	7afb      	ldrb	r3, [r7, #11]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d16e      	bne.n	800ae56 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ad7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	f040 8098 	bne.w	800aebc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	689a      	ldr	r2, [r3, #8]
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d913      	bls.n	800adc0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	689a      	ldr	r2, [r3, #8]
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	1ad2      	subs	r2, r2, r3
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	68da      	ldr	r2, [r3, #12]
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	4293      	cmp	r3, r2
 800adb0:	bf28      	it	cs
 800adb2:	4613      	movcs	r3, r2
 800adb4:	461a      	mov	r2, r3
 800adb6:	6879      	ldr	r1, [r7, #4]
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f001 f9be 	bl	800c13a <USBD_CtlContinueRx>
 800adbe:	e07d      	b.n	800aebc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800adc6:	f003 031f 	and.w	r3, r3, #31
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d014      	beq.n	800adf8 <USBD_LL_DataOutStage+0x98>
 800adce:	2b02      	cmp	r3, #2
 800add0:	d81d      	bhi.n	800ae0e <USBD_LL_DataOutStage+0xae>
 800add2:	2b00      	cmp	r3, #0
 800add4:	d002      	beq.n	800addc <USBD_LL_DataOutStage+0x7c>
 800add6:	2b01      	cmp	r3, #1
 800add8:	d003      	beq.n	800ade2 <USBD_LL_DataOutStage+0x82>
 800adda:	e018      	b.n	800ae0e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800addc:	2300      	movs	r3, #0
 800adde:	75bb      	strb	r3, [r7, #22]
            break;
 800ade0:	e018      	b.n	800ae14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	4619      	mov	r1, r3
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f000 fa64 	bl	800b2ba <USBD_CoreFindIF>
 800adf2:	4603      	mov	r3, r0
 800adf4:	75bb      	strb	r3, [r7, #22]
            break;
 800adf6:	e00d      	b.n	800ae14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	4619      	mov	r1, r3
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f000 fa66 	bl	800b2d4 <USBD_CoreFindEP>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	75bb      	strb	r3, [r7, #22]
            break;
 800ae0c:	e002      	b.n	800ae14 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	75bb      	strb	r3, [r7, #22]
            break;
 800ae12:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ae14:	7dbb      	ldrb	r3, [r7, #22]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d119      	bne.n	800ae4e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d113      	bne.n	800ae4e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ae26:	7dba      	ldrb	r2, [r7, #22]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	32ae      	adds	r2, #174	@ 0xae
 800ae2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00b      	beq.n	800ae4e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ae36:	7dba      	ldrb	r2, [r7, #22]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ae3e:	7dba      	ldrb	r2, [r7, #22]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	32ae      	adds	r2, #174	@ 0xae
 800ae44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f001 f984 	bl	800c15c <USBD_CtlSendStatus>
 800ae54:	e032      	b.n	800aebc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ae56:	7afb      	ldrb	r3, [r7, #11]
 800ae58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	4619      	mov	r1, r3
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f000 fa37 	bl	800b2d4 <USBD_CoreFindEP>
 800ae66:	4603      	mov	r3, r0
 800ae68:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae6a:	7dbb      	ldrb	r3, [r7, #22]
 800ae6c:	2bff      	cmp	r3, #255	@ 0xff
 800ae6e:	d025      	beq.n	800aebc <USBD_LL_DataOutStage+0x15c>
 800ae70:	7dbb      	ldrb	r3, [r7, #22]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d122      	bne.n	800aebc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	d117      	bne.n	800aeb2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ae82:	7dba      	ldrb	r2, [r7, #22]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	32ae      	adds	r2, #174	@ 0xae
 800ae88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8c:	699b      	ldr	r3, [r3, #24]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00f      	beq.n	800aeb2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ae92:	7dba      	ldrb	r2, [r7, #22]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ae9a:	7dba      	ldrb	r2, [r7, #22]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	32ae      	adds	r2, #174	@ 0xae
 800aea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	7afa      	ldrb	r2, [r7, #11]
 800aea8:	4611      	mov	r1, r2
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	4798      	blx	r3
 800aeae:	4603      	mov	r3, r0
 800aeb0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800aeb2:	7dfb      	ldrb	r3, [r7, #23]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800aeb8:	7dfb      	ldrb	r3, [r7, #23]
 800aeba:	e000      	b.n	800aebe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b086      	sub	sp, #24
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	60f8      	str	r0, [r7, #12]
 800aece:	460b      	mov	r3, r1
 800aed0:	607a      	str	r2, [r7, #4]
 800aed2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800aed4:	7afb      	ldrb	r3, [r7, #11]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d16f      	bne.n	800afba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	3314      	adds	r3, #20
 800aede:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d15a      	bne.n	800afa0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	689a      	ldr	r2, [r3, #8]
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d914      	bls.n	800af20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	689a      	ldr	r2, [r3, #8]
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	1ad2      	subs	r2, r2, r3
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	461a      	mov	r2, r3
 800af0a:	6879      	ldr	r1, [r7, #4]
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f001 f8e6 	bl	800c0de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af12:	2300      	movs	r3, #0
 800af14:	2200      	movs	r2, #0
 800af16:	2100      	movs	r1, #0
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f004 fced 	bl	800f8f8 <USBD_LL_PrepareReceive>
 800af1e:	e03f      	b.n	800afa0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	68da      	ldr	r2, [r3, #12]
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d11c      	bne.n	800af66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	685a      	ldr	r2, [r3, #4]
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800af34:	429a      	cmp	r2, r3
 800af36:	d316      	bcc.n	800af66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	685a      	ldr	r2, [r3, #4]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800af42:	429a      	cmp	r2, r3
 800af44:	d20f      	bcs.n	800af66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800af46:	2200      	movs	r2, #0
 800af48:	2100      	movs	r1, #0
 800af4a:	68f8      	ldr	r0, [r7, #12]
 800af4c:	f001 f8c7 	bl	800c0de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2200      	movs	r2, #0
 800af54:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af58:	2300      	movs	r3, #0
 800af5a:	2200      	movs	r2, #0
 800af5c:	2100      	movs	r1, #0
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	f004 fcca 	bl	800f8f8 <USBD_LL_PrepareReceive>
 800af64:	e01c      	b.n	800afa0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b03      	cmp	r3, #3
 800af70:	d10f      	bne.n	800af92 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d009      	beq.n	800af92 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800af92:	2180      	movs	r1, #128	@ 0x80
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f004 fba9 	bl	800f6ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f001 f8f1 	bl	800c182 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d03a      	beq.n	800b020 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f7ff fe42 	bl	800ac34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800afb8:	e032      	b.n	800b020 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800afba:	7afb      	ldrb	r3, [r7, #11]
 800afbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	4619      	mov	r1, r3
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 f985 	bl	800b2d4 <USBD_CoreFindEP>
 800afca:	4603      	mov	r3, r0
 800afcc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afce:	7dfb      	ldrb	r3, [r7, #23]
 800afd0:	2bff      	cmp	r3, #255	@ 0xff
 800afd2:	d025      	beq.n	800b020 <USBD_LL_DataInStage+0x15a>
 800afd4:	7dfb      	ldrb	r3, [r7, #23]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d122      	bne.n	800b020 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d11c      	bne.n	800b020 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800afe6:	7dfa      	ldrb	r2, [r7, #23]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	32ae      	adds	r2, #174	@ 0xae
 800afec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d014      	beq.n	800b020 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aff6:	7dfa      	ldrb	r2, [r7, #23]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800affe:	7dfa      	ldrb	r2, [r7, #23]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	32ae      	adds	r2, #174	@ 0xae
 800b004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b008:	695b      	ldr	r3, [r3, #20]
 800b00a:	7afa      	ldrb	r2, [r7, #11]
 800b00c:	4611      	mov	r1, r2
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	4798      	blx	r3
 800b012:	4603      	mov	r3, r0
 800b014:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b016:	7dbb      	ldrb	r3, [r7, #22]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d001      	beq.n	800b020 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b01c:	7dbb      	ldrb	r3, [r7, #22]
 800b01e:	e000      	b.n	800b022 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3718      	adds	r7, #24
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b084      	sub	sp, #16
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2201      	movs	r2, #1
 800b03a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b062:	2b00      	cmp	r3, #0
 800b064:	d014      	beq.n	800b090 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00e      	beq.n	800b090 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	6852      	ldr	r2, [r2, #4]
 800b07e:	b2d2      	uxtb	r2, r2
 800b080:	4611      	mov	r1, r2
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	4798      	blx	r3
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b08c:	2303      	movs	r3, #3
 800b08e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b090:	2340      	movs	r3, #64	@ 0x40
 800b092:	2200      	movs	r2, #0
 800b094:	2100      	movs	r1, #0
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f004 fab4 	bl	800f604 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2240      	movs	r2, #64	@ 0x40
 800b0a8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b0ac:	2340      	movs	r3, #64	@ 0x40
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2180      	movs	r1, #128	@ 0x80
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f004 faa6 	bl	800f604 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2240      	movs	r2, #64	@ 0x40
 800b0c2:	621a      	str	r2, [r3, #32]

  return ret;
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b083      	sub	sp, #12
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	78fa      	ldrb	r2, [r7, #3]
 800b0de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b083      	sub	sp, #12
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	2b04      	cmp	r3, #4
 800b100:	d006      	beq.n	800b110 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b108:	b2da      	uxtb	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2204      	movs	r2, #4
 800b114:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b126:	b480      	push	{r7}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b134:	b2db      	uxtb	r3, r3
 800b136:	2b04      	cmp	r3, #4
 800b138:	d106      	bne.n	800b148 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b140:	b2da      	uxtb	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	370c      	adds	r7, #12
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b03      	cmp	r3, #3
 800b168:	d110      	bne.n	800b18c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00b      	beq.n	800b18c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b17a:	69db      	ldr	r3, [r3, #28]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d005      	beq.n	800b18c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b186:	69db      	ldr	r3, [r3, #28]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b082      	sub	sp, #8
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	460b      	mov	r3, r1
 800b1a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	32ae      	adds	r2, #174	@ 0xae
 800b1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	e01c      	b.n	800b1f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b03      	cmp	r3, #3
 800b1c2:	d115      	bne.n	800b1f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	32ae      	adds	r2, #174	@ 0xae
 800b1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d2:	6a1b      	ldr	r3, [r3, #32]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00b      	beq.n	800b1f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	32ae      	adds	r2, #174	@ 0xae
 800b1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e6:	6a1b      	ldr	r3, [r3, #32]
 800b1e8:	78fa      	ldrb	r2, [r7, #3]
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	460b      	mov	r3, r1
 800b204:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	32ae      	adds	r2, #174	@ 0xae
 800b210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d101      	bne.n	800b21c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b218:	2303      	movs	r3, #3
 800b21a:	e01c      	b.n	800b256 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b222:	b2db      	uxtb	r3, r3
 800b224:	2b03      	cmp	r3, #3
 800b226:	d115      	bne.n	800b254 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	32ae      	adds	r2, #174	@ 0xae
 800b232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00b      	beq.n	800b254 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	32ae      	adds	r2, #174	@ 0xae
 800b246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b24c:	78fa      	ldrb	r2, [r7, #3]
 800b24e:	4611      	mov	r1, r2
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b25e:	b480      	push	{r7}
 800b260:	b083      	sub	sp, #12
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00e      	beq.n	800b2b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	6852      	ldr	r2, [r2, #4]
 800b29e:	b2d2      	uxtb	r2, r2
 800b2a0:	4611      	mov	r1, r2
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	4798      	blx	r3
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d001      	beq.n	800b2b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b083      	sub	sp, #12
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b2c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b2e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	370c      	adds	r7, #12
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr

0800b2ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b086      	sub	sp, #24
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	885b      	ldrh	r3, [r3, #2]
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	7812      	ldrb	r2, [r2, #0]
 800b310:	4293      	cmp	r3, r2
 800b312:	d91f      	bls.n	800b354 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b31a:	e013      	b.n	800b344 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b31c:	f107 030a 	add.w	r3, r7, #10
 800b320:	4619      	mov	r1, r3
 800b322:	6978      	ldr	r0, [r7, #20]
 800b324:	f000 f81b 	bl	800b35e <USBD_GetNextDesc>
 800b328:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	785b      	ldrb	r3, [r3, #1]
 800b32e:	2b05      	cmp	r3, #5
 800b330:	d108      	bne.n	800b344 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	789b      	ldrb	r3, [r3, #2]
 800b33a:	78fa      	ldrb	r2, [r7, #3]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d008      	beq.n	800b352 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b340:	2300      	movs	r3, #0
 800b342:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	885b      	ldrh	r3, [r3, #2]
 800b348:	b29a      	uxth	r2, r3
 800b34a:	897b      	ldrh	r3, [r7, #10]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d8e5      	bhi.n	800b31c <USBD_GetEpDesc+0x2e>
 800b350:	e000      	b.n	800b354 <USBD_GetEpDesc+0x66>
          break;
 800b352:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b354:	693b      	ldr	r3, [r7, #16]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3718      	adds	r7, #24
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b35e:	b480      	push	{r7}
 800b360:	b085      	sub	sp, #20
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	7812      	ldrb	r2, [r2, #0]
 800b374:	4413      	add	r3, r2
 800b376:	b29a      	uxth	r2, r3
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	461a      	mov	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4413      	add	r3, r2
 800b386:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b388:	68fb      	ldr	r3, [r7, #12]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr

0800b396 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b396:	b480      	push	{r7}
 800b398:	b087      	sub	sp, #28
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b3b4:	8a3b      	ldrh	r3, [r7, #16]
 800b3b6:	021b      	lsls	r3, r3, #8
 800b3b8:	b21a      	sxth	r2, r3
 800b3ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	b21b      	sxth	r3, r3
 800b3c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b3c4:	89fb      	ldrh	r3, [r7, #14]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	371c      	adds	r7, #28
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
	...

0800b3d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b3ea:	2b40      	cmp	r3, #64	@ 0x40
 800b3ec:	d005      	beq.n	800b3fa <USBD_StdDevReq+0x26>
 800b3ee:	2b40      	cmp	r3, #64	@ 0x40
 800b3f0:	d857      	bhi.n	800b4a2 <USBD_StdDevReq+0xce>
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00f      	beq.n	800b416 <USBD_StdDevReq+0x42>
 800b3f6:	2b20      	cmp	r3, #32
 800b3f8:	d153      	bne.n	800b4a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	32ae      	adds	r2, #174	@ 0xae
 800b404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	6839      	ldr	r1, [r7, #0]
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	4798      	blx	r3
 800b410:	4603      	mov	r3, r0
 800b412:	73fb      	strb	r3, [r7, #15]
      break;
 800b414:	e04a      	b.n	800b4ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	785b      	ldrb	r3, [r3, #1]
 800b41a:	2b09      	cmp	r3, #9
 800b41c:	d83b      	bhi.n	800b496 <USBD_StdDevReq+0xc2>
 800b41e:	a201      	add	r2, pc, #4	@ (adr r2, 800b424 <USBD_StdDevReq+0x50>)
 800b420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b424:	0800b479 	.word	0x0800b479
 800b428:	0800b48d 	.word	0x0800b48d
 800b42c:	0800b497 	.word	0x0800b497
 800b430:	0800b483 	.word	0x0800b483
 800b434:	0800b497 	.word	0x0800b497
 800b438:	0800b457 	.word	0x0800b457
 800b43c:	0800b44d 	.word	0x0800b44d
 800b440:	0800b497 	.word	0x0800b497
 800b444:	0800b46f 	.word	0x0800b46f
 800b448:	0800b461 	.word	0x0800b461
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b44c:	6839      	ldr	r1, [r7, #0]
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fa3c 	bl	800b8cc <USBD_GetDescriptor>
          break;
 800b454:	e024      	b.n	800b4a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b456:	6839      	ldr	r1, [r7, #0]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fbcb 	bl	800bbf4 <USBD_SetAddress>
          break;
 800b45e:	e01f      	b.n	800b4a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fc0a 	bl	800bc7c <USBD_SetConfig>
 800b468:	4603      	mov	r3, r0
 800b46a:	73fb      	strb	r3, [r7, #15]
          break;
 800b46c:	e018      	b.n	800b4a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fcad 	bl	800bdd0 <USBD_GetConfig>
          break;
 800b476:	e013      	b.n	800b4a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fcde 	bl	800be3c <USBD_GetStatus>
          break;
 800b480:	e00e      	b.n	800b4a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b482:	6839      	ldr	r1, [r7, #0]
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 fd0d 	bl	800bea4 <USBD_SetFeature>
          break;
 800b48a:	e009      	b.n	800b4a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b48c:	6839      	ldr	r1, [r7, #0]
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fd31 	bl	800bef6 <USBD_ClrFeature>
          break;
 800b494:	e004      	b.n	800b4a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 fd88 	bl	800bfae <USBD_CtlError>
          break;
 800b49e:	bf00      	nop
      }
      break;
 800b4a0:	e004      	b.n	800b4ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fd82 	bl	800bfae <USBD_CtlError>
      break;
 800b4aa:	bf00      	nop
  }

  return ret;
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop

0800b4b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b4ce:	2b40      	cmp	r3, #64	@ 0x40
 800b4d0:	d005      	beq.n	800b4de <USBD_StdItfReq+0x26>
 800b4d2:	2b40      	cmp	r3, #64	@ 0x40
 800b4d4:	d852      	bhi.n	800b57c <USBD_StdItfReq+0xc4>
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d001      	beq.n	800b4de <USBD_StdItfReq+0x26>
 800b4da:	2b20      	cmp	r3, #32
 800b4dc:	d14e      	bne.n	800b57c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d840      	bhi.n	800b56e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	889b      	ldrh	r3, [r3, #4]
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d836      	bhi.n	800b564 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	889b      	ldrh	r3, [r3, #4]
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f7ff fedb 	bl	800b2ba <USBD_CoreFindIF>
 800b504:	4603      	mov	r3, r0
 800b506:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b508:	7bbb      	ldrb	r3, [r7, #14]
 800b50a:	2bff      	cmp	r3, #255	@ 0xff
 800b50c:	d01d      	beq.n	800b54a <USBD_StdItfReq+0x92>
 800b50e:	7bbb      	ldrb	r3, [r7, #14]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d11a      	bne.n	800b54a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b514:	7bba      	ldrb	r2, [r7, #14]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	32ae      	adds	r2, #174	@ 0xae
 800b51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00f      	beq.n	800b544 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b524:	7bba      	ldrb	r2, [r7, #14]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b52c:	7bba      	ldrb	r2, [r7, #14]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	32ae      	adds	r2, #174	@ 0xae
 800b532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	4798      	blx	r3
 800b53e:	4603      	mov	r3, r0
 800b540:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b542:	e004      	b.n	800b54e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b544:	2303      	movs	r3, #3
 800b546:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b548:	e001      	b.n	800b54e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b54a:	2303      	movs	r3, #3
 800b54c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	88db      	ldrh	r3, [r3, #6]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d110      	bne.n	800b578 <USBD_StdItfReq+0xc0>
 800b556:	7bfb      	ldrb	r3, [r7, #15]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10d      	bne.n	800b578 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 fdfd 	bl	800c15c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b562:	e009      	b.n	800b578 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 fd21 	bl	800bfae <USBD_CtlError>
          break;
 800b56c:	e004      	b.n	800b578 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fd1c 	bl	800bfae <USBD_CtlError>
          break;
 800b576:	e000      	b.n	800b57a <USBD_StdItfReq+0xc2>
          break;
 800b578:	bf00      	nop
      }
      break;
 800b57a:	e004      	b.n	800b586 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fd15 	bl	800bfae <USBD_CtlError>
      break;
 800b584:	bf00      	nop
  }

  return ret;
 800b586:	7bfb      	ldrb	r3, [r7, #15]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b59a:	2300      	movs	r3, #0
 800b59c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	889b      	ldrh	r3, [r3, #4]
 800b5a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b5ac:	2b40      	cmp	r3, #64	@ 0x40
 800b5ae:	d007      	beq.n	800b5c0 <USBD_StdEPReq+0x30>
 800b5b0:	2b40      	cmp	r3, #64	@ 0x40
 800b5b2:	f200 817f 	bhi.w	800b8b4 <USBD_StdEPReq+0x324>
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d02a      	beq.n	800b610 <USBD_StdEPReq+0x80>
 800b5ba:	2b20      	cmp	r3, #32
 800b5bc:	f040 817a 	bne.w	800b8b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b5c0:	7bbb      	ldrb	r3, [r7, #14]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff fe85 	bl	800b2d4 <USBD_CoreFindEP>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5ce:	7b7b      	ldrb	r3, [r7, #13]
 800b5d0:	2bff      	cmp	r3, #255	@ 0xff
 800b5d2:	f000 8174 	beq.w	800b8be <USBD_StdEPReq+0x32e>
 800b5d6:	7b7b      	ldrb	r3, [r7, #13]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f040 8170 	bne.w	800b8be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b5de:	7b7a      	ldrb	r2, [r7, #13]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b5e6:	7b7a      	ldrb	r2, [r7, #13]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	32ae      	adds	r2, #174	@ 0xae
 800b5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 8163 	beq.w	800b8be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b5f8:	7b7a      	ldrb	r2, [r7, #13]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	32ae      	adds	r2, #174	@ 0xae
 800b5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	6839      	ldr	r1, [r7, #0]
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	4798      	blx	r3
 800b60a:	4603      	mov	r3, r0
 800b60c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b60e:	e156      	b.n	800b8be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	785b      	ldrb	r3, [r3, #1]
 800b614:	2b03      	cmp	r3, #3
 800b616:	d008      	beq.n	800b62a <USBD_StdEPReq+0x9a>
 800b618:	2b03      	cmp	r3, #3
 800b61a:	f300 8145 	bgt.w	800b8a8 <USBD_StdEPReq+0x318>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f000 809b 	beq.w	800b75a <USBD_StdEPReq+0x1ca>
 800b624:	2b01      	cmp	r3, #1
 800b626:	d03c      	beq.n	800b6a2 <USBD_StdEPReq+0x112>
 800b628:	e13e      	b.n	800b8a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b630:	b2db      	uxtb	r3, r3
 800b632:	2b02      	cmp	r3, #2
 800b634:	d002      	beq.n	800b63c <USBD_StdEPReq+0xac>
 800b636:	2b03      	cmp	r3, #3
 800b638:	d016      	beq.n	800b668 <USBD_StdEPReq+0xd8>
 800b63a:	e02c      	b.n	800b696 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00d      	beq.n	800b65e <USBD_StdEPReq+0xce>
 800b642:	7bbb      	ldrb	r3, [r7, #14]
 800b644:	2b80      	cmp	r3, #128	@ 0x80
 800b646:	d00a      	beq.n	800b65e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b648:	7bbb      	ldrb	r3, [r7, #14]
 800b64a:	4619      	mov	r1, r3
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f004 f84d 	bl	800f6ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b652:	2180      	movs	r1, #128	@ 0x80
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f004 f849 	bl	800f6ec <USBD_LL_StallEP>
 800b65a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b65c:	e020      	b.n	800b6a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 fca4 	bl	800bfae <USBD_CtlError>
              break;
 800b666:	e01b      	b.n	800b6a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	885b      	ldrh	r3, [r3, #2]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10e      	bne.n	800b68e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b670:	7bbb      	ldrb	r3, [r7, #14]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00b      	beq.n	800b68e <USBD_StdEPReq+0xfe>
 800b676:	7bbb      	ldrb	r3, [r7, #14]
 800b678:	2b80      	cmp	r3, #128	@ 0x80
 800b67a:	d008      	beq.n	800b68e <USBD_StdEPReq+0xfe>
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	88db      	ldrh	r3, [r3, #6]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d104      	bne.n	800b68e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b684:	7bbb      	ldrb	r3, [r7, #14]
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f004 f82f 	bl	800f6ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fd64 	bl	800c15c <USBD_CtlSendStatus>

              break;
 800b694:	e004      	b.n	800b6a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fc88 	bl	800bfae <USBD_CtlError>
              break;
 800b69e:	bf00      	nop
          }
          break;
 800b6a0:	e107      	b.n	800b8b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	d002      	beq.n	800b6b4 <USBD_StdEPReq+0x124>
 800b6ae:	2b03      	cmp	r3, #3
 800b6b0:	d016      	beq.n	800b6e0 <USBD_StdEPReq+0x150>
 800b6b2:	e04b      	b.n	800b74c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6b4:	7bbb      	ldrb	r3, [r7, #14]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00d      	beq.n	800b6d6 <USBD_StdEPReq+0x146>
 800b6ba:	7bbb      	ldrb	r3, [r7, #14]
 800b6bc:	2b80      	cmp	r3, #128	@ 0x80
 800b6be:	d00a      	beq.n	800b6d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6c0:	7bbb      	ldrb	r3, [r7, #14]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f004 f811 	bl	800f6ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6ca:	2180      	movs	r1, #128	@ 0x80
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f004 f80d 	bl	800f6ec <USBD_LL_StallEP>
 800b6d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b6d4:	e040      	b.n	800b758 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 fc68 	bl	800bfae <USBD_CtlError>
              break;
 800b6de:	e03b      	b.n	800b758 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	885b      	ldrh	r3, [r3, #2]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d136      	bne.n	800b756 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b6e8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d004      	beq.n	800b6fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b6f2:	7bbb      	ldrb	r3, [r7, #14]
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f004 f82e 	bl	800f758 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 fd2d 	bl	800c15c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b702:	7bbb      	ldrb	r3, [r7, #14]
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f7ff fde4 	bl	800b2d4 <USBD_CoreFindEP>
 800b70c:	4603      	mov	r3, r0
 800b70e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b710:	7b7b      	ldrb	r3, [r7, #13]
 800b712:	2bff      	cmp	r3, #255	@ 0xff
 800b714:	d01f      	beq.n	800b756 <USBD_StdEPReq+0x1c6>
 800b716:	7b7b      	ldrb	r3, [r7, #13]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d11c      	bne.n	800b756 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b71c:	7b7a      	ldrb	r2, [r7, #13]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b724:	7b7a      	ldrb	r2, [r7, #13]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	32ae      	adds	r2, #174	@ 0xae
 800b72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d010      	beq.n	800b756 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b734:	7b7a      	ldrb	r2, [r7, #13]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	32ae      	adds	r2, #174	@ 0xae
 800b73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	4798      	blx	r3
 800b746:	4603      	mov	r3, r0
 800b748:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b74a:	e004      	b.n	800b756 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fc2d 	bl	800bfae <USBD_CtlError>
              break;
 800b754:	e000      	b.n	800b758 <USBD_StdEPReq+0x1c8>
              break;
 800b756:	bf00      	nop
          }
          break;
 800b758:	e0ab      	b.n	800b8b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b760:	b2db      	uxtb	r3, r3
 800b762:	2b02      	cmp	r3, #2
 800b764:	d002      	beq.n	800b76c <USBD_StdEPReq+0x1dc>
 800b766:	2b03      	cmp	r3, #3
 800b768:	d032      	beq.n	800b7d0 <USBD_StdEPReq+0x240>
 800b76a:	e097      	b.n	800b89c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b76c:	7bbb      	ldrb	r3, [r7, #14]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d007      	beq.n	800b782 <USBD_StdEPReq+0x1f2>
 800b772:	7bbb      	ldrb	r3, [r7, #14]
 800b774:	2b80      	cmp	r3, #128	@ 0x80
 800b776:	d004      	beq.n	800b782 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fc17 	bl	800bfae <USBD_CtlError>
                break;
 800b780:	e091      	b.n	800b8a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b786:	2b00      	cmp	r3, #0
 800b788:	da0b      	bge.n	800b7a2 <USBD_StdEPReq+0x212>
 800b78a:	7bbb      	ldrb	r3, [r7, #14]
 800b78c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b790:	4613      	mov	r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4413      	add	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	3310      	adds	r3, #16
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	4413      	add	r3, r2
 800b79e:	3304      	adds	r3, #4
 800b7a0:	e00b      	b.n	800b7ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b7a2:	7bbb      	ldrb	r3, [r7, #14]
 800b7a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4413      	add	r3, r2
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	3304      	adds	r3, #4
 800b7ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fc6d 	bl	800c0a8 <USBD_CtlSendData>
              break;
 800b7ce:	e06a      	b.n	800b8a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b7d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	da11      	bge.n	800b7fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
 800b7da:	f003 020f 	and.w	r2, r3, #15
 800b7de:	6879      	ldr	r1, [r7, #4]
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4413      	add	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	440b      	add	r3, r1
 800b7ea:	3324      	adds	r3, #36	@ 0x24
 800b7ec:	881b      	ldrh	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d117      	bne.n	800b822 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fbda 	bl	800bfae <USBD_CtlError>
                  break;
 800b7fa:	e054      	b.n	800b8a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	f003 020f 	and.w	r2, r3, #15
 800b802:	6879      	ldr	r1, [r7, #4]
 800b804:	4613      	mov	r3, r2
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	4413      	add	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	440b      	add	r3, r1
 800b80e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b812:	881b      	ldrh	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d104      	bne.n	800b822 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b818:	6839      	ldr	r1, [r7, #0]
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 fbc7 	bl	800bfae <USBD_CtlError>
                  break;
 800b820:	e041      	b.n	800b8a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b826:	2b00      	cmp	r3, #0
 800b828:	da0b      	bge.n	800b842 <USBD_StdEPReq+0x2b2>
 800b82a:	7bbb      	ldrb	r3, [r7, #14]
 800b82c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b830:	4613      	mov	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4413      	add	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	3310      	adds	r3, #16
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	4413      	add	r3, r2
 800b83e:	3304      	adds	r3, #4
 800b840:	e00b      	b.n	800b85a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b842:	7bbb      	ldrb	r3, [r7, #14]
 800b844:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b848:	4613      	mov	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	4413      	add	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	4413      	add	r3, r2
 800b858:	3304      	adds	r3, #4
 800b85a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b85c:	7bbb      	ldrb	r3, [r7, #14]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d002      	beq.n	800b868 <USBD_StdEPReq+0x2d8>
 800b862:	7bbb      	ldrb	r3, [r7, #14]
 800b864:	2b80      	cmp	r3, #128	@ 0x80
 800b866:	d103      	bne.n	800b870 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	2200      	movs	r2, #0
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	e00e      	b.n	800b88e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b870:	7bbb      	ldrb	r3, [r7, #14]
 800b872:	4619      	mov	r1, r3
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f003 ffa5 	bl	800f7c4 <USBD_LL_IsStallEP>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d003      	beq.n	800b888 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	2201      	movs	r2, #1
 800b884:	601a      	str	r2, [r3, #0]
 800b886:	e002      	b.n	800b88e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	2200      	movs	r2, #0
 800b88c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	2202      	movs	r2, #2
 800b892:	4619      	mov	r1, r3
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 fc07 	bl	800c0a8 <USBD_CtlSendData>
              break;
 800b89a:	e004      	b.n	800b8a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b89c:	6839      	ldr	r1, [r7, #0]
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fb85 	bl	800bfae <USBD_CtlError>
              break;
 800b8a4:	bf00      	nop
          }
          break;
 800b8a6:	e004      	b.n	800b8b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fb7f 	bl	800bfae <USBD_CtlError>
          break;
 800b8b0:	bf00      	nop
      }
      break;
 800b8b2:	e005      	b.n	800b8c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fb79 	bl	800bfae <USBD_CtlError>
      break;
 800b8bc:	e000      	b.n	800b8c0 <USBD_StdEPReq+0x330>
      break;
 800b8be:	bf00      	nop
  }

  return ret;
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
	...

0800b8cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	885b      	ldrh	r3, [r3, #2]
 800b8e6:	0a1b      	lsrs	r3, r3, #8
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	2b0e      	cmp	r3, #14
 800b8ee:	f200 8152 	bhi.w	800bb96 <USBD_GetDescriptor+0x2ca>
 800b8f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f8 <USBD_GetDescriptor+0x2c>)
 800b8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f8:	0800b969 	.word	0x0800b969
 800b8fc:	0800b981 	.word	0x0800b981
 800b900:	0800b9c1 	.word	0x0800b9c1
 800b904:	0800bb97 	.word	0x0800bb97
 800b908:	0800bb97 	.word	0x0800bb97
 800b90c:	0800bb37 	.word	0x0800bb37
 800b910:	0800bb63 	.word	0x0800bb63
 800b914:	0800bb97 	.word	0x0800bb97
 800b918:	0800bb97 	.word	0x0800bb97
 800b91c:	0800bb97 	.word	0x0800bb97
 800b920:	0800bb97 	.word	0x0800bb97
 800b924:	0800bb97 	.word	0x0800bb97
 800b928:	0800bb97 	.word	0x0800bb97
 800b92c:	0800bb97 	.word	0x0800bb97
 800b930:	0800b935 	.word	0x0800b935
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b93a:	69db      	ldr	r3, [r3, #28]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00b      	beq.n	800b958 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b946:	69db      	ldr	r3, [r3, #28]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	7c12      	ldrb	r2, [r2, #16]
 800b94c:	f107 0108 	add.w	r1, r7, #8
 800b950:	4610      	mov	r0, r2
 800b952:	4798      	blx	r3
 800b954:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b956:	e126      	b.n	800bba6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b958:	6839      	ldr	r1, [r7, #0]
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 fb27 	bl	800bfae <USBD_CtlError>
        err++;
 800b960:	7afb      	ldrb	r3, [r7, #11]
 800b962:	3301      	adds	r3, #1
 800b964:	72fb      	strb	r3, [r7, #11]
      break;
 800b966:	e11e      	b.n	800bba6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	7c12      	ldrb	r2, [r2, #16]
 800b974:	f107 0108 	add.w	r1, r7, #8
 800b978:	4610      	mov	r0, r2
 800b97a:	4798      	blx	r3
 800b97c:	60f8      	str	r0, [r7, #12]
      break;
 800b97e:	e112      	b.n	800bba6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	7c1b      	ldrb	r3, [r3, #16]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10d      	bne.n	800b9a4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b990:	f107 0208 	add.w	r2, r7, #8
 800b994:	4610      	mov	r0, r2
 800b996:	4798      	blx	r3
 800b998:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	3301      	adds	r3, #1
 800b99e:	2202      	movs	r2, #2
 800b9a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b9a2:	e100      	b.n	800bba6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ac:	f107 0208 	add.w	r2, r7, #8
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	4798      	blx	r3
 800b9b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	701a      	strb	r2, [r3, #0]
      break;
 800b9be:	e0f2      	b.n	800bba6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	885b      	ldrh	r3, [r3, #2]
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b05      	cmp	r3, #5
 800b9c8:	f200 80ac 	bhi.w	800bb24 <USBD_GetDescriptor+0x258>
 800b9cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d4 <USBD_GetDescriptor+0x108>)
 800b9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d2:	bf00      	nop
 800b9d4:	0800b9ed 	.word	0x0800b9ed
 800b9d8:	0800ba21 	.word	0x0800ba21
 800b9dc:	0800ba55 	.word	0x0800ba55
 800b9e0:	0800ba89 	.word	0x0800ba89
 800b9e4:	0800babd 	.word	0x0800babd
 800b9e8:	0800baf1 	.word	0x0800baf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00b      	beq.n	800ba10 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	7c12      	ldrb	r2, [r2, #16]
 800ba04:	f107 0108 	add.w	r1, r7, #8
 800ba08:	4610      	mov	r0, r2
 800ba0a:	4798      	blx	r3
 800ba0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba0e:	e091      	b.n	800bb34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ba10:	6839      	ldr	r1, [r7, #0]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 facb 	bl	800bfae <USBD_CtlError>
            err++;
 800ba18:	7afb      	ldrb	r3, [r7, #11]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba1e:	e089      	b.n	800bb34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00b      	beq.n	800ba44 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	7c12      	ldrb	r2, [r2, #16]
 800ba38:	f107 0108 	add.w	r1, r7, #8
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	4798      	blx	r3
 800ba40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba42:	e077      	b.n	800bb34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ba44:	6839      	ldr	r1, [r7, #0]
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fab1 	bl	800bfae <USBD_CtlError>
            err++;
 800ba4c:	7afb      	ldrb	r3, [r7, #11]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	72fb      	strb	r3, [r7, #11]
          break;
 800ba52:	e06f      	b.n	800bb34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00b      	beq.n	800ba78 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	7c12      	ldrb	r2, [r2, #16]
 800ba6c:	f107 0108 	add.w	r1, r7, #8
 800ba70:	4610      	mov	r0, r2
 800ba72:	4798      	blx	r3
 800ba74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba76:	e05d      	b.n	800bb34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ba78:	6839      	ldr	r1, [r7, #0]
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fa97 	bl	800bfae <USBD_CtlError>
            err++;
 800ba80:	7afb      	ldrb	r3, [r7, #11]
 800ba82:	3301      	adds	r3, #1
 800ba84:	72fb      	strb	r3, [r7, #11]
          break;
 800ba86:	e055      	b.n	800bb34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba8e:	691b      	ldr	r3, [r3, #16]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00b      	beq.n	800baac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba9a:	691b      	ldr	r3, [r3, #16]
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	7c12      	ldrb	r2, [r2, #16]
 800baa0:	f107 0108 	add.w	r1, r7, #8
 800baa4:	4610      	mov	r0, r2
 800baa6:	4798      	blx	r3
 800baa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800baaa:	e043      	b.n	800bb34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800baac:	6839      	ldr	r1, [r7, #0]
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fa7d 	bl	800bfae <USBD_CtlError>
            err++;
 800bab4:	7afb      	ldrb	r3, [r7, #11]
 800bab6:	3301      	adds	r3, #1
 800bab8:	72fb      	strb	r3, [r7, #11]
          break;
 800baba:	e03b      	b.n	800bb34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00b      	beq.n	800bae0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bace:	695b      	ldr	r3, [r3, #20]
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	7c12      	ldrb	r2, [r2, #16]
 800bad4:	f107 0108 	add.w	r1, r7, #8
 800bad8:	4610      	mov	r0, r2
 800bada:	4798      	blx	r3
 800badc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bade:	e029      	b.n	800bb34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bae0:	6839      	ldr	r1, [r7, #0]
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fa63 	bl	800bfae <USBD_CtlError>
            err++;
 800bae8:	7afb      	ldrb	r3, [r7, #11]
 800baea:	3301      	adds	r3, #1
 800baec:	72fb      	strb	r3, [r7, #11]
          break;
 800baee:	e021      	b.n	800bb34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baf6:	699b      	ldr	r3, [r3, #24]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00b      	beq.n	800bb14 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	7c12      	ldrb	r2, [r2, #16]
 800bb08:	f107 0108 	add.w	r1, r7, #8
 800bb0c:	4610      	mov	r0, r2
 800bb0e:	4798      	blx	r3
 800bb10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb12:	e00f      	b.n	800bb34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 fa49 	bl	800bfae <USBD_CtlError>
            err++;
 800bb1c:	7afb      	ldrb	r3, [r7, #11]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	72fb      	strb	r3, [r7, #11]
          break;
 800bb22:	e007      	b.n	800bb34 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bb24:	6839      	ldr	r1, [r7, #0]
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 fa41 	bl	800bfae <USBD_CtlError>
          err++;
 800bb2c:	7afb      	ldrb	r3, [r7, #11]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bb32:	bf00      	nop
      }
      break;
 800bb34:	e037      	b.n	800bba6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	7c1b      	ldrb	r3, [r3, #16]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d109      	bne.n	800bb52 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb46:	f107 0208 	add.w	r2, r7, #8
 800bb4a:	4610      	mov	r0, r2
 800bb4c:	4798      	blx	r3
 800bb4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb50:	e029      	b.n	800bba6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fa2a 	bl	800bfae <USBD_CtlError>
        err++;
 800bb5a:	7afb      	ldrb	r3, [r7, #11]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	72fb      	strb	r3, [r7, #11]
      break;
 800bb60:	e021      	b.n	800bba6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	7c1b      	ldrb	r3, [r3, #16]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10d      	bne.n	800bb86 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb72:	f107 0208 	add.w	r2, r7, #8
 800bb76:	4610      	mov	r0, r2
 800bb78:	4798      	blx	r3
 800bb7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	3301      	adds	r3, #1
 800bb80:	2207      	movs	r2, #7
 800bb82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb84:	e00f      	b.n	800bba6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb86:	6839      	ldr	r1, [r7, #0]
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fa10 	bl	800bfae <USBD_CtlError>
        err++;
 800bb8e:	7afb      	ldrb	r3, [r7, #11]
 800bb90:	3301      	adds	r3, #1
 800bb92:	72fb      	strb	r3, [r7, #11]
      break;
 800bb94:	e007      	b.n	800bba6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bb96:	6839      	ldr	r1, [r7, #0]
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 fa08 	bl	800bfae <USBD_CtlError>
      err++;
 800bb9e:	7afb      	ldrb	r3, [r7, #11]
 800bba0:	3301      	adds	r3, #1
 800bba2:	72fb      	strb	r3, [r7, #11]
      break;
 800bba4:	bf00      	nop
  }

  if (err != 0U)
 800bba6:	7afb      	ldrb	r3, [r7, #11]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d11e      	bne.n	800bbea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	88db      	ldrh	r3, [r3, #6]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d016      	beq.n	800bbe2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bbb4:	893b      	ldrh	r3, [r7, #8]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00e      	beq.n	800bbd8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	88da      	ldrh	r2, [r3, #6]
 800bbbe:	893b      	ldrh	r3, [r7, #8]
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	bf28      	it	cs
 800bbc4:	4613      	movcs	r3, r2
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bbca:	893b      	ldrh	r3, [r7, #8]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	68f9      	ldr	r1, [r7, #12]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fa69 	bl	800c0a8 <USBD_CtlSendData>
 800bbd6:	e009      	b.n	800bbec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bbd8:	6839      	ldr	r1, [r7, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f9e7 	bl	800bfae <USBD_CtlError>
 800bbe0:	e004      	b.n	800bbec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 faba 	bl	800c15c <USBD_CtlSendStatus>
 800bbe8:	e000      	b.n	800bbec <USBD_GetDescriptor+0x320>
    return;
 800bbea:	bf00      	nop
  }
}
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop

0800bbf4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	889b      	ldrh	r3, [r3, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d131      	bne.n	800bc6a <USBD_SetAddress+0x76>
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	88db      	ldrh	r3, [r3, #6]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d12d      	bne.n	800bc6a <USBD_SetAddress+0x76>
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	885b      	ldrh	r3, [r3, #2]
 800bc12:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc14:	d829      	bhi.n	800bc6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	885b      	ldrh	r3, [r3, #2]
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d104      	bne.n	800bc38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f9bc 	bl	800bfae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc36:	e01d      	b.n	800bc74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	7bfa      	ldrb	r2, [r7, #15]
 800bc3c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bc40:	7bfb      	ldrb	r3, [r7, #15]
 800bc42:	4619      	mov	r1, r3
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f003 fde9 	bl	800f81c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fa86 	bl	800c15c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bc50:	7bfb      	ldrb	r3, [r7, #15]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d004      	beq.n	800bc60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2202      	movs	r2, #2
 800bc5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc5e:	e009      	b.n	800bc74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2201      	movs	r2, #1
 800bc64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc68:	e004      	b.n	800bc74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bc6a:	6839      	ldr	r1, [r7, #0]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 f99e 	bl	800bfae <USBD_CtlError>
  }
}
 800bc72:	bf00      	nop
 800bc74:	bf00      	nop
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	885b      	ldrh	r3, [r3, #2]
 800bc8e:	b2da      	uxtb	r2, r3
 800bc90:	4b4e      	ldr	r3, [pc, #312]	@ (800bdcc <USBD_SetConfig+0x150>)
 800bc92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bc94:	4b4d      	ldr	r3, [pc, #308]	@ (800bdcc <USBD_SetConfig+0x150>)
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d905      	bls.n	800bca8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bc9c:	6839      	ldr	r1, [r7, #0]
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 f985 	bl	800bfae <USBD_CtlError>
    return USBD_FAIL;
 800bca4:	2303      	movs	r3, #3
 800bca6:	e08c      	b.n	800bdc2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d002      	beq.n	800bcba <USBD_SetConfig+0x3e>
 800bcb4:	2b03      	cmp	r3, #3
 800bcb6:	d029      	beq.n	800bd0c <USBD_SetConfig+0x90>
 800bcb8:	e075      	b.n	800bda6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bcba:	4b44      	ldr	r3, [pc, #272]	@ (800bdcc <USBD_SetConfig+0x150>)
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d020      	beq.n	800bd04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bcc2:	4b42      	ldr	r3, [pc, #264]	@ (800bdcc <USBD_SetConfig+0x150>)
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bccc:	4b3f      	ldr	r3, [pc, #252]	@ (800bdcc <USBD_SetConfig+0x150>)
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7fe ffb9 	bl	800ac4a <USBD_SetClassConfig>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d008      	beq.n	800bcf4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 f962 	bl	800bfae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2202      	movs	r2, #2
 800bcee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bcf2:	e065      	b.n	800bdc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 fa31 	bl	800c15c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2203      	movs	r2, #3
 800bcfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bd02:	e05d      	b.n	800bdc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 fa29 	bl	800c15c <USBD_CtlSendStatus>
      break;
 800bd0a:	e059      	b.n	800bdc0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bd0c:	4b2f      	ldr	r3, [pc, #188]	@ (800bdcc <USBD_SetConfig+0x150>)
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d112      	bne.n	800bd3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2202      	movs	r2, #2
 800bd18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bd1c:	4b2b      	ldr	r3, [pc, #172]	@ (800bdcc <USBD_SetConfig+0x150>)
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	461a      	mov	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bd26:	4b29      	ldr	r3, [pc, #164]	@ (800bdcc <USBD_SetConfig+0x150>)
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f7fe ffa8 	bl	800ac82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 fa12 	bl	800c15c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd38:	e042      	b.n	800bdc0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bd3a:	4b24      	ldr	r3, [pc, #144]	@ (800bdcc <USBD_SetConfig+0x150>)
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d02a      	beq.n	800bd9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	4619      	mov	r1, r3
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7fe ff96 	bl	800ac82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bd56:	4b1d      	ldr	r3, [pc, #116]	@ (800bdcc <USBD_SetConfig+0x150>)
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd60:	4b1a      	ldr	r3, [pc, #104]	@ (800bdcc <USBD_SetConfig+0x150>)
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	4619      	mov	r1, r3
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f7fe ff6f 	bl	800ac4a <USBD_SetClassConfig>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bd70:	7bfb      	ldrb	r3, [r7, #15]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00f      	beq.n	800bd96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 f918 	bl	800bfae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	4619      	mov	r1, r3
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f7fe ff7b 	bl	800ac82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2202      	movs	r2, #2
 800bd90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bd94:	e014      	b.n	800bdc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 f9e0 	bl	800c15c <USBD_CtlSendStatus>
      break;
 800bd9c:	e010      	b.n	800bdc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 f9dc 	bl	800c15c <USBD_CtlSendStatus>
      break;
 800bda4:	e00c      	b.n	800bdc0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bda6:	6839      	ldr	r1, [r7, #0]
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 f900 	bl	800bfae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bdae:	4b07      	ldr	r3, [pc, #28]	@ (800bdcc <USBD_SetConfig+0x150>)
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f7fe ff64 	bl	800ac82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bdba:	2303      	movs	r3, #3
 800bdbc:	73fb      	strb	r3, [r7, #15]
      break;
 800bdbe:	bf00      	nop
  }

  return ret;
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	20000828 	.word	0x20000828

0800bdd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	88db      	ldrh	r3, [r3, #6]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d004      	beq.n	800bdec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f8e2 	bl	800bfae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bdea:	e023      	b.n	800be34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	dc02      	bgt.n	800bdfe <USBD_GetConfig+0x2e>
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	dc03      	bgt.n	800be04 <USBD_GetConfig+0x34>
 800bdfc:	e015      	b.n	800be2a <USBD_GetConfig+0x5a>
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d00b      	beq.n	800be1a <USBD_GetConfig+0x4a>
 800be02:	e012      	b.n	800be2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	3308      	adds	r3, #8
 800be0e:	2201      	movs	r2, #1
 800be10:	4619      	mov	r1, r3
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f948 	bl	800c0a8 <USBD_CtlSendData>
        break;
 800be18:	e00c      	b.n	800be34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	3304      	adds	r3, #4
 800be1e:	2201      	movs	r2, #1
 800be20:	4619      	mov	r1, r3
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 f940 	bl	800c0a8 <USBD_CtlSendData>
        break;
 800be28:	e004      	b.n	800be34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800be2a:	6839      	ldr	r1, [r7, #0]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 f8be 	bl	800bfae <USBD_CtlError>
        break;
 800be32:	bf00      	nop
}
 800be34:	bf00      	nop
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	3b01      	subs	r3, #1
 800be50:	2b02      	cmp	r3, #2
 800be52:	d81e      	bhi.n	800be92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	88db      	ldrh	r3, [r3, #6]
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d004      	beq.n	800be66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 f8a5 	bl	800bfae <USBD_CtlError>
        break;
 800be64:	e01a      	b.n	800be9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2201      	movs	r2, #1
 800be6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800be72:	2b00      	cmp	r3, #0
 800be74:	d005      	beq.n	800be82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	f043 0202 	orr.w	r2, r3, #2
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	330c      	adds	r3, #12
 800be86:	2202      	movs	r2, #2
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f90c 	bl	800c0a8 <USBD_CtlSendData>
      break;
 800be90:	e004      	b.n	800be9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800be92:	6839      	ldr	r1, [r7, #0]
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f88a 	bl	800bfae <USBD_CtlError>
      break;
 800be9a:	bf00      	nop
  }
}
 800be9c:	bf00      	nop
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	885b      	ldrh	r3, [r3, #2]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d107      	bne.n	800bec6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f94c 	bl	800c15c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bec4:	e013      	b.n	800beee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	885b      	ldrh	r3, [r3, #2]
 800beca:	2b02      	cmp	r3, #2
 800becc:	d10b      	bne.n	800bee6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	889b      	ldrh	r3, [r3, #4]
 800bed2:	0a1b      	lsrs	r3, r3, #8
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f93c 	bl	800c15c <USBD_CtlSendStatus>
}
 800bee4:	e003      	b.n	800beee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f860 	bl	800bfae <USBD_CtlError>
}
 800beee:	bf00      	nop
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b082      	sub	sp, #8
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
 800befe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	d80b      	bhi.n	800bf26 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	885b      	ldrh	r3, [r3, #2]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d10c      	bne.n	800bf30 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 f91c 	bl	800c15c <USBD_CtlSendStatus>
      }
      break;
 800bf24:	e004      	b.n	800bf30 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bf26:	6839      	ldr	r1, [r7, #0]
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f840 	bl	800bfae <USBD_CtlError>
      break;
 800bf2e:	e000      	b.n	800bf32 <USBD_ClrFeature+0x3c>
      break;
 800bf30:	bf00      	nop
  }
}
 800bf32:	bf00      	nop
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b084      	sub	sp, #16
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	781a      	ldrb	r2, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	3301      	adds	r3, #1
 800bf54:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	781a      	ldrb	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	3301      	adds	r3, #1
 800bf62:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f7ff fa16 	bl	800b396 <SWAPBYTE>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	3301      	adds	r3, #1
 800bf76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f7ff fa09 	bl	800b396 <SWAPBYTE>
 800bf84:	4603      	mov	r3, r0
 800bf86:	461a      	mov	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	3301      	adds	r3, #1
 800bf96:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f7ff f9fc 	bl	800b396 <SWAPBYTE>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	80da      	strh	r2, [r3, #6]
}
 800bfa6:	bf00      	nop
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b082      	sub	sp, #8
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
 800bfb6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfb8:	2180      	movs	r1, #128	@ 0x80
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f003 fb96 	bl	800f6ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f003 fb92 	bl	800f6ec <USBD_LL_StallEP>
}
 800bfc8:	bf00      	nop
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d042      	beq.n	800c06c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800bfea:	6938      	ldr	r0, [r7, #16]
 800bfec:	f000 f842 	bl	800c074 <USBD_GetLen>
 800bff0:	4603      	mov	r3, r0
 800bff2:	3301      	adds	r3, #1
 800bff4:	005b      	lsls	r3, r3, #1
 800bff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bffa:	d808      	bhi.n	800c00e <USBD_GetString+0x3e>
 800bffc:	6938      	ldr	r0, [r7, #16]
 800bffe:	f000 f839 	bl	800c074 <USBD_GetLen>
 800c002:	4603      	mov	r3, r0
 800c004:	3301      	adds	r3, #1
 800c006:	b29b      	uxth	r3, r3
 800c008:	005b      	lsls	r3, r3, #1
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	e001      	b.n	800c012 <USBD_GetString+0x42>
 800c00e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c016:	7dfb      	ldrb	r3, [r7, #23]
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	4413      	add	r3, r2
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	7812      	ldrb	r2, [r2, #0]
 800c020:	701a      	strb	r2, [r3, #0]
  idx++;
 800c022:	7dfb      	ldrb	r3, [r7, #23]
 800c024:	3301      	adds	r3, #1
 800c026:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c028:	7dfb      	ldrb	r3, [r7, #23]
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	4413      	add	r3, r2
 800c02e:	2203      	movs	r2, #3
 800c030:	701a      	strb	r2, [r3, #0]
  idx++;
 800c032:	7dfb      	ldrb	r3, [r7, #23]
 800c034:	3301      	adds	r3, #1
 800c036:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c038:	e013      	b.n	800c062 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	4413      	add	r3, r2
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	7812      	ldrb	r2, [r2, #0]
 800c044:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	3301      	adds	r3, #1
 800c04a:	613b      	str	r3, [r7, #16]
    idx++;
 800c04c:	7dfb      	ldrb	r3, [r7, #23]
 800c04e:	3301      	adds	r3, #1
 800c050:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c052:	7dfb      	ldrb	r3, [r7, #23]
 800c054:	68ba      	ldr	r2, [r7, #8]
 800c056:	4413      	add	r3, r2
 800c058:	2200      	movs	r2, #0
 800c05a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c05c:	7dfb      	ldrb	r3, [r7, #23]
 800c05e:	3301      	adds	r3, #1
 800c060:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1e7      	bne.n	800c03a <USBD_GetString+0x6a>
 800c06a:	e000      	b.n	800c06e <USBD_GetString+0x9e>
    return;
 800c06c:	bf00      	nop
  }
}
 800c06e:	3718      	adds	r7, #24
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c07c:	2300      	movs	r3, #0
 800c07e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c084:	e005      	b.n	800c092 <USBD_GetLen+0x1e>
  {
    len++;
 800c086:	7bfb      	ldrb	r3, [r7, #15]
 800c088:	3301      	adds	r3, #1
 800c08a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	3301      	adds	r3, #1
 800c090:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1f5      	bne.n	800c086 <USBD_GetLen+0x12>
  }

  return len;
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2202      	movs	r2, #2
 800c0b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	68ba      	ldr	r2, [r7, #8]
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	f003 fbda 	bl	800f888 <USBD_LL_Transmit>

  return USBD_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b084      	sub	sp, #16
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	60f8      	str	r0, [r7, #12]
 800c0e6:	60b9      	str	r1, [r7, #8]
 800c0e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f003 fbc9 	bl	800f888 <USBD_LL_Transmit>

  return USBD_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2203      	movs	r2, #3
 800c110:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	2100      	movs	r1, #0
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f003 fbe4 	bl	800f8f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b084      	sub	sp, #16
 800c13e:	af00      	add	r7, sp, #0
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	60b9      	str	r1, [r7, #8]
 800c144:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	2100      	movs	r1, #0
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f003 fbd3 	bl	800f8f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2204      	movs	r2, #4
 800c168:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c16c:	2300      	movs	r3, #0
 800c16e:	2200      	movs	r2, #0
 800c170:	2100      	movs	r1, #0
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f003 fb88 	bl	800f888 <USBD_LL_Transmit>

  return USBD_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b082      	sub	sp, #8
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2205      	movs	r2, #5
 800c18e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c192:	2300      	movs	r3, #0
 800c194:	2200      	movs	r2, #0
 800c196:	2100      	movs	r1, #0
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f003 fbad 	bl	800f8f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <__NVIC_SetPriority>:
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	6039      	str	r1, [r7, #0]
 800c1b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	db0a      	blt.n	800c1d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	490c      	ldr	r1, [pc, #48]	@ (800c1f4 <__NVIC_SetPriority+0x4c>)
 800c1c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1c6:	0112      	lsls	r2, r2, #4
 800c1c8:	b2d2      	uxtb	r2, r2
 800c1ca:	440b      	add	r3, r1
 800c1cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c1d0:	e00a      	b.n	800c1e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	b2da      	uxtb	r2, r3
 800c1d6:	4908      	ldr	r1, [pc, #32]	@ (800c1f8 <__NVIC_SetPriority+0x50>)
 800c1d8:	79fb      	ldrb	r3, [r7, #7]
 800c1da:	f003 030f 	and.w	r3, r3, #15
 800c1de:	3b04      	subs	r3, #4
 800c1e0:	0112      	lsls	r2, r2, #4
 800c1e2:	b2d2      	uxtb	r2, r2
 800c1e4:	440b      	add	r3, r1
 800c1e6:	761a      	strb	r2, [r3, #24]
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	e000e100 	.word	0xe000e100
 800c1f8:	e000ed00 	.word	0xe000ed00

0800c1fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c200:	4b05      	ldr	r3, [pc, #20]	@ (800c218 <SysTick_Handler+0x1c>)
 800c202:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c204:	f001 fd46 	bl	800dc94 <xTaskGetSchedulerState>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d001      	beq.n	800c212 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c20e:	f002 fb3b 	bl	800e888 <xPortSysTickHandler>
  }
}
 800c212:	bf00      	nop
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	e000e010 	.word	0xe000e010

0800c21c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c21c:	b580      	push	{r7, lr}
 800c21e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c220:	2100      	movs	r1, #0
 800c222:	f06f 0004 	mvn.w	r0, #4
 800c226:	f7ff ffbf 	bl	800c1a8 <__NVIC_SetPriority>
#endif
}
 800c22a:	bf00      	nop
 800c22c:	bd80      	pop	{r7, pc}
	...

0800c230 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c236:	f3ef 8305 	mrs	r3, IPSR
 800c23a:	603b      	str	r3, [r7, #0]
  return(result);
 800c23c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d003      	beq.n	800c24a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c242:	f06f 0305 	mvn.w	r3, #5
 800c246:	607b      	str	r3, [r7, #4]
 800c248:	e00c      	b.n	800c264 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c24a:	4b0a      	ldr	r3, [pc, #40]	@ (800c274 <osKernelInitialize+0x44>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d105      	bne.n	800c25e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c252:	4b08      	ldr	r3, [pc, #32]	@ (800c274 <osKernelInitialize+0x44>)
 800c254:	2201      	movs	r2, #1
 800c256:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c258:	2300      	movs	r3, #0
 800c25a:	607b      	str	r3, [r7, #4]
 800c25c:	e002      	b.n	800c264 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c25e:	f04f 33ff 	mov.w	r3, #4294967295
 800c262:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c264:	687b      	ldr	r3, [r7, #4]
}
 800c266:	4618      	mov	r0, r3
 800c268:	370c      	adds	r7, #12
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	2000082c 	.word	0x2000082c

0800c278 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c27e:	f3ef 8305 	mrs	r3, IPSR
 800c282:	603b      	str	r3, [r7, #0]
  return(result);
 800c284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c28a:	f06f 0305 	mvn.w	r3, #5
 800c28e:	607b      	str	r3, [r7, #4]
 800c290:	e010      	b.n	800c2b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c292:	4b0b      	ldr	r3, [pc, #44]	@ (800c2c0 <osKernelStart+0x48>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b01      	cmp	r3, #1
 800c298:	d109      	bne.n	800c2ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c29a:	f7ff ffbf 	bl	800c21c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c29e:	4b08      	ldr	r3, [pc, #32]	@ (800c2c0 <osKernelStart+0x48>)
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c2a4:	f001 f892 	bl	800d3cc <vTaskStartScheduler>
      stat = osOK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	607b      	str	r3, [r7, #4]
 800c2ac:	e002      	b.n	800c2b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c2b4:	687b      	ldr	r3, [r7, #4]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	2000082c 	.word	0x2000082c

0800c2c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b08e      	sub	sp, #56	@ 0x38
 800c2c8:	af04      	add	r7, sp, #16
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2d4:	f3ef 8305 	mrs	r3, IPSR
 800c2d8:	617b      	str	r3, [r7, #20]
  return(result);
 800c2da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d17e      	bne.n	800c3de <osThreadNew+0x11a>
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d07b      	beq.n	800c3de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c2e6:	2380      	movs	r3, #128	@ 0x80
 800c2e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c2ea:	2318      	movs	r3, #24
 800c2ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d045      	beq.n	800c38a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d002      	beq.n	800c30c <osThreadNew+0x48>
        name = attr->name;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	699b      	ldr	r3, [r3, #24]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d002      	beq.n	800c31a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	699b      	ldr	r3, [r3, #24]
 800c318:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d008      	beq.n	800c332 <osThreadNew+0x6e>
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	2b38      	cmp	r3, #56	@ 0x38
 800c324:	d805      	bhi.n	800c332 <osThreadNew+0x6e>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	f003 0301 	and.w	r3, r3, #1
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <osThreadNew+0x72>
        return (NULL);
 800c332:	2300      	movs	r3, #0
 800c334:	e054      	b.n	800c3e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	695b      	ldr	r3, [r3, #20]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d003      	beq.n	800c346 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	695b      	ldr	r3, [r3, #20]
 800c342:	089b      	lsrs	r3, r3, #2
 800c344:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00e      	beq.n	800c36c <osThreadNew+0xa8>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	2ba7      	cmp	r3, #167	@ 0xa7
 800c354:	d90a      	bls.n	800c36c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d006      	beq.n	800c36c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d002      	beq.n	800c36c <osThreadNew+0xa8>
        mem = 1;
 800c366:	2301      	movs	r3, #1
 800c368:	61bb      	str	r3, [r7, #24]
 800c36a:	e010      	b.n	800c38e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10c      	bne.n	800c38e <osThreadNew+0xca>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d108      	bne.n	800c38e <osThreadNew+0xca>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d104      	bne.n	800c38e <osThreadNew+0xca>
          mem = 0;
 800c384:	2300      	movs	r3, #0
 800c386:	61bb      	str	r3, [r7, #24]
 800c388:	e001      	b.n	800c38e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d110      	bne.n	800c3b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c39c:	9202      	str	r2, [sp, #8]
 800c39e:	9301      	str	r3, [sp, #4]
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	6a3a      	ldr	r2, [r7, #32]
 800c3a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f000 fe1a 	bl	800cfe4 <xTaskCreateStatic>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	613b      	str	r3, [r7, #16]
 800c3b4:	e013      	b.n	800c3de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d110      	bne.n	800c3de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c3bc:	6a3b      	ldr	r3, [r7, #32]
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	f107 0310 	add.w	r3, r7, #16
 800c3c4:	9301      	str	r3, [sp, #4]
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f000 fe68 	bl	800d0a4 <xTaskCreate>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d001      	beq.n	800c3de <osThreadNew+0x11a>
            hTask = NULL;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c3de:	693b      	ldr	r3, [r7, #16]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3728      	adds	r7, #40	@ 0x28
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3f0:	f3ef 8305 	mrs	r3, IPSR
 800c3f4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c3f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d003      	beq.n	800c404 <osDelay+0x1c>
    stat = osErrorISR;
 800c3fc:	f06f 0305 	mvn.w	r3, #5
 800c400:	60fb      	str	r3, [r7, #12]
 800c402:	e007      	b.n	800c414 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c404:	2300      	movs	r3, #0
 800c406:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d002      	beq.n	800c414 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 ffa6 	bl	800d360 <vTaskDelay>
    }
  }

  return (stat);
 800c414:	68fb      	ldr	r3, [r7, #12]
}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
	...

0800c420 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	4a07      	ldr	r2, [pc, #28]	@ (800c44c <vApplicationGetIdleTaskMemory+0x2c>)
 800c430:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	4a06      	ldr	r2, [pc, #24]	@ (800c450 <vApplicationGetIdleTaskMemory+0x30>)
 800c436:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2280      	movs	r2, #128	@ 0x80
 800c43c:	601a      	str	r2, [r3, #0]
}
 800c43e:	bf00      	nop
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	20000830 	.word	0x20000830
 800c450:	200008d8 	.word	0x200008d8

0800c454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4a07      	ldr	r2, [pc, #28]	@ (800c480 <vApplicationGetTimerTaskMemory+0x2c>)
 800c464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	4a06      	ldr	r2, [pc, #24]	@ (800c484 <vApplicationGetTimerTaskMemory+0x30>)
 800c46a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c472:	601a      	str	r2, [r3, #0]
}
 800c474:	bf00      	nop
 800c476:	3714      	adds	r7, #20
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr
 800c480:	20000ad8 	.word	0x20000ad8
 800c484:	20000b80 	.word	0x20000b80

0800c488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f103 0208 	add.w	r2, r3, #8
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f04f 32ff 	mov.w	r2, #4294967295
 800c4a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f103 0208 	add.w	r2, r3, #8
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f103 0208 	add.w	r2, r3, #8
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c4d6:	bf00      	nop
 800c4d8:	370c      	adds	r7, #12
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr

0800c4e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4e2:	b480      	push	{r7}
 800c4e4:	b085      	sub	sp, #20
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	689a      	ldr	r2, [r3, #8]
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	683a      	ldr	r2, [r7, #0]
 800c506:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	1c5a      	adds	r2, r3, #1
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	601a      	str	r2, [r3, #0]
}
 800c51e:	bf00      	nop
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr

0800c52a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c52a:	b480      	push	{r7}
 800c52c:	b085      	sub	sp, #20
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
 800c532:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c540:	d103      	bne.n	800c54a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	60fb      	str	r3, [r7, #12]
 800c548:	e00c      	b.n	800c564 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	3308      	adds	r3, #8
 800c54e:	60fb      	str	r3, [r7, #12]
 800c550:	e002      	b.n	800c558 <vListInsert+0x2e>
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	60fb      	str	r3, [r7, #12]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	429a      	cmp	r2, r3
 800c562:	d2f6      	bcs.n	800c552 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	685a      	ldr	r2, [r3, #4]
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	683a      	ldr	r2, [r7, #0]
 800c572:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	68fa      	ldr	r2, [r7, #12]
 800c578:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	1c5a      	adds	r2, r3, #1
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	601a      	str	r2, [r3, #0]
}
 800c590:	bf00      	nop
 800c592:	3714      	adds	r7, #20
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	6892      	ldr	r2, [r2, #8]
 800c5b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	6852      	ldr	r2, [r2, #4]
 800c5bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d103      	bne.n	800c5d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	689a      	ldr	r2, [r3, #8]
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	1e5a      	subs	r2, r3, #1
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3714      	adds	r7, #20
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10b      	bne.n	800c61c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c608:	f383 8811 	msr	BASEPRI, r3
 800c60c:	f3bf 8f6f 	isb	sy
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c616:	bf00      	nop
 800c618:	bf00      	nop
 800c61a:	e7fd      	b.n	800c618 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c61c:	f002 f8a4 	bl	800e768 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c628:	68f9      	ldr	r1, [r7, #12]
 800c62a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c62c:	fb01 f303 	mul.w	r3, r1, r3
 800c630:	441a      	add	r2, r3
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c64c:	3b01      	subs	r3, #1
 800c64e:	68f9      	ldr	r1, [r7, #12]
 800c650:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c652:	fb01 f303 	mul.w	r3, r1, r3
 800c656:	441a      	add	r2, r3
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	22ff      	movs	r2, #255	@ 0xff
 800c660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	22ff      	movs	r2, #255	@ 0xff
 800c668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d114      	bne.n	800c69c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d01a      	beq.n	800c6b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	3310      	adds	r3, #16
 800c67e:	4618      	mov	r0, r3
 800c680:	f001 f942 	bl	800d908 <xTaskRemoveFromEventList>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d012      	beq.n	800c6b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c68a:	4b0d      	ldr	r3, [pc, #52]	@ (800c6c0 <xQueueGenericReset+0xd0>)
 800c68c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c690:	601a      	str	r2, [r3, #0]
 800c692:	f3bf 8f4f 	dsb	sy
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	e009      	b.n	800c6b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	3310      	adds	r3, #16
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7ff fef1 	bl	800c488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	3324      	adds	r3, #36	@ 0x24
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7ff feec 	bl	800c488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c6b0:	f002 f88c 	bl	800e7cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c6b4:	2301      	movs	r3, #1
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	e000ed04 	.word	0xe000ed04

0800c6c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b08e      	sub	sp, #56	@ 0x38
 800c6c8:	af02      	add	r7, sp, #8
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	607a      	str	r2, [r7, #4]
 800c6d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10b      	bne.n	800c6f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6dc:	f383 8811 	msr	BASEPRI, r3
 800c6e0:	f3bf 8f6f 	isb	sy
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c6ea:	bf00      	nop
 800c6ec:	bf00      	nop
 800c6ee:	e7fd      	b.n	800c6ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d10b      	bne.n	800c70e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c708:	bf00      	nop
 800c70a:	bf00      	nop
 800c70c:	e7fd      	b.n	800c70a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d002      	beq.n	800c71a <xQueueGenericCreateStatic+0x56>
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d001      	beq.n	800c71e <xQueueGenericCreateStatic+0x5a>
 800c71a:	2301      	movs	r3, #1
 800c71c:	e000      	b.n	800c720 <xQueueGenericCreateStatic+0x5c>
 800c71e:	2300      	movs	r3, #0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10b      	bne.n	800c73c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c728:	f383 8811 	msr	BASEPRI, r3
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	623b      	str	r3, [r7, #32]
}
 800c736:	bf00      	nop
 800c738:	bf00      	nop
 800c73a:	e7fd      	b.n	800c738 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d102      	bne.n	800c748 <xQueueGenericCreateStatic+0x84>
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d101      	bne.n	800c74c <xQueueGenericCreateStatic+0x88>
 800c748:	2301      	movs	r3, #1
 800c74a:	e000      	b.n	800c74e <xQueueGenericCreateStatic+0x8a>
 800c74c:	2300      	movs	r3, #0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10b      	bne.n	800c76a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	61fb      	str	r3, [r7, #28]
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop
 800c768:	e7fd      	b.n	800c766 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c76a:	2350      	movs	r3, #80	@ 0x50
 800c76c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	2b50      	cmp	r3, #80	@ 0x50
 800c772:	d00b      	beq.n	800c78c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c778:	f383 8811 	msr	BASEPRI, r3
 800c77c:	f3bf 8f6f 	isb	sy
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	61bb      	str	r3, [r7, #24]
}
 800c786:	bf00      	nop
 800c788:	bf00      	nop
 800c78a:	e7fd      	b.n	800c788 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c78c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c794:	2b00      	cmp	r3, #0
 800c796:	d00d      	beq.n	800c7b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c7a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	68b9      	ldr	r1, [r7, #8]
 800c7ae:	68f8      	ldr	r0, [r7, #12]
 800c7b0:	f000 f805 	bl	800c7be <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3730      	adds	r7, #48	@ 0x30
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b084      	sub	sp, #16
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	60f8      	str	r0, [r7, #12]
 800c7c6:	60b9      	str	r1, [r7, #8]
 800c7c8:	607a      	str	r2, [r7, #4]
 800c7ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d103      	bne.n	800c7da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	69ba      	ldr	r2, [r7, #24]
 800c7d6:	601a      	str	r2, [r3, #0]
 800c7d8:	e002      	b.n	800c7e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c7e6:	69bb      	ldr	r3, [r7, #24]
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c7ec:	2101      	movs	r1, #1
 800c7ee:	69b8      	ldr	r0, [r7, #24]
 800c7f0:	f7ff fefe 	bl	800c5f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c7f4:	69bb      	ldr	r3, [r7, #24]
 800c7f6:	78fa      	ldrb	r2, [r7, #3]
 800c7f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c7fc:	bf00      	nop
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b08e      	sub	sp, #56	@ 0x38
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
 800c810:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c812:	2300      	movs	r3, #0
 800c814:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10b      	bne.n	800c838 <xQueueGenericSend+0x34>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c832:	bf00      	nop
 800c834:	bf00      	nop
 800c836:	e7fd      	b.n	800c834 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d103      	bne.n	800c846 <xQueueGenericSend+0x42>
 800c83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c842:	2b00      	cmp	r3, #0
 800c844:	d101      	bne.n	800c84a <xQueueGenericSend+0x46>
 800c846:	2301      	movs	r3, #1
 800c848:	e000      	b.n	800c84c <xQueueGenericSend+0x48>
 800c84a:	2300      	movs	r3, #0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10b      	bne.n	800c868 <xQueueGenericSend+0x64>
	__asm volatile
 800c850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c862:	bf00      	nop
 800c864:	bf00      	nop
 800c866:	e7fd      	b.n	800c864 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	d103      	bne.n	800c876 <xQueueGenericSend+0x72>
 800c86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c872:	2b01      	cmp	r3, #1
 800c874:	d101      	bne.n	800c87a <xQueueGenericSend+0x76>
 800c876:	2301      	movs	r3, #1
 800c878:	e000      	b.n	800c87c <xQueueGenericSend+0x78>
 800c87a:	2300      	movs	r3, #0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10b      	bne.n	800c898 <xQueueGenericSend+0x94>
	__asm volatile
 800c880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	623b      	str	r3, [r7, #32]
}
 800c892:	bf00      	nop
 800c894:	bf00      	nop
 800c896:	e7fd      	b.n	800c894 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c898:	f001 f9fc 	bl	800dc94 <xTaskGetSchedulerState>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d102      	bne.n	800c8a8 <xQueueGenericSend+0xa4>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d101      	bne.n	800c8ac <xQueueGenericSend+0xa8>
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	e000      	b.n	800c8ae <xQueueGenericSend+0xaa>
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10b      	bne.n	800c8ca <xQueueGenericSend+0xc6>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	61fb      	str	r3, [r7, #28]
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop
 800c8c8:	e7fd      	b.n	800c8c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8ca:	f001 ff4d 	bl	800e768 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d302      	bcc.n	800c8e0 <xQueueGenericSend+0xdc>
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d129      	bne.n	800c934 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8e0:	683a      	ldr	r2, [r7, #0]
 800c8e2:	68b9      	ldr	r1, [r7, #8]
 800c8e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8e6:	f000 fa0f 	bl	800cd08 <prvCopyDataToQueue>
 800c8ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d010      	beq.n	800c916 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f6:	3324      	adds	r3, #36	@ 0x24
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f001 f805 	bl	800d908 <xTaskRemoveFromEventList>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d013      	beq.n	800c92c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c904:	4b3f      	ldr	r3, [pc, #252]	@ (800ca04 <xQueueGenericSend+0x200>)
 800c906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	e00a      	b.n	800c92c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d007      	beq.n	800c92c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c91c:	4b39      	ldr	r3, [pc, #228]	@ (800ca04 <xQueueGenericSend+0x200>)
 800c91e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c922:	601a      	str	r2, [r3, #0]
 800c924:	f3bf 8f4f 	dsb	sy
 800c928:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c92c:	f001 ff4e 	bl	800e7cc <vPortExitCritical>
				return pdPASS;
 800c930:	2301      	movs	r3, #1
 800c932:	e063      	b.n	800c9fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d103      	bne.n	800c942 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c93a:	f001 ff47 	bl	800e7cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c93e:	2300      	movs	r3, #0
 800c940:	e05c      	b.n	800c9fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c944:	2b00      	cmp	r3, #0
 800c946:	d106      	bne.n	800c956 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c948:	f107 0314 	add.w	r3, r7, #20
 800c94c:	4618      	mov	r0, r3
 800c94e:	f001 f83f 	bl	800d9d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c952:	2301      	movs	r3, #1
 800c954:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c956:	f001 ff39 	bl	800e7cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c95a:	f000 fda7 	bl	800d4ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c95e:	f001 ff03 	bl	800e768 <vPortEnterCritical>
 800c962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c964:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c968:	b25b      	sxtb	r3, r3
 800c96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c96e:	d103      	bne.n	800c978 <xQueueGenericSend+0x174>
 800c970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c972:	2200      	movs	r2, #0
 800c974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c97a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c97e:	b25b      	sxtb	r3, r3
 800c980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c984:	d103      	bne.n	800c98e <xQueueGenericSend+0x18a>
 800c986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c988:	2200      	movs	r2, #0
 800c98a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c98e:	f001 ff1d 	bl	800e7cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c992:	1d3a      	adds	r2, r7, #4
 800c994:	f107 0314 	add.w	r3, r7, #20
 800c998:	4611      	mov	r1, r2
 800c99a:	4618      	mov	r0, r3
 800c99c:	f001 f82e 	bl	800d9fc <xTaskCheckForTimeOut>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d124      	bne.n	800c9f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c9a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c9a8:	f000 faa6 	bl	800cef8 <prvIsQueueFull>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d018      	beq.n	800c9e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b4:	3310      	adds	r3, #16
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	4611      	mov	r1, r2
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 ff52 	bl	800d864 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c9c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c9c2:	f000 fa31 	bl	800ce28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c9c6:	f000 fd7f 	bl	800d4c8 <xTaskResumeAll>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f47f af7c 	bne.w	800c8ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c9d2:	4b0c      	ldr	r3, [pc, #48]	@ (800ca04 <xQueueGenericSend+0x200>)
 800c9d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	e772      	b.n	800c8ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c9e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c9e6:	f000 fa1f 	bl	800ce28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c9ea:	f000 fd6d 	bl	800d4c8 <xTaskResumeAll>
 800c9ee:	e76c      	b.n	800c8ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c9f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c9f2:	f000 fa19 	bl	800ce28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c9f6:	f000 fd67 	bl	800d4c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c9fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3738      	adds	r7, #56	@ 0x38
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	e000ed04 	.word	0xe000ed04

0800ca08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b090      	sub	sp, #64	@ 0x40
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
 800ca14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10b      	bne.n	800ca38 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ca20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca24:	f383 8811 	msr	BASEPRI, r3
 800ca28:	f3bf 8f6f 	isb	sy
 800ca2c:	f3bf 8f4f 	dsb	sy
 800ca30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ca32:	bf00      	nop
 800ca34:	bf00      	nop
 800ca36:	e7fd      	b.n	800ca34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d103      	bne.n	800ca46 <xQueueGenericSendFromISR+0x3e>
 800ca3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <xQueueGenericSendFromISR+0x42>
 800ca46:	2301      	movs	r3, #1
 800ca48:	e000      	b.n	800ca4c <xQueueGenericSendFromISR+0x44>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10b      	bne.n	800ca68 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ca62:	bf00      	nop
 800ca64:	bf00      	nop
 800ca66:	e7fd      	b.n	800ca64 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d103      	bne.n	800ca76 <xQueueGenericSendFromISR+0x6e>
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d101      	bne.n	800ca7a <xQueueGenericSendFromISR+0x72>
 800ca76:	2301      	movs	r3, #1
 800ca78:	e000      	b.n	800ca7c <xQueueGenericSendFromISR+0x74>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10b      	bne.n	800ca98 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ca80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	623b      	str	r3, [r7, #32]
}
 800ca92:	bf00      	nop
 800ca94:	bf00      	nop
 800ca96:	e7fd      	b.n	800ca94 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca98:	f001 ff46 	bl	800e928 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ca9c:	f3ef 8211 	mrs	r2, BASEPRI
 800caa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	f3bf 8f6f 	isb	sy
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	61fa      	str	r2, [r7, #28]
 800cab2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cab4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cab6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cabe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d302      	bcc.n	800caca <xQueueGenericSendFromISR+0xc2>
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d12f      	bne.n	800cb2a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800caca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cacc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cad0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cada:	683a      	ldr	r2, [r7, #0]
 800cadc:	68b9      	ldr	r1, [r7, #8]
 800cade:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cae0:	f000 f912 	bl	800cd08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cae4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caec:	d112      	bne.n	800cb14 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d016      	beq.n	800cb24 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800caf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf8:	3324      	adds	r3, #36	@ 0x24
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 ff04 	bl	800d908 <xTaskRemoveFromEventList>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d00e      	beq.n	800cb24 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00b      	beq.n	800cb24 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	601a      	str	r2, [r3, #0]
 800cb12:	e007      	b.n	800cb24 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cb18:	3301      	adds	r3, #1
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	b25a      	sxtb	r2, r3
 800cb1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cb24:	2301      	movs	r3, #1
 800cb26:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cb28:	e001      	b.n	800cb2e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb30:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cb38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3740      	adds	r7, #64	@ 0x40
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b08c      	sub	sp, #48	@ 0x30
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb50:	2300      	movs	r3, #0
 800cb52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d10b      	bne.n	800cb76 <xQueueReceive+0x32>
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	623b      	str	r3, [r7, #32]
}
 800cb70:	bf00      	nop
 800cb72:	bf00      	nop
 800cb74:	e7fd      	b.n	800cb72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d103      	bne.n	800cb84 <xQueueReceive+0x40>
 800cb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <xQueueReceive+0x44>
 800cb84:	2301      	movs	r3, #1
 800cb86:	e000      	b.n	800cb8a <xQueueReceive+0x46>
 800cb88:	2300      	movs	r3, #0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10b      	bne.n	800cba6 <xQueueReceive+0x62>
	__asm volatile
 800cb8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb92:	f383 8811 	msr	BASEPRI, r3
 800cb96:	f3bf 8f6f 	isb	sy
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	61fb      	str	r3, [r7, #28]
}
 800cba0:	bf00      	nop
 800cba2:	bf00      	nop
 800cba4:	e7fd      	b.n	800cba2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cba6:	f001 f875 	bl	800dc94 <xTaskGetSchedulerState>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d102      	bne.n	800cbb6 <xQueueReceive+0x72>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d101      	bne.n	800cbba <xQueueReceive+0x76>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e000      	b.n	800cbbc <xQueueReceive+0x78>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d10b      	bne.n	800cbd8 <xQueueReceive+0x94>
	__asm volatile
 800cbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc4:	f383 8811 	msr	BASEPRI, r3
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	61bb      	str	r3, [r7, #24]
}
 800cbd2:	bf00      	nop
 800cbd4:	bf00      	nop
 800cbd6:	e7fd      	b.n	800cbd4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbd8:	f001 fdc6 	bl	800e768 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbe0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d01f      	beq.n	800cc28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cbe8:	68b9      	ldr	r1, [r7, #8]
 800cbea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbec:	f000 f8f6 	bl	800cddc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf2:	1e5a      	subs	r2, r3, #1
 800cbf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00f      	beq.n	800cc20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc02:	3310      	adds	r3, #16
 800cc04:	4618      	mov	r0, r3
 800cc06:	f000 fe7f 	bl	800d908 <xTaskRemoveFromEventList>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d007      	beq.n	800cc20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc10:	4b3c      	ldr	r3, [pc, #240]	@ (800cd04 <xQueueReceive+0x1c0>)
 800cc12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc20:	f001 fdd4 	bl	800e7cc <vPortExitCritical>
				return pdPASS;
 800cc24:	2301      	movs	r3, #1
 800cc26:	e069      	b.n	800ccfc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d103      	bne.n	800cc36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc2e:	f001 fdcd 	bl	800e7cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc32:	2300      	movs	r3, #0
 800cc34:	e062      	b.n	800ccfc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d106      	bne.n	800cc4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc3c:	f107 0310 	add.w	r3, r7, #16
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 fec5 	bl	800d9d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc46:	2301      	movs	r3, #1
 800cc48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc4a:	f001 fdbf 	bl	800e7cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc4e:	f000 fc2d 	bl	800d4ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc52:	f001 fd89 	bl	800e768 <vPortEnterCritical>
 800cc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc5c:	b25b      	sxtb	r3, r3
 800cc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc62:	d103      	bne.n	800cc6c <xQueueReceive+0x128>
 800cc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc72:	b25b      	sxtb	r3, r3
 800cc74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc78:	d103      	bne.n	800cc82 <xQueueReceive+0x13e>
 800cc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc82:	f001 fda3 	bl	800e7cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc86:	1d3a      	adds	r2, r7, #4
 800cc88:	f107 0310 	add.w	r3, r7, #16
 800cc8c:	4611      	mov	r1, r2
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 feb4 	bl	800d9fc <xTaskCheckForTimeOut>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d123      	bne.n	800cce2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc9c:	f000 f916 	bl	800cecc <prvIsQueueEmpty>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d017      	beq.n	800ccd6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca8:	3324      	adds	r3, #36	@ 0x24
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	4611      	mov	r1, r2
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f000 fdd8 	bl	800d864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ccb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccb6:	f000 f8b7 	bl	800ce28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ccba:	f000 fc05 	bl	800d4c8 <xTaskResumeAll>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d189      	bne.n	800cbd8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ccc4:	4b0f      	ldr	r3, [pc, #60]	@ (800cd04 <xQueueReceive+0x1c0>)
 800ccc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccca:	601a      	str	r2, [r3, #0]
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	f3bf 8f6f 	isb	sy
 800ccd4:	e780      	b.n	800cbd8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ccd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccd8:	f000 f8a6 	bl	800ce28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccdc:	f000 fbf4 	bl	800d4c8 <xTaskResumeAll>
 800cce0:	e77a      	b.n	800cbd8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cce4:	f000 f8a0 	bl	800ce28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cce8:	f000 fbee 	bl	800d4c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccee:	f000 f8ed 	bl	800cecc <prvIsQueueEmpty>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f43f af6f 	beq.w	800cbd8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ccfa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3730      	adds	r7, #48	@ 0x30
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	e000ed04 	.word	0xe000ed04

0800cd08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cd14:	2300      	movs	r3, #0
 800cd16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d10d      	bne.n	800cd42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d14d      	bne.n	800cdca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	4618      	mov	r0, r3
 800cd34:	f000 ffcc 	bl	800dcd0 <xTaskPriorityDisinherit>
 800cd38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	609a      	str	r2, [r3, #8]
 800cd40:	e043      	b.n	800cdca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d119      	bne.n	800cd7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	6858      	ldr	r0, [r3, #4]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd50:	461a      	mov	r2, r3
 800cd52:	68b9      	ldr	r1, [r7, #8]
 800cd54:	f003 fcbb 	bl	80106ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd60:	441a      	add	r2, r3
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	685a      	ldr	r2, [r3, #4]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d32b      	bcc.n	800cdca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	605a      	str	r2, [r3, #4]
 800cd7a:	e026      	b.n	800cdca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	68d8      	ldr	r0, [r3, #12]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd84:	461a      	mov	r2, r3
 800cd86:	68b9      	ldr	r1, [r7, #8]
 800cd88:	f003 fca1 	bl	80106ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	68da      	ldr	r2, [r3, #12]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd94:	425b      	negs	r3, r3
 800cd96:	441a      	add	r2, r3
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	68da      	ldr	r2, [r3, #12]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d207      	bcs.n	800cdb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	689a      	ldr	r2, [r3, #8]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdb0:	425b      	negs	r3, r3
 800cdb2:	441a      	add	r2, r3
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b02      	cmp	r3, #2
 800cdbc:	d105      	bne.n	800cdca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	1c5a      	adds	r2, r3, #1
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cdd2:	697b      	ldr	r3, [r7, #20]
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3718      	adds	r7, #24
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d018      	beq.n	800ce20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	68da      	ldr	r2, [r3, #12]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdf6:	441a      	add	r2, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	68da      	ldr	r2, [r3, #12]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d303      	bcc.n	800ce10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	68d9      	ldr	r1, [r3, #12]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce18:	461a      	mov	r2, r3
 800ce1a:	6838      	ldr	r0, [r7, #0]
 800ce1c:	f003 fc57 	bl	80106ce <memcpy>
	}
}
 800ce20:	bf00      	nop
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ce30:	f001 fc9a 	bl	800e768 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce3c:	e011      	b.n	800ce62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d012      	beq.n	800ce6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	3324      	adds	r3, #36	@ 0x24
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f000 fd5c 	bl	800d908 <xTaskRemoveFromEventList>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d001      	beq.n	800ce5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ce56:	f000 fe35 	bl	800dac4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ce5a:	7bfb      	ldrb	r3, [r7, #15]
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	dce9      	bgt.n	800ce3e <prvUnlockQueue+0x16>
 800ce6a:	e000      	b.n	800ce6e <prvUnlockQueue+0x46>
					break;
 800ce6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	22ff      	movs	r2, #255	@ 0xff
 800ce72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ce76:	f001 fca9 	bl	800e7cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ce7a:	f001 fc75 	bl	800e768 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce86:	e011      	b.n	800ceac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	691b      	ldr	r3, [r3, #16]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d012      	beq.n	800ceb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	3310      	adds	r3, #16
 800ce94:	4618      	mov	r0, r3
 800ce96:	f000 fd37 	bl	800d908 <xTaskRemoveFromEventList>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d001      	beq.n	800cea4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cea0:	f000 fe10 	bl	800dac4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cea4:	7bbb      	ldrb	r3, [r7, #14]
 800cea6:	3b01      	subs	r3, #1
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ceac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	dce9      	bgt.n	800ce88 <prvUnlockQueue+0x60>
 800ceb4:	e000      	b.n	800ceb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ceb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	22ff      	movs	r2, #255	@ 0xff
 800cebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cec0:	f001 fc84 	bl	800e7cc <vPortExitCritical>
}
 800cec4:	bf00      	nop
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ced4:	f001 fc48 	bl	800e768 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d102      	bne.n	800cee6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cee0:	2301      	movs	r3, #1
 800cee2:	60fb      	str	r3, [r7, #12]
 800cee4:	e001      	b.n	800ceea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cee6:	2300      	movs	r3, #0
 800cee8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ceea:	f001 fc6f 	bl	800e7cc <vPortExitCritical>

	return xReturn;
 800ceee:	68fb      	ldr	r3, [r7, #12]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf00:	f001 fc32 	bl	800e768 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d102      	bne.n	800cf16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cf10:	2301      	movs	r3, #1
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	e001      	b.n	800cf1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cf16:	2300      	movs	r3, #0
 800cf18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf1a:	f001 fc57 	bl	800e7cc <vPortExitCritical>

	return xReturn;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3710      	adds	r7, #16
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf32:	2300      	movs	r3, #0
 800cf34:	60fb      	str	r3, [r7, #12]
 800cf36:	e014      	b.n	800cf62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cf38:	4a0f      	ldr	r2, [pc, #60]	@ (800cf78 <vQueueAddToRegistry+0x50>)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d10b      	bne.n	800cf5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cf44:	490c      	ldr	r1, [pc, #48]	@ (800cf78 <vQueueAddToRegistry+0x50>)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	683a      	ldr	r2, [r7, #0]
 800cf4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cf4e:	4a0a      	ldr	r2, [pc, #40]	@ (800cf78 <vQueueAddToRegistry+0x50>)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	4413      	add	r3, r2
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cf5a:	e006      	b.n	800cf6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	60fb      	str	r3, [r7, #12]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2b07      	cmp	r3, #7
 800cf66:	d9e7      	bls.n	800cf38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cf68:	bf00      	nop
 800cf6a:	bf00      	nop
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	20000f80 	.word	0x20000f80

0800cf7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b086      	sub	sp, #24
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cf8c:	f001 fbec 	bl	800e768 <vPortEnterCritical>
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf96:	b25b      	sxtb	r3, r3
 800cf98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf9c:	d103      	bne.n	800cfa6 <vQueueWaitForMessageRestricted+0x2a>
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cfac:	b25b      	sxtb	r3, r3
 800cfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb2:	d103      	bne.n	800cfbc <vQueueWaitForMessageRestricted+0x40>
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfbc:	f001 fc06 	bl	800e7cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d106      	bne.n	800cfd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	3324      	adds	r3, #36	@ 0x24
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	68b9      	ldr	r1, [r7, #8]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 fc6d 	bl	800d8b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cfd6:	6978      	ldr	r0, [r7, #20]
 800cfd8:	f7ff ff26 	bl	800ce28 <prvUnlockQueue>
	}
 800cfdc:	bf00      	nop
 800cfde:	3718      	adds	r7, #24
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b08e      	sub	sp, #56	@ 0x38
 800cfe8:	af04      	add	r7, sp, #16
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
 800cff0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10b      	bne.n	800d010 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	623b      	str	r3, [r7, #32]
}
 800d00a:	bf00      	nop
 800d00c:	bf00      	nop
 800d00e:	e7fd      	b.n	800d00c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10b      	bne.n	800d02e <xTaskCreateStatic+0x4a>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	61fb      	str	r3, [r7, #28]
}
 800d028:	bf00      	nop
 800d02a:	bf00      	nop
 800d02c:	e7fd      	b.n	800d02a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d02e:	23a8      	movs	r3, #168	@ 0xa8
 800d030:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	2ba8      	cmp	r3, #168	@ 0xa8
 800d036:	d00b      	beq.n	800d050 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d03c:	f383 8811 	msr	BASEPRI, r3
 800d040:	f3bf 8f6f 	isb	sy
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	61bb      	str	r3, [r7, #24]
}
 800d04a:	bf00      	nop
 800d04c:	bf00      	nop
 800d04e:	e7fd      	b.n	800d04c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d050:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d054:	2b00      	cmp	r3, #0
 800d056:	d01e      	beq.n	800d096 <xTaskCreateStatic+0xb2>
 800d058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d01b      	beq.n	800d096 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d060:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d066:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06a:	2202      	movs	r2, #2
 800d06c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d070:	2300      	movs	r3, #0
 800d072:	9303      	str	r3, [sp, #12]
 800d074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d076:	9302      	str	r3, [sp, #8]
 800d078:	f107 0314 	add.w	r3, r7, #20
 800d07c:	9301      	str	r3, [sp, #4]
 800d07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d080:	9300      	str	r3, [sp, #0]
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	68b9      	ldr	r1, [r7, #8]
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f000 f851 	bl	800d130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d08e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d090:	f000 f8f6 	bl	800d280 <prvAddNewTaskToReadyList>
 800d094:	e001      	b.n	800d09a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d096:	2300      	movs	r3, #0
 800d098:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d09a:	697b      	ldr	r3, [r7, #20]
	}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3728      	adds	r7, #40	@ 0x28
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b08c      	sub	sp, #48	@ 0x30
 800d0a8:	af04      	add	r7, sp, #16
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	603b      	str	r3, [r7, #0]
 800d0b0:	4613      	mov	r3, r2
 800d0b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d0b4:	88fb      	ldrh	r3, [r7, #6]
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f001 fc77 	bl	800e9ac <pvPortMalloc>
 800d0be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00e      	beq.n	800d0e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d0c6:	20a8      	movs	r0, #168	@ 0xa8
 800d0c8:	f001 fc70 	bl	800e9ac <pvPortMalloc>
 800d0cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d003      	beq.n	800d0dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	697a      	ldr	r2, [r7, #20]
 800d0d8:	631a      	str	r2, [r3, #48]	@ 0x30
 800d0da:	e005      	b.n	800d0e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d0dc:	6978      	ldr	r0, [r7, #20]
 800d0de:	f001 fd33 	bl	800eb48 <vPortFree>
 800d0e2:	e001      	b.n	800d0e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d017      	beq.n	800d11e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d0f6:	88fa      	ldrh	r2, [r7, #6]
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	9303      	str	r3, [sp, #12]
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	9302      	str	r3, [sp, #8]
 800d100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	68b9      	ldr	r1, [r7, #8]
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f000 f80f 	bl	800d130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d112:	69f8      	ldr	r0, [r7, #28]
 800d114:	f000 f8b4 	bl	800d280 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d118:	2301      	movs	r3, #1
 800d11a:	61bb      	str	r3, [r7, #24]
 800d11c:	e002      	b.n	800d124 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d11e:	f04f 33ff 	mov.w	r3, #4294967295
 800d122:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d124:	69bb      	ldr	r3, [r7, #24]
	}
 800d126:	4618      	mov	r0, r3
 800d128:	3720      	adds	r7, #32
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
	...

0800d130 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b088      	sub	sp, #32
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
 800d13c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d140:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	009b      	lsls	r3, r3, #2
 800d146:	461a      	mov	r2, r3
 800d148:	21a5      	movs	r1, #165	@ 0xa5
 800d14a:	f003 f9ea 	bl	8010522 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d150:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d158:	3b01      	subs	r3, #1
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	4413      	add	r3, r2
 800d15e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	f023 0307 	bic.w	r3, r3, #7
 800d166:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	f003 0307 	and.w	r3, r3, #7
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00b      	beq.n	800d18a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d176:	f383 8811 	msr	BASEPRI, r3
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	617b      	str	r3, [r7, #20]
}
 800d184:	bf00      	nop
 800d186:	bf00      	nop
 800d188:	e7fd      	b.n	800d186 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d01f      	beq.n	800d1d0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d190:	2300      	movs	r3, #0
 800d192:	61fb      	str	r3, [r7, #28]
 800d194:	e012      	b.n	800d1bc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	4413      	add	r3, r2
 800d19c:	7819      	ldrb	r1, [r3, #0]
 800d19e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	3334      	adds	r3, #52	@ 0x34
 800d1a6:	460a      	mov	r2, r1
 800d1a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d006      	beq.n	800d1c4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	61fb      	str	r3, [r7, #28]
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	2b0f      	cmp	r3, #15
 800d1c0:	d9e9      	bls.n	800d196 <prvInitialiseNewTask+0x66>
 800d1c2:	e000      	b.n	800d1c6 <prvInitialiseNewTask+0x96>
			{
				break;
 800d1c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d1ce:	e003      	b.n	800d1d8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1da:	2b37      	cmp	r3, #55	@ 0x37
 800d1dc:	d901      	bls.n	800d1e2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d1de:	2337      	movs	r3, #55	@ 0x37
 800d1e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7ff f965 	bl	800c4c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d200:	3318      	adds	r3, #24
 800d202:	4618      	mov	r0, r3
 800d204:	f7ff f960 	bl	800c4c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d20a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d20c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d210:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d216:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d21a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d21c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d220:	2200      	movs	r2, #0
 800d222:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d228:	2200      	movs	r2, #0
 800d22a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d230:	3354      	adds	r3, #84	@ 0x54
 800d232:	224c      	movs	r2, #76	@ 0x4c
 800d234:	2100      	movs	r1, #0
 800d236:	4618      	mov	r0, r3
 800d238:	f003 f973 	bl	8010522 <memset>
 800d23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23e:	4a0d      	ldr	r2, [pc, #52]	@ (800d274 <prvInitialiseNewTask+0x144>)
 800d240:	659a      	str	r2, [r3, #88]	@ 0x58
 800d242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d244:	4a0c      	ldr	r2, [pc, #48]	@ (800d278 <prvInitialiseNewTask+0x148>)
 800d246:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24a:	4a0c      	ldr	r2, [pc, #48]	@ (800d27c <prvInitialiseNewTask+0x14c>)
 800d24c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	68f9      	ldr	r1, [r7, #12]
 800d252:	69b8      	ldr	r0, [r7, #24]
 800d254:	f001 f95a 	bl	800e50c <pxPortInitialiseStack>
 800d258:	4602      	mov	r2, r0
 800d25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d260:	2b00      	cmp	r3, #0
 800d262:	d002      	beq.n	800d26a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d268:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d26a:	bf00      	nop
 800d26c:	3720      	adds	r7, #32
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	2000457c 	.word	0x2000457c
 800d278:	200045e4 	.word	0x200045e4
 800d27c:	2000464c 	.word	0x2000464c

0800d280 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d288:	f001 fa6e 	bl	800e768 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d28c:	4b2d      	ldr	r3, [pc, #180]	@ (800d344 <prvAddNewTaskToReadyList+0xc4>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	3301      	adds	r3, #1
 800d292:	4a2c      	ldr	r2, [pc, #176]	@ (800d344 <prvAddNewTaskToReadyList+0xc4>)
 800d294:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d296:	4b2c      	ldr	r3, [pc, #176]	@ (800d348 <prvAddNewTaskToReadyList+0xc8>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d109      	bne.n	800d2b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d29e:	4a2a      	ldr	r2, [pc, #168]	@ (800d348 <prvAddNewTaskToReadyList+0xc8>)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d2a4:	4b27      	ldr	r3, [pc, #156]	@ (800d344 <prvAddNewTaskToReadyList+0xc4>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d110      	bne.n	800d2ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d2ac:	f000 fc2e 	bl	800db0c <prvInitialiseTaskLists>
 800d2b0:	e00d      	b.n	800d2ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d2b2:	4b26      	ldr	r3, [pc, #152]	@ (800d34c <prvAddNewTaskToReadyList+0xcc>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d109      	bne.n	800d2ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d2ba:	4b23      	ldr	r3, [pc, #140]	@ (800d348 <prvAddNewTaskToReadyList+0xc8>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d802      	bhi.n	800d2ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d2c8:	4a1f      	ldr	r2, [pc, #124]	@ (800d348 <prvAddNewTaskToReadyList+0xc8>)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d2ce:	4b20      	ldr	r3, [pc, #128]	@ (800d350 <prvAddNewTaskToReadyList+0xd0>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	4a1e      	ldr	r2, [pc, #120]	@ (800d350 <prvAddNewTaskToReadyList+0xd0>)
 800d2d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d2d8:	4b1d      	ldr	r3, [pc, #116]	@ (800d350 <prvAddNewTaskToReadyList+0xd0>)
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2e4:	4b1b      	ldr	r3, [pc, #108]	@ (800d354 <prvAddNewTaskToReadyList+0xd4>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d903      	bls.n	800d2f4 <prvAddNewTaskToReadyList+0x74>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2f0:	4a18      	ldr	r2, [pc, #96]	@ (800d354 <prvAddNewTaskToReadyList+0xd4>)
 800d2f2:	6013      	str	r3, [r2, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	4413      	add	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	4a15      	ldr	r2, [pc, #84]	@ (800d358 <prvAddNewTaskToReadyList+0xd8>)
 800d302:	441a      	add	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	3304      	adds	r3, #4
 800d308:	4619      	mov	r1, r3
 800d30a:	4610      	mov	r0, r2
 800d30c:	f7ff f8e9 	bl	800c4e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d310:	f001 fa5c 	bl	800e7cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d314:	4b0d      	ldr	r3, [pc, #52]	@ (800d34c <prvAddNewTaskToReadyList+0xcc>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00e      	beq.n	800d33a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d31c:	4b0a      	ldr	r3, [pc, #40]	@ (800d348 <prvAddNewTaskToReadyList+0xc8>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d326:	429a      	cmp	r2, r3
 800d328:	d207      	bcs.n	800d33a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d32a:	4b0c      	ldr	r3, [pc, #48]	@ (800d35c <prvAddNewTaskToReadyList+0xdc>)
 800d32c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d330:	601a      	str	r2, [r3, #0]
 800d332:	f3bf 8f4f 	dsb	sy
 800d336:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d33a:	bf00      	nop
 800d33c:	3708      	adds	r7, #8
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	20001494 	.word	0x20001494
 800d348:	20000fc0 	.word	0x20000fc0
 800d34c:	200014a0 	.word	0x200014a0
 800d350:	200014b0 	.word	0x200014b0
 800d354:	2000149c 	.word	0x2000149c
 800d358:	20000fc4 	.word	0x20000fc4
 800d35c:	e000ed04 	.word	0xe000ed04

0800d360 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d368:	2300      	movs	r3, #0
 800d36a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d018      	beq.n	800d3a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d372:	4b14      	ldr	r3, [pc, #80]	@ (800d3c4 <vTaskDelay+0x64>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00b      	beq.n	800d392 <vTaskDelay+0x32>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	60bb      	str	r3, [r7, #8]
}
 800d38c:	bf00      	nop
 800d38e:	bf00      	nop
 800d390:	e7fd      	b.n	800d38e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d392:	f000 f88b 	bl	800d4ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d396:	2100      	movs	r1, #0
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 fd09 	bl	800ddb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d39e:	f000 f893 	bl	800d4c8 <xTaskResumeAll>
 800d3a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d107      	bne.n	800d3ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d3aa:	4b07      	ldr	r3, [pc, #28]	@ (800d3c8 <vTaskDelay+0x68>)
 800d3ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3b0:	601a      	str	r2, [r3, #0]
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d3ba:	bf00      	nop
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	200014bc 	.word	0x200014bc
 800d3c8:	e000ed04 	.word	0xe000ed04

0800d3cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b08a      	sub	sp, #40	@ 0x28
 800d3d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d3da:	463a      	mov	r2, r7
 800d3dc:	1d39      	adds	r1, r7, #4
 800d3de:	f107 0308 	add.w	r3, r7, #8
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7ff f81c 	bl	800c420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d3e8:	6839      	ldr	r1, [r7, #0]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	9202      	str	r2, [sp, #8]
 800d3f0:	9301      	str	r3, [sp, #4]
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	460a      	mov	r2, r1
 800d3fa:	4924      	ldr	r1, [pc, #144]	@ (800d48c <vTaskStartScheduler+0xc0>)
 800d3fc:	4824      	ldr	r0, [pc, #144]	@ (800d490 <vTaskStartScheduler+0xc4>)
 800d3fe:	f7ff fdf1 	bl	800cfe4 <xTaskCreateStatic>
 800d402:	4603      	mov	r3, r0
 800d404:	4a23      	ldr	r2, [pc, #140]	@ (800d494 <vTaskStartScheduler+0xc8>)
 800d406:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d408:	4b22      	ldr	r3, [pc, #136]	@ (800d494 <vTaskStartScheduler+0xc8>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d002      	beq.n	800d416 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d410:	2301      	movs	r3, #1
 800d412:	617b      	str	r3, [r7, #20]
 800d414:	e001      	b.n	800d41a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d416:	2300      	movs	r3, #0
 800d418:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d102      	bne.n	800d426 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d420:	f000 fd1a 	bl	800de58 <xTimerCreateTimerTask>
 800d424:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d11b      	bne.n	800d464 <vTaskStartScheduler+0x98>
	__asm volatile
 800d42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d430:	f383 8811 	msr	BASEPRI, r3
 800d434:	f3bf 8f6f 	isb	sy
 800d438:	f3bf 8f4f 	dsb	sy
 800d43c:	613b      	str	r3, [r7, #16]
}
 800d43e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d440:	4b15      	ldr	r3, [pc, #84]	@ (800d498 <vTaskStartScheduler+0xcc>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3354      	adds	r3, #84	@ 0x54
 800d446:	4a15      	ldr	r2, [pc, #84]	@ (800d49c <vTaskStartScheduler+0xd0>)
 800d448:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d44a:	4b15      	ldr	r3, [pc, #84]	@ (800d4a0 <vTaskStartScheduler+0xd4>)
 800d44c:	f04f 32ff 	mov.w	r2, #4294967295
 800d450:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d452:	4b14      	ldr	r3, [pc, #80]	@ (800d4a4 <vTaskStartScheduler+0xd8>)
 800d454:	2201      	movs	r2, #1
 800d456:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d458:	4b13      	ldr	r3, [pc, #76]	@ (800d4a8 <vTaskStartScheduler+0xdc>)
 800d45a:	2200      	movs	r2, #0
 800d45c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d45e:	f001 f8df 	bl	800e620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d462:	e00f      	b.n	800d484 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d46a:	d10b      	bne.n	800d484 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d470:	f383 8811 	msr	BASEPRI, r3
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	60fb      	str	r3, [r7, #12]
}
 800d47e:	bf00      	nop
 800d480:	bf00      	nop
 800d482:	e7fd      	b.n	800d480 <vTaskStartScheduler+0xb4>
}
 800d484:	bf00      	nop
 800d486:	3718      	adds	r7, #24
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	0801248c 	.word	0x0801248c
 800d490:	0800dadd 	.word	0x0800dadd
 800d494:	200014b8 	.word	0x200014b8
 800d498:	20000fc0 	.word	0x20000fc0
 800d49c:	20000124 	.word	0x20000124
 800d4a0:	200014b4 	.word	0x200014b4
 800d4a4:	200014a0 	.word	0x200014a0
 800d4a8:	20001498 	.word	0x20001498

0800d4ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d4b0:	4b04      	ldr	r3, [pc, #16]	@ (800d4c4 <vTaskSuspendAll+0x18>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	4a03      	ldr	r2, [pc, #12]	@ (800d4c4 <vTaskSuspendAll+0x18>)
 800d4b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d4ba:	bf00      	nop
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr
 800d4c4:	200014bc 	.word	0x200014bc

0800d4c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d4d6:	4b42      	ldr	r3, [pc, #264]	@ (800d5e0 <xTaskResumeAll+0x118>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d10b      	bne.n	800d4f6 <xTaskResumeAll+0x2e>
	__asm volatile
 800d4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e2:	f383 8811 	msr	BASEPRI, r3
 800d4e6:	f3bf 8f6f 	isb	sy
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	603b      	str	r3, [r7, #0]
}
 800d4f0:	bf00      	nop
 800d4f2:	bf00      	nop
 800d4f4:	e7fd      	b.n	800d4f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d4f6:	f001 f937 	bl	800e768 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d4fa:	4b39      	ldr	r3, [pc, #228]	@ (800d5e0 <xTaskResumeAll+0x118>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3b01      	subs	r3, #1
 800d500:	4a37      	ldr	r2, [pc, #220]	@ (800d5e0 <xTaskResumeAll+0x118>)
 800d502:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d504:	4b36      	ldr	r3, [pc, #216]	@ (800d5e0 <xTaskResumeAll+0x118>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d162      	bne.n	800d5d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d50c:	4b35      	ldr	r3, [pc, #212]	@ (800d5e4 <xTaskResumeAll+0x11c>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d05e      	beq.n	800d5d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d514:	e02f      	b.n	800d576 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d516:	4b34      	ldr	r3, [pc, #208]	@ (800d5e8 <xTaskResumeAll+0x120>)
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	3318      	adds	r3, #24
 800d522:	4618      	mov	r0, r3
 800d524:	f7ff f83a 	bl	800c59c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	3304      	adds	r3, #4
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff f835 	bl	800c59c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d536:	4b2d      	ldr	r3, [pc, #180]	@ (800d5ec <xTaskResumeAll+0x124>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d903      	bls.n	800d546 <xTaskResumeAll+0x7e>
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d542:	4a2a      	ldr	r2, [pc, #168]	@ (800d5ec <xTaskResumeAll+0x124>)
 800d544:	6013      	str	r3, [r2, #0]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d54a:	4613      	mov	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	4413      	add	r3, r2
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	4a27      	ldr	r2, [pc, #156]	@ (800d5f0 <xTaskResumeAll+0x128>)
 800d554:	441a      	add	r2, r3
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	3304      	adds	r3, #4
 800d55a:	4619      	mov	r1, r3
 800d55c:	4610      	mov	r0, r2
 800d55e:	f7fe ffc0 	bl	800c4e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d566:	4b23      	ldr	r3, [pc, #140]	@ (800d5f4 <xTaskResumeAll+0x12c>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d302      	bcc.n	800d576 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d570:	4b21      	ldr	r3, [pc, #132]	@ (800d5f8 <xTaskResumeAll+0x130>)
 800d572:	2201      	movs	r2, #1
 800d574:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d576:	4b1c      	ldr	r3, [pc, #112]	@ (800d5e8 <xTaskResumeAll+0x120>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d1cb      	bne.n	800d516 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d001      	beq.n	800d588 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d584:	f000 fb66 	bl	800dc54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d588:	4b1c      	ldr	r3, [pc, #112]	@ (800d5fc <xTaskResumeAll+0x134>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d010      	beq.n	800d5b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d594:	f000 f846 	bl	800d624 <xTaskIncrementTick>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d002      	beq.n	800d5a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d59e:	4b16      	ldr	r3, [pc, #88]	@ (800d5f8 <xTaskResumeAll+0x130>)
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1f1      	bne.n	800d594 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d5b0:	4b12      	ldr	r3, [pc, #72]	@ (800d5fc <xTaskResumeAll+0x134>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d5b6:	4b10      	ldr	r3, [pc, #64]	@ (800d5f8 <xTaskResumeAll+0x130>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d009      	beq.n	800d5d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d5c2:	4b0f      	ldr	r3, [pc, #60]	@ (800d600 <xTaskResumeAll+0x138>)
 800d5c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5c8:	601a      	str	r2, [r3, #0]
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d5d2:	f001 f8fb 	bl	800e7cc <vPortExitCritical>

	return xAlreadyYielded;
 800d5d6:	68bb      	ldr	r3, [r7, #8]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	200014bc 	.word	0x200014bc
 800d5e4:	20001494 	.word	0x20001494
 800d5e8:	20001454 	.word	0x20001454
 800d5ec:	2000149c 	.word	0x2000149c
 800d5f0:	20000fc4 	.word	0x20000fc4
 800d5f4:	20000fc0 	.word	0x20000fc0
 800d5f8:	200014a8 	.word	0x200014a8
 800d5fc:	200014a4 	.word	0x200014a4
 800d600:	e000ed04 	.word	0xe000ed04

0800d604 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d60a:	4b05      	ldr	r3, [pc, #20]	@ (800d620 <xTaskGetTickCount+0x1c>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d610:	687b      	ldr	r3, [r7, #4]
}
 800d612:	4618      	mov	r0, r3
 800d614:	370c      	adds	r7, #12
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	20001498 	.word	0x20001498

0800d624 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b086      	sub	sp, #24
 800d628:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d62a:	2300      	movs	r3, #0
 800d62c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d62e:	4b4f      	ldr	r3, [pc, #316]	@ (800d76c <xTaskIncrementTick+0x148>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	f040 8090 	bne.w	800d758 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d638:	4b4d      	ldr	r3, [pc, #308]	@ (800d770 <xTaskIncrementTick+0x14c>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3301      	adds	r3, #1
 800d63e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d640:	4a4b      	ldr	r2, [pc, #300]	@ (800d770 <xTaskIncrementTick+0x14c>)
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d121      	bne.n	800d690 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d64c:	4b49      	ldr	r3, [pc, #292]	@ (800d774 <xTaskIncrementTick+0x150>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00b      	beq.n	800d66e <xTaskIncrementTick+0x4a>
	__asm volatile
 800d656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d65a:	f383 8811 	msr	BASEPRI, r3
 800d65e:	f3bf 8f6f 	isb	sy
 800d662:	f3bf 8f4f 	dsb	sy
 800d666:	603b      	str	r3, [r7, #0]
}
 800d668:	bf00      	nop
 800d66a:	bf00      	nop
 800d66c:	e7fd      	b.n	800d66a <xTaskIncrementTick+0x46>
 800d66e:	4b41      	ldr	r3, [pc, #260]	@ (800d774 <xTaskIncrementTick+0x150>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	60fb      	str	r3, [r7, #12]
 800d674:	4b40      	ldr	r3, [pc, #256]	@ (800d778 <xTaskIncrementTick+0x154>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a3e      	ldr	r2, [pc, #248]	@ (800d774 <xTaskIncrementTick+0x150>)
 800d67a:	6013      	str	r3, [r2, #0]
 800d67c:	4a3e      	ldr	r2, [pc, #248]	@ (800d778 <xTaskIncrementTick+0x154>)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6013      	str	r3, [r2, #0]
 800d682:	4b3e      	ldr	r3, [pc, #248]	@ (800d77c <xTaskIncrementTick+0x158>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	3301      	adds	r3, #1
 800d688:	4a3c      	ldr	r2, [pc, #240]	@ (800d77c <xTaskIncrementTick+0x158>)
 800d68a:	6013      	str	r3, [r2, #0]
 800d68c:	f000 fae2 	bl	800dc54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d690:	4b3b      	ldr	r3, [pc, #236]	@ (800d780 <xTaskIncrementTick+0x15c>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	693a      	ldr	r2, [r7, #16]
 800d696:	429a      	cmp	r2, r3
 800d698:	d349      	bcc.n	800d72e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d69a:	4b36      	ldr	r3, [pc, #216]	@ (800d774 <xTaskIncrementTick+0x150>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d104      	bne.n	800d6ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6a4:	4b36      	ldr	r3, [pc, #216]	@ (800d780 <xTaskIncrementTick+0x15c>)
 800d6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6aa:	601a      	str	r2, [r3, #0]
					break;
 800d6ac:	e03f      	b.n	800d72e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ae:	4b31      	ldr	r3, [pc, #196]	@ (800d774 <xTaskIncrementTick+0x150>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d6be:	693a      	ldr	r2, [r7, #16]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d203      	bcs.n	800d6ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d6c6:	4a2e      	ldr	r2, [pc, #184]	@ (800d780 <xTaskIncrementTick+0x15c>)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d6cc:	e02f      	b.n	800d72e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7fe ff62 	bl	800c59c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d004      	beq.n	800d6ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	3318      	adds	r3, #24
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7fe ff59 	bl	800c59c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6ee:	4b25      	ldr	r3, [pc, #148]	@ (800d784 <xTaskIncrementTick+0x160>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d903      	bls.n	800d6fe <xTaskIncrementTick+0xda>
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6fa:	4a22      	ldr	r2, [pc, #136]	@ (800d784 <xTaskIncrementTick+0x160>)
 800d6fc:	6013      	str	r3, [r2, #0]
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d702:	4613      	mov	r3, r2
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	4413      	add	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4a1f      	ldr	r2, [pc, #124]	@ (800d788 <xTaskIncrementTick+0x164>)
 800d70c:	441a      	add	r2, r3
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	3304      	adds	r3, #4
 800d712:	4619      	mov	r1, r3
 800d714:	4610      	mov	r0, r2
 800d716:	f7fe fee4 	bl	800c4e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d71e:	4b1b      	ldr	r3, [pc, #108]	@ (800d78c <xTaskIncrementTick+0x168>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d724:	429a      	cmp	r2, r3
 800d726:	d3b8      	bcc.n	800d69a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d728:	2301      	movs	r3, #1
 800d72a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d72c:	e7b5      	b.n	800d69a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d72e:	4b17      	ldr	r3, [pc, #92]	@ (800d78c <xTaskIncrementTick+0x168>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d734:	4914      	ldr	r1, [pc, #80]	@ (800d788 <xTaskIncrementTick+0x164>)
 800d736:	4613      	mov	r3, r2
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4413      	add	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	440b      	add	r3, r1
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d901      	bls.n	800d74a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d746:	2301      	movs	r3, #1
 800d748:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d74a:	4b11      	ldr	r3, [pc, #68]	@ (800d790 <xTaskIncrementTick+0x16c>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d007      	beq.n	800d762 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d752:	2301      	movs	r3, #1
 800d754:	617b      	str	r3, [r7, #20]
 800d756:	e004      	b.n	800d762 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d758:	4b0e      	ldr	r3, [pc, #56]	@ (800d794 <xTaskIncrementTick+0x170>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	3301      	adds	r3, #1
 800d75e:	4a0d      	ldr	r2, [pc, #52]	@ (800d794 <xTaskIncrementTick+0x170>)
 800d760:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d762:	697b      	ldr	r3, [r7, #20]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3718      	adds	r7, #24
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	200014bc 	.word	0x200014bc
 800d770:	20001498 	.word	0x20001498
 800d774:	2000144c 	.word	0x2000144c
 800d778:	20001450 	.word	0x20001450
 800d77c:	200014ac 	.word	0x200014ac
 800d780:	200014b4 	.word	0x200014b4
 800d784:	2000149c 	.word	0x2000149c
 800d788:	20000fc4 	.word	0x20000fc4
 800d78c:	20000fc0 	.word	0x20000fc0
 800d790:	200014a8 	.word	0x200014a8
 800d794:	200014a4 	.word	0x200014a4

0800d798 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d798:	b480      	push	{r7}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d79e:	4b2b      	ldr	r3, [pc, #172]	@ (800d84c <vTaskSwitchContext+0xb4>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d003      	beq.n	800d7ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d7a6:	4b2a      	ldr	r3, [pc, #168]	@ (800d850 <vTaskSwitchContext+0xb8>)
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d7ac:	e047      	b.n	800d83e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d7ae:	4b28      	ldr	r3, [pc, #160]	@ (800d850 <vTaskSwitchContext+0xb8>)
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7b4:	4b27      	ldr	r3, [pc, #156]	@ (800d854 <vTaskSwitchContext+0xbc>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	60fb      	str	r3, [r7, #12]
 800d7ba:	e011      	b.n	800d7e0 <vTaskSwitchContext+0x48>
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10b      	bne.n	800d7da <vTaskSwitchContext+0x42>
	__asm volatile
 800d7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c6:	f383 8811 	msr	BASEPRI, r3
 800d7ca:	f3bf 8f6f 	isb	sy
 800d7ce:	f3bf 8f4f 	dsb	sy
 800d7d2:	607b      	str	r3, [r7, #4]
}
 800d7d4:	bf00      	nop
 800d7d6:	bf00      	nop
 800d7d8:	e7fd      	b.n	800d7d6 <vTaskSwitchContext+0x3e>
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	60fb      	str	r3, [r7, #12]
 800d7e0:	491d      	ldr	r1, [pc, #116]	@ (800d858 <vTaskSwitchContext+0xc0>)
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	4413      	add	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	440b      	add	r3, r1
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d0e3      	beq.n	800d7bc <vTaskSwitchContext+0x24>
 800d7f4:	68fa      	ldr	r2, [r7, #12]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	4413      	add	r3, r2
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	4a16      	ldr	r2, [pc, #88]	@ (800d858 <vTaskSwitchContext+0xc0>)
 800d800:	4413      	add	r3, r2
 800d802:	60bb      	str	r3, [r7, #8]
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	685a      	ldr	r2, [r3, #4]
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	605a      	str	r2, [r3, #4]
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	685a      	ldr	r2, [r3, #4]
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	3308      	adds	r3, #8
 800d816:	429a      	cmp	r2, r3
 800d818:	d104      	bne.n	800d824 <vTaskSwitchContext+0x8c>
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	685a      	ldr	r2, [r3, #4]
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	605a      	str	r2, [r3, #4]
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	4a0c      	ldr	r2, [pc, #48]	@ (800d85c <vTaskSwitchContext+0xc4>)
 800d82c:	6013      	str	r3, [r2, #0]
 800d82e:	4a09      	ldr	r2, [pc, #36]	@ (800d854 <vTaskSwitchContext+0xbc>)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d834:	4b09      	ldr	r3, [pc, #36]	@ (800d85c <vTaskSwitchContext+0xc4>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	3354      	adds	r3, #84	@ 0x54
 800d83a:	4a09      	ldr	r2, [pc, #36]	@ (800d860 <vTaskSwitchContext+0xc8>)
 800d83c:	6013      	str	r3, [r2, #0]
}
 800d83e:	bf00      	nop
 800d840:	3714      	adds	r7, #20
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	200014bc 	.word	0x200014bc
 800d850:	200014a8 	.word	0x200014a8
 800d854:	2000149c 	.word	0x2000149c
 800d858:	20000fc4 	.word	0x20000fc4
 800d85c:	20000fc0 	.word	0x20000fc0
 800d860:	20000124 	.word	0x20000124

0800d864 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d10b      	bne.n	800d88c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d878:	f383 8811 	msr	BASEPRI, r3
 800d87c:	f3bf 8f6f 	isb	sy
 800d880:	f3bf 8f4f 	dsb	sy
 800d884:	60fb      	str	r3, [r7, #12]
}
 800d886:	bf00      	nop
 800d888:	bf00      	nop
 800d88a:	e7fd      	b.n	800d888 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d88c:	4b07      	ldr	r3, [pc, #28]	@ (800d8ac <vTaskPlaceOnEventList+0x48>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	3318      	adds	r3, #24
 800d892:	4619      	mov	r1, r3
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f7fe fe48 	bl	800c52a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d89a:	2101      	movs	r1, #1
 800d89c:	6838      	ldr	r0, [r7, #0]
 800d89e:	f000 fa87 	bl	800ddb0 <prvAddCurrentTaskToDelayedList>
}
 800d8a2:	bf00      	nop
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	20000fc0 	.word	0x20000fc0

0800d8b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d10b      	bne.n	800d8da <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c6:	f383 8811 	msr	BASEPRI, r3
 800d8ca:	f3bf 8f6f 	isb	sy
 800d8ce:	f3bf 8f4f 	dsb	sy
 800d8d2:	617b      	str	r3, [r7, #20]
}
 800d8d4:	bf00      	nop
 800d8d6:	bf00      	nop
 800d8d8:	e7fd      	b.n	800d8d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8da:	4b0a      	ldr	r3, [pc, #40]	@ (800d904 <vTaskPlaceOnEventListRestricted+0x54>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	3318      	adds	r3, #24
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f7fe fdfd 	bl	800c4e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d002      	beq.n	800d8f4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d8f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d8f4:	6879      	ldr	r1, [r7, #4]
 800d8f6:	68b8      	ldr	r0, [r7, #8]
 800d8f8:	f000 fa5a 	bl	800ddb0 <prvAddCurrentTaskToDelayedList>
	}
 800d8fc:	bf00      	nop
 800d8fe:	3718      	adds	r7, #24
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	20000fc0 	.word	0x20000fc0

0800d908 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d10b      	bne.n	800d936 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	60fb      	str	r3, [r7, #12]
}
 800d930:	bf00      	nop
 800d932:	bf00      	nop
 800d934:	e7fd      	b.n	800d932 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	3318      	adds	r3, #24
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fe fe2e 	bl	800c59c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d940:	4b1d      	ldr	r3, [pc, #116]	@ (800d9b8 <xTaskRemoveFromEventList+0xb0>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d11d      	bne.n	800d984 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	3304      	adds	r3, #4
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7fe fe25 	bl	800c59c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d956:	4b19      	ldr	r3, [pc, #100]	@ (800d9bc <xTaskRemoveFromEventList+0xb4>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d903      	bls.n	800d966 <xTaskRemoveFromEventList+0x5e>
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d962:	4a16      	ldr	r2, [pc, #88]	@ (800d9bc <xTaskRemoveFromEventList+0xb4>)
 800d964:	6013      	str	r3, [r2, #0]
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d96a:	4613      	mov	r3, r2
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	4413      	add	r3, r2
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	4a13      	ldr	r2, [pc, #76]	@ (800d9c0 <xTaskRemoveFromEventList+0xb8>)
 800d974:	441a      	add	r2, r3
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	3304      	adds	r3, #4
 800d97a:	4619      	mov	r1, r3
 800d97c:	4610      	mov	r0, r2
 800d97e:	f7fe fdb0 	bl	800c4e2 <vListInsertEnd>
 800d982:	e005      	b.n	800d990 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	3318      	adds	r3, #24
 800d988:	4619      	mov	r1, r3
 800d98a:	480e      	ldr	r0, [pc, #56]	@ (800d9c4 <xTaskRemoveFromEventList+0xbc>)
 800d98c:	f7fe fda9 	bl	800c4e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d994:	4b0c      	ldr	r3, [pc, #48]	@ (800d9c8 <xTaskRemoveFromEventList+0xc0>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d905      	bls.n	800d9aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d9cc <xTaskRemoveFromEventList+0xc4>)
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	e001      	b.n	800d9ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d9ae:	697b      	ldr	r3, [r7, #20]
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3718      	adds	r7, #24
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	200014bc 	.word	0x200014bc
 800d9bc:	2000149c 	.word	0x2000149c
 800d9c0:	20000fc4 	.word	0x20000fc4
 800d9c4:	20001454 	.word	0x20001454
 800d9c8:	20000fc0 	.word	0x20000fc0
 800d9cc:	200014a8 	.word	0x200014a8

0800d9d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d9d8:	4b06      	ldr	r3, [pc, #24]	@ (800d9f4 <vTaskInternalSetTimeOutState+0x24>)
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d9e0:	4b05      	ldr	r3, [pc, #20]	@ (800d9f8 <vTaskInternalSetTimeOutState+0x28>)
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	605a      	str	r2, [r3, #4]
}
 800d9e8:	bf00      	nop
 800d9ea:	370c      	adds	r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr
 800d9f4:	200014ac 	.word	0x200014ac
 800d9f8:	20001498 	.word	0x20001498

0800d9fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b088      	sub	sp, #32
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10b      	bne.n	800da24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	613b      	str	r3, [r7, #16]
}
 800da1e:	bf00      	nop
 800da20:	bf00      	nop
 800da22:	e7fd      	b.n	800da20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d10b      	bne.n	800da42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800da2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2e:	f383 8811 	msr	BASEPRI, r3
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	60fb      	str	r3, [r7, #12]
}
 800da3c:	bf00      	nop
 800da3e:	bf00      	nop
 800da40:	e7fd      	b.n	800da3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800da42:	f000 fe91 	bl	800e768 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800da46:	4b1d      	ldr	r3, [pc, #116]	@ (800dabc <xTaskCheckForTimeOut+0xc0>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	69ba      	ldr	r2, [r7, #24]
 800da52:	1ad3      	subs	r3, r2, r3
 800da54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da5e:	d102      	bne.n	800da66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800da60:	2300      	movs	r3, #0
 800da62:	61fb      	str	r3, [r7, #28]
 800da64:	e023      	b.n	800daae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	4b15      	ldr	r3, [pc, #84]	@ (800dac0 <xTaskCheckForTimeOut+0xc4>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d007      	beq.n	800da82 <xTaskCheckForTimeOut+0x86>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	69ba      	ldr	r2, [r7, #24]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d302      	bcc.n	800da82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800da7c:	2301      	movs	r3, #1
 800da7e:	61fb      	str	r3, [r7, #28]
 800da80:	e015      	b.n	800daae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	697a      	ldr	r2, [r7, #20]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d20b      	bcs.n	800daa4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	1ad2      	subs	r2, r2, r3
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f7ff ff99 	bl	800d9d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800da9e:	2300      	movs	r3, #0
 800daa0:	61fb      	str	r3, [r7, #28]
 800daa2:	e004      	b.n	800daae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	2200      	movs	r2, #0
 800daa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800daaa:	2301      	movs	r3, #1
 800daac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800daae:	f000 fe8d 	bl	800e7cc <vPortExitCritical>

	return xReturn;
 800dab2:	69fb      	ldr	r3, [r7, #28]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3720      	adds	r7, #32
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	20001498 	.word	0x20001498
 800dac0:	200014ac 	.word	0x200014ac

0800dac4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dac4:	b480      	push	{r7}
 800dac6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dac8:	4b03      	ldr	r3, [pc, #12]	@ (800dad8 <vTaskMissedYield+0x14>)
 800daca:	2201      	movs	r2, #1
 800dacc:	601a      	str	r2, [r3, #0]
}
 800dace:	bf00      	nop
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	200014a8 	.word	0x200014a8

0800dadc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dae4:	f000 f852 	bl	800db8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dae8:	4b06      	ldr	r3, [pc, #24]	@ (800db04 <prvIdleTask+0x28>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d9f9      	bls.n	800dae4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800daf0:	4b05      	ldr	r3, [pc, #20]	@ (800db08 <prvIdleTask+0x2c>)
 800daf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daf6:	601a      	str	r2, [r3, #0]
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800db00:	e7f0      	b.n	800dae4 <prvIdleTask+0x8>
 800db02:	bf00      	nop
 800db04:	20000fc4 	.word	0x20000fc4
 800db08:	e000ed04 	.word	0xe000ed04

0800db0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db12:	2300      	movs	r3, #0
 800db14:	607b      	str	r3, [r7, #4]
 800db16:	e00c      	b.n	800db32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	4613      	mov	r3, r2
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4413      	add	r3, r2
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	4a12      	ldr	r2, [pc, #72]	@ (800db6c <prvInitialiseTaskLists+0x60>)
 800db24:	4413      	add	r3, r2
 800db26:	4618      	mov	r0, r3
 800db28:	f7fe fcae 	bl	800c488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	3301      	adds	r3, #1
 800db30:	607b      	str	r3, [r7, #4]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b37      	cmp	r3, #55	@ 0x37
 800db36:	d9ef      	bls.n	800db18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800db38:	480d      	ldr	r0, [pc, #52]	@ (800db70 <prvInitialiseTaskLists+0x64>)
 800db3a:	f7fe fca5 	bl	800c488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800db3e:	480d      	ldr	r0, [pc, #52]	@ (800db74 <prvInitialiseTaskLists+0x68>)
 800db40:	f7fe fca2 	bl	800c488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800db44:	480c      	ldr	r0, [pc, #48]	@ (800db78 <prvInitialiseTaskLists+0x6c>)
 800db46:	f7fe fc9f 	bl	800c488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800db4a:	480c      	ldr	r0, [pc, #48]	@ (800db7c <prvInitialiseTaskLists+0x70>)
 800db4c:	f7fe fc9c 	bl	800c488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800db50:	480b      	ldr	r0, [pc, #44]	@ (800db80 <prvInitialiseTaskLists+0x74>)
 800db52:	f7fe fc99 	bl	800c488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800db56:	4b0b      	ldr	r3, [pc, #44]	@ (800db84 <prvInitialiseTaskLists+0x78>)
 800db58:	4a05      	ldr	r2, [pc, #20]	@ (800db70 <prvInitialiseTaskLists+0x64>)
 800db5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db5c:	4b0a      	ldr	r3, [pc, #40]	@ (800db88 <prvInitialiseTaskLists+0x7c>)
 800db5e:	4a05      	ldr	r2, [pc, #20]	@ (800db74 <prvInitialiseTaskLists+0x68>)
 800db60:	601a      	str	r2, [r3, #0]
}
 800db62:	bf00      	nop
 800db64:	3708      	adds	r7, #8
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	20000fc4 	.word	0x20000fc4
 800db70:	20001424 	.word	0x20001424
 800db74:	20001438 	.word	0x20001438
 800db78:	20001454 	.word	0x20001454
 800db7c:	20001468 	.word	0x20001468
 800db80:	20001480 	.word	0x20001480
 800db84:	2000144c 	.word	0x2000144c
 800db88:	20001450 	.word	0x20001450

0800db8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db92:	e019      	b.n	800dbc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800db94:	f000 fde8 	bl	800e768 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db98:	4b10      	ldr	r3, [pc, #64]	@ (800dbdc <prvCheckTasksWaitingTermination+0x50>)
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	3304      	adds	r3, #4
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fe fcf9 	bl	800c59c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dbaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dbe0 <prvCheckTasksWaitingTermination+0x54>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	4a0b      	ldr	r2, [pc, #44]	@ (800dbe0 <prvCheckTasksWaitingTermination+0x54>)
 800dbb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dbb4:	4b0b      	ldr	r3, [pc, #44]	@ (800dbe4 <prvCheckTasksWaitingTermination+0x58>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	4a0a      	ldr	r2, [pc, #40]	@ (800dbe4 <prvCheckTasksWaitingTermination+0x58>)
 800dbbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dbbe:	f000 fe05 	bl	800e7cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 f810 	bl	800dbe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbc8:	4b06      	ldr	r3, [pc, #24]	@ (800dbe4 <prvCheckTasksWaitingTermination+0x58>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d1e1      	bne.n	800db94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dbd0:	bf00      	nop
 800dbd2:	bf00      	nop
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	20001468 	.word	0x20001468
 800dbe0:	20001494 	.word	0x20001494
 800dbe4:	2000147c 	.word	0x2000147c

0800dbe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	3354      	adds	r3, #84	@ 0x54
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f002 fcb1 	bl	801055c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d108      	bne.n	800dc16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f000 ff9d 	bl	800eb48 <vPortFree>
				vPortFree( pxTCB );
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 ff9a 	bl	800eb48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dc14:	e019      	b.n	800dc4a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d103      	bne.n	800dc28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 ff91 	bl	800eb48 <vPortFree>
	}
 800dc26:	e010      	b.n	800dc4a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dc2e:	2b02      	cmp	r3, #2
 800dc30:	d00b      	beq.n	800dc4a <prvDeleteTCB+0x62>
	__asm volatile
 800dc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc36:	f383 8811 	msr	BASEPRI, r3
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	60fb      	str	r3, [r7, #12]
}
 800dc44:	bf00      	nop
 800dc46:	bf00      	nop
 800dc48:	e7fd      	b.n	800dc46 <prvDeleteTCB+0x5e>
	}
 800dc4a:	bf00      	nop
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
	...

0800dc54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc5a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc8c <prvResetNextTaskUnblockTime+0x38>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d104      	bne.n	800dc6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dc64:	4b0a      	ldr	r3, [pc, #40]	@ (800dc90 <prvResetNextTaskUnblockTime+0x3c>)
 800dc66:	f04f 32ff 	mov.w	r2, #4294967295
 800dc6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dc6c:	e008      	b.n	800dc80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc6e:	4b07      	ldr	r3, [pc, #28]	@ (800dc8c <prvResetNextTaskUnblockTime+0x38>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	4a04      	ldr	r2, [pc, #16]	@ (800dc90 <prvResetNextTaskUnblockTime+0x3c>)
 800dc7e:	6013      	str	r3, [r2, #0]
}
 800dc80:	bf00      	nop
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	2000144c 	.word	0x2000144c
 800dc90:	200014b4 	.word	0x200014b4

0800dc94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dc9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dcc8 <xTaskGetSchedulerState+0x34>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d102      	bne.n	800dca8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dca2:	2301      	movs	r3, #1
 800dca4:	607b      	str	r3, [r7, #4]
 800dca6:	e008      	b.n	800dcba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dca8:	4b08      	ldr	r3, [pc, #32]	@ (800dccc <xTaskGetSchedulerState+0x38>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d102      	bne.n	800dcb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	607b      	str	r3, [r7, #4]
 800dcb4:	e001      	b.n	800dcba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dcba:	687b      	ldr	r3, [r7, #4]
	}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr
 800dcc8:	200014a0 	.word	0x200014a0
 800dccc:	200014bc 	.word	0x200014bc

0800dcd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b086      	sub	sp, #24
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d058      	beq.n	800dd98 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dce6:	4b2f      	ldr	r3, [pc, #188]	@ (800dda4 <xTaskPriorityDisinherit+0xd4>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	693a      	ldr	r2, [r7, #16]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d00b      	beq.n	800dd08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dcf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf4:	f383 8811 	msr	BASEPRI, r3
 800dcf8:	f3bf 8f6f 	isb	sy
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	60fb      	str	r3, [r7, #12]
}
 800dd02:	bf00      	nop
 800dd04:	bf00      	nop
 800dd06:	e7fd      	b.n	800dd04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10b      	bne.n	800dd28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd14:	f383 8811 	msr	BASEPRI, r3
 800dd18:	f3bf 8f6f 	isb	sy
 800dd1c:	f3bf 8f4f 	dsb	sy
 800dd20:	60bb      	str	r3, [r7, #8]
}
 800dd22:	bf00      	nop
 800dd24:	bf00      	nop
 800dd26:	e7fd      	b.n	800dd24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd2c:	1e5a      	subs	r2, r3, #1
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d02c      	beq.n	800dd98 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d128      	bne.n	800dd98 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	3304      	adds	r3, #4
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fe fc26 	bl	800c59c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd68:	4b0f      	ldr	r3, [pc, #60]	@ (800dda8 <xTaskPriorityDisinherit+0xd8>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d903      	bls.n	800dd78 <xTaskPriorityDisinherit+0xa8>
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd74:	4a0c      	ldr	r2, [pc, #48]	@ (800dda8 <xTaskPriorityDisinherit+0xd8>)
 800dd76:	6013      	str	r3, [r2, #0]
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4413      	add	r3, r2
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	4a09      	ldr	r2, [pc, #36]	@ (800ddac <xTaskPriorityDisinherit+0xdc>)
 800dd86:	441a      	add	r2, r3
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	3304      	adds	r3, #4
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	4610      	mov	r0, r2
 800dd90:	f7fe fba7 	bl	800c4e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dd94:	2301      	movs	r3, #1
 800dd96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd98:	697b      	ldr	r3, [r7, #20]
	}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3718      	adds	r7, #24
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	20000fc0 	.word	0x20000fc0
 800dda8:	2000149c 	.word	0x2000149c
 800ddac:	20000fc4 	.word	0x20000fc4

0800ddb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ddba:	4b21      	ldr	r3, [pc, #132]	@ (800de40 <prvAddCurrentTaskToDelayedList+0x90>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddc0:	4b20      	ldr	r3, [pc, #128]	@ (800de44 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fe fbe8 	bl	800c59c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd2:	d10a      	bne.n	800ddea <prvAddCurrentTaskToDelayedList+0x3a>
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d007      	beq.n	800ddea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddda:	4b1a      	ldr	r3, [pc, #104]	@ (800de44 <prvAddCurrentTaskToDelayedList+0x94>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	3304      	adds	r3, #4
 800dde0:	4619      	mov	r1, r3
 800dde2:	4819      	ldr	r0, [pc, #100]	@ (800de48 <prvAddCurrentTaskToDelayedList+0x98>)
 800dde4:	f7fe fb7d 	bl	800c4e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dde8:	e026      	b.n	800de38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4413      	add	r3, r2
 800ddf0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ddf2:	4b14      	ldr	r3, [pc, #80]	@ (800de44 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	68ba      	ldr	r2, [r7, #8]
 800ddf8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ddfa:	68ba      	ldr	r2, [r7, #8]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d209      	bcs.n	800de16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de02:	4b12      	ldr	r3, [pc, #72]	@ (800de4c <prvAddCurrentTaskToDelayedList+0x9c>)
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	4b0f      	ldr	r3, [pc, #60]	@ (800de44 <prvAddCurrentTaskToDelayedList+0x94>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	3304      	adds	r3, #4
 800de0c:	4619      	mov	r1, r3
 800de0e:	4610      	mov	r0, r2
 800de10:	f7fe fb8b 	bl	800c52a <vListInsert>
}
 800de14:	e010      	b.n	800de38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de16:	4b0e      	ldr	r3, [pc, #56]	@ (800de50 <prvAddCurrentTaskToDelayedList+0xa0>)
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	4b0a      	ldr	r3, [pc, #40]	@ (800de44 <prvAddCurrentTaskToDelayedList+0x94>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	3304      	adds	r3, #4
 800de20:	4619      	mov	r1, r3
 800de22:	4610      	mov	r0, r2
 800de24:	f7fe fb81 	bl	800c52a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de28:	4b0a      	ldr	r3, [pc, #40]	@ (800de54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	68ba      	ldr	r2, [r7, #8]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d202      	bcs.n	800de38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800de32:	4a08      	ldr	r2, [pc, #32]	@ (800de54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	6013      	str	r3, [r2, #0]
}
 800de38:	bf00      	nop
 800de3a:	3710      	adds	r7, #16
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	20001498 	.word	0x20001498
 800de44:	20000fc0 	.word	0x20000fc0
 800de48:	20001480 	.word	0x20001480
 800de4c:	20001450 	.word	0x20001450
 800de50:	2000144c 	.word	0x2000144c
 800de54:	200014b4 	.word	0x200014b4

0800de58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b08a      	sub	sp, #40	@ 0x28
 800de5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de5e:	2300      	movs	r3, #0
 800de60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de62:	f000 fb13 	bl	800e48c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de66:	4b1d      	ldr	r3, [pc, #116]	@ (800dedc <xTimerCreateTimerTask+0x84>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d021      	beq.n	800deb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de6e:	2300      	movs	r3, #0
 800de70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de72:	2300      	movs	r3, #0
 800de74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de76:	1d3a      	adds	r2, r7, #4
 800de78:	f107 0108 	add.w	r1, r7, #8
 800de7c:	f107 030c 	add.w	r3, r7, #12
 800de80:	4618      	mov	r0, r3
 800de82:	f7fe fae7 	bl	800c454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de86:	6879      	ldr	r1, [r7, #4]
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	9202      	str	r2, [sp, #8]
 800de8e:	9301      	str	r3, [sp, #4]
 800de90:	2302      	movs	r3, #2
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	2300      	movs	r3, #0
 800de96:	460a      	mov	r2, r1
 800de98:	4911      	ldr	r1, [pc, #68]	@ (800dee0 <xTimerCreateTimerTask+0x88>)
 800de9a:	4812      	ldr	r0, [pc, #72]	@ (800dee4 <xTimerCreateTimerTask+0x8c>)
 800de9c:	f7ff f8a2 	bl	800cfe4 <xTaskCreateStatic>
 800dea0:	4603      	mov	r3, r0
 800dea2:	4a11      	ldr	r2, [pc, #68]	@ (800dee8 <xTimerCreateTimerTask+0x90>)
 800dea4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dea6:	4b10      	ldr	r3, [pc, #64]	@ (800dee8 <xTimerCreateTimerTask+0x90>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d001      	beq.n	800deb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800deae:	2301      	movs	r3, #1
 800deb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d10b      	bne.n	800ded0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800deb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800debc:	f383 8811 	msr	BASEPRI, r3
 800dec0:	f3bf 8f6f 	isb	sy
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	613b      	str	r3, [r7, #16]
}
 800deca:	bf00      	nop
 800decc:	bf00      	nop
 800dece:	e7fd      	b.n	800decc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ded0:	697b      	ldr	r3, [r7, #20]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3718      	adds	r7, #24
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	200014f0 	.word	0x200014f0
 800dee0:	08012494 	.word	0x08012494
 800dee4:	0800e025 	.word	0x0800e025
 800dee8:	200014f4 	.word	0x200014f4

0800deec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b08a      	sub	sp, #40	@ 0x28
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800defa:	2300      	movs	r3, #0
 800defc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10b      	bne.n	800df1c <xTimerGenericCommand+0x30>
	__asm volatile
 800df04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df08:	f383 8811 	msr	BASEPRI, r3
 800df0c:	f3bf 8f6f 	isb	sy
 800df10:	f3bf 8f4f 	dsb	sy
 800df14:	623b      	str	r3, [r7, #32]
}
 800df16:	bf00      	nop
 800df18:	bf00      	nop
 800df1a:	e7fd      	b.n	800df18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800df1c:	4b19      	ldr	r3, [pc, #100]	@ (800df84 <xTimerGenericCommand+0x98>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d02a      	beq.n	800df7a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	2b05      	cmp	r3, #5
 800df34:	dc18      	bgt.n	800df68 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df36:	f7ff fead 	bl	800dc94 <xTaskGetSchedulerState>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b02      	cmp	r3, #2
 800df3e:	d109      	bne.n	800df54 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df40:	4b10      	ldr	r3, [pc, #64]	@ (800df84 <xTimerGenericCommand+0x98>)
 800df42:	6818      	ldr	r0, [r3, #0]
 800df44:	f107 0110 	add.w	r1, r7, #16
 800df48:	2300      	movs	r3, #0
 800df4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df4c:	f7fe fc5a 	bl	800c804 <xQueueGenericSend>
 800df50:	6278      	str	r0, [r7, #36]	@ 0x24
 800df52:	e012      	b.n	800df7a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df54:	4b0b      	ldr	r3, [pc, #44]	@ (800df84 <xTimerGenericCommand+0x98>)
 800df56:	6818      	ldr	r0, [r3, #0]
 800df58:	f107 0110 	add.w	r1, r7, #16
 800df5c:	2300      	movs	r3, #0
 800df5e:	2200      	movs	r2, #0
 800df60:	f7fe fc50 	bl	800c804 <xQueueGenericSend>
 800df64:	6278      	str	r0, [r7, #36]	@ 0x24
 800df66:	e008      	b.n	800df7a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df68:	4b06      	ldr	r3, [pc, #24]	@ (800df84 <xTimerGenericCommand+0x98>)
 800df6a:	6818      	ldr	r0, [r3, #0]
 800df6c:	f107 0110 	add.w	r1, r7, #16
 800df70:	2300      	movs	r3, #0
 800df72:	683a      	ldr	r2, [r7, #0]
 800df74:	f7fe fd48 	bl	800ca08 <xQueueGenericSendFromISR>
 800df78:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3728      	adds	r7, #40	@ 0x28
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	200014f0 	.word	0x200014f0

0800df88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b088      	sub	sp, #32
 800df8c:	af02      	add	r7, sp, #8
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df92:	4b23      	ldr	r3, [pc, #140]	@ (800e020 <prvProcessExpiredTimer+0x98>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	3304      	adds	r3, #4
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fe fafb 	bl	800c59c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfac:	f003 0304 	and.w	r3, r3, #4
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d023      	beq.n	800dffc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	699a      	ldr	r2, [r3, #24]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	18d1      	adds	r1, r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	683a      	ldr	r2, [r7, #0]
 800dfc0:	6978      	ldr	r0, [r7, #20]
 800dfc2:	f000 f8d5 	bl	800e170 <prvInsertTimerInActiveList>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d020      	beq.n	800e00e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfcc:	2300      	movs	r3, #0
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	6978      	ldr	r0, [r7, #20]
 800dfd8:	f7ff ff88 	bl	800deec <xTimerGenericCommand>
 800dfdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d114      	bne.n	800e00e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dfe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe8:	f383 8811 	msr	BASEPRI, r3
 800dfec:	f3bf 8f6f 	isb	sy
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	60fb      	str	r3, [r7, #12]
}
 800dff6:	bf00      	nop
 800dff8:	bf00      	nop
 800dffa:	e7fd      	b.n	800dff8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e002:	f023 0301 	bic.w	r3, r3, #1
 800e006:	b2da      	uxtb	r2, r3
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	6a1b      	ldr	r3, [r3, #32]
 800e012:	6978      	ldr	r0, [r7, #20]
 800e014:	4798      	blx	r3
}
 800e016:	bf00      	nop
 800e018:	3718      	adds	r7, #24
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	200014e8 	.word	0x200014e8

0800e024 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e02c:	f107 0308 	add.w	r3, r7, #8
 800e030:	4618      	mov	r0, r3
 800e032:	f000 f859 	bl	800e0e8 <prvGetNextExpireTime>
 800e036:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	4619      	mov	r1, r3
 800e03c:	68f8      	ldr	r0, [r7, #12]
 800e03e:	f000 f805 	bl	800e04c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e042:	f000 f8d7 	bl	800e1f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e046:	bf00      	nop
 800e048:	e7f0      	b.n	800e02c <prvTimerTask+0x8>
	...

0800e04c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e056:	f7ff fa29 	bl	800d4ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e05a:	f107 0308 	add.w	r3, r7, #8
 800e05e:	4618      	mov	r0, r3
 800e060:	f000 f866 	bl	800e130 <prvSampleTimeNow>
 800e064:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d130      	bne.n	800e0ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10a      	bne.n	800e088 <prvProcessTimerOrBlockTask+0x3c>
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	429a      	cmp	r2, r3
 800e078:	d806      	bhi.n	800e088 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e07a:	f7ff fa25 	bl	800d4c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e07e:	68f9      	ldr	r1, [r7, #12]
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f7ff ff81 	bl	800df88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e086:	e024      	b.n	800e0d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d008      	beq.n	800e0a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e08e:	4b13      	ldr	r3, [pc, #76]	@ (800e0dc <prvProcessTimerOrBlockTask+0x90>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d101      	bne.n	800e09c <prvProcessTimerOrBlockTask+0x50>
 800e098:	2301      	movs	r3, #1
 800e09a:	e000      	b.n	800e09e <prvProcessTimerOrBlockTask+0x52>
 800e09c:	2300      	movs	r3, #0
 800e09e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e0a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e0e0 <prvProcessTimerOrBlockTask+0x94>)
 800e0a2:	6818      	ldr	r0, [r3, #0]
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	1ad3      	subs	r3, r2, r3
 800e0aa:	683a      	ldr	r2, [r7, #0]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	f7fe ff65 	bl	800cf7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e0b2:	f7ff fa09 	bl	800d4c8 <xTaskResumeAll>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d10a      	bne.n	800e0d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e0bc:	4b09      	ldr	r3, [pc, #36]	@ (800e0e4 <prvProcessTimerOrBlockTask+0x98>)
 800e0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0c2:	601a      	str	r2, [r3, #0]
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	f3bf 8f6f 	isb	sy
}
 800e0cc:	e001      	b.n	800e0d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e0ce:	f7ff f9fb 	bl	800d4c8 <xTaskResumeAll>
}
 800e0d2:	bf00      	nop
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	200014ec 	.word	0x200014ec
 800e0e0:	200014f0 	.word	0x200014f0
 800e0e4:	e000ed04 	.word	0xe000ed04

0800e0e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e0f0:	4b0e      	ldr	r3, [pc, #56]	@ (800e12c <prvGetNextExpireTime+0x44>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d101      	bne.n	800e0fe <prvGetNextExpireTime+0x16>
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	e000      	b.n	800e100 <prvGetNextExpireTime+0x18>
 800e0fe:	2200      	movs	r2, #0
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d105      	bne.n	800e118 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e10c:	4b07      	ldr	r3, [pc, #28]	@ (800e12c <prvGetNextExpireTime+0x44>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	60fb      	str	r3, [r7, #12]
 800e116:	e001      	b.n	800e11c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e118:	2300      	movs	r3, #0
 800e11a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e11c:	68fb      	ldr	r3, [r7, #12]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3714      	adds	r7, #20
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr
 800e12a:	bf00      	nop
 800e12c:	200014e8 	.word	0x200014e8

0800e130 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e138:	f7ff fa64 	bl	800d604 <xTaskGetTickCount>
 800e13c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e13e:	4b0b      	ldr	r3, [pc, #44]	@ (800e16c <prvSampleTimeNow+0x3c>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	429a      	cmp	r2, r3
 800e146:	d205      	bcs.n	800e154 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e148:	f000 f93a 	bl	800e3c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2201      	movs	r2, #1
 800e150:	601a      	str	r2, [r3, #0]
 800e152:	e002      	b.n	800e15a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e15a:	4a04      	ldr	r2, [pc, #16]	@ (800e16c <prvSampleTimeNow+0x3c>)
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e160:	68fb      	ldr	r3, [r7, #12]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	200014f8 	.word	0x200014f8

0800e170 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
 800e17c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e17e:	2300      	movs	r3, #0
 800e180:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	68ba      	ldr	r2, [r7, #8]
 800e186:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	68fa      	ldr	r2, [r7, #12]
 800e18c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e18e:	68ba      	ldr	r2, [r7, #8]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	429a      	cmp	r2, r3
 800e194:	d812      	bhi.n	800e1bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	1ad2      	subs	r2, r2, r3
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	699b      	ldr	r3, [r3, #24]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d302      	bcc.n	800e1aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	617b      	str	r3, [r7, #20]
 800e1a8:	e01b      	b.n	800e1e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e1aa:	4b10      	ldr	r3, [pc, #64]	@ (800e1ec <prvInsertTimerInActiveList+0x7c>)
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	3304      	adds	r3, #4
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	4610      	mov	r0, r2
 800e1b6:	f7fe f9b8 	bl	800c52a <vListInsert>
 800e1ba:	e012      	b.n	800e1e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d206      	bcs.n	800e1d2 <prvInsertTimerInActiveList+0x62>
 800e1c4:	68ba      	ldr	r2, [r7, #8]
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d302      	bcc.n	800e1d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	617b      	str	r3, [r7, #20]
 800e1d0:	e007      	b.n	800e1e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1d2:	4b07      	ldr	r3, [pc, #28]	@ (800e1f0 <prvInsertTimerInActiveList+0x80>)
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	3304      	adds	r3, #4
 800e1da:	4619      	mov	r1, r3
 800e1dc:	4610      	mov	r0, r2
 800e1de:	f7fe f9a4 	bl	800c52a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e1e2:	697b      	ldr	r3, [r7, #20]
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3718      	adds	r7, #24
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	200014ec 	.word	0x200014ec
 800e1f0:	200014e8 	.word	0x200014e8

0800e1f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b08e      	sub	sp, #56	@ 0x38
 800e1f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1fa:	e0ce      	b.n	800e39a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	da19      	bge.n	800e236 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e202:	1d3b      	adds	r3, r7, #4
 800e204:	3304      	adds	r3, #4
 800e206:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10b      	bne.n	800e226 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	61fb      	str	r3, [r7, #28]
}
 800e220:	bf00      	nop
 800e222:	bf00      	nop
 800e224:	e7fd      	b.n	800e222 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e22c:	6850      	ldr	r0, [r2, #4]
 800e22e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e230:	6892      	ldr	r2, [r2, #8]
 800e232:	4611      	mov	r1, r2
 800e234:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	f2c0 80ae 	blt.w	800e39a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e244:	695b      	ldr	r3, [r3, #20]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d004      	beq.n	800e254 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e24c:	3304      	adds	r3, #4
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fe f9a4 	bl	800c59c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e254:	463b      	mov	r3, r7
 800e256:	4618      	mov	r0, r3
 800e258:	f7ff ff6a 	bl	800e130 <prvSampleTimeNow>
 800e25c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b09      	cmp	r3, #9
 800e262:	f200 8097 	bhi.w	800e394 <prvProcessReceivedCommands+0x1a0>
 800e266:	a201      	add	r2, pc, #4	@ (adr r2, 800e26c <prvProcessReceivedCommands+0x78>)
 800e268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e26c:	0800e295 	.word	0x0800e295
 800e270:	0800e295 	.word	0x0800e295
 800e274:	0800e295 	.word	0x0800e295
 800e278:	0800e30b 	.word	0x0800e30b
 800e27c:	0800e31f 	.word	0x0800e31f
 800e280:	0800e36b 	.word	0x0800e36b
 800e284:	0800e295 	.word	0x0800e295
 800e288:	0800e295 	.word	0x0800e295
 800e28c:	0800e30b 	.word	0x0800e30b
 800e290:	0800e31f 	.word	0x0800e31f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e296:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e29a:	f043 0301 	orr.w	r3, r3, #1
 800e29e:	b2da      	uxtb	r2, r3
 800e2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e2a6:	68ba      	ldr	r2, [r7, #8]
 800e2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2aa:	699b      	ldr	r3, [r3, #24]
 800e2ac:	18d1      	adds	r1, r2, r3
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2b4:	f7ff ff5c 	bl	800e170 <prvInsertTimerInActiveList>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d06c      	beq.n	800e398 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c0:	6a1b      	ldr	r3, [r3, #32]
 800e2c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2cc:	f003 0304 	and.w	r3, r3, #4
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d061      	beq.n	800e398 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e2d4:	68ba      	ldr	r2, [r7, #8]
 800e2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d8:	699b      	ldr	r3, [r3, #24]
 800e2da:	441a      	add	r2, r3
 800e2dc:	2300      	movs	r3, #0
 800e2de:	9300      	str	r3, [sp, #0]
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2e6:	f7ff fe01 	bl	800deec <xTimerGenericCommand>
 800e2ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e2ec:	6a3b      	ldr	r3, [r7, #32]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d152      	bne.n	800e398 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f6:	f383 8811 	msr	BASEPRI, r3
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	61bb      	str	r3, [r7, #24]
}
 800e304:	bf00      	nop
 800e306:	bf00      	nop
 800e308:	e7fd      	b.n	800e306 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e30c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e310:	f023 0301 	bic.w	r3, r3, #1
 800e314:	b2da      	uxtb	r2, r3
 800e316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e318:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e31c:	e03d      	b.n	800e39a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e320:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e324:	f043 0301 	orr.w	r3, r3, #1
 800e328:	b2da      	uxtb	r2, r3
 800e32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e32c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e334:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e338:	699b      	ldr	r3, [r3, #24]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d10b      	bne.n	800e356 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	617b      	str	r3, [r7, #20]
}
 800e350:	bf00      	nop
 800e352:	bf00      	nop
 800e354:	e7fd      	b.n	800e352 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e358:	699a      	ldr	r2, [r3, #24]
 800e35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e35c:	18d1      	adds	r1, r2, r3
 800e35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e364:	f7ff ff04 	bl	800e170 <prvInsertTimerInActiveList>
					break;
 800e368:	e017      	b.n	800e39a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e36c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e370:	f003 0302 	and.w	r3, r3, #2
 800e374:	2b00      	cmp	r3, #0
 800e376:	d103      	bne.n	800e380 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e37a:	f000 fbe5 	bl	800eb48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e37e:	e00c      	b.n	800e39a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e382:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e386:	f023 0301 	bic.w	r3, r3, #1
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e38e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e392:	e002      	b.n	800e39a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e394:	bf00      	nop
 800e396:	e000      	b.n	800e39a <prvProcessReceivedCommands+0x1a6>
					break;
 800e398:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e39a:	4b08      	ldr	r3, [pc, #32]	@ (800e3bc <prvProcessReceivedCommands+0x1c8>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	1d39      	adds	r1, r7, #4
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fe fbce 	bl	800cb44 <xQueueReceive>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f47f af26 	bne.w	800e1fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e3b0:	bf00      	nop
 800e3b2:	bf00      	nop
 800e3b4:	3730      	adds	r7, #48	@ 0x30
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	200014f0 	.word	0x200014f0

0800e3c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b088      	sub	sp, #32
 800e3c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3c6:	e049      	b.n	800e45c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3c8:	4b2e      	ldr	r3, [pc, #184]	@ (800e484 <prvSwitchTimerLists+0xc4>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3d2:	4b2c      	ldr	r3, [pc, #176]	@ (800e484 <prvSwitchTimerLists+0xc4>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	3304      	adds	r3, #4
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7fe f8db 	bl	800c59c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6a1b      	ldr	r3, [r3, #32]
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3f4:	f003 0304 	and.w	r3, r3, #4
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d02f      	beq.n	800e45c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	699b      	ldr	r3, [r3, #24]
 800e400:	693a      	ldr	r2, [r7, #16]
 800e402:	4413      	add	r3, r2
 800e404:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e406:	68ba      	ldr	r2, [r7, #8]
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d90e      	bls.n	800e42c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	68ba      	ldr	r2, [r7, #8]
 800e412:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	68fa      	ldr	r2, [r7, #12]
 800e418:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e41a:	4b1a      	ldr	r3, [pc, #104]	@ (800e484 <prvSwitchTimerLists+0xc4>)
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	3304      	adds	r3, #4
 800e422:	4619      	mov	r1, r3
 800e424:	4610      	mov	r0, r2
 800e426:	f7fe f880 	bl	800c52a <vListInsert>
 800e42a:	e017      	b.n	800e45c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e42c:	2300      	movs	r3, #0
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	2300      	movs	r3, #0
 800e432:	693a      	ldr	r2, [r7, #16]
 800e434:	2100      	movs	r1, #0
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f7ff fd58 	bl	800deec <xTimerGenericCommand>
 800e43c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d10b      	bne.n	800e45c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	603b      	str	r3, [r7, #0]
}
 800e456:	bf00      	nop
 800e458:	bf00      	nop
 800e45a:	e7fd      	b.n	800e458 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e45c:	4b09      	ldr	r3, [pc, #36]	@ (800e484 <prvSwitchTimerLists+0xc4>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d1b0      	bne.n	800e3c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e466:	4b07      	ldr	r3, [pc, #28]	@ (800e484 <prvSwitchTimerLists+0xc4>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e46c:	4b06      	ldr	r3, [pc, #24]	@ (800e488 <prvSwitchTimerLists+0xc8>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a04      	ldr	r2, [pc, #16]	@ (800e484 <prvSwitchTimerLists+0xc4>)
 800e472:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e474:	4a04      	ldr	r2, [pc, #16]	@ (800e488 <prvSwitchTimerLists+0xc8>)
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	6013      	str	r3, [r2, #0]
}
 800e47a:	bf00      	nop
 800e47c:	3718      	adds	r7, #24
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	200014e8 	.word	0x200014e8
 800e488:	200014ec 	.word	0x200014ec

0800e48c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e492:	f000 f969 	bl	800e768 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e496:	4b15      	ldr	r3, [pc, #84]	@ (800e4ec <prvCheckForValidListAndQueue+0x60>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d120      	bne.n	800e4e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e49e:	4814      	ldr	r0, [pc, #80]	@ (800e4f0 <prvCheckForValidListAndQueue+0x64>)
 800e4a0:	f7fd fff2 	bl	800c488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e4a4:	4813      	ldr	r0, [pc, #76]	@ (800e4f4 <prvCheckForValidListAndQueue+0x68>)
 800e4a6:	f7fd ffef 	bl	800c488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e4aa:	4b13      	ldr	r3, [pc, #76]	@ (800e4f8 <prvCheckForValidListAndQueue+0x6c>)
 800e4ac:	4a10      	ldr	r2, [pc, #64]	@ (800e4f0 <prvCheckForValidListAndQueue+0x64>)
 800e4ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e4b0:	4b12      	ldr	r3, [pc, #72]	@ (800e4fc <prvCheckForValidListAndQueue+0x70>)
 800e4b2:	4a10      	ldr	r2, [pc, #64]	@ (800e4f4 <prvCheckForValidListAndQueue+0x68>)
 800e4b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	4b11      	ldr	r3, [pc, #68]	@ (800e500 <prvCheckForValidListAndQueue+0x74>)
 800e4bc:	4a11      	ldr	r2, [pc, #68]	@ (800e504 <prvCheckForValidListAndQueue+0x78>)
 800e4be:	2110      	movs	r1, #16
 800e4c0:	200a      	movs	r0, #10
 800e4c2:	f7fe f8ff 	bl	800c6c4 <xQueueGenericCreateStatic>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	4a08      	ldr	r2, [pc, #32]	@ (800e4ec <prvCheckForValidListAndQueue+0x60>)
 800e4ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e4cc:	4b07      	ldr	r3, [pc, #28]	@ (800e4ec <prvCheckForValidListAndQueue+0x60>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d005      	beq.n	800e4e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e4d4:	4b05      	ldr	r3, [pc, #20]	@ (800e4ec <prvCheckForValidListAndQueue+0x60>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	490b      	ldr	r1, [pc, #44]	@ (800e508 <prvCheckForValidListAndQueue+0x7c>)
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fe fd24 	bl	800cf28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4e0:	f000 f974 	bl	800e7cc <vPortExitCritical>
}
 800e4e4:	bf00      	nop
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	200014f0 	.word	0x200014f0
 800e4f0:	200014c0 	.word	0x200014c0
 800e4f4:	200014d4 	.word	0x200014d4
 800e4f8:	200014e8 	.word	0x200014e8
 800e4fc:	200014ec 	.word	0x200014ec
 800e500:	2000159c 	.word	0x2000159c
 800e504:	200014fc 	.word	0x200014fc
 800e508:	0801249c 	.word	0x0801249c

0800e50c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e50c:	b480      	push	{r7}
 800e50e:	b085      	sub	sp, #20
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	3b04      	subs	r3, #4
 800e51c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	3b04      	subs	r3, #4
 800e52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	f023 0201 	bic.w	r2, r3, #1
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	3b04      	subs	r3, #4
 800e53a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e53c:	4a0c      	ldr	r2, [pc, #48]	@ (800e570 <pxPortInitialiseStack+0x64>)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	3b14      	subs	r3, #20
 800e546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	3b04      	subs	r3, #4
 800e552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f06f 0202 	mvn.w	r2, #2
 800e55a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	3b20      	subs	r3, #32
 800e560:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e562:	68fb      	ldr	r3, [r7, #12]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3714      	adds	r7, #20
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr
 800e570:	0800e575 	.word	0x0800e575

0800e574 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e574:	b480      	push	{r7}
 800e576:	b085      	sub	sp, #20
 800e578:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e57a:	2300      	movs	r3, #0
 800e57c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e57e:	4b13      	ldr	r3, [pc, #76]	@ (800e5cc <prvTaskExitError+0x58>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e586:	d00b      	beq.n	800e5a0 <prvTaskExitError+0x2c>
	__asm volatile
 800e588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58c:	f383 8811 	msr	BASEPRI, r3
 800e590:	f3bf 8f6f 	isb	sy
 800e594:	f3bf 8f4f 	dsb	sy
 800e598:	60fb      	str	r3, [r7, #12]
}
 800e59a:	bf00      	nop
 800e59c:	bf00      	nop
 800e59e:	e7fd      	b.n	800e59c <prvTaskExitError+0x28>
	__asm volatile
 800e5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a4:	f383 8811 	msr	BASEPRI, r3
 800e5a8:	f3bf 8f6f 	isb	sy
 800e5ac:	f3bf 8f4f 	dsb	sy
 800e5b0:	60bb      	str	r3, [r7, #8]
}
 800e5b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e5b4:	bf00      	nop
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d0fc      	beq.n	800e5b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e5bc:	bf00      	nop
 800e5be:	bf00      	nop
 800e5c0:	3714      	adds	r7, #20
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr
 800e5ca:	bf00      	nop
 800e5cc:	20000098 	.word	0x20000098

0800e5d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5d0:	4b07      	ldr	r3, [pc, #28]	@ (800e5f0 <pxCurrentTCBConst2>)
 800e5d2:	6819      	ldr	r1, [r3, #0]
 800e5d4:	6808      	ldr	r0, [r1, #0]
 800e5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5da:	f380 8809 	msr	PSP, r0
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f04f 0000 	mov.w	r0, #0
 800e5e6:	f380 8811 	msr	BASEPRI, r0
 800e5ea:	4770      	bx	lr
 800e5ec:	f3af 8000 	nop.w

0800e5f0 <pxCurrentTCBConst2>:
 800e5f0:	20000fc0 	.word	0x20000fc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5f4:	bf00      	nop
 800e5f6:	bf00      	nop

0800e5f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5f8:	4808      	ldr	r0, [pc, #32]	@ (800e61c <prvPortStartFirstTask+0x24>)
 800e5fa:	6800      	ldr	r0, [r0, #0]
 800e5fc:	6800      	ldr	r0, [r0, #0]
 800e5fe:	f380 8808 	msr	MSP, r0
 800e602:	f04f 0000 	mov.w	r0, #0
 800e606:	f380 8814 	msr	CONTROL, r0
 800e60a:	b662      	cpsie	i
 800e60c:	b661      	cpsie	f
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	df00      	svc	0
 800e618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e61a:	bf00      	nop
 800e61c:	e000ed08 	.word	0xe000ed08

0800e620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e626:	4b47      	ldr	r3, [pc, #284]	@ (800e744 <xPortStartScheduler+0x124>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4a47      	ldr	r2, [pc, #284]	@ (800e748 <xPortStartScheduler+0x128>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d10b      	bne.n	800e648 <xPortStartScheduler+0x28>
	__asm volatile
 800e630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e634:	f383 8811 	msr	BASEPRI, r3
 800e638:	f3bf 8f6f 	isb	sy
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	613b      	str	r3, [r7, #16]
}
 800e642:	bf00      	nop
 800e644:	bf00      	nop
 800e646:	e7fd      	b.n	800e644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e648:	4b3e      	ldr	r3, [pc, #248]	@ (800e744 <xPortStartScheduler+0x124>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4a3f      	ldr	r2, [pc, #252]	@ (800e74c <xPortStartScheduler+0x12c>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d10b      	bne.n	800e66a <xPortStartScheduler+0x4a>
	__asm volatile
 800e652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	60fb      	str	r3, [r7, #12]
}
 800e664:	bf00      	nop
 800e666:	bf00      	nop
 800e668:	e7fd      	b.n	800e666 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e66a:	4b39      	ldr	r3, [pc, #228]	@ (800e750 <xPortStartScheduler+0x130>)
 800e66c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	b2db      	uxtb	r3, r3
 800e674:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	22ff      	movs	r2, #255	@ 0xff
 800e67a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	b2db      	uxtb	r3, r3
 800e682:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e684:	78fb      	ldrb	r3, [r7, #3]
 800e686:	b2db      	uxtb	r3, r3
 800e688:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	4b31      	ldr	r3, [pc, #196]	@ (800e754 <xPortStartScheduler+0x134>)
 800e690:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e692:	4b31      	ldr	r3, [pc, #196]	@ (800e758 <xPortStartScheduler+0x138>)
 800e694:	2207      	movs	r2, #7
 800e696:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e698:	e009      	b.n	800e6ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e69a:	4b2f      	ldr	r3, [pc, #188]	@ (800e758 <xPortStartScheduler+0x138>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	3b01      	subs	r3, #1
 800e6a0:	4a2d      	ldr	r2, [pc, #180]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e6a4:	78fb      	ldrb	r3, [r7, #3]
 800e6a6:	b2db      	uxtb	r3, r3
 800e6a8:	005b      	lsls	r3, r3, #1
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6ae:	78fb      	ldrb	r3, [r7, #3]
 800e6b0:	b2db      	uxtb	r3, r3
 800e6b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6b6:	2b80      	cmp	r3, #128	@ 0x80
 800e6b8:	d0ef      	beq.n	800e69a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e6ba:	4b27      	ldr	r3, [pc, #156]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f1c3 0307 	rsb	r3, r3, #7
 800e6c2:	2b04      	cmp	r3, #4
 800e6c4:	d00b      	beq.n	800e6de <xPortStartScheduler+0xbe>
	__asm volatile
 800e6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ca:	f383 8811 	msr	BASEPRI, r3
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	f3bf 8f4f 	dsb	sy
 800e6d6:	60bb      	str	r3, [r7, #8]
}
 800e6d8:	bf00      	nop
 800e6da:	bf00      	nop
 800e6dc:	e7fd      	b.n	800e6da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6de:	4b1e      	ldr	r3, [pc, #120]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	021b      	lsls	r3, r3, #8
 800e6e4:	4a1c      	ldr	r2, [pc, #112]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6e8:	4b1b      	ldr	r3, [pc, #108]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e6f0:	4a19      	ldr	r2, [pc, #100]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	b2da      	uxtb	r2, r3
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6fc:	4b17      	ldr	r3, [pc, #92]	@ (800e75c <xPortStartScheduler+0x13c>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a16      	ldr	r2, [pc, #88]	@ (800e75c <xPortStartScheduler+0x13c>)
 800e702:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e706:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e708:	4b14      	ldr	r3, [pc, #80]	@ (800e75c <xPortStartScheduler+0x13c>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a13      	ldr	r2, [pc, #76]	@ (800e75c <xPortStartScheduler+0x13c>)
 800e70e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e712:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e714:	f000 f8da 	bl	800e8cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e718:	4b11      	ldr	r3, [pc, #68]	@ (800e760 <xPortStartScheduler+0x140>)
 800e71a:	2200      	movs	r2, #0
 800e71c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e71e:	f000 f8f9 	bl	800e914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e722:	4b10      	ldr	r3, [pc, #64]	@ (800e764 <xPortStartScheduler+0x144>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4a0f      	ldr	r2, [pc, #60]	@ (800e764 <xPortStartScheduler+0x144>)
 800e728:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e72c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e72e:	f7ff ff63 	bl	800e5f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e732:	f7ff f831 	bl	800d798 <vTaskSwitchContext>
	prvTaskExitError();
 800e736:	f7ff ff1d 	bl	800e574 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e73a:	2300      	movs	r3, #0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3718      	adds	r7, #24
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	e000ed00 	.word	0xe000ed00
 800e748:	410fc271 	.word	0x410fc271
 800e74c:	410fc270 	.word	0x410fc270
 800e750:	e000e400 	.word	0xe000e400
 800e754:	200015ec 	.word	0x200015ec
 800e758:	200015f0 	.word	0x200015f0
 800e75c:	e000ed20 	.word	0xe000ed20
 800e760:	20000098 	.word	0x20000098
 800e764:	e000ef34 	.word	0xe000ef34

0800e768 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	607b      	str	r3, [r7, #4]
}
 800e780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e782:	4b10      	ldr	r3, [pc, #64]	@ (800e7c4 <vPortEnterCritical+0x5c>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	3301      	adds	r3, #1
 800e788:	4a0e      	ldr	r2, [pc, #56]	@ (800e7c4 <vPortEnterCritical+0x5c>)
 800e78a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e78c:	4b0d      	ldr	r3, [pc, #52]	@ (800e7c4 <vPortEnterCritical+0x5c>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b01      	cmp	r3, #1
 800e792:	d110      	bne.n	800e7b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e794:	4b0c      	ldr	r3, [pc, #48]	@ (800e7c8 <vPortEnterCritical+0x60>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d00b      	beq.n	800e7b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a2:	f383 8811 	msr	BASEPRI, r3
 800e7a6:	f3bf 8f6f 	isb	sy
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	603b      	str	r3, [r7, #0]
}
 800e7b0:	bf00      	nop
 800e7b2:	bf00      	nop
 800e7b4:	e7fd      	b.n	800e7b2 <vPortEnterCritical+0x4a>
	}
}
 800e7b6:	bf00      	nop
 800e7b8:	370c      	adds	r7, #12
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop
 800e7c4:	20000098 	.word	0x20000098
 800e7c8:	e000ed04 	.word	0xe000ed04

0800e7cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e7d2:	4b12      	ldr	r3, [pc, #72]	@ (800e81c <vPortExitCritical+0x50>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d10b      	bne.n	800e7f2 <vPortExitCritical+0x26>
	__asm volatile
 800e7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7de:	f383 8811 	msr	BASEPRI, r3
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	f3bf 8f4f 	dsb	sy
 800e7ea:	607b      	str	r3, [r7, #4]
}
 800e7ec:	bf00      	nop
 800e7ee:	bf00      	nop
 800e7f0:	e7fd      	b.n	800e7ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e7f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e81c <vPortExitCritical+0x50>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	4a08      	ldr	r2, [pc, #32]	@ (800e81c <vPortExitCritical+0x50>)
 800e7fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7fc:	4b07      	ldr	r3, [pc, #28]	@ (800e81c <vPortExitCritical+0x50>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d105      	bne.n	800e810 <vPortExitCritical+0x44>
 800e804:	2300      	movs	r3, #0
 800e806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	f383 8811 	msr	BASEPRI, r3
}
 800e80e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e810:	bf00      	nop
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr
 800e81c:	20000098 	.word	0x20000098

0800e820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e820:	f3ef 8009 	mrs	r0, PSP
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	4b15      	ldr	r3, [pc, #84]	@ (800e880 <pxCurrentTCBConst>)
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	f01e 0f10 	tst.w	lr, #16
 800e830:	bf08      	it	eq
 800e832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e83a:	6010      	str	r0, [r2, #0]
 800e83c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e840:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e844:	f380 8811 	msr	BASEPRI, r0
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	f3bf 8f6f 	isb	sy
 800e850:	f7fe ffa2 	bl	800d798 <vTaskSwitchContext>
 800e854:	f04f 0000 	mov.w	r0, #0
 800e858:	f380 8811 	msr	BASEPRI, r0
 800e85c:	bc09      	pop	{r0, r3}
 800e85e:	6819      	ldr	r1, [r3, #0]
 800e860:	6808      	ldr	r0, [r1, #0]
 800e862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e866:	f01e 0f10 	tst.w	lr, #16
 800e86a:	bf08      	it	eq
 800e86c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e870:	f380 8809 	msr	PSP, r0
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop
 800e87c:	f3af 8000 	nop.w

0800e880 <pxCurrentTCBConst>:
 800e880:	20000fc0 	.word	0x20000fc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e884:	bf00      	nop
 800e886:	bf00      	nop

0800e888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
	__asm volatile
 800e88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e892:	f383 8811 	msr	BASEPRI, r3
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	f3bf 8f4f 	dsb	sy
 800e89e:	607b      	str	r3, [r7, #4]
}
 800e8a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e8a2:	f7fe febf 	bl	800d624 <xTaskIncrementTick>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d003      	beq.n	800e8b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e8ac:	4b06      	ldr	r3, [pc, #24]	@ (800e8c8 <xPortSysTickHandler+0x40>)
 800e8ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8b2:	601a      	str	r2, [r3, #0]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	f383 8811 	msr	BASEPRI, r3
}
 800e8be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e8c0:	bf00      	nop
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	e000ed04 	.word	0xe000ed04

0800e8cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e8d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e900 <vPortSetupTimerInterrupt+0x34>)
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e8d6:	4b0b      	ldr	r3, [pc, #44]	@ (800e904 <vPortSetupTimerInterrupt+0x38>)
 800e8d8:	2200      	movs	r2, #0
 800e8da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e8dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e908 <vPortSetupTimerInterrupt+0x3c>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4a0a      	ldr	r2, [pc, #40]	@ (800e90c <vPortSetupTimerInterrupt+0x40>)
 800e8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8e6:	099b      	lsrs	r3, r3, #6
 800e8e8:	4a09      	ldr	r2, [pc, #36]	@ (800e910 <vPortSetupTimerInterrupt+0x44>)
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8ee:	4b04      	ldr	r3, [pc, #16]	@ (800e900 <vPortSetupTimerInterrupt+0x34>)
 800e8f0:	2207      	movs	r2, #7
 800e8f2:	601a      	str	r2, [r3, #0]
}
 800e8f4:	bf00      	nop
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop
 800e900:	e000e010 	.word	0xe000e010
 800e904:	e000e018 	.word	0xe000e018
 800e908:	20000000 	.word	0x20000000
 800e90c:	10624dd3 	.word	0x10624dd3
 800e910:	e000e014 	.word	0xe000e014

0800e914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e914:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e924 <vPortEnableVFP+0x10>
 800e918:	6801      	ldr	r1, [r0, #0]
 800e91a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e91e:	6001      	str	r1, [r0, #0]
 800e920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e922:	bf00      	nop
 800e924:	e000ed88 	.word	0xe000ed88

0800e928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e928:	b480      	push	{r7}
 800e92a:	b085      	sub	sp, #20
 800e92c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e92e:	f3ef 8305 	mrs	r3, IPSR
 800e932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2b0f      	cmp	r3, #15
 800e938:	d915      	bls.n	800e966 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e93a:	4a18      	ldr	r2, [pc, #96]	@ (800e99c <vPortValidateInterruptPriority+0x74>)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	4413      	add	r3, r2
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e944:	4b16      	ldr	r3, [pc, #88]	@ (800e9a0 <vPortValidateInterruptPriority+0x78>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	7afa      	ldrb	r2, [r7, #11]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d20b      	bcs.n	800e966 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e952:	f383 8811 	msr	BASEPRI, r3
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	f3bf 8f4f 	dsb	sy
 800e95e:	607b      	str	r3, [r7, #4]
}
 800e960:	bf00      	nop
 800e962:	bf00      	nop
 800e964:	e7fd      	b.n	800e962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e966:	4b0f      	ldr	r3, [pc, #60]	@ (800e9a4 <vPortValidateInterruptPriority+0x7c>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e96e:	4b0e      	ldr	r3, [pc, #56]	@ (800e9a8 <vPortValidateInterruptPriority+0x80>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	429a      	cmp	r2, r3
 800e974:	d90b      	bls.n	800e98e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e97a:	f383 8811 	msr	BASEPRI, r3
 800e97e:	f3bf 8f6f 	isb	sy
 800e982:	f3bf 8f4f 	dsb	sy
 800e986:	603b      	str	r3, [r7, #0]
}
 800e988:	bf00      	nop
 800e98a:	bf00      	nop
 800e98c:	e7fd      	b.n	800e98a <vPortValidateInterruptPriority+0x62>
	}
 800e98e:	bf00      	nop
 800e990:	3714      	adds	r7, #20
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr
 800e99a:	bf00      	nop
 800e99c:	e000e3f0 	.word	0xe000e3f0
 800e9a0:	200015ec 	.word	0x200015ec
 800e9a4:	e000ed0c 	.word	0xe000ed0c
 800e9a8:	200015f0 	.word	0x200015f0

0800e9ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b08a      	sub	sp, #40	@ 0x28
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e9b8:	f7fe fd78 	bl	800d4ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e9bc:	4b5c      	ldr	r3, [pc, #368]	@ (800eb30 <pvPortMalloc+0x184>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d101      	bne.n	800e9c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e9c4:	f000 f924 	bl	800ec10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e9c8:	4b5a      	ldr	r3, [pc, #360]	@ (800eb34 <pvPortMalloc+0x188>)
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4013      	ands	r3, r2
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f040 8095 	bne.w	800eb00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d01e      	beq.n	800ea1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e9dc:	2208      	movs	r2, #8
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	4413      	add	r3, r2
 800e9e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f003 0307 	and.w	r3, r3, #7
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d015      	beq.n	800ea1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f023 0307 	bic.w	r3, r3, #7
 800e9f4:	3308      	adds	r3, #8
 800e9f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f003 0307 	and.w	r3, r3, #7
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00b      	beq.n	800ea1a <pvPortMalloc+0x6e>
	__asm volatile
 800ea02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	617b      	str	r3, [r7, #20]
}
 800ea14:	bf00      	nop
 800ea16:	bf00      	nop
 800ea18:	e7fd      	b.n	800ea16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d06f      	beq.n	800eb00 <pvPortMalloc+0x154>
 800ea20:	4b45      	ldr	r3, [pc, #276]	@ (800eb38 <pvPortMalloc+0x18c>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d86a      	bhi.n	800eb00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea2a:	4b44      	ldr	r3, [pc, #272]	@ (800eb3c <pvPortMalloc+0x190>)
 800ea2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea2e:	4b43      	ldr	r3, [pc, #268]	@ (800eb3c <pvPortMalloc+0x190>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea34:	e004      	b.n	800ea40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ea36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d903      	bls.n	800ea52 <pvPortMalloc+0xa6>
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d1f1      	bne.n	800ea36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea52:	4b37      	ldr	r3, [pc, #220]	@ (800eb30 <pvPortMalloc+0x184>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d051      	beq.n	800eb00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea5c:	6a3b      	ldr	r3, [r7, #32]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2208      	movs	r2, #8
 800ea62:	4413      	add	r3, r2
 800ea64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	6a3b      	ldr	r3, [r7, #32]
 800ea6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea70:	685a      	ldr	r2, [r3, #4]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	1ad2      	subs	r2, r2, r3
 800ea76:	2308      	movs	r3, #8
 800ea78:	005b      	lsls	r3, r3, #1
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d920      	bls.n	800eac0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	4413      	add	r3, r2
 800ea84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	f003 0307 	and.w	r3, r3, #7
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00b      	beq.n	800eaa8 <pvPortMalloc+0xfc>
	__asm volatile
 800ea90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea94:	f383 8811 	msr	BASEPRI, r3
 800ea98:	f3bf 8f6f 	isb	sy
 800ea9c:	f3bf 8f4f 	dsb	sy
 800eaa0:	613b      	str	r3, [r7, #16]
}
 800eaa2:	bf00      	nop
 800eaa4:	bf00      	nop
 800eaa6:	e7fd      	b.n	800eaa4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eaa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaaa:	685a      	ldr	r2, [r3, #4]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	1ad2      	subs	r2, r2, r3
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eaba:	69b8      	ldr	r0, [r7, #24]
 800eabc:	f000 f90a 	bl	800ecd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eac0:	4b1d      	ldr	r3, [pc, #116]	@ (800eb38 <pvPortMalloc+0x18c>)
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	1ad3      	subs	r3, r2, r3
 800eaca:	4a1b      	ldr	r2, [pc, #108]	@ (800eb38 <pvPortMalloc+0x18c>)
 800eacc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eace:	4b1a      	ldr	r3, [pc, #104]	@ (800eb38 <pvPortMalloc+0x18c>)
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	4b1b      	ldr	r3, [pc, #108]	@ (800eb40 <pvPortMalloc+0x194>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d203      	bcs.n	800eae2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eada:	4b17      	ldr	r3, [pc, #92]	@ (800eb38 <pvPortMalloc+0x18c>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4a18      	ldr	r2, [pc, #96]	@ (800eb40 <pvPortMalloc+0x194>)
 800eae0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae4:	685a      	ldr	r2, [r3, #4]
 800eae6:	4b13      	ldr	r3, [pc, #76]	@ (800eb34 <pvPortMalloc+0x188>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	431a      	orrs	r2, r3
 800eaec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eaf6:	4b13      	ldr	r3, [pc, #76]	@ (800eb44 <pvPortMalloc+0x198>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	3301      	adds	r3, #1
 800eafc:	4a11      	ldr	r2, [pc, #68]	@ (800eb44 <pvPortMalloc+0x198>)
 800eafe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb00:	f7fe fce2 	bl	800d4c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	f003 0307 	and.w	r3, r3, #7
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00b      	beq.n	800eb26 <pvPortMalloc+0x17a>
	__asm volatile
 800eb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	60fb      	str	r3, [r7, #12]
}
 800eb20:	bf00      	nop
 800eb22:	bf00      	nop
 800eb24:	e7fd      	b.n	800eb22 <pvPortMalloc+0x176>
	return pvReturn;
 800eb26:	69fb      	ldr	r3, [r7, #28]
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3728      	adds	r7, #40	@ 0x28
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	20002984 	.word	0x20002984
 800eb34:	20002998 	.word	0x20002998
 800eb38:	20002988 	.word	0x20002988
 800eb3c:	2000297c 	.word	0x2000297c
 800eb40:	2000298c 	.word	0x2000298c
 800eb44:	20002990 	.word	0x20002990

0800eb48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b086      	sub	sp, #24
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d04f      	beq.n	800ebfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb5a:	2308      	movs	r3, #8
 800eb5c:	425b      	negs	r3, r3
 800eb5e:	697a      	ldr	r2, [r7, #20]
 800eb60:	4413      	add	r3, r2
 800eb62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	685a      	ldr	r2, [r3, #4]
 800eb6c:	4b25      	ldr	r3, [pc, #148]	@ (800ec04 <vPortFree+0xbc>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	4013      	ands	r3, r2
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d10b      	bne.n	800eb8e <vPortFree+0x46>
	__asm volatile
 800eb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb7a:	f383 8811 	msr	BASEPRI, r3
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	60fb      	str	r3, [r7, #12]
}
 800eb88:	bf00      	nop
 800eb8a:	bf00      	nop
 800eb8c:	e7fd      	b.n	800eb8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00b      	beq.n	800ebae <vPortFree+0x66>
	__asm volatile
 800eb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb9a:	f383 8811 	msr	BASEPRI, r3
 800eb9e:	f3bf 8f6f 	isb	sy
 800eba2:	f3bf 8f4f 	dsb	sy
 800eba6:	60bb      	str	r3, [r7, #8]
}
 800eba8:	bf00      	nop
 800ebaa:	bf00      	nop
 800ebac:	e7fd      	b.n	800ebaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	685a      	ldr	r2, [r3, #4]
 800ebb2:	4b14      	ldr	r3, [pc, #80]	@ (800ec04 <vPortFree+0xbc>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4013      	ands	r3, r2
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d01e      	beq.n	800ebfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d11a      	bne.n	800ebfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	685a      	ldr	r2, [r3, #4]
 800ebc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ec04 <vPortFree+0xbc>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	43db      	mvns	r3, r3
 800ebce:	401a      	ands	r2, r3
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ebd4:	f7fe fc6a 	bl	800d4ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	685a      	ldr	r2, [r3, #4]
 800ebdc:	4b0a      	ldr	r3, [pc, #40]	@ (800ec08 <vPortFree+0xc0>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	4a09      	ldr	r2, [pc, #36]	@ (800ec08 <vPortFree+0xc0>)
 800ebe4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ebe6:	6938      	ldr	r0, [r7, #16]
 800ebe8:	f000 f874 	bl	800ecd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ebec:	4b07      	ldr	r3, [pc, #28]	@ (800ec0c <vPortFree+0xc4>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	4a06      	ldr	r2, [pc, #24]	@ (800ec0c <vPortFree+0xc4>)
 800ebf4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ebf6:	f7fe fc67 	bl	800d4c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ebfa:	bf00      	nop
 800ebfc:	3718      	adds	r7, #24
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	20002998 	.word	0x20002998
 800ec08:	20002988 	.word	0x20002988
 800ec0c:	20002994 	.word	0x20002994

0800ec10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ec10:	b480      	push	{r7}
 800ec12:	b085      	sub	sp, #20
 800ec14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec16:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ec1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ec1c:	4b27      	ldr	r3, [pc, #156]	@ (800ecbc <prvHeapInit+0xac>)
 800ec1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f003 0307 	and.w	r3, r3, #7
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d00c      	beq.n	800ec44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	3307      	adds	r3, #7
 800ec2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f023 0307 	bic.w	r3, r3, #7
 800ec36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec38:	68ba      	ldr	r2, [r7, #8]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	4a1f      	ldr	r2, [pc, #124]	@ (800ecbc <prvHeapInit+0xac>)
 800ec40:	4413      	add	r3, r2
 800ec42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec48:	4a1d      	ldr	r2, [pc, #116]	@ (800ecc0 <prvHeapInit+0xb0>)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec4e:	4b1c      	ldr	r3, [pc, #112]	@ (800ecc0 <prvHeapInit+0xb0>)
 800ec50:	2200      	movs	r2, #0
 800ec52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	4413      	add	r3, r2
 800ec5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec5c:	2208      	movs	r2, #8
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	1a9b      	subs	r3, r3, r2
 800ec62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f023 0307 	bic.w	r3, r3, #7
 800ec6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	4a15      	ldr	r2, [pc, #84]	@ (800ecc4 <prvHeapInit+0xb4>)
 800ec70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec72:	4b14      	ldr	r3, [pc, #80]	@ (800ecc4 <prvHeapInit+0xb4>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	2200      	movs	r2, #0
 800ec78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec7a:	4b12      	ldr	r3, [pc, #72]	@ (800ecc4 <prvHeapInit+0xb4>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	1ad2      	subs	r2, r2, r3
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec90:	4b0c      	ldr	r3, [pc, #48]	@ (800ecc4 <prvHeapInit+0xb4>)
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	4a0a      	ldr	r2, [pc, #40]	@ (800ecc8 <prvHeapInit+0xb8>)
 800ec9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	4a09      	ldr	r2, [pc, #36]	@ (800eccc <prvHeapInit+0xbc>)
 800eca6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eca8:	4b09      	ldr	r3, [pc, #36]	@ (800ecd0 <prvHeapInit+0xc0>)
 800ecaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ecae:	601a      	str	r2, [r3, #0]
}
 800ecb0:	bf00      	nop
 800ecb2:	3714      	adds	r7, #20
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr
 800ecbc:	200015f4 	.word	0x200015f4
 800ecc0:	2000297c 	.word	0x2000297c
 800ecc4:	20002984 	.word	0x20002984
 800ecc8:	2000298c 	.word	0x2000298c
 800eccc:	20002988 	.word	0x20002988
 800ecd0:	20002998 	.word	0x20002998

0800ecd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b085      	sub	sp, #20
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ecdc:	4b28      	ldr	r3, [pc, #160]	@ (800ed80 <prvInsertBlockIntoFreeList+0xac>)
 800ecde:	60fb      	str	r3, [r7, #12]
 800ece0:	e002      	b.n	800ece8 <prvInsertBlockIntoFreeList+0x14>
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	60fb      	str	r3, [r7, #12]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d8f7      	bhi.n	800ece2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d108      	bne.n	800ed16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	685a      	ldr	r2, [r3, #4]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	441a      	add	r2, r3
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	68ba      	ldr	r2, [r7, #8]
 800ed20:	441a      	add	r2, r3
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d118      	bne.n	800ed5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	4b15      	ldr	r3, [pc, #84]	@ (800ed84 <prvInsertBlockIntoFreeList+0xb0>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d00d      	beq.n	800ed52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	685a      	ldr	r2, [r3, #4]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	441a      	add	r2, r3
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	601a      	str	r2, [r3, #0]
 800ed50:	e008      	b.n	800ed64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed52:	4b0c      	ldr	r3, [pc, #48]	@ (800ed84 <prvInsertBlockIntoFreeList+0xb0>)
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	601a      	str	r2, [r3, #0]
 800ed5a:	e003      	b.n	800ed64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d002      	beq.n	800ed72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed72:	bf00      	nop
 800ed74:	3714      	adds	r7, #20
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	2000297c 	.word	0x2000297c
 800ed84:	20002984 	.word	0x20002984

0800ed88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	4912      	ldr	r1, [pc, #72]	@ (800edd8 <MX_USB_DEVICE_Init+0x50>)
 800ed90:	4812      	ldr	r0, [pc, #72]	@ (800eddc <MX_USB_DEVICE_Init+0x54>)
 800ed92:	f7fb fedd 	bl	800ab50 <USBD_Init>
 800ed96:	4603      	mov	r3, r0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d001      	beq.n	800eda0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ed9c:	f7f3 fcb0 	bl	8002700 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800eda0:	490f      	ldr	r1, [pc, #60]	@ (800ede0 <MX_USB_DEVICE_Init+0x58>)
 800eda2:	480e      	ldr	r0, [pc, #56]	@ (800eddc <MX_USB_DEVICE_Init+0x54>)
 800eda4:	f7fb ff04 	bl	800abb0 <USBD_RegisterClass>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d001      	beq.n	800edb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800edae:	f7f3 fca7 	bl	8002700 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800edb2:	490c      	ldr	r1, [pc, #48]	@ (800ede4 <MX_USB_DEVICE_Init+0x5c>)
 800edb4:	4809      	ldr	r0, [pc, #36]	@ (800eddc <MX_USB_DEVICE_Init+0x54>)
 800edb6:	f7fb fdfb 	bl	800a9b0 <USBD_CDC_RegisterInterface>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d001      	beq.n	800edc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800edc0:	f7f3 fc9e 	bl	8002700 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800edc4:	4805      	ldr	r0, [pc, #20]	@ (800eddc <MX_USB_DEVICE_Init+0x54>)
 800edc6:	f7fb ff29 	bl	800ac1c <USBD_Start>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d001      	beq.n	800edd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800edd0:	f7f3 fc96 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800edd4:	bf00      	nop
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	200000b8 	.word	0x200000b8
 800eddc:	2000299c 	.word	0x2000299c
 800ede0:	20000018 	.word	0x20000018
 800ede4:	200000a4 	.word	0x200000a4

0800ede8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800edec:	2200      	movs	r2, #0
 800edee:	4905      	ldr	r1, [pc, #20]	@ (800ee04 <CDC_Init_FS+0x1c>)
 800edf0:	4805      	ldr	r0, [pc, #20]	@ (800ee08 <CDC_Init_FS+0x20>)
 800edf2:	f7fb fdf7 	bl	800a9e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800edf6:	4905      	ldr	r1, [pc, #20]	@ (800ee0c <CDC_Init_FS+0x24>)
 800edf8:	4803      	ldr	r0, [pc, #12]	@ (800ee08 <CDC_Init_FS+0x20>)
 800edfa:	f7fb fe15 	bl	800aa28 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800edfe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	20003478 	.word	0x20003478
 800ee08:	2000299c 	.word	0x2000299c
 800ee0c:	20002c78 	.word	0x20002c78

0800ee10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ee10:	b480      	push	{r7}
 800ee12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ee14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	4603      	mov	r3, r0
 800ee28:	6039      	str	r1, [r7, #0]
 800ee2a:	71fb      	strb	r3, [r7, #7]
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ee30:	79fb      	ldrb	r3, [r7, #7]
 800ee32:	2b23      	cmp	r3, #35	@ 0x23
 800ee34:	d85c      	bhi.n	800eef0 <CDC_Control_FS+0xd0>
 800ee36:	a201      	add	r2, pc, #4	@ (adr r2, 800ee3c <CDC_Control_FS+0x1c>)
 800ee38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3c:	0800eef1 	.word	0x0800eef1
 800ee40:	0800eef1 	.word	0x0800eef1
 800ee44:	0800eef1 	.word	0x0800eef1
 800ee48:	0800eef1 	.word	0x0800eef1
 800ee4c:	0800eef1 	.word	0x0800eef1
 800ee50:	0800eef1 	.word	0x0800eef1
 800ee54:	0800eef1 	.word	0x0800eef1
 800ee58:	0800eef1 	.word	0x0800eef1
 800ee5c:	0800eef1 	.word	0x0800eef1
 800ee60:	0800eef1 	.word	0x0800eef1
 800ee64:	0800eef1 	.word	0x0800eef1
 800ee68:	0800eef1 	.word	0x0800eef1
 800ee6c:	0800eef1 	.word	0x0800eef1
 800ee70:	0800eef1 	.word	0x0800eef1
 800ee74:	0800eef1 	.word	0x0800eef1
 800ee78:	0800eef1 	.word	0x0800eef1
 800ee7c:	0800eef1 	.word	0x0800eef1
 800ee80:	0800eef1 	.word	0x0800eef1
 800ee84:	0800eef1 	.word	0x0800eef1
 800ee88:	0800eef1 	.word	0x0800eef1
 800ee8c:	0800eef1 	.word	0x0800eef1
 800ee90:	0800eef1 	.word	0x0800eef1
 800ee94:	0800eef1 	.word	0x0800eef1
 800ee98:	0800eef1 	.word	0x0800eef1
 800ee9c:	0800eef1 	.word	0x0800eef1
 800eea0:	0800eef1 	.word	0x0800eef1
 800eea4:	0800eef1 	.word	0x0800eef1
 800eea8:	0800eef1 	.word	0x0800eef1
 800eeac:	0800eef1 	.word	0x0800eef1
 800eeb0:	0800eef1 	.word	0x0800eef1
 800eeb4:	0800eef1 	.word	0x0800eef1
 800eeb8:	0800eef1 	.word	0x0800eef1
 800eebc:	0800eecd 	.word	0x0800eecd
 800eec0:	0800eedf 	.word	0x0800eedf
 800eec4:	0800eef1 	.word	0x0800eef1
 800eec8:	0800eef1 	.word	0x0800eef1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800eecc:	4b0c      	ldr	r3, [pc, #48]	@ (800ef00 <CDC_Control_FS+0xe0>)
 800eece:	683a      	ldr	r2, [r7, #0]
 800eed0:	6810      	ldr	r0, [r2, #0]
 800eed2:	6018      	str	r0, [r3, #0]
 800eed4:	8891      	ldrh	r1, [r2, #4]
 800eed6:	7992      	ldrb	r2, [r2, #6]
 800eed8:	8099      	strh	r1, [r3, #4]
 800eeda:	719a      	strb	r2, [r3, #6]
    break;
 800eedc:	e009      	b.n	800eef2 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	4a07      	ldr	r2, [pc, #28]	@ (800ef00 <CDC_Control_FS+0xe0>)
 800eee2:	6810      	ldr	r0, [r2, #0]
 800eee4:	6018      	str	r0, [r3, #0]
 800eee6:	8891      	ldrh	r1, [r2, #4]
 800eee8:	7992      	ldrb	r2, [r2, #6]
 800eeea:	8099      	strh	r1, [r3, #4]
 800eeec:	719a      	strb	r2, [r3, #6]
    break;
 800eeee:	e000      	b.n	800eef2 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eef0:	bf00      	nop
  }

  return (USBD_OK);
 800eef2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	2000009c 	.word	0x2000009c

0800ef04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ef0e:	6879      	ldr	r1, [r7, #4]
 800ef10:	4805      	ldr	r0, [pc, #20]	@ (800ef28 <CDC_Receive_FS+0x24>)
 800ef12:	f7fb fd89 	bl	800aa28 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ef16:	4804      	ldr	r0, [pc, #16]	@ (800ef28 <CDC_Receive_FS+0x24>)
 800ef18:	f7fb fde4 	bl	800aae4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ef1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3708      	adds	r7, #8
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	2000299c 	.word	0x2000299c

0800ef2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	460b      	mov	r3, r1
 800ef36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ef3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ef74 <CDC_Transmit_FS+0x48>)
 800ef3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d001      	beq.n	800ef52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e00b      	b.n	800ef6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ef52:	887b      	ldrh	r3, [r7, #2]
 800ef54:	461a      	mov	r2, r3
 800ef56:	6879      	ldr	r1, [r7, #4]
 800ef58:	4806      	ldr	r0, [pc, #24]	@ (800ef74 <CDC_Transmit_FS+0x48>)
 800ef5a:	f7fb fd43 	bl	800a9e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ef5e:	4805      	ldr	r0, [pc, #20]	@ (800ef74 <CDC_Transmit_FS+0x48>)
 800ef60:	f7fb fd80 	bl	800aa64 <USBD_CDC_TransmitPacket>
 800ef64:	4603      	mov	r3, r0
 800ef66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ef68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3710      	adds	r7, #16
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop
 800ef74:	2000299c 	.word	0x2000299c

0800ef78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b087      	sub	sp, #28
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	4613      	mov	r3, r2
 800ef84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ef86:	2300      	movs	r3, #0
 800ef88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ef8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	371c      	adds	r7, #28
 800ef92:	46bd      	mov	sp, r7
 800ef94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef98:	4770      	bx	lr
	...

0800ef9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	4603      	mov	r3, r0
 800efa4:	6039      	str	r1, [r7, #0]
 800efa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	2212      	movs	r2, #18
 800efac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800efae:	4b03      	ldr	r3, [pc, #12]	@ (800efbc <USBD_FS_DeviceDescriptor+0x20>)
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	370c      	adds	r7, #12
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr
 800efbc:	200000d8 	.word	0x200000d8

0800efc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	4603      	mov	r3, r0
 800efc8:	6039      	str	r1, [r7, #0]
 800efca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	2204      	movs	r2, #4
 800efd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800efd2:	4b03      	ldr	r3, [pc, #12]	@ (800efe0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr
 800efe0:	200000f8 	.word	0x200000f8

0800efe4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	4603      	mov	r3, r0
 800efec:	6039      	str	r1, [r7, #0]
 800efee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eff0:	79fb      	ldrb	r3, [r7, #7]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d105      	bne.n	800f002 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	4907      	ldr	r1, [pc, #28]	@ (800f018 <USBD_FS_ProductStrDescriptor+0x34>)
 800effa:	4808      	ldr	r0, [pc, #32]	@ (800f01c <USBD_FS_ProductStrDescriptor+0x38>)
 800effc:	f7fc ffe8 	bl	800bfd0 <USBD_GetString>
 800f000:	e004      	b.n	800f00c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f002:	683a      	ldr	r2, [r7, #0]
 800f004:	4904      	ldr	r1, [pc, #16]	@ (800f018 <USBD_FS_ProductStrDescriptor+0x34>)
 800f006:	4805      	ldr	r0, [pc, #20]	@ (800f01c <USBD_FS_ProductStrDescriptor+0x38>)
 800f008:	f7fc ffe2 	bl	800bfd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f00c:	4b02      	ldr	r3, [pc, #8]	@ (800f018 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	20003c78 	.word	0x20003c78
 800f01c:	080124a4 	.word	0x080124a4

0800f020 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	4603      	mov	r3, r0
 800f028:	6039      	str	r1, [r7, #0]
 800f02a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f02c:	683a      	ldr	r2, [r7, #0]
 800f02e:	4904      	ldr	r1, [pc, #16]	@ (800f040 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f030:	4804      	ldr	r0, [pc, #16]	@ (800f044 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f032:	f7fc ffcd 	bl	800bfd0 <USBD_GetString>
  return USBD_StrDesc;
 800f036:	4b02      	ldr	r3, [pc, #8]	@ (800f040 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	20003c78 	.word	0x20003c78
 800f044:	080124bc 	.word	0x080124bc

0800f048 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b082      	sub	sp, #8
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	4603      	mov	r3, r0
 800f050:	6039      	str	r1, [r7, #0]
 800f052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	221a      	movs	r2, #26
 800f058:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f05a:	f000 f855 	bl	800f108 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f05e:	4b02      	ldr	r3, [pc, #8]	@ (800f068 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f060:	4618      	mov	r0, r3
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	200000fc 	.word	0x200000fc

0800f06c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	4603      	mov	r3, r0
 800f074:	6039      	str	r1, [r7, #0]
 800f076:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f078:	79fb      	ldrb	r3, [r7, #7]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d105      	bne.n	800f08a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f07e:	683a      	ldr	r2, [r7, #0]
 800f080:	4907      	ldr	r1, [pc, #28]	@ (800f0a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f082:	4808      	ldr	r0, [pc, #32]	@ (800f0a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f084:	f7fc ffa4 	bl	800bfd0 <USBD_GetString>
 800f088:	e004      	b.n	800f094 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f08a:	683a      	ldr	r2, [r7, #0]
 800f08c:	4904      	ldr	r1, [pc, #16]	@ (800f0a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f08e:	4805      	ldr	r0, [pc, #20]	@ (800f0a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f090:	f7fc ff9e 	bl	800bfd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f094:	4b02      	ldr	r3, [pc, #8]	@ (800f0a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f096:	4618      	mov	r0, r3
 800f098:	3708      	adds	r7, #8
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	20003c78 	.word	0x20003c78
 800f0a4:	080124d0 	.word	0x080124d0

0800f0a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	6039      	str	r1, [r7, #0]
 800f0b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f0b4:	79fb      	ldrb	r3, [r7, #7]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d105      	bne.n	800f0c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f0ba:	683a      	ldr	r2, [r7, #0]
 800f0bc:	4907      	ldr	r1, [pc, #28]	@ (800f0dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f0be:	4808      	ldr	r0, [pc, #32]	@ (800f0e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f0c0:	f7fc ff86 	bl	800bfd0 <USBD_GetString>
 800f0c4:	e004      	b.n	800f0d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f0c6:	683a      	ldr	r2, [r7, #0]
 800f0c8:	4904      	ldr	r1, [pc, #16]	@ (800f0dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f0ca:	4805      	ldr	r0, [pc, #20]	@ (800f0e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f0cc:	f7fc ff80 	bl	800bfd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f0d0:	4b02      	ldr	r3, [pc, #8]	@ (800f0dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3708      	adds	r7, #8
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	20003c78 	.word	0x20003c78
 800f0e0:	080124dc 	.word	0x080124dc

0800f0e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	6039      	str	r1, [r7, #0]
 800f0ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	220c      	movs	r2, #12
 800f0f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f0f6:	4b03      	ldr	r3, [pc, #12]	@ (800f104 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	370c      	adds	r7, #12
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr
 800f104:	200000ec 	.word	0x200000ec

0800f108 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f10e:	4b0f      	ldr	r3, [pc, #60]	@ (800f14c <Get_SerialNum+0x44>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f114:	4b0e      	ldr	r3, [pc, #56]	@ (800f150 <Get_SerialNum+0x48>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f11a:	4b0e      	ldr	r3, [pc, #56]	@ (800f154 <Get_SerialNum+0x4c>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f120:	68fa      	ldr	r2, [r7, #12]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4413      	add	r3, r2
 800f126:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d009      	beq.n	800f142 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f12e:	2208      	movs	r2, #8
 800f130:	4909      	ldr	r1, [pc, #36]	@ (800f158 <Get_SerialNum+0x50>)
 800f132:	68f8      	ldr	r0, [r7, #12]
 800f134:	f000 f814 	bl	800f160 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f138:	2204      	movs	r2, #4
 800f13a:	4908      	ldr	r1, [pc, #32]	@ (800f15c <Get_SerialNum+0x54>)
 800f13c:	68b8      	ldr	r0, [r7, #8]
 800f13e:	f000 f80f 	bl	800f160 <IntToUnicode>
  }
}
 800f142:	bf00      	nop
 800f144:	3710      	adds	r7, #16
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	1fff7590 	.word	0x1fff7590
 800f150:	1fff7594 	.word	0x1fff7594
 800f154:	1fff7598 	.word	0x1fff7598
 800f158:	200000fe 	.word	0x200000fe
 800f15c:	2000010e 	.word	0x2000010e

0800f160 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f160:	b480      	push	{r7}
 800f162:	b087      	sub	sp, #28
 800f164:	af00      	add	r7, sp, #0
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	4613      	mov	r3, r2
 800f16c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f16e:	2300      	movs	r3, #0
 800f170:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f172:	2300      	movs	r3, #0
 800f174:	75fb      	strb	r3, [r7, #23]
 800f176:	e027      	b.n	800f1c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	0f1b      	lsrs	r3, r3, #28
 800f17c:	2b09      	cmp	r3, #9
 800f17e:	d80b      	bhi.n	800f198 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	0f1b      	lsrs	r3, r3, #28
 800f184:	b2da      	uxtb	r2, r3
 800f186:	7dfb      	ldrb	r3, [r7, #23]
 800f188:	005b      	lsls	r3, r3, #1
 800f18a:	4619      	mov	r1, r3
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	440b      	add	r3, r1
 800f190:	3230      	adds	r2, #48	@ 0x30
 800f192:	b2d2      	uxtb	r2, r2
 800f194:	701a      	strb	r2, [r3, #0]
 800f196:	e00a      	b.n	800f1ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	0f1b      	lsrs	r3, r3, #28
 800f19c:	b2da      	uxtb	r2, r3
 800f19e:	7dfb      	ldrb	r3, [r7, #23]
 800f1a0:	005b      	lsls	r3, r3, #1
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	440b      	add	r3, r1
 800f1a8:	3237      	adds	r2, #55	@ 0x37
 800f1aa:	b2d2      	uxtb	r2, r2
 800f1ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	011b      	lsls	r3, r3, #4
 800f1b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f1b4:	7dfb      	ldrb	r3, [r7, #23]
 800f1b6:	005b      	lsls	r3, r3, #1
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	68ba      	ldr	r2, [r7, #8]
 800f1bc:	4413      	add	r3, r2
 800f1be:	2200      	movs	r2, #0
 800f1c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f1c2:	7dfb      	ldrb	r3, [r7, #23]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	75fb      	strb	r3, [r7, #23]
 800f1c8:	7dfa      	ldrb	r2, [r7, #23]
 800f1ca:	79fb      	ldrb	r3, [r7, #7]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d3d3      	bcc.n	800f178 <IntToUnicode+0x18>
  }
}
 800f1d0:	bf00      	nop
 800f1d2:	bf00      	nop
 800f1d4:	371c      	adds	r7, #28
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr
	...

0800f1e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b0ae      	sub	sp, #184	@ 0xb8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f1e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	601a      	str	r2, [r3, #0]
 800f1f0:	605a      	str	r2, [r3, #4]
 800f1f2:	609a      	str	r2, [r3, #8]
 800f1f4:	60da      	str	r2, [r3, #12]
 800f1f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f1f8:	f107 0318 	add.w	r3, r7, #24
 800f1fc:	228c      	movs	r2, #140	@ 0x8c
 800f1fe:	2100      	movs	r1, #0
 800f200:	4618      	mov	r0, r3
 800f202:	f001 f98e 	bl	8010522 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f20e:	d173      	bne.n	800f2f8 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f210:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f214:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800f216:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800f21a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800f21e:	2301      	movs	r3, #1
 800f220:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800f222:	2301      	movs	r3, #1
 800f224:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800f226:	2318      	movs	r3, #24
 800f228:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800f22a:	2302      	movs	r3, #2
 800f22c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800f22e:	2302      	movs	r3, #2
 800f230:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800f232:	2302      	movs	r3, #2
 800f234:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800f236:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f23a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f23c:	f107 0318 	add.w	r3, r7, #24
 800f240:	4618      	mov	r0, r3
 800f242:	f7f7 ff5d 	bl	8007100 <HAL_RCCEx_PeriphCLKConfig>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d001      	beq.n	800f250 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800f24c:	f7f3 fa58 	bl	8002700 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f250:	4b2b      	ldr	r3, [pc, #172]	@ (800f300 <HAL_PCD_MspInit+0x120>)
 800f252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f254:	4a2a      	ldr	r2, [pc, #168]	@ (800f300 <HAL_PCD_MspInit+0x120>)
 800f256:	f043 0301 	orr.w	r3, r3, #1
 800f25a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f25c:	4b28      	ldr	r3, [pc, #160]	@ (800f300 <HAL_PCD_MspInit+0x120>)
 800f25e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f260:	f003 0301 	and.w	r3, r3, #1
 800f264:	617b      	str	r3, [r7, #20]
 800f266:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f268:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f26c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f270:	2302      	movs	r3, #2
 800f272:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f276:	2300      	movs	r3, #0
 800f278:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f27c:	2303      	movs	r3, #3
 800f27e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f282:	230a      	movs	r3, #10
 800f284:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f288:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800f28c:	4619      	mov	r1, r3
 800f28e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f292:	f7f4 fe19 	bl	8003ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f296:	4b1a      	ldr	r3, [pc, #104]	@ (800f300 <HAL_PCD_MspInit+0x120>)
 800f298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f29a:	4a19      	ldr	r2, [pc, #100]	@ (800f300 <HAL_PCD_MspInit+0x120>)
 800f29c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f2a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f2a2:	4b17      	ldr	r3, [pc, #92]	@ (800f300 <HAL_PCD_MspInit+0x120>)
 800f2a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f2aa:	613b      	str	r3, [r7, #16]
 800f2ac:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f2ae:	4b14      	ldr	r3, [pc, #80]	@ (800f300 <HAL_PCD_MspInit+0x120>)
 800f2b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d114      	bne.n	800f2e4 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f2ba:	4b11      	ldr	r3, [pc, #68]	@ (800f300 <HAL_PCD_MspInit+0x120>)
 800f2bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2be:	4a10      	ldr	r2, [pc, #64]	@ (800f300 <HAL_PCD_MspInit+0x120>)
 800f2c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f2c4:	6593      	str	r3, [r2, #88]	@ 0x58
 800f2c6:	4b0e      	ldr	r3, [pc, #56]	@ (800f300 <HAL_PCD_MspInit+0x120>)
 800f2c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f2ce:	60fb      	str	r3, [r7, #12]
 800f2d0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800f2d2:	f7f7 f8ad 	bl	8006430 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f2d6:	4b0a      	ldr	r3, [pc, #40]	@ (800f300 <HAL_PCD_MspInit+0x120>)
 800f2d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2da:	4a09      	ldr	r2, [pc, #36]	@ (800f300 <HAL_PCD_MspInit+0x120>)
 800f2dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f2e0:	6593      	str	r3, [r2, #88]	@ 0x58
 800f2e2:	e001      	b.n	800f2e8 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800f2e4:	f7f7 f8a4 	bl	8006430 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	2105      	movs	r1, #5
 800f2ec:	2043      	movs	r0, #67	@ 0x43
 800f2ee:	f7f4 fdc1 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f2f2:	2043      	movs	r0, #67	@ 0x43
 800f2f4:	f7f4 fdda 	bl	8003eac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f2f8:	bf00      	nop
 800f2fa:	37b8      	adds	r7, #184	@ 0xb8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	40021000 	.word	0x40021000

0800f304 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f318:	4619      	mov	r1, r3
 800f31a:	4610      	mov	r0, r2
 800f31c:	f7fb fccb 	bl	800acb6 <USBD_LL_SetupStage>
}
 800f320:	bf00      	nop
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	460b      	mov	r3, r1
 800f332:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f33a:	78fa      	ldrb	r2, [r7, #3]
 800f33c:	6879      	ldr	r1, [r7, #4]
 800f33e:	4613      	mov	r3, r2
 800f340:	00db      	lsls	r3, r3, #3
 800f342:	4413      	add	r3, r2
 800f344:	009b      	lsls	r3, r3, #2
 800f346:	440b      	add	r3, r1
 800f348:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	78fb      	ldrb	r3, [r7, #3]
 800f350:	4619      	mov	r1, r3
 800f352:	f7fb fd05 	bl	800ad60 <USBD_LL_DataOutStage>
}
 800f356:	bf00      	nop
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b082      	sub	sp, #8
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
 800f366:	460b      	mov	r3, r1
 800f368:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f370:	78fa      	ldrb	r2, [r7, #3]
 800f372:	6879      	ldr	r1, [r7, #4]
 800f374:	4613      	mov	r3, r2
 800f376:	00db      	lsls	r3, r3, #3
 800f378:	4413      	add	r3, r2
 800f37a:	009b      	lsls	r3, r3, #2
 800f37c:	440b      	add	r3, r1
 800f37e:	3320      	adds	r3, #32
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	78fb      	ldrb	r3, [r7, #3]
 800f384:	4619      	mov	r1, r3
 800f386:	f7fb fd9e 	bl	800aec6 <USBD_LL_DataInStage>
}
 800f38a:	bf00      	nop
 800f38c:	3708      	adds	r7, #8
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}

0800f392 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f392:	b580      	push	{r7, lr}
 800f394:	b082      	sub	sp, #8
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7fb fed8 	bl	800b156 <USBD_LL_SOF>
}
 800f3a6:	bf00      	nop
 800f3a8:	3708      	adds	r7, #8
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}

0800f3ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3ae:	b580      	push	{r7, lr}
 800f3b0:	b084      	sub	sp, #16
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	79db      	ldrb	r3, [r3, #7]
 800f3be:	2b02      	cmp	r3, #2
 800f3c0:	d001      	beq.n	800f3c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f3c2:	f7f3 f99d 	bl	8002700 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3cc:	7bfa      	ldrb	r2, [r7, #15]
 800f3ce:	4611      	mov	r1, r2
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fb fe7c 	bl	800b0ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fb fe24 	bl	800b02a <USBD_LL_Reset>
}
 800f3e2:	bf00      	nop
 800f3e4:	3710      	adds	r7, #16
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
	...

0800f3ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	6812      	ldr	r2, [r2, #0]
 800f402:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f406:	f043 0301 	orr.w	r3, r3, #1
 800f40a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f412:	4618      	mov	r0, r3
 800f414:	f7fb fe6b 	bl	800b0ee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	7adb      	ldrb	r3, [r3, #11]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d005      	beq.n	800f42c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f420:	4b04      	ldr	r3, [pc, #16]	@ (800f434 <HAL_PCD_SuspendCallback+0x48>)
 800f422:	691b      	ldr	r3, [r3, #16]
 800f424:	4a03      	ldr	r2, [pc, #12]	@ (800f434 <HAL_PCD_SuspendCallback+0x48>)
 800f426:	f043 0306 	orr.w	r3, r3, #6
 800f42a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f42c:	bf00      	nop
 800f42e:	3708      	adds	r7, #8
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}
 800f434:	e000ed00 	.word	0xe000ed00

0800f438 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	687a      	ldr	r2, [r7, #4]
 800f44c:	6812      	ldr	r2, [r2, #0]
 800f44e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f452:	f023 0301 	bic.w	r3, r3, #1
 800f456:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	7adb      	ldrb	r3, [r3, #11]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d007      	beq.n	800f470 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f460:	4b08      	ldr	r3, [pc, #32]	@ (800f484 <HAL_PCD_ResumeCallback+0x4c>)
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	4a07      	ldr	r2, [pc, #28]	@ (800f484 <HAL_PCD_ResumeCallback+0x4c>)
 800f466:	f023 0306 	bic.w	r3, r3, #6
 800f46a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f46c:	f000 faf6 	bl	800fa5c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f476:	4618      	mov	r0, r3
 800f478:	f7fb fe55 	bl	800b126 <USBD_LL_Resume>
}
 800f47c:	bf00      	nop
 800f47e:	3708      	adds	r7, #8
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	e000ed00 	.word	0xe000ed00

0800f488 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	460b      	mov	r3, r1
 800f492:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f49a:	78fa      	ldrb	r2, [r7, #3]
 800f49c:	4611      	mov	r1, r2
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fb feab 	bl	800b1fa <USBD_LL_IsoOUTIncomplete>
}
 800f4a4:	bf00      	nop
 800f4a6:	3708      	adds	r7, #8
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4be:	78fa      	ldrb	r2, [r7, #3]
 800f4c0:	4611      	mov	r1, r2
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fb fe67 	bl	800b196 <USBD_LL_IsoINIncomplete>
}
 800f4c8:	bf00      	nop
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fb febd 	bl	800b25e <USBD_LL_DevConnected>
}
 800f4e4:	bf00      	nop
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fb feba 	bl	800b274 <USBD_LL_DevDisconnected>
}
 800f500:	bf00      	nop
 800f502:	3708      	adds	r7, #8
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d13c      	bne.n	800f592 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f518:	4a20      	ldr	r2, [pc, #128]	@ (800f59c <USBD_LL_Init+0x94>)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a1e      	ldr	r2, [pc, #120]	@ (800f59c <USBD_LL_Init+0x94>)
 800f524:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f528:	4b1c      	ldr	r3, [pc, #112]	@ (800f59c <USBD_LL_Init+0x94>)
 800f52a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f52e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f530:	4b1a      	ldr	r3, [pc, #104]	@ (800f59c <USBD_LL_Init+0x94>)
 800f532:	2206      	movs	r2, #6
 800f534:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f536:	4b19      	ldr	r3, [pc, #100]	@ (800f59c <USBD_LL_Init+0x94>)
 800f538:	2202      	movs	r2, #2
 800f53a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f53c:	4b17      	ldr	r3, [pc, #92]	@ (800f59c <USBD_LL_Init+0x94>)
 800f53e:	2202      	movs	r2, #2
 800f540:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f542:	4b16      	ldr	r3, [pc, #88]	@ (800f59c <USBD_LL_Init+0x94>)
 800f544:	2200      	movs	r2, #0
 800f546:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f548:	4b14      	ldr	r3, [pc, #80]	@ (800f59c <USBD_LL_Init+0x94>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f54e:	4b13      	ldr	r3, [pc, #76]	@ (800f59c <USBD_LL_Init+0x94>)
 800f550:	2200      	movs	r2, #0
 800f552:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f554:	4b11      	ldr	r3, [pc, #68]	@ (800f59c <USBD_LL_Init+0x94>)
 800f556:	2200      	movs	r2, #0
 800f558:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f55a:	4b10      	ldr	r3, [pc, #64]	@ (800f59c <USBD_LL_Init+0x94>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f560:	4b0e      	ldr	r3, [pc, #56]	@ (800f59c <USBD_LL_Init+0x94>)
 800f562:	2200      	movs	r2, #0
 800f564:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f566:	480d      	ldr	r0, [pc, #52]	@ (800f59c <USBD_LL_Init+0x94>)
 800f568:	f7f5 fd67 	bl	800503a <HAL_PCD_Init>
 800f56c:	4603      	mov	r3, r0
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d001      	beq.n	800f576 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f572:	f7f3 f8c5 	bl	8002700 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f576:	2180      	movs	r1, #128	@ 0x80
 800f578:	4808      	ldr	r0, [pc, #32]	@ (800f59c <USBD_LL_Init+0x94>)
 800f57a:	f7f6 fec0 	bl	80062fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f57e:	2240      	movs	r2, #64	@ 0x40
 800f580:	2100      	movs	r1, #0
 800f582:	4806      	ldr	r0, [pc, #24]	@ (800f59c <USBD_LL_Init+0x94>)
 800f584:	f7f6 fe74 	bl	8006270 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f588:	2280      	movs	r2, #128	@ 0x80
 800f58a:	2101      	movs	r1, #1
 800f58c:	4803      	ldr	r0, [pc, #12]	@ (800f59c <USBD_LL_Init+0x94>)
 800f58e:	f7f6 fe6f 	bl	8006270 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f592:	2300      	movs	r3, #0
}
 800f594:	4618      	mov	r0, r3
 800f596:	3708      	adds	r7, #8
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	20003e78 	.word	0x20003e78

0800f5a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7f5 fe4e 	bl	8005258 <HAL_PCD_Start>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f5c0:	7bbb      	ldrb	r3, [r7, #14]
 800f5c2:	2b03      	cmp	r3, #3
 800f5c4:	d816      	bhi.n	800f5f4 <USBD_LL_Start+0x54>
 800f5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f5cc <USBD_LL_Start+0x2c>)
 800f5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5cc:	0800f5dd 	.word	0x0800f5dd
 800f5d0:	0800f5e3 	.word	0x0800f5e3
 800f5d4:	0800f5e9 	.word	0x0800f5e9
 800f5d8:	0800f5ef 	.word	0x0800f5ef
    case HAL_OK :
      usb_status = USBD_OK;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	73fb      	strb	r3, [r7, #15]
    break;
 800f5e0:	e00b      	b.n	800f5fa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f5e2:	2303      	movs	r3, #3
 800f5e4:	73fb      	strb	r3, [r7, #15]
    break;
 800f5e6:	e008      	b.n	800f5fa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f5ec:	e005      	b.n	800f5fa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f5ee:	2303      	movs	r3, #3
 800f5f0:	73fb      	strb	r3, [r7, #15]
    break;
 800f5f2:	e002      	b.n	800f5fa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f5f4:	2303      	movs	r3, #3
 800f5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f5f8:	bf00      	nop
  }
  return usb_status;
 800f5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3710      	adds	r7, #16
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	4608      	mov	r0, r1
 800f60e:	4611      	mov	r1, r2
 800f610:	461a      	mov	r2, r3
 800f612:	4603      	mov	r3, r0
 800f614:	70fb      	strb	r3, [r7, #3]
 800f616:	460b      	mov	r3, r1
 800f618:	70bb      	strb	r3, [r7, #2]
 800f61a:	4613      	mov	r3, r2
 800f61c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f61e:	2300      	movs	r3, #0
 800f620:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f622:	2300      	movs	r3, #0
 800f624:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f62c:	78bb      	ldrb	r3, [r7, #2]
 800f62e:	883a      	ldrh	r2, [r7, #0]
 800f630:	78f9      	ldrb	r1, [r7, #3]
 800f632:	f7f6 fafa 	bl	8005c2a <HAL_PCD_EP_Open>
 800f636:	4603      	mov	r3, r0
 800f638:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f63a:	7bbb      	ldrb	r3, [r7, #14]
 800f63c:	2b03      	cmp	r3, #3
 800f63e:	d817      	bhi.n	800f670 <USBD_LL_OpenEP+0x6c>
 800f640:	a201      	add	r2, pc, #4	@ (adr r2, 800f648 <USBD_LL_OpenEP+0x44>)
 800f642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f646:	bf00      	nop
 800f648:	0800f659 	.word	0x0800f659
 800f64c:	0800f65f 	.word	0x0800f65f
 800f650:	0800f665 	.word	0x0800f665
 800f654:	0800f66b 	.word	0x0800f66b
    case HAL_OK :
      usb_status = USBD_OK;
 800f658:	2300      	movs	r3, #0
 800f65a:	73fb      	strb	r3, [r7, #15]
    break;
 800f65c:	e00b      	b.n	800f676 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f65e:	2303      	movs	r3, #3
 800f660:	73fb      	strb	r3, [r7, #15]
    break;
 800f662:	e008      	b.n	800f676 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f664:	2301      	movs	r3, #1
 800f666:	73fb      	strb	r3, [r7, #15]
    break;
 800f668:	e005      	b.n	800f676 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f66a:	2303      	movs	r3, #3
 800f66c:	73fb      	strb	r3, [r7, #15]
    break;
 800f66e:	e002      	b.n	800f676 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f670:	2303      	movs	r3, #3
 800f672:	73fb      	strb	r3, [r7, #15]
    break;
 800f674:	bf00      	nop
  }
  return usb_status;
 800f676:	7bfb      	ldrb	r3, [r7, #15]
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3710      	adds	r7, #16
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	460b      	mov	r3, r1
 800f68a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f68c:	2300      	movs	r3, #0
 800f68e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f690:	2300      	movs	r3, #0
 800f692:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f69a:	78fa      	ldrb	r2, [r7, #3]
 800f69c:	4611      	mov	r1, r2
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7f6 fb2d 	bl	8005cfe <HAL_PCD_EP_Close>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f6a8:	7bbb      	ldrb	r3, [r7, #14]
 800f6aa:	2b03      	cmp	r3, #3
 800f6ac:	d816      	bhi.n	800f6dc <USBD_LL_CloseEP+0x5c>
 800f6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f6b4 <USBD_LL_CloseEP+0x34>)
 800f6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6b4:	0800f6c5 	.word	0x0800f6c5
 800f6b8:	0800f6cb 	.word	0x0800f6cb
 800f6bc:	0800f6d1 	.word	0x0800f6d1
 800f6c0:	0800f6d7 	.word	0x0800f6d7
    case HAL_OK :
      usb_status = USBD_OK;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	73fb      	strb	r3, [r7, #15]
    break;
 800f6c8:	e00b      	b.n	800f6e2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f6ca:	2303      	movs	r3, #3
 800f6cc:	73fb      	strb	r3, [r7, #15]
    break;
 800f6ce:	e008      	b.n	800f6e2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f6d4:	e005      	b.n	800f6e2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f6d6:	2303      	movs	r3, #3
 800f6d8:	73fb      	strb	r3, [r7, #15]
    break;
 800f6da:	e002      	b.n	800f6e2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f6dc:	2303      	movs	r3, #3
 800f6de:	73fb      	strb	r3, [r7, #15]
    break;
 800f6e0:	bf00      	nop
  }
  return usb_status;
 800f6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	460b      	mov	r3, r1
 800f6f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f706:	78fa      	ldrb	r2, [r7, #3]
 800f708:	4611      	mov	r1, r2
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7f6 fbbc 	bl	8005e88 <HAL_PCD_EP_SetStall>
 800f710:	4603      	mov	r3, r0
 800f712:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f714:	7bbb      	ldrb	r3, [r7, #14]
 800f716:	2b03      	cmp	r3, #3
 800f718:	d816      	bhi.n	800f748 <USBD_LL_StallEP+0x5c>
 800f71a:	a201      	add	r2, pc, #4	@ (adr r2, 800f720 <USBD_LL_StallEP+0x34>)
 800f71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f720:	0800f731 	.word	0x0800f731
 800f724:	0800f737 	.word	0x0800f737
 800f728:	0800f73d 	.word	0x0800f73d
 800f72c:	0800f743 	.word	0x0800f743
    case HAL_OK :
      usb_status = USBD_OK;
 800f730:	2300      	movs	r3, #0
 800f732:	73fb      	strb	r3, [r7, #15]
    break;
 800f734:	e00b      	b.n	800f74e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f736:	2303      	movs	r3, #3
 800f738:	73fb      	strb	r3, [r7, #15]
    break;
 800f73a:	e008      	b.n	800f74e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f73c:	2301      	movs	r3, #1
 800f73e:	73fb      	strb	r3, [r7, #15]
    break;
 800f740:	e005      	b.n	800f74e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f742:	2303      	movs	r3, #3
 800f744:	73fb      	strb	r3, [r7, #15]
    break;
 800f746:	e002      	b.n	800f74e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f748:	2303      	movs	r3, #3
 800f74a:	73fb      	strb	r3, [r7, #15]
    break;
 800f74c:	bf00      	nop
  }
  return usb_status;
 800f74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f750:	4618      	mov	r0, r3
 800f752:	3710      	adds	r7, #16
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	460b      	mov	r3, r1
 800f762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f764:	2300      	movs	r3, #0
 800f766:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f768:	2300      	movs	r3, #0
 800f76a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f772:	78fa      	ldrb	r2, [r7, #3]
 800f774:	4611      	mov	r1, r2
 800f776:	4618      	mov	r0, r3
 800f778:	f7f6 fbe8 	bl	8005f4c <HAL_PCD_EP_ClrStall>
 800f77c:	4603      	mov	r3, r0
 800f77e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f780:	7bbb      	ldrb	r3, [r7, #14]
 800f782:	2b03      	cmp	r3, #3
 800f784:	d816      	bhi.n	800f7b4 <USBD_LL_ClearStallEP+0x5c>
 800f786:	a201      	add	r2, pc, #4	@ (adr r2, 800f78c <USBD_LL_ClearStallEP+0x34>)
 800f788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f78c:	0800f79d 	.word	0x0800f79d
 800f790:	0800f7a3 	.word	0x0800f7a3
 800f794:	0800f7a9 	.word	0x0800f7a9
 800f798:	0800f7af 	.word	0x0800f7af
    case HAL_OK :
      usb_status = USBD_OK;
 800f79c:	2300      	movs	r3, #0
 800f79e:	73fb      	strb	r3, [r7, #15]
    break;
 800f7a0:	e00b      	b.n	800f7ba <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f7a2:	2303      	movs	r3, #3
 800f7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800f7a6:	e008      	b.n	800f7ba <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800f7ac:	e005      	b.n	800f7ba <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f7ae:	2303      	movs	r3, #3
 800f7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800f7b2:	e002      	b.n	800f7ba <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f7b4:	2303      	movs	r3, #3
 800f7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f7b8:	bf00      	nop
  }
  return usb_status;
 800f7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3710      	adds	r7, #16
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b085      	sub	sp, #20
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f7d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f7d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	da0b      	bge.n	800f7f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f7e0:	78fb      	ldrb	r3, [r7, #3]
 800f7e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f7e6:	68f9      	ldr	r1, [r7, #12]
 800f7e8:	4613      	mov	r3, r2
 800f7ea:	00db      	lsls	r3, r3, #3
 800f7ec:	4413      	add	r3, r2
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	440b      	add	r3, r1
 800f7f2:	3316      	adds	r3, #22
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	e00b      	b.n	800f810 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f7f8:	78fb      	ldrb	r3, [r7, #3]
 800f7fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f7fe:	68f9      	ldr	r1, [r7, #12]
 800f800:	4613      	mov	r3, r2
 800f802:	00db      	lsls	r3, r3, #3
 800f804:	4413      	add	r3, r2
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	440b      	add	r3, r1
 800f80a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f80e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f810:	4618      	mov	r0, r3
 800f812:	3714      	adds	r7, #20
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr

0800f81c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	460b      	mov	r3, r1
 800f826:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f828:	2300      	movs	r3, #0
 800f82a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f82c:	2300      	movs	r3, #0
 800f82e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f836:	78fa      	ldrb	r2, [r7, #3]
 800f838:	4611      	mov	r1, r2
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7f6 f9d1 	bl	8005be2 <HAL_PCD_SetAddress>
 800f840:	4603      	mov	r3, r0
 800f842:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f844:	7bbb      	ldrb	r3, [r7, #14]
 800f846:	2b03      	cmp	r3, #3
 800f848:	d816      	bhi.n	800f878 <USBD_LL_SetUSBAddress+0x5c>
 800f84a:	a201      	add	r2, pc, #4	@ (adr r2, 800f850 <USBD_LL_SetUSBAddress+0x34>)
 800f84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f850:	0800f861 	.word	0x0800f861
 800f854:	0800f867 	.word	0x0800f867
 800f858:	0800f86d 	.word	0x0800f86d
 800f85c:	0800f873 	.word	0x0800f873
    case HAL_OK :
      usb_status = USBD_OK;
 800f860:	2300      	movs	r3, #0
 800f862:	73fb      	strb	r3, [r7, #15]
    break;
 800f864:	e00b      	b.n	800f87e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f866:	2303      	movs	r3, #3
 800f868:	73fb      	strb	r3, [r7, #15]
    break;
 800f86a:	e008      	b.n	800f87e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f86c:	2301      	movs	r3, #1
 800f86e:	73fb      	strb	r3, [r7, #15]
    break;
 800f870:	e005      	b.n	800f87e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f872:	2303      	movs	r3, #3
 800f874:	73fb      	strb	r3, [r7, #15]
    break;
 800f876:	e002      	b.n	800f87e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800f878:	2303      	movs	r3, #3
 800f87a:	73fb      	strb	r3, [r7, #15]
    break;
 800f87c:	bf00      	nop
  }
  return usb_status;
 800f87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f880:	4618      	mov	r0, r3
 800f882:	3710      	adds	r7, #16
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b086      	sub	sp, #24
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	607a      	str	r2, [r7, #4]
 800f892:	603b      	str	r3, [r7, #0]
 800f894:	460b      	mov	r3, r1
 800f896:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f898:	2300      	movs	r3, #0
 800f89a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f89c:	2300      	movs	r3, #0
 800f89e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f8a6:	7af9      	ldrb	r1, [r7, #11]
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	f7f6 fabb 	bl	8005e26 <HAL_PCD_EP_Transmit>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f8b4:	7dbb      	ldrb	r3, [r7, #22]
 800f8b6:	2b03      	cmp	r3, #3
 800f8b8:	d816      	bhi.n	800f8e8 <USBD_LL_Transmit+0x60>
 800f8ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f8c0 <USBD_LL_Transmit+0x38>)
 800f8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8c0:	0800f8d1 	.word	0x0800f8d1
 800f8c4:	0800f8d7 	.word	0x0800f8d7
 800f8c8:	0800f8dd 	.word	0x0800f8dd
 800f8cc:	0800f8e3 	.word	0x0800f8e3
    case HAL_OK :
      usb_status = USBD_OK;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	75fb      	strb	r3, [r7, #23]
    break;
 800f8d4:	e00b      	b.n	800f8ee <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f8d6:	2303      	movs	r3, #3
 800f8d8:	75fb      	strb	r3, [r7, #23]
    break;
 800f8da:	e008      	b.n	800f8ee <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f8dc:	2301      	movs	r3, #1
 800f8de:	75fb      	strb	r3, [r7, #23]
    break;
 800f8e0:	e005      	b.n	800f8ee <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f8e2:	2303      	movs	r3, #3
 800f8e4:	75fb      	strb	r3, [r7, #23]
    break;
 800f8e6:	e002      	b.n	800f8ee <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800f8e8:	2303      	movs	r3, #3
 800f8ea:	75fb      	strb	r3, [r7, #23]
    break;
 800f8ec:	bf00      	nop
  }
  return usb_status;
 800f8ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3718      	adds	r7, #24
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b086      	sub	sp, #24
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	60f8      	str	r0, [r7, #12]
 800f900:	607a      	str	r2, [r7, #4]
 800f902:	603b      	str	r3, [r7, #0]
 800f904:	460b      	mov	r3, r1
 800f906:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f908:	2300      	movs	r3, #0
 800f90a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f90c:	2300      	movs	r3, #0
 800f90e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f916:	7af9      	ldrb	r1, [r7, #11]
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	f7f6 fa39 	bl	8005d92 <HAL_PCD_EP_Receive>
 800f920:	4603      	mov	r3, r0
 800f922:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f924:	7dbb      	ldrb	r3, [r7, #22]
 800f926:	2b03      	cmp	r3, #3
 800f928:	d816      	bhi.n	800f958 <USBD_LL_PrepareReceive+0x60>
 800f92a:	a201      	add	r2, pc, #4	@ (adr r2, 800f930 <USBD_LL_PrepareReceive+0x38>)
 800f92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f930:	0800f941 	.word	0x0800f941
 800f934:	0800f947 	.word	0x0800f947
 800f938:	0800f94d 	.word	0x0800f94d
 800f93c:	0800f953 	.word	0x0800f953
    case HAL_OK :
      usb_status = USBD_OK;
 800f940:	2300      	movs	r3, #0
 800f942:	75fb      	strb	r3, [r7, #23]
    break;
 800f944:	e00b      	b.n	800f95e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f946:	2303      	movs	r3, #3
 800f948:	75fb      	strb	r3, [r7, #23]
    break;
 800f94a:	e008      	b.n	800f95e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f94c:	2301      	movs	r3, #1
 800f94e:	75fb      	strb	r3, [r7, #23]
    break;
 800f950:	e005      	b.n	800f95e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f952:	2303      	movs	r3, #3
 800f954:	75fb      	strb	r3, [r7, #23]
    break;
 800f956:	e002      	b.n	800f95e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800f958:	2303      	movs	r3, #3
 800f95a:	75fb      	strb	r3, [r7, #23]
    break;
 800f95c:	bf00      	nop
  }
  return usb_status;
 800f95e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f960:	4618      	mov	r0, r3
 800f962:	3718      	adds	r7, #24
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	460b      	mov	r3, r1
 800f972:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f97a:	78fa      	ldrb	r2, [r7, #3]
 800f97c:	4611      	mov	r1, r2
 800f97e:	4618      	mov	r0, r3
 800f980:	f7f6 fa39 	bl	8005df6 <HAL_PCD_EP_GetRxCount>
 800f984:	4603      	mov	r3, r0
}
 800f986:	4618      	mov	r0, r3
 800f988:	3708      	adds	r7, #8
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
	...

0800f990 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	460b      	mov	r3, r1
 800f99a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f99c:	78fb      	ldrb	r3, [r7, #3]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d002      	beq.n	800f9a8 <HAL_PCDEx_LPM_Callback+0x18>
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d01f      	beq.n	800f9e6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f9a6:	e03b      	b.n	800fa20 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	7adb      	ldrb	r3, [r3, #11]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d007      	beq.n	800f9c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f9b0:	f000 f854 	bl	800fa5c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f9b4:	4b1c      	ldr	r3, [pc, #112]	@ (800fa28 <HAL_PCDEx_LPM_Callback+0x98>)
 800f9b6:	691b      	ldr	r3, [r3, #16]
 800f9b8:	4a1b      	ldr	r2, [pc, #108]	@ (800fa28 <HAL_PCDEx_LPM_Callback+0x98>)
 800f9ba:	f023 0306 	bic.w	r3, r3, #6
 800f9be:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	6812      	ldr	r2, [r2, #0]
 800f9ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f9d2:	f023 0301 	bic.w	r3, r3, #1
 800f9d6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fb fba1 	bl	800b126 <USBD_LL_Resume>
    break;
 800f9e4:	e01c      	b.n	800fa20 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	6812      	ldr	r2, [r2, #0]
 800f9f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f9f8:	f043 0301 	orr.w	r3, r3, #1
 800f9fc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fb fb72 	bl	800b0ee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	7adb      	ldrb	r3, [r3, #11]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d005      	beq.n	800fa1e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa12:	4b05      	ldr	r3, [pc, #20]	@ (800fa28 <HAL_PCDEx_LPM_Callback+0x98>)
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	4a04      	ldr	r2, [pc, #16]	@ (800fa28 <HAL_PCDEx_LPM_Callback+0x98>)
 800fa18:	f043 0306 	orr.w	r3, r3, #6
 800fa1c:	6113      	str	r3, [r2, #16]
    break;
 800fa1e:	bf00      	nop
}
 800fa20:	bf00      	nop
 800fa22:	3708      	adds	r7, #8
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	e000ed00 	.word	0xe000ed00

0800fa2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fa34:	4b03      	ldr	r3, [pc, #12]	@ (800fa44 <USBD_static_malloc+0x18>)
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	370c      	adds	r7, #12
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	2000435c 	.word	0x2000435c

0800fa48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]

}
 800fa50:	bf00      	nop
 800fa52:	370c      	adds	r7, #12
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr

0800fa5c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 800fa60:	bf00      	nop
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr

0800fa6a <__cvt>:
 800fa6a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa6e:	ec57 6b10 	vmov	r6, r7, d0
 800fa72:	2f00      	cmp	r7, #0
 800fa74:	460c      	mov	r4, r1
 800fa76:	4619      	mov	r1, r3
 800fa78:	463b      	mov	r3, r7
 800fa7a:	bfbb      	ittet	lt
 800fa7c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fa80:	461f      	movlt	r7, r3
 800fa82:	2300      	movge	r3, #0
 800fa84:	232d      	movlt	r3, #45	@ 0x2d
 800fa86:	700b      	strb	r3, [r1, #0]
 800fa88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa8a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fa8e:	4691      	mov	r9, r2
 800fa90:	f023 0820 	bic.w	r8, r3, #32
 800fa94:	bfbc      	itt	lt
 800fa96:	4632      	movlt	r2, r6
 800fa98:	4616      	movlt	r6, r2
 800fa9a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fa9e:	d005      	beq.n	800faac <__cvt+0x42>
 800faa0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800faa4:	d100      	bne.n	800faa8 <__cvt+0x3e>
 800faa6:	3401      	adds	r4, #1
 800faa8:	2102      	movs	r1, #2
 800faaa:	e000      	b.n	800faae <__cvt+0x44>
 800faac:	2103      	movs	r1, #3
 800faae:	ab03      	add	r3, sp, #12
 800fab0:	9301      	str	r3, [sp, #4]
 800fab2:	ab02      	add	r3, sp, #8
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	ec47 6b10 	vmov	d0, r6, r7
 800faba:	4653      	mov	r3, sl
 800fabc:	4622      	mov	r2, r4
 800fabe:	f000 fe9f 	bl	8010800 <_dtoa_r>
 800fac2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fac6:	4605      	mov	r5, r0
 800fac8:	d119      	bne.n	800fafe <__cvt+0x94>
 800faca:	f019 0f01 	tst.w	r9, #1
 800face:	d00e      	beq.n	800faee <__cvt+0x84>
 800fad0:	eb00 0904 	add.w	r9, r0, r4
 800fad4:	2200      	movs	r2, #0
 800fad6:	2300      	movs	r3, #0
 800fad8:	4630      	mov	r0, r6
 800fada:	4639      	mov	r1, r7
 800fadc:	f7f1 f804 	bl	8000ae8 <__aeabi_dcmpeq>
 800fae0:	b108      	cbz	r0, 800fae6 <__cvt+0x7c>
 800fae2:	f8cd 900c 	str.w	r9, [sp, #12]
 800fae6:	2230      	movs	r2, #48	@ 0x30
 800fae8:	9b03      	ldr	r3, [sp, #12]
 800faea:	454b      	cmp	r3, r9
 800faec:	d31e      	bcc.n	800fb2c <__cvt+0xc2>
 800faee:	9b03      	ldr	r3, [sp, #12]
 800faf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800faf2:	1b5b      	subs	r3, r3, r5
 800faf4:	4628      	mov	r0, r5
 800faf6:	6013      	str	r3, [r2, #0]
 800faf8:	b004      	add	sp, #16
 800fafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fafe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fb02:	eb00 0904 	add.w	r9, r0, r4
 800fb06:	d1e5      	bne.n	800fad4 <__cvt+0x6a>
 800fb08:	7803      	ldrb	r3, [r0, #0]
 800fb0a:	2b30      	cmp	r3, #48	@ 0x30
 800fb0c:	d10a      	bne.n	800fb24 <__cvt+0xba>
 800fb0e:	2200      	movs	r2, #0
 800fb10:	2300      	movs	r3, #0
 800fb12:	4630      	mov	r0, r6
 800fb14:	4639      	mov	r1, r7
 800fb16:	f7f0 ffe7 	bl	8000ae8 <__aeabi_dcmpeq>
 800fb1a:	b918      	cbnz	r0, 800fb24 <__cvt+0xba>
 800fb1c:	f1c4 0401 	rsb	r4, r4, #1
 800fb20:	f8ca 4000 	str.w	r4, [sl]
 800fb24:	f8da 3000 	ldr.w	r3, [sl]
 800fb28:	4499      	add	r9, r3
 800fb2a:	e7d3      	b.n	800fad4 <__cvt+0x6a>
 800fb2c:	1c59      	adds	r1, r3, #1
 800fb2e:	9103      	str	r1, [sp, #12]
 800fb30:	701a      	strb	r2, [r3, #0]
 800fb32:	e7d9      	b.n	800fae8 <__cvt+0x7e>

0800fb34 <__exponent>:
 800fb34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb36:	2900      	cmp	r1, #0
 800fb38:	bfba      	itte	lt
 800fb3a:	4249      	neglt	r1, r1
 800fb3c:	232d      	movlt	r3, #45	@ 0x2d
 800fb3e:	232b      	movge	r3, #43	@ 0x2b
 800fb40:	2909      	cmp	r1, #9
 800fb42:	7002      	strb	r2, [r0, #0]
 800fb44:	7043      	strb	r3, [r0, #1]
 800fb46:	dd29      	ble.n	800fb9c <__exponent+0x68>
 800fb48:	f10d 0307 	add.w	r3, sp, #7
 800fb4c:	461d      	mov	r5, r3
 800fb4e:	270a      	movs	r7, #10
 800fb50:	461a      	mov	r2, r3
 800fb52:	fbb1 f6f7 	udiv	r6, r1, r7
 800fb56:	fb07 1416 	mls	r4, r7, r6, r1
 800fb5a:	3430      	adds	r4, #48	@ 0x30
 800fb5c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fb60:	460c      	mov	r4, r1
 800fb62:	2c63      	cmp	r4, #99	@ 0x63
 800fb64:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb68:	4631      	mov	r1, r6
 800fb6a:	dcf1      	bgt.n	800fb50 <__exponent+0x1c>
 800fb6c:	3130      	adds	r1, #48	@ 0x30
 800fb6e:	1e94      	subs	r4, r2, #2
 800fb70:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fb74:	1c41      	adds	r1, r0, #1
 800fb76:	4623      	mov	r3, r4
 800fb78:	42ab      	cmp	r3, r5
 800fb7a:	d30a      	bcc.n	800fb92 <__exponent+0x5e>
 800fb7c:	f10d 0309 	add.w	r3, sp, #9
 800fb80:	1a9b      	subs	r3, r3, r2
 800fb82:	42ac      	cmp	r4, r5
 800fb84:	bf88      	it	hi
 800fb86:	2300      	movhi	r3, #0
 800fb88:	3302      	adds	r3, #2
 800fb8a:	4403      	add	r3, r0
 800fb8c:	1a18      	subs	r0, r3, r0
 800fb8e:	b003      	add	sp, #12
 800fb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb92:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fb96:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fb9a:	e7ed      	b.n	800fb78 <__exponent+0x44>
 800fb9c:	2330      	movs	r3, #48	@ 0x30
 800fb9e:	3130      	adds	r1, #48	@ 0x30
 800fba0:	7083      	strb	r3, [r0, #2]
 800fba2:	70c1      	strb	r1, [r0, #3]
 800fba4:	1d03      	adds	r3, r0, #4
 800fba6:	e7f1      	b.n	800fb8c <__exponent+0x58>

0800fba8 <_printf_float>:
 800fba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbac:	b08d      	sub	sp, #52	@ 0x34
 800fbae:	460c      	mov	r4, r1
 800fbb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fbb4:	4616      	mov	r6, r2
 800fbb6:	461f      	mov	r7, r3
 800fbb8:	4605      	mov	r5, r0
 800fbba:	f000 fcbb 	bl	8010534 <_localeconv_r>
 800fbbe:	6803      	ldr	r3, [r0, #0]
 800fbc0:	9304      	str	r3, [sp, #16]
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7f0 fb64 	bl	8000290 <strlen>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbcc:	f8d8 3000 	ldr.w	r3, [r8]
 800fbd0:	9005      	str	r0, [sp, #20]
 800fbd2:	3307      	adds	r3, #7
 800fbd4:	f023 0307 	bic.w	r3, r3, #7
 800fbd8:	f103 0208 	add.w	r2, r3, #8
 800fbdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fbe0:	f8d4 b000 	ldr.w	fp, [r4]
 800fbe4:	f8c8 2000 	str.w	r2, [r8]
 800fbe8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fbec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fbf0:	9307      	str	r3, [sp, #28]
 800fbf2:	f8cd 8018 	str.w	r8, [sp, #24]
 800fbf6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fbfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fbfe:	4b9c      	ldr	r3, [pc, #624]	@ (800fe70 <_printf_float+0x2c8>)
 800fc00:	f04f 32ff 	mov.w	r2, #4294967295
 800fc04:	f7f0 ffa2 	bl	8000b4c <__aeabi_dcmpun>
 800fc08:	bb70      	cbnz	r0, 800fc68 <_printf_float+0xc0>
 800fc0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc0e:	4b98      	ldr	r3, [pc, #608]	@ (800fe70 <_printf_float+0x2c8>)
 800fc10:	f04f 32ff 	mov.w	r2, #4294967295
 800fc14:	f7f0 ff7c 	bl	8000b10 <__aeabi_dcmple>
 800fc18:	bb30      	cbnz	r0, 800fc68 <_printf_float+0xc0>
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	4640      	mov	r0, r8
 800fc20:	4649      	mov	r1, r9
 800fc22:	f7f0 ff6b 	bl	8000afc <__aeabi_dcmplt>
 800fc26:	b110      	cbz	r0, 800fc2e <_printf_float+0x86>
 800fc28:	232d      	movs	r3, #45	@ 0x2d
 800fc2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc2e:	4a91      	ldr	r2, [pc, #580]	@ (800fe74 <_printf_float+0x2cc>)
 800fc30:	4b91      	ldr	r3, [pc, #580]	@ (800fe78 <_printf_float+0x2d0>)
 800fc32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fc36:	bf94      	ite	ls
 800fc38:	4690      	movls	r8, r2
 800fc3a:	4698      	movhi	r8, r3
 800fc3c:	2303      	movs	r3, #3
 800fc3e:	6123      	str	r3, [r4, #16]
 800fc40:	f02b 0304 	bic.w	r3, fp, #4
 800fc44:	6023      	str	r3, [r4, #0]
 800fc46:	f04f 0900 	mov.w	r9, #0
 800fc4a:	9700      	str	r7, [sp, #0]
 800fc4c:	4633      	mov	r3, r6
 800fc4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fc50:	4621      	mov	r1, r4
 800fc52:	4628      	mov	r0, r5
 800fc54:	f000 f9d2 	bl	800fffc <_printf_common>
 800fc58:	3001      	adds	r0, #1
 800fc5a:	f040 808d 	bne.w	800fd78 <_printf_float+0x1d0>
 800fc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc62:	b00d      	add	sp, #52	@ 0x34
 800fc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc68:	4642      	mov	r2, r8
 800fc6a:	464b      	mov	r3, r9
 800fc6c:	4640      	mov	r0, r8
 800fc6e:	4649      	mov	r1, r9
 800fc70:	f7f0 ff6c 	bl	8000b4c <__aeabi_dcmpun>
 800fc74:	b140      	cbz	r0, 800fc88 <_printf_float+0xe0>
 800fc76:	464b      	mov	r3, r9
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	bfbc      	itt	lt
 800fc7c:	232d      	movlt	r3, #45	@ 0x2d
 800fc7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fc82:	4a7e      	ldr	r2, [pc, #504]	@ (800fe7c <_printf_float+0x2d4>)
 800fc84:	4b7e      	ldr	r3, [pc, #504]	@ (800fe80 <_printf_float+0x2d8>)
 800fc86:	e7d4      	b.n	800fc32 <_printf_float+0x8a>
 800fc88:	6863      	ldr	r3, [r4, #4]
 800fc8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fc8e:	9206      	str	r2, [sp, #24]
 800fc90:	1c5a      	adds	r2, r3, #1
 800fc92:	d13b      	bne.n	800fd0c <_printf_float+0x164>
 800fc94:	2306      	movs	r3, #6
 800fc96:	6063      	str	r3, [r4, #4]
 800fc98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	6022      	str	r2, [r4, #0]
 800fca0:	9303      	str	r3, [sp, #12]
 800fca2:	ab0a      	add	r3, sp, #40	@ 0x28
 800fca4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fca8:	ab09      	add	r3, sp, #36	@ 0x24
 800fcaa:	9300      	str	r3, [sp, #0]
 800fcac:	6861      	ldr	r1, [r4, #4]
 800fcae:	ec49 8b10 	vmov	d0, r8, r9
 800fcb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	f7ff fed7 	bl	800fa6a <__cvt>
 800fcbc:	9b06      	ldr	r3, [sp, #24]
 800fcbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fcc0:	2b47      	cmp	r3, #71	@ 0x47
 800fcc2:	4680      	mov	r8, r0
 800fcc4:	d129      	bne.n	800fd1a <_printf_float+0x172>
 800fcc6:	1cc8      	adds	r0, r1, #3
 800fcc8:	db02      	blt.n	800fcd0 <_printf_float+0x128>
 800fcca:	6863      	ldr	r3, [r4, #4]
 800fccc:	4299      	cmp	r1, r3
 800fcce:	dd41      	ble.n	800fd54 <_printf_float+0x1ac>
 800fcd0:	f1aa 0a02 	sub.w	sl, sl, #2
 800fcd4:	fa5f fa8a 	uxtb.w	sl, sl
 800fcd8:	3901      	subs	r1, #1
 800fcda:	4652      	mov	r2, sl
 800fcdc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fce0:	9109      	str	r1, [sp, #36]	@ 0x24
 800fce2:	f7ff ff27 	bl	800fb34 <__exponent>
 800fce6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fce8:	1813      	adds	r3, r2, r0
 800fcea:	2a01      	cmp	r2, #1
 800fcec:	4681      	mov	r9, r0
 800fcee:	6123      	str	r3, [r4, #16]
 800fcf0:	dc02      	bgt.n	800fcf8 <_printf_float+0x150>
 800fcf2:	6822      	ldr	r2, [r4, #0]
 800fcf4:	07d2      	lsls	r2, r2, #31
 800fcf6:	d501      	bpl.n	800fcfc <_printf_float+0x154>
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	6123      	str	r3, [r4, #16]
 800fcfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d0a2      	beq.n	800fc4a <_printf_float+0xa2>
 800fd04:	232d      	movs	r3, #45	@ 0x2d
 800fd06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd0a:	e79e      	b.n	800fc4a <_printf_float+0xa2>
 800fd0c:	9a06      	ldr	r2, [sp, #24]
 800fd0e:	2a47      	cmp	r2, #71	@ 0x47
 800fd10:	d1c2      	bne.n	800fc98 <_printf_float+0xf0>
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d1c0      	bne.n	800fc98 <_printf_float+0xf0>
 800fd16:	2301      	movs	r3, #1
 800fd18:	e7bd      	b.n	800fc96 <_printf_float+0xee>
 800fd1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fd1e:	d9db      	bls.n	800fcd8 <_printf_float+0x130>
 800fd20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fd24:	d118      	bne.n	800fd58 <_printf_float+0x1b0>
 800fd26:	2900      	cmp	r1, #0
 800fd28:	6863      	ldr	r3, [r4, #4]
 800fd2a:	dd0b      	ble.n	800fd44 <_printf_float+0x19c>
 800fd2c:	6121      	str	r1, [r4, #16]
 800fd2e:	b913      	cbnz	r3, 800fd36 <_printf_float+0x18e>
 800fd30:	6822      	ldr	r2, [r4, #0]
 800fd32:	07d0      	lsls	r0, r2, #31
 800fd34:	d502      	bpl.n	800fd3c <_printf_float+0x194>
 800fd36:	3301      	adds	r3, #1
 800fd38:	440b      	add	r3, r1
 800fd3a:	6123      	str	r3, [r4, #16]
 800fd3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fd3e:	f04f 0900 	mov.w	r9, #0
 800fd42:	e7db      	b.n	800fcfc <_printf_float+0x154>
 800fd44:	b913      	cbnz	r3, 800fd4c <_printf_float+0x1a4>
 800fd46:	6822      	ldr	r2, [r4, #0]
 800fd48:	07d2      	lsls	r2, r2, #31
 800fd4a:	d501      	bpl.n	800fd50 <_printf_float+0x1a8>
 800fd4c:	3302      	adds	r3, #2
 800fd4e:	e7f4      	b.n	800fd3a <_printf_float+0x192>
 800fd50:	2301      	movs	r3, #1
 800fd52:	e7f2      	b.n	800fd3a <_printf_float+0x192>
 800fd54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fd58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd5a:	4299      	cmp	r1, r3
 800fd5c:	db05      	blt.n	800fd6a <_printf_float+0x1c2>
 800fd5e:	6823      	ldr	r3, [r4, #0]
 800fd60:	6121      	str	r1, [r4, #16]
 800fd62:	07d8      	lsls	r0, r3, #31
 800fd64:	d5ea      	bpl.n	800fd3c <_printf_float+0x194>
 800fd66:	1c4b      	adds	r3, r1, #1
 800fd68:	e7e7      	b.n	800fd3a <_printf_float+0x192>
 800fd6a:	2900      	cmp	r1, #0
 800fd6c:	bfd4      	ite	le
 800fd6e:	f1c1 0202 	rsble	r2, r1, #2
 800fd72:	2201      	movgt	r2, #1
 800fd74:	4413      	add	r3, r2
 800fd76:	e7e0      	b.n	800fd3a <_printf_float+0x192>
 800fd78:	6823      	ldr	r3, [r4, #0]
 800fd7a:	055a      	lsls	r2, r3, #21
 800fd7c:	d407      	bmi.n	800fd8e <_printf_float+0x1e6>
 800fd7e:	6923      	ldr	r3, [r4, #16]
 800fd80:	4642      	mov	r2, r8
 800fd82:	4631      	mov	r1, r6
 800fd84:	4628      	mov	r0, r5
 800fd86:	47b8      	blx	r7
 800fd88:	3001      	adds	r0, #1
 800fd8a:	d12b      	bne.n	800fde4 <_printf_float+0x23c>
 800fd8c:	e767      	b.n	800fc5e <_printf_float+0xb6>
 800fd8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fd92:	f240 80dd 	bls.w	800ff50 <_printf_float+0x3a8>
 800fd96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	f7f0 fea3 	bl	8000ae8 <__aeabi_dcmpeq>
 800fda2:	2800      	cmp	r0, #0
 800fda4:	d033      	beq.n	800fe0e <_printf_float+0x266>
 800fda6:	4a37      	ldr	r2, [pc, #220]	@ (800fe84 <_printf_float+0x2dc>)
 800fda8:	2301      	movs	r3, #1
 800fdaa:	4631      	mov	r1, r6
 800fdac:	4628      	mov	r0, r5
 800fdae:	47b8      	blx	r7
 800fdb0:	3001      	adds	r0, #1
 800fdb2:	f43f af54 	beq.w	800fc5e <_printf_float+0xb6>
 800fdb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fdba:	4543      	cmp	r3, r8
 800fdbc:	db02      	blt.n	800fdc4 <_printf_float+0x21c>
 800fdbe:	6823      	ldr	r3, [r4, #0]
 800fdc0:	07d8      	lsls	r0, r3, #31
 800fdc2:	d50f      	bpl.n	800fde4 <_printf_float+0x23c>
 800fdc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdc8:	4631      	mov	r1, r6
 800fdca:	4628      	mov	r0, r5
 800fdcc:	47b8      	blx	r7
 800fdce:	3001      	adds	r0, #1
 800fdd0:	f43f af45 	beq.w	800fc5e <_printf_float+0xb6>
 800fdd4:	f04f 0900 	mov.w	r9, #0
 800fdd8:	f108 38ff 	add.w	r8, r8, #4294967295
 800fddc:	f104 0a1a 	add.w	sl, r4, #26
 800fde0:	45c8      	cmp	r8, r9
 800fde2:	dc09      	bgt.n	800fdf8 <_printf_float+0x250>
 800fde4:	6823      	ldr	r3, [r4, #0]
 800fde6:	079b      	lsls	r3, r3, #30
 800fde8:	f100 8103 	bmi.w	800fff2 <_printf_float+0x44a>
 800fdec:	68e0      	ldr	r0, [r4, #12]
 800fdee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdf0:	4298      	cmp	r0, r3
 800fdf2:	bfb8      	it	lt
 800fdf4:	4618      	movlt	r0, r3
 800fdf6:	e734      	b.n	800fc62 <_printf_float+0xba>
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	4652      	mov	r2, sl
 800fdfc:	4631      	mov	r1, r6
 800fdfe:	4628      	mov	r0, r5
 800fe00:	47b8      	blx	r7
 800fe02:	3001      	adds	r0, #1
 800fe04:	f43f af2b 	beq.w	800fc5e <_printf_float+0xb6>
 800fe08:	f109 0901 	add.w	r9, r9, #1
 800fe0c:	e7e8      	b.n	800fde0 <_printf_float+0x238>
 800fe0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	dc39      	bgt.n	800fe88 <_printf_float+0x2e0>
 800fe14:	4a1b      	ldr	r2, [pc, #108]	@ (800fe84 <_printf_float+0x2dc>)
 800fe16:	2301      	movs	r3, #1
 800fe18:	4631      	mov	r1, r6
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	47b8      	blx	r7
 800fe1e:	3001      	adds	r0, #1
 800fe20:	f43f af1d 	beq.w	800fc5e <_printf_float+0xb6>
 800fe24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fe28:	ea59 0303 	orrs.w	r3, r9, r3
 800fe2c:	d102      	bne.n	800fe34 <_printf_float+0x28c>
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	07d9      	lsls	r1, r3, #31
 800fe32:	d5d7      	bpl.n	800fde4 <_printf_float+0x23c>
 800fe34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe38:	4631      	mov	r1, r6
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	47b8      	blx	r7
 800fe3e:	3001      	adds	r0, #1
 800fe40:	f43f af0d 	beq.w	800fc5e <_printf_float+0xb6>
 800fe44:	f04f 0a00 	mov.w	sl, #0
 800fe48:	f104 0b1a 	add.w	fp, r4, #26
 800fe4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe4e:	425b      	negs	r3, r3
 800fe50:	4553      	cmp	r3, sl
 800fe52:	dc01      	bgt.n	800fe58 <_printf_float+0x2b0>
 800fe54:	464b      	mov	r3, r9
 800fe56:	e793      	b.n	800fd80 <_printf_float+0x1d8>
 800fe58:	2301      	movs	r3, #1
 800fe5a:	465a      	mov	r2, fp
 800fe5c:	4631      	mov	r1, r6
 800fe5e:	4628      	mov	r0, r5
 800fe60:	47b8      	blx	r7
 800fe62:	3001      	adds	r0, #1
 800fe64:	f43f aefb 	beq.w	800fc5e <_printf_float+0xb6>
 800fe68:	f10a 0a01 	add.w	sl, sl, #1
 800fe6c:	e7ee      	b.n	800fe4c <_printf_float+0x2a4>
 800fe6e:	bf00      	nop
 800fe70:	7fefffff 	.word	0x7fefffff
 800fe74:	0801260c 	.word	0x0801260c
 800fe78:	08012610 	.word	0x08012610
 800fe7c:	08012614 	.word	0x08012614
 800fe80:	08012618 	.word	0x08012618
 800fe84:	0801261c 	.word	0x0801261c
 800fe88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fe8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fe8e:	4553      	cmp	r3, sl
 800fe90:	bfa8      	it	ge
 800fe92:	4653      	movge	r3, sl
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	4699      	mov	r9, r3
 800fe98:	dc36      	bgt.n	800ff08 <_printf_float+0x360>
 800fe9a:	f04f 0b00 	mov.w	fp, #0
 800fe9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fea2:	f104 021a 	add.w	r2, r4, #26
 800fea6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fea8:	9306      	str	r3, [sp, #24]
 800feaa:	eba3 0309 	sub.w	r3, r3, r9
 800feae:	455b      	cmp	r3, fp
 800feb0:	dc31      	bgt.n	800ff16 <_printf_float+0x36e>
 800feb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feb4:	459a      	cmp	sl, r3
 800feb6:	dc3a      	bgt.n	800ff2e <_printf_float+0x386>
 800feb8:	6823      	ldr	r3, [r4, #0]
 800feba:	07da      	lsls	r2, r3, #31
 800febc:	d437      	bmi.n	800ff2e <_printf_float+0x386>
 800febe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fec0:	ebaa 0903 	sub.w	r9, sl, r3
 800fec4:	9b06      	ldr	r3, [sp, #24]
 800fec6:	ebaa 0303 	sub.w	r3, sl, r3
 800feca:	4599      	cmp	r9, r3
 800fecc:	bfa8      	it	ge
 800fece:	4699      	movge	r9, r3
 800fed0:	f1b9 0f00 	cmp.w	r9, #0
 800fed4:	dc33      	bgt.n	800ff3e <_printf_float+0x396>
 800fed6:	f04f 0800 	mov.w	r8, #0
 800feda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fede:	f104 0b1a 	add.w	fp, r4, #26
 800fee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fee4:	ebaa 0303 	sub.w	r3, sl, r3
 800fee8:	eba3 0309 	sub.w	r3, r3, r9
 800feec:	4543      	cmp	r3, r8
 800feee:	f77f af79 	ble.w	800fde4 <_printf_float+0x23c>
 800fef2:	2301      	movs	r3, #1
 800fef4:	465a      	mov	r2, fp
 800fef6:	4631      	mov	r1, r6
 800fef8:	4628      	mov	r0, r5
 800fefa:	47b8      	blx	r7
 800fefc:	3001      	adds	r0, #1
 800fefe:	f43f aeae 	beq.w	800fc5e <_printf_float+0xb6>
 800ff02:	f108 0801 	add.w	r8, r8, #1
 800ff06:	e7ec      	b.n	800fee2 <_printf_float+0x33a>
 800ff08:	4642      	mov	r2, r8
 800ff0a:	4631      	mov	r1, r6
 800ff0c:	4628      	mov	r0, r5
 800ff0e:	47b8      	blx	r7
 800ff10:	3001      	adds	r0, #1
 800ff12:	d1c2      	bne.n	800fe9a <_printf_float+0x2f2>
 800ff14:	e6a3      	b.n	800fc5e <_printf_float+0xb6>
 800ff16:	2301      	movs	r3, #1
 800ff18:	4631      	mov	r1, r6
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	9206      	str	r2, [sp, #24]
 800ff1e:	47b8      	blx	r7
 800ff20:	3001      	adds	r0, #1
 800ff22:	f43f ae9c 	beq.w	800fc5e <_printf_float+0xb6>
 800ff26:	9a06      	ldr	r2, [sp, #24]
 800ff28:	f10b 0b01 	add.w	fp, fp, #1
 800ff2c:	e7bb      	b.n	800fea6 <_printf_float+0x2fe>
 800ff2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff32:	4631      	mov	r1, r6
 800ff34:	4628      	mov	r0, r5
 800ff36:	47b8      	blx	r7
 800ff38:	3001      	adds	r0, #1
 800ff3a:	d1c0      	bne.n	800febe <_printf_float+0x316>
 800ff3c:	e68f      	b.n	800fc5e <_printf_float+0xb6>
 800ff3e:	9a06      	ldr	r2, [sp, #24]
 800ff40:	464b      	mov	r3, r9
 800ff42:	4442      	add	r2, r8
 800ff44:	4631      	mov	r1, r6
 800ff46:	4628      	mov	r0, r5
 800ff48:	47b8      	blx	r7
 800ff4a:	3001      	adds	r0, #1
 800ff4c:	d1c3      	bne.n	800fed6 <_printf_float+0x32e>
 800ff4e:	e686      	b.n	800fc5e <_printf_float+0xb6>
 800ff50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ff54:	f1ba 0f01 	cmp.w	sl, #1
 800ff58:	dc01      	bgt.n	800ff5e <_printf_float+0x3b6>
 800ff5a:	07db      	lsls	r3, r3, #31
 800ff5c:	d536      	bpl.n	800ffcc <_printf_float+0x424>
 800ff5e:	2301      	movs	r3, #1
 800ff60:	4642      	mov	r2, r8
 800ff62:	4631      	mov	r1, r6
 800ff64:	4628      	mov	r0, r5
 800ff66:	47b8      	blx	r7
 800ff68:	3001      	adds	r0, #1
 800ff6a:	f43f ae78 	beq.w	800fc5e <_printf_float+0xb6>
 800ff6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff72:	4631      	mov	r1, r6
 800ff74:	4628      	mov	r0, r5
 800ff76:	47b8      	blx	r7
 800ff78:	3001      	adds	r0, #1
 800ff7a:	f43f ae70 	beq.w	800fc5e <_printf_float+0xb6>
 800ff7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ff82:	2200      	movs	r2, #0
 800ff84:	2300      	movs	r3, #0
 800ff86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff8a:	f7f0 fdad 	bl	8000ae8 <__aeabi_dcmpeq>
 800ff8e:	b9c0      	cbnz	r0, 800ffc2 <_printf_float+0x41a>
 800ff90:	4653      	mov	r3, sl
 800ff92:	f108 0201 	add.w	r2, r8, #1
 800ff96:	4631      	mov	r1, r6
 800ff98:	4628      	mov	r0, r5
 800ff9a:	47b8      	blx	r7
 800ff9c:	3001      	adds	r0, #1
 800ff9e:	d10c      	bne.n	800ffba <_printf_float+0x412>
 800ffa0:	e65d      	b.n	800fc5e <_printf_float+0xb6>
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	465a      	mov	r2, fp
 800ffa6:	4631      	mov	r1, r6
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	47b8      	blx	r7
 800ffac:	3001      	adds	r0, #1
 800ffae:	f43f ae56 	beq.w	800fc5e <_printf_float+0xb6>
 800ffb2:	f108 0801 	add.w	r8, r8, #1
 800ffb6:	45d0      	cmp	r8, sl
 800ffb8:	dbf3      	blt.n	800ffa2 <_printf_float+0x3fa>
 800ffba:	464b      	mov	r3, r9
 800ffbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ffc0:	e6df      	b.n	800fd82 <_printf_float+0x1da>
 800ffc2:	f04f 0800 	mov.w	r8, #0
 800ffc6:	f104 0b1a 	add.w	fp, r4, #26
 800ffca:	e7f4      	b.n	800ffb6 <_printf_float+0x40e>
 800ffcc:	2301      	movs	r3, #1
 800ffce:	4642      	mov	r2, r8
 800ffd0:	e7e1      	b.n	800ff96 <_printf_float+0x3ee>
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	464a      	mov	r2, r9
 800ffd6:	4631      	mov	r1, r6
 800ffd8:	4628      	mov	r0, r5
 800ffda:	47b8      	blx	r7
 800ffdc:	3001      	adds	r0, #1
 800ffde:	f43f ae3e 	beq.w	800fc5e <_printf_float+0xb6>
 800ffe2:	f108 0801 	add.w	r8, r8, #1
 800ffe6:	68e3      	ldr	r3, [r4, #12]
 800ffe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ffea:	1a5b      	subs	r3, r3, r1
 800ffec:	4543      	cmp	r3, r8
 800ffee:	dcf0      	bgt.n	800ffd2 <_printf_float+0x42a>
 800fff0:	e6fc      	b.n	800fdec <_printf_float+0x244>
 800fff2:	f04f 0800 	mov.w	r8, #0
 800fff6:	f104 0919 	add.w	r9, r4, #25
 800fffa:	e7f4      	b.n	800ffe6 <_printf_float+0x43e>

0800fffc <_printf_common>:
 800fffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010000:	4616      	mov	r6, r2
 8010002:	4698      	mov	r8, r3
 8010004:	688a      	ldr	r2, [r1, #8]
 8010006:	690b      	ldr	r3, [r1, #16]
 8010008:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801000c:	4293      	cmp	r3, r2
 801000e:	bfb8      	it	lt
 8010010:	4613      	movlt	r3, r2
 8010012:	6033      	str	r3, [r6, #0]
 8010014:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010018:	4607      	mov	r7, r0
 801001a:	460c      	mov	r4, r1
 801001c:	b10a      	cbz	r2, 8010022 <_printf_common+0x26>
 801001e:	3301      	adds	r3, #1
 8010020:	6033      	str	r3, [r6, #0]
 8010022:	6823      	ldr	r3, [r4, #0]
 8010024:	0699      	lsls	r1, r3, #26
 8010026:	bf42      	ittt	mi
 8010028:	6833      	ldrmi	r3, [r6, #0]
 801002a:	3302      	addmi	r3, #2
 801002c:	6033      	strmi	r3, [r6, #0]
 801002e:	6825      	ldr	r5, [r4, #0]
 8010030:	f015 0506 	ands.w	r5, r5, #6
 8010034:	d106      	bne.n	8010044 <_printf_common+0x48>
 8010036:	f104 0a19 	add.w	sl, r4, #25
 801003a:	68e3      	ldr	r3, [r4, #12]
 801003c:	6832      	ldr	r2, [r6, #0]
 801003e:	1a9b      	subs	r3, r3, r2
 8010040:	42ab      	cmp	r3, r5
 8010042:	dc26      	bgt.n	8010092 <_printf_common+0x96>
 8010044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010048:	6822      	ldr	r2, [r4, #0]
 801004a:	3b00      	subs	r3, #0
 801004c:	bf18      	it	ne
 801004e:	2301      	movne	r3, #1
 8010050:	0692      	lsls	r2, r2, #26
 8010052:	d42b      	bmi.n	80100ac <_printf_common+0xb0>
 8010054:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010058:	4641      	mov	r1, r8
 801005a:	4638      	mov	r0, r7
 801005c:	47c8      	blx	r9
 801005e:	3001      	adds	r0, #1
 8010060:	d01e      	beq.n	80100a0 <_printf_common+0xa4>
 8010062:	6823      	ldr	r3, [r4, #0]
 8010064:	6922      	ldr	r2, [r4, #16]
 8010066:	f003 0306 	and.w	r3, r3, #6
 801006a:	2b04      	cmp	r3, #4
 801006c:	bf02      	ittt	eq
 801006e:	68e5      	ldreq	r5, [r4, #12]
 8010070:	6833      	ldreq	r3, [r6, #0]
 8010072:	1aed      	subeq	r5, r5, r3
 8010074:	68a3      	ldr	r3, [r4, #8]
 8010076:	bf0c      	ite	eq
 8010078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801007c:	2500      	movne	r5, #0
 801007e:	4293      	cmp	r3, r2
 8010080:	bfc4      	itt	gt
 8010082:	1a9b      	subgt	r3, r3, r2
 8010084:	18ed      	addgt	r5, r5, r3
 8010086:	2600      	movs	r6, #0
 8010088:	341a      	adds	r4, #26
 801008a:	42b5      	cmp	r5, r6
 801008c:	d11a      	bne.n	80100c4 <_printf_common+0xc8>
 801008e:	2000      	movs	r0, #0
 8010090:	e008      	b.n	80100a4 <_printf_common+0xa8>
 8010092:	2301      	movs	r3, #1
 8010094:	4652      	mov	r2, sl
 8010096:	4641      	mov	r1, r8
 8010098:	4638      	mov	r0, r7
 801009a:	47c8      	blx	r9
 801009c:	3001      	adds	r0, #1
 801009e:	d103      	bne.n	80100a8 <_printf_common+0xac>
 80100a0:	f04f 30ff 	mov.w	r0, #4294967295
 80100a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a8:	3501      	adds	r5, #1
 80100aa:	e7c6      	b.n	801003a <_printf_common+0x3e>
 80100ac:	18e1      	adds	r1, r4, r3
 80100ae:	1c5a      	adds	r2, r3, #1
 80100b0:	2030      	movs	r0, #48	@ 0x30
 80100b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80100b6:	4422      	add	r2, r4
 80100b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80100bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80100c0:	3302      	adds	r3, #2
 80100c2:	e7c7      	b.n	8010054 <_printf_common+0x58>
 80100c4:	2301      	movs	r3, #1
 80100c6:	4622      	mov	r2, r4
 80100c8:	4641      	mov	r1, r8
 80100ca:	4638      	mov	r0, r7
 80100cc:	47c8      	blx	r9
 80100ce:	3001      	adds	r0, #1
 80100d0:	d0e6      	beq.n	80100a0 <_printf_common+0xa4>
 80100d2:	3601      	adds	r6, #1
 80100d4:	e7d9      	b.n	801008a <_printf_common+0x8e>
	...

080100d8 <_printf_i>:
 80100d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100dc:	7e0f      	ldrb	r7, [r1, #24]
 80100de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80100e0:	2f78      	cmp	r7, #120	@ 0x78
 80100e2:	4691      	mov	r9, r2
 80100e4:	4680      	mov	r8, r0
 80100e6:	460c      	mov	r4, r1
 80100e8:	469a      	mov	sl, r3
 80100ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80100ee:	d807      	bhi.n	8010100 <_printf_i+0x28>
 80100f0:	2f62      	cmp	r7, #98	@ 0x62
 80100f2:	d80a      	bhi.n	801010a <_printf_i+0x32>
 80100f4:	2f00      	cmp	r7, #0
 80100f6:	f000 80d2 	beq.w	801029e <_printf_i+0x1c6>
 80100fa:	2f58      	cmp	r7, #88	@ 0x58
 80100fc:	f000 80b9 	beq.w	8010272 <_printf_i+0x19a>
 8010100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010104:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010108:	e03a      	b.n	8010180 <_printf_i+0xa8>
 801010a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801010e:	2b15      	cmp	r3, #21
 8010110:	d8f6      	bhi.n	8010100 <_printf_i+0x28>
 8010112:	a101      	add	r1, pc, #4	@ (adr r1, 8010118 <_printf_i+0x40>)
 8010114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010118:	08010171 	.word	0x08010171
 801011c:	08010185 	.word	0x08010185
 8010120:	08010101 	.word	0x08010101
 8010124:	08010101 	.word	0x08010101
 8010128:	08010101 	.word	0x08010101
 801012c:	08010101 	.word	0x08010101
 8010130:	08010185 	.word	0x08010185
 8010134:	08010101 	.word	0x08010101
 8010138:	08010101 	.word	0x08010101
 801013c:	08010101 	.word	0x08010101
 8010140:	08010101 	.word	0x08010101
 8010144:	08010285 	.word	0x08010285
 8010148:	080101af 	.word	0x080101af
 801014c:	0801023f 	.word	0x0801023f
 8010150:	08010101 	.word	0x08010101
 8010154:	08010101 	.word	0x08010101
 8010158:	080102a7 	.word	0x080102a7
 801015c:	08010101 	.word	0x08010101
 8010160:	080101af 	.word	0x080101af
 8010164:	08010101 	.word	0x08010101
 8010168:	08010101 	.word	0x08010101
 801016c:	08010247 	.word	0x08010247
 8010170:	6833      	ldr	r3, [r6, #0]
 8010172:	1d1a      	adds	r2, r3, #4
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	6032      	str	r2, [r6, #0]
 8010178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801017c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010180:	2301      	movs	r3, #1
 8010182:	e09d      	b.n	80102c0 <_printf_i+0x1e8>
 8010184:	6833      	ldr	r3, [r6, #0]
 8010186:	6820      	ldr	r0, [r4, #0]
 8010188:	1d19      	adds	r1, r3, #4
 801018a:	6031      	str	r1, [r6, #0]
 801018c:	0606      	lsls	r6, r0, #24
 801018e:	d501      	bpl.n	8010194 <_printf_i+0xbc>
 8010190:	681d      	ldr	r5, [r3, #0]
 8010192:	e003      	b.n	801019c <_printf_i+0xc4>
 8010194:	0645      	lsls	r5, r0, #25
 8010196:	d5fb      	bpl.n	8010190 <_printf_i+0xb8>
 8010198:	f9b3 5000 	ldrsh.w	r5, [r3]
 801019c:	2d00      	cmp	r5, #0
 801019e:	da03      	bge.n	80101a8 <_printf_i+0xd0>
 80101a0:	232d      	movs	r3, #45	@ 0x2d
 80101a2:	426d      	negs	r5, r5
 80101a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101a8:	4859      	ldr	r0, [pc, #356]	@ (8010310 <_printf_i+0x238>)
 80101aa:	230a      	movs	r3, #10
 80101ac:	e011      	b.n	80101d2 <_printf_i+0xfa>
 80101ae:	6821      	ldr	r1, [r4, #0]
 80101b0:	6833      	ldr	r3, [r6, #0]
 80101b2:	0608      	lsls	r0, r1, #24
 80101b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80101b8:	d402      	bmi.n	80101c0 <_printf_i+0xe8>
 80101ba:	0649      	lsls	r1, r1, #25
 80101bc:	bf48      	it	mi
 80101be:	b2ad      	uxthmi	r5, r5
 80101c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80101c2:	4853      	ldr	r0, [pc, #332]	@ (8010310 <_printf_i+0x238>)
 80101c4:	6033      	str	r3, [r6, #0]
 80101c6:	bf14      	ite	ne
 80101c8:	230a      	movne	r3, #10
 80101ca:	2308      	moveq	r3, #8
 80101cc:	2100      	movs	r1, #0
 80101ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80101d2:	6866      	ldr	r6, [r4, #4]
 80101d4:	60a6      	str	r6, [r4, #8]
 80101d6:	2e00      	cmp	r6, #0
 80101d8:	bfa2      	ittt	ge
 80101da:	6821      	ldrge	r1, [r4, #0]
 80101dc:	f021 0104 	bicge.w	r1, r1, #4
 80101e0:	6021      	strge	r1, [r4, #0]
 80101e2:	b90d      	cbnz	r5, 80101e8 <_printf_i+0x110>
 80101e4:	2e00      	cmp	r6, #0
 80101e6:	d04b      	beq.n	8010280 <_printf_i+0x1a8>
 80101e8:	4616      	mov	r6, r2
 80101ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80101ee:	fb03 5711 	mls	r7, r3, r1, r5
 80101f2:	5dc7      	ldrb	r7, [r0, r7]
 80101f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80101f8:	462f      	mov	r7, r5
 80101fa:	42bb      	cmp	r3, r7
 80101fc:	460d      	mov	r5, r1
 80101fe:	d9f4      	bls.n	80101ea <_printf_i+0x112>
 8010200:	2b08      	cmp	r3, #8
 8010202:	d10b      	bne.n	801021c <_printf_i+0x144>
 8010204:	6823      	ldr	r3, [r4, #0]
 8010206:	07df      	lsls	r7, r3, #31
 8010208:	d508      	bpl.n	801021c <_printf_i+0x144>
 801020a:	6923      	ldr	r3, [r4, #16]
 801020c:	6861      	ldr	r1, [r4, #4]
 801020e:	4299      	cmp	r1, r3
 8010210:	bfde      	ittt	le
 8010212:	2330      	movle	r3, #48	@ 0x30
 8010214:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010218:	f106 36ff 	addle.w	r6, r6, #4294967295
 801021c:	1b92      	subs	r2, r2, r6
 801021e:	6122      	str	r2, [r4, #16]
 8010220:	f8cd a000 	str.w	sl, [sp]
 8010224:	464b      	mov	r3, r9
 8010226:	aa03      	add	r2, sp, #12
 8010228:	4621      	mov	r1, r4
 801022a:	4640      	mov	r0, r8
 801022c:	f7ff fee6 	bl	800fffc <_printf_common>
 8010230:	3001      	adds	r0, #1
 8010232:	d14a      	bne.n	80102ca <_printf_i+0x1f2>
 8010234:	f04f 30ff 	mov.w	r0, #4294967295
 8010238:	b004      	add	sp, #16
 801023a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801023e:	6823      	ldr	r3, [r4, #0]
 8010240:	f043 0320 	orr.w	r3, r3, #32
 8010244:	6023      	str	r3, [r4, #0]
 8010246:	4833      	ldr	r0, [pc, #204]	@ (8010314 <_printf_i+0x23c>)
 8010248:	2778      	movs	r7, #120	@ 0x78
 801024a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801024e:	6823      	ldr	r3, [r4, #0]
 8010250:	6831      	ldr	r1, [r6, #0]
 8010252:	061f      	lsls	r7, r3, #24
 8010254:	f851 5b04 	ldr.w	r5, [r1], #4
 8010258:	d402      	bmi.n	8010260 <_printf_i+0x188>
 801025a:	065f      	lsls	r7, r3, #25
 801025c:	bf48      	it	mi
 801025e:	b2ad      	uxthmi	r5, r5
 8010260:	6031      	str	r1, [r6, #0]
 8010262:	07d9      	lsls	r1, r3, #31
 8010264:	bf44      	itt	mi
 8010266:	f043 0320 	orrmi.w	r3, r3, #32
 801026a:	6023      	strmi	r3, [r4, #0]
 801026c:	b11d      	cbz	r5, 8010276 <_printf_i+0x19e>
 801026e:	2310      	movs	r3, #16
 8010270:	e7ac      	b.n	80101cc <_printf_i+0xf4>
 8010272:	4827      	ldr	r0, [pc, #156]	@ (8010310 <_printf_i+0x238>)
 8010274:	e7e9      	b.n	801024a <_printf_i+0x172>
 8010276:	6823      	ldr	r3, [r4, #0]
 8010278:	f023 0320 	bic.w	r3, r3, #32
 801027c:	6023      	str	r3, [r4, #0]
 801027e:	e7f6      	b.n	801026e <_printf_i+0x196>
 8010280:	4616      	mov	r6, r2
 8010282:	e7bd      	b.n	8010200 <_printf_i+0x128>
 8010284:	6833      	ldr	r3, [r6, #0]
 8010286:	6825      	ldr	r5, [r4, #0]
 8010288:	6961      	ldr	r1, [r4, #20]
 801028a:	1d18      	adds	r0, r3, #4
 801028c:	6030      	str	r0, [r6, #0]
 801028e:	062e      	lsls	r6, r5, #24
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	d501      	bpl.n	8010298 <_printf_i+0x1c0>
 8010294:	6019      	str	r1, [r3, #0]
 8010296:	e002      	b.n	801029e <_printf_i+0x1c6>
 8010298:	0668      	lsls	r0, r5, #25
 801029a:	d5fb      	bpl.n	8010294 <_printf_i+0x1bc>
 801029c:	8019      	strh	r1, [r3, #0]
 801029e:	2300      	movs	r3, #0
 80102a0:	6123      	str	r3, [r4, #16]
 80102a2:	4616      	mov	r6, r2
 80102a4:	e7bc      	b.n	8010220 <_printf_i+0x148>
 80102a6:	6833      	ldr	r3, [r6, #0]
 80102a8:	1d1a      	adds	r2, r3, #4
 80102aa:	6032      	str	r2, [r6, #0]
 80102ac:	681e      	ldr	r6, [r3, #0]
 80102ae:	6862      	ldr	r2, [r4, #4]
 80102b0:	2100      	movs	r1, #0
 80102b2:	4630      	mov	r0, r6
 80102b4:	f7ef ff9c 	bl	80001f0 <memchr>
 80102b8:	b108      	cbz	r0, 80102be <_printf_i+0x1e6>
 80102ba:	1b80      	subs	r0, r0, r6
 80102bc:	6060      	str	r0, [r4, #4]
 80102be:	6863      	ldr	r3, [r4, #4]
 80102c0:	6123      	str	r3, [r4, #16]
 80102c2:	2300      	movs	r3, #0
 80102c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102c8:	e7aa      	b.n	8010220 <_printf_i+0x148>
 80102ca:	6923      	ldr	r3, [r4, #16]
 80102cc:	4632      	mov	r2, r6
 80102ce:	4649      	mov	r1, r9
 80102d0:	4640      	mov	r0, r8
 80102d2:	47d0      	blx	sl
 80102d4:	3001      	adds	r0, #1
 80102d6:	d0ad      	beq.n	8010234 <_printf_i+0x15c>
 80102d8:	6823      	ldr	r3, [r4, #0]
 80102da:	079b      	lsls	r3, r3, #30
 80102dc:	d413      	bmi.n	8010306 <_printf_i+0x22e>
 80102de:	68e0      	ldr	r0, [r4, #12]
 80102e0:	9b03      	ldr	r3, [sp, #12]
 80102e2:	4298      	cmp	r0, r3
 80102e4:	bfb8      	it	lt
 80102e6:	4618      	movlt	r0, r3
 80102e8:	e7a6      	b.n	8010238 <_printf_i+0x160>
 80102ea:	2301      	movs	r3, #1
 80102ec:	4632      	mov	r2, r6
 80102ee:	4649      	mov	r1, r9
 80102f0:	4640      	mov	r0, r8
 80102f2:	47d0      	blx	sl
 80102f4:	3001      	adds	r0, #1
 80102f6:	d09d      	beq.n	8010234 <_printf_i+0x15c>
 80102f8:	3501      	adds	r5, #1
 80102fa:	68e3      	ldr	r3, [r4, #12]
 80102fc:	9903      	ldr	r1, [sp, #12]
 80102fe:	1a5b      	subs	r3, r3, r1
 8010300:	42ab      	cmp	r3, r5
 8010302:	dcf2      	bgt.n	80102ea <_printf_i+0x212>
 8010304:	e7eb      	b.n	80102de <_printf_i+0x206>
 8010306:	2500      	movs	r5, #0
 8010308:	f104 0619 	add.w	r6, r4, #25
 801030c:	e7f5      	b.n	80102fa <_printf_i+0x222>
 801030e:	bf00      	nop
 8010310:	0801261e 	.word	0x0801261e
 8010314:	0801262f 	.word	0x0801262f

08010318 <std>:
 8010318:	2300      	movs	r3, #0
 801031a:	b510      	push	{r4, lr}
 801031c:	4604      	mov	r4, r0
 801031e:	e9c0 3300 	strd	r3, r3, [r0]
 8010322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010326:	6083      	str	r3, [r0, #8]
 8010328:	8181      	strh	r1, [r0, #12]
 801032a:	6643      	str	r3, [r0, #100]	@ 0x64
 801032c:	81c2      	strh	r2, [r0, #14]
 801032e:	6183      	str	r3, [r0, #24]
 8010330:	4619      	mov	r1, r3
 8010332:	2208      	movs	r2, #8
 8010334:	305c      	adds	r0, #92	@ 0x5c
 8010336:	f000 f8f4 	bl	8010522 <memset>
 801033a:	4b0d      	ldr	r3, [pc, #52]	@ (8010370 <std+0x58>)
 801033c:	6263      	str	r3, [r4, #36]	@ 0x24
 801033e:	4b0d      	ldr	r3, [pc, #52]	@ (8010374 <std+0x5c>)
 8010340:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010342:	4b0d      	ldr	r3, [pc, #52]	@ (8010378 <std+0x60>)
 8010344:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010346:	4b0d      	ldr	r3, [pc, #52]	@ (801037c <std+0x64>)
 8010348:	6323      	str	r3, [r4, #48]	@ 0x30
 801034a:	4b0d      	ldr	r3, [pc, #52]	@ (8010380 <std+0x68>)
 801034c:	6224      	str	r4, [r4, #32]
 801034e:	429c      	cmp	r4, r3
 8010350:	d006      	beq.n	8010360 <std+0x48>
 8010352:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010356:	4294      	cmp	r4, r2
 8010358:	d002      	beq.n	8010360 <std+0x48>
 801035a:	33d0      	adds	r3, #208	@ 0xd0
 801035c:	429c      	cmp	r4, r3
 801035e:	d105      	bne.n	801036c <std+0x54>
 8010360:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010368:	f000 b9ae 	b.w	80106c8 <__retarget_lock_init_recursive>
 801036c:	bd10      	pop	{r4, pc}
 801036e:	bf00      	nop
 8010370:	0801049d 	.word	0x0801049d
 8010374:	080104bf 	.word	0x080104bf
 8010378:	080104f7 	.word	0x080104f7
 801037c:	0801051b 	.word	0x0801051b
 8010380:	2000457c 	.word	0x2000457c

08010384 <stdio_exit_handler>:
 8010384:	4a02      	ldr	r2, [pc, #8]	@ (8010390 <stdio_exit_handler+0xc>)
 8010386:	4903      	ldr	r1, [pc, #12]	@ (8010394 <stdio_exit_handler+0x10>)
 8010388:	4803      	ldr	r0, [pc, #12]	@ (8010398 <stdio_exit_handler+0x14>)
 801038a:	f000 b869 	b.w	8010460 <_fwalk_sglue>
 801038e:	bf00      	nop
 8010390:	20000118 	.word	0x20000118
 8010394:	08011d95 	.word	0x08011d95
 8010398:	20000128 	.word	0x20000128

0801039c <cleanup_stdio>:
 801039c:	6841      	ldr	r1, [r0, #4]
 801039e:	4b0c      	ldr	r3, [pc, #48]	@ (80103d0 <cleanup_stdio+0x34>)
 80103a0:	4299      	cmp	r1, r3
 80103a2:	b510      	push	{r4, lr}
 80103a4:	4604      	mov	r4, r0
 80103a6:	d001      	beq.n	80103ac <cleanup_stdio+0x10>
 80103a8:	f001 fcf4 	bl	8011d94 <_fflush_r>
 80103ac:	68a1      	ldr	r1, [r4, #8]
 80103ae:	4b09      	ldr	r3, [pc, #36]	@ (80103d4 <cleanup_stdio+0x38>)
 80103b0:	4299      	cmp	r1, r3
 80103b2:	d002      	beq.n	80103ba <cleanup_stdio+0x1e>
 80103b4:	4620      	mov	r0, r4
 80103b6:	f001 fced 	bl	8011d94 <_fflush_r>
 80103ba:	68e1      	ldr	r1, [r4, #12]
 80103bc:	4b06      	ldr	r3, [pc, #24]	@ (80103d8 <cleanup_stdio+0x3c>)
 80103be:	4299      	cmp	r1, r3
 80103c0:	d004      	beq.n	80103cc <cleanup_stdio+0x30>
 80103c2:	4620      	mov	r0, r4
 80103c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103c8:	f001 bce4 	b.w	8011d94 <_fflush_r>
 80103cc:	bd10      	pop	{r4, pc}
 80103ce:	bf00      	nop
 80103d0:	2000457c 	.word	0x2000457c
 80103d4:	200045e4 	.word	0x200045e4
 80103d8:	2000464c 	.word	0x2000464c

080103dc <global_stdio_init.part.0>:
 80103dc:	b510      	push	{r4, lr}
 80103de:	4b0b      	ldr	r3, [pc, #44]	@ (801040c <global_stdio_init.part.0+0x30>)
 80103e0:	4c0b      	ldr	r4, [pc, #44]	@ (8010410 <global_stdio_init.part.0+0x34>)
 80103e2:	4a0c      	ldr	r2, [pc, #48]	@ (8010414 <global_stdio_init.part.0+0x38>)
 80103e4:	601a      	str	r2, [r3, #0]
 80103e6:	4620      	mov	r0, r4
 80103e8:	2200      	movs	r2, #0
 80103ea:	2104      	movs	r1, #4
 80103ec:	f7ff ff94 	bl	8010318 <std>
 80103f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80103f4:	2201      	movs	r2, #1
 80103f6:	2109      	movs	r1, #9
 80103f8:	f7ff ff8e 	bl	8010318 <std>
 80103fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010400:	2202      	movs	r2, #2
 8010402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010406:	2112      	movs	r1, #18
 8010408:	f7ff bf86 	b.w	8010318 <std>
 801040c:	200046b4 	.word	0x200046b4
 8010410:	2000457c 	.word	0x2000457c
 8010414:	08010385 	.word	0x08010385

08010418 <__sfp_lock_acquire>:
 8010418:	4801      	ldr	r0, [pc, #4]	@ (8010420 <__sfp_lock_acquire+0x8>)
 801041a:	f000 b956 	b.w	80106ca <__retarget_lock_acquire_recursive>
 801041e:	bf00      	nop
 8010420:	200046bd 	.word	0x200046bd

08010424 <__sfp_lock_release>:
 8010424:	4801      	ldr	r0, [pc, #4]	@ (801042c <__sfp_lock_release+0x8>)
 8010426:	f000 b951 	b.w	80106cc <__retarget_lock_release_recursive>
 801042a:	bf00      	nop
 801042c:	200046bd 	.word	0x200046bd

08010430 <__sinit>:
 8010430:	b510      	push	{r4, lr}
 8010432:	4604      	mov	r4, r0
 8010434:	f7ff fff0 	bl	8010418 <__sfp_lock_acquire>
 8010438:	6a23      	ldr	r3, [r4, #32]
 801043a:	b11b      	cbz	r3, 8010444 <__sinit+0x14>
 801043c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010440:	f7ff bff0 	b.w	8010424 <__sfp_lock_release>
 8010444:	4b04      	ldr	r3, [pc, #16]	@ (8010458 <__sinit+0x28>)
 8010446:	6223      	str	r3, [r4, #32]
 8010448:	4b04      	ldr	r3, [pc, #16]	@ (801045c <__sinit+0x2c>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d1f5      	bne.n	801043c <__sinit+0xc>
 8010450:	f7ff ffc4 	bl	80103dc <global_stdio_init.part.0>
 8010454:	e7f2      	b.n	801043c <__sinit+0xc>
 8010456:	bf00      	nop
 8010458:	0801039d 	.word	0x0801039d
 801045c:	200046b4 	.word	0x200046b4

08010460 <_fwalk_sglue>:
 8010460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010464:	4607      	mov	r7, r0
 8010466:	4688      	mov	r8, r1
 8010468:	4614      	mov	r4, r2
 801046a:	2600      	movs	r6, #0
 801046c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010470:	f1b9 0901 	subs.w	r9, r9, #1
 8010474:	d505      	bpl.n	8010482 <_fwalk_sglue+0x22>
 8010476:	6824      	ldr	r4, [r4, #0]
 8010478:	2c00      	cmp	r4, #0
 801047a:	d1f7      	bne.n	801046c <_fwalk_sglue+0xc>
 801047c:	4630      	mov	r0, r6
 801047e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010482:	89ab      	ldrh	r3, [r5, #12]
 8010484:	2b01      	cmp	r3, #1
 8010486:	d907      	bls.n	8010498 <_fwalk_sglue+0x38>
 8010488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801048c:	3301      	adds	r3, #1
 801048e:	d003      	beq.n	8010498 <_fwalk_sglue+0x38>
 8010490:	4629      	mov	r1, r5
 8010492:	4638      	mov	r0, r7
 8010494:	47c0      	blx	r8
 8010496:	4306      	orrs	r6, r0
 8010498:	3568      	adds	r5, #104	@ 0x68
 801049a:	e7e9      	b.n	8010470 <_fwalk_sglue+0x10>

0801049c <__sread>:
 801049c:	b510      	push	{r4, lr}
 801049e:	460c      	mov	r4, r1
 80104a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104a4:	f000 f8c2 	bl	801062c <_read_r>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	bfab      	itete	ge
 80104ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80104ae:	89a3      	ldrhlt	r3, [r4, #12]
 80104b0:	181b      	addge	r3, r3, r0
 80104b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80104b6:	bfac      	ite	ge
 80104b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80104ba:	81a3      	strhlt	r3, [r4, #12]
 80104bc:	bd10      	pop	{r4, pc}

080104be <__swrite>:
 80104be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c2:	461f      	mov	r7, r3
 80104c4:	898b      	ldrh	r3, [r1, #12]
 80104c6:	05db      	lsls	r3, r3, #23
 80104c8:	4605      	mov	r5, r0
 80104ca:	460c      	mov	r4, r1
 80104cc:	4616      	mov	r6, r2
 80104ce:	d505      	bpl.n	80104dc <__swrite+0x1e>
 80104d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104d4:	2302      	movs	r3, #2
 80104d6:	2200      	movs	r2, #0
 80104d8:	f000 f896 	bl	8010608 <_lseek_r>
 80104dc:	89a3      	ldrh	r3, [r4, #12]
 80104de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80104e6:	81a3      	strh	r3, [r4, #12]
 80104e8:	4632      	mov	r2, r6
 80104ea:	463b      	mov	r3, r7
 80104ec:	4628      	mov	r0, r5
 80104ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104f2:	f000 b8ad 	b.w	8010650 <_write_r>

080104f6 <__sseek>:
 80104f6:	b510      	push	{r4, lr}
 80104f8:	460c      	mov	r4, r1
 80104fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104fe:	f000 f883 	bl	8010608 <_lseek_r>
 8010502:	1c43      	adds	r3, r0, #1
 8010504:	89a3      	ldrh	r3, [r4, #12]
 8010506:	bf15      	itete	ne
 8010508:	6560      	strne	r0, [r4, #84]	@ 0x54
 801050a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801050e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010512:	81a3      	strheq	r3, [r4, #12]
 8010514:	bf18      	it	ne
 8010516:	81a3      	strhne	r3, [r4, #12]
 8010518:	bd10      	pop	{r4, pc}

0801051a <__sclose>:
 801051a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801051e:	f000 b80d 	b.w	801053c <_close_r>

08010522 <memset>:
 8010522:	4402      	add	r2, r0
 8010524:	4603      	mov	r3, r0
 8010526:	4293      	cmp	r3, r2
 8010528:	d100      	bne.n	801052c <memset+0xa>
 801052a:	4770      	bx	lr
 801052c:	f803 1b01 	strb.w	r1, [r3], #1
 8010530:	e7f9      	b.n	8010526 <memset+0x4>
	...

08010534 <_localeconv_r>:
 8010534:	4800      	ldr	r0, [pc, #0]	@ (8010538 <_localeconv_r+0x4>)
 8010536:	4770      	bx	lr
 8010538:	20000264 	.word	0x20000264

0801053c <_close_r>:
 801053c:	b538      	push	{r3, r4, r5, lr}
 801053e:	4d06      	ldr	r5, [pc, #24]	@ (8010558 <_close_r+0x1c>)
 8010540:	2300      	movs	r3, #0
 8010542:	4604      	mov	r4, r0
 8010544:	4608      	mov	r0, r1
 8010546:	602b      	str	r3, [r5, #0]
 8010548:	f7f2 fc3e 	bl	8002dc8 <_close>
 801054c:	1c43      	adds	r3, r0, #1
 801054e:	d102      	bne.n	8010556 <_close_r+0x1a>
 8010550:	682b      	ldr	r3, [r5, #0]
 8010552:	b103      	cbz	r3, 8010556 <_close_r+0x1a>
 8010554:	6023      	str	r3, [r4, #0]
 8010556:	bd38      	pop	{r3, r4, r5, pc}
 8010558:	200046b8 	.word	0x200046b8

0801055c <_reclaim_reent>:
 801055c:	4b29      	ldr	r3, [pc, #164]	@ (8010604 <_reclaim_reent+0xa8>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	4283      	cmp	r3, r0
 8010562:	b570      	push	{r4, r5, r6, lr}
 8010564:	4604      	mov	r4, r0
 8010566:	d04b      	beq.n	8010600 <_reclaim_reent+0xa4>
 8010568:	69c3      	ldr	r3, [r0, #28]
 801056a:	b1ab      	cbz	r3, 8010598 <_reclaim_reent+0x3c>
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	b16b      	cbz	r3, 801058c <_reclaim_reent+0x30>
 8010570:	2500      	movs	r5, #0
 8010572:	69e3      	ldr	r3, [r4, #28]
 8010574:	68db      	ldr	r3, [r3, #12]
 8010576:	5959      	ldr	r1, [r3, r5]
 8010578:	2900      	cmp	r1, #0
 801057a:	d13b      	bne.n	80105f4 <_reclaim_reent+0x98>
 801057c:	3504      	adds	r5, #4
 801057e:	2d80      	cmp	r5, #128	@ 0x80
 8010580:	d1f7      	bne.n	8010572 <_reclaim_reent+0x16>
 8010582:	69e3      	ldr	r3, [r4, #28]
 8010584:	4620      	mov	r0, r4
 8010586:	68d9      	ldr	r1, [r3, #12]
 8010588:	f000 fefe 	bl	8011388 <_free_r>
 801058c:	69e3      	ldr	r3, [r4, #28]
 801058e:	6819      	ldr	r1, [r3, #0]
 8010590:	b111      	cbz	r1, 8010598 <_reclaim_reent+0x3c>
 8010592:	4620      	mov	r0, r4
 8010594:	f000 fef8 	bl	8011388 <_free_r>
 8010598:	6961      	ldr	r1, [r4, #20]
 801059a:	b111      	cbz	r1, 80105a2 <_reclaim_reent+0x46>
 801059c:	4620      	mov	r0, r4
 801059e:	f000 fef3 	bl	8011388 <_free_r>
 80105a2:	69e1      	ldr	r1, [r4, #28]
 80105a4:	b111      	cbz	r1, 80105ac <_reclaim_reent+0x50>
 80105a6:	4620      	mov	r0, r4
 80105a8:	f000 feee 	bl	8011388 <_free_r>
 80105ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80105ae:	b111      	cbz	r1, 80105b6 <_reclaim_reent+0x5a>
 80105b0:	4620      	mov	r0, r4
 80105b2:	f000 fee9 	bl	8011388 <_free_r>
 80105b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80105b8:	b111      	cbz	r1, 80105c0 <_reclaim_reent+0x64>
 80105ba:	4620      	mov	r0, r4
 80105bc:	f000 fee4 	bl	8011388 <_free_r>
 80105c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80105c2:	b111      	cbz	r1, 80105ca <_reclaim_reent+0x6e>
 80105c4:	4620      	mov	r0, r4
 80105c6:	f000 fedf 	bl	8011388 <_free_r>
 80105ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80105cc:	b111      	cbz	r1, 80105d4 <_reclaim_reent+0x78>
 80105ce:	4620      	mov	r0, r4
 80105d0:	f000 feda 	bl	8011388 <_free_r>
 80105d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80105d6:	b111      	cbz	r1, 80105de <_reclaim_reent+0x82>
 80105d8:	4620      	mov	r0, r4
 80105da:	f000 fed5 	bl	8011388 <_free_r>
 80105de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80105e0:	b111      	cbz	r1, 80105e8 <_reclaim_reent+0x8c>
 80105e2:	4620      	mov	r0, r4
 80105e4:	f000 fed0 	bl	8011388 <_free_r>
 80105e8:	6a23      	ldr	r3, [r4, #32]
 80105ea:	b14b      	cbz	r3, 8010600 <_reclaim_reent+0xa4>
 80105ec:	4620      	mov	r0, r4
 80105ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105f2:	4718      	bx	r3
 80105f4:	680e      	ldr	r6, [r1, #0]
 80105f6:	4620      	mov	r0, r4
 80105f8:	f000 fec6 	bl	8011388 <_free_r>
 80105fc:	4631      	mov	r1, r6
 80105fe:	e7bb      	b.n	8010578 <_reclaim_reent+0x1c>
 8010600:	bd70      	pop	{r4, r5, r6, pc}
 8010602:	bf00      	nop
 8010604:	20000124 	.word	0x20000124

08010608 <_lseek_r>:
 8010608:	b538      	push	{r3, r4, r5, lr}
 801060a:	4d07      	ldr	r5, [pc, #28]	@ (8010628 <_lseek_r+0x20>)
 801060c:	4604      	mov	r4, r0
 801060e:	4608      	mov	r0, r1
 8010610:	4611      	mov	r1, r2
 8010612:	2200      	movs	r2, #0
 8010614:	602a      	str	r2, [r5, #0]
 8010616:	461a      	mov	r2, r3
 8010618:	f7f2 fbfd 	bl	8002e16 <_lseek>
 801061c:	1c43      	adds	r3, r0, #1
 801061e:	d102      	bne.n	8010626 <_lseek_r+0x1e>
 8010620:	682b      	ldr	r3, [r5, #0]
 8010622:	b103      	cbz	r3, 8010626 <_lseek_r+0x1e>
 8010624:	6023      	str	r3, [r4, #0]
 8010626:	bd38      	pop	{r3, r4, r5, pc}
 8010628:	200046b8 	.word	0x200046b8

0801062c <_read_r>:
 801062c:	b538      	push	{r3, r4, r5, lr}
 801062e:	4d07      	ldr	r5, [pc, #28]	@ (801064c <_read_r+0x20>)
 8010630:	4604      	mov	r4, r0
 8010632:	4608      	mov	r0, r1
 8010634:	4611      	mov	r1, r2
 8010636:	2200      	movs	r2, #0
 8010638:	602a      	str	r2, [r5, #0]
 801063a:	461a      	mov	r2, r3
 801063c:	f7f2 fb8b 	bl	8002d56 <_read>
 8010640:	1c43      	adds	r3, r0, #1
 8010642:	d102      	bne.n	801064a <_read_r+0x1e>
 8010644:	682b      	ldr	r3, [r5, #0]
 8010646:	b103      	cbz	r3, 801064a <_read_r+0x1e>
 8010648:	6023      	str	r3, [r4, #0]
 801064a:	bd38      	pop	{r3, r4, r5, pc}
 801064c:	200046b8 	.word	0x200046b8

08010650 <_write_r>:
 8010650:	b538      	push	{r3, r4, r5, lr}
 8010652:	4d07      	ldr	r5, [pc, #28]	@ (8010670 <_write_r+0x20>)
 8010654:	4604      	mov	r4, r0
 8010656:	4608      	mov	r0, r1
 8010658:	4611      	mov	r1, r2
 801065a:	2200      	movs	r2, #0
 801065c:	602a      	str	r2, [r5, #0]
 801065e:	461a      	mov	r2, r3
 8010660:	f7f2 fb96 	bl	8002d90 <_write>
 8010664:	1c43      	adds	r3, r0, #1
 8010666:	d102      	bne.n	801066e <_write_r+0x1e>
 8010668:	682b      	ldr	r3, [r5, #0]
 801066a:	b103      	cbz	r3, 801066e <_write_r+0x1e>
 801066c:	6023      	str	r3, [r4, #0]
 801066e:	bd38      	pop	{r3, r4, r5, pc}
 8010670:	200046b8 	.word	0x200046b8

08010674 <__errno>:
 8010674:	4b01      	ldr	r3, [pc, #4]	@ (801067c <__errno+0x8>)
 8010676:	6818      	ldr	r0, [r3, #0]
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop
 801067c:	20000124 	.word	0x20000124

08010680 <__libc_init_array>:
 8010680:	b570      	push	{r4, r5, r6, lr}
 8010682:	4d0d      	ldr	r5, [pc, #52]	@ (80106b8 <__libc_init_array+0x38>)
 8010684:	4c0d      	ldr	r4, [pc, #52]	@ (80106bc <__libc_init_array+0x3c>)
 8010686:	1b64      	subs	r4, r4, r5
 8010688:	10a4      	asrs	r4, r4, #2
 801068a:	2600      	movs	r6, #0
 801068c:	42a6      	cmp	r6, r4
 801068e:	d109      	bne.n	80106a4 <__libc_init_array+0x24>
 8010690:	4d0b      	ldr	r5, [pc, #44]	@ (80106c0 <__libc_init_array+0x40>)
 8010692:	4c0c      	ldr	r4, [pc, #48]	@ (80106c4 <__libc_init_array+0x44>)
 8010694:	f001 febe 	bl	8012414 <_init>
 8010698:	1b64      	subs	r4, r4, r5
 801069a:	10a4      	asrs	r4, r4, #2
 801069c:	2600      	movs	r6, #0
 801069e:	42a6      	cmp	r6, r4
 80106a0:	d105      	bne.n	80106ae <__libc_init_array+0x2e>
 80106a2:	bd70      	pop	{r4, r5, r6, pc}
 80106a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80106a8:	4798      	blx	r3
 80106aa:	3601      	adds	r6, #1
 80106ac:	e7ee      	b.n	801068c <__libc_init_array+0xc>
 80106ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80106b2:	4798      	blx	r3
 80106b4:	3601      	adds	r6, #1
 80106b6:	e7f2      	b.n	801069e <__libc_init_array+0x1e>
 80106b8:	08012988 	.word	0x08012988
 80106bc:	08012988 	.word	0x08012988
 80106c0:	08012988 	.word	0x08012988
 80106c4:	08012990 	.word	0x08012990

080106c8 <__retarget_lock_init_recursive>:
 80106c8:	4770      	bx	lr

080106ca <__retarget_lock_acquire_recursive>:
 80106ca:	4770      	bx	lr

080106cc <__retarget_lock_release_recursive>:
 80106cc:	4770      	bx	lr

080106ce <memcpy>:
 80106ce:	440a      	add	r2, r1
 80106d0:	4291      	cmp	r1, r2
 80106d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80106d6:	d100      	bne.n	80106da <memcpy+0xc>
 80106d8:	4770      	bx	lr
 80106da:	b510      	push	{r4, lr}
 80106dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80106e4:	4291      	cmp	r1, r2
 80106e6:	d1f9      	bne.n	80106dc <memcpy+0xe>
 80106e8:	bd10      	pop	{r4, pc}

080106ea <quorem>:
 80106ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ee:	6903      	ldr	r3, [r0, #16]
 80106f0:	690c      	ldr	r4, [r1, #16]
 80106f2:	42a3      	cmp	r3, r4
 80106f4:	4607      	mov	r7, r0
 80106f6:	db7e      	blt.n	80107f6 <quorem+0x10c>
 80106f8:	3c01      	subs	r4, #1
 80106fa:	f101 0814 	add.w	r8, r1, #20
 80106fe:	00a3      	lsls	r3, r4, #2
 8010700:	f100 0514 	add.w	r5, r0, #20
 8010704:	9300      	str	r3, [sp, #0]
 8010706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801070a:	9301      	str	r3, [sp, #4]
 801070c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010710:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010714:	3301      	adds	r3, #1
 8010716:	429a      	cmp	r2, r3
 8010718:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801071c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010720:	d32e      	bcc.n	8010780 <quorem+0x96>
 8010722:	f04f 0a00 	mov.w	sl, #0
 8010726:	46c4      	mov	ip, r8
 8010728:	46ae      	mov	lr, r5
 801072a:	46d3      	mov	fp, sl
 801072c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010730:	b298      	uxth	r0, r3
 8010732:	fb06 a000 	mla	r0, r6, r0, sl
 8010736:	0c02      	lsrs	r2, r0, #16
 8010738:	0c1b      	lsrs	r3, r3, #16
 801073a:	fb06 2303 	mla	r3, r6, r3, r2
 801073e:	f8de 2000 	ldr.w	r2, [lr]
 8010742:	b280      	uxth	r0, r0
 8010744:	b292      	uxth	r2, r2
 8010746:	1a12      	subs	r2, r2, r0
 8010748:	445a      	add	r2, fp
 801074a:	f8de 0000 	ldr.w	r0, [lr]
 801074e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010752:	b29b      	uxth	r3, r3
 8010754:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010758:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801075c:	b292      	uxth	r2, r2
 801075e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010762:	45e1      	cmp	r9, ip
 8010764:	f84e 2b04 	str.w	r2, [lr], #4
 8010768:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801076c:	d2de      	bcs.n	801072c <quorem+0x42>
 801076e:	9b00      	ldr	r3, [sp, #0]
 8010770:	58eb      	ldr	r3, [r5, r3]
 8010772:	b92b      	cbnz	r3, 8010780 <quorem+0x96>
 8010774:	9b01      	ldr	r3, [sp, #4]
 8010776:	3b04      	subs	r3, #4
 8010778:	429d      	cmp	r5, r3
 801077a:	461a      	mov	r2, r3
 801077c:	d32f      	bcc.n	80107de <quorem+0xf4>
 801077e:	613c      	str	r4, [r7, #16]
 8010780:	4638      	mov	r0, r7
 8010782:	f001 f97b 	bl	8011a7c <__mcmp>
 8010786:	2800      	cmp	r0, #0
 8010788:	db25      	blt.n	80107d6 <quorem+0xec>
 801078a:	4629      	mov	r1, r5
 801078c:	2000      	movs	r0, #0
 801078e:	f858 2b04 	ldr.w	r2, [r8], #4
 8010792:	f8d1 c000 	ldr.w	ip, [r1]
 8010796:	fa1f fe82 	uxth.w	lr, r2
 801079a:	fa1f f38c 	uxth.w	r3, ip
 801079e:	eba3 030e 	sub.w	r3, r3, lr
 80107a2:	4403      	add	r3, r0
 80107a4:	0c12      	lsrs	r2, r2, #16
 80107a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80107aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107b4:	45c1      	cmp	r9, r8
 80107b6:	f841 3b04 	str.w	r3, [r1], #4
 80107ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80107be:	d2e6      	bcs.n	801078e <quorem+0xa4>
 80107c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107c8:	b922      	cbnz	r2, 80107d4 <quorem+0xea>
 80107ca:	3b04      	subs	r3, #4
 80107cc:	429d      	cmp	r5, r3
 80107ce:	461a      	mov	r2, r3
 80107d0:	d30b      	bcc.n	80107ea <quorem+0x100>
 80107d2:	613c      	str	r4, [r7, #16]
 80107d4:	3601      	adds	r6, #1
 80107d6:	4630      	mov	r0, r6
 80107d8:	b003      	add	sp, #12
 80107da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107de:	6812      	ldr	r2, [r2, #0]
 80107e0:	3b04      	subs	r3, #4
 80107e2:	2a00      	cmp	r2, #0
 80107e4:	d1cb      	bne.n	801077e <quorem+0x94>
 80107e6:	3c01      	subs	r4, #1
 80107e8:	e7c6      	b.n	8010778 <quorem+0x8e>
 80107ea:	6812      	ldr	r2, [r2, #0]
 80107ec:	3b04      	subs	r3, #4
 80107ee:	2a00      	cmp	r2, #0
 80107f0:	d1ef      	bne.n	80107d2 <quorem+0xe8>
 80107f2:	3c01      	subs	r4, #1
 80107f4:	e7ea      	b.n	80107cc <quorem+0xe2>
 80107f6:	2000      	movs	r0, #0
 80107f8:	e7ee      	b.n	80107d8 <quorem+0xee>
 80107fa:	0000      	movs	r0, r0
 80107fc:	0000      	movs	r0, r0
	...

08010800 <_dtoa_r>:
 8010800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010804:	69c7      	ldr	r7, [r0, #28]
 8010806:	b099      	sub	sp, #100	@ 0x64
 8010808:	ed8d 0b02 	vstr	d0, [sp, #8]
 801080c:	ec55 4b10 	vmov	r4, r5, d0
 8010810:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010812:	9109      	str	r1, [sp, #36]	@ 0x24
 8010814:	4683      	mov	fp, r0
 8010816:	920e      	str	r2, [sp, #56]	@ 0x38
 8010818:	9313      	str	r3, [sp, #76]	@ 0x4c
 801081a:	b97f      	cbnz	r7, 801083c <_dtoa_r+0x3c>
 801081c:	2010      	movs	r0, #16
 801081e:	f000 fdfd 	bl	801141c <malloc>
 8010822:	4602      	mov	r2, r0
 8010824:	f8cb 001c 	str.w	r0, [fp, #28]
 8010828:	b920      	cbnz	r0, 8010834 <_dtoa_r+0x34>
 801082a:	4ba7      	ldr	r3, [pc, #668]	@ (8010ac8 <_dtoa_r+0x2c8>)
 801082c:	21ef      	movs	r1, #239	@ 0xef
 801082e:	48a7      	ldr	r0, [pc, #668]	@ (8010acc <_dtoa_r+0x2cc>)
 8010830:	f001 fae8 	bl	8011e04 <__assert_func>
 8010834:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010838:	6007      	str	r7, [r0, #0]
 801083a:	60c7      	str	r7, [r0, #12]
 801083c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010840:	6819      	ldr	r1, [r3, #0]
 8010842:	b159      	cbz	r1, 801085c <_dtoa_r+0x5c>
 8010844:	685a      	ldr	r2, [r3, #4]
 8010846:	604a      	str	r2, [r1, #4]
 8010848:	2301      	movs	r3, #1
 801084a:	4093      	lsls	r3, r2
 801084c:	608b      	str	r3, [r1, #8]
 801084e:	4658      	mov	r0, fp
 8010850:	f000 feda 	bl	8011608 <_Bfree>
 8010854:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010858:	2200      	movs	r2, #0
 801085a:	601a      	str	r2, [r3, #0]
 801085c:	1e2b      	subs	r3, r5, #0
 801085e:	bfb9      	ittee	lt
 8010860:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010864:	9303      	strlt	r3, [sp, #12]
 8010866:	2300      	movge	r3, #0
 8010868:	6033      	strge	r3, [r6, #0]
 801086a:	9f03      	ldr	r7, [sp, #12]
 801086c:	4b98      	ldr	r3, [pc, #608]	@ (8010ad0 <_dtoa_r+0x2d0>)
 801086e:	bfbc      	itt	lt
 8010870:	2201      	movlt	r2, #1
 8010872:	6032      	strlt	r2, [r6, #0]
 8010874:	43bb      	bics	r3, r7
 8010876:	d112      	bne.n	801089e <_dtoa_r+0x9e>
 8010878:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801087a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801087e:	6013      	str	r3, [r2, #0]
 8010880:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010884:	4323      	orrs	r3, r4
 8010886:	f000 854d 	beq.w	8011324 <_dtoa_r+0xb24>
 801088a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801088c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010ae4 <_dtoa_r+0x2e4>
 8010890:	2b00      	cmp	r3, #0
 8010892:	f000 854f 	beq.w	8011334 <_dtoa_r+0xb34>
 8010896:	f10a 0303 	add.w	r3, sl, #3
 801089a:	f000 bd49 	b.w	8011330 <_dtoa_r+0xb30>
 801089e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80108a2:	2200      	movs	r2, #0
 80108a4:	ec51 0b17 	vmov	r0, r1, d7
 80108a8:	2300      	movs	r3, #0
 80108aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80108ae:	f7f0 f91b 	bl	8000ae8 <__aeabi_dcmpeq>
 80108b2:	4680      	mov	r8, r0
 80108b4:	b158      	cbz	r0, 80108ce <_dtoa_r+0xce>
 80108b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80108b8:	2301      	movs	r3, #1
 80108ba:	6013      	str	r3, [r2, #0]
 80108bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80108be:	b113      	cbz	r3, 80108c6 <_dtoa_r+0xc6>
 80108c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80108c2:	4b84      	ldr	r3, [pc, #528]	@ (8010ad4 <_dtoa_r+0x2d4>)
 80108c4:	6013      	str	r3, [r2, #0]
 80108c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010ae8 <_dtoa_r+0x2e8>
 80108ca:	f000 bd33 	b.w	8011334 <_dtoa_r+0xb34>
 80108ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80108d2:	aa16      	add	r2, sp, #88	@ 0x58
 80108d4:	a917      	add	r1, sp, #92	@ 0x5c
 80108d6:	4658      	mov	r0, fp
 80108d8:	f001 f980 	bl	8011bdc <__d2b>
 80108dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80108e0:	4681      	mov	r9, r0
 80108e2:	2e00      	cmp	r6, #0
 80108e4:	d077      	beq.n	80109d6 <_dtoa_r+0x1d6>
 80108e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80108e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80108ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80108f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80108f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80108f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80108fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010900:	4619      	mov	r1, r3
 8010902:	2200      	movs	r2, #0
 8010904:	4b74      	ldr	r3, [pc, #464]	@ (8010ad8 <_dtoa_r+0x2d8>)
 8010906:	f7ef fccf 	bl	80002a8 <__aeabi_dsub>
 801090a:	a369      	add	r3, pc, #420	@ (adr r3, 8010ab0 <_dtoa_r+0x2b0>)
 801090c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010910:	f7ef fe82 	bl	8000618 <__aeabi_dmul>
 8010914:	a368      	add	r3, pc, #416	@ (adr r3, 8010ab8 <_dtoa_r+0x2b8>)
 8010916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091a:	f7ef fcc7 	bl	80002ac <__adddf3>
 801091e:	4604      	mov	r4, r0
 8010920:	4630      	mov	r0, r6
 8010922:	460d      	mov	r5, r1
 8010924:	f7ef fe0e 	bl	8000544 <__aeabi_i2d>
 8010928:	a365      	add	r3, pc, #404	@ (adr r3, 8010ac0 <_dtoa_r+0x2c0>)
 801092a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092e:	f7ef fe73 	bl	8000618 <__aeabi_dmul>
 8010932:	4602      	mov	r2, r0
 8010934:	460b      	mov	r3, r1
 8010936:	4620      	mov	r0, r4
 8010938:	4629      	mov	r1, r5
 801093a:	f7ef fcb7 	bl	80002ac <__adddf3>
 801093e:	4604      	mov	r4, r0
 8010940:	460d      	mov	r5, r1
 8010942:	f7f0 f919 	bl	8000b78 <__aeabi_d2iz>
 8010946:	2200      	movs	r2, #0
 8010948:	4607      	mov	r7, r0
 801094a:	2300      	movs	r3, #0
 801094c:	4620      	mov	r0, r4
 801094e:	4629      	mov	r1, r5
 8010950:	f7f0 f8d4 	bl	8000afc <__aeabi_dcmplt>
 8010954:	b140      	cbz	r0, 8010968 <_dtoa_r+0x168>
 8010956:	4638      	mov	r0, r7
 8010958:	f7ef fdf4 	bl	8000544 <__aeabi_i2d>
 801095c:	4622      	mov	r2, r4
 801095e:	462b      	mov	r3, r5
 8010960:	f7f0 f8c2 	bl	8000ae8 <__aeabi_dcmpeq>
 8010964:	b900      	cbnz	r0, 8010968 <_dtoa_r+0x168>
 8010966:	3f01      	subs	r7, #1
 8010968:	2f16      	cmp	r7, #22
 801096a:	d851      	bhi.n	8010a10 <_dtoa_r+0x210>
 801096c:	4b5b      	ldr	r3, [pc, #364]	@ (8010adc <_dtoa_r+0x2dc>)
 801096e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010976:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801097a:	f7f0 f8bf 	bl	8000afc <__aeabi_dcmplt>
 801097e:	2800      	cmp	r0, #0
 8010980:	d048      	beq.n	8010a14 <_dtoa_r+0x214>
 8010982:	3f01      	subs	r7, #1
 8010984:	2300      	movs	r3, #0
 8010986:	9312      	str	r3, [sp, #72]	@ 0x48
 8010988:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801098a:	1b9b      	subs	r3, r3, r6
 801098c:	1e5a      	subs	r2, r3, #1
 801098e:	bf44      	itt	mi
 8010990:	f1c3 0801 	rsbmi	r8, r3, #1
 8010994:	2300      	movmi	r3, #0
 8010996:	9208      	str	r2, [sp, #32]
 8010998:	bf54      	ite	pl
 801099a:	f04f 0800 	movpl.w	r8, #0
 801099e:	9308      	strmi	r3, [sp, #32]
 80109a0:	2f00      	cmp	r7, #0
 80109a2:	db39      	blt.n	8010a18 <_dtoa_r+0x218>
 80109a4:	9b08      	ldr	r3, [sp, #32]
 80109a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80109a8:	443b      	add	r3, r7
 80109aa:	9308      	str	r3, [sp, #32]
 80109ac:	2300      	movs	r3, #0
 80109ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80109b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109b2:	2b09      	cmp	r3, #9
 80109b4:	d864      	bhi.n	8010a80 <_dtoa_r+0x280>
 80109b6:	2b05      	cmp	r3, #5
 80109b8:	bfc4      	itt	gt
 80109ba:	3b04      	subgt	r3, #4
 80109bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80109be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109c0:	f1a3 0302 	sub.w	r3, r3, #2
 80109c4:	bfcc      	ite	gt
 80109c6:	2400      	movgt	r4, #0
 80109c8:	2401      	movle	r4, #1
 80109ca:	2b03      	cmp	r3, #3
 80109cc:	d863      	bhi.n	8010a96 <_dtoa_r+0x296>
 80109ce:	e8df f003 	tbb	[pc, r3]
 80109d2:	372a      	.short	0x372a
 80109d4:	5535      	.short	0x5535
 80109d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80109da:	441e      	add	r6, r3
 80109dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80109e0:	2b20      	cmp	r3, #32
 80109e2:	bfc1      	itttt	gt
 80109e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80109e8:	409f      	lslgt	r7, r3
 80109ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80109ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80109f2:	bfd6      	itet	le
 80109f4:	f1c3 0320 	rsble	r3, r3, #32
 80109f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80109fc:	fa04 f003 	lslle.w	r0, r4, r3
 8010a00:	f7ef fd90 	bl	8000524 <__aeabi_ui2d>
 8010a04:	2201      	movs	r2, #1
 8010a06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010a0a:	3e01      	subs	r6, #1
 8010a0c:	9214      	str	r2, [sp, #80]	@ 0x50
 8010a0e:	e777      	b.n	8010900 <_dtoa_r+0x100>
 8010a10:	2301      	movs	r3, #1
 8010a12:	e7b8      	b.n	8010986 <_dtoa_r+0x186>
 8010a14:	9012      	str	r0, [sp, #72]	@ 0x48
 8010a16:	e7b7      	b.n	8010988 <_dtoa_r+0x188>
 8010a18:	427b      	negs	r3, r7
 8010a1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	eba8 0807 	sub.w	r8, r8, r7
 8010a22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010a24:	e7c4      	b.n	80109b0 <_dtoa_r+0x1b0>
 8010a26:	2300      	movs	r3, #0
 8010a28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	dc35      	bgt.n	8010a9c <_dtoa_r+0x29c>
 8010a30:	2301      	movs	r3, #1
 8010a32:	9300      	str	r3, [sp, #0]
 8010a34:	9307      	str	r3, [sp, #28]
 8010a36:	461a      	mov	r2, r3
 8010a38:	920e      	str	r2, [sp, #56]	@ 0x38
 8010a3a:	e00b      	b.n	8010a54 <_dtoa_r+0x254>
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	e7f3      	b.n	8010a28 <_dtoa_r+0x228>
 8010a40:	2300      	movs	r3, #0
 8010a42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a46:	18fb      	adds	r3, r7, r3
 8010a48:	9300      	str	r3, [sp, #0]
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	9307      	str	r3, [sp, #28]
 8010a50:	bfb8      	it	lt
 8010a52:	2301      	movlt	r3, #1
 8010a54:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010a58:	2100      	movs	r1, #0
 8010a5a:	2204      	movs	r2, #4
 8010a5c:	f102 0514 	add.w	r5, r2, #20
 8010a60:	429d      	cmp	r5, r3
 8010a62:	d91f      	bls.n	8010aa4 <_dtoa_r+0x2a4>
 8010a64:	6041      	str	r1, [r0, #4]
 8010a66:	4658      	mov	r0, fp
 8010a68:	f000 fd8e 	bl	8011588 <_Balloc>
 8010a6c:	4682      	mov	sl, r0
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	d13c      	bne.n	8010aec <_dtoa_r+0x2ec>
 8010a72:	4b1b      	ldr	r3, [pc, #108]	@ (8010ae0 <_dtoa_r+0x2e0>)
 8010a74:	4602      	mov	r2, r0
 8010a76:	f240 11af 	movw	r1, #431	@ 0x1af
 8010a7a:	e6d8      	b.n	801082e <_dtoa_r+0x2e>
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e7e0      	b.n	8010a42 <_dtoa_r+0x242>
 8010a80:	2401      	movs	r4, #1
 8010a82:	2300      	movs	r3, #0
 8010a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a86:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010a88:	f04f 33ff 	mov.w	r3, #4294967295
 8010a8c:	9300      	str	r3, [sp, #0]
 8010a8e:	9307      	str	r3, [sp, #28]
 8010a90:	2200      	movs	r2, #0
 8010a92:	2312      	movs	r3, #18
 8010a94:	e7d0      	b.n	8010a38 <_dtoa_r+0x238>
 8010a96:	2301      	movs	r3, #1
 8010a98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a9a:	e7f5      	b.n	8010a88 <_dtoa_r+0x288>
 8010a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a9e:	9300      	str	r3, [sp, #0]
 8010aa0:	9307      	str	r3, [sp, #28]
 8010aa2:	e7d7      	b.n	8010a54 <_dtoa_r+0x254>
 8010aa4:	3101      	adds	r1, #1
 8010aa6:	0052      	lsls	r2, r2, #1
 8010aa8:	e7d8      	b.n	8010a5c <_dtoa_r+0x25c>
 8010aaa:	bf00      	nop
 8010aac:	f3af 8000 	nop.w
 8010ab0:	636f4361 	.word	0x636f4361
 8010ab4:	3fd287a7 	.word	0x3fd287a7
 8010ab8:	8b60c8b3 	.word	0x8b60c8b3
 8010abc:	3fc68a28 	.word	0x3fc68a28
 8010ac0:	509f79fb 	.word	0x509f79fb
 8010ac4:	3fd34413 	.word	0x3fd34413
 8010ac8:	0801264d 	.word	0x0801264d
 8010acc:	08012664 	.word	0x08012664
 8010ad0:	7ff00000 	.word	0x7ff00000
 8010ad4:	0801261d 	.word	0x0801261d
 8010ad8:	3ff80000 	.word	0x3ff80000
 8010adc:	08012760 	.word	0x08012760
 8010ae0:	080126bc 	.word	0x080126bc
 8010ae4:	08012649 	.word	0x08012649
 8010ae8:	0801261c 	.word	0x0801261c
 8010aec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010af0:	6018      	str	r0, [r3, #0]
 8010af2:	9b07      	ldr	r3, [sp, #28]
 8010af4:	2b0e      	cmp	r3, #14
 8010af6:	f200 80a4 	bhi.w	8010c42 <_dtoa_r+0x442>
 8010afa:	2c00      	cmp	r4, #0
 8010afc:	f000 80a1 	beq.w	8010c42 <_dtoa_r+0x442>
 8010b00:	2f00      	cmp	r7, #0
 8010b02:	dd33      	ble.n	8010b6c <_dtoa_r+0x36c>
 8010b04:	4bad      	ldr	r3, [pc, #692]	@ (8010dbc <_dtoa_r+0x5bc>)
 8010b06:	f007 020f 	and.w	r2, r7, #15
 8010b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b0e:	ed93 7b00 	vldr	d7, [r3]
 8010b12:	05f8      	lsls	r0, r7, #23
 8010b14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010b18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010b1c:	d516      	bpl.n	8010b4c <_dtoa_r+0x34c>
 8010b1e:	4ba8      	ldr	r3, [pc, #672]	@ (8010dc0 <_dtoa_r+0x5c0>)
 8010b20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010b24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010b28:	f7ef fea0 	bl	800086c <__aeabi_ddiv>
 8010b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b30:	f004 040f 	and.w	r4, r4, #15
 8010b34:	2603      	movs	r6, #3
 8010b36:	4da2      	ldr	r5, [pc, #648]	@ (8010dc0 <_dtoa_r+0x5c0>)
 8010b38:	b954      	cbnz	r4, 8010b50 <_dtoa_r+0x350>
 8010b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b42:	f7ef fe93 	bl	800086c <__aeabi_ddiv>
 8010b46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b4a:	e028      	b.n	8010b9e <_dtoa_r+0x39e>
 8010b4c:	2602      	movs	r6, #2
 8010b4e:	e7f2      	b.n	8010b36 <_dtoa_r+0x336>
 8010b50:	07e1      	lsls	r1, r4, #31
 8010b52:	d508      	bpl.n	8010b66 <_dtoa_r+0x366>
 8010b54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010b5c:	f7ef fd5c 	bl	8000618 <__aeabi_dmul>
 8010b60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b64:	3601      	adds	r6, #1
 8010b66:	1064      	asrs	r4, r4, #1
 8010b68:	3508      	adds	r5, #8
 8010b6a:	e7e5      	b.n	8010b38 <_dtoa_r+0x338>
 8010b6c:	f000 80d2 	beq.w	8010d14 <_dtoa_r+0x514>
 8010b70:	427c      	negs	r4, r7
 8010b72:	4b92      	ldr	r3, [pc, #584]	@ (8010dbc <_dtoa_r+0x5bc>)
 8010b74:	4d92      	ldr	r5, [pc, #584]	@ (8010dc0 <_dtoa_r+0x5c0>)
 8010b76:	f004 020f 	and.w	r2, r4, #15
 8010b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010b86:	f7ef fd47 	bl	8000618 <__aeabi_dmul>
 8010b8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b8e:	1124      	asrs	r4, r4, #4
 8010b90:	2300      	movs	r3, #0
 8010b92:	2602      	movs	r6, #2
 8010b94:	2c00      	cmp	r4, #0
 8010b96:	f040 80b2 	bne.w	8010cfe <_dtoa_r+0x4fe>
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d1d3      	bne.n	8010b46 <_dtoa_r+0x346>
 8010b9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010ba0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	f000 80b7 	beq.w	8010d18 <_dtoa_r+0x518>
 8010baa:	4b86      	ldr	r3, [pc, #536]	@ (8010dc4 <_dtoa_r+0x5c4>)
 8010bac:	2200      	movs	r2, #0
 8010bae:	4620      	mov	r0, r4
 8010bb0:	4629      	mov	r1, r5
 8010bb2:	f7ef ffa3 	bl	8000afc <__aeabi_dcmplt>
 8010bb6:	2800      	cmp	r0, #0
 8010bb8:	f000 80ae 	beq.w	8010d18 <_dtoa_r+0x518>
 8010bbc:	9b07      	ldr	r3, [sp, #28]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	f000 80aa 	beq.w	8010d18 <_dtoa_r+0x518>
 8010bc4:	9b00      	ldr	r3, [sp, #0]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	dd37      	ble.n	8010c3a <_dtoa_r+0x43a>
 8010bca:	1e7b      	subs	r3, r7, #1
 8010bcc:	9304      	str	r3, [sp, #16]
 8010bce:	4620      	mov	r0, r4
 8010bd0:	4b7d      	ldr	r3, [pc, #500]	@ (8010dc8 <_dtoa_r+0x5c8>)
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	4629      	mov	r1, r5
 8010bd6:	f7ef fd1f 	bl	8000618 <__aeabi_dmul>
 8010bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bde:	9c00      	ldr	r4, [sp, #0]
 8010be0:	3601      	adds	r6, #1
 8010be2:	4630      	mov	r0, r6
 8010be4:	f7ef fcae 	bl	8000544 <__aeabi_i2d>
 8010be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010bec:	f7ef fd14 	bl	8000618 <__aeabi_dmul>
 8010bf0:	4b76      	ldr	r3, [pc, #472]	@ (8010dcc <_dtoa_r+0x5cc>)
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	f7ef fb5a 	bl	80002ac <__adddf3>
 8010bf8:	4605      	mov	r5, r0
 8010bfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010bfe:	2c00      	cmp	r4, #0
 8010c00:	f040 808d 	bne.w	8010d1e <_dtoa_r+0x51e>
 8010c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c08:	4b71      	ldr	r3, [pc, #452]	@ (8010dd0 <_dtoa_r+0x5d0>)
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f7ef fb4c 	bl	80002a8 <__aeabi_dsub>
 8010c10:	4602      	mov	r2, r0
 8010c12:	460b      	mov	r3, r1
 8010c14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c18:	462a      	mov	r2, r5
 8010c1a:	4633      	mov	r3, r6
 8010c1c:	f7ef ff8c 	bl	8000b38 <__aeabi_dcmpgt>
 8010c20:	2800      	cmp	r0, #0
 8010c22:	f040 828b 	bne.w	801113c <_dtoa_r+0x93c>
 8010c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c2a:	462a      	mov	r2, r5
 8010c2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010c30:	f7ef ff64 	bl	8000afc <__aeabi_dcmplt>
 8010c34:	2800      	cmp	r0, #0
 8010c36:	f040 8128 	bne.w	8010e8a <_dtoa_r+0x68a>
 8010c3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010c3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010c42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	f2c0 815a 	blt.w	8010efe <_dtoa_r+0x6fe>
 8010c4a:	2f0e      	cmp	r7, #14
 8010c4c:	f300 8157 	bgt.w	8010efe <_dtoa_r+0x6fe>
 8010c50:	4b5a      	ldr	r3, [pc, #360]	@ (8010dbc <_dtoa_r+0x5bc>)
 8010c52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010c56:	ed93 7b00 	vldr	d7, [r3]
 8010c5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	ed8d 7b00 	vstr	d7, [sp]
 8010c62:	da03      	bge.n	8010c6c <_dtoa_r+0x46c>
 8010c64:	9b07      	ldr	r3, [sp, #28]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	f340 8101 	ble.w	8010e6e <_dtoa_r+0x66e>
 8010c6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010c70:	4656      	mov	r6, sl
 8010c72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c76:	4620      	mov	r0, r4
 8010c78:	4629      	mov	r1, r5
 8010c7a:	f7ef fdf7 	bl	800086c <__aeabi_ddiv>
 8010c7e:	f7ef ff7b 	bl	8000b78 <__aeabi_d2iz>
 8010c82:	4680      	mov	r8, r0
 8010c84:	f7ef fc5e 	bl	8000544 <__aeabi_i2d>
 8010c88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c8c:	f7ef fcc4 	bl	8000618 <__aeabi_dmul>
 8010c90:	4602      	mov	r2, r0
 8010c92:	460b      	mov	r3, r1
 8010c94:	4620      	mov	r0, r4
 8010c96:	4629      	mov	r1, r5
 8010c98:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010c9c:	f7ef fb04 	bl	80002a8 <__aeabi_dsub>
 8010ca0:	f806 4b01 	strb.w	r4, [r6], #1
 8010ca4:	9d07      	ldr	r5, [sp, #28]
 8010ca6:	eba6 040a 	sub.w	r4, r6, sl
 8010caa:	42a5      	cmp	r5, r4
 8010cac:	4602      	mov	r2, r0
 8010cae:	460b      	mov	r3, r1
 8010cb0:	f040 8117 	bne.w	8010ee2 <_dtoa_r+0x6e2>
 8010cb4:	f7ef fafa 	bl	80002ac <__adddf3>
 8010cb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cbc:	4604      	mov	r4, r0
 8010cbe:	460d      	mov	r5, r1
 8010cc0:	f7ef ff3a 	bl	8000b38 <__aeabi_dcmpgt>
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	f040 80f9 	bne.w	8010ebc <_dtoa_r+0x6bc>
 8010cca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cce:	4620      	mov	r0, r4
 8010cd0:	4629      	mov	r1, r5
 8010cd2:	f7ef ff09 	bl	8000ae8 <__aeabi_dcmpeq>
 8010cd6:	b118      	cbz	r0, 8010ce0 <_dtoa_r+0x4e0>
 8010cd8:	f018 0f01 	tst.w	r8, #1
 8010cdc:	f040 80ee 	bne.w	8010ebc <_dtoa_r+0x6bc>
 8010ce0:	4649      	mov	r1, r9
 8010ce2:	4658      	mov	r0, fp
 8010ce4:	f000 fc90 	bl	8011608 <_Bfree>
 8010ce8:	2300      	movs	r3, #0
 8010cea:	7033      	strb	r3, [r6, #0]
 8010cec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010cee:	3701      	adds	r7, #1
 8010cf0:	601f      	str	r7, [r3, #0]
 8010cf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	f000 831d 	beq.w	8011334 <_dtoa_r+0xb34>
 8010cfa:	601e      	str	r6, [r3, #0]
 8010cfc:	e31a      	b.n	8011334 <_dtoa_r+0xb34>
 8010cfe:	07e2      	lsls	r2, r4, #31
 8010d00:	d505      	bpl.n	8010d0e <_dtoa_r+0x50e>
 8010d02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010d06:	f7ef fc87 	bl	8000618 <__aeabi_dmul>
 8010d0a:	3601      	adds	r6, #1
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	1064      	asrs	r4, r4, #1
 8010d10:	3508      	adds	r5, #8
 8010d12:	e73f      	b.n	8010b94 <_dtoa_r+0x394>
 8010d14:	2602      	movs	r6, #2
 8010d16:	e742      	b.n	8010b9e <_dtoa_r+0x39e>
 8010d18:	9c07      	ldr	r4, [sp, #28]
 8010d1a:	9704      	str	r7, [sp, #16]
 8010d1c:	e761      	b.n	8010be2 <_dtoa_r+0x3e2>
 8010d1e:	4b27      	ldr	r3, [pc, #156]	@ (8010dbc <_dtoa_r+0x5bc>)
 8010d20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010d22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010d26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010d2a:	4454      	add	r4, sl
 8010d2c:	2900      	cmp	r1, #0
 8010d2e:	d053      	beq.n	8010dd8 <_dtoa_r+0x5d8>
 8010d30:	4928      	ldr	r1, [pc, #160]	@ (8010dd4 <_dtoa_r+0x5d4>)
 8010d32:	2000      	movs	r0, #0
 8010d34:	f7ef fd9a 	bl	800086c <__aeabi_ddiv>
 8010d38:	4633      	mov	r3, r6
 8010d3a:	462a      	mov	r2, r5
 8010d3c:	f7ef fab4 	bl	80002a8 <__aeabi_dsub>
 8010d40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010d44:	4656      	mov	r6, sl
 8010d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d4a:	f7ef ff15 	bl	8000b78 <__aeabi_d2iz>
 8010d4e:	4605      	mov	r5, r0
 8010d50:	f7ef fbf8 	bl	8000544 <__aeabi_i2d>
 8010d54:	4602      	mov	r2, r0
 8010d56:	460b      	mov	r3, r1
 8010d58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d5c:	f7ef faa4 	bl	80002a8 <__aeabi_dsub>
 8010d60:	3530      	adds	r5, #48	@ 0x30
 8010d62:	4602      	mov	r2, r0
 8010d64:	460b      	mov	r3, r1
 8010d66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010d6a:	f806 5b01 	strb.w	r5, [r6], #1
 8010d6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010d72:	f7ef fec3 	bl	8000afc <__aeabi_dcmplt>
 8010d76:	2800      	cmp	r0, #0
 8010d78:	d171      	bne.n	8010e5e <_dtoa_r+0x65e>
 8010d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d7e:	4911      	ldr	r1, [pc, #68]	@ (8010dc4 <_dtoa_r+0x5c4>)
 8010d80:	2000      	movs	r0, #0
 8010d82:	f7ef fa91 	bl	80002a8 <__aeabi_dsub>
 8010d86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010d8a:	f7ef feb7 	bl	8000afc <__aeabi_dcmplt>
 8010d8e:	2800      	cmp	r0, #0
 8010d90:	f040 8095 	bne.w	8010ebe <_dtoa_r+0x6be>
 8010d94:	42a6      	cmp	r6, r4
 8010d96:	f43f af50 	beq.w	8010c3a <_dtoa_r+0x43a>
 8010d9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8010dc8 <_dtoa_r+0x5c8>)
 8010da0:	2200      	movs	r2, #0
 8010da2:	f7ef fc39 	bl	8000618 <__aeabi_dmul>
 8010da6:	4b08      	ldr	r3, [pc, #32]	@ (8010dc8 <_dtoa_r+0x5c8>)
 8010da8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010dac:	2200      	movs	r2, #0
 8010dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010db2:	f7ef fc31 	bl	8000618 <__aeabi_dmul>
 8010db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010dba:	e7c4      	b.n	8010d46 <_dtoa_r+0x546>
 8010dbc:	08012760 	.word	0x08012760
 8010dc0:	08012738 	.word	0x08012738
 8010dc4:	3ff00000 	.word	0x3ff00000
 8010dc8:	40240000 	.word	0x40240000
 8010dcc:	401c0000 	.word	0x401c0000
 8010dd0:	40140000 	.word	0x40140000
 8010dd4:	3fe00000 	.word	0x3fe00000
 8010dd8:	4631      	mov	r1, r6
 8010dda:	4628      	mov	r0, r5
 8010ddc:	f7ef fc1c 	bl	8000618 <__aeabi_dmul>
 8010de0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010de4:	9415      	str	r4, [sp, #84]	@ 0x54
 8010de6:	4656      	mov	r6, sl
 8010de8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010dec:	f7ef fec4 	bl	8000b78 <__aeabi_d2iz>
 8010df0:	4605      	mov	r5, r0
 8010df2:	f7ef fba7 	bl	8000544 <__aeabi_i2d>
 8010df6:	4602      	mov	r2, r0
 8010df8:	460b      	mov	r3, r1
 8010dfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010dfe:	f7ef fa53 	bl	80002a8 <__aeabi_dsub>
 8010e02:	3530      	adds	r5, #48	@ 0x30
 8010e04:	f806 5b01 	strb.w	r5, [r6], #1
 8010e08:	4602      	mov	r2, r0
 8010e0a:	460b      	mov	r3, r1
 8010e0c:	42a6      	cmp	r6, r4
 8010e0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010e12:	f04f 0200 	mov.w	r2, #0
 8010e16:	d124      	bne.n	8010e62 <_dtoa_r+0x662>
 8010e18:	4bac      	ldr	r3, [pc, #688]	@ (80110cc <_dtoa_r+0x8cc>)
 8010e1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010e1e:	f7ef fa45 	bl	80002ac <__adddf3>
 8010e22:	4602      	mov	r2, r0
 8010e24:	460b      	mov	r3, r1
 8010e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e2a:	f7ef fe85 	bl	8000b38 <__aeabi_dcmpgt>
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	d145      	bne.n	8010ebe <_dtoa_r+0x6be>
 8010e32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010e36:	49a5      	ldr	r1, [pc, #660]	@ (80110cc <_dtoa_r+0x8cc>)
 8010e38:	2000      	movs	r0, #0
 8010e3a:	f7ef fa35 	bl	80002a8 <__aeabi_dsub>
 8010e3e:	4602      	mov	r2, r0
 8010e40:	460b      	mov	r3, r1
 8010e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e46:	f7ef fe59 	bl	8000afc <__aeabi_dcmplt>
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	f43f aef5 	beq.w	8010c3a <_dtoa_r+0x43a>
 8010e50:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010e52:	1e73      	subs	r3, r6, #1
 8010e54:	9315      	str	r3, [sp, #84]	@ 0x54
 8010e56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010e5a:	2b30      	cmp	r3, #48	@ 0x30
 8010e5c:	d0f8      	beq.n	8010e50 <_dtoa_r+0x650>
 8010e5e:	9f04      	ldr	r7, [sp, #16]
 8010e60:	e73e      	b.n	8010ce0 <_dtoa_r+0x4e0>
 8010e62:	4b9b      	ldr	r3, [pc, #620]	@ (80110d0 <_dtoa_r+0x8d0>)
 8010e64:	f7ef fbd8 	bl	8000618 <__aeabi_dmul>
 8010e68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e6c:	e7bc      	b.n	8010de8 <_dtoa_r+0x5e8>
 8010e6e:	d10c      	bne.n	8010e8a <_dtoa_r+0x68a>
 8010e70:	4b98      	ldr	r3, [pc, #608]	@ (80110d4 <_dtoa_r+0x8d4>)
 8010e72:	2200      	movs	r2, #0
 8010e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e78:	f7ef fbce 	bl	8000618 <__aeabi_dmul>
 8010e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e80:	f7ef fe50 	bl	8000b24 <__aeabi_dcmpge>
 8010e84:	2800      	cmp	r0, #0
 8010e86:	f000 8157 	beq.w	8011138 <_dtoa_r+0x938>
 8010e8a:	2400      	movs	r4, #0
 8010e8c:	4625      	mov	r5, r4
 8010e8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e90:	43db      	mvns	r3, r3
 8010e92:	9304      	str	r3, [sp, #16]
 8010e94:	4656      	mov	r6, sl
 8010e96:	2700      	movs	r7, #0
 8010e98:	4621      	mov	r1, r4
 8010e9a:	4658      	mov	r0, fp
 8010e9c:	f000 fbb4 	bl	8011608 <_Bfree>
 8010ea0:	2d00      	cmp	r5, #0
 8010ea2:	d0dc      	beq.n	8010e5e <_dtoa_r+0x65e>
 8010ea4:	b12f      	cbz	r7, 8010eb2 <_dtoa_r+0x6b2>
 8010ea6:	42af      	cmp	r7, r5
 8010ea8:	d003      	beq.n	8010eb2 <_dtoa_r+0x6b2>
 8010eaa:	4639      	mov	r1, r7
 8010eac:	4658      	mov	r0, fp
 8010eae:	f000 fbab 	bl	8011608 <_Bfree>
 8010eb2:	4629      	mov	r1, r5
 8010eb4:	4658      	mov	r0, fp
 8010eb6:	f000 fba7 	bl	8011608 <_Bfree>
 8010eba:	e7d0      	b.n	8010e5e <_dtoa_r+0x65e>
 8010ebc:	9704      	str	r7, [sp, #16]
 8010ebe:	4633      	mov	r3, r6
 8010ec0:	461e      	mov	r6, r3
 8010ec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ec6:	2a39      	cmp	r2, #57	@ 0x39
 8010ec8:	d107      	bne.n	8010eda <_dtoa_r+0x6da>
 8010eca:	459a      	cmp	sl, r3
 8010ecc:	d1f8      	bne.n	8010ec0 <_dtoa_r+0x6c0>
 8010ece:	9a04      	ldr	r2, [sp, #16]
 8010ed0:	3201      	adds	r2, #1
 8010ed2:	9204      	str	r2, [sp, #16]
 8010ed4:	2230      	movs	r2, #48	@ 0x30
 8010ed6:	f88a 2000 	strb.w	r2, [sl]
 8010eda:	781a      	ldrb	r2, [r3, #0]
 8010edc:	3201      	adds	r2, #1
 8010ede:	701a      	strb	r2, [r3, #0]
 8010ee0:	e7bd      	b.n	8010e5e <_dtoa_r+0x65e>
 8010ee2:	4b7b      	ldr	r3, [pc, #492]	@ (80110d0 <_dtoa_r+0x8d0>)
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	f7ef fb97 	bl	8000618 <__aeabi_dmul>
 8010eea:	2200      	movs	r2, #0
 8010eec:	2300      	movs	r3, #0
 8010eee:	4604      	mov	r4, r0
 8010ef0:	460d      	mov	r5, r1
 8010ef2:	f7ef fdf9 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ef6:	2800      	cmp	r0, #0
 8010ef8:	f43f aebb 	beq.w	8010c72 <_dtoa_r+0x472>
 8010efc:	e6f0      	b.n	8010ce0 <_dtoa_r+0x4e0>
 8010efe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f00:	2a00      	cmp	r2, #0
 8010f02:	f000 80db 	beq.w	80110bc <_dtoa_r+0x8bc>
 8010f06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f08:	2a01      	cmp	r2, #1
 8010f0a:	f300 80bf 	bgt.w	801108c <_dtoa_r+0x88c>
 8010f0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010f10:	2a00      	cmp	r2, #0
 8010f12:	f000 80b7 	beq.w	8011084 <_dtoa_r+0x884>
 8010f16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010f1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010f1c:	4646      	mov	r6, r8
 8010f1e:	9a08      	ldr	r2, [sp, #32]
 8010f20:	2101      	movs	r1, #1
 8010f22:	441a      	add	r2, r3
 8010f24:	4658      	mov	r0, fp
 8010f26:	4498      	add	r8, r3
 8010f28:	9208      	str	r2, [sp, #32]
 8010f2a:	f000 fc21 	bl	8011770 <__i2b>
 8010f2e:	4605      	mov	r5, r0
 8010f30:	b15e      	cbz	r6, 8010f4a <_dtoa_r+0x74a>
 8010f32:	9b08      	ldr	r3, [sp, #32]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	dd08      	ble.n	8010f4a <_dtoa_r+0x74a>
 8010f38:	42b3      	cmp	r3, r6
 8010f3a:	9a08      	ldr	r2, [sp, #32]
 8010f3c:	bfa8      	it	ge
 8010f3e:	4633      	movge	r3, r6
 8010f40:	eba8 0803 	sub.w	r8, r8, r3
 8010f44:	1af6      	subs	r6, r6, r3
 8010f46:	1ad3      	subs	r3, r2, r3
 8010f48:	9308      	str	r3, [sp, #32]
 8010f4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f4c:	b1f3      	cbz	r3, 8010f8c <_dtoa_r+0x78c>
 8010f4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f000 80b7 	beq.w	80110c4 <_dtoa_r+0x8c4>
 8010f56:	b18c      	cbz	r4, 8010f7c <_dtoa_r+0x77c>
 8010f58:	4629      	mov	r1, r5
 8010f5a:	4622      	mov	r2, r4
 8010f5c:	4658      	mov	r0, fp
 8010f5e:	f000 fcc7 	bl	80118f0 <__pow5mult>
 8010f62:	464a      	mov	r2, r9
 8010f64:	4601      	mov	r1, r0
 8010f66:	4605      	mov	r5, r0
 8010f68:	4658      	mov	r0, fp
 8010f6a:	f000 fc17 	bl	801179c <__multiply>
 8010f6e:	4649      	mov	r1, r9
 8010f70:	9004      	str	r0, [sp, #16]
 8010f72:	4658      	mov	r0, fp
 8010f74:	f000 fb48 	bl	8011608 <_Bfree>
 8010f78:	9b04      	ldr	r3, [sp, #16]
 8010f7a:	4699      	mov	r9, r3
 8010f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f7e:	1b1a      	subs	r2, r3, r4
 8010f80:	d004      	beq.n	8010f8c <_dtoa_r+0x78c>
 8010f82:	4649      	mov	r1, r9
 8010f84:	4658      	mov	r0, fp
 8010f86:	f000 fcb3 	bl	80118f0 <__pow5mult>
 8010f8a:	4681      	mov	r9, r0
 8010f8c:	2101      	movs	r1, #1
 8010f8e:	4658      	mov	r0, fp
 8010f90:	f000 fbee 	bl	8011770 <__i2b>
 8010f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f96:	4604      	mov	r4, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f000 81cf 	beq.w	801133c <_dtoa_r+0xb3c>
 8010f9e:	461a      	mov	r2, r3
 8010fa0:	4601      	mov	r1, r0
 8010fa2:	4658      	mov	r0, fp
 8010fa4:	f000 fca4 	bl	80118f0 <__pow5mult>
 8010fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	4604      	mov	r4, r0
 8010fae:	f300 8095 	bgt.w	80110dc <_dtoa_r+0x8dc>
 8010fb2:	9b02      	ldr	r3, [sp, #8]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	f040 8087 	bne.w	80110c8 <_dtoa_r+0x8c8>
 8010fba:	9b03      	ldr	r3, [sp, #12]
 8010fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	f040 8089 	bne.w	80110d8 <_dtoa_r+0x8d8>
 8010fc6:	9b03      	ldr	r3, [sp, #12]
 8010fc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010fcc:	0d1b      	lsrs	r3, r3, #20
 8010fce:	051b      	lsls	r3, r3, #20
 8010fd0:	b12b      	cbz	r3, 8010fde <_dtoa_r+0x7de>
 8010fd2:	9b08      	ldr	r3, [sp, #32]
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	9308      	str	r3, [sp, #32]
 8010fd8:	f108 0801 	add.w	r8, r8, #1
 8010fdc:	2301      	movs	r3, #1
 8010fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	f000 81b0 	beq.w	8011348 <_dtoa_r+0xb48>
 8010fe8:	6923      	ldr	r3, [r4, #16]
 8010fea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010fee:	6918      	ldr	r0, [r3, #16]
 8010ff0:	f000 fb72 	bl	80116d8 <__hi0bits>
 8010ff4:	f1c0 0020 	rsb	r0, r0, #32
 8010ff8:	9b08      	ldr	r3, [sp, #32]
 8010ffa:	4418      	add	r0, r3
 8010ffc:	f010 001f 	ands.w	r0, r0, #31
 8011000:	d077      	beq.n	80110f2 <_dtoa_r+0x8f2>
 8011002:	f1c0 0320 	rsb	r3, r0, #32
 8011006:	2b04      	cmp	r3, #4
 8011008:	dd6b      	ble.n	80110e2 <_dtoa_r+0x8e2>
 801100a:	9b08      	ldr	r3, [sp, #32]
 801100c:	f1c0 001c 	rsb	r0, r0, #28
 8011010:	4403      	add	r3, r0
 8011012:	4480      	add	r8, r0
 8011014:	4406      	add	r6, r0
 8011016:	9308      	str	r3, [sp, #32]
 8011018:	f1b8 0f00 	cmp.w	r8, #0
 801101c:	dd05      	ble.n	801102a <_dtoa_r+0x82a>
 801101e:	4649      	mov	r1, r9
 8011020:	4642      	mov	r2, r8
 8011022:	4658      	mov	r0, fp
 8011024:	f000 fcbe 	bl	80119a4 <__lshift>
 8011028:	4681      	mov	r9, r0
 801102a:	9b08      	ldr	r3, [sp, #32]
 801102c:	2b00      	cmp	r3, #0
 801102e:	dd05      	ble.n	801103c <_dtoa_r+0x83c>
 8011030:	4621      	mov	r1, r4
 8011032:	461a      	mov	r2, r3
 8011034:	4658      	mov	r0, fp
 8011036:	f000 fcb5 	bl	80119a4 <__lshift>
 801103a:	4604      	mov	r4, r0
 801103c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801103e:	2b00      	cmp	r3, #0
 8011040:	d059      	beq.n	80110f6 <_dtoa_r+0x8f6>
 8011042:	4621      	mov	r1, r4
 8011044:	4648      	mov	r0, r9
 8011046:	f000 fd19 	bl	8011a7c <__mcmp>
 801104a:	2800      	cmp	r0, #0
 801104c:	da53      	bge.n	80110f6 <_dtoa_r+0x8f6>
 801104e:	1e7b      	subs	r3, r7, #1
 8011050:	9304      	str	r3, [sp, #16]
 8011052:	4649      	mov	r1, r9
 8011054:	2300      	movs	r3, #0
 8011056:	220a      	movs	r2, #10
 8011058:	4658      	mov	r0, fp
 801105a:	f000 faf7 	bl	801164c <__multadd>
 801105e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011060:	4681      	mov	r9, r0
 8011062:	2b00      	cmp	r3, #0
 8011064:	f000 8172 	beq.w	801134c <_dtoa_r+0xb4c>
 8011068:	2300      	movs	r3, #0
 801106a:	4629      	mov	r1, r5
 801106c:	220a      	movs	r2, #10
 801106e:	4658      	mov	r0, fp
 8011070:	f000 faec 	bl	801164c <__multadd>
 8011074:	9b00      	ldr	r3, [sp, #0]
 8011076:	2b00      	cmp	r3, #0
 8011078:	4605      	mov	r5, r0
 801107a:	dc67      	bgt.n	801114c <_dtoa_r+0x94c>
 801107c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801107e:	2b02      	cmp	r3, #2
 8011080:	dc41      	bgt.n	8011106 <_dtoa_r+0x906>
 8011082:	e063      	b.n	801114c <_dtoa_r+0x94c>
 8011084:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011086:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801108a:	e746      	b.n	8010f1a <_dtoa_r+0x71a>
 801108c:	9b07      	ldr	r3, [sp, #28]
 801108e:	1e5c      	subs	r4, r3, #1
 8011090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011092:	42a3      	cmp	r3, r4
 8011094:	bfbf      	itttt	lt
 8011096:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011098:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801109a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801109c:	1ae3      	sublt	r3, r4, r3
 801109e:	bfb4      	ite	lt
 80110a0:	18d2      	addlt	r2, r2, r3
 80110a2:	1b1c      	subge	r4, r3, r4
 80110a4:	9b07      	ldr	r3, [sp, #28]
 80110a6:	bfbc      	itt	lt
 80110a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80110aa:	2400      	movlt	r4, #0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	bfb5      	itete	lt
 80110b0:	eba8 0603 	sublt.w	r6, r8, r3
 80110b4:	9b07      	ldrge	r3, [sp, #28]
 80110b6:	2300      	movlt	r3, #0
 80110b8:	4646      	movge	r6, r8
 80110ba:	e730      	b.n	8010f1e <_dtoa_r+0x71e>
 80110bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80110be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80110c0:	4646      	mov	r6, r8
 80110c2:	e735      	b.n	8010f30 <_dtoa_r+0x730>
 80110c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110c6:	e75c      	b.n	8010f82 <_dtoa_r+0x782>
 80110c8:	2300      	movs	r3, #0
 80110ca:	e788      	b.n	8010fde <_dtoa_r+0x7de>
 80110cc:	3fe00000 	.word	0x3fe00000
 80110d0:	40240000 	.word	0x40240000
 80110d4:	40140000 	.word	0x40140000
 80110d8:	9b02      	ldr	r3, [sp, #8]
 80110da:	e780      	b.n	8010fde <_dtoa_r+0x7de>
 80110dc:	2300      	movs	r3, #0
 80110de:	930a      	str	r3, [sp, #40]	@ 0x28
 80110e0:	e782      	b.n	8010fe8 <_dtoa_r+0x7e8>
 80110e2:	d099      	beq.n	8011018 <_dtoa_r+0x818>
 80110e4:	9a08      	ldr	r2, [sp, #32]
 80110e6:	331c      	adds	r3, #28
 80110e8:	441a      	add	r2, r3
 80110ea:	4498      	add	r8, r3
 80110ec:	441e      	add	r6, r3
 80110ee:	9208      	str	r2, [sp, #32]
 80110f0:	e792      	b.n	8011018 <_dtoa_r+0x818>
 80110f2:	4603      	mov	r3, r0
 80110f4:	e7f6      	b.n	80110e4 <_dtoa_r+0x8e4>
 80110f6:	9b07      	ldr	r3, [sp, #28]
 80110f8:	9704      	str	r7, [sp, #16]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	dc20      	bgt.n	8011140 <_dtoa_r+0x940>
 80110fe:	9300      	str	r3, [sp, #0]
 8011100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011102:	2b02      	cmp	r3, #2
 8011104:	dd1e      	ble.n	8011144 <_dtoa_r+0x944>
 8011106:	9b00      	ldr	r3, [sp, #0]
 8011108:	2b00      	cmp	r3, #0
 801110a:	f47f aec0 	bne.w	8010e8e <_dtoa_r+0x68e>
 801110e:	4621      	mov	r1, r4
 8011110:	2205      	movs	r2, #5
 8011112:	4658      	mov	r0, fp
 8011114:	f000 fa9a 	bl	801164c <__multadd>
 8011118:	4601      	mov	r1, r0
 801111a:	4604      	mov	r4, r0
 801111c:	4648      	mov	r0, r9
 801111e:	f000 fcad 	bl	8011a7c <__mcmp>
 8011122:	2800      	cmp	r0, #0
 8011124:	f77f aeb3 	ble.w	8010e8e <_dtoa_r+0x68e>
 8011128:	4656      	mov	r6, sl
 801112a:	2331      	movs	r3, #49	@ 0x31
 801112c:	f806 3b01 	strb.w	r3, [r6], #1
 8011130:	9b04      	ldr	r3, [sp, #16]
 8011132:	3301      	adds	r3, #1
 8011134:	9304      	str	r3, [sp, #16]
 8011136:	e6ae      	b.n	8010e96 <_dtoa_r+0x696>
 8011138:	9c07      	ldr	r4, [sp, #28]
 801113a:	9704      	str	r7, [sp, #16]
 801113c:	4625      	mov	r5, r4
 801113e:	e7f3      	b.n	8011128 <_dtoa_r+0x928>
 8011140:	9b07      	ldr	r3, [sp, #28]
 8011142:	9300      	str	r3, [sp, #0]
 8011144:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011146:	2b00      	cmp	r3, #0
 8011148:	f000 8104 	beq.w	8011354 <_dtoa_r+0xb54>
 801114c:	2e00      	cmp	r6, #0
 801114e:	dd05      	ble.n	801115c <_dtoa_r+0x95c>
 8011150:	4629      	mov	r1, r5
 8011152:	4632      	mov	r2, r6
 8011154:	4658      	mov	r0, fp
 8011156:	f000 fc25 	bl	80119a4 <__lshift>
 801115a:	4605      	mov	r5, r0
 801115c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801115e:	2b00      	cmp	r3, #0
 8011160:	d05a      	beq.n	8011218 <_dtoa_r+0xa18>
 8011162:	6869      	ldr	r1, [r5, #4]
 8011164:	4658      	mov	r0, fp
 8011166:	f000 fa0f 	bl	8011588 <_Balloc>
 801116a:	4606      	mov	r6, r0
 801116c:	b928      	cbnz	r0, 801117a <_dtoa_r+0x97a>
 801116e:	4b84      	ldr	r3, [pc, #528]	@ (8011380 <_dtoa_r+0xb80>)
 8011170:	4602      	mov	r2, r0
 8011172:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011176:	f7ff bb5a 	b.w	801082e <_dtoa_r+0x2e>
 801117a:	692a      	ldr	r2, [r5, #16]
 801117c:	3202      	adds	r2, #2
 801117e:	0092      	lsls	r2, r2, #2
 8011180:	f105 010c 	add.w	r1, r5, #12
 8011184:	300c      	adds	r0, #12
 8011186:	f7ff faa2 	bl	80106ce <memcpy>
 801118a:	2201      	movs	r2, #1
 801118c:	4631      	mov	r1, r6
 801118e:	4658      	mov	r0, fp
 8011190:	f000 fc08 	bl	80119a4 <__lshift>
 8011194:	f10a 0301 	add.w	r3, sl, #1
 8011198:	9307      	str	r3, [sp, #28]
 801119a:	9b00      	ldr	r3, [sp, #0]
 801119c:	4453      	add	r3, sl
 801119e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80111a0:	9b02      	ldr	r3, [sp, #8]
 80111a2:	f003 0301 	and.w	r3, r3, #1
 80111a6:	462f      	mov	r7, r5
 80111a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80111aa:	4605      	mov	r5, r0
 80111ac:	9b07      	ldr	r3, [sp, #28]
 80111ae:	4621      	mov	r1, r4
 80111b0:	3b01      	subs	r3, #1
 80111b2:	4648      	mov	r0, r9
 80111b4:	9300      	str	r3, [sp, #0]
 80111b6:	f7ff fa98 	bl	80106ea <quorem>
 80111ba:	4639      	mov	r1, r7
 80111bc:	9002      	str	r0, [sp, #8]
 80111be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80111c2:	4648      	mov	r0, r9
 80111c4:	f000 fc5a 	bl	8011a7c <__mcmp>
 80111c8:	462a      	mov	r2, r5
 80111ca:	9008      	str	r0, [sp, #32]
 80111cc:	4621      	mov	r1, r4
 80111ce:	4658      	mov	r0, fp
 80111d0:	f000 fc70 	bl	8011ab4 <__mdiff>
 80111d4:	68c2      	ldr	r2, [r0, #12]
 80111d6:	4606      	mov	r6, r0
 80111d8:	bb02      	cbnz	r2, 801121c <_dtoa_r+0xa1c>
 80111da:	4601      	mov	r1, r0
 80111dc:	4648      	mov	r0, r9
 80111de:	f000 fc4d 	bl	8011a7c <__mcmp>
 80111e2:	4602      	mov	r2, r0
 80111e4:	4631      	mov	r1, r6
 80111e6:	4658      	mov	r0, fp
 80111e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80111ea:	f000 fa0d 	bl	8011608 <_Bfree>
 80111ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111f2:	9e07      	ldr	r6, [sp, #28]
 80111f4:	ea43 0102 	orr.w	r1, r3, r2
 80111f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111fa:	4319      	orrs	r1, r3
 80111fc:	d110      	bne.n	8011220 <_dtoa_r+0xa20>
 80111fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011202:	d029      	beq.n	8011258 <_dtoa_r+0xa58>
 8011204:	9b08      	ldr	r3, [sp, #32]
 8011206:	2b00      	cmp	r3, #0
 8011208:	dd02      	ble.n	8011210 <_dtoa_r+0xa10>
 801120a:	9b02      	ldr	r3, [sp, #8]
 801120c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011210:	9b00      	ldr	r3, [sp, #0]
 8011212:	f883 8000 	strb.w	r8, [r3]
 8011216:	e63f      	b.n	8010e98 <_dtoa_r+0x698>
 8011218:	4628      	mov	r0, r5
 801121a:	e7bb      	b.n	8011194 <_dtoa_r+0x994>
 801121c:	2201      	movs	r2, #1
 801121e:	e7e1      	b.n	80111e4 <_dtoa_r+0x9e4>
 8011220:	9b08      	ldr	r3, [sp, #32]
 8011222:	2b00      	cmp	r3, #0
 8011224:	db04      	blt.n	8011230 <_dtoa_r+0xa30>
 8011226:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011228:	430b      	orrs	r3, r1
 801122a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801122c:	430b      	orrs	r3, r1
 801122e:	d120      	bne.n	8011272 <_dtoa_r+0xa72>
 8011230:	2a00      	cmp	r2, #0
 8011232:	dded      	ble.n	8011210 <_dtoa_r+0xa10>
 8011234:	4649      	mov	r1, r9
 8011236:	2201      	movs	r2, #1
 8011238:	4658      	mov	r0, fp
 801123a:	f000 fbb3 	bl	80119a4 <__lshift>
 801123e:	4621      	mov	r1, r4
 8011240:	4681      	mov	r9, r0
 8011242:	f000 fc1b 	bl	8011a7c <__mcmp>
 8011246:	2800      	cmp	r0, #0
 8011248:	dc03      	bgt.n	8011252 <_dtoa_r+0xa52>
 801124a:	d1e1      	bne.n	8011210 <_dtoa_r+0xa10>
 801124c:	f018 0f01 	tst.w	r8, #1
 8011250:	d0de      	beq.n	8011210 <_dtoa_r+0xa10>
 8011252:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011256:	d1d8      	bne.n	801120a <_dtoa_r+0xa0a>
 8011258:	9a00      	ldr	r2, [sp, #0]
 801125a:	2339      	movs	r3, #57	@ 0x39
 801125c:	7013      	strb	r3, [r2, #0]
 801125e:	4633      	mov	r3, r6
 8011260:	461e      	mov	r6, r3
 8011262:	3b01      	subs	r3, #1
 8011264:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011268:	2a39      	cmp	r2, #57	@ 0x39
 801126a:	d052      	beq.n	8011312 <_dtoa_r+0xb12>
 801126c:	3201      	adds	r2, #1
 801126e:	701a      	strb	r2, [r3, #0]
 8011270:	e612      	b.n	8010e98 <_dtoa_r+0x698>
 8011272:	2a00      	cmp	r2, #0
 8011274:	dd07      	ble.n	8011286 <_dtoa_r+0xa86>
 8011276:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801127a:	d0ed      	beq.n	8011258 <_dtoa_r+0xa58>
 801127c:	9a00      	ldr	r2, [sp, #0]
 801127e:	f108 0301 	add.w	r3, r8, #1
 8011282:	7013      	strb	r3, [r2, #0]
 8011284:	e608      	b.n	8010e98 <_dtoa_r+0x698>
 8011286:	9b07      	ldr	r3, [sp, #28]
 8011288:	9a07      	ldr	r2, [sp, #28]
 801128a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801128e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011290:	4293      	cmp	r3, r2
 8011292:	d028      	beq.n	80112e6 <_dtoa_r+0xae6>
 8011294:	4649      	mov	r1, r9
 8011296:	2300      	movs	r3, #0
 8011298:	220a      	movs	r2, #10
 801129a:	4658      	mov	r0, fp
 801129c:	f000 f9d6 	bl	801164c <__multadd>
 80112a0:	42af      	cmp	r7, r5
 80112a2:	4681      	mov	r9, r0
 80112a4:	f04f 0300 	mov.w	r3, #0
 80112a8:	f04f 020a 	mov.w	r2, #10
 80112ac:	4639      	mov	r1, r7
 80112ae:	4658      	mov	r0, fp
 80112b0:	d107      	bne.n	80112c2 <_dtoa_r+0xac2>
 80112b2:	f000 f9cb 	bl	801164c <__multadd>
 80112b6:	4607      	mov	r7, r0
 80112b8:	4605      	mov	r5, r0
 80112ba:	9b07      	ldr	r3, [sp, #28]
 80112bc:	3301      	adds	r3, #1
 80112be:	9307      	str	r3, [sp, #28]
 80112c0:	e774      	b.n	80111ac <_dtoa_r+0x9ac>
 80112c2:	f000 f9c3 	bl	801164c <__multadd>
 80112c6:	4629      	mov	r1, r5
 80112c8:	4607      	mov	r7, r0
 80112ca:	2300      	movs	r3, #0
 80112cc:	220a      	movs	r2, #10
 80112ce:	4658      	mov	r0, fp
 80112d0:	f000 f9bc 	bl	801164c <__multadd>
 80112d4:	4605      	mov	r5, r0
 80112d6:	e7f0      	b.n	80112ba <_dtoa_r+0xaba>
 80112d8:	9b00      	ldr	r3, [sp, #0]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	bfcc      	ite	gt
 80112de:	461e      	movgt	r6, r3
 80112e0:	2601      	movle	r6, #1
 80112e2:	4456      	add	r6, sl
 80112e4:	2700      	movs	r7, #0
 80112e6:	4649      	mov	r1, r9
 80112e8:	2201      	movs	r2, #1
 80112ea:	4658      	mov	r0, fp
 80112ec:	f000 fb5a 	bl	80119a4 <__lshift>
 80112f0:	4621      	mov	r1, r4
 80112f2:	4681      	mov	r9, r0
 80112f4:	f000 fbc2 	bl	8011a7c <__mcmp>
 80112f8:	2800      	cmp	r0, #0
 80112fa:	dcb0      	bgt.n	801125e <_dtoa_r+0xa5e>
 80112fc:	d102      	bne.n	8011304 <_dtoa_r+0xb04>
 80112fe:	f018 0f01 	tst.w	r8, #1
 8011302:	d1ac      	bne.n	801125e <_dtoa_r+0xa5e>
 8011304:	4633      	mov	r3, r6
 8011306:	461e      	mov	r6, r3
 8011308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801130c:	2a30      	cmp	r2, #48	@ 0x30
 801130e:	d0fa      	beq.n	8011306 <_dtoa_r+0xb06>
 8011310:	e5c2      	b.n	8010e98 <_dtoa_r+0x698>
 8011312:	459a      	cmp	sl, r3
 8011314:	d1a4      	bne.n	8011260 <_dtoa_r+0xa60>
 8011316:	9b04      	ldr	r3, [sp, #16]
 8011318:	3301      	adds	r3, #1
 801131a:	9304      	str	r3, [sp, #16]
 801131c:	2331      	movs	r3, #49	@ 0x31
 801131e:	f88a 3000 	strb.w	r3, [sl]
 8011322:	e5b9      	b.n	8010e98 <_dtoa_r+0x698>
 8011324:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011326:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011384 <_dtoa_r+0xb84>
 801132a:	b11b      	cbz	r3, 8011334 <_dtoa_r+0xb34>
 801132c:	f10a 0308 	add.w	r3, sl, #8
 8011330:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011332:	6013      	str	r3, [r2, #0]
 8011334:	4650      	mov	r0, sl
 8011336:	b019      	add	sp, #100	@ 0x64
 8011338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801133c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801133e:	2b01      	cmp	r3, #1
 8011340:	f77f ae37 	ble.w	8010fb2 <_dtoa_r+0x7b2>
 8011344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011346:	930a      	str	r3, [sp, #40]	@ 0x28
 8011348:	2001      	movs	r0, #1
 801134a:	e655      	b.n	8010ff8 <_dtoa_r+0x7f8>
 801134c:	9b00      	ldr	r3, [sp, #0]
 801134e:	2b00      	cmp	r3, #0
 8011350:	f77f aed6 	ble.w	8011100 <_dtoa_r+0x900>
 8011354:	4656      	mov	r6, sl
 8011356:	4621      	mov	r1, r4
 8011358:	4648      	mov	r0, r9
 801135a:	f7ff f9c6 	bl	80106ea <quorem>
 801135e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011362:	f806 8b01 	strb.w	r8, [r6], #1
 8011366:	9b00      	ldr	r3, [sp, #0]
 8011368:	eba6 020a 	sub.w	r2, r6, sl
 801136c:	4293      	cmp	r3, r2
 801136e:	ddb3      	ble.n	80112d8 <_dtoa_r+0xad8>
 8011370:	4649      	mov	r1, r9
 8011372:	2300      	movs	r3, #0
 8011374:	220a      	movs	r2, #10
 8011376:	4658      	mov	r0, fp
 8011378:	f000 f968 	bl	801164c <__multadd>
 801137c:	4681      	mov	r9, r0
 801137e:	e7ea      	b.n	8011356 <_dtoa_r+0xb56>
 8011380:	080126bc 	.word	0x080126bc
 8011384:	08012640 	.word	0x08012640

08011388 <_free_r>:
 8011388:	b538      	push	{r3, r4, r5, lr}
 801138a:	4605      	mov	r5, r0
 801138c:	2900      	cmp	r1, #0
 801138e:	d041      	beq.n	8011414 <_free_r+0x8c>
 8011390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011394:	1f0c      	subs	r4, r1, #4
 8011396:	2b00      	cmp	r3, #0
 8011398:	bfb8      	it	lt
 801139a:	18e4      	addlt	r4, r4, r3
 801139c:	f000 f8e8 	bl	8011570 <__malloc_lock>
 80113a0:	4a1d      	ldr	r2, [pc, #116]	@ (8011418 <_free_r+0x90>)
 80113a2:	6813      	ldr	r3, [r2, #0]
 80113a4:	b933      	cbnz	r3, 80113b4 <_free_r+0x2c>
 80113a6:	6063      	str	r3, [r4, #4]
 80113a8:	6014      	str	r4, [r2, #0]
 80113aa:	4628      	mov	r0, r5
 80113ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113b0:	f000 b8e4 	b.w	801157c <__malloc_unlock>
 80113b4:	42a3      	cmp	r3, r4
 80113b6:	d908      	bls.n	80113ca <_free_r+0x42>
 80113b8:	6820      	ldr	r0, [r4, #0]
 80113ba:	1821      	adds	r1, r4, r0
 80113bc:	428b      	cmp	r3, r1
 80113be:	bf01      	itttt	eq
 80113c0:	6819      	ldreq	r1, [r3, #0]
 80113c2:	685b      	ldreq	r3, [r3, #4]
 80113c4:	1809      	addeq	r1, r1, r0
 80113c6:	6021      	streq	r1, [r4, #0]
 80113c8:	e7ed      	b.n	80113a6 <_free_r+0x1e>
 80113ca:	461a      	mov	r2, r3
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	b10b      	cbz	r3, 80113d4 <_free_r+0x4c>
 80113d0:	42a3      	cmp	r3, r4
 80113d2:	d9fa      	bls.n	80113ca <_free_r+0x42>
 80113d4:	6811      	ldr	r1, [r2, #0]
 80113d6:	1850      	adds	r0, r2, r1
 80113d8:	42a0      	cmp	r0, r4
 80113da:	d10b      	bne.n	80113f4 <_free_r+0x6c>
 80113dc:	6820      	ldr	r0, [r4, #0]
 80113de:	4401      	add	r1, r0
 80113e0:	1850      	adds	r0, r2, r1
 80113e2:	4283      	cmp	r3, r0
 80113e4:	6011      	str	r1, [r2, #0]
 80113e6:	d1e0      	bne.n	80113aa <_free_r+0x22>
 80113e8:	6818      	ldr	r0, [r3, #0]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	6053      	str	r3, [r2, #4]
 80113ee:	4408      	add	r0, r1
 80113f0:	6010      	str	r0, [r2, #0]
 80113f2:	e7da      	b.n	80113aa <_free_r+0x22>
 80113f4:	d902      	bls.n	80113fc <_free_r+0x74>
 80113f6:	230c      	movs	r3, #12
 80113f8:	602b      	str	r3, [r5, #0]
 80113fa:	e7d6      	b.n	80113aa <_free_r+0x22>
 80113fc:	6820      	ldr	r0, [r4, #0]
 80113fe:	1821      	adds	r1, r4, r0
 8011400:	428b      	cmp	r3, r1
 8011402:	bf04      	itt	eq
 8011404:	6819      	ldreq	r1, [r3, #0]
 8011406:	685b      	ldreq	r3, [r3, #4]
 8011408:	6063      	str	r3, [r4, #4]
 801140a:	bf04      	itt	eq
 801140c:	1809      	addeq	r1, r1, r0
 801140e:	6021      	streq	r1, [r4, #0]
 8011410:	6054      	str	r4, [r2, #4]
 8011412:	e7ca      	b.n	80113aa <_free_r+0x22>
 8011414:	bd38      	pop	{r3, r4, r5, pc}
 8011416:	bf00      	nop
 8011418:	200046c4 	.word	0x200046c4

0801141c <malloc>:
 801141c:	4b02      	ldr	r3, [pc, #8]	@ (8011428 <malloc+0xc>)
 801141e:	4601      	mov	r1, r0
 8011420:	6818      	ldr	r0, [r3, #0]
 8011422:	f000 b825 	b.w	8011470 <_malloc_r>
 8011426:	bf00      	nop
 8011428:	20000124 	.word	0x20000124

0801142c <sbrk_aligned>:
 801142c:	b570      	push	{r4, r5, r6, lr}
 801142e:	4e0f      	ldr	r6, [pc, #60]	@ (801146c <sbrk_aligned+0x40>)
 8011430:	460c      	mov	r4, r1
 8011432:	6831      	ldr	r1, [r6, #0]
 8011434:	4605      	mov	r5, r0
 8011436:	b911      	cbnz	r1, 801143e <sbrk_aligned+0x12>
 8011438:	f000 fcd4 	bl	8011de4 <_sbrk_r>
 801143c:	6030      	str	r0, [r6, #0]
 801143e:	4621      	mov	r1, r4
 8011440:	4628      	mov	r0, r5
 8011442:	f000 fccf 	bl	8011de4 <_sbrk_r>
 8011446:	1c43      	adds	r3, r0, #1
 8011448:	d103      	bne.n	8011452 <sbrk_aligned+0x26>
 801144a:	f04f 34ff 	mov.w	r4, #4294967295
 801144e:	4620      	mov	r0, r4
 8011450:	bd70      	pop	{r4, r5, r6, pc}
 8011452:	1cc4      	adds	r4, r0, #3
 8011454:	f024 0403 	bic.w	r4, r4, #3
 8011458:	42a0      	cmp	r0, r4
 801145a:	d0f8      	beq.n	801144e <sbrk_aligned+0x22>
 801145c:	1a21      	subs	r1, r4, r0
 801145e:	4628      	mov	r0, r5
 8011460:	f000 fcc0 	bl	8011de4 <_sbrk_r>
 8011464:	3001      	adds	r0, #1
 8011466:	d1f2      	bne.n	801144e <sbrk_aligned+0x22>
 8011468:	e7ef      	b.n	801144a <sbrk_aligned+0x1e>
 801146a:	bf00      	nop
 801146c:	200046c0 	.word	0x200046c0

08011470 <_malloc_r>:
 8011470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011474:	1ccd      	adds	r5, r1, #3
 8011476:	f025 0503 	bic.w	r5, r5, #3
 801147a:	3508      	adds	r5, #8
 801147c:	2d0c      	cmp	r5, #12
 801147e:	bf38      	it	cc
 8011480:	250c      	movcc	r5, #12
 8011482:	2d00      	cmp	r5, #0
 8011484:	4606      	mov	r6, r0
 8011486:	db01      	blt.n	801148c <_malloc_r+0x1c>
 8011488:	42a9      	cmp	r1, r5
 801148a:	d904      	bls.n	8011496 <_malloc_r+0x26>
 801148c:	230c      	movs	r3, #12
 801148e:	6033      	str	r3, [r6, #0]
 8011490:	2000      	movs	r0, #0
 8011492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011496:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801156c <_malloc_r+0xfc>
 801149a:	f000 f869 	bl	8011570 <__malloc_lock>
 801149e:	f8d8 3000 	ldr.w	r3, [r8]
 80114a2:	461c      	mov	r4, r3
 80114a4:	bb44      	cbnz	r4, 80114f8 <_malloc_r+0x88>
 80114a6:	4629      	mov	r1, r5
 80114a8:	4630      	mov	r0, r6
 80114aa:	f7ff ffbf 	bl	801142c <sbrk_aligned>
 80114ae:	1c43      	adds	r3, r0, #1
 80114b0:	4604      	mov	r4, r0
 80114b2:	d158      	bne.n	8011566 <_malloc_r+0xf6>
 80114b4:	f8d8 4000 	ldr.w	r4, [r8]
 80114b8:	4627      	mov	r7, r4
 80114ba:	2f00      	cmp	r7, #0
 80114bc:	d143      	bne.n	8011546 <_malloc_r+0xd6>
 80114be:	2c00      	cmp	r4, #0
 80114c0:	d04b      	beq.n	801155a <_malloc_r+0xea>
 80114c2:	6823      	ldr	r3, [r4, #0]
 80114c4:	4639      	mov	r1, r7
 80114c6:	4630      	mov	r0, r6
 80114c8:	eb04 0903 	add.w	r9, r4, r3
 80114cc:	f000 fc8a 	bl	8011de4 <_sbrk_r>
 80114d0:	4581      	cmp	r9, r0
 80114d2:	d142      	bne.n	801155a <_malloc_r+0xea>
 80114d4:	6821      	ldr	r1, [r4, #0]
 80114d6:	1a6d      	subs	r5, r5, r1
 80114d8:	4629      	mov	r1, r5
 80114da:	4630      	mov	r0, r6
 80114dc:	f7ff ffa6 	bl	801142c <sbrk_aligned>
 80114e0:	3001      	adds	r0, #1
 80114e2:	d03a      	beq.n	801155a <_malloc_r+0xea>
 80114e4:	6823      	ldr	r3, [r4, #0]
 80114e6:	442b      	add	r3, r5
 80114e8:	6023      	str	r3, [r4, #0]
 80114ea:	f8d8 3000 	ldr.w	r3, [r8]
 80114ee:	685a      	ldr	r2, [r3, #4]
 80114f0:	bb62      	cbnz	r2, 801154c <_malloc_r+0xdc>
 80114f2:	f8c8 7000 	str.w	r7, [r8]
 80114f6:	e00f      	b.n	8011518 <_malloc_r+0xa8>
 80114f8:	6822      	ldr	r2, [r4, #0]
 80114fa:	1b52      	subs	r2, r2, r5
 80114fc:	d420      	bmi.n	8011540 <_malloc_r+0xd0>
 80114fe:	2a0b      	cmp	r2, #11
 8011500:	d917      	bls.n	8011532 <_malloc_r+0xc2>
 8011502:	1961      	adds	r1, r4, r5
 8011504:	42a3      	cmp	r3, r4
 8011506:	6025      	str	r5, [r4, #0]
 8011508:	bf18      	it	ne
 801150a:	6059      	strne	r1, [r3, #4]
 801150c:	6863      	ldr	r3, [r4, #4]
 801150e:	bf08      	it	eq
 8011510:	f8c8 1000 	streq.w	r1, [r8]
 8011514:	5162      	str	r2, [r4, r5]
 8011516:	604b      	str	r3, [r1, #4]
 8011518:	4630      	mov	r0, r6
 801151a:	f000 f82f 	bl	801157c <__malloc_unlock>
 801151e:	f104 000b 	add.w	r0, r4, #11
 8011522:	1d23      	adds	r3, r4, #4
 8011524:	f020 0007 	bic.w	r0, r0, #7
 8011528:	1ac2      	subs	r2, r0, r3
 801152a:	bf1c      	itt	ne
 801152c:	1a1b      	subne	r3, r3, r0
 801152e:	50a3      	strne	r3, [r4, r2]
 8011530:	e7af      	b.n	8011492 <_malloc_r+0x22>
 8011532:	6862      	ldr	r2, [r4, #4]
 8011534:	42a3      	cmp	r3, r4
 8011536:	bf0c      	ite	eq
 8011538:	f8c8 2000 	streq.w	r2, [r8]
 801153c:	605a      	strne	r2, [r3, #4]
 801153e:	e7eb      	b.n	8011518 <_malloc_r+0xa8>
 8011540:	4623      	mov	r3, r4
 8011542:	6864      	ldr	r4, [r4, #4]
 8011544:	e7ae      	b.n	80114a4 <_malloc_r+0x34>
 8011546:	463c      	mov	r4, r7
 8011548:	687f      	ldr	r7, [r7, #4]
 801154a:	e7b6      	b.n	80114ba <_malloc_r+0x4a>
 801154c:	461a      	mov	r2, r3
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	42a3      	cmp	r3, r4
 8011552:	d1fb      	bne.n	801154c <_malloc_r+0xdc>
 8011554:	2300      	movs	r3, #0
 8011556:	6053      	str	r3, [r2, #4]
 8011558:	e7de      	b.n	8011518 <_malloc_r+0xa8>
 801155a:	230c      	movs	r3, #12
 801155c:	6033      	str	r3, [r6, #0]
 801155e:	4630      	mov	r0, r6
 8011560:	f000 f80c 	bl	801157c <__malloc_unlock>
 8011564:	e794      	b.n	8011490 <_malloc_r+0x20>
 8011566:	6005      	str	r5, [r0, #0]
 8011568:	e7d6      	b.n	8011518 <_malloc_r+0xa8>
 801156a:	bf00      	nop
 801156c:	200046c4 	.word	0x200046c4

08011570 <__malloc_lock>:
 8011570:	4801      	ldr	r0, [pc, #4]	@ (8011578 <__malloc_lock+0x8>)
 8011572:	f7ff b8aa 	b.w	80106ca <__retarget_lock_acquire_recursive>
 8011576:	bf00      	nop
 8011578:	200046bc 	.word	0x200046bc

0801157c <__malloc_unlock>:
 801157c:	4801      	ldr	r0, [pc, #4]	@ (8011584 <__malloc_unlock+0x8>)
 801157e:	f7ff b8a5 	b.w	80106cc <__retarget_lock_release_recursive>
 8011582:	bf00      	nop
 8011584:	200046bc 	.word	0x200046bc

08011588 <_Balloc>:
 8011588:	b570      	push	{r4, r5, r6, lr}
 801158a:	69c6      	ldr	r6, [r0, #28]
 801158c:	4604      	mov	r4, r0
 801158e:	460d      	mov	r5, r1
 8011590:	b976      	cbnz	r6, 80115b0 <_Balloc+0x28>
 8011592:	2010      	movs	r0, #16
 8011594:	f7ff ff42 	bl	801141c <malloc>
 8011598:	4602      	mov	r2, r0
 801159a:	61e0      	str	r0, [r4, #28]
 801159c:	b920      	cbnz	r0, 80115a8 <_Balloc+0x20>
 801159e:	4b18      	ldr	r3, [pc, #96]	@ (8011600 <_Balloc+0x78>)
 80115a0:	4818      	ldr	r0, [pc, #96]	@ (8011604 <_Balloc+0x7c>)
 80115a2:	216b      	movs	r1, #107	@ 0x6b
 80115a4:	f000 fc2e 	bl	8011e04 <__assert_func>
 80115a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115ac:	6006      	str	r6, [r0, #0]
 80115ae:	60c6      	str	r6, [r0, #12]
 80115b0:	69e6      	ldr	r6, [r4, #28]
 80115b2:	68f3      	ldr	r3, [r6, #12]
 80115b4:	b183      	cbz	r3, 80115d8 <_Balloc+0x50>
 80115b6:	69e3      	ldr	r3, [r4, #28]
 80115b8:	68db      	ldr	r3, [r3, #12]
 80115ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80115be:	b9b8      	cbnz	r0, 80115f0 <_Balloc+0x68>
 80115c0:	2101      	movs	r1, #1
 80115c2:	fa01 f605 	lsl.w	r6, r1, r5
 80115c6:	1d72      	adds	r2, r6, #5
 80115c8:	0092      	lsls	r2, r2, #2
 80115ca:	4620      	mov	r0, r4
 80115cc:	f000 fc38 	bl	8011e40 <_calloc_r>
 80115d0:	b160      	cbz	r0, 80115ec <_Balloc+0x64>
 80115d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80115d6:	e00e      	b.n	80115f6 <_Balloc+0x6e>
 80115d8:	2221      	movs	r2, #33	@ 0x21
 80115da:	2104      	movs	r1, #4
 80115dc:	4620      	mov	r0, r4
 80115de:	f000 fc2f 	bl	8011e40 <_calloc_r>
 80115e2:	69e3      	ldr	r3, [r4, #28]
 80115e4:	60f0      	str	r0, [r6, #12]
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d1e4      	bne.n	80115b6 <_Balloc+0x2e>
 80115ec:	2000      	movs	r0, #0
 80115ee:	bd70      	pop	{r4, r5, r6, pc}
 80115f0:	6802      	ldr	r2, [r0, #0]
 80115f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80115f6:	2300      	movs	r3, #0
 80115f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80115fc:	e7f7      	b.n	80115ee <_Balloc+0x66>
 80115fe:	bf00      	nop
 8011600:	0801264d 	.word	0x0801264d
 8011604:	080126cd 	.word	0x080126cd

08011608 <_Bfree>:
 8011608:	b570      	push	{r4, r5, r6, lr}
 801160a:	69c6      	ldr	r6, [r0, #28]
 801160c:	4605      	mov	r5, r0
 801160e:	460c      	mov	r4, r1
 8011610:	b976      	cbnz	r6, 8011630 <_Bfree+0x28>
 8011612:	2010      	movs	r0, #16
 8011614:	f7ff ff02 	bl	801141c <malloc>
 8011618:	4602      	mov	r2, r0
 801161a:	61e8      	str	r0, [r5, #28]
 801161c:	b920      	cbnz	r0, 8011628 <_Bfree+0x20>
 801161e:	4b09      	ldr	r3, [pc, #36]	@ (8011644 <_Bfree+0x3c>)
 8011620:	4809      	ldr	r0, [pc, #36]	@ (8011648 <_Bfree+0x40>)
 8011622:	218f      	movs	r1, #143	@ 0x8f
 8011624:	f000 fbee 	bl	8011e04 <__assert_func>
 8011628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801162c:	6006      	str	r6, [r0, #0]
 801162e:	60c6      	str	r6, [r0, #12]
 8011630:	b13c      	cbz	r4, 8011642 <_Bfree+0x3a>
 8011632:	69eb      	ldr	r3, [r5, #28]
 8011634:	6862      	ldr	r2, [r4, #4]
 8011636:	68db      	ldr	r3, [r3, #12]
 8011638:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801163c:	6021      	str	r1, [r4, #0]
 801163e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011642:	bd70      	pop	{r4, r5, r6, pc}
 8011644:	0801264d 	.word	0x0801264d
 8011648:	080126cd 	.word	0x080126cd

0801164c <__multadd>:
 801164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011650:	690d      	ldr	r5, [r1, #16]
 8011652:	4607      	mov	r7, r0
 8011654:	460c      	mov	r4, r1
 8011656:	461e      	mov	r6, r3
 8011658:	f101 0c14 	add.w	ip, r1, #20
 801165c:	2000      	movs	r0, #0
 801165e:	f8dc 3000 	ldr.w	r3, [ip]
 8011662:	b299      	uxth	r1, r3
 8011664:	fb02 6101 	mla	r1, r2, r1, r6
 8011668:	0c1e      	lsrs	r6, r3, #16
 801166a:	0c0b      	lsrs	r3, r1, #16
 801166c:	fb02 3306 	mla	r3, r2, r6, r3
 8011670:	b289      	uxth	r1, r1
 8011672:	3001      	adds	r0, #1
 8011674:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011678:	4285      	cmp	r5, r0
 801167a:	f84c 1b04 	str.w	r1, [ip], #4
 801167e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011682:	dcec      	bgt.n	801165e <__multadd+0x12>
 8011684:	b30e      	cbz	r6, 80116ca <__multadd+0x7e>
 8011686:	68a3      	ldr	r3, [r4, #8]
 8011688:	42ab      	cmp	r3, r5
 801168a:	dc19      	bgt.n	80116c0 <__multadd+0x74>
 801168c:	6861      	ldr	r1, [r4, #4]
 801168e:	4638      	mov	r0, r7
 8011690:	3101      	adds	r1, #1
 8011692:	f7ff ff79 	bl	8011588 <_Balloc>
 8011696:	4680      	mov	r8, r0
 8011698:	b928      	cbnz	r0, 80116a6 <__multadd+0x5a>
 801169a:	4602      	mov	r2, r0
 801169c:	4b0c      	ldr	r3, [pc, #48]	@ (80116d0 <__multadd+0x84>)
 801169e:	480d      	ldr	r0, [pc, #52]	@ (80116d4 <__multadd+0x88>)
 80116a0:	21ba      	movs	r1, #186	@ 0xba
 80116a2:	f000 fbaf 	bl	8011e04 <__assert_func>
 80116a6:	6922      	ldr	r2, [r4, #16]
 80116a8:	3202      	adds	r2, #2
 80116aa:	f104 010c 	add.w	r1, r4, #12
 80116ae:	0092      	lsls	r2, r2, #2
 80116b0:	300c      	adds	r0, #12
 80116b2:	f7ff f80c 	bl	80106ce <memcpy>
 80116b6:	4621      	mov	r1, r4
 80116b8:	4638      	mov	r0, r7
 80116ba:	f7ff ffa5 	bl	8011608 <_Bfree>
 80116be:	4644      	mov	r4, r8
 80116c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80116c4:	3501      	adds	r5, #1
 80116c6:	615e      	str	r6, [r3, #20]
 80116c8:	6125      	str	r5, [r4, #16]
 80116ca:	4620      	mov	r0, r4
 80116cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116d0:	080126bc 	.word	0x080126bc
 80116d4:	080126cd 	.word	0x080126cd

080116d8 <__hi0bits>:
 80116d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80116dc:	4603      	mov	r3, r0
 80116de:	bf36      	itet	cc
 80116e0:	0403      	lslcc	r3, r0, #16
 80116e2:	2000      	movcs	r0, #0
 80116e4:	2010      	movcc	r0, #16
 80116e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80116ea:	bf3c      	itt	cc
 80116ec:	021b      	lslcc	r3, r3, #8
 80116ee:	3008      	addcc	r0, #8
 80116f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80116f4:	bf3c      	itt	cc
 80116f6:	011b      	lslcc	r3, r3, #4
 80116f8:	3004      	addcc	r0, #4
 80116fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80116fe:	bf3c      	itt	cc
 8011700:	009b      	lslcc	r3, r3, #2
 8011702:	3002      	addcc	r0, #2
 8011704:	2b00      	cmp	r3, #0
 8011706:	db05      	blt.n	8011714 <__hi0bits+0x3c>
 8011708:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801170c:	f100 0001 	add.w	r0, r0, #1
 8011710:	bf08      	it	eq
 8011712:	2020      	moveq	r0, #32
 8011714:	4770      	bx	lr

08011716 <__lo0bits>:
 8011716:	6803      	ldr	r3, [r0, #0]
 8011718:	4602      	mov	r2, r0
 801171a:	f013 0007 	ands.w	r0, r3, #7
 801171e:	d00b      	beq.n	8011738 <__lo0bits+0x22>
 8011720:	07d9      	lsls	r1, r3, #31
 8011722:	d421      	bmi.n	8011768 <__lo0bits+0x52>
 8011724:	0798      	lsls	r0, r3, #30
 8011726:	bf49      	itett	mi
 8011728:	085b      	lsrmi	r3, r3, #1
 801172a:	089b      	lsrpl	r3, r3, #2
 801172c:	2001      	movmi	r0, #1
 801172e:	6013      	strmi	r3, [r2, #0]
 8011730:	bf5c      	itt	pl
 8011732:	6013      	strpl	r3, [r2, #0]
 8011734:	2002      	movpl	r0, #2
 8011736:	4770      	bx	lr
 8011738:	b299      	uxth	r1, r3
 801173a:	b909      	cbnz	r1, 8011740 <__lo0bits+0x2a>
 801173c:	0c1b      	lsrs	r3, r3, #16
 801173e:	2010      	movs	r0, #16
 8011740:	b2d9      	uxtb	r1, r3
 8011742:	b909      	cbnz	r1, 8011748 <__lo0bits+0x32>
 8011744:	3008      	adds	r0, #8
 8011746:	0a1b      	lsrs	r3, r3, #8
 8011748:	0719      	lsls	r1, r3, #28
 801174a:	bf04      	itt	eq
 801174c:	091b      	lsreq	r3, r3, #4
 801174e:	3004      	addeq	r0, #4
 8011750:	0799      	lsls	r1, r3, #30
 8011752:	bf04      	itt	eq
 8011754:	089b      	lsreq	r3, r3, #2
 8011756:	3002      	addeq	r0, #2
 8011758:	07d9      	lsls	r1, r3, #31
 801175a:	d403      	bmi.n	8011764 <__lo0bits+0x4e>
 801175c:	085b      	lsrs	r3, r3, #1
 801175e:	f100 0001 	add.w	r0, r0, #1
 8011762:	d003      	beq.n	801176c <__lo0bits+0x56>
 8011764:	6013      	str	r3, [r2, #0]
 8011766:	4770      	bx	lr
 8011768:	2000      	movs	r0, #0
 801176a:	4770      	bx	lr
 801176c:	2020      	movs	r0, #32
 801176e:	4770      	bx	lr

08011770 <__i2b>:
 8011770:	b510      	push	{r4, lr}
 8011772:	460c      	mov	r4, r1
 8011774:	2101      	movs	r1, #1
 8011776:	f7ff ff07 	bl	8011588 <_Balloc>
 801177a:	4602      	mov	r2, r0
 801177c:	b928      	cbnz	r0, 801178a <__i2b+0x1a>
 801177e:	4b05      	ldr	r3, [pc, #20]	@ (8011794 <__i2b+0x24>)
 8011780:	4805      	ldr	r0, [pc, #20]	@ (8011798 <__i2b+0x28>)
 8011782:	f240 1145 	movw	r1, #325	@ 0x145
 8011786:	f000 fb3d 	bl	8011e04 <__assert_func>
 801178a:	2301      	movs	r3, #1
 801178c:	6144      	str	r4, [r0, #20]
 801178e:	6103      	str	r3, [r0, #16]
 8011790:	bd10      	pop	{r4, pc}
 8011792:	bf00      	nop
 8011794:	080126bc 	.word	0x080126bc
 8011798:	080126cd 	.word	0x080126cd

0801179c <__multiply>:
 801179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117a0:	4614      	mov	r4, r2
 80117a2:	690a      	ldr	r2, [r1, #16]
 80117a4:	6923      	ldr	r3, [r4, #16]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	bfa8      	it	ge
 80117aa:	4623      	movge	r3, r4
 80117ac:	460f      	mov	r7, r1
 80117ae:	bfa4      	itt	ge
 80117b0:	460c      	movge	r4, r1
 80117b2:	461f      	movge	r7, r3
 80117b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80117b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80117bc:	68a3      	ldr	r3, [r4, #8]
 80117be:	6861      	ldr	r1, [r4, #4]
 80117c0:	eb0a 0609 	add.w	r6, sl, r9
 80117c4:	42b3      	cmp	r3, r6
 80117c6:	b085      	sub	sp, #20
 80117c8:	bfb8      	it	lt
 80117ca:	3101      	addlt	r1, #1
 80117cc:	f7ff fedc 	bl	8011588 <_Balloc>
 80117d0:	b930      	cbnz	r0, 80117e0 <__multiply+0x44>
 80117d2:	4602      	mov	r2, r0
 80117d4:	4b44      	ldr	r3, [pc, #272]	@ (80118e8 <__multiply+0x14c>)
 80117d6:	4845      	ldr	r0, [pc, #276]	@ (80118ec <__multiply+0x150>)
 80117d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80117dc:	f000 fb12 	bl	8011e04 <__assert_func>
 80117e0:	f100 0514 	add.w	r5, r0, #20
 80117e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80117e8:	462b      	mov	r3, r5
 80117ea:	2200      	movs	r2, #0
 80117ec:	4543      	cmp	r3, r8
 80117ee:	d321      	bcc.n	8011834 <__multiply+0x98>
 80117f0:	f107 0114 	add.w	r1, r7, #20
 80117f4:	f104 0214 	add.w	r2, r4, #20
 80117f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80117fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011800:	9302      	str	r3, [sp, #8]
 8011802:	1b13      	subs	r3, r2, r4
 8011804:	3b15      	subs	r3, #21
 8011806:	f023 0303 	bic.w	r3, r3, #3
 801180a:	3304      	adds	r3, #4
 801180c:	f104 0715 	add.w	r7, r4, #21
 8011810:	42ba      	cmp	r2, r7
 8011812:	bf38      	it	cc
 8011814:	2304      	movcc	r3, #4
 8011816:	9301      	str	r3, [sp, #4]
 8011818:	9b02      	ldr	r3, [sp, #8]
 801181a:	9103      	str	r1, [sp, #12]
 801181c:	428b      	cmp	r3, r1
 801181e:	d80c      	bhi.n	801183a <__multiply+0x9e>
 8011820:	2e00      	cmp	r6, #0
 8011822:	dd03      	ble.n	801182c <__multiply+0x90>
 8011824:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011828:	2b00      	cmp	r3, #0
 801182a:	d05b      	beq.n	80118e4 <__multiply+0x148>
 801182c:	6106      	str	r6, [r0, #16]
 801182e:	b005      	add	sp, #20
 8011830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011834:	f843 2b04 	str.w	r2, [r3], #4
 8011838:	e7d8      	b.n	80117ec <__multiply+0x50>
 801183a:	f8b1 a000 	ldrh.w	sl, [r1]
 801183e:	f1ba 0f00 	cmp.w	sl, #0
 8011842:	d024      	beq.n	801188e <__multiply+0xf2>
 8011844:	f104 0e14 	add.w	lr, r4, #20
 8011848:	46a9      	mov	r9, r5
 801184a:	f04f 0c00 	mov.w	ip, #0
 801184e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011852:	f8d9 3000 	ldr.w	r3, [r9]
 8011856:	fa1f fb87 	uxth.w	fp, r7
 801185a:	b29b      	uxth	r3, r3
 801185c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011860:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011864:	f8d9 7000 	ldr.w	r7, [r9]
 8011868:	4463      	add	r3, ip
 801186a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801186e:	fb0a c70b 	mla	r7, sl, fp, ip
 8011872:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011876:	b29b      	uxth	r3, r3
 8011878:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801187c:	4572      	cmp	r2, lr
 801187e:	f849 3b04 	str.w	r3, [r9], #4
 8011882:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011886:	d8e2      	bhi.n	801184e <__multiply+0xb2>
 8011888:	9b01      	ldr	r3, [sp, #4]
 801188a:	f845 c003 	str.w	ip, [r5, r3]
 801188e:	9b03      	ldr	r3, [sp, #12]
 8011890:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011894:	3104      	adds	r1, #4
 8011896:	f1b9 0f00 	cmp.w	r9, #0
 801189a:	d021      	beq.n	80118e0 <__multiply+0x144>
 801189c:	682b      	ldr	r3, [r5, #0]
 801189e:	f104 0c14 	add.w	ip, r4, #20
 80118a2:	46ae      	mov	lr, r5
 80118a4:	f04f 0a00 	mov.w	sl, #0
 80118a8:	f8bc b000 	ldrh.w	fp, [ip]
 80118ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80118b0:	fb09 770b 	mla	r7, r9, fp, r7
 80118b4:	4457      	add	r7, sl
 80118b6:	b29b      	uxth	r3, r3
 80118b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80118bc:	f84e 3b04 	str.w	r3, [lr], #4
 80118c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80118c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118c8:	f8be 3000 	ldrh.w	r3, [lr]
 80118cc:	fb09 330a 	mla	r3, r9, sl, r3
 80118d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80118d4:	4562      	cmp	r2, ip
 80118d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118da:	d8e5      	bhi.n	80118a8 <__multiply+0x10c>
 80118dc:	9f01      	ldr	r7, [sp, #4]
 80118de:	51eb      	str	r3, [r5, r7]
 80118e0:	3504      	adds	r5, #4
 80118e2:	e799      	b.n	8011818 <__multiply+0x7c>
 80118e4:	3e01      	subs	r6, #1
 80118e6:	e79b      	b.n	8011820 <__multiply+0x84>
 80118e8:	080126bc 	.word	0x080126bc
 80118ec:	080126cd 	.word	0x080126cd

080118f0 <__pow5mult>:
 80118f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118f4:	4615      	mov	r5, r2
 80118f6:	f012 0203 	ands.w	r2, r2, #3
 80118fa:	4607      	mov	r7, r0
 80118fc:	460e      	mov	r6, r1
 80118fe:	d007      	beq.n	8011910 <__pow5mult+0x20>
 8011900:	4c25      	ldr	r4, [pc, #148]	@ (8011998 <__pow5mult+0xa8>)
 8011902:	3a01      	subs	r2, #1
 8011904:	2300      	movs	r3, #0
 8011906:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801190a:	f7ff fe9f 	bl	801164c <__multadd>
 801190e:	4606      	mov	r6, r0
 8011910:	10ad      	asrs	r5, r5, #2
 8011912:	d03d      	beq.n	8011990 <__pow5mult+0xa0>
 8011914:	69fc      	ldr	r4, [r7, #28]
 8011916:	b97c      	cbnz	r4, 8011938 <__pow5mult+0x48>
 8011918:	2010      	movs	r0, #16
 801191a:	f7ff fd7f 	bl	801141c <malloc>
 801191e:	4602      	mov	r2, r0
 8011920:	61f8      	str	r0, [r7, #28]
 8011922:	b928      	cbnz	r0, 8011930 <__pow5mult+0x40>
 8011924:	4b1d      	ldr	r3, [pc, #116]	@ (801199c <__pow5mult+0xac>)
 8011926:	481e      	ldr	r0, [pc, #120]	@ (80119a0 <__pow5mult+0xb0>)
 8011928:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801192c:	f000 fa6a 	bl	8011e04 <__assert_func>
 8011930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011934:	6004      	str	r4, [r0, #0]
 8011936:	60c4      	str	r4, [r0, #12]
 8011938:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801193c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011940:	b94c      	cbnz	r4, 8011956 <__pow5mult+0x66>
 8011942:	f240 2171 	movw	r1, #625	@ 0x271
 8011946:	4638      	mov	r0, r7
 8011948:	f7ff ff12 	bl	8011770 <__i2b>
 801194c:	2300      	movs	r3, #0
 801194e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011952:	4604      	mov	r4, r0
 8011954:	6003      	str	r3, [r0, #0]
 8011956:	f04f 0900 	mov.w	r9, #0
 801195a:	07eb      	lsls	r3, r5, #31
 801195c:	d50a      	bpl.n	8011974 <__pow5mult+0x84>
 801195e:	4631      	mov	r1, r6
 8011960:	4622      	mov	r2, r4
 8011962:	4638      	mov	r0, r7
 8011964:	f7ff ff1a 	bl	801179c <__multiply>
 8011968:	4631      	mov	r1, r6
 801196a:	4680      	mov	r8, r0
 801196c:	4638      	mov	r0, r7
 801196e:	f7ff fe4b 	bl	8011608 <_Bfree>
 8011972:	4646      	mov	r6, r8
 8011974:	106d      	asrs	r5, r5, #1
 8011976:	d00b      	beq.n	8011990 <__pow5mult+0xa0>
 8011978:	6820      	ldr	r0, [r4, #0]
 801197a:	b938      	cbnz	r0, 801198c <__pow5mult+0x9c>
 801197c:	4622      	mov	r2, r4
 801197e:	4621      	mov	r1, r4
 8011980:	4638      	mov	r0, r7
 8011982:	f7ff ff0b 	bl	801179c <__multiply>
 8011986:	6020      	str	r0, [r4, #0]
 8011988:	f8c0 9000 	str.w	r9, [r0]
 801198c:	4604      	mov	r4, r0
 801198e:	e7e4      	b.n	801195a <__pow5mult+0x6a>
 8011990:	4630      	mov	r0, r6
 8011992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011996:	bf00      	nop
 8011998:	08012728 	.word	0x08012728
 801199c:	0801264d 	.word	0x0801264d
 80119a0:	080126cd 	.word	0x080126cd

080119a4 <__lshift>:
 80119a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119a8:	460c      	mov	r4, r1
 80119aa:	6849      	ldr	r1, [r1, #4]
 80119ac:	6923      	ldr	r3, [r4, #16]
 80119ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80119b2:	68a3      	ldr	r3, [r4, #8]
 80119b4:	4607      	mov	r7, r0
 80119b6:	4691      	mov	r9, r2
 80119b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80119bc:	f108 0601 	add.w	r6, r8, #1
 80119c0:	42b3      	cmp	r3, r6
 80119c2:	db0b      	blt.n	80119dc <__lshift+0x38>
 80119c4:	4638      	mov	r0, r7
 80119c6:	f7ff fddf 	bl	8011588 <_Balloc>
 80119ca:	4605      	mov	r5, r0
 80119cc:	b948      	cbnz	r0, 80119e2 <__lshift+0x3e>
 80119ce:	4602      	mov	r2, r0
 80119d0:	4b28      	ldr	r3, [pc, #160]	@ (8011a74 <__lshift+0xd0>)
 80119d2:	4829      	ldr	r0, [pc, #164]	@ (8011a78 <__lshift+0xd4>)
 80119d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80119d8:	f000 fa14 	bl	8011e04 <__assert_func>
 80119dc:	3101      	adds	r1, #1
 80119de:	005b      	lsls	r3, r3, #1
 80119e0:	e7ee      	b.n	80119c0 <__lshift+0x1c>
 80119e2:	2300      	movs	r3, #0
 80119e4:	f100 0114 	add.w	r1, r0, #20
 80119e8:	f100 0210 	add.w	r2, r0, #16
 80119ec:	4618      	mov	r0, r3
 80119ee:	4553      	cmp	r3, sl
 80119f0:	db33      	blt.n	8011a5a <__lshift+0xb6>
 80119f2:	6920      	ldr	r0, [r4, #16]
 80119f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119f8:	f104 0314 	add.w	r3, r4, #20
 80119fc:	f019 091f 	ands.w	r9, r9, #31
 8011a00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011a08:	d02b      	beq.n	8011a62 <__lshift+0xbe>
 8011a0a:	f1c9 0e20 	rsb	lr, r9, #32
 8011a0e:	468a      	mov	sl, r1
 8011a10:	2200      	movs	r2, #0
 8011a12:	6818      	ldr	r0, [r3, #0]
 8011a14:	fa00 f009 	lsl.w	r0, r0, r9
 8011a18:	4310      	orrs	r0, r2
 8011a1a:	f84a 0b04 	str.w	r0, [sl], #4
 8011a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a22:	459c      	cmp	ip, r3
 8011a24:	fa22 f20e 	lsr.w	r2, r2, lr
 8011a28:	d8f3      	bhi.n	8011a12 <__lshift+0x6e>
 8011a2a:	ebac 0304 	sub.w	r3, ip, r4
 8011a2e:	3b15      	subs	r3, #21
 8011a30:	f023 0303 	bic.w	r3, r3, #3
 8011a34:	3304      	adds	r3, #4
 8011a36:	f104 0015 	add.w	r0, r4, #21
 8011a3a:	4584      	cmp	ip, r0
 8011a3c:	bf38      	it	cc
 8011a3e:	2304      	movcc	r3, #4
 8011a40:	50ca      	str	r2, [r1, r3]
 8011a42:	b10a      	cbz	r2, 8011a48 <__lshift+0xa4>
 8011a44:	f108 0602 	add.w	r6, r8, #2
 8011a48:	3e01      	subs	r6, #1
 8011a4a:	4638      	mov	r0, r7
 8011a4c:	612e      	str	r6, [r5, #16]
 8011a4e:	4621      	mov	r1, r4
 8011a50:	f7ff fdda 	bl	8011608 <_Bfree>
 8011a54:	4628      	mov	r0, r5
 8011a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a5e:	3301      	adds	r3, #1
 8011a60:	e7c5      	b.n	80119ee <__lshift+0x4a>
 8011a62:	3904      	subs	r1, #4
 8011a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a68:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a6c:	459c      	cmp	ip, r3
 8011a6e:	d8f9      	bhi.n	8011a64 <__lshift+0xc0>
 8011a70:	e7ea      	b.n	8011a48 <__lshift+0xa4>
 8011a72:	bf00      	nop
 8011a74:	080126bc 	.word	0x080126bc
 8011a78:	080126cd 	.word	0x080126cd

08011a7c <__mcmp>:
 8011a7c:	690a      	ldr	r2, [r1, #16]
 8011a7e:	4603      	mov	r3, r0
 8011a80:	6900      	ldr	r0, [r0, #16]
 8011a82:	1a80      	subs	r0, r0, r2
 8011a84:	b530      	push	{r4, r5, lr}
 8011a86:	d10e      	bne.n	8011aa6 <__mcmp+0x2a>
 8011a88:	3314      	adds	r3, #20
 8011a8a:	3114      	adds	r1, #20
 8011a8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011a90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011a94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011a98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011a9c:	4295      	cmp	r5, r2
 8011a9e:	d003      	beq.n	8011aa8 <__mcmp+0x2c>
 8011aa0:	d205      	bcs.n	8011aae <__mcmp+0x32>
 8011aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8011aa6:	bd30      	pop	{r4, r5, pc}
 8011aa8:	42a3      	cmp	r3, r4
 8011aaa:	d3f3      	bcc.n	8011a94 <__mcmp+0x18>
 8011aac:	e7fb      	b.n	8011aa6 <__mcmp+0x2a>
 8011aae:	2001      	movs	r0, #1
 8011ab0:	e7f9      	b.n	8011aa6 <__mcmp+0x2a>
	...

08011ab4 <__mdiff>:
 8011ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ab8:	4689      	mov	r9, r1
 8011aba:	4606      	mov	r6, r0
 8011abc:	4611      	mov	r1, r2
 8011abe:	4648      	mov	r0, r9
 8011ac0:	4614      	mov	r4, r2
 8011ac2:	f7ff ffdb 	bl	8011a7c <__mcmp>
 8011ac6:	1e05      	subs	r5, r0, #0
 8011ac8:	d112      	bne.n	8011af0 <__mdiff+0x3c>
 8011aca:	4629      	mov	r1, r5
 8011acc:	4630      	mov	r0, r6
 8011ace:	f7ff fd5b 	bl	8011588 <_Balloc>
 8011ad2:	4602      	mov	r2, r0
 8011ad4:	b928      	cbnz	r0, 8011ae2 <__mdiff+0x2e>
 8011ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8011bd4 <__mdiff+0x120>)
 8011ad8:	f240 2137 	movw	r1, #567	@ 0x237
 8011adc:	483e      	ldr	r0, [pc, #248]	@ (8011bd8 <__mdiff+0x124>)
 8011ade:	f000 f991 	bl	8011e04 <__assert_func>
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011ae8:	4610      	mov	r0, r2
 8011aea:	b003      	add	sp, #12
 8011aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011af0:	bfbc      	itt	lt
 8011af2:	464b      	movlt	r3, r9
 8011af4:	46a1      	movlt	r9, r4
 8011af6:	4630      	mov	r0, r6
 8011af8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011afc:	bfba      	itte	lt
 8011afe:	461c      	movlt	r4, r3
 8011b00:	2501      	movlt	r5, #1
 8011b02:	2500      	movge	r5, #0
 8011b04:	f7ff fd40 	bl	8011588 <_Balloc>
 8011b08:	4602      	mov	r2, r0
 8011b0a:	b918      	cbnz	r0, 8011b14 <__mdiff+0x60>
 8011b0c:	4b31      	ldr	r3, [pc, #196]	@ (8011bd4 <__mdiff+0x120>)
 8011b0e:	f240 2145 	movw	r1, #581	@ 0x245
 8011b12:	e7e3      	b.n	8011adc <__mdiff+0x28>
 8011b14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011b18:	6926      	ldr	r6, [r4, #16]
 8011b1a:	60c5      	str	r5, [r0, #12]
 8011b1c:	f109 0310 	add.w	r3, r9, #16
 8011b20:	f109 0514 	add.w	r5, r9, #20
 8011b24:	f104 0e14 	add.w	lr, r4, #20
 8011b28:	f100 0b14 	add.w	fp, r0, #20
 8011b2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011b30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011b34:	9301      	str	r3, [sp, #4]
 8011b36:	46d9      	mov	r9, fp
 8011b38:	f04f 0c00 	mov.w	ip, #0
 8011b3c:	9b01      	ldr	r3, [sp, #4]
 8011b3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011b42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011b46:	9301      	str	r3, [sp, #4]
 8011b48:	fa1f f38a 	uxth.w	r3, sl
 8011b4c:	4619      	mov	r1, r3
 8011b4e:	b283      	uxth	r3, r0
 8011b50:	1acb      	subs	r3, r1, r3
 8011b52:	0c00      	lsrs	r0, r0, #16
 8011b54:	4463      	add	r3, ip
 8011b56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011b5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011b64:	4576      	cmp	r6, lr
 8011b66:	f849 3b04 	str.w	r3, [r9], #4
 8011b6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b6e:	d8e5      	bhi.n	8011b3c <__mdiff+0x88>
 8011b70:	1b33      	subs	r3, r6, r4
 8011b72:	3b15      	subs	r3, #21
 8011b74:	f023 0303 	bic.w	r3, r3, #3
 8011b78:	3415      	adds	r4, #21
 8011b7a:	3304      	adds	r3, #4
 8011b7c:	42a6      	cmp	r6, r4
 8011b7e:	bf38      	it	cc
 8011b80:	2304      	movcc	r3, #4
 8011b82:	441d      	add	r5, r3
 8011b84:	445b      	add	r3, fp
 8011b86:	461e      	mov	r6, r3
 8011b88:	462c      	mov	r4, r5
 8011b8a:	4544      	cmp	r4, r8
 8011b8c:	d30e      	bcc.n	8011bac <__mdiff+0xf8>
 8011b8e:	f108 0103 	add.w	r1, r8, #3
 8011b92:	1b49      	subs	r1, r1, r5
 8011b94:	f021 0103 	bic.w	r1, r1, #3
 8011b98:	3d03      	subs	r5, #3
 8011b9a:	45a8      	cmp	r8, r5
 8011b9c:	bf38      	it	cc
 8011b9e:	2100      	movcc	r1, #0
 8011ba0:	440b      	add	r3, r1
 8011ba2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011ba6:	b191      	cbz	r1, 8011bce <__mdiff+0x11a>
 8011ba8:	6117      	str	r7, [r2, #16]
 8011baa:	e79d      	b.n	8011ae8 <__mdiff+0x34>
 8011bac:	f854 1b04 	ldr.w	r1, [r4], #4
 8011bb0:	46e6      	mov	lr, ip
 8011bb2:	0c08      	lsrs	r0, r1, #16
 8011bb4:	fa1c fc81 	uxtah	ip, ip, r1
 8011bb8:	4471      	add	r1, lr
 8011bba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011bbe:	b289      	uxth	r1, r1
 8011bc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011bc4:	f846 1b04 	str.w	r1, [r6], #4
 8011bc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011bcc:	e7dd      	b.n	8011b8a <__mdiff+0xd6>
 8011bce:	3f01      	subs	r7, #1
 8011bd0:	e7e7      	b.n	8011ba2 <__mdiff+0xee>
 8011bd2:	bf00      	nop
 8011bd4:	080126bc 	.word	0x080126bc
 8011bd8:	080126cd 	.word	0x080126cd

08011bdc <__d2b>:
 8011bdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011be0:	460f      	mov	r7, r1
 8011be2:	2101      	movs	r1, #1
 8011be4:	ec59 8b10 	vmov	r8, r9, d0
 8011be8:	4616      	mov	r6, r2
 8011bea:	f7ff fccd 	bl	8011588 <_Balloc>
 8011bee:	4604      	mov	r4, r0
 8011bf0:	b930      	cbnz	r0, 8011c00 <__d2b+0x24>
 8011bf2:	4602      	mov	r2, r0
 8011bf4:	4b23      	ldr	r3, [pc, #140]	@ (8011c84 <__d2b+0xa8>)
 8011bf6:	4824      	ldr	r0, [pc, #144]	@ (8011c88 <__d2b+0xac>)
 8011bf8:	f240 310f 	movw	r1, #783	@ 0x30f
 8011bfc:	f000 f902 	bl	8011e04 <__assert_func>
 8011c00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c08:	b10d      	cbz	r5, 8011c0e <__d2b+0x32>
 8011c0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c0e:	9301      	str	r3, [sp, #4]
 8011c10:	f1b8 0300 	subs.w	r3, r8, #0
 8011c14:	d023      	beq.n	8011c5e <__d2b+0x82>
 8011c16:	4668      	mov	r0, sp
 8011c18:	9300      	str	r3, [sp, #0]
 8011c1a:	f7ff fd7c 	bl	8011716 <__lo0bits>
 8011c1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011c22:	b1d0      	cbz	r0, 8011c5a <__d2b+0x7e>
 8011c24:	f1c0 0320 	rsb	r3, r0, #32
 8011c28:	fa02 f303 	lsl.w	r3, r2, r3
 8011c2c:	430b      	orrs	r3, r1
 8011c2e:	40c2      	lsrs	r2, r0
 8011c30:	6163      	str	r3, [r4, #20]
 8011c32:	9201      	str	r2, [sp, #4]
 8011c34:	9b01      	ldr	r3, [sp, #4]
 8011c36:	61a3      	str	r3, [r4, #24]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	bf0c      	ite	eq
 8011c3c:	2201      	moveq	r2, #1
 8011c3e:	2202      	movne	r2, #2
 8011c40:	6122      	str	r2, [r4, #16]
 8011c42:	b1a5      	cbz	r5, 8011c6e <__d2b+0x92>
 8011c44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011c48:	4405      	add	r5, r0
 8011c4a:	603d      	str	r5, [r7, #0]
 8011c4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011c50:	6030      	str	r0, [r6, #0]
 8011c52:	4620      	mov	r0, r4
 8011c54:	b003      	add	sp, #12
 8011c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c5a:	6161      	str	r1, [r4, #20]
 8011c5c:	e7ea      	b.n	8011c34 <__d2b+0x58>
 8011c5e:	a801      	add	r0, sp, #4
 8011c60:	f7ff fd59 	bl	8011716 <__lo0bits>
 8011c64:	9b01      	ldr	r3, [sp, #4]
 8011c66:	6163      	str	r3, [r4, #20]
 8011c68:	3020      	adds	r0, #32
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	e7e8      	b.n	8011c40 <__d2b+0x64>
 8011c6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011c72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011c76:	6038      	str	r0, [r7, #0]
 8011c78:	6918      	ldr	r0, [r3, #16]
 8011c7a:	f7ff fd2d 	bl	80116d8 <__hi0bits>
 8011c7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011c82:	e7e5      	b.n	8011c50 <__d2b+0x74>
 8011c84:	080126bc 	.word	0x080126bc
 8011c88:	080126cd 	.word	0x080126cd

08011c8c <__sflush_r>:
 8011c8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c94:	0716      	lsls	r6, r2, #28
 8011c96:	4605      	mov	r5, r0
 8011c98:	460c      	mov	r4, r1
 8011c9a:	d454      	bmi.n	8011d46 <__sflush_r+0xba>
 8011c9c:	684b      	ldr	r3, [r1, #4]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	dc02      	bgt.n	8011ca8 <__sflush_r+0x1c>
 8011ca2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	dd48      	ble.n	8011d3a <__sflush_r+0xae>
 8011ca8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011caa:	2e00      	cmp	r6, #0
 8011cac:	d045      	beq.n	8011d3a <__sflush_r+0xae>
 8011cae:	2300      	movs	r3, #0
 8011cb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011cb4:	682f      	ldr	r7, [r5, #0]
 8011cb6:	6a21      	ldr	r1, [r4, #32]
 8011cb8:	602b      	str	r3, [r5, #0]
 8011cba:	d030      	beq.n	8011d1e <__sflush_r+0x92>
 8011cbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011cbe:	89a3      	ldrh	r3, [r4, #12]
 8011cc0:	0759      	lsls	r1, r3, #29
 8011cc2:	d505      	bpl.n	8011cd0 <__sflush_r+0x44>
 8011cc4:	6863      	ldr	r3, [r4, #4]
 8011cc6:	1ad2      	subs	r2, r2, r3
 8011cc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011cca:	b10b      	cbz	r3, 8011cd0 <__sflush_r+0x44>
 8011ccc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011cce:	1ad2      	subs	r2, r2, r3
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011cd4:	6a21      	ldr	r1, [r4, #32]
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	47b0      	blx	r6
 8011cda:	1c43      	adds	r3, r0, #1
 8011cdc:	89a3      	ldrh	r3, [r4, #12]
 8011cde:	d106      	bne.n	8011cee <__sflush_r+0x62>
 8011ce0:	6829      	ldr	r1, [r5, #0]
 8011ce2:	291d      	cmp	r1, #29
 8011ce4:	d82b      	bhi.n	8011d3e <__sflush_r+0xb2>
 8011ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8011d90 <__sflush_r+0x104>)
 8011ce8:	410a      	asrs	r2, r1
 8011cea:	07d6      	lsls	r6, r2, #31
 8011cec:	d427      	bmi.n	8011d3e <__sflush_r+0xb2>
 8011cee:	2200      	movs	r2, #0
 8011cf0:	6062      	str	r2, [r4, #4]
 8011cf2:	04d9      	lsls	r1, r3, #19
 8011cf4:	6922      	ldr	r2, [r4, #16]
 8011cf6:	6022      	str	r2, [r4, #0]
 8011cf8:	d504      	bpl.n	8011d04 <__sflush_r+0x78>
 8011cfa:	1c42      	adds	r2, r0, #1
 8011cfc:	d101      	bne.n	8011d02 <__sflush_r+0x76>
 8011cfe:	682b      	ldr	r3, [r5, #0]
 8011d00:	b903      	cbnz	r3, 8011d04 <__sflush_r+0x78>
 8011d02:	6560      	str	r0, [r4, #84]	@ 0x54
 8011d04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d06:	602f      	str	r7, [r5, #0]
 8011d08:	b1b9      	cbz	r1, 8011d3a <__sflush_r+0xae>
 8011d0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d0e:	4299      	cmp	r1, r3
 8011d10:	d002      	beq.n	8011d18 <__sflush_r+0x8c>
 8011d12:	4628      	mov	r0, r5
 8011d14:	f7ff fb38 	bl	8011388 <_free_r>
 8011d18:	2300      	movs	r3, #0
 8011d1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d1c:	e00d      	b.n	8011d3a <__sflush_r+0xae>
 8011d1e:	2301      	movs	r3, #1
 8011d20:	4628      	mov	r0, r5
 8011d22:	47b0      	blx	r6
 8011d24:	4602      	mov	r2, r0
 8011d26:	1c50      	adds	r0, r2, #1
 8011d28:	d1c9      	bne.n	8011cbe <__sflush_r+0x32>
 8011d2a:	682b      	ldr	r3, [r5, #0]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d0c6      	beq.n	8011cbe <__sflush_r+0x32>
 8011d30:	2b1d      	cmp	r3, #29
 8011d32:	d001      	beq.n	8011d38 <__sflush_r+0xac>
 8011d34:	2b16      	cmp	r3, #22
 8011d36:	d11e      	bne.n	8011d76 <__sflush_r+0xea>
 8011d38:	602f      	str	r7, [r5, #0]
 8011d3a:	2000      	movs	r0, #0
 8011d3c:	e022      	b.n	8011d84 <__sflush_r+0xf8>
 8011d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d42:	b21b      	sxth	r3, r3
 8011d44:	e01b      	b.n	8011d7e <__sflush_r+0xf2>
 8011d46:	690f      	ldr	r7, [r1, #16]
 8011d48:	2f00      	cmp	r7, #0
 8011d4a:	d0f6      	beq.n	8011d3a <__sflush_r+0xae>
 8011d4c:	0793      	lsls	r3, r2, #30
 8011d4e:	680e      	ldr	r6, [r1, #0]
 8011d50:	bf08      	it	eq
 8011d52:	694b      	ldreq	r3, [r1, #20]
 8011d54:	600f      	str	r7, [r1, #0]
 8011d56:	bf18      	it	ne
 8011d58:	2300      	movne	r3, #0
 8011d5a:	eba6 0807 	sub.w	r8, r6, r7
 8011d5e:	608b      	str	r3, [r1, #8]
 8011d60:	f1b8 0f00 	cmp.w	r8, #0
 8011d64:	dde9      	ble.n	8011d3a <__sflush_r+0xae>
 8011d66:	6a21      	ldr	r1, [r4, #32]
 8011d68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011d6a:	4643      	mov	r3, r8
 8011d6c:	463a      	mov	r2, r7
 8011d6e:	4628      	mov	r0, r5
 8011d70:	47b0      	blx	r6
 8011d72:	2800      	cmp	r0, #0
 8011d74:	dc08      	bgt.n	8011d88 <__sflush_r+0xfc>
 8011d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d7e:	81a3      	strh	r3, [r4, #12]
 8011d80:	f04f 30ff 	mov.w	r0, #4294967295
 8011d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d88:	4407      	add	r7, r0
 8011d8a:	eba8 0800 	sub.w	r8, r8, r0
 8011d8e:	e7e7      	b.n	8011d60 <__sflush_r+0xd4>
 8011d90:	dfbffffe 	.word	0xdfbffffe

08011d94 <_fflush_r>:
 8011d94:	b538      	push	{r3, r4, r5, lr}
 8011d96:	690b      	ldr	r3, [r1, #16]
 8011d98:	4605      	mov	r5, r0
 8011d9a:	460c      	mov	r4, r1
 8011d9c:	b913      	cbnz	r3, 8011da4 <_fflush_r+0x10>
 8011d9e:	2500      	movs	r5, #0
 8011da0:	4628      	mov	r0, r5
 8011da2:	bd38      	pop	{r3, r4, r5, pc}
 8011da4:	b118      	cbz	r0, 8011dae <_fflush_r+0x1a>
 8011da6:	6a03      	ldr	r3, [r0, #32]
 8011da8:	b90b      	cbnz	r3, 8011dae <_fflush_r+0x1a>
 8011daa:	f7fe fb41 	bl	8010430 <__sinit>
 8011dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d0f3      	beq.n	8011d9e <_fflush_r+0xa>
 8011db6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011db8:	07d0      	lsls	r0, r2, #31
 8011dba:	d404      	bmi.n	8011dc6 <_fflush_r+0x32>
 8011dbc:	0599      	lsls	r1, r3, #22
 8011dbe:	d402      	bmi.n	8011dc6 <_fflush_r+0x32>
 8011dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011dc2:	f7fe fc82 	bl	80106ca <__retarget_lock_acquire_recursive>
 8011dc6:	4628      	mov	r0, r5
 8011dc8:	4621      	mov	r1, r4
 8011dca:	f7ff ff5f 	bl	8011c8c <__sflush_r>
 8011dce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011dd0:	07da      	lsls	r2, r3, #31
 8011dd2:	4605      	mov	r5, r0
 8011dd4:	d4e4      	bmi.n	8011da0 <_fflush_r+0xc>
 8011dd6:	89a3      	ldrh	r3, [r4, #12]
 8011dd8:	059b      	lsls	r3, r3, #22
 8011dda:	d4e1      	bmi.n	8011da0 <_fflush_r+0xc>
 8011ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011dde:	f7fe fc75 	bl	80106cc <__retarget_lock_release_recursive>
 8011de2:	e7dd      	b.n	8011da0 <_fflush_r+0xc>

08011de4 <_sbrk_r>:
 8011de4:	b538      	push	{r3, r4, r5, lr}
 8011de6:	4d06      	ldr	r5, [pc, #24]	@ (8011e00 <_sbrk_r+0x1c>)
 8011de8:	2300      	movs	r3, #0
 8011dea:	4604      	mov	r4, r0
 8011dec:	4608      	mov	r0, r1
 8011dee:	602b      	str	r3, [r5, #0]
 8011df0:	f7f1 f81e 	bl	8002e30 <_sbrk>
 8011df4:	1c43      	adds	r3, r0, #1
 8011df6:	d102      	bne.n	8011dfe <_sbrk_r+0x1a>
 8011df8:	682b      	ldr	r3, [r5, #0]
 8011dfa:	b103      	cbz	r3, 8011dfe <_sbrk_r+0x1a>
 8011dfc:	6023      	str	r3, [r4, #0]
 8011dfe:	bd38      	pop	{r3, r4, r5, pc}
 8011e00:	200046b8 	.word	0x200046b8

08011e04 <__assert_func>:
 8011e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e06:	4614      	mov	r4, r2
 8011e08:	461a      	mov	r2, r3
 8011e0a:	4b09      	ldr	r3, [pc, #36]	@ (8011e30 <__assert_func+0x2c>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	4605      	mov	r5, r0
 8011e10:	68d8      	ldr	r0, [r3, #12]
 8011e12:	b954      	cbnz	r4, 8011e2a <__assert_func+0x26>
 8011e14:	4b07      	ldr	r3, [pc, #28]	@ (8011e34 <__assert_func+0x30>)
 8011e16:	461c      	mov	r4, r3
 8011e18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e1c:	9100      	str	r1, [sp, #0]
 8011e1e:	462b      	mov	r3, r5
 8011e20:	4905      	ldr	r1, [pc, #20]	@ (8011e38 <__assert_func+0x34>)
 8011e22:	f000 f841 	bl	8011ea8 <fiprintf>
 8011e26:	f000 f851 	bl	8011ecc <abort>
 8011e2a:	4b04      	ldr	r3, [pc, #16]	@ (8011e3c <__assert_func+0x38>)
 8011e2c:	e7f4      	b.n	8011e18 <__assert_func+0x14>
 8011e2e:	bf00      	nop
 8011e30:	20000124 	.word	0x20000124
 8011e34:	0801286d 	.word	0x0801286d
 8011e38:	0801283f 	.word	0x0801283f
 8011e3c:	08012832 	.word	0x08012832

08011e40 <_calloc_r>:
 8011e40:	b570      	push	{r4, r5, r6, lr}
 8011e42:	fba1 5402 	umull	r5, r4, r1, r2
 8011e46:	b93c      	cbnz	r4, 8011e58 <_calloc_r+0x18>
 8011e48:	4629      	mov	r1, r5
 8011e4a:	f7ff fb11 	bl	8011470 <_malloc_r>
 8011e4e:	4606      	mov	r6, r0
 8011e50:	b928      	cbnz	r0, 8011e5e <_calloc_r+0x1e>
 8011e52:	2600      	movs	r6, #0
 8011e54:	4630      	mov	r0, r6
 8011e56:	bd70      	pop	{r4, r5, r6, pc}
 8011e58:	220c      	movs	r2, #12
 8011e5a:	6002      	str	r2, [r0, #0]
 8011e5c:	e7f9      	b.n	8011e52 <_calloc_r+0x12>
 8011e5e:	462a      	mov	r2, r5
 8011e60:	4621      	mov	r1, r4
 8011e62:	f7fe fb5e 	bl	8010522 <memset>
 8011e66:	e7f5      	b.n	8011e54 <_calloc_r+0x14>

08011e68 <__ascii_mbtowc>:
 8011e68:	b082      	sub	sp, #8
 8011e6a:	b901      	cbnz	r1, 8011e6e <__ascii_mbtowc+0x6>
 8011e6c:	a901      	add	r1, sp, #4
 8011e6e:	b142      	cbz	r2, 8011e82 <__ascii_mbtowc+0x1a>
 8011e70:	b14b      	cbz	r3, 8011e86 <__ascii_mbtowc+0x1e>
 8011e72:	7813      	ldrb	r3, [r2, #0]
 8011e74:	600b      	str	r3, [r1, #0]
 8011e76:	7812      	ldrb	r2, [r2, #0]
 8011e78:	1e10      	subs	r0, r2, #0
 8011e7a:	bf18      	it	ne
 8011e7c:	2001      	movne	r0, #1
 8011e7e:	b002      	add	sp, #8
 8011e80:	4770      	bx	lr
 8011e82:	4610      	mov	r0, r2
 8011e84:	e7fb      	b.n	8011e7e <__ascii_mbtowc+0x16>
 8011e86:	f06f 0001 	mvn.w	r0, #1
 8011e8a:	e7f8      	b.n	8011e7e <__ascii_mbtowc+0x16>

08011e8c <__ascii_wctomb>:
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	4608      	mov	r0, r1
 8011e90:	b141      	cbz	r1, 8011ea4 <__ascii_wctomb+0x18>
 8011e92:	2aff      	cmp	r2, #255	@ 0xff
 8011e94:	d904      	bls.n	8011ea0 <__ascii_wctomb+0x14>
 8011e96:	228a      	movs	r2, #138	@ 0x8a
 8011e98:	601a      	str	r2, [r3, #0]
 8011e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e9e:	4770      	bx	lr
 8011ea0:	700a      	strb	r2, [r1, #0]
 8011ea2:	2001      	movs	r0, #1
 8011ea4:	4770      	bx	lr
	...

08011ea8 <fiprintf>:
 8011ea8:	b40e      	push	{r1, r2, r3}
 8011eaa:	b503      	push	{r0, r1, lr}
 8011eac:	4601      	mov	r1, r0
 8011eae:	ab03      	add	r3, sp, #12
 8011eb0:	4805      	ldr	r0, [pc, #20]	@ (8011ec8 <fiprintf+0x20>)
 8011eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011eb6:	6800      	ldr	r0, [r0, #0]
 8011eb8:	9301      	str	r3, [sp, #4]
 8011eba:	f000 f837 	bl	8011f2c <_vfiprintf_r>
 8011ebe:	b002      	add	sp, #8
 8011ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ec4:	b003      	add	sp, #12
 8011ec6:	4770      	bx	lr
 8011ec8:	20000124 	.word	0x20000124

08011ecc <abort>:
 8011ecc:	b508      	push	{r3, lr}
 8011ece:	2006      	movs	r0, #6
 8011ed0:	f000 fa00 	bl	80122d4 <raise>
 8011ed4:	2001      	movs	r0, #1
 8011ed6:	f7f0 ff33 	bl	8002d40 <_exit>

08011eda <__sfputc_r>:
 8011eda:	6893      	ldr	r3, [r2, #8]
 8011edc:	3b01      	subs	r3, #1
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	b410      	push	{r4}
 8011ee2:	6093      	str	r3, [r2, #8]
 8011ee4:	da08      	bge.n	8011ef8 <__sfputc_r+0x1e>
 8011ee6:	6994      	ldr	r4, [r2, #24]
 8011ee8:	42a3      	cmp	r3, r4
 8011eea:	db01      	blt.n	8011ef0 <__sfputc_r+0x16>
 8011eec:	290a      	cmp	r1, #10
 8011eee:	d103      	bne.n	8011ef8 <__sfputc_r+0x1e>
 8011ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ef4:	f000 b932 	b.w	801215c <__swbuf_r>
 8011ef8:	6813      	ldr	r3, [r2, #0]
 8011efa:	1c58      	adds	r0, r3, #1
 8011efc:	6010      	str	r0, [r2, #0]
 8011efe:	7019      	strb	r1, [r3, #0]
 8011f00:	4608      	mov	r0, r1
 8011f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f06:	4770      	bx	lr

08011f08 <__sfputs_r>:
 8011f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f0a:	4606      	mov	r6, r0
 8011f0c:	460f      	mov	r7, r1
 8011f0e:	4614      	mov	r4, r2
 8011f10:	18d5      	adds	r5, r2, r3
 8011f12:	42ac      	cmp	r4, r5
 8011f14:	d101      	bne.n	8011f1a <__sfputs_r+0x12>
 8011f16:	2000      	movs	r0, #0
 8011f18:	e007      	b.n	8011f2a <__sfputs_r+0x22>
 8011f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f1e:	463a      	mov	r2, r7
 8011f20:	4630      	mov	r0, r6
 8011f22:	f7ff ffda 	bl	8011eda <__sfputc_r>
 8011f26:	1c43      	adds	r3, r0, #1
 8011f28:	d1f3      	bne.n	8011f12 <__sfputs_r+0xa>
 8011f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011f2c <_vfiprintf_r>:
 8011f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f30:	460d      	mov	r5, r1
 8011f32:	b09d      	sub	sp, #116	@ 0x74
 8011f34:	4614      	mov	r4, r2
 8011f36:	4698      	mov	r8, r3
 8011f38:	4606      	mov	r6, r0
 8011f3a:	b118      	cbz	r0, 8011f44 <_vfiprintf_r+0x18>
 8011f3c:	6a03      	ldr	r3, [r0, #32]
 8011f3e:	b90b      	cbnz	r3, 8011f44 <_vfiprintf_r+0x18>
 8011f40:	f7fe fa76 	bl	8010430 <__sinit>
 8011f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f46:	07d9      	lsls	r1, r3, #31
 8011f48:	d405      	bmi.n	8011f56 <_vfiprintf_r+0x2a>
 8011f4a:	89ab      	ldrh	r3, [r5, #12]
 8011f4c:	059a      	lsls	r2, r3, #22
 8011f4e:	d402      	bmi.n	8011f56 <_vfiprintf_r+0x2a>
 8011f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f52:	f7fe fbba 	bl	80106ca <__retarget_lock_acquire_recursive>
 8011f56:	89ab      	ldrh	r3, [r5, #12]
 8011f58:	071b      	lsls	r3, r3, #28
 8011f5a:	d501      	bpl.n	8011f60 <_vfiprintf_r+0x34>
 8011f5c:	692b      	ldr	r3, [r5, #16]
 8011f5e:	b99b      	cbnz	r3, 8011f88 <_vfiprintf_r+0x5c>
 8011f60:	4629      	mov	r1, r5
 8011f62:	4630      	mov	r0, r6
 8011f64:	f000 f938 	bl	80121d8 <__swsetup_r>
 8011f68:	b170      	cbz	r0, 8011f88 <_vfiprintf_r+0x5c>
 8011f6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f6c:	07dc      	lsls	r4, r3, #31
 8011f6e:	d504      	bpl.n	8011f7a <_vfiprintf_r+0x4e>
 8011f70:	f04f 30ff 	mov.w	r0, #4294967295
 8011f74:	b01d      	add	sp, #116	@ 0x74
 8011f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f7a:	89ab      	ldrh	r3, [r5, #12]
 8011f7c:	0598      	lsls	r0, r3, #22
 8011f7e:	d4f7      	bmi.n	8011f70 <_vfiprintf_r+0x44>
 8011f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f82:	f7fe fba3 	bl	80106cc <__retarget_lock_release_recursive>
 8011f86:	e7f3      	b.n	8011f70 <_vfiprintf_r+0x44>
 8011f88:	2300      	movs	r3, #0
 8011f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f8c:	2320      	movs	r3, #32
 8011f8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f96:	2330      	movs	r3, #48	@ 0x30
 8011f98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012148 <_vfiprintf_r+0x21c>
 8011f9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011fa0:	f04f 0901 	mov.w	r9, #1
 8011fa4:	4623      	mov	r3, r4
 8011fa6:	469a      	mov	sl, r3
 8011fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fac:	b10a      	cbz	r2, 8011fb2 <_vfiprintf_r+0x86>
 8011fae:	2a25      	cmp	r2, #37	@ 0x25
 8011fb0:	d1f9      	bne.n	8011fa6 <_vfiprintf_r+0x7a>
 8011fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8011fb6:	d00b      	beq.n	8011fd0 <_vfiprintf_r+0xa4>
 8011fb8:	465b      	mov	r3, fp
 8011fba:	4622      	mov	r2, r4
 8011fbc:	4629      	mov	r1, r5
 8011fbe:	4630      	mov	r0, r6
 8011fc0:	f7ff ffa2 	bl	8011f08 <__sfputs_r>
 8011fc4:	3001      	adds	r0, #1
 8011fc6:	f000 80a7 	beq.w	8012118 <_vfiprintf_r+0x1ec>
 8011fca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011fcc:	445a      	add	r2, fp
 8011fce:	9209      	str	r2, [sp, #36]	@ 0x24
 8011fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	f000 809f 	beq.w	8012118 <_vfiprintf_r+0x1ec>
 8011fda:	2300      	movs	r3, #0
 8011fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8011fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fe4:	f10a 0a01 	add.w	sl, sl, #1
 8011fe8:	9304      	str	r3, [sp, #16]
 8011fea:	9307      	str	r3, [sp, #28]
 8011fec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ff0:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ff2:	4654      	mov	r4, sl
 8011ff4:	2205      	movs	r2, #5
 8011ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ffa:	4853      	ldr	r0, [pc, #332]	@ (8012148 <_vfiprintf_r+0x21c>)
 8011ffc:	f7ee f8f8 	bl	80001f0 <memchr>
 8012000:	9a04      	ldr	r2, [sp, #16]
 8012002:	b9d8      	cbnz	r0, 801203c <_vfiprintf_r+0x110>
 8012004:	06d1      	lsls	r1, r2, #27
 8012006:	bf44      	itt	mi
 8012008:	2320      	movmi	r3, #32
 801200a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801200e:	0713      	lsls	r3, r2, #28
 8012010:	bf44      	itt	mi
 8012012:	232b      	movmi	r3, #43	@ 0x2b
 8012014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012018:	f89a 3000 	ldrb.w	r3, [sl]
 801201c:	2b2a      	cmp	r3, #42	@ 0x2a
 801201e:	d015      	beq.n	801204c <_vfiprintf_r+0x120>
 8012020:	9a07      	ldr	r2, [sp, #28]
 8012022:	4654      	mov	r4, sl
 8012024:	2000      	movs	r0, #0
 8012026:	f04f 0c0a 	mov.w	ip, #10
 801202a:	4621      	mov	r1, r4
 801202c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012030:	3b30      	subs	r3, #48	@ 0x30
 8012032:	2b09      	cmp	r3, #9
 8012034:	d94b      	bls.n	80120ce <_vfiprintf_r+0x1a2>
 8012036:	b1b0      	cbz	r0, 8012066 <_vfiprintf_r+0x13a>
 8012038:	9207      	str	r2, [sp, #28]
 801203a:	e014      	b.n	8012066 <_vfiprintf_r+0x13a>
 801203c:	eba0 0308 	sub.w	r3, r0, r8
 8012040:	fa09 f303 	lsl.w	r3, r9, r3
 8012044:	4313      	orrs	r3, r2
 8012046:	9304      	str	r3, [sp, #16]
 8012048:	46a2      	mov	sl, r4
 801204a:	e7d2      	b.n	8011ff2 <_vfiprintf_r+0xc6>
 801204c:	9b03      	ldr	r3, [sp, #12]
 801204e:	1d19      	adds	r1, r3, #4
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	9103      	str	r1, [sp, #12]
 8012054:	2b00      	cmp	r3, #0
 8012056:	bfbb      	ittet	lt
 8012058:	425b      	neglt	r3, r3
 801205a:	f042 0202 	orrlt.w	r2, r2, #2
 801205e:	9307      	strge	r3, [sp, #28]
 8012060:	9307      	strlt	r3, [sp, #28]
 8012062:	bfb8      	it	lt
 8012064:	9204      	strlt	r2, [sp, #16]
 8012066:	7823      	ldrb	r3, [r4, #0]
 8012068:	2b2e      	cmp	r3, #46	@ 0x2e
 801206a:	d10a      	bne.n	8012082 <_vfiprintf_r+0x156>
 801206c:	7863      	ldrb	r3, [r4, #1]
 801206e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012070:	d132      	bne.n	80120d8 <_vfiprintf_r+0x1ac>
 8012072:	9b03      	ldr	r3, [sp, #12]
 8012074:	1d1a      	adds	r2, r3, #4
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	9203      	str	r2, [sp, #12]
 801207a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801207e:	3402      	adds	r4, #2
 8012080:	9305      	str	r3, [sp, #20]
 8012082:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012158 <_vfiprintf_r+0x22c>
 8012086:	7821      	ldrb	r1, [r4, #0]
 8012088:	2203      	movs	r2, #3
 801208a:	4650      	mov	r0, sl
 801208c:	f7ee f8b0 	bl	80001f0 <memchr>
 8012090:	b138      	cbz	r0, 80120a2 <_vfiprintf_r+0x176>
 8012092:	9b04      	ldr	r3, [sp, #16]
 8012094:	eba0 000a 	sub.w	r0, r0, sl
 8012098:	2240      	movs	r2, #64	@ 0x40
 801209a:	4082      	lsls	r2, r0
 801209c:	4313      	orrs	r3, r2
 801209e:	3401      	adds	r4, #1
 80120a0:	9304      	str	r3, [sp, #16]
 80120a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120a6:	4829      	ldr	r0, [pc, #164]	@ (801214c <_vfiprintf_r+0x220>)
 80120a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80120ac:	2206      	movs	r2, #6
 80120ae:	f7ee f89f 	bl	80001f0 <memchr>
 80120b2:	2800      	cmp	r0, #0
 80120b4:	d03f      	beq.n	8012136 <_vfiprintf_r+0x20a>
 80120b6:	4b26      	ldr	r3, [pc, #152]	@ (8012150 <_vfiprintf_r+0x224>)
 80120b8:	bb1b      	cbnz	r3, 8012102 <_vfiprintf_r+0x1d6>
 80120ba:	9b03      	ldr	r3, [sp, #12]
 80120bc:	3307      	adds	r3, #7
 80120be:	f023 0307 	bic.w	r3, r3, #7
 80120c2:	3308      	adds	r3, #8
 80120c4:	9303      	str	r3, [sp, #12]
 80120c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120c8:	443b      	add	r3, r7
 80120ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80120cc:	e76a      	b.n	8011fa4 <_vfiprintf_r+0x78>
 80120ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80120d2:	460c      	mov	r4, r1
 80120d4:	2001      	movs	r0, #1
 80120d6:	e7a8      	b.n	801202a <_vfiprintf_r+0xfe>
 80120d8:	2300      	movs	r3, #0
 80120da:	3401      	adds	r4, #1
 80120dc:	9305      	str	r3, [sp, #20]
 80120de:	4619      	mov	r1, r3
 80120e0:	f04f 0c0a 	mov.w	ip, #10
 80120e4:	4620      	mov	r0, r4
 80120e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120ea:	3a30      	subs	r2, #48	@ 0x30
 80120ec:	2a09      	cmp	r2, #9
 80120ee:	d903      	bls.n	80120f8 <_vfiprintf_r+0x1cc>
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d0c6      	beq.n	8012082 <_vfiprintf_r+0x156>
 80120f4:	9105      	str	r1, [sp, #20]
 80120f6:	e7c4      	b.n	8012082 <_vfiprintf_r+0x156>
 80120f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80120fc:	4604      	mov	r4, r0
 80120fe:	2301      	movs	r3, #1
 8012100:	e7f0      	b.n	80120e4 <_vfiprintf_r+0x1b8>
 8012102:	ab03      	add	r3, sp, #12
 8012104:	9300      	str	r3, [sp, #0]
 8012106:	462a      	mov	r2, r5
 8012108:	4b12      	ldr	r3, [pc, #72]	@ (8012154 <_vfiprintf_r+0x228>)
 801210a:	a904      	add	r1, sp, #16
 801210c:	4630      	mov	r0, r6
 801210e:	f7fd fd4b 	bl	800fba8 <_printf_float>
 8012112:	4607      	mov	r7, r0
 8012114:	1c78      	adds	r0, r7, #1
 8012116:	d1d6      	bne.n	80120c6 <_vfiprintf_r+0x19a>
 8012118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801211a:	07d9      	lsls	r1, r3, #31
 801211c:	d405      	bmi.n	801212a <_vfiprintf_r+0x1fe>
 801211e:	89ab      	ldrh	r3, [r5, #12]
 8012120:	059a      	lsls	r2, r3, #22
 8012122:	d402      	bmi.n	801212a <_vfiprintf_r+0x1fe>
 8012124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012126:	f7fe fad1 	bl	80106cc <__retarget_lock_release_recursive>
 801212a:	89ab      	ldrh	r3, [r5, #12]
 801212c:	065b      	lsls	r3, r3, #25
 801212e:	f53f af1f 	bmi.w	8011f70 <_vfiprintf_r+0x44>
 8012132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012134:	e71e      	b.n	8011f74 <_vfiprintf_r+0x48>
 8012136:	ab03      	add	r3, sp, #12
 8012138:	9300      	str	r3, [sp, #0]
 801213a:	462a      	mov	r2, r5
 801213c:	4b05      	ldr	r3, [pc, #20]	@ (8012154 <_vfiprintf_r+0x228>)
 801213e:	a904      	add	r1, sp, #16
 8012140:	4630      	mov	r0, r6
 8012142:	f7fd ffc9 	bl	80100d8 <_printf_i>
 8012146:	e7e4      	b.n	8012112 <_vfiprintf_r+0x1e6>
 8012148:	0801296f 	.word	0x0801296f
 801214c:	08012979 	.word	0x08012979
 8012150:	0800fba9 	.word	0x0800fba9
 8012154:	08011f09 	.word	0x08011f09
 8012158:	08012975 	.word	0x08012975

0801215c <__swbuf_r>:
 801215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801215e:	460e      	mov	r6, r1
 8012160:	4614      	mov	r4, r2
 8012162:	4605      	mov	r5, r0
 8012164:	b118      	cbz	r0, 801216e <__swbuf_r+0x12>
 8012166:	6a03      	ldr	r3, [r0, #32]
 8012168:	b90b      	cbnz	r3, 801216e <__swbuf_r+0x12>
 801216a:	f7fe f961 	bl	8010430 <__sinit>
 801216e:	69a3      	ldr	r3, [r4, #24]
 8012170:	60a3      	str	r3, [r4, #8]
 8012172:	89a3      	ldrh	r3, [r4, #12]
 8012174:	071a      	lsls	r2, r3, #28
 8012176:	d501      	bpl.n	801217c <__swbuf_r+0x20>
 8012178:	6923      	ldr	r3, [r4, #16]
 801217a:	b943      	cbnz	r3, 801218e <__swbuf_r+0x32>
 801217c:	4621      	mov	r1, r4
 801217e:	4628      	mov	r0, r5
 8012180:	f000 f82a 	bl	80121d8 <__swsetup_r>
 8012184:	b118      	cbz	r0, 801218e <__swbuf_r+0x32>
 8012186:	f04f 37ff 	mov.w	r7, #4294967295
 801218a:	4638      	mov	r0, r7
 801218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801218e:	6823      	ldr	r3, [r4, #0]
 8012190:	6922      	ldr	r2, [r4, #16]
 8012192:	1a98      	subs	r0, r3, r2
 8012194:	6963      	ldr	r3, [r4, #20]
 8012196:	b2f6      	uxtb	r6, r6
 8012198:	4283      	cmp	r3, r0
 801219a:	4637      	mov	r7, r6
 801219c:	dc05      	bgt.n	80121aa <__swbuf_r+0x4e>
 801219e:	4621      	mov	r1, r4
 80121a0:	4628      	mov	r0, r5
 80121a2:	f7ff fdf7 	bl	8011d94 <_fflush_r>
 80121a6:	2800      	cmp	r0, #0
 80121a8:	d1ed      	bne.n	8012186 <__swbuf_r+0x2a>
 80121aa:	68a3      	ldr	r3, [r4, #8]
 80121ac:	3b01      	subs	r3, #1
 80121ae:	60a3      	str	r3, [r4, #8]
 80121b0:	6823      	ldr	r3, [r4, #0]
 80121b2:	1c5a      	adds	r2, r3, #1
 80121b4:	6022      	str	r2, [r4, #0]
 80121b6:	701e      	strb	r6, [r3, #0]
 80121b8:	6962      	ldr	r2, [r4, #20]
 80121ba:	1c43      	adds	r3, r0, #1
 80121bc:	429a      	cmp	r2, r3
 80121be:	d004      	beq.n	80121ca <__swbuf_r+0x6e>
 80121c0:	89a3      	ldrh	r3, [r4, #12]
 80121c2:	07db      	lsls	r3, r3, #31
 80121c4:	d5e1      	bpl.n	801218a <__swbuf_r+0x2e>
 80121c6:	2e0a      	cmp	r6, #10
 80121c8:	d1df      	bne.n	801218a <__swbuf_r+0x2e>
 80121ca:	4621      	mov	r1, r4
 80121cc:	4628      	mov	r0, r5
 80121ce:	f7ff fde1 	bl	8011d94 <_fflush_r>
 80121d2:	2800      	cmp	r0, #0
 80121d4:	d0d9      	beq.n	801218a <__swbuf_r+0x2e>
 80121d6:	e7d6      	b.n	8012186 <__swbuf_r+0x2a>

080121d8 <__swsetup_r>:
 80121d8:	b538      	push	{r3, r4, r5, lr}
 80121da:	4b29      	ldr	r3, [pc, #164]	@ (8012280 <__swsetup_r+0xa8>)
 80121dc:	4605      	mov	r5, r0
 80121de:	6818      	ldr	r0, [r3, #0]
 80121e0:	460c      	mov	r4, r1
 80121e2:	b118      	cbz	r0, 80121ec <__swsetup_r+0x14>
 80121e4:	6a03      	ldr	r3, [r0, #32]
 80121e6:	b90b      	cbnz	r3, 80121ec <__swsetup_r+0x14>
 80121e8:	f7fe f922 	bl	8010430 <__sinit>
 80121ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121f0:	0719      	lsls	r1, r3, #28
 80121f2:	d422      	bmi.n	801223a <__swsetup_r+0x62>
 80121f4:	06da      	lsls	r2, r3, #27
 80121f6:	d407      	bmi.n	8012208 <__swsetup_r+0x30>
 80121f8:	2209      	movs	r2, #9
 80121fa:	602a      	str	r2, [r5, #0]
 80121fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012200:	81a3      	strh	r3, [r4, #12]
 8012202:	f04f 30ff 	mov.w	r0, #4294967295
 8012206:	e033      	b.n	8012270 <__swsetup_r+0x98>
 8012208:	0758      	lsls	r0, r3, #29
 801220a:	d512      	bpl.n	8012232 <__swsetup_r+0x5a>
 801220c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801220e:	b141      	cbz	r1, 8012222 <__swsetup_r+0x4a>
 8012210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012214:	4299      	cmp	r1, r3
 8012216:	d002      	beq.n	801221e <__swsetup_r+0x46>
 8012218:	4628      	mov	r0, r5
 801221a:	f7ff f8b5 	bl	8011388 <_free_r>
 801221e:	2300      	movs	r3, #0
 8012220:	6363      	str	r3, [r4, #52]	@ 0x34
 8012222:	89a3      	ldrh	r3, [r4, #12]
 8012224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012228:	81a3      	strh	r3, [r4, #12]
 801222a:	2300      	movs	r3, #0
 801222c:	6063      	str	r3, [r4, #4]
 801222e:	6923      	ldr	r3, [r4, #16]
 8012230:	6023      	str	r3, [r4, #0]
 8012232:	89a3      	ldrh	r3, [r4, #12]
 8012234:	f043 0308 	orr.w	r3, r3, #8
 8012238:	81a3      	strh	r3, [r4, #12]
 801223a:	6923      	ldr	r3, [r4, #16]
 801223c:	b94b      	cbnz	r3, 8012252 <__swsetup_r+0x7a>
 801223e:	89a3      	ldrh	r3, [r4, #12]
 8012240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012248:	d003      	beq.n	8012252 <__swsetup_r+0x7a>
 801224a:	4621      	mov	r1, r4
 801224c:	4628      	mov	r0, r5
 801224e:	f000 f883 	bl	8012358 <__smakebuf_r>
 8012252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012256:	f013 0201 	ands.w	r2, r3, #1
 801225a:	d00a      	beq.n	8012272 <__swsetup_r+0x9a>
 801225c:	2200      	movs	r2, #0
 801225e:	60a2      	str	r2, [r4, #8]
 8012260:	6962      	ldr	r2, [r4, #20]
 8012262:	4252      	negs	r2, r2
 8012264:	61a2      	str	r2, [r4, #24]
 8012266:	6922      	ldr	r2, [r4, #16]
 8012268:	b942      	cbnz	r2, 801227c <__swsetup_r+0xa4>
 801226a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801226e:	d1c5      	bne.n	80121fc <__swsetup_r+0x24>
 8012270:	bd38      	pop	{r3, r4, r5, pc}
 8012272:	0799      	lsls	r1, r3, #30
 8012274:	bf58      	it	pl
 8012276:	6962      	ldrpl	r2, [r4, #20]
 8012278:	60a2      	str	r2, [r4, #8]
 801227a:	e7f4      	b.n	8012266 <__swsetup_r+0x8e>
 801227c:	2000      	movs	r0, #0
 801227e:	e7f7      	b.n	8012270 <__swsetup_r+0x98>
 8012280:	20000124 	.word	0x20000124

08012284 <_raise_r>:
 8012284:	291f      	cmp	r1, #31
 8012286:	b538      	push	{r3, r4, r5, lr}
 8012288:	4605      	mov	r5, r0
 801228a:	460c      	mov	r4, r1
 801228c:	d904      	bls.n	8012298 <_raise_r+0x14>
 801228e:	2316      	movs	r3, #22
 8012290:	6003      	str	r3, [r0, #0]
 8012292:	f04f 30ff 	mov.w	r0, #4294967295
 8012296:	bd38      	pop	{r3, r4, r5, pc}
 8012298:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801229a:	b112      	cbz	r2, 80122a2 <_raise_r+0x1e>
 801229c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80122a0:	b94b      	cbnz	r3, 80122b6 <_raise_r+0x32>
 80122a2:	4628      	mov	r0, r5
 80122a4:	f000 f830 	bl	8012308 <_getpid_r>
 80122a8:	4622      	mov	r2, r4
 80122aa:	4601      	mov	r1, r0
 80122ac:	4628      	mov	r0, r5
 80122ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122b2:	f000 b817 	b.w	80122e4 <_kill_r>
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d00a      	beq.n	80122d0 <_raise_r+0x4c>
 80122ba:	1c59      	adds	r1, r3, #1
 80122bc:	d103      	bne.n	80122c6 <_raise_r+0x42>
 80122be:	2316      	movs	r3, #22
 80122c0:	6003      	str	r3, [r0, #0]
 80122c2:	2001      	movs	r0, #1
 80122c4:	e7e7      	b.n	8012296 <_raise_r+0x12>
 80122c6:	2100      	movs	r1, #0
 80122c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80122cc:	4620      	mov	r0, r4
 80122ce:	4798      	blx	r3
 80122d0:	2000      	movs	r0, #0
 80122d2:	e7e0      	b.n	8012296 <_raise_r+0x12>

080122d4 <raise>:
 80122d4:	4b02      	ldr	r3, [pc, #8]	@ (80122e0 <raise+0xc>)
 80122d6:	4601      	mov	r1, r0
 80122d8:	6818      	ldr	r0, [r3, #0]
 80122da:	f7ff bfd3 	b.w	8012284 <_raise_r>
 80122de:	bf00      	nop
 80122e0:	20000124 	.word	0x20000124

080122e4 <_kill_r>:
 80122e4:	b538      	push	{r3, r4, r5, lr}
 80122e6:	4d07      	ldr	r5, [pc, #28]	@ (8012304 <_kill_r+0x20>)
 80122e8:	2300      	movs	r3, #0
 80122ea:	4604      	mov	r4, r0
 80122ec:	4608      	mov	r0, r1
 80122ee:	4611      	mov	r1, r2
 80122f0:	602b      	str	r3, [r5, #0]
 80122f2:	f7f0 fd15 	bl	8002d20 <_kill>
 80122f6:	1c43      	adds	r3, r0, #1
 80122f8:	d102      	bne.n	8012300 <_kill_r+0x1c>
 80122fa:	682b      	ldr	r3, [r5, #0]
 80122fc:	b103      	cbz	r3, 8012300 <_kill_r+0x1c>
 80122fe:	6023      	str	r3, [r4, #0]
 8012300:	bd38      	pop	{r3, r4, r5, pc}
 8012302:	bf00      	nop
 8012304:	200046b8 	.word	0x200046b8

08012308 <_getpid_r>:
 8012308:	f7f0 bd02 	b.w	8002d10 <_getpid>

0801230c <__swhatbuf_r>:
 801230c:	b570      	push	{r4, r5, r6, lr}
 801230e:	460c      	mov	r4, r1
 8012310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012314:	2900      	cmp	r1, #0
 8012316:	b096      	sub	sp, #88	@ 0x58
 8012318:	4615      	mov	r5, r2
 801231a:	461e      	mov	r6, r3
 801231c:	da0d      	bge.n	801233a <__swhatbuf_r+0x2e>
 801231e:	89a3      	ldrh	r3, [r4, #12]
 8012320:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012324:	f04f 0100 	mov.w	r1, #0
 8012328:	bf14      	ite	ne
 801232a:	2340      	movne	r3, #64	@ 0x40
 801232c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012330:	2000      	movs	r0, #0
 8012332:	6031      	str	r1, [r6, #0]
 8012334:	602b      	str	r3, [r5, #0]
 8012336:	b016      	add	sp, #88	@ 0x58
 8012338:	bd70      	pop	{r4, r5, r6, pc}
 801233a:	466a      	mov	r2, sp
 801233c:	f000 f848 	bl	80123d0 <_fstat_r>
 8012340:	2800      	cmp	r0, #0
 8012342:	dbec      	blt.n	801231e <__swhatbuf_r+0x12>
 8012344:	9901      	ldr	r1, [sp, #4]
 8012346:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801234a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801234e:	4259      	negs	r1, r3
 8012350:	4159      	adcs	r1, r3
 8012352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012356:	e7eb      	b.n	8012330 <__swhatbuf_r+0x24>

08012358 <__smakebuf_r>:
 8012358:	898b      	ldrh	r3, [r1, #12]
 801235a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801235c:	079d      	lsls	r5, r3, #30
 801235e:	4606      	mov	r6, r0
 8012360:	460c      	mov	r4, r1
 8012362:	d507      	bpl.n	8012374 <__smakebuf_r+0x1c>
 8012364:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012368:	6023      	str	r3, [r4, #0]
 801236a:	6123      	str	r3, [r4, #16]
 801236c:	2301      	movs	r3, #1
 801236e:	6163      	str	r3, [r4, #20]
 8012370:	b003      	add	sp, #12
 8012372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012374:	ab01      	add	r3, sp, #4
 8012376:	466a      	mov	r2, sp
 8012378:	f7ff ffc8 	bl	801230c <__swhatbuf_r>
 801237c:	9f00      	ldr	r7, [sp, #0]
 801237e:	4605      	mov	r5, r0
 8012380:	4639      	mov	r1, r7
 8012382:	4630      	mov	r0, r6
 8012384:	f7ff f874 	bl	8011470 <_malloc_r>
 8012388:	b948      	cbnz	r0, 801239e <__smakebuf_r+0x46>
 801238a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801238e:	059a      	lsls	r2, r3, #22
 8012390:	d4ee      	bmi.n	8012370 <__smakebuf_r+0x18>
 8012392:	f023 0303 	bic.w	r3, r3, #3
 8012396:	f043 0302 	orr.w	r3, r3, #2
 801239a:	81a3      	strh	r3, [r4, #12]
 801239c:	e7e2      	b.n	8012364 <__smakebuf_r+0xc>
 801239e:	89a3      	ldrh	r3, [r4, #12]
 80123a0:	6020      	str	r0, [r4, #0]
 80123a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123a6:	81a3      	strh	r3, [r4, #12]
 80123a8:	9b01      	ldr	r3, [sp, #4]
 80123aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80123ae:	b15b      	cbz	r3, 80123c8 <__smakebuf_r+0x70>
 80123b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123b4:	4630      	mov	r0, r6
 80123b6:	f000 f81d 	bl	80123f4 <_isatty_r>
 80123ba:	b128      	cbz	r0, 80123c8 <__smakebuf_r+0x70>
 80123bc:	89a3      	ldrh	r3, [r4, #12]
 80123be:	f023 0303 	bic.w	r3, r3, #3
 80123c2:	f043 0301 	orr.w	r3, r3, #1
 80123c6:	81a3      	strh	r3, [r4, #12]
 80123c8:	89a3      	ldrh	r3, [r4, #12]
 80123ca:	431d      	orrs	r5, r3
 80123cc:	81a5      	strh	r5, [r4, #12]
 80123ce:	e7cf      	b.n	8012370 <__smakebuf_r+0x18>

080123d0 <_fstat_r>:
 80123d0:	b538      	push	{r3, r4, r5, lr}
 80123d2:	4d07      	ldr	r5, [pc, #28]	@ (80123f0 <_fstat_r+0x20>)
 80123d4:	2300      	movs	r3, #0
 80123d6:	4604      	mov	r4, r0
 80123d8:	4608      	mov	r0, r1
 80123da:	4611      	mov	r1, r2
 80123dc:	602b      	str	r3, [r5, #0]
 80123de:	f7f0 fcff 	bl	8002de0 <_fstat>
 80123e2:	1c43      	adds	r3, r0, #1
 80123e4:	d102      	bne.n	80123ec <_fstat_r+0x1c>
 80123e6:	682b      	ldr	r3, [r5, #0]
 80123e8:	b103      	cbz	r3, 80123ec <_fstat_r+0x1c>
 80123ea:	6023      	str	r3, [r4, #0]
 80123ec:	bd38      	pop	{r3, r4, r5, pc}
 80123ee:	bf00      	nop
 80123f0:	200046b8 	.word	0x200046b8

080123f4 <_isatty_r>:
 80123f4:	b538      	push	{r3, r4, r5, lr}
 80123f6:	4d06      	ldr	r5, [pc, #24]	@ (8012410 <_isatty_r+0x1c>)
 80123f8:	2300      	movs	r3, #0
 80123fa:	4604      	mov	r4, r0
 80123fc:	4608      	mov	r0, r1
 80123fe:	602b      	str	r3, [r5, #0]
 8012400:	f7f0 fcfe 	bl	8002e00 <_isatty>
 8012404:	1c43      	adds	r3, r0, #1
 8012406:	d102      	bne.n	801240e <_isatty_r+0x1a>
 8012408:	682b      	ldr	r3, [r5, #0]
 801240a:	b103      	cbz	r3, 801240e <_isatty_r+0x1a>
 801240c:	6023      	str	r3, [r4, #0]
 801240e:	bd38      	pop	{r3, r4, r5, pc}
 8012410:	200046b8 	.word	0x200046b8

08012414 <_init>:
 8012414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012416:	bf00      	nop
 8012418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801241a:	bc08      	pop	{r3}
 801241c:	469e      	mov	lr, r3
 801241e:	4770      	bx	lr

08012420 <_fini>:
 8012420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012422:	bf00      	nop
 8012424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012426:	bc08      	pop	{r3}
 8012428:	469e      	mov	lr, r3
 801242a:	4770      	bx	lr
