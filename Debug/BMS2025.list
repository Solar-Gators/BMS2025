
BMS2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121bc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08012370  08012370  00013370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128c4  080128c4  000142e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080128c4  080128c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128cc  080128cc  000142e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080128cc  080128cc  000138cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080128d4  080128d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e0  20000000  080128d8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044ec  200002e0  08012bb8  000142e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200047cc  08012bb8  000147cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003339c  00000000  00000000  00014310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000688e  00000000  00000000  000476ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024d8  00000000  00000000  0004df40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c36  00000000  00000000  00050418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000322e0  00000000  00000000  0005204e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029204  00000000  00000000  0008432e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a211  00000000  00000000  000ad532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c7743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aae0  00000000  00000000  001c7788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001d2268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e0 	.word	0x200002e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012354 	.word	0x08012354

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002e4 	.word	0x200002e4
 80001ec:	08012354 	.word	0x08012354

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <_ZN7ADS7138C1Ev>:
#include "ADS7138.h"

/**
 * @brief Instantiates a new ADS7138 class.
 */
ADS7138::ADS7138() {}
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh>:
 * @brief Sets up the I2C connection.
 *
 * @param hi2c Pointer to the HAL I2C handle.
 * @param deviceAddress The 7-bit I2C address of the ADS7138.
 */
void ADS7138::begin(I2C_HandleTypeDef* hi2c, uint8_t deviceAddress) {
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71fb      	strb	r3, [r7, #7]
    _i2cHandle = hi2c;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	601a      	str	r2, [r3, #0]
    _deviceAddress = (deviceAddress != 0) ? deviceAddress << 1 : (ADS7138_I2CADDR_DEFAULT << 1); // STM32 expects 8-bit address
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh+0x22>
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	e000      	b.n	8000c42 <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh+0x24>
 8000c40:	2220      	movs	r2, #32
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	711a      	strb	r2, [r3, #4]
    _currentOsr = OSR_1;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	731a      	strb	r2, [r3, #12]
    _referenceVoltage = 3300; // default in mV
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000c52:	609a      	str	r2, [r3, #8]
    _currentChannel = MANUAL_CHID_AIN0;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2200      	movs	r2, #0
 8000c58:	735a      	strb	r2, [r3, #13]
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_ZN7ADS713819setReferenceVoltageEm>:

void ADS7138::setReferenceVoltage(uint32_t reference) {
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
    _referenceVoltage = reference;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	609a      	str	r2, [r3, #8]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_ZN7ADS713814writeRegister8Ehh>:

void ADS7138::writeRegister8(uint8_t registerAddress, uint8_t value) {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af02      	add	r7, sp, #8
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	70fb      	strb	r3, [r7, #3]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	70bb      	strb	r3, [r7, #2]
    uint8_t data[3] = { SINGLE_REGISTER_WRITE, registerAddress, value };
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2100      	movs	r1, #0
 8000c98:	460a      	mov	r2, r1
 8000c9a:	801a      	strh	r2, [r3, #0]
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	709a      	strb	r2, [r3, #2]
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	733b      	strb	r3, [r7, #12]
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	737b      	strb	r3, [r7, #13]
 8000ca8:	78bb      	ldrb	r3, [r7, #2]
 8000caa:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(_i2cHandle, _deviceAddress, data, 3, HAL_MAX_DELAY);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	791b      	ldrb	r3, [r3, #4]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f107 020c 	add.w	r2, r7, #12
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	f003 fc13 	bl	80044ec <HAL_I2C_Master_Transmit>
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZN7ADS713815configureOpModeE16ADS7138__OSC_SEL18ADS7138__CONV_MODE20ADS7138__CONV_ON_ERR>:

void ADS7138::configureOpMode(ADS7138__OSC_SEL oscSel, ADS7138__CONV_MODE convMode, ADS7138__CONV_ON_ERR convOnErr) {
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	4611      	mov	r1, r2
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4603      	mov	r3, r0
 8000cde:	70fb      	strb	r3, [r7, #3]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	70bb      	strb	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	707b      	strb	r3, [r7, #1]
    uint8_t config = (0x00 & CLK_DIV_MASK) | (oscSel & OSC_SEL_MASK) | (convMode & CONV_MODE_MASK) | (convOnErr & CONV_ON_ERR_MASK);
 8000ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	b25a      	sxtb	r2, r3
 8000cf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000cf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b25a      	sxtb	r2, r3
 8000d00:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000d04:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	73fb      	strb	r3, [r7, #15]
    writeRegister8(OPMODE_CFG_ADDRESS, config);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	461a      	mov	r2, r3
 8000d14:	2104      	movs	r1, #4
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffb3 	bl	8000c82 <_ZN7ADS713814writeRegister8Ehh>
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN7ADS713821configureSequenceModeE17ADS7138__SEQ_MODE18ADS7138__SEQ_START>:

void ADS7138::configureSequenceMode(ADS7138__SEQ_MODE seqMode, ADS7138__SEQ_START seqStart) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
 8000d30:	4613      	mov	r3, r2
 8000d32:	70bb      	strb	r3, [r7, #2]
    uint8_t config = (seqMode & SEQ_MODE_MASK) | (seqStart & SEQ_START_MASK);
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	78bb      	ldrb	r3, [r7, #2]
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	73fb      	strb	r3, [r7, #15]
    writeRegister8(SEQUENCE_CFG_ADDRESS, config);
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff97 	bl	8000c82 <_ZN7ADS713814writeRegister8Ehh>
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_ZN7ADS713812configureOsrE12ADS7138__OSR>:

void ADS7138::configureOsr(ADS7138__OSR osr) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
    _currentOsr = osr;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	78fa      	ldrb	r2, [r7, #3]
 8000d6c:	731a      	strb	r2, [r3, #12]
    writeRegister8(OSR_CFG_ADDRESS, osr & OSR_MASK);
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	2103      	movs	r1, #3
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ff81 	bl	8000c82 <_ZN7ADS713814writeRegister8Ehh>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_ZN7ADS713813selectChannelE20ADS7138__MANUAL_CHID>:

void ADS7138::selectChannel(ADS7138__MANUAL_CHID channel) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
    _currentChannel = channel;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	78fa      	ldrb	r2, [r7, #3]
 8000d98:	735a      	strb	r2, [r3, #13]
    writeRegister8(MANUAL_CH_SEL_ADDRESS, channel & MANUAL_CHID_MASK);
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	f003 030f 	and.w	r3, r3, #15
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	2111      	movs	r1, #17
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ff6b 	bl	8000c82 <_ZN7ADS713814writeRegister8Ehh>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_ZN7ADS71384readEv>:

uint16_t ADS7138::read() {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	6078      	str	r0, [r7, #4]
    uint8_t buf[2] = {0};
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	81bb      	strh	r3, [r7, #12]
    HAL_I2C_Master_Receive(_i2cHandle, _deviceAddress, buf, 2, HAL_MAX_DELAY);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	791b      	ldrb	r3, [r3, #4]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f107 020c 	add.w	r2, r7, #12
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f003 fca1 	bl	800471c <HAL_I2C_Master_Receive>

    uint16_t value = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	81fb      	strh	r3, [r7, #14]
    if (_currentOsr != OSR_1) {
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7b1b      	ldrb	r3, [r3, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00b      	beq.n	8000dfe <_ZN7ADS71384readEv+0x4a>
        value = (buf[0] << 4) | (buf[1] >> 4);
 8000de6:	7b3b      	ldrb	r3, [r7, #12]
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	7b7b      	ldrb	r3, [r7, #13]
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	81fb      	strh	r3, [r7, #14]
 8000dfc:	e008      	b.n	8000e10 <_ZN7ADS71384readEv+0x5c>
    } else {
        value = (buf[0] << 8) | buf[1];
 8000dfe:	7b3b      	ldrb	r3, [r7, #12]
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	7b7b      	ldrb	r3, [r7, #13]
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b21b      	sxth	r3, r3
 8000e0e:	81fb      	strh	r3, [r7, #14]
    }
    return value;
 8000e10:	89fb      	ldrh	r3, [r7, #14]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <_ZN7ADS713811readVoltageEv>:
        selectChannel(channel);
    }
    return read();
}

uint32_t ADS7138::readVoltage() {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    uint16_t raw = read();
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ffc5 	bl	8000db4 <_ZN7ADS71384readEv>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	81fb      	strh	r3, [r7, #14]
    return (static_cast<uint32_t>(raw) * _referenceVoltage) / 4095;
 8000e2e:	89fb      	ldrh	r3, [r7, #14]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	6892      	ldr	r2, [r2, #8]
 8000e34:	fb03 f202 	mul.w	r2, r3, r2
 8000e38:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <_ZN7ADS713811readVoltageEv+0x34>)
 8000e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e3e:	1ad2      	subs	r2, r2, r3
 8000e40:	0852      	lsrs	r2, r2, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	0adb      	lsrs	r3, r3, #11
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	00100101 	.word	0x00100101

08000e54 <_ZN7ADS713818readChannelVoltageE20ADS7138__MANUAL_CHID>:

uint32_t ADS7138::readChannelVoltage(ADS7138__MANUAL_CHID channel) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]
    if (channel != _currentChannel) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7b5b      	ldrb	r3, [r3, #13]
 8000e64:	78fa      	ldrb	r2, [r7, #3]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d004      	beq.n	8000e74 <_ZN7ADS713818readChannelVoltageE20ADS7138__MANUAL_CHID+0x20>
        selectChannel(channel);
 8000e6a:	78fb      	ldrb	r3, [r7, #3]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff8a 	bl	8000d88 <_ZN7ADS713813selectChannelE20ADS7138__MANUAL_CHID>
    }
    return readVoltage();
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ffd1 	bl	8000e1c <_ZN7ADS713811readVoltageEv>
 8000e7a:	4603      	mov	r3, r0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_ZN7BQ7695215CELL_NO_TO_ADDREh>:
    int16_t GetHighCellVoltage();
    int16_t GetLowCellVoltage();
    int16_t GetPackCurrent();
    bool GetConfigUpdateStatus();

    constexpr uint8_t CELL_NO_TO_ADDR(uint8_t cell_no) { return BQ769X2_CMD_VOLTAGE_CELL_1 + ((cell_no-1)*2); }
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	3309      	adds	r3, #9
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_ZN7BQ76952C1Ev>:
#include <stdbool.h>

#ifndef BQ76952_
#define BQ76952_

BQ76952::BQ76952(){
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f00f fac9 	bl	801044e <memset>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	865a      	strh	r2, [r3, #50]	@ 0x32
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3334      	adds	r3, #52	@ 0x34
 8000ee4:	2224      	movs	r2, #36	@ 0x24
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f00f fab0 	bl	801044e <memset>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	659a      	str	r2, [r3, #88]	@ 0x58
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	661a      	str	r2, [r3, #96]	@ 0x60
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	665a      	str	r2, [r3, #100]	@ 0x64
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f

}
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <_ZN7BQ7695212ReadVoltagesEv>:

HAL_StatusTypeDef BQ76952::ConfigureVoltageRegs() {
    return HAL_OK;
}

HAL_StatusTypeDef BQ76952::ReadVoltages() {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	75fb      	strb	r3, [r7, #23]

    int16_t voltage_sum = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	82bb      	strh	r3, [r7, #20]
    low_cell_voltage_ = INT16_MAX;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000f6e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    high_cell_voltage_ = INT16_MIN;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f76:	855a      	strh	r2, [r3, #42]	@ 0x2a

    for (int i = 0; i < 16; i++) {
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	e0a1      	b.n	80010c2 <_ZN7BQ7695212ReadVoltagesEv+0x16a>

    	if((i == 0) || (i == 1) || (i == 15)){
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <_ZN7BQ7695212ReadVoltagesEv+0x38>
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d002      	beq.n	8000f90 <_ZN7BQ7695212ReadVoltagesEv+0x38>
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d14c      	bne.n	800102a <_ZN7BQ7695212ReadVoltagesEv+0xd2>
    		for (int retry = 0; retry < 3; retry++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	e02b      	b.n	8000fee <_ZN7BQ7695212ReadVoltagesEv+0x96>
				status = DirectReadI2(CELL_NO_TO_ADDR(i+1), &cell_voltages_[i]);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff6f 	bl	8000e84 <_ZN7BQ7695215CELL_NO_TO_ADDREh>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4619      	mov	r1, r3
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	3304      	adds	r3, #4
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f8ee 	bl	8001198 <_ZN7BQ7695212DirectReadI2EhPs>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	75fb      	strb	r3, [r7, #23]
				if (status == HAL_OK && cell_voltages_[i] < 5000 && cell_voltages_[i] > 1000) break;  // 1V to 5V is reasonable
 8000fc0:	7dfb      	ldrb	r3, [r7, #23]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d110      	bne.n	8000fe8 <_ZN7BQ7695212ReadVoltagesEv+0x90>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	3204      	adds	r2, #4
 8000fcc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000fd0:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	dc07      	bgt.n	8000fe8 <_ZN7BQ7695212ReadVoltagesEv+0x90>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	3204      	adds	r2, #4
 8000fde:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000fe2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fe6:	dc06      	bgt.n	8000ff6 <_ZN7BQ7695212ReadVoltagesEv+0x9e>
    		for (int retry = 0; retry < 3; retry++) {
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	ddd0      	ble.n	8000f96 <_ZN7BQ7695212ReadVoltagesEv+0x3e>
 8000ff4:	e000      	b.n	8000ff8 <_ZN7BQ7695212ReadVoltagesEv+0xa0>
				if (status == HAL_OK && cell_voltages_[i] < 5000 && cell_voltages_[i] > 1000) break;  // 1V to 5V is reasonable
 8000ff6:	bf00      	nop
    		}
    		if(cell_voltages_[i] > 5000 || cell_voltages_[i] < 1000){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	3204      	adds	r2, #4
 8000ffe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001006:	4293      	cmp	r3, r2
 8001008:	dc07      	bgt.n	800101a <_ZN7BQ7695212ReadVoltagesEv+0xc2>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	3204      	adds	r2, #4
 8001010:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001014:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001018:	da1d      	bge.n	8001056 <_ZN7BQ7695212ReadVoltagesEv+0xfe>
    			cell_voltages_[i] = 3600;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	3204      	adds	r2, #4
 8001020:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8001024:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    		}
    	}else{
 8001028:	e015      	b.n	8001056 <_ZN7BQ7695212ReadVoltagesEv+0xfe>
    		status = DirectReadI2(CELL_NO_TO_ADDR(i+1), &cell_voltages_[i]);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	3301      	adds	r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4619      	mov	r1, r3
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff25 	bl	8000e84 <_ZN7BQ7695215CELL_NO_TO_ADDREh>
 800103a:	4603      	mov	r3, r0
 800103c:	4619      	mov	r1, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	3304      	adds	r3, #4
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	461a      	mov	r2, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f8a4 	bl	8001198 <_ZN7BQ7695212DirectReadI2EhPs>
 8001050:	4603      	mov	r3, r0
 8001052:	75fb      	strb	r3, [r7, #23]
 8001054:	e000      	b.n	8001058 <_ZN7BQ7695212ReadVoltagesEv+0x100>
    	}else{
 8001056:	bf00      	nop
    	}
        if (status != HAL_OK) { return status; }
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <_ZN7BQ7695212ReadVoltagesEv+0x10a>
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	e06f      	b.n	8001142 <_ZN7BQ7695212ReadVoltagesEv+0x1ea>

        if (cell_voltages_[i] > high_cell_voltage_) {
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	3204      	adds	r2, #4
 8001068:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001072:	429a      	cmp	r2, r3
 8001074:	dd07      	ble.n	8001086 <_ZN7BQ7695212ReadVoltagesEv+0x12e>
            high_cell_voltage_ = cell_voltages_[i];
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	3204      	adds	r2, #4
 800107c:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001084:	e010      	b.n	80010a8 <_ZN7BQ7695212ReadVoltagesEv+0x150>
        }
        else if (cell_voltages_[i] < low_cell_voltage_) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	3204      	adds	r2, #4
 800108c:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001096:	429a      	cmp	r2, r3
 8001098:	da06      	bge.n	80010a8 <_ZN7BQ7695212ReadVoltagesEv+0x150>
            low_cell_voltage_ = cell_voltages_[i];
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	3204      	adds	r2, #4
 80010a0:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
        }

        voltage_sum += cell_voltages_[i];
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	3204      	adds	r2, #4
 80010ae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	8abb      	ldrh	r3, [r7, #20]
 80010b6:	4413      	add	r3, r2
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	82bb      	strh	r3, [r7, #20]
    for (int i = 0; i < 16; i++) {
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	3301      	adds	r3, #1
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	f77f af5a 	ble.w	8000f7e <_ZN7BQ7695212ReadVoltagesEv+0x26>
    }

    avg_cell_voltage_ = voltage_sum / 16;
 80010ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da00      	bge.n	80010d4 <_ZN7BQ7695212ReadVoltagesEv+0x17c>
 80010d2:	330f      	adds	r3, #15
 80010d4:	111b      	asrs	r3, r3, #4
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	851a      	strh	r2, [r3, #40]	@ 0x28

    int16_t pack_voltage_temp; // this number will be in userV, by default 1 userV = 10 mV
    status = DirectReadI2(BQ769X2_CMD_VOLTAGE_PACK, &pack_voltage_temp);
 80010dc:	f107 030a 	add.w	r3, r7, #10
 80010e0:	461a      	mov	r2, r3
 80010e2:	2136      	movs	r1, #54	@ 0x36
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f857 	bl	8001198 <_ZN7BQ7695212DirectReadI2EhPs>
 80010ea:	4603      	mov	r3, r0
 80010ec:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) { return status; }
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <_ZN7BQ7695212ReadVoltagesEv+0x1a0>
 80010f4:	7dfb      	ldrb	r3, [r7, #23]
 80010f6:	e024      	b.n	8001142 <_ZN7BQ7695212ReadVoltagesEv+0x1ea>
    pack_voltage_ = pack_voltage_temp*10; // pack_voltage_ is in mV
 80010f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	b29b      	uxth	r3, r3
 8001108:	b21a      	sxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	861a      	strh	r2, [r3, #48]	@ 0x30


    int16_t stack_voltage_temp; // this number will be in userV, by default 1 userV = 10 mV
    status = DirectReadI2(BQ769X2_CMD_VOLTAGE_STACK, &stack_voltage_temp);
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	461a      	mov	r2, r3
 8001114:	2134      	movs	r1, #52	@ 0x34
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f83e 	bl	8001198 <_ZN7BQ7695212DirectReadI2EhPs>
 800111c:	4603      	mov	r3, r0
 800111e:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) { return status; }
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <_ZN7BQ7695212ReadVoltagesEv+0x1d2>
 8001126:	7dfb      	ldrb	r3, [r7, #23]
 8001128:	e00b      	b.n	8001142 <_ZN7BQ7695212ReadVoltagesEv+0x1ea>
    stack_voltage_ = stack_voltage_temp*10; //stack_voltage_ is in mV
 800112a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800112e:	b29b      	uxth	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4413      	add	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	b29b      	uxth	r3, r3
 800113a:	b21a      	sxth	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	865a      	strh	r2, [r3, #50]	@ 0x32

    return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZN7BQ769529ReadBytesEhPhj>:
    memcpy(buf + 1, data, num_bytes);

    return HAL_I2C_Master_Transmit(hi2c_, i2cAddressWrite, buf, num_bytes + 1, 1000);
}

HAL_StatusTypeDef BQ76952::ReadBytes(uint8_t reg_addr, uint8_t *data, const size_t num_bytes) {
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af02      	add	r7, sp, #8
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	460b      	mov	r3, r1
 8001158:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(hi2c_, i2cAddressRead, &reg_addr, 1, 1000);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6858      	ldr	r0, [r3, #4]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	785b      	ldrb	r3, [r3, #1]
 8001162:	4619      	mov	r1, r3
 8001164:	f107 020b 	add.w	r2, r7, #11
 8001168:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	f003 f9bc 	bl	80044ec <HAL_I2C_Master_Transmit>
    
    return HAL_I2C_Master_Receive(hi2c_, i2cAddressRead, data, num_bytes, 1000);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6858      	ldr	r0, [r3, #4]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	785b      	ldrb	r3, [r3, #1]
 800117c:	4619      	mov	r1, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b29b      	uxth	r3, r3
 8001182:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001186:	9200      	str	r2, [sp, #0]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	f003 fac7 	bl	800471c <HAL_I2C_Master_Receive>
 800118e:	4603      	mov	r3, r0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_ZN7BQ7695212DirectReadI2EhPs>:
    *value = (buf[1] << 8) | buf[0];

    return HAL_OK;
}

HAL_StatusTypeDef BQ76952::DirectReadI2(const uint8_t reg_addr, int16_t *value) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	460b      	mov	r3, r1
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[2];

    HAL_StatusTypeDef status = ReadBytes(reg_addr, buf, 2);
 80011a6:	f107 0214 	add.w	r2, r7, #20
 80011aa:	7af9      	ldrb	r1, [r7, #11]
 80011ac:	2302      	movs	r3, #2
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f7ff ffcb 	bl	800114a <_ZN7BQ769529ReadBytesEhPhj>
 80011b4:	4603      	mov	r3, r0
 80011b6:	75fb      	strb	r3, [r7, #23]

    if (status != HAL_OK) 
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <_ZN7BQ7695212DirectReadI2EhPs+0x2a>
        return status;
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	e00a      	b.n	80011d8 <_ZN7BQ7695212DirectReadI2EhPs+0x40>

    *value = (int16_t)((buf[1] << 8) | buf[0]);
 80011c2:	7d7b      	ldrb	r3, [r7, #21]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7d3b      	ldrb	r3, [r7, #20]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_ZN7BQChipsC1EP7BQ76952S1_>:
#ifndef BQCHIPS_
#define BQCHIPS_

#include <BQChips.hpp>

BQChips::BQChips(BQ76952 *chip1, BQ76952 *chip2){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4618      	mov	r0, r3
 80011f0:	2340      	movs	r3, #64	@ 0x40
 80011f2:	461a      	mov	r2, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	f00f f92a 	bl	801044e <memset>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2200      	movs	r2, #0
 800120e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	pChip1 = chip1;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	649a      	str	r2, [r3, #72]	@ 0x48
	pChip2 = chip2;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <_ZN7BQChips12readVoltagesEv>:

// read functions
HAL_StatusTypeDef BQChips::readVoltages(){
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = pChip1 -> ReadVoltages();
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fe8b 	bl	8000f58 <_ZN7BQ7695212ReadVoltagesEv>
 8001242:	4603      	mov	r3, r0
 8001244:	72fb      	strb	r3, [r7, #11]
	if (status != HAL_OK)	{return status;}
 8001246:	7afb      	ldrb	r3, [r7, #11]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <_ZN7BQChips12readVoltagesEv+0x20>
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	e079      	b.n	8001344 <_ZN7BQChips12readVoltagesEv+0x114>

	status = pChip2 -> ReadVoltages();
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe7f 	bl	8000f58 <_ZN7BQ7695212ReadVoltagesEv>
 800125a:	4603      	mov	r3, r0
 800125c:	72fb      	strb	r3, [r7, #11]
	if (status != HAL_OK)	{return status;}
 800125e:	7afb      	ldrb	r3, [r7, #11]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <_ZN7BQChips12readVoltagesEv+0x38>
 8001264:	7afb      	ldrb	r3, [r7, #11]
 8001266:	e06d      	b.n	8001344 <_ZN7BQChips12readVoltagesEv+0x114>

	for (int i = 0; i < 16; i++){
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e017      	b.n	800129e <_ZN7BQChips12readVoltagesEv+0x6e>
		cellVoltages[i] = pChip1->cell_voltages_[i];
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	3204      	adds	r2, #4
 8001276:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		cellVoltages[i+16] = pChip2->cell_voltages_[i];
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	3210      	adds	r2, #16
 800128a:	68f9      	ldr	r1, [r7, #12]
 800128c:	3104      	adds	r1, #4
 800128e:	f933 1011 	ldrsh.w	r1, [r3, r1, lsl #1]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 16; i++){
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3301      	adds	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	dde4      	ble.n	800126e <_ZN7BQChips12readVoltagesEv+0x3e>
	}

	totalVoltage = (pChip1 -> stack_voltage_) + (pChip2 -> stack_voltage_); // check that this shouldn't be pack_voltage
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012a8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	b21a      	sxth	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	averageVoltage = ((pChip1 -> avg_cell_voltage_) + (pChip2 -> avg_cell_voltage_))/2;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012c8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80012d6:	4413      	add	r3, r2
 80012d8:	0fda      	lsrs	r2, r3, #31
 80012da:	4413      	add	r3, r2
 80012dc:	105b      	asrs	r3, r3, #1
 80012de:	b21a      	sxth	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	maxVoltage = pChip1 -> high_cell_voltage_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ea:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	if (pChip2 -> high_cell_voltage_ > maxVoltage){
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f8:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001302:	429a      	cmp	r2, r3
 8001304:	dd06      	ble.n	8001314 <_ZN7BQChips12readVoltagesEv+0xe4>
		maxVoltage = pChip2 -> high_cell_voltage_;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	}

	minVoltage = pChip1 -> low_cell_voltage_;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001318:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	if (pChip2 -> low_cell_voltage_ < minVoltage){
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001330:	429a      	cmp	r2, r3
 8001332:	da06      	bge.n	8001342 <_ZN7BQChips12readVoltagesEv+0x112>
		minVoltage = pChip2 -> low_cell_voltage_;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001338:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	}

	return status;
 8001342:	7afb      	ldrb	r3, [r7, #11]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <_ZN7BQChips14getCellVoltageEi>:

//voltages
int16_t BQChips::getCellVoltage(int cellID){
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	return cellVoltages[cellID];
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <_ZN7BQChips20getAll32CellVoltagesEPs>:

void BQChips::getAll32CellVoltages(int16_t arrData[]){
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 32; i++){
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e00b      	b.n	8001392 <_ZN7BQChips20getAll32CellVoltagesEPs+0x28>
		arrData[i] = cellVoltages[i];
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	4413      	add	r3, r2
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68f9      	ldr	r1, [r7, #12]
 8001386:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800138a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 32; i++){
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3301      	adds	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b1f      	cmp	r3, #31
 8001396:	ddf0      	ble.n	800137a <_ZN7BQChips20getAll32CellVoltagesEPs+0x10>
	}
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80013b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b4:	eef0 7ae7 	vabs.f32	s15, s15
 80013b8:	eeb0 0a67 	vmov.f32	s0, s15
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <_ZN7BMSDataC1Ev>:
enum chargeState{
	discharging,
	charging
};

struct BMSData {
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80013d4:	2220      	movs	r2, #32
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f00f f838 	bl	801044e <memset>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80013fc:	2220      	movs	r2, #32
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f00f f824 	bl	801044e <memset>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2153 	strb.w	r2, [r3, #339]	@ 0x153
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_Z13CPP_UserSetupv>:
    uint32_t voltage_exclusions;   // 32 bits for voltage exclusions
    uint32_t temp_exclusions;      // 32 bits for temperature exclusions
} Exclusion_Data_t;


void CPP_UserSetup(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
    // Make sure that timer priorities are configured correctly
    HAL_Delay(10);
 800142e:	200a      	movs	r0, #10
 8001430:	f001 fe38 	bl	80030a4 <HAL_Delay>

    openContactorsDebug = false;
 8001434:	4b4c      	ldr	r3, [pc, #304]	@ (8001568 <_Z13CPP_UserSetupv+0x140>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
    closed = false;
 800143a:	4b4c      	ldr	r3, [pc, #304]	@ (800156c <_Z13CPP_UserSetupv+0x144>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]

    //set contactor pins low
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2101      	movs	r1, #1
 8001444:	484a      	ldr	r0, [pc, #296]	@ (8001570 <_Z13CPP_UserSetupv+0x148>)
 8001446:	f002 ff61 	bl	800430c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	2120      	movs	r1, #32
 800144e:	4849      	ldr	r0, [pc, #292]	@ (8001574 <_Z13CPP_UserSetupv+0x14c>)
 8001450:	f002 ff5c 	bl	800430c <HAL_GPIO_WritePin>
    //set power mux
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	2180      	movs	r1, #128	@ 0x80
 8001458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145c:	f002 ff56 	bl	800430c <HAL_GPIO_WritePin>

    //toggle BQ reset
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2140      	movs	r1, #64	@ 0x40
 8001464:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001468:	f002 ff50 	bl	800430c <HAL_GPIO_WritePin>
    HAL_Delay(300);
 800146c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001470:	f001 fe18 	bl	80030a4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2140      	movs	r1, #64	@ 0x40
 8001478:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147c:	f002 ff46 	bl	800430c <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8001480:	20c8      	movs	r0, #200	@ 0xc8
 8001482:	f001 fe0f 	bl	80030a4 <HAL_Delay>

    //toggle BQ reset
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	2104      	movs	r1, #4
 800148a:	483a      	ldr	r0, [pc, #232]	@ (8001574 <_Z13CPP_UserSetupv+0x14c>)
 800148c:	f002 ff3e 	bl	800430c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001490:	200a      	movs	r0, #10
 8001492:	f001 fe07 	bl	80030a4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	2104      	movs	r1, #4
 800149a:	4836      	ldr	r0, [pc, #216]	@ (8001574 <_Z13CPP_UserSetupv+0x14c>)
 800149c:	f002 ff36 	bl	800430c <HAL_GPIO_WritePin>
//	if (HAL_StatusTypeDef::HAL_OK != bqChip1.Init(&hi2c3, bqChipI2CAddress)) {
//		Error_Handler();
//	}

	//initalize current ADC
	current_adc.begin(&hi2c2, 0x10); // Default address: 0x10
 80014a0:	2210      	movs	r2, #16
 80014a2:	4935      	ldr	r1, [pc, #212]	@ (8001578 <_Z13CPP_UserSetupv+0x150>)
 80014a4:	4835      	ldr	r0, [pc, #212]	@ (800157c <_Z13CPP_UserSetupv+0x154>)
 80014a6:	f7ff fbba 	bl	8000c1e <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh>
	// Configure operating mode (example: internal oscillator, manual mode)
	current_adc.configureOpMode(OSC_SEL_LOW_POWER, CONV_MODE_MANUAL, CONV_ON_ERR_CONTINUE);
 80014aa:	2300      	movs	r3, #0
 80014ac:	2200      	movs	r2, #0
 80014ae:	2110      	movs	r1, #16
 80014b0:	4832      	ldr	r0, [pc, #200]	@ (800157c <_Z13CPP_UserSetupv+0x154>)
 80014b2:	f7ff fc0c 	bl	8000cce <_ZN7ADS713815configureOpModeE16ADS7138__OSC_SEL18ADS7138__CONV_MODE20ADS7138__CONV_ON_ERR>
	// Use manual channel selection
	current_adc.configureSequenceMode(SEQ_MODE_MANUAL, SEQ_START_END);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	4830      	ldr	r0, [pc, #192]	@ (800157c <_Z13CPP_UserSetupv+0x154>)
 80014bc:	f7ff fc32 	bl	8000d24 <_ZN7ADS713821configureSequenceModeE17ADS7138__SEQ_MODE18ADS7138__SEQ_START>
	// Set oversampling to 1 (no averaging)
	current_adc.configureOsr(OSR_1);
 80014c0:	2100      	movs	r1, #0
 80014c2:	482e      	ldr	r0, [pc, #184]	@ (800157c <_Z13CPP_UserSetupv+0x154>)
 80014c4:	f7ff fc4a 	bl	8000d5c <_ZN7ADS713812configureOsrE12ADS7138__OSR>
	// Set reference voltage (e.g., 3300 mV if powered from 3.3 V)
	current_adc.setReferenceVoltage(3300);
 80014c8:	f640 41e4 	movw	r1, #3300	@ 0xce4
 80014cc:	482b      	ldr	r0, [pc, #172]	@ (800157c <_Z13CPP_UserSetupv+0x154>)
 80014ce:	f7ff fbca 	bl	8000c66 <_ZN7ADS713819setReferenceVoltageEm>

    //temp sensor inits
    for (int i = 0; i < 4; i++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	e031      	b.n	800153c <_Z13CPP_UserSetupv+0x114>
    	temp_adcs[i].begin(&hi2c2, 0x14+i);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	4a28      	ldr	r2, [pc, #160]	@ (8001580 <_Z13CPP_UserSetupv+0x158>)
 80014de:	1898      	adds	r0, r3, r2
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	3314      	adds	r3, #20
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	4923      	ldr	r1, [pc, #140]	@ (8001578 <_Z13CPP_UserSetupv+0x150>)
 80014ec:	f7ff fb97 	bl	8000c1e <_ZN7ADS71385beginEP19__I2C_HandleTypeDefh>
    	temp_adcs[i].configureOpMode(OSC_SEL_LOW_POWER, CONV_MODE_MANUAL, CONV_ON_ERR_CONTINUE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4a22      	ldr	r2, [pc, #136]	@ (8001580 <_Z13CPP_UserSetupv+0x158>)
 80014f6:	1898      	adds	r0, r3, r2
 80014f8:	2300      	movs	r3, #0
 80014fa:	2200      	movs	r2, #0
 80014fc:	2110      	movs	r1, #16
 80014fe:	f7ff fbe6 	bl	8000cce <_ZN7ADS713815configureOpModeE16ADS7138__OSC_SEL18ADS7138__CONV_MODE20ADS7138__CONV_ON_ERR>
    	temp_adcs[i].configureSequenceMode(SEQ_MODE_MANUAL, SEQ_START_END);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	4a1e      	ldr	r2, [pc, #120]	@ (8001580 <_Z13CPP_UserSetupv+0x158>)
 8001508:	4413      	add	r3, r2
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fc08 	bl	8000d24 <_ZN7ADS713821configureSequenceModeE17ADS7138__SEQ_MODE18ADS7138__SEQ_START>
    	temp_adcs[i].configureOsr(OSR_1);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	4a19      	ldr	r2, [pc, #100]	@ (8001580 <_Z13CPP_UserSetupv+0x158>)
 800151a:	4413      	add	r3, r2
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fc1c 	bl	8000d5c <_ZN7ADS713812configureOsrE12ADS7138__OSR>
    	temp_adcs[i].setReferenceVoltage(3300);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4a15      	ldr	r2, [pc, #84]	@ (8001580 <_Z13CPP_UserSetupv+0x158>)
 800152a:	4413      	add	r3, r2
 800152c:	f640 41e4 	movw	r1, #3300	@ 0xce4
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fb98 	bl	8000c66 <_ZN7ADS713819setReferenceVoltageEm>
    for (int i = 0; i < 4; i++) {
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3301      	adds	r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b03      	cmp	r3, #3
 8001540:	ddca      	ble.n	80014d8 <_Z13CPP_UserSetupv+0xb0>
    }

    HAL_TIM_Base_Start(&htim2);
 8001542:	4810      	ldr	r0, [pc, #64]	@ (8001584 <_Z13CPP_UserSetupv+0x15c>)
 8001544:	f006 faac 	bl	8007aa0 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim3);
 8001548:	480f      	ldr	r0, [pc, #60]	@ (8001588 <_Z13CPP_UserSetupv+0x160>)
 800154a:	f006 faa9 	bl	8007aa0 <HAL_TIM_Base_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800154e:	2100      	movs	r1, #0
 8001550:	480c      	ldr	r0, [pc, #48]	@ (8001584 <_Z13CPP_UserSetupv+0x15c>)
 8001552:	f006 fbd5 	bl	8007d00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001556:	2100      	movs	r1, #0
 8001558:	480b      	ldr	r0, [pc, #44]	@ (8001588 <_Z13CPP_UserSetupv+0x160>)
 800155a:	f006 fbd1 	bl	8007d00 <HAL_TIM_PWM_Start>

}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000320 	.word	0x20000320
 800156c:	20000322 	.word	0x20000322
 8001570:	48000400 	.word	0x48000400
 8001574:	48000800 	.word	0x48000800
 8001578:	20000728 	.word	0x20000728
 800157c:	20000328 	.word	0x20000328
 8001580:	20000338 	.word	0x20000338
 8001584:	20000824 	.word	0x20000824
 8001588:	20000870 	.word	0x20000870

0800158c <_Z16StartDefaultTaskPv>:

void StartDefaultTask(void *argument) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001594:	2102      	movs	r1, #2
 8001596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800159a:	f002 fecf 	bl	800433c <HAL_GPIO_TogglePin>
    osDelay(500);
 800159e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015a2:	f00a fec5 	bl	800c330 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80015a6:	bf00      	nop
 80015a8:	e7f4      	b.n	8001594 <_Z16StartDefaultTaskPv+0x8>
	...

080015ac <_Z11StartTask02Pv>:
  }
  /* USER CODE END 5 */
}

// CURRENT MONITORING TASK
void StartTask02(void *argument) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	float low;

	for (;;)
	{

		if (hi2c2.State == HAL_I2C_STATE_READY) {
 80015b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001668 <_Z11StartTask02Pv+0xbc>)
 80015b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b20      	cmp	r3, #32
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d043      	beq.n	8001652 <_Z11StartTask02Pv+0xa6>

			rawData = current_adc.readChannelVoltage((ADS7138__MANUAL_CHID)(MANUAL_CHID_AIN0));
 80015ca:	2100      	movs	r1, #0
 80015cc:	4827      	ldr	r0, [pc, #156]	@ (800166c <_Z11StartTask02Pv+0xc0>)
 80015ce:	f7ff fc41 	bl	8000e54 <_ZN7ADS713818readChannelVoltageE20ADS7138__MANUAL_CHID>
 80015d2:	60b8      	str	r0, [r7, #8]
			low  = ADCToCurrentL(rawData);
 80015d4:	68b8      	ldr	r0, [r7, #8]
 80015d6:	f000 fba9 	bl	8001d2c <_Z13ADCToCurrentLm>
 80015da:	ed87 0a03 	vstr	s0, [r7, #12]

			// If positive current, discharging
			if (abs(low) == low) {
 80015de:	ed97 0a03 	vldr	s0, [r7, #12]
 80015e2:	f7ff fee0 	bl	80013a6 <_ZSt3absf>
 80015e6:	eeb0 7a40 	vmov.f32	s14, s0
 80015ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ee:	eef4 7a47 	vcmp.f32	s15, s14
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00f      	beq.n	8001622 <_Z11StartTask02Pv+0x76>
				currentDirrection = discharging;
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <_Z11StartTask02Pv+0xc4>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
				if (low > 26) {
 8001608:	edd7 7a03 	vldr	s15, [r7, #12]
 800160c:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8001610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	dd1b      	ble.n	8001652 <_Z11StartTask02Pv+0xa6>
					faultCondition = overCurrentCharge;
 800161a:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <_Z11StartTask02Pv+0xc8>)
 800161c:	2205      	movs	r2, #5
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	e017      	b.n	8001652 <_Z11StartTask02Pv+0xa6>
				}
			} else { // Else current will be negative, thus charging
				currentDirrection = charging;
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <_Z11StartTask02Pv+0xc4>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
				if (abs(low) > 60) {
 8001628:	ed97 0a03 	vldr	s0, [r7, #12]
 800162c:	f7ff febb 	bl	80013a6 <_ZSt3absf>
 8001630:	eef0 7a40 	vmov.f32	s15, s0
 8001634:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001678 <_Z11StartTask02Pv+0xcc>
 8001638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	bfcc      	ite	gt
 8001642:	2301      	movgt	r3, #1
 8001644:	2300      	movle	r3, #0
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <_Z11StartTask02Pv+0xa6>
					faultCondition = overCurrentDischarge;
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <_Z11StartTask02Pv+0xc8>)
 800164e:	2206      	movs	r2, #6
 8001650:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		BMS.lowCurrent_A = low;
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <_Z11StartTask02Pv+0xd0>)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6213      	str	r3, [r2, #32]
		fb.value = low;
 8001658:	4a09      	ldr	r2, [pc, #36]	@ (8001680 <_Z11StartTask02Pv+0xd4>)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6013      	str	r3, [r2, #0]

		osDelay(50);
 800165e:	2032      	movs	r0, #50	@ 0x32
 8001660:	f00a fe66 	bl	800c330 <osDelay>
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 8001664:	e7a6      	b.n	80015b4 <_Z11StartTask02Pv+0x8>
 8001666:	bf00      	nop
 8001668:	20000728 	.word	0x20000728
 800166c:	20000328 	.word	0x20000328
 8001670:	20000324 	.word	0x20000324
 8001674:	20000323 	.word	0x20000323
 8001678:	42700000 	.word	0x42700000
 800167c:	20000378 	.word	0x20000378
 8001680:	200006d0 	.word	0x200006d0

08001684 <_Z11StartTask03Pv>:
	}
}

// VOLTAGE MONITORING TASK
void StartTask03(void *argument) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b096      	sub	sp, #88	@ 0x58
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
    int16_t cellVoltages[32] = {0};
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	2240      	movs	r2, #64	@ 0x40
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f00e feda 	bl	801044e <memset>
    uint16_t highestCell = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint16_t lowestCell = 10000;
 80016a0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80016a4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    BMS.highVoltageIndex = 0;
 80016a8:	4b51      	ldr	r3, [pc, #324]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	731a      	strb	r2, [r3, #12]
    BMS.lowVoltageIndex = 0;
 80016ae:	4b50      	ldr	r3, [pc, #320]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	735a      	strb	r2, [r3, #13]
    uint32_t total = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	653b      	str	r3, [r7, #80]	@ 0x50
    uint8_t active_cell_count = 0;  // Count of non-excluded cells
 80016b8:	2300      	movs	r3, #0
 80016ba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    for(;;) {
        total = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	653b      	str	r3, [r7, #80]	@ 0x50
        highestCell = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        lowestCell = 10000;
 80016c8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80016cc:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        active_cell_count = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        bqChips.readVoltages();
 80016d6:	4847      	ldr	r0, [pc, #284]	@ (80017f4 <_Z11StartTask03Pv+0x170>)
 80016d8:	f7ff fdaa 	bl	8001230 <_ZN7BQChips12readVoltagesEv>
        bqChips.getAll32CellVoltages(cellVoltages);
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	4619      	mov	r1, r3
 80016e2:	4844      	ldr	r0, [pc, #272]	@ (80017f4 <_Z11StartTask03Pv+0x170>)
 80016e4:	f7ff fe41 	bl	800136a <_ZN7BQChips20getAll32CellVoltagesEPs>

        for (int i = 0; i < 32; i++) {
 80016e8:	2300      	movs	r3, #0
 80016ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016ec:	e04d      	b.n	800178a <_Z11StartTask03Pv+0x106>
            // Skip if cell is excluded from voltage monitoring
        	if (BMS.voltageExclusionList[i] == 0) {
 80016ee:	4a40      	ldr	r2, [pc, #256]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 80016f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d041      	beq.n	8001782 <_Z11StartTask03Pv+0xfe>
        		continue;
        	}

            BMS.cellVoltages[i] = bqChips.getCellVoltage(i);
 80016fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001700:	483c      	ldr	r0, [pc, #240]	@ (80017f4 <_Z11StartTask03Pv+0x170>)
 8001702:	f7ff fe23 	bl	800134c <_ZN7BQChips14getCellVoltageEi>
 8001706:	4603      	mov	r3, r0
 8001708:	b299      	uxth	r1, r3
 800170a:	4a39      	ldr	r2, [pc, #228]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 800170c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800170e:	3314      	adds	r3, #20
 8001710:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

            if (BMS.cellVoltages[i] > highestCell) {
 8001714:	4a36      	ldr	r2, [pc, #216]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 8001716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001718:	3314      	adds	r3, #20
 800171a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800171e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8001722:	429a      	cmp	r2, r3
 8001724:	d20a      	bcs.n	800173c <_Z11StartTask03Pv+0xb8>
                highestCell = BMS.cellVoltages[i];
 8001726:	4a32      	ldr	r2, [pc, #200]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 8001728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800172a:	3314      	adds	r3, #20
 800172c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001730:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                BMS.highVoltageIndex = i;
 8001734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 800173a:	731a      	strb	r2, [r3, #12]
            }

            if(BMS.cellVoltages[i] < lowestCell) {
 800173c:	4a2c      	ldr	r2, [pc, #176]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 800173e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001740:	3314      	adds	r3, #20
 8001742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001746:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800174a:	429a      	cmp	r2, r3
 800174c:	d90a      	bls.n	8001764 <_Z11StartTask03Pv+0xe0>
                lowestCell = BMS.cellVoltages[i];
 800174e:	4a28      	ldr	r2, [pc, #160]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 8001750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001752:	3314      	adds	r3, #20
 8001754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001758:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
                BMS.lowVoltageIndex = i;
 800175c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 8001762:	735a      	strb	r2, [r3, #13]
            }

            total += BMS.cellVoltages[i];
 8001764:	4a22      	ldr	r2, [pc, #136]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 8001766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001768:	3314      	adds	r3, #20
 800176a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800176e:	461a      	mov	r2, r3
 8001770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001772:	4413      	add	r3, r2
 8001774:	653b      	str	r3, [r7, #80]	@ 0x50
            active_cell_count++;
 8001776:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800177a:	3301      	adds	r3, #1
 800177c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001780:	e000      	b.n	8001784 <_Z11StartTask03Pv+0x100>
        		continue;
 8001782:	bf00      	nop
        for (int i = 0; i < 32; i++) {
 8001784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001786:	3301      	adds	r3, #1
 8001788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800178a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800178c:	2b1f      	cmp	r3, #31
 800178e:	ddae      	ble.n	80016ee <_Z11StartTask03Pv+0x6a>
        }

        // Only calculate average if we have active cells
        if (active_cell_count > 0) {
 8001790:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001794:	2b00      	cmp	r3, #0
 8001796:	d027      	beq.n	80017e8 <_Z11StartTask03Pv+0x164>
            BMS.totalVoltage_mV = total;
 8001798:	4a15      	ldr	r2, [pc, #84]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 800179a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800179c:	6093      	str	r3, [r2, #8]
            BMS.avgVoltage_mV = (uint16_t)(total/active_cell_count);
 800179e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80017a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 80017ac:	809a      	strh	r2, [r3, #4]
            BMS.lowVoltage_mV = lowestCell;
 80017ae:	4a10      	ldr	r2, [pc, #64]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 80017b0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80017b4:	8053      	strh	r3, [r2, #2]
            BMS.highVoltage_mV = highestCell;
 80017b6:	4a0e      	ldr	r2, [pc, #56]	@ (80017f0 <_Z11StartTask03Pv+0x16c>)
 80017b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80017bc:	8013      	strh	r3, [r2, #0]

            numBytes.value = total;
 80017be:	4a0e      	ldr	r2, [pc, #56]	@ (80017f8 <_Z11StartTask03Pv+0x174>)
 80017c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017c2:	6013      	str	r3, [r2, #0]

            // Only check voltage limits for non-excluded cells
            if (lowestCell < 2500) {
 80017c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80017c8:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d802      	bhi.n	80017d6 <_Z11StartTask03Pv+0x152>
                faultCondition = lowCellVoltage;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <_Z11StartTask03Pv+0x178>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
            }
            if (highestCell > 4200) {
 80017d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80017da:	f241 0268 	movw	r2, #4200	@ 0x1068
 80017de:	4293      	cmp	r3, r2
 80017e0:	d902      	bls.n	80017e8 <_Z11StartTask03Pv+0x164>
                faultCondition = highCellVoltage;
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <_Z11StartTask03Pv+0x178>)
 80017e4:	2202      	movs	r2, #2
 80017e6:	701a      	strb	r2, [r3, #0]
            }
        }

        osDelay(100);
 80017e8:	2064      	movs	r0, #100	@ 0x64
 80017ea:	f00a fda1 	bl	800c330 <osDelay>
    }
 80017ee:	e766      	b.n	80016be <_Z11StartTask03Pv+0x3a>
 80017f0:	20000378 	.word	0x20000378
 80017f4:	20000680 	.word	0x20000680
 80017f8:	200006d4 	.word	0x200006d4
 80017fc:	20000323 	.word	0x20000323

08001800 <_Z11StartTask04Pv>:
}

// TEMPERATURE MONITORING TASK
void StartTask04(void *argument) {
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b0a9      	sub	sp, #164	@ 0xa4
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
    uint32_t rawData[32];
    float highestCell = 0.0;
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float lowestCell = 1000.0;
 8001810:	4b8c      	ldr	r3, [pc, #560]	@ (8001a44 <_Z11StartTask04Pv+0x244>)
 8001812:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    BMS.highTempIndex = 0;
 8001816:	4b8c      	ldr	r3, [pc, #560]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 8001818:	2200      	movs	r2, #0
 800181a:	839a      	strh	r2, [r3, #28]
    BMS.lowTempIndex = 0;
 800181c:	4b8a      	ldr	r3, [pc, #552]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 800181e:	2200      	movs	r2, #0
 8001820:	83da      	strh	r2, [r3, #30]
    float total = 0;
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t active_temp_count = 0;  // Count of non-excluded temperature sensors
 800182a:	2300      	movs	r3, #0
 800182c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

    for(;;) {
        total = 0;
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        highestCell = 0.0;
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        lowestCell = 1000.0;
 8001840:	4b80      	ldr	r3, [pc, #512]	@ (8001a44 <_Z11StartTask04Pv+0x244>)
 8001842:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        active_temp_count = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

        for (int i = 0; i < 4; i++) {
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001852:	e0ae      	b.n	80019b2 <_Z11StartTask04Pv+0x1b2>
            for (uint8_t ch = 0; ch < 8; ch++) {
 8001854:	2300      	movs	r3, #0
 8001856:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 800185a:	e0a0      	b.n	800199e <_Z11StartTask04Pv+0x19e>
                uint8_t sensor_index = i*8 + ch;
 800185c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001860:	b2db      	uxtb	r3, r3
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	b2da      	uxtb	r2, r3
 8001866:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800186a:	4413      	add	r3, r2
 800186c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a

                if (BMS.tempExclusionList[i] == 0) {
 8001870:	4a75      	ldr	r2, [pc, #468]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 8001872:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001876:	4413      	add	r3, r2
 8001878:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8087 	beq.w	8001992 <_Z11StartTask04Pv+0x192>
                	continue;
                }

                if (hi2c2.State == HAL_I2C_STATE_READY) {
 8001884:	4b71      	ldr	r3, [pc, #452]	@ (8001a4c <_Z11StartTask04Pv+0x24c>)
 8001886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b20      	cmp	r3, #32
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d07c      	beq.n	8001994 <_Z11StartTask04Pv+0x194>
                    rawData[sensor_index] = temp_adcs[i].readChannelVoltage((ADS7138__MANUAL_CHID)(MANUAL_CHID_AIN0 + ch));
 800189a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	4a6b      	ldr	r2, [pc, #428]	@ (8001a50 <_Z11StartTask04Pv+0x250>)
 80018a2:	4413      	add	r3, r2
 80018a4:	f897 408a 	ldrb.w	r4, [r7, #138]	@ 0x8a
 80018a8:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fad0 	bl	8000e54 <_ZN7ADS713818readChannelVoltageE20ADS7138__MANUAL_CHID>
 80018b4:	4602      	mov	r2, r0
 80018b6:	00a3      	lsls	r3, r4, #2
 80018b8:	33a0      	adds	r3, #160	@ 0xa0
 80018ba:	443b      	add	r3, r7
 80018bc:	f843 2c98 	str.w	r2, [r3, #-152]
                    BMS.allTemperatures[sensor_index] = ADCToTemp(rawData[sensor_index]);
 80018c0:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	33a0      	adds	r3, #160	@ 0xa0
 80018c8:	443b      	add	r3, r7
 80018ca:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80018ce:	f897 408a 	ldrb.w	r4, [r7, #138]	@ 0x8a
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fa46 	bl	8001d64 <_Z9ADCToTempm>
 80018d8:	eef0 7a40 	vmov.f32	s15, s0
 80018dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 80018de:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	3304      	adds	r3, #4
 80018e8:	edc3 7a00 	vstr	s15, [r3]

                    if (BMS.allTemperatures[sensor_index] > highestCell) {
 80018ec:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80018f0:	4a55      	ldr	r2, [pc, #340]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 80018f2:	3328      	adds	r3, #40	@ 0x28
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	3304      	adds	r3, #4
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8001902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	d50e      	bpl.n	800192a <_Z11StartTask04Pv+0x12a>
                        highestCell = BMS.allTemperatures[sensor_index];
 800190c:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001910:	4a4d      	ldr	r2, [pc, #308]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 8001912:	3328      	adds	r3, #40	@ 0x28
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	3304      	adds	r3, #4
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                        BMS.highTempIndex = sensor_index;
 8001920:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001924:	b29a      	uxth	r2, r3
 8001926:	4b48      	ldr	r3, [pc, #288]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 8001928:	839a      	strh	r2, [r3, #28]
                    }
                    if (BMS.allTemperatures[sensor_index] < lowestCell) {
 800192a:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800192e:	4a46      	ldr	r2, [pc, #280]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 8001930:	3328      	adds	r3, #40	@ 0x28
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	3304      	adds	r3, #4
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	dd0e      	ble.n	8001968 <_Z11StartTask04Pv+0x168>
                        lowestCell = BMS.allTemperatures[sensor_index];
 800194a:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800194e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 8001950:	3328      	adds	r3, #40	@ 0x28
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	3304      	adds	r3, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                        BMS.lowTempIndex = sensor_index;
 800195e:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b38      	ldr	r3, [pc, #224]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 8001966:	83da      	strh	r2, [r3, #30]
                    }
                    total += BMS.allTemperatures[sensor_index];
 8001968:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800196c:	4a36      	ldr	r2, [pc, #216]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 800196e:	3328      	adds	r3, #40	@ 0x28
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800197e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001982:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
                    active_temp_count++;
 8001986:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800198a:	3301      	adds	r3, #1
 800198c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8001990:	e000      	b.n	8001994 <_Z11StartTask04Pv+0x194>
                	continue;
 8001992:	bf00      	nop
            for (uint8_t ch = 0; ch < 8; ch++) {
 8001994:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001998:	3301      	adds	r3, #1
 800199a:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 800199e:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80019a2:	2b07      	cmp	r3, #7
 80019a4:	f67f af5a 	bls.w	800185c <_Z11StartTask04Pv+0x5c>
        for (int i = 0; i < 4; i++) {
 80019a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019ac:	3301      	adds	r3, #1
 80019ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80019b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	f77f af4c 	ble.w	8001854 <_Z11StartTask04Pv+0x54>
                }
            }
        }

        // Only calculate average if we have active temperature sensors
        if (0 >= active_temp_count) {
 80019bc:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d104      	bne.n	80019ce <_Z11StartTask04Pv+0x1ce>
            osDelay(1000);
 80019c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019c8:	f00a fcb2 	bl	800c330 <osDelay>
            continue;
 80019cc:	e038      	b.n	8001a40 <_Z11StartTask04Pv+0x240>
        }

        BMS.avgTemp = total/active_temp_count;
 80019ce:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019da:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 80019de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e2:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 80019e4:	edc3 7a06 	vstr	s15, [r3, #24]
        BMS.lowTemp = lowestCell;
 80019e8:	4a17      	ldr	r2, [pc, #92]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 80019ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019ee:	6153      	str	r3, [r2, #20]
        BMS.highTemp = highestCell;
 80019f0:	4a15      	ldr	r2, [pc, #84]	@ (8001a48 <_Z11StartTask04Pv+0x248>)
 80019f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019f6:	6113      	str	r3, [r2, #16]

        // Only check temperature limits for non-excluded sensors
        if (currentDirrection == charging) {
 80019f8:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <_Z11StartTask04Pv+0x254>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d10b      	bne.n	8001a18 <_Z11StartTask04Pv+0x218>
            if (highestCell > 45) {
 8001a00:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001a04:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001a58 <_Z11StartTask04Pv+0x258>
 8001a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	dd02      	ble.n	8001a18 <_Z11StartTask04Pv+0x218>
                faultCondition = overTempCharge;
 8001a12:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <_Z11StartTask04Pv+0x25c>)
 8001a14:	2203      	movs	r2, #3
 8001a16:	701a      	strb	r2, [r3, #0]
            }
        }
        if (currentDirrection == discharging) {
 8001a18:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <_Z11StartTask04Pv+0x254>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10b      	bne.n	8001a38 <_Z11StartTask04Pv+0x238>
            if (highestCell > 60) {
 8001a20:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001a24:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001a60 <_Z11StartTask04Pv+0x260>
 8001a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	dd02      	ble.n	8001a38 <_Z11StartTask04Pv+0x238>
                faultCondition = overTempDischarge;
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <_Z11StartTask04Pv+0x25c>)
 8001a34:	2204      	movs	r2, #4
 8001a36:	701a      	strb	r2, [r3, #0]
            }
        }

        osDelay(1000);
 8001a38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a3c:	f00a fc78 	bl	800c330 <osDelay>
    }
 8001a40:	e6f6      	b.n	8001830 <_Z11StartTask04Pv+0x30>
 8001a42:	bf00      	nop
 8001a44:	447a0000 	.word	0x447a0000
 8001a48:	20000378 	.word	0x20000378
 8001a4c:	20000728 	.word	0x20000728
 8001a50:	20000338 	.word	0x20000338
 8001a54:	20000324 	.word	0x20000324
 8001a58:	42340000 	.word	0x42340000
 8001a5c:	20000323 	.word	0x20000323
 8001a60:	42700000 	.word	0x42700000

08001a64 <_Z11StartTask05Pv>:
}

void StartTask05(void *argument) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	@ 0x30
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

    //setup CAN TX header
    HAL_StatusTypeDef status;
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[8] = { 0 };
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
    uint32_t TxMailbox = { 0 };
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
//        TxData[0] = fb.bytes[0];
//        TxData[1] = fb.bytes[1];
//        TxData[2] = fb.bytes[2];
//        TxData[3] = fb.bytes[3];

    	setUpCAN1(TxHeader, TxData);
 8001a7a:	f107 020c 	add.w	r2, r7, #12
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 f989 	bl	8001d9c <_Z9setUpCAN1R19CAN_TxHeaderTypeDefPh>

        while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001a8a:	bf00      	nop
 8001a8c:	4836      	ldr	r0, [pc, #216]	@ (8001b68 <_Z11StartTask05Pv+0x104>)
 8001a8e:	f001 fe1d 	bl	80036cc <HAL_CAN_GetTxMailboxesFreeLevel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f4      	bne.n	8001a8c <_Z11StartTask05Pv+0x28>
        status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	f107 020c 	add.w	r2, r7, #12
 8001aaa:	f107 0114 	add.w	r1, r7, #20
 8001aae:	482e      	ldr	r0, [pc, #184]	@ (8001b68 <_Z11StartTask05Pv+0x104>)
 8001ab0:	f001 fd3c 	bl	800352c <HAL_CAN_AddTxMessage>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status == HAL_ERROR) {
 8001aba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <_Z11StartTask05Pv+0x62>
            Error_Handler();
 8001ac2:	f000 fead 	bl	8002820 <Error_Handler>
        }

        setUpCAN2(TxHeader, TxData);
 8001ac6:	f107 020c 	add.w	r2, r7, #12
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 f9a5 	bl	8001e20 <_Z9setUpCAN2R19CAN_TxHeaderTypeDefPh>

		while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001ad6:	bf00      	nop
 8001ad8:	4823      	ldr	r0, [pc, #140]	@ (8001b68 <_Z11StartTask05Pv+0x104>)
 8001ada:	f001 fdf7 	bl	80036cc <HAL_CAN_GetTxMailboxesFreeLevel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f4      	bne.n	8001ad8 <_Z11StartTask05Pv+0x74>
		status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001aee:	f107 0308 	add.w	r3, r7, #8
 8001af2:	f107 020c 	add.w	r2, r7, #12
 8001af6:	f107 0114 	add.w	r1, r7, #20
 8001afa:	481b      	ldr	r0, [pc, #108]	@ (8001b68 <_Z11StartTask05Pv+0x104>)
 8001afc:	f001 fd16 	bl	800352c <HAL_CAN_AddTxMessage>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (status == HAL_ERROR) {
 8001b06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <_Z11StartTask05Pv+0xae>
			Error_Handler();
 8001b0e:	f000 fe87 	bl	8002820 <Error_Handler>
		}

		setUpCAN3(TxHeader, TxData);
 8001b12:	f107 020c 	add.w	r2, r7, #12
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f9eb 	bl	8001ef8 <_Z9setUpCAN3R19CAN_TxHeaderTypeDefPh>

		while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001b22:	bf00      	nop
 8001b24:	4810      	ldr	r0, [pc, #64]	@ (8001b68 <_Z11StartTask05Pv+0x104>)
 8001b26:	f001 fdd1 	bl	80036cc <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f4      	bne.n	8001b24 <_Z11StartTask05Pv+0xc0>
		status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	f107 020c 	add.w	r2, r7, #12
 8001b42:	f107 0114 	add.w	r1, r7, #20
 8001b46:	4808      	ldr	r0, [pc, #32]	@ (8001b68 <_Z11StartTask05Pv+0x104>)
 8001b48:	f001 fcf0 	bl	800352c <HAL_CAN_AddTxMessage>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (status == HAL_ERROR) {
 8001b52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <_Z11StartTask05Pv+0xfa>
			Error_Handler();
 8001b5a:	f000 fe61 	bl	8002820 <Error_Handler>
		}

        osDelay(100);
 8001b5e:	2064      	movs	r0, #100	@ 0x64
 8001b60:	f00a fbe6 	bl	800c330 <osDelay>
    	setUpCAN1(TxHeader, TxData);
 8001b64:	e789      	b.n	8001a7a <_Z11StartTask05Pv+0x16>
 8001b66:	bf00      	nop
 8001b68:	200006d8 	.word	0x200006d8

08001b6c <_Z11StartTask06Pv>:
    }
}

void StartTask06(void *argument) {
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

    for(;;) {

	    //control contactors
    	if (shutdown) {
 8001b74:	4b3e      	ldr	r3, [pc, #248]	@ (8001c70 <_Z11StartTask06Pv+0x104>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d011      	beq.n	8001ba0 <_Z11StartTask06Pv+0x34>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2101      	movs	r1, #1
 8001b80:	483c      	ldr	r0, [pc, #240]	@ (8001c74 <_Z11StartTask06Pv+0x108>)
 8001b82:	f002 fbc3 	bl	800430c <HAL_GPIO_WritePin>
			HAL_Delay(500); // ? May replace later
 8001b86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b8a:	f001 fa8b 	bl	80030a4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2120      	movs	r1, #32
 8001b92:	4839      	ldr	r0, [pc, #228]	@ (8001c78 <_Z11StartTask06Pv+0x10c>)
 8001b94:	f002 fbba 	bl	800430c <HAL_GPIO_WritePin>
			closed = false;
 8001b98:	4b38      	ldr	r3, [pc, #224]	@ (8001c7c <_Z11StartTask06Pv+0x110>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e02e      	b.n	8001bfe <_Z11StartTask06Pv+0x92>
    	} else if (openContactorsDebug == true || ((faultCondition == noFault) && (shutdown == false))) {
 8001ba0:	4b37      	ldr	r3, [pc, #220]	@ (8001c80 <_Z11StartTask06Pv+0x114>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d007      	beq.n	8001bb8 <_Z11StartTask06Pv+0x4c>
 8001ba8:	4b36      	ldr	r3, [pc, #216]	@ (8001c84 <_Z11StartTask06Pv+0x118>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d115      	bne.n	8001bdc <_Z11StartTask06Pv+0x70>
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <_Z11StartTask06Pv+0x104>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d111      	bne.n	8001bdc <_Z11StartTask06Pv+0x70>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2101      	movs	r1, #1
 8001bbc:	482d      	ldr	r0, [pc, #180]	@ (8001c74 <_Z11StartTask06Pv+0x108>)
 8001bbe:	f002 fba5 	bl	800430c <HAL_GPIO_WritePin>
            HAL_Delay(500); // ? May replace later
 8001bc2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bc6:	f001 fa6d 	bl	80030a4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2120      	movs	r1, #32
 8001bce:	482a      	ldr	r0, [pc, #168]	@ (8001c78 <_Z11StartTask06Pv+0x10c>)
 8001bd0:	f002 fb9c 	bl	800430c <HAL_GPIO_WritePin>
            closed = true;
 8001bd4:	4b29      	ldr	r3, [pc, #164]	@ (8001c7c <_Z11StartTask06Pv+0x110>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e010      	b.n	8001bfe <_Z11StartTask06Pv+0x92>
	    } else {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2101      	movs	r1, #1
 8001be0:	4824      	ldr	r0, [pc, #144]	@ (8001c74 <_Z11StartTask06Pv+0x108>)
 8001be2:	f002 fb93 	bl	800430c <HAL_GPIO_WritePin>
            HAL_Delay(500); // ? May replace later
 8001be6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bea:	f001 fa5b 	bl	80030a4 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2120      	movs	r1, #32
 8001bf2:	4821      	ldr	r0, [pc, #132]	@ (8001c78 <_Z11StartTask06Pv+0x10c>)
 8001bf4:	f002 fb8a 	bl	800430c <HAL_GPIO_WritePin>
            closed = false;
 8001bf8:	4b20      	ldr	r3, [pc, #128]	@ (8001c7c <_Z11StartTask06Pv+0x110>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
	    }

        fanSpeedPercentage = 50;
 8001bfe:	4b22      	ldr	r3, [pc, #136]	@ (8001c88 <_Z11StartTask06Pv+0x11c>)
 8001c00:	2232      	movs	r2, #50	@ 0x32
 8001c02:	701a      	strb	r2, [r3, #0]
        //set fan speeds
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, fanSpeedPercentage/2.5);
 8001c04:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <_Z11StartTask06Pv+0x11c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fc9b 	bl	8000544 <__aeabi_i2d>
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	4b1e      	ldr	r3, [pc, #120]	@ (8001c8c <_Z11StartTask06Pv+0x120>)
 8001c14:	f7fe fe2a 	bl	800086c <__aeabi_ddiv>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	491c      	ldr	r1, [pc, #112]	@ (8001c90 <_Z11StartTask06Pv+0x124>)
 8001c1e:	680c      	ldr	r4, [r1, #0]
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7fe ffd0 	bl	8000bc8 <__aeabi_d2uiz>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	6363      	str	r3, [r4, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, fanSpeedPercentage/2.5);
 8001c2c:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <_Z11StartTask06Pv+0x11c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc87 	bl	8000544 <__aeabi_i2d>
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <_Z11StartTask06Pv+0x120>)
 8001c3c:	f7fe fe16 	bl	800086c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4913      	ldr	r1, [pc, #76]	@ (8001c94 <_Z11StartTask06Pv+0x128>)
 8001c46:	680c      	ldr	r4, [r1, #0]
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ffbc 	bl	8000bc8 <__aeabi_d2uiz>
 8001c50:	4603      	mov	r3, r0
 8001c52:	6363      	str	r3, [r4, #52]	@ 0x34

        send_bms_data(BMS.cellVoltages, BMS.allTemperatures, BMS.lowCurrent_A);
 8001c54:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <_Z11StartTask06Pv+0x12c>)
 8001c56:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5e:	490f      	ldr	r1, [pc, #60]	@ (8001c9c <_Z11StartTask06Pv+0x130>)
 8001c60:	480f      	ldr	r0, [pc, #60]	@ (8001ca0 <_Z11StartTask06Pv+0x134>)
 8001c62:	f000 f97d 	bl	8001f60 <_Z13send_bms_dataPtPff>

      osDelay(100);
 8001c66:	2064      	movs	r0, #100	@ 0x64
 8001c68:	f00a fb62 	bl	800c330 <osDelay>
    	if (shutdown) {
 8001c6c:	e782      	b.n	8001b74 <_Z11StartTask06Pv+0x8>
 8001c6e:	bf00      	nop
 8001c70:	20000321 	.word	0x20000321
 8001c74:	48000400 	.word	0x48000400
 8001c78:	48000800 	.word	0x48000800
 8001c7c:	20000322 	.word	0x20000322
 8001c80:	20000320 	.word	0x20000320
 8001c84:	20000323 	.word	0x20000323
 8001c88:	20000325 	.word	0x20000325
 8001c8c:	40040000 	.word	0x40040000
 8001c90:	20000824 	.word	0x20000824
 8001c94:	20000870 	.word	0x20000870
 8001c98:	20000378 	.word	0x20000378
 8001c9c:	2000041c 	.word	0x2000041c
 8001ca0:	200003a0 	.word	0x200003a0

08001ca4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001cae:	4a1c      	ldr	r2, [pc, #112]	@ (8001d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f001 fd3f 	bl	8003736 <HAL_CAN_GetRxMessage>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	bf14      	ite	ne
 8001cbe:	2301      	movne	r3, #1
 8001cc0:	2300      	moveq	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
        Error_Handler();
 8001cc8:	f000 fdaa 	bl	8002820 <Error_Handler>
    }

    if (0x7FF == RxHeader.StdId) {
 8001ccc:	4b14      	ldr	r3, [pc, #80]	@ (8001d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
    	if ((RxData[1] & 0x08) != 0x00) {
 8001cd8:	4b10      	ldr	r3, [pc, #64]	@ (8001d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
			openContactorsDebug = true;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	e002      	b.n	8001cf2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		} else {
			openContactorsDebug = false;
 8001cec:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
		}
    }

    if (0x7 == RxHeader.StdId) {
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b07      	cmp	r3, #7
 8001cf8:	d10c      	bne.n	8001d14 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
    	if (RxData[1] & (1 << 4)) {
 8001cfa:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001cfc:	785b      	ldrb	r3, [r3, #1]
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
    		shutdown = true;
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
    	} else {
    		shutdown = false;
    	}
    }

}
 8001d0c:	e002      	b.n	8001d14 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
    		shutdown = false;
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000318 	.word	0x20000318
 8001d20:	200002fc 	.word	0x200002fc
 8001d24:	20000320 	.word	0x20000320
 8001d28:	20000321 	.word	0x20000321

08001d2c <_Z13ADCToCurrentLm>:

float ADCToCurrentL(uint32_t adc_val) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

    // Constant offset for linear estimator
    static constexpr float b = -62.87;

    // Convert ADC value to current
    return (float)adc_val * m + b;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d3e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001d5c <_Z13ADCToCurrentLm+0x30>
 8001d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d46:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001d60 <_Z13ADCToCurrentLm+0x34>
 8001d4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8001d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	3af84018 	.word	0x3af84018
 8001d60:	427b7ae1 	.word	0x427b7ae1

08001d64 <_Z9ADCToTempm>:
	float x = ((float)adc_val) * (3.3/4096.0);

	return (thermCoeffA * x*x) + (thermCoeffB * x) + thermCoeffC;
}

float ADCToTemp(uint32_t adc_val) {
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

    // Constant offset for linear estimator
    static constexpr float b = 19000.0 / 1180;

    // Convert ADC value to temperature
    return (float)adc_val * m + b;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d76:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001d94 <_Z9ADCToTempm+0x30>
 8001d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001d98 <_Z9ADCToTempm+0x34>
 8001d82:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001d86:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	3a5e27eb 	.word	0x3a5e27eb
 8001d98:	4180d045 	.word	0x4180d045

08001d9c <_Z9setUpCAN1R19CAN_TxHeaderTypeDefPh>:



void setUpCAN1(CAN_TxHeaderTypeDef &Header, uint8_t* data){
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
	Header.IDE = CAN_ID_STD; // Standard ID (not extended)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
	Header.StdId = 0x4; // 11 bit Identifier
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2204      	movs	r2, #4
 8001db0:	601a      	str	r2, [r3, #0]
	Header.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
	Header.DLC = 8; // 8 bytes being transmitted
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2208      	movs	r2, #8
 8001dbc:	611a      	str	r2, [r3, #16]

	data[0] = numBytes.bytes[0]; // Voltage
 8001dbe:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <_Z9setUpCAN1R19CAN_TxHeaderTypeDefPh+0x7c>)
 8001dc0:	781a      	ldrb	r2, [r3, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	701a      	strb	r2, [r3, #0]
	data[1] = numBytes.bytes[1];
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	4a13      	ldr	r2, [pc, #76]	@ (8001e18 <_Z9setUpCAN1R19CAN_TxHeaderTypeDefPh+0x7c>)
 8001dcc:	7852      	ldrb	r2, [r2, #1]
 8001dce:	701a      	strb	r2, [r3, #0]
	data[2] = numBytes.bytes[2];
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	4a10      	ldr	r2, [pc, #64]	@ (8001e18 <_Z9setUpCAN1R19CAN_TxHeaderTypeDefPh+0x7c>)
 8001dd6:	7892      	ldrb	r2, [r2, #2]
 8001dd8:	701a      	strb	r2, [r3, #0]
	data[3] = numBytes.bytes[3];
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	3303      	adds	r3, #3
 8001dde:	4a0e      	ldr	r2, [pc, #56]	@ (8001e18 <_Z9setUpCAN1R19CAN_TxHeaderTypeDefPh+0x7c>)
 8001de0:	78d2      	ldrb	r2, [r2, #3]
 8001de2:	701a      	strb	r2, [r3, #0]

	data[4] = fb.bytes[0]; // Current
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	3304      	adds	r3, #4
 8001de8:	4a0c      	ldr	r2, [pc, #48]	@ (8001e1c <_Z9setUpCAN1R19CAN_TxHeaderTypeDefPh+0x80>)
 8001dea:	7812      	ldrb	r2, [r2, #0]
 8001dec:	701a      	strb	r2, [r3, #0]
	data[5] = fb.bytes[1];
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	3305      	adds	r3, #5
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <_Z9setUpCAN1R19CAN_TxHeaderTypeDefPh+0x80>)
 8001df4:	7852      	ldrb	r2, [r2, #1]
 8001df6:	701a      	strb	r2, [r3, #0]
	data[6] = fb.bytes[2];
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	3306      	adds	r3, #6
 8001dfc:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <_Z9setUpCAN1R19CAN_TxHeaderTypeDefPh+0x80>)
 8001dfe:	7892      	ldrb	r2, [r2, #2]
 8001e00:	701a      	strb	r2, [r3, #0]
	data[7] = fb.bytes[3];
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	3307      	adds	r3, #7
 8001e06:	4a05      	ldr	r2, [pc, #20]	@ (8001e1c <_Z9setUpCAN1R19CAN_TxHeaderTypeDefPh+0x80>)
 8001e08:	78d2      	ldrb	r2, [r2, #3]
 8001e0a:	701a      	strb	r2, [r3, #0]

}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	200006d4 	.word	0x200006d4
 8001e1c:	200006d0 	.word	0x200006d0

08001e20 <_Z9setUpCAN2R19CAN_TxHeaderTypeDefPh>:

void setUpCAN2(CAN_TxHeaderTypeDef &Header, uint8_t* data){
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
	Header.IDE = CAN_ID_STD; // Standard ID (not extended)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
	Header.StdId = 0x5; // 11 bit Identifier
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2205      	movs	r2, #5
 8001e34:	601a      	str	r2, [r3, #0]
	Header.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	60da      	str	r2, [r3, #12]
	Header.DLC = 8; // 8 bytes being transmitted
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2208      	movs	r2, #8
 8001e40:	611a      	str	r2, [r3, #16]

	data[0] = (uint8_t)BMS.lowVoltage_mV;
 8001e42:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef0 <_Z9setUpCAN2R19CAN_TxHeaderTypeDefPh+0xd0>)
 8001e44:	885b      	ldrh	r3, [r3, #2]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	701a      	strb	r2, [r3, #0]
	data[1] = (uint8_t)(BMS.lowVoltage_mV >> 8);
 8001e4c:	4b28      	ldr	r3, [pc, #160]	@ (8001ef0 <_Z9setUpCAN2R19CAN_TxHeaderTypeDefPh+0xd0>)
 8001e4e:	885b      	ldrh	r3, [r3, #2]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	3301      	adds	r3, #1
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	701a      	strb	r2, [r3, #0]
	data[2] = (uint8_t)BMS.highVoltage_mV;
 8001e5c:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <_Z9setUpCAN2R19CAN_TxHeaderTypeDefPh+0xd0>)
 8001e5e:	881a      	ldrh	r2, [r3, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	3302      	adds	r3, #2
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	701a      	strb	r2, [r3, #0]
	data[3] = (uint8_t)(BMS.highVoltage_mV >> 8);
 8001e68:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <_Z9setUpCAN2R19CAN_TxHeaderTypeDefPh+0xd0>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3303      	adds	r3, #3
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]

	data[4] = (uint8_t)(BMS.highTemp * 1000.0f + 0.5f);
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <_Z9setUpCAN2R19CAN_TxHeaderTypeDefPh+0xd0>)
 8001e7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e7e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001ef4 <_Z9setUpCAN2R19CAN_TxHeaderTypeDefPh+0xd4>
 8001e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001e8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3304      	adds	r3, #4
 8001e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e96:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e9a:	793a      	ldrb	r2, [r7, #4]
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	701a      	strb	r2, [r3, #0]
	data[5] = ((uint16_t)(BMS.highTemp * 1000.0f + 0.5f)) >> 8;
 8001ea0:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <_Z9setUpCAN2R19CAN_TxHeaderTypeDefPh+0xd0>)
 8001ea2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ea6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001ef4 <_Z9setUpCAN2R19CAN_TxHeaderTypeDefPh+0xd4>
 8001eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001eb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eba:	ee17 3a90 	vmov	r3, s15
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	3305      	adds	r3, #5
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	701a      	strb	r2, [r3, #0]
	data[6] = BMS.lowVoltageIndex;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	3306      	adds	r3, #6
 8001ed0:	4a07      	ldr	r2, [pc, #28]	@ (8001ef0 <_Z9setUpCAN2R19CAN_TxHeaderTypeDefPh+0xd0>)
 8001ed2:	7b52      	ldrb	r2, [r2, #13]
 8001ed4:	701a      	strb	r2, [r3, #0]
	data[7] = BMS.highTempIndex;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <_Z9setUpCAN2R19CAN_TxHeaderTypeDefPh+0xd0>)
 8001ed8:	8b9a      	ldrh	r2, [r3, #28]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	3307      	adds	r3, #7
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000378 	.word	0x20000378
 8001ef4:	447a0000 	.word	0x447a0000

08001ef8 <_Z9setUpCAN3R19CAN_TxHeaderTypeDefPh>:

void setUpCAN3(CAN_TxHeaderTypeDef &Header, uint8_t* data){
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
	Header.IDE = CAN_ID_STD; // Standard ID (not extended)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
	Header.StdId = 0x6; // 11 bit Identifier
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2206      	movs	r2, #6
 8001f0c:	601a      	str	r2, [r3, #0]
	Header.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
	Header.DLC = 8; // 8 bytes being transmitted
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2208      	movs	r2, #8
 8001f18:	611a      	str	r2, [r3, #16]

	data[0] = faultCondition;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <_Z9setUpCAN3R19CAN_TxHeaderTypeDefPh+0x60>)
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	701a      	strb	r2, [r3, #0]
	data[1] = 0;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	3301      	adds	r3, #1
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
	data[2] = 0;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
	data[3] = 0;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	3303      	adds	r3, #3
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]

	data[4] = 0;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
	data[5] = closed;
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <_Z9setUpCAN3R19CAN_TxHeaderTypeDefPh+0x64>)
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	3305      	adds	r3, #5
 8001f4a:	701a      	strb	r2, [r3, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	20000323 	.word	0x20000323
 8001f5c:	20000322 	.word	0x20000322

08001f60 <_Z13send_bms_dataPtPff>:

void send_bms_data(uint16_t* cell_voltages, float* temperatures, float current) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	ed87 0a01 	vstr	s0, [r7, #4]


    // Copy data into structure
    for(int i = 0; i < 32; i++) {
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e016      	b.n	8001fa2 <_Z13send_bms_dataPtPff+0x42>
        data.voltages[i] = cell_voltages[i];
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	8819      	ldrh	r1, [r3, #0]
 8001f7e:	4a10      	ldr	r2, [pc, #64]	@ (8001fc0 <_Z13send_bms_dataPtPff+0x60>)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        data.temperatures[i] = temperatures[i];
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	490b      	ldr	r1, [pc, #44]	@ (8001fc0 <_Z13send_bms_dataPtPff+0x60>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3310      	adds	r3, #16
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 32; i++) {
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b1f      	cmp	r3, #31
 8001fa6:	dde5      	ble.n	8001f74 <_Z13send_bms_dataPtPff+0x14>
    }
    data.current = current;
 8001fa8:	4a05      	ldr	r2, [pc, #20]	@ (8001fc0 <_Z13send_bms_dataPtPff+0x60>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

    // Send the entire structure as raw data
    CDC_Transmit_FS((uint8_t*)&data, sizeof(BMS_Data_t));
 8001fb0:	21c4      	movs	r1, #196	@ 0xc4
 8001fb2:	4803      	ldr	r0, [pc, #12]	@ (8001fc0 <_Z13send_bms_dataPtPff+0x60>)
 8001fb4:	f00c ff62 	bl	800ee7c <CDC_Transmit_FS>
}
 8001fb8:	bf00      	nop
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200004dc 	.word	0x200004dc

08001fc4 <_Z41__static_initialization_and_destruction_0v>:
 8001fc4:	b5b0      	push	{r4, r5, r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
ADS7138 current_adc;
 8001fc8:	480e      	ldr	r0, [pc, #56]	@ (8002004 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8001fca:	f7fe fe1d 	bl	8000c08 <_ZN7ADS7138C1Ev>
ADS7138 temp_adcs[4];
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8001fd0:	2403      	movs	r4, #3
 8001fd2:	461d      	mov	r5, r3
 8001fd4:	e004      	b.n	8001fe0 <_Z41__static_initialization_and_destruction_0v+0x1c>
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f7fe fe16 	bl	8000c08 <_ZN7ADS7138C1Ev>
 8001fdc:	3c01      	subs	r4, #1
 8001fde:	3510      	adds	r5, #16
 8001fe0:	2c00      	cmp	r4, #0
 8001fe2:	daf8      	bge.n	8001fd6 <_Z41__static_initialization_and_destruction_0v+0x12>
BMSData BMS;
 8001fe4:	4809      	ldr	r0, [pc, #36]	@ (800200c <_Z41__static_initialization_and_destruction_0v+0x48>)
 8001fe6:	f7ff f9ee 	bl	80013c6 <_ZN7BMSDataC1Ev>
BQ76952 bqChip1 = BQ76952(); // 16 cells = i2c4
 8001fea:	4809      	ldr	r0, [pc, #36]	@ (8002010 <_Z41__static_initialization_and_destruction_0v+0x4c>)
 8001fec:	f7fe ff5b 	bl	8000ea6 <_ZN7BQ76952C1Ev>
BQ76952 bqChip2 = BQ76952(); // 13 cells = i2c3
 8001ff0:	4808      	ldr	r0, [pc, #32]	@ (8002014 <_Z41__static_initialization_and_destruction_0v+0x50>)
 8001ff2:	f7fe ff58 	bl	8000ea6 <_ZN7BQ76952C1Ev>
BQChips bqChips = BQChips(&bqChip1, &bqChip2);
 8001ff6:	4a07      	ldr	r2, [pc, #28]	@ (8002014 <_Z41__static_initialization_and_destruction_0v+0x50>)
 8001ff8:	4905      	ldr	r1, [pc, #20]	@ (8002010 <_Z41__static_initialization_and_destruction_0v+0x4c>)
 8001ffa:	4807      	ldr	r0, [pc, #28]	@ (8002018 <_Z41__static_initialization_and_destruction_0v+0x54>)
 8001ffc:	f7ff f8f0 	bl	80011e0 <_ZN7BQChipsC1EP7BQ76952S1_>
}
 8002000:	bf00      	nop
 8002002:	bdb0      	pop	{r4, r5, r7, pc}
 8002004:	20000328 	.word	0x20000328
 8002008:	20000338 	.word	0x20000338
 800200c:	20000378 	.word	0x20000378
 8002010:	200005a0 	.word	0x200005a0
 8002014:	20000610 	.word	0x20000610
 8002018:	20000680 	.word	0x20000680

0800201c <_GLOBAL__sub_I_RxHeader>:
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
 8002020:	f7ff ffd0 	bl	8001fc4 <_Z41__static_initialization_and_destruction_0v>
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800202e:	f001 f800 	bl	8003032 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002032:	f000 f89f 	bl	8002174 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002036:	f000 fb23 	bl	8002680 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 800203a:	f000 f8f3 	bl	8002224 <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 800203e:	f000 f92b 	bl	8002298 <_ZL12MX_CAN2_Initv>
  MX_I2C2_Init();
 8002042:	f000 f963 	bl	800230c <_ZL12MX_I2C2_Initv>
  MX_I2C3_Init();
 8002046:	f000 f9af 	bl	80023a8 <_ZL12MX_I2C3_Initv>
  MX_I2C4_Init();
 800204a:	f000 f9fb 	bl	8002444 <_ZL12MX_I2C4_Initv>
  MX_TIM2_Init();
 800204e:	f000 fa47 	bl	80024e0 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8002052:	f000 faad 	bl	80025b0 <_ZL12MX_TIM3_Initv>


  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8002056:	f00c fe3f 	bl	800ecd8 <MX_USB_DEVICE_Init>

  CAN_FilterTypeDef filter = {0};
 800205a:	463b      	mov	r3, r7
 800205c:	2228      	movs	r2, #40	@ 0x28
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f00e f9f4 	bl	801044e <memset>
  filter.FilterActivation = ENABLE;
 8002066:	2301      	movs	r3, #1
 8002068:	623b      	str	r3, [r7, #32]
  filter.FilterBank = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8002076:	2301      	movs	r3, #1
 8002078:	61fb      	str	r3, [r7, #28]

  // Accept ALL messages (for debug/testing)
  filter.FilterIdHigh = 0x0000;
 800207a:	2300      	movs	r3, #0
 800207c:	603b      	str	r3, [r7, #0]
  filter.FilterIdLow = 0x0000;
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
  filter.FilterMaskIdHigh = 0x0000;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
  filter.FilterMaskIdLow = 0x0000;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]

  HAL_CAN_ConfigFilter(&hcan1, &filter);
 800208a:	463b      	mov	r3, r7
 800208c:	4619      	mov	r1, r3
 800208e:	4826      	ldr	r0, [pc, #152]	@ (8002128 <main+0x100>)
 8002090:	f001 f928 	bl	80032e4 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 8002094:	4824      	ldr	r0, [pc, #144]	@ (8002128 <main+0x100>)
 8002096:	f001 fa05 	bl	80034a4 <HAL_CAN_Start>



  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800209a:	2102      	movs	r1, #2
 800209c:	4822      	ldr	r0, [pc, #136]	@ (8002128 <main+0x100>)
 800209e:	f001 fc6c 	bl	800397a <HAL_CAN_ActivateNotification>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <main+0x8e>
  {
	  Error_Handler();
 80020b2:	f000 fbb5 	bl	8002820 <Error_Handler>
  }

  CPP_UserSetup();
 80020b6:	f7ff f9b7 	bl	8001428 <_Z13CPP_UserSetupv>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020ba:	f00a f85d 	bl	800c178 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80020be:	4a1b      	ldr	r2, [pc, #108]	@ (800212c <main+0x104>)
 80020c0:	2100      	movs	r1, #0
 80020c2:	481b      	ldr	r0, [pc, #108]	@ (8002130 <main+0x108>)
 80020c4:	f00a f8a2 	bl	800c20c <osThreadNew>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002134 <main+0x10c>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(StartTask02, NULL, &Voltage_Monitor_attributes);
 80020ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002138 <main+0x110>)
 80020d0:	2100      	movs	r1, #0
 80020d2:	481a      	ldr	r0, [pc, #104]	@ (800213c <main+0x114>)
 80020d4:	f00a f89a 	bl	800c20c <osThreadNew>
 80020d8:	4603      	mov	r3, r0
 80020da:	4a19      	ldr	r2, [pc, #100]	@ (8002140 <main+0x118>)
 80020dc:	6013      	str	r3, [r2, #0]

  /* creation of Temp_Monitoring */
  Temp_MonitoringHandle = osThreadNew(StartTask03, NULL, &Temp_Monitoring_attributes);
 80020de:	4a19      	ldr	r2, [pc, #100]	@ (8002144 <main+0x11c>)
 80020e0:	2100      	movs	r1, #0
 80020e2:	4819      	ldr	r0, [pc, #100]	@ (8002148 <main+0x120>)
 80020e4:	f00a f892 	bl	800c20c <osThreadNew>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4a18      	ldr	r2, [pc, #96]	@ (800214c <main+0x124>)
 80020ec:	6013      	str	r3, [r2, #0]

  /* creation of Current_Monitor */
  Current_MonitorHandle = osThreadNew(StartTask04, NULL, &Current_Monitor_attributes);
 80020ee:	4a18      	ldr	r2, [pc, #96]	@ (8002150 <main+0x128>)
 80020f0:	2100      	movs	r1, #0
 80020f2:	4818      	ldr	r0, [pc, #96]	@ (8002154 <main+0x12c>)
 80020f4:	f00a f88a 	bl	800c20c <osThreadNew>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4a17      	ldr	r2, [pc, #92]	@ (8002158 <main+0x130>)
 80020fc:	6013      	str	r3, [r2, #0]

  /* creation of Battery_Data_Tr */
  Battery_Data_TrHandle = osThreadNew(StartTask05, NULL, &Battery_Data_Tr_attributes);
 80020fe:	4a17      	ldr	r2, [pc, #92]	@ (800215c <main+0x134>)
 8002100:	2100      	movs	r1, #0
 8002102:	4817      	ldr	r0, [pc, #92]	@ (8002160 <main+0x138>)
 8002104:	f00a f882 	bl	800c20c <osThreadNew>
 8002108:	4603      	mov	r3, r0
 800210a:	4a16      	ldr	r2, [pc, #88]	@ (8002164 <main+0x13c>)
 800210c:	6013      	str	r3, [r2, #0]

  /* creation of Update_Fan_Spee */
  Update_Fan_SpeeHandle = osThreadNew(StartTask06, NULL, &Update_Fan_Spee_attributes);
 800210e:	4a16      	ldr	r2, [pc, #88]	@ (8002168 <main+0x140>)
 8002110:	2100      	movs	r1, #0
 8002112:	4816      	ldr	r0, [pc, #88]	@ (800216c <main+0x144>)
 8002114:	f00a f87a 	bl	800c20c <osThreadNew>
 8002118:	4603      	mov	r3, r0
 800211a:	4a15      	ldr	r2, [pc, #84]	@ (8002170 <main+0x148>)
 800211c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800211e:	f00a f84f 	bl	800c1c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002122:	bf00      	nop
 8002124:	e7fd      	b.n	8002122 <main+0xfa>
 8002126:	bf00      	nop
 8002128:	200006d8 	.word	0x200006d8
 800212c:	0801242c 	.word	0x0801242c
 8002130:	0800158d 	.word	0x0800158d
 8002134:	200008bc 	.word	0x200008bc
 8002138:	08012450 	.word	0x08012450
 800213c:	080015ad 	.word	0x080015ad
 8002140:	200008c0 	.word	0x200008c0
 8002144:	08012474 	.word	0x08012474
 8002148:	08001685 	.word	0x08001685
 800214c:	200008c4 	.word	0x200008c4
 8002150:	08012498 	.word	0x08012498
 8002154:	08001801 	.word	0x08001801
 8002158:	200008c8 	.word	0x200008c8
 800215c:	080124bc 	.word	0x080124bc
 8002160:	08001a65 	.word	0x08001a65
 8002164:	200008cc 	.word	0x200008cc
 8002168:	080124e0 	.word	0x080124e0
 800216c:	08001b6d 	.word	0x08001b6d
 8002170:	200008d0 	.word	0x200008d0

08002174 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b096      	sub	sp, #88	@ 0x58
 8002178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	2244      	movs	r2, #68	@ 0x44
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f00e f963 	bl	801044e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002188:	463b      	mov	r3, r7
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
 8002194:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002196:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800219a:	f004 f897 	bl	80062cc <HAL_PWREx_ControlVoltageScaling>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf14      	ite	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	2300      	moveq	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80021ae:	f000 fb37 	bl	8002820 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80021b2:	2322      	movs	r3, #34	@ 0x22
 80021b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80021bc:	2301      	movs	r3, #1
 80021be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021c0:	2340      	movs	r3, #64	@ 0x40
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 f8e3 	bl	8006398 <HAL_RCC_OscConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf14      	ite	ne
 80021d8:	2301      	movne	r3, #1
 80021da:	2300      	moveq	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <_Z18SystemClock_Configv+0x72>
  {
    Error_Handler();
 80021e2:	f000 fb1d 	bl	8002820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e6:	230f      	movs	r3, #15
 80021e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80021ea:	2301      	movs	r3, #1
 80021ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80021f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80021fc:	463b      	mov	r3, r7
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f004 fce3 	bl	8006bcc <HAL_RCC_ClockConfig>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf14      	ite	ne
 800220c:	2301      	movne	r3, #1
 800220e:	2300      	moveq	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8002216:	f000 fb03 	bl	8002820 <Error_Handler>
  }
}
 800221a:	bf00      	nop
 800221c:	3758      	adds	r7, #88	@ 0x58
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002228:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <_ZL12MX_CAN1_Initv+0x6c>)
 800222a:	4a1a      	ldr	r2, [pc, #104]	@ (8002294 <_ZL12MX_CAN1_Initv+0x70>)
 800222c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 800222e:	4b18      	ldr	r3, [pc, #96]	@ (8002290 <_ZL12MX_CAN1_Initv+0x6c>)
 8002230:	2201      	movs	r2, #1
 8002232:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002234:	4b16      	ldr	r3, [pc, #88]	@ (8002290 <_ZL12MX_CAN1_Initv+0x6c>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <_ZL12MX_CAN1_Initv+0x6c>)
 800223c:	2200      	movs	r2, #0
 800223e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002240:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <_ZL12MX_CAN1_Initv+0x6c>)
 8002242:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002246:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002248:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <_ZL12MX_CAN1_Initv+0x6c>)
 800224a:	2200      	movs	r2, #0
 800224c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800224e:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <_ZL12MX_CAN1_Initv+0x6c>)
 8002250:	2200      	movs	r2, #0
 8002252:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002254:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <_ZL12MX_CAN1_Initv+0x6c>)
 8002256:	2200      	movs	r2, #0
 8002258:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <_ZL12MX_CAN1_Initv+0x6c>)
 800225c:	2200      	movs	r2, #0
 800225e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002260:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <_ZL12MX_CAN1_Initv+0x6c>)
 8002262:	2200      	movs	r2, #0
 8002264:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002266:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <_ZL12MX_CAN1_Initv+0x6c>)
 8002268:	2200      	movs	r2, #0
 800226a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800226c:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <_ZL12MX_CAN1_Initv+0x6c>)
 800226e:	2200      	movs	r2, #0
 8002270:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002272:	4807      	ldr	r0, [pc, #28]	@ (8002290 <_ZL12MX_CAN1_Initv+0x6c>)
 8002274:	f000 ff3a 	bl	80030ec <HAL_CAN_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	bf14      	ite	ne
 800227e:	2301      	movne	r3, #1
 8002280:	2300      	moveq	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 8002288:	f000 faca 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200006d8 	.word	0x200006d8
 8002294:	40006400 	.word	0x40006400

08002298 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800229c:	4b19      	ldr	r3, [pc, #100]	@ (8002304 <_ZL12MX_CAN2_Initv+0x6c>)
 800229e:	4a1a      	ldr	r2, [pc, #104]	@ (8002308 <_ZL12MX_CAN2_Initv+0x70>)
 80022a0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 1;
 80022a2:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <_ZL12MX_CAN2_Initv+0x6c>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80022a8:	4b16      	ldr	r3, [pc, #88]	@ (8002304 <_ZL12MX_CAN2_Initv+0x6c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022ae:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <_ZL12MX_CAN2_Initv+0x6c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80022b4:	4b13      	ldr	r3, [pc, #76]	@ (8002304 <_ZL12MX_CAN2_Initv+0x6c>)
 80022b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80022ba:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <_ZL12MX_CAN2_Initv+0x6c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80022c2:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <_ZL12MX_CAN2_Initv+0x6c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80022c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <_ZL12MX_CAN2_Initv+0x6c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80022ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <_ZL12MX_CAN2_Initv+0x6c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80022d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <_ZL12MX_CAN2_Initv+0x6c>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80022da:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <_ZL12MX_CAN2_Initv+0x6c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80022e0:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <_ZL12MX_CAN2_Initv+0x6c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80022e6:	4807      	ldr	r0, [pc, #28]	@ (8002304 <_ZL12MX_CAN2_Initv+0x6c>)
 80022e8:	f000 ff00 	bl	80030ec <HAL_CAN_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	bf14      	ite	ne
 80022f2:	2301      	movne	r3, #1
 80022f4:	2300      	moveq	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 80022fc:	f000 fa90 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000700 	.word	0x20000700
 8002308:	40006800 	.word	0x40006800

0800230c <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002310:	4b22      	ldr	r3, [pc, #136]	@ (800239c <_ZL12MX_I2C2_Initv+0x90>)
 8002312:	4a23      	ldr	r2, [pc, #140]	@ (80023a0 <_ZL12MX_I2C2_Initv+0x94>)
 8002314:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 8002316:	4b21      	ldr	r3, [pc, #132]	@ (800239c <_ZL12MX_I2C2_Initv+0x90>)
 8002318:	4a22      	ldr	r2, [pc, #136]	@ (80023a4 <_ZL12MX_I2C2_Initv+0x98>)
 800231a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800231c:	4b1f      	ldr	r3, [pc, #124]	@ (800239c <_ZL12MX_I2C2_Initv+0x90>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002322:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <_ZL12MX_I2C2_Initv+0x90>)
 8002324:	2201      	movs	r2, #1
 8002326:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002328:	4b1c      	ldr	r3, [pc, #112]	@ (800239c <_ZL12MX_I2C2_Initv+0x90>)
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800232e:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <_ZL12MX_I2C2_Initv+0x90>)
 8002330:	2200      	movs	r2, #0
 8002332:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002334:	4b19      	ldr	r3, [pc, #100]	@ (800239c <_ZL12MX_I2C2_Initv+0x90>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800233a:	4b18      	ldr	r3, [pc, #96]	@ (800239c <_ZL12MX_I2C2_Initv+0x90>)
 800233c:	2200      	movs	r2, #0
 800233e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002340:	4b16      	ldr	r3, [pc, #88]	@ (800239c <_ZL12MX_I2C2_Initv+0x90>)
 8002342:	2200      	movs	r2, #0
 8002344:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002346:	4815      	ldr	r0, [pc, #84]	@ (800239c <_ZL12MX_I2C2_Initv+0x90>)
 8002348:	f002 f835 	bl	80043b6 <HAL_I2C_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 800235c:	f000 fa60 	bl	8002820 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002360:	2100      	movs	r1, #0
 8002362:	480e      	ldr	r0, [pc, #56]	@ (800239c <_ZL12MX_I2C2_Initv+0x90>)
 8002364:	f002 fd76 	bl	8004e54 <HAL_I2CEx_ConfigAnalogFilter>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf14      	ite	ne
 800236e:	2301      	movne	r3, #1
 8002370:	2300      	moveq	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8002378:	f000 fa52 	bl	8002820 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800237c:	2100      	movs	r1, #0
 800237e:	4807      	ldr	r0, [pc, #28]	@ (800239c <_ZL12MX_I2C2_Initv+0x90>)
 8002380:	f002 fdb3 	bl	8004eea <HAL_I2CEx_ConfigDigitalFilter>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf14      	ite	ne
 800238a:	2301      	movne	r3, #1
 800238c:	2300      	moveq	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8002394:	f000 fa44 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000728 	.word	0x20000728
 80023a0:	40005800 	.word	0x40005800
 80023a4:	00100d14 	.word	0x00100d14

080023a8 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023ac:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <_ZL12MX_I2C3_Initv+0x90>)
 80023ae:	4a23      	ldr	r2, [pc, #140]	@ (800243c <_ZL12MX_I2C3_Initv+0x94>)
 80023b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100D14;
 80023b2:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <_ZL12MX_I2C3_Initv+0x90>)
 80023b4:	4a22      	ldr	r2, [pc, #136]	@ (8002440 <_ZL12MX_I2C3_Initv+0x98>)
 80023b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80023b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <_ZL12MX_I2C3_Initv+0x90>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023be:	4b1e      	ldr	r3, [pc, #120]	@ (8002438 <_ZL12MX_I2C3_Initv+0x90>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <_ZL12MX_I2C3_Initv+0x90>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80023ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <_ZL12MX_I2C3_Initv+0x90>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023d0:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <_ZL12MX_I2C3_Initv+0x90>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023d6:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <_ZL12MX_I2C3_Initv+0x90>)
 80023d8:	2200      	movs	r2, #0
 80023da:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023dc:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <_ZL12MX_I2C3_Initv+0x90>)
 80023de:	2200      	movs	r2, #0
 80023e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80023e2:	4815      	ldr	r0, [pc, #84]	@ (8002438 <_ZL12MX_I2C3_Initv+0x90>)
 80023e4:	f001 ffe7 	bl	80043b6 <HAL_I2C_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf14      	ite	ne
 80023ee:	2301      	movne	r3, #1
 80023f0:	2300      	moveq	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 80023f8:	f000 fa12 	bl	8002820 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023fc:	2100      	movs	r1, #0
 80023fe:	480e      	ldr	r0, [pc, #56]	@ (8002438 <_ZL12MX_I2C3_Initv+0x90>)
 8002400:	f002 fd28 	bl	8004e54 <HAL_I2CEx_ConfigAnalogFilter>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8002414:	f000 fa04 	bl	8002820 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002418:	2100      	movs	r1, #0
 800241a:	4807      	ldr	r0, [pc, #28]	@ (8002438 <_ZL12MX_I2C3_Initv+0x90>)
 800241c:	f002 fd65 	bl	8004eea <HAL_I2CEx_ConfigDigitalFilter>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf14      	ite	ne
 8002426:	2301      	movne	r3, #1
 8002428:	2300      	moveq	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8002430:	f000 f9f6 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	2000077c 	.word	0x2000077c
 800243c:	40005c00 	.word	0x40005c00
 8002440:	00100d14 	.word	0x00100d14

08002444 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002448:	4b22      	ldr	r3, [pc, #136]	@ (80024d4 <_ZL12MX_I2C4_Initv+0x90>)
 800244a:	4a23      	ldr	r2, [pc, #140]	@ (80024d8 <_ZL12MX_I2C4_Initv+0x94>)
 800244c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 800244e:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <_ZL12MX_I2C4_Initv+0x90>)
 8002450:	4a22      	ldr	r2, [pc, #136]	@ (80024dc <_ZL12MX_I2C4_Initv+0x98>)
 8002452:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002454:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <_ZL12MX_I2C4_Initv+0x90>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800245a:	4b1e      	ldr	r3, [pc, #120]	@ (80024d4 <_ZL12MX_I2C4_Initv+0x90>)
 800245c:	2201      	movs	r2, #1
 800245e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002460:	4b1c      	ldr	r3, [pc, #112]	@ (80024d4 <_ZL12MX_I2C4_Initv+0x90>)
 8002462:	2200      	movs	r2, #0
 8002464:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002466:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <_ZL12MX_I2C4_Initv+0x90>)
 8002468:	2200      	movs	r2, #0
 800246a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800246c:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <_ZL12MX_I2C4_Initv+0x90>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002472:	4b18      	ldr	r3, [pc, #96]	@ (80024d4 <_ZL12MX_I2C4_Initv+0x90>)
 8002474:	2200      	movs	r2, #0
 8002476:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002478:	4b16      	ldr	r3, [pc, #88]	@ (80024d4 <_ZL12MX_I2C4_Initv+0x90>)
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800247e:	4815      	ldr	r0, [pc, #84]	@ (80024d4 <_ZL12MX_I2C4_Initv+0x90>)
 8002480:	f001 ff99 	bl	80043b6 <HAL_I2C_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf14      	ite	ne
 800248a:	2301      	movne	r3, #1
 800248c:	2300      	moveq	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8002494:	f000 f9c4 	bl	8002820 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002498:	2100      	movs	r1, #0
 800249a:	480e      	ldr	r0, [pc, #56]	@ (80024d4 <_ZL12MX_I2C4_Initv+0x90>)
 800249c:	f002 fcda 	bl	8004e54 <HAL_I2CEx_ConfigAnalogFilter>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf14      	ite	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	2300      	moveq	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 80024b0:	f000 f9b6 	bl	8002820 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80024b4:	2100      	movs	r1, #0
 80024b6:	4807      	ldr	r0, [pc, #28]	@ (80024d4 <_ZL12MX_I2C4_Initv+0x90>)
 80024b8:	f002 fd17 	bl	8004eea <HAL_I2CEx_ConfigDigitalFilter>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf14      	ite	ne
 80024c2:	2301      	movne	r3, #1
 80024c4:	2300      	moveq	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 80024cc:	f000 f9a8 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	200007d0 	.word	0x200007d0
 80024d8:	40008400 	.word	0x40008400
 80024dc:	00100d14 	.word	0x00100d14

080024e0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024f2:	463b      	mov	r3, r7
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	615a      	str	r2, [r3, #20]
 8002502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002504:	4b29      	ldr	r3, [pc, #164]	@ (80025ac <_ZL12MX_TIM2_Initv+0xcc>)
 8002506:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800250a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 800250c:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <_ZL12MX_TIM2_Initv+0xcc>)
 800250e:	2203      	movs	r2, #3
 8002510:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002512:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <_ZL12MX_TIM2_Initv+0xcc>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40-1;
 8002518:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <_ZL12MX_TIM2_Initv+0xcc>)
 800251a:	2227      	movs	r2, #39	@ 0x27
 800251c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251e:	4b23      	ldr	r3, [pc, #140]	@ (80025ac <_ZL12MX_TIM2_Initv+0xcc>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002524:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <_ZL12MX_TIM2_Initv+0xcc>)
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800252a:	4820      	ldr	r0, [pc, #128]	@ (80025ac <_ZL12MX_TIM2_Initv+0xcc>)
 800252c:	f005 fb90 	bl	8007c50 <HAL_TIM_PWM_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	bf14      	ite	ne
 8002536:	2301      	movne	r3, #1
 8002538:	2300      	moveq	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8002540:	f000 f96e 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	4619      	mov	r1, r3
 8002552:	4816      	ldr	r0, [pc, #88]	@ (80025ac <_ZL12MX_TIM2_Initv+0xcc>)
 8002554:	f006 fac0 	bl	8008ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf14      	ite	ne
 800255e:	2301      	movne	r3, #1
 8002560:	2300      	moveq	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8002568:	f000 f95a 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256c:	2360      	movs	r3, #96	@ 0x60
 800256e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800257c:	463b      	mov	r3, r7
 800257e:	2200      	movs	r2, #0
 8002580:	4619      	mov	r1, r3
 8002582:	480a      	ldr	r0, [pc, #40]	@ (80025ac <_ZL12MX_TIM2_Initv+0xcc>)
 8002584:	f005 fdca 	bl	800811c <HAL_TIM_PWM_ConfigChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	bf14      	ite	ne
 800258e:	2301      	movne	r3, #1
 8002590:	2300      	moveq	r3, #0
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8002598:	f000 f942 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800259c:	4803      	ldr	r0, [pc, #12]	@ (80025ac <_ZL12MX_TIM2_Initv+0xcc>)
 800259e:	f000 fb35 	bl	8002c0c <HAL_TIM_MspPostInit>

}
 80025a2:	bf00      	nop
 80025a4:	3728      	adds	r7, #40	@ 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000824 	.word	0x20000824

080025b0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	@ 0x28
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c2:	463b      	mov	r3, r7
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
 80025d0:	615a      	str	r2, [r3, #20]
 80025d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025d4:	4b28      	ldr	r3, [pc, #160]	@ (8002678 <_ZL12MX_TIM3_Initv+0xc8>)
 80025d6:	4a29      	ldr	r2, [pc, #164]	@ (800267c <_ZL12MX_TIM3_Initv+0xcc>)
 80025d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 80025da:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <_ZL12MX_TIM3_Initv+0xc8>)
 80025dc:	2203      	movs	r2, #3
 80025de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e0:	4b25      	ldr	r3, [pc, #148]	@ (8002678 <_ZL12MX_TIM3_Initv+0xc8>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 80025e6:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <_ZL12MX_TIM3_Initv+0xc8>)
 80025e8:	2227      	movs	r2, #39	@ 0x27
 80025ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ec:	4b22      	ldr	r3, [pc, #136]	@ (8002678 <_ZL12MX_TIM3_Initv+0xc8>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f2:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <_ZL12MX_TIM3_Initv+0xc8>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025f8:	481f      	ldr	r0, [pc, #124]	@ (8002678 <_ZL12MX_TIM3_Initv+0xc8>)
 80025fa:	f005 fb29 	bl	8007c50 <HAL_TIM_PWM_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 800260e:	f000 f907 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800261a:	f107 031c 	add.w	r3, r7, #28
 800261e:	4619      	mov	r1, r3
 8002620:	4815      	ldr	r0, [pc, #84]	@ (8002678 <_ZL12MX_TIM3_Initv+0xc8>)
 8002622:	f006 fa59 	bl	8008ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8002636:	f000 f8f3 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800263a:	2360      	movs	r3, #96	@ 0x60
 800263c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800264a:	463b      	mov	r3, r7
 800264c:	2200      	movs	r2, #0
 800264e:	4619      	mov	r1, r3
 8002650:	4809      	ldr	r0, [pc, #36]	@ (8002678 <_ZL12MX_TIM3_Initv+0xc8>)
 8002652:	f005 fd63 	bl	800811c <HAL_TIM_PWM_ConfigChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8002666:	f000 f8db 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800266a:	4803      	ldr	r0, [pc, #12]	@ (8002678 <_ZL12MX_TIM3_Initv+0xc8>)
 800266c:	f000 face 	bl	8002c0c <HAL_TIM_MspPostInit>

}
 8002670:	bf00      	nop
 8002672:	3728      	adds	r7, #40	@ 0x28
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000870 	.word	0x20000870
 800267c:	40000400 	.word	0x40000400

08002680 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	@ 0x28
 8002684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
 8002694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002696:	4b56      	ldr	r3, [pc, #344]	@ (80027f0 <_ZL12MX_GPIO_Initv+0x170>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	4a55      	ldr	r2, [pc, #340]	@ (80027f0 <_ZL12MX_GPIO_Initv+0x170>)
 800269c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026a2:	4b53      	ldr	r3, [pc, #332]	@ (80027f0 <_ZL12MX_GPIO_Initv+0x170>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ae:	4b50      	ldr	r3, [pc, #320]	@ (80027f0 <_ZL12MX_GPIO_Initv+0x170>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	4a4f      	ldr	r2, [pc, #316]	@ (80027f0 <_ZL12MX_GPIO_Initv+0x170>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ba:	4b4d      	ldr	r3, [pc, #308]	@ (80027f0 <_ZL12MX_GPIO_Initv+0x170>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	4b4a      	ldr	r3, [pc, #296]	@ (80027f0 <_ZL12MX_GPIO_Initv+0x170>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	4a49      	ldr	r2, [pc, #292]	@ (80027f0 <_ZL12MX_GPIO_Initv+0x170>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d2:	4b47      	ldr	r3, [pc, #284]	@ (80027f0 <_ZL12MX_GPIO_Initv+0x170>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026de:	4b44      	ldr	r3, [pc, #272]	@ (80027f0 <_ZL12MX_GPIO_Initv+0x170>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	4a43      	ldr	r2, [pc, #268]	@ (80027f0 <_ZL12MX_GPIO_Initv+0x170>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ea:	4b41      	ldr	r3, [pc, #260]	@ (80027f0 <_ZL12MX_GPIO_Initv+0x170>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2134      	movs	r1, #52	@ 0x34
 80026fa:	483e      	ldr	r0, [pc, #248]	@ (80027f4 <_ZL12MX_GPIO_Initv+0x174>)
 80026fc:	f001 fe06 	bl	800430c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 8002700:	2200      	movs	r2, #0
 8002702:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8002706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800270a:	f001 fdff 	bl	800430c <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800270e:	2200      	movs	r2, #0
 8002710:	2107      	movs	r1, #7
 8002712:	4839      	ldr	r0, [pc, #228]	@ (80027f8 <_ZL12MX_GPIO_Initv+0x178>)
 8002714:	f001 fdfa 	bl	800430c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8002718:	2334      	movs	r3, #52	@ 0x34
 800271a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271c:	2301      	movs	r3, #1
 800271e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2300      	movs	r3, #0
 8002726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4619      	mov	r1, r3
 800272e:	4831      	ldr	r0, [pc, #196]	@ (80027f4 <_ZL12MX_GPIO_Initv+0x174>)
 8002730:	f001 fc5a 	bl	8003fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002734:	2308      	movs	r3, #8
 8002736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002738:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800273c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	4619      	mov	r1, r3
 8002748:	482a      	ldr	r0, [pc, #168]	@ (80027f4 <_ZL12MX_GPIO_Initv+0x174>)
 800274a:	f001 fc4d 	bl	8003fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 PA7
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 800274e:	f240 43c3 	movw	r3, #1219	@ 0x4c3
 8002752:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002754:	2301      	movs	r3, #1
 8002756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4619      	mov	r1, r3
 8002766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800276a:	f001 fc3d 	bl	8003fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800276e:	2320      	movs	r3, #32
 8002770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002772:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	4619      	mov	r1, r3
 8002782:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002786:	f001 fc2f 	bl	8003fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800278a:	2307      	movs	r3, #7
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278e:	2301      	movs	r3, #1
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	4815      	ldr	r0, [pc, #84]	@ (80027f8 <_ZL12MX_GPIO_Initv+0x178>)
 80027a2:	f001 fc21 	bl	8003fe8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2105      	movs	r1, #5
 80027aa:	2009      	movs	r0, #9
 80027ac:	f001 fbf2 	bl	8003f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80027b0:	2009      	movs	r0, #9
 80027b2:	f001 fc0b 	bl	8003fcc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2105      	movs	r1, #5
 80027ba:	2017      	movs	r0, #23
 80027bc:	f001 fbea 	bl	8003f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027c0:	2017      	movs	r0, #23
 80027c2:	f001 fc03 	bl	8003fcc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80027c6:	2201      	movs	r2, #1
 80027c8:	2101      	movs	r1, #1
 80027ca:	480b      	ldr	r0, [pc, #44]	@ (80027f8 <_ZL12MX_GPIO_Initv+0x178>)
 80027cc:	f001 fd9e 	bl	800430c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	2104      	movs	r1, #4
 80027d4:	4808      	ldr	r0, [pc, #32]	@ (80027f8 <_ZL12MX_GPIO_Initv+0x178>)
 80027d6:	f001 fd99 	bl	800430c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80027da:	2201      	movs	r2, #1
 80027dc:	2180      	movs	r1, #128	@ 0x80
 80027de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e2:	f001 fd93 	bl	800430c <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 80027e6:	bf00      	nop
 80027e8:	3728      	adds	r7, #40	@ 0x28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	48000800 	.word	0x48000800
 80027f8:	48000400 	.word	0x48000400

080027fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a04      	ldr	r2, [pc, #16]	@ (800281c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800280e:	f000 fc29 	bl	8003064 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40012c00 	.word	0x40012c00

08002820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002824:	b672      	cpsid	i
}
 8002826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <Error_Handler+0x8>

0800282c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <HAL_MspInit+0x4c>)
 8002834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002836:	4a10      	ldr	r2, [pc, #64]	@ (8002878 <HAL_MspInit+0x4c>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6613      	str	r3, [r2, #96]	@ 0x60
 800283e:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <HAL_MspInit+0x4c>)
 8002840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <HAL_MspInit+0x4c>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284e:	4a0a      	ldr	r2, [pc, #40]	@ (8002878 <HAL_MspInit+0x4c>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002854:	6593      	str	r3, [r2, #88]	@ 0x58
 8002856:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <HAL_MspInit+0x4c>)
 8002858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	210f      	movs	r1, #15
 8002866:	f06f 0001 	mvn.w	r0, #1
 800286a:	f001 fb93 	bl	8003f94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	@ 0x30
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a49      	ldr	r2, [pc, #292]	@ (80029c0 <HAL_CAN_MspInit+0x144>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d13a      	bne.n	8002914 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800289e:	4b49      	ldr	r3, [pc, #292]	@ (80029c4 <HAL_CAN_MspInit+0x148>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	4a47      	ldr	r2, [pc, #284]	@ (80029c4 <HAL_CAN_MspInit+0x148>)
 80028a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80028a8:	4b46      	ldr	r3, [pc, #280]	@ (80029c4 <HAL_CAN_MspInit+0x148>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10b      	bne.n	80028c8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80028b0:	4b45      	ldr	r3, [pc, #276]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	4a44      	ldr	r2, [pc, #272]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 80028b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80028bc:	4b42      	ldr	r3, [pc, #264]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c8:	4b3f      	ldr	r3, [pc, #252]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 80028ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028cc:	4a3e      	ldr	r2, [pc, #248]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 80028ce:	f043 0302 	orr.w	r3, r3, #2
 80028d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028d4:	4b3c      	ldr	r3, [pc, #240]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 80028d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ee:	2303      	movs	r3, #3
 80028f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80028f2:	2309      	movs	r3, #9
 80028f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	4619      	mov	r1, r3
 80028fc:	4833      	ldr	r0, [pc, #204]	@ (80029cc <HAL_CAN_MspInit+0x150>)
 80028fe:	f001 fb73 	bl	8003fe8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2105      	movs	r1, #5
 8002906:	2014      	movs	r0, #20
 8002908:	f001 fb44 	bl	8003f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800290c:	2014      	movs	r0, #20
 800290e:	f001 fb5d 	bl	8003fcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002912:	e051      	b.n	80029b8 <HAL_CAN_MspInit+0x13c>
  else if(hcan->Instance==CAN2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2d      	ldr	r2, [pc, #180]	@ (80029d0 <HAL_CAN_MspInit+0x154>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d14c      	bne.n	80029b8 <HAL_CAN_MspInit+0x13c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800291e:	4b2a      	ldr	r3, [pc, #168]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002922:	4a29      	ldr	r2, [pc, #164]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 8002924:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002928:	6593      	str	r3, [r2, #88]	@ 0x58
 800292a:	4b27      	ldr	r3, [pc, #156]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002936:	4b23      	ldr	r3, [pc, #140]	@ (80029c4 <HAL_CAN_MspInit+0x148>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3301      	adds	r3, #1
 800293c:	4a21      	ldr	r2, [pc, #132]	@ (80029c4 <HAL_CAN_MspInit+0x148>)
 800293e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002940:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_CAN_MspInit+0x148>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d10b      	bne.n	8002960 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002948:	4b1f      	ldr	r3, [pc, #124]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 800294a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294c:	4a1e      	ldr	r2, [pc, #120]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 800294e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002952:	6593      	str	r3, [r2, #88]	@ 0x58
 8002954:	4b1c      	ldr	r3, [pc, #112]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002964:	4a18      	ldr	r2, [pc, #96]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800296c:	4b16      	ldr	r3, [pc, #88]	@ (80029c8 <HAL_CAN_MspInit+0x14c>)
 800296e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002978:	2320      	movs	r3, #32
 800297a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002984:	2303      	movs	r3, #3
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8002988:	2303      	movs	r3, #3
 800298a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	4619      	mov	r1, r3
 8002992:	480e      	ldr	r0, [pc, #56]	@ (80029cc <HAL_CAN_MspInit+0x150>)
 8002994:	f001 fb28 	bl	8003fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002998:	2340      	movs	r3, #64	@ 0x40
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 80029a8:	2308      	movs	r3, #8
 80029aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	4619      	mov	r1, r3
 80029b2:	4806      	ldr	r0, [pc, #24]	@ (80029cc <HAL_CAN_MspInit+0x150>)
 80029b4:	f001 fb18 	bl	8003fe8 <HAL_GPIO_Init>
}
 80029b8:	bf00      	nop
 80029ba:	3730      	adds	r7, #48	@ 0x30
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40006400 	.word	0x40006400
 80029c4:	200008d4 	.word	0x200008d4
 80029c8:	40021000 	.word	0x40021000
 80029cc:	48000400 	.word	0x48000400
 80029d0:	40006800 	.word	0x40006800

080029d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b0b0      	sub	sp, #192	@ 0xc0
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029ec:	f107 0320 	add.w	r3, r7, #32
 80029f0:	228c      	movs	r2, #140	@ 0x8c
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f00d fd2a 	bl	801044e <memset>
  if(hi2c->Instance==I2C2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a64      	ldr	r2, [pc, #400]	@ (8002b90 <HAL_I2C_MspInit+0x1bc>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d13c      	bne.n	8002a7e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a04:	2380      	movs	r3, #128	@ 0x80
 8002a06:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a0c:	f107 0320 	add.w	r3, r7, #32
 8002a10:	4618      	mov	r0, r3
 8002a12:	f004 fb19 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a1c:	f7ff ff00 	bl	8002820 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a20:	4b5c      	ldr	r3, [pc, #368]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a24:	4a5b      	ldr	r2, [pc, #364]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a2c:	4b59      	ldr	r3, [pc, #356]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	69fb      	ldr	r3, [r7, #28]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002a38:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a40:	2312      	movs	r3, #18
 8002a42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a52:	2304      	movs	r3, #4
 8002a54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a58:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	484e      	ldr	r0, [pc, #312]	@ (8002b98 <HAL_I2C_MspInit+0x1c4>)
 8002a60:	f001 fac2 	bl	8003fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a64:	4b4b      	ldr	r3, [pc, #300]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a68:	4a4a      	ldr	r2, [pc, #296]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002a6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a70:	4b48      	ldr	r3, [pc, #288]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002a7c:	e083      	b.n	8002b86 <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C3)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a46      	ldr	r2, [pc, #280]	@ (8002b9c <HAL_I2C_MspInit+0x1c8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d13c      	bne.n	8002b02 <HAL_I2C_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002a88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a8c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a92:	f107 0320 	add.w	r3, r7, #32
 8002a96:	4618      	mov	r0, r3
 8002a98:	f004 fad6 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8002aa2:	f7ff febd 	bl	8002820 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aaa:	4a3a      	ldr	r2, [pc, #232]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ab2:	4b38      	ldr	r3, [pc, #224]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ac4:	2312      	movs	r3, #18
 8002ac6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002adc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	482f      	ldr	r0, [pc, #188]	@ (8002ba0 <HAL_I2C_MspInit+0x1cc>)
 8002ae4:	f001 fa80 	bl	8003fe8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aec:	4a29      	ldr	r2, [pc, #164]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002aee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af4:	4b27      	ldr	r3, [pc, #156]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	693b      	ldr	r3, [r7, #16]
}
 8002b00:	e041      	b.n	8002b86 <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C4)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a27      	ldr	r2, [pc, #156]	@ (8002ba4 <HAL_I2C_MspInit+0x1d0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d13c      	bne.n	8002b86 <HAL_I2C_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002b0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b10:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002b12:	2300      	movs	r3, #0
 8002b14:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b16:	f107 0320 	add.w	r3, r7, #32
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 fa94 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_I2C_MspInit+0x156>
      Error_Handler();
 8002b26:	f7ff fe7b 	bl	8002820 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2e:	4a19      	ldr	r2, [pc, #100]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b36:	4b17      	ldr	r3, [pc, #92]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b42:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002b46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b4a:	2312      	movs	r3, #18
 8002b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b56:	2303      	movs	r3, #3
 8002b58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b62:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002b66:	4619      	mov	r1, r3
 8002b68:	480b      	ldr	r0, [pc, #44]	@ (8002b98 <HAL_I2C_MspInit+0x1c4>)
 8002b6a:	f001 fa3d 	bl	8003fe8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002b6e:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b72:	4a08      	ldr	r2, [pc, #32]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002b74:	f043 0302 	orr.w	r3, r3, #2
 8002b78:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002b7a:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <HAL_I2C_MspInit+0x1c0>)
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
}
 8002b86:	bf00      	nop
 8002b88:	37c0      	adds	r7, #192	@ 0xc0
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40005800 	.word	0x40005800
 8002b94:	40021000 	.word	0x40021000
 8002b98:	48000400 	.word	0x48000400
 8002b9c:	40005c00 	.word	0x40005c00
 8002ba0:	48000800 	.word	0x48000800
 8002ba4:	40008400 	.word	0x40008400

08002ba8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bba:	4b12      	ldr	r3, [pc, #72]	@ (8002c04 <HAL_TIM_PWM_MspInit+0x5c>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbe:	4a11      	ldr	r2, [pc, #68]	@ (8002c04 <HAL_TIM_PWM_MspInit+0x5c>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c04 <HAL_TIM_PWM_MspInit+0x5c>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002bd2:	e010      	b.n	8002bf6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002c08 <HAL_TIM_PWM_MspInit+0x60>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bde:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_TIM_PWM_MspInit+0x5c>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	4a08      	ldr	r2, [pc, #32]	@ (8002c04 <HAL_TIM_PWM_MspInit+0x5c>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bea:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_TIM_PWM_MspInit+0x5c>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40000400 	.word	0x40000400

08002c0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	@ 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c2c:	d11e      	bne.n	8002c6c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2e:	4b22      	ldr	r3, [pc, #136]	@ (8002cb8 <HAL_TIM_MspPostInit+0xac>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c32:	4a21      	ldr	r2, [pc, #132]	@ (8002cb8 <HAL_TIM_MspPostInit+0xac>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb8 <HAL_TIM_MspPostInit+0xac>)
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	2300      	movs	r3, #0
 8002c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	4619      	mov	r1, r3
 8002c62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c66:	f001 f9bf 	bl	8003fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c6a:	e020      	b.n	8002cae <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a12      	ldr	r2, [pc, #72]	@ (8002cbc <HAL_TIM_MspPostInit+0xb0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d11b      	bne.n	8002cae <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <HAL_TIM_MspPostInit+0xac>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002cb8 <HAL_TIM_MspPostInit+0xac>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c82:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb8 <HAL_TIM_MspPostInit+0xac>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c8e:	2310      	movs	r3, #16
 8002c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca2:	f107 0314 	add.w	r3, r7, #20
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4805      	ldr	r0, [pc, #20]	@ (8002cc0 <HAL_TIM_MspPostInit+0xb4>)
 8002caa:	f001 f99d 	bl	8003fe8 <HAL_GPIO_Init>
}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	@ 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	48000400 	.word	0x48000400

08002cc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08c      	sub	sp, #48	@ 0x30
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d8c <HAL_InitTick+0xc8>)
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d8c <HAL_InitTick+0xc8>)
 8002cd8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cde:	4b2b      	ldr	r3, [pc, #172]	@ (8002d8c <HAL_InitTick+0xc8>)
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cea:	f107 020c 	add.w	r2, r7, #12
 8002cee:	f107 0310 	add.w	r3, r7, #16
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f004 f915 	bl	8006f24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002cfa:	f004 f8fd 	bl	8006ef8 <HAL_RCC_GetPCLK2Freq>
 8002cfe:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d02:	4a23      	ldr	r2, [pc, #140]	@ (8002d90 <HAL_InitTick+0xcc>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	0c9b      	lsrs	r3, r3, #18
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002d0e:	4b21      	ldr	r3, [pc, #132]	@ (8002d94 <HAL_InitTick+0xd0>)
 8002d10:	4a21      	ldr	r2, [pc, #132]	@ (8002d98 <HAL_InitTick+0xd4>)
 8002d12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002d14:	4b1f      	ldr	r3, [pc, #124]	@ (8002d94 <HAL_InitTick+0xd0>)
 8002d16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d1a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d94 <HAL_InitTick+0xd0>)
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002d22:	4b1c      	ldr	r3, [pc, #112]	@ (8002d94 <HAL_InitTick+0xd0>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d28:	4b1a      	ldr	r3, [pc, #104]	@ (8002d94 <HAL_InitTick+0xd0>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d2e:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <HAL_InitTick+0xd0>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002d34:	4817      	ldr	r0, [pc, #92]	@ (8002d94 <HAL_InitTick+0xd0>)
 8002d36:	f004 fe51 	bl	80079dc <HAL_TIM_Base_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002d40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d11b      	bne.n	8002d80 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002d48:	4812      	ldr	r0, [pc, #72]	@ (8002d94 <HAL_InitTick+0xd0>)
 8002d4a:	f004 ff11 	bl	8007b70 <HAL_TIM_Base_Start_IT>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002d54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d111      	bne.n	8002d80 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002d5c:	2019      	movs	r0, #25
 8002d5e:	f001 f935 	bl	8003fcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b0f      	cmp	r3, #15
 8002d66:	d808      	bhi.n	8002d7a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	2019      	movs	r0, #25
 8002d6e:	f001 f911 	bl	8003f94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d72:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <HAL_InitTick+0xd8>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	e002      	b.n	8002d80 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002d80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3730      	adds	r7, #48	@ 0x30
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	431bde83 	.word	0x431bde83
 8002d94:	200008d8 	.word	0x200008d8
 8002d98:	40012c00 	.word	0x40012c00
 8002d9c:	20000004 	.word	0x20000004

08002da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <NMI_Handler+0x4>

08002da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <HardFault_Handler+0x4>

08002db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <MemManage_Handler+0x4>

08002db8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <BusFault_Handler+0x4>

08002dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <UsageFault_Handler+0x4>

08002dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002dda:	2008      	movs	r0, #8
 8002ddc:	f001 fac8 	bl	8004370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002de8:	4802      	ldr	r0, [pc, #8]	@ (8002df4 <CAN1_RX0_IRQHandler+0x10>)
 8002dea:	f000 fdec 	bl	80039c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200006d8 	.word	0x200006d8

08002df8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002dfc:	2020      	movs	r0, #32
 8002dfe:	f001 fab7 	bl	8004370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e0c:	4802      	ldr	r0, [pc, #8]	@ (8002e18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002e0e:	f005 f87d 	bl	8007f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200008d8 	.word	0x200008d8

08002e1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e20:	4802      	ldr	r0, [pc, #8]	@ (8002e2c <OTG_FS_IRQHandler+0x10>)
 8002e22:	f002 f9ec 	bl	80051fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20003f7c 	.word	0x20003f7c

08002e30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return 1;
 8002e34:	2301      	movs	r3, #1
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <_kill>:

int _kill(int pid, int sig)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e4a:	f00d fbb1 	bl	80105b0 <__errno>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2216      	movs	r2, #22
 8002e52:	601a      	str	r2, [r3, #0]
  return -1;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_exit>:

void _exit (int status)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ffe7 	bl	8002e40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e72:	bf00      	nop
 8002e74:	e7fd      	b.n	8002e72 <_exit+0x12>

08002e76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e00a      	b.n	8002e9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e88:	f3af 8000 	nop.w
 8002e8c:	4601      	mov	r1, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	60ba      	str	r2, [r7, #8]
 8002e94:	b2ca      	uxtb	r2, r1
 8002e96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	dbf0      	blt.n	8002e88 <_read+0x12>
  }

  return len;
 8002ea6:	687b      	ldr	r3, [r7, #4]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e009      	b.n	8002ed6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	60ba      	str	r2, [r7, #8]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	dbf1      	blt.n	8002ec2 <_write+0x12>
  }
  return len;
 8002ede:	687b      	ldr	r3, [r7, #4]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <_close>:

int _close(int file)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f10:	605a      	str	r2, [r3, #4]
  return 0;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <_isatty>:

int _isatty(int file)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f28:	2301      	movs	r3, #1
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f58:	4a14      	ldr	r2, [pc, #80]	@ (8002fac <_sbrk+0x5c>)
 8002f5a:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <_sbrk+0x60>)
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f64:	4b13      	ldr	r3, [pc, #76]	@ (8002fb4 <_sbrk+0x64>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d102      	bne.n	8002f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f6c:	4b11      	ldr	r3, [pc, #68]	@ (8002fb4 <_sbrk+0x64>)
 8002f6e:	4a12      	ldr	r2, [pc, #72]	@ (8002fb8 <_sbrk+0x68>)
 8002f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f72:	4b10      	ldr	r3, [pc, #64]	@ (8002fb4 <_sbrk+0x64>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d207      	bcs.n	8002f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f80:	f00d fb16 	bl	80105b0 <__errno>
 8002f84:	4603      	mov	r3, r0
 8002f86:	220c      	movs	r2, #12
 8002f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f8e:	e009      	b.n	8002fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f90:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <_sbrk+0x64>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f96:	4b07      	ldr	r3, [pc, #28]	@ (8002fb4 <_sbrk+0x64>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	4a05      	ldr	r2, [pc, #20]	@ (8002fb4 <_sbrk+0x64>)
 8002fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20050000 	.word	0x20050000
 8002fb0:	00000400 	.word	0x00000400
 8002fb4:	20000924 	.word	0x20000924
 8002fb8:	200047d0 	.word	0x200047d0

08002fbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fc0:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <SystemInit+0x20>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc6:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <SystemInit+0x20>)
 8002fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8002fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003018 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fe4:	f7ff ffea 	bl	8002fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe8:	480c      	ldr	r0, [pc, #48]	@ (800301c <LoopForever+0x6>)
  ldr r1, =_edata
 8002fea:	490d      	ldr	r1, [pc, #52]	@ (8003020 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fec:	4a0d      	ldr	r2, [pc, #52]	@ (8003024 <LoopForever+0xe>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8003028 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003000:	4c0a      	ldr	r4, [pc, #40]	@ (800302c <LoopForever+0x16>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800300e:	f00d fad5 	bl	80105bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003012:	f7ff f809 	bl	8002028 <main>

08003016 <LoopForever>:

LoopForever:
    b LoopForever
 8003016:	e7fe      	b.n	8003016 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8003018:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800301c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003020:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8003024:	080128d8 	.word	0x080128d8
  ldr r2, =_sbss
 8003028:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 800302c:	200047cc 	.word	0x200047cc

08003030 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003030:	e7fe      	b.n	8003030 <ADC1_2_IRQHandler>

08003032 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303c:	2003      	movs	r0, #3
 800303e:	f000 ff9e 	bl	8003f7e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003042:	200f      	movs	r0, #15
 8003044:	f7ff fe3e 	bl	8002cc4 <HAL_InitTick>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	71fb      	strb	r3, [r7, #7]
 8003052:	e001      	b.n	8003058 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003054:	f7ff fbea 	bl	800282c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003058:	79fb      	ldrb	r3, [r7, #7]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003068:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <HAL_IncTick+0x20>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <HAL_IncTick+0x24>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4413      	add	r3, r2
 8003074:	4a04      	ldr	r2, [pc, #16]	@ (8003088 <HAL_IncTick+0x24>)
 8003076:	6013      	str	r3, [r2, #0]
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000008 	.word	0x20000008
 8003088:	20000928 	.word	0x20000928

0800308c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return uwTick;
 8003090:	4b03      	ldr	r3, [pc, #12]	@ (80030a0 <HAL_GetTick+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000928 	.word	0x20000928

080030a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030ac:	f7ff ffee 	bl	800308c <HAL_GetTick>
 80030b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030bc:	d005      	beq.n	80030ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030be:	4b0a      	ldr	r3, [pc, #40]	@ (80030e8 <HAL_Delay+0x44>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030ca:	bf00      	nop
 80030cc:	f7ff ffde 	bl	800308c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d8f7      	bhi.n	80030cc <HAL_Delay+0x28>
  {
  }
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000008 	.word	0x20000008

080030ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e0ed      	b.n	80032da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff fbb6 	bl	800287c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003120:	f7ff ffb4 	bl	800308c <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003126:	e012      	b.n	800314e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003128:	f7ff ffb0 	bl	800308c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b0a      	cmp	r3, #10
 8003134:	d90b      	bls.n	800314e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2205      	movs	r2, #5
 8003146:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0c5      	b.n	80032da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0e5      	beq.n	8003128 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0202 	bic.w	r2, r2, #2
 800316a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800316c:	f7ff ff8e 	bl	800308c <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003172:	e012      	b.n	800319a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003174:	f7ff ff8a 	bl	800308c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b0a      	cmp	r3, #10
 8003180:	d90b      	bls.n	800319a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2205      	movs	r2, #5
 8003192:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e09f      	b.n	80032da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1e5      	bne.n	8003174 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	7e1b      	ldrb	r3, [r3, #24]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d108      	bne.n	80031c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	e007      	b.n	80031d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7e5b      	ldrb	r3, [r3, #25]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d108      	bne.n	80031ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e007      	b.n	80031fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7e9b      	ldrb	r3, [r3, #26]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d108      	bne.n	8003216 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0220 	orr.w	r2, r2, #32
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e007      	b.n	8003226 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0220 	bic.w	r2, r2, #32
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7edb      	ldrb	r3, [r3, #27]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d108      	bne.n	8003240 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0210 	bic.w	r2, r2, #16
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e007      	b.n	8003250 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0210 	orr.w	r2, r2, #16
 800324e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7f1b      	ldrb	r3, [r3, #28]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d108      	bne.n	800326a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0208 	orr.w	r2, r2, #8
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e007      	b.n	800327a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0208 	bic.w	r2, r2, #8
 8003278:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	7f5b      	ldrb	r3, [r3, #29]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d108      	bne.n	8003294 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0204 	orr.w	r2, r2, #4
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e007      	b.n	80032a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0204 	bic.w	r2, r2, #4
 80032a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	ea42 0103 	orr.w	r1, r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	1e5a      	subs	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032fa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d003      	beq.n	800330a <HAL_CAN_ConfigFilter+0x26>
 8003302:	7cfb      	ldrb	r3, [r7, #19]
 8003304:	2b02      	cmp	r3, #2
 8003306:	f040 80be 	bne.w	8003486 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800330a:	4b65      	ldr	r3, [pc, #404]	@ (80034a0 <HAL_CAN_ConfigFilter+0x1bc>)
 800330c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003324:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	431a      	orrs	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2201      	movs	r2, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43db      	mvns	r3, r3
 800335c:	401a      	ands	r2, r3
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d123      	bne.n	80033b4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	43db      	mvns	r3, r3
 8003376:	401a      	ands	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800338e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	3248      	adds	r2, #72	@ 0x48
 8003394:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033aa:	6979      	ldr	r1, [r7, #20]
 80033ac:	3348      	adds	r3, #72	@ 0x48
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	440b      	add	r3, r1
 80033b2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d122      	bne.n	8003402 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3248      	adds	r2, #72	@ 0x48
 80033e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033f8:	6979      	ldr	r1, [r7, #20]
 80033fa:	3348      	adds	r3, #72	@ 0x48
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	440b      	add	r3, r1
 8003400:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	43db      	mvns	r3, r3
 8003414:	401a      	ands	r2, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800341c:	e007      	b.n	800342e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	431a      	orrs	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	43db      	mvns	r3, r3
 8003440:	401a      	ands	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003448:	e007      	b.n	800345a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	431a      	orrs	r2, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d107      	bne.n	8003472 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	431a      	orrs	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003478:	f023 0201 	bic.w	r2, r3, #1
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e006      	b.n	8003494 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
  }
}
 8003494:	4618      	mov	r0, r3
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	40006400 	.word	0x40006400

080034a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d12e      	bne.n	8003516 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034d0:	f7ff fddc 	bl	800308c <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034d6:	e012      	b.n	80034fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034d8:	f7ff fdd8 	bl	800308c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b0a      	cmp	r3, #10
 80034e4:	d90b      	bls.n	80034fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2205      	movs	r2, #5
 80034f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e012      	b.n	8003524 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e5      	bne.n	80034d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	e006      	b.n	8003524 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	@ 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003540:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800354a:	7ffb      	ldrb	r3, [r7, #31]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d003      	beq.n	8003558 <HAL_CAN_AddTxMessage+0x2c>
 8003550:	7ffb      	ldrb	r3, [r7, #31]
 8003552:	2b02      	cmp	r3, #2
 8003554:	f040 80ad 	bne.w	80036b2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8095 	beq.w	80036a2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	0e1b      	lsrs	r3, r3, #24
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003582:	2201      	movs	r2, #1
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	409a      	lsls	r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10d      	bne.n	80035b0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800359e:	68f9      	ldr	r1, [r7, #12]
 80035a0:	6809      	ldr	r1, [r1, #0]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3318      	adds	r3, #24
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	440b      	add	r3, r1
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e00f      	b.n	80035d0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035ba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035c0:	68f9      	ldr	r1, [r7, #12]
 80035c2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80035c4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	3318      	adds	r3, #24
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	440b      	add	r3, r1
 80035ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	3318      	adds	r3, #24
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	440b      	add	r3, r1
 80035e0:	3304      	adds	r3, #4
 80035e2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	7d1b      	ldrb	r3, [r3, #20]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d111      	bne.n	8003610 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	3318      	adds	r3, #24
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	4413      	add	r3, r2
 80035f8:	3304      	adds	r3, #4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	6811      	ldr	r1, [r2, #0]
 8003600:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3318      	adds	r3, #24
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	440b      	add	r3, r1
 800360c:	3304      	adds	r3, #4
 800360e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3307      	adds	r3, #7
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	061a      	lsls	r2, r3, #24
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3306      	adds	r3, #6
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3305      	adds	r3, #5
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	4313      	orrs	r3, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	3204      	adds	r2, #4
 8003630:	7812      	ldrb	r2, [r2, #0]
 8003632:	4610      	mov	r0, r2
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	6811      	ldr	r1, [r2, #0]
 8003638:	ea43 0200 	orr.w	r2, r3, r0
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	440b      	add	r3, r1
 8003642:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003646:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3303      	adds	r3, #3
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	061a      	lsls	r2, r3, #24
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3302      	adds	r3, #2
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	041b      	lsls	r3, r3, #16
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3301      	adds	r3, #1
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	4313      	orrs	r3, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	7812      	ldrb	r2, [r2, #0]
 8003668:	4610      	mov	r0, r2
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	6811      	ldr	r1, [r2, #0]
 800366e:	ea43 0200 	orr.w	r2, r3, r0
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	440b      	add	r3, r1
 8003678:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800367c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	3318      	adds	r3, #24
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	4413      	add	r3, r2
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	6811      	ldr	r1, [r2, #0]
 8003690:	f043 0201 	orr.w	r2, r3, #1
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	3318      	adds	r3, #24
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	440b      	add	r3, r1
 800369c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e00e      	b.n	80036c0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e006      	b.n	80036c0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
  }
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3724      	adds	r7, #36	@ 0x24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036de:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80036e0:	7afb      	ldrb	r3, [r7, #11]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d002      	beq.n	80036ec <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80036e6:	7afb      	ldrb	r3, [r7, #11]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d11d      	bne.n	8003728 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3301      	adds	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3301      	adds	r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3301      	adds	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003728:	68fb      	ldr	r3, [r7, #12]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003736:	b480      	push	{r7}
 8003738:	b087      	sub	sp, #28
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3020 	ldrb.w	r3, [r3, #32]
 800374a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d003      	beq.n	800375a <HAL_CAN_GetRxMessage+0x24>
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	2b02      	cmp	r3, #2
 8003756:	f040 8103 	bne.w	8003960 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10e      	bne.n	800377e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d116      	bne.n	800379c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e0f7      	b.n	800396e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d107      	bne.n	800379c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0e8      	b.n	800396e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	331b      	adds	r3, #27
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	4413      	add	r3, r2
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0204 	and.w	r2, r3, #4
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10c      	bne.n	80037d4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	331b      	adds	r3, #27
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	4413      	add	r3, r2
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0d5b      	lsrs	r3, r3, #21
 80037ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	e00b      	b.n	80037ec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	331b      	adds	r3, #27
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	4413      	add	r3, r2
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	08db      	lsrs	r3, r3, #3
 80037e4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	331b      	adds	r3, #27
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	4413      	add	r3, r2
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0202 	and.w	r2, r3, #2
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	331b      	adds	r3, #27
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	4413      	add	r3, r2
 800380e:	3304      	adds	r3, #4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2208      	movs	r2, #8
 800381e:	611a      	str	r2, [r3, #16]
 8003820:	e00b      	b.n	800383a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	331b      	adds	r3, #27
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	4413      	add	r3, r2
 800382e:	3304      	adds	r3, #4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 020f 	and.w	r2, r3, #15
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	331b      	adds	r3, #27
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	4413      	add	r3, r2
 8003846:	3304      	adds	r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	b2da      	uxtb	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	331b      	adds	r3, #27
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	4413      	add	r3, r2
 800385e:	3304      	adds	r3, #4
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	0c1b      	lsrs	r3, r3, #16
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	4413      	add	r3, r2
 8003874:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	4413      	add	r3, r2
 800388a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	0a1a      	lsrs	r2, r3, #8
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	0c1a      	lsrs	r2, r3, #16
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	3302      	adds	r3, #2
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	4413      	add	r3, r2
 80038be:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	0e1a      	lsrs	r2, r3, #24
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	3303      	adds	r3, #3
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	3304      	adds	r3, #4
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	0a1a      	lsrs	r2, r3, #8
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	3305      	adds	r3, #5
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	4413      	add	r3, r2
 800390a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	0c1a      	lsrs	r2, r3, #16
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	3306      	adds	r3, #6
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	4413      	add	r3, r2
 8003924:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	0e1a      	lsrs	r2, r3, #24
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	3307      	adds	r3, #7
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d108      	bne.n	800394c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0220 	orr.w	r2, r2, #32
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	e007      	b.n	800395c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0220 	orr.w	r2, r2, #32
 800395a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e006      	b.n	800396e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3020 	ldrb.w	r3, [r3, #32]
 800398a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d002      	beq.n	8003998 <HAL_CAN_ActivateNotification+0x1e>
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d109      	bne.n	80039ac <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6959      	ldr	r1, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e006      	b.n	80039ba <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
  }
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b08a      	sub	sp, #40	@ 0x28
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d07c      	beq.n	8003b06 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d023      	beq.n	8003a5e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f983 	bl	8003d34 <HAL_CAN_TxMailbox0CompleteCallback>
 8003a2e:	e016      	b.n	8003a5e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a42:	e00c      	b.n	8003a5e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d004      	beq.n	8003a58 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a56:	e002      	b.n	8003a5e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f989 	bl	8003d70 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d024      	beq.n	8003ab2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f963 	bl	8003d48 <HAL_CAN_TxMailbox1CompleteCallback>
 8003a82:	e016      	b.n	8003ab2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a96:	e00c      	b.n	8003ab2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aaa:	e002      	b.n	8003ab2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f969 	bl	8003d84 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d024      	beq.n	8003b06 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003ac4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f943 	bl	8003d5c <HAL_CAN_TxMailbox2CompleteCallback>
 8003ad6:	e016      	b.n	8003b06 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aea:	e00c      	b.n	8003b06 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afe:	e002      	b.n	8003b06 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f949 	bl	8003d98 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00c      	beq.n	8003b2a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b20:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2210      	movs	r2, #16
 8003b28:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d006      	beq.n	8003b4c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2208      	movs	r2, #8
 8003b44:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f930 	bl	8003dac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fe f89d 	bl	8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00c      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00b      	beq.n	8003bb0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d006      	beq.n	8003bb0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f912 	bl	8003dd4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f8f9 	bl	8003dc0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d006      	beq.n	8003bf0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2210      	movs	r2, #16
 8003be8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8fc 	bl	8003de8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d006      	beq.n	8003c12 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f8f5 	bl	8003dfc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d07b      	beq.n	8003d14 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d072      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	f043 0302 	orr.w	r3, r3, #2
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d043      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d03e      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c94:	2b60      	cmp	r3, #96	@ 0x60
 8003c96:	d02b      	beq.n	8003cf0 <HAL_CAN_IRQHandler+0x32a>
 8003c98:	2b60      	cmp	r3, #96	@ 0x60
 8003c9a:	d82e      	bhi.n	8003cfa <HAL_CAN_IRQHandler+0x334>
 8003c9c:	2b50      	cmp	r3, #80	@ 0x50
 8003c9e:	d022      	beq.n	8003ce6 <HAL_CAN_IRQHandler+0x320>
 8003ca0:	2b50      	cmp	r3, #80	@ 0x50
 8003ca2:	d82a      	bhi.n	8003cfa <HAL_CAN_IRQHandler+0x334>
 8003ca4:	2b40      	cmp	r3, #64	@ 0x40
 8003ca6:	d019      	beq.n	8003cdc <HAL_CAN_IRQHandler+0x316>
 8003ca8:	2b40      	cmp	r3, #64	@ 0x40
 8003caa:	d826      	bhi.n	8003cfa <HAL_CAN_IRQHandler+0x334>
 8003cac:	2b30      	cmp	r3, #48	@ 0x30
 8003cae:	d010      	beq.n	8003cd2 <HAL_CAN_IRQHandler+0x30c>
 8003cb0:	2b30      	cmp	r3, #48	@ 0x30
 8003cb2:	d822      	bhi.n	8003cfa <HAL_CAN_IRQHandler+0x334>
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d002      	beq.n	8003cbe <HAL_CAN_IRQHandler+0x2f8>
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d005      	beq.n	8003cc8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003cbc:	e01d      	b.n	8003cfa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	f043 0308 	orr.w	r3, r3, #8
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cc6:	e019      	b.n	8003cfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	f043 0310 	orr.w	r3, r3, #16
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cd0:	e014      	b.n	8003cfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	f043 0320 	orr.w	r3, r3, #32
 8003cd8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cda:	e00f      	b.n	8003cfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ce4:	e00a      	b.n	8003cfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cee:	e005      	b.n	8003cfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003cf8:	e000      	b.n	8003cfc <HAL_CAN_IRQHandler+0x336>
            break;
 8003cfa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003d0a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2204      	movs	r2, #4
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f872 	bl	8003e10 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	3728      	adds	r7, #40	@ 0x28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e34:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <__NVIC_SetPriorityGrouping+0x44>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e40:	4013      	ands	r3, r2
 8003e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e56:	4a04      	ldr	r2, [pc, #16]	@ (8003e68 <__NVIC_SetPriorityGrouping+0x44>)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	60d3      	str	r3, [r2, #12]
}
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	e000ed00 	.word	0xe000ed00

08003e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e70:	4b04      	ldr	r3, [pc, #16]	@ (8003e84 <__NVIC_GetPriorityGrouping+0x18>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	0a1b      	lsrs	r3, r3, #8
 8003e76:	f003 0307 	and.w	r3, r3, #7
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	db0b      	blt.n	8003eb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	f003 021f 	and.w	r2, r3, #31
 8003ea0:	4907      	ldr	r1, [pc, #28]	@ (8003ec0 <__NVIC_EnableIRQ+0x38>)
 8003ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8003eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	e000e100 	.word	0xe000e100

08003ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	6039      	str	r1, [r7, #0]
 8003ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	db0a      	blt.n	8003eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	490c      	ldr	r1, [pc, #48]	@ (8003f10 <__NVIC_SetPriority+0x4c>)
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	0112      	lsls	r2, r2, #4
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eec:	e00a      	b.n	8003f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	4908      	ldr	r1, [pc, #32]	@ (8003f14 <__NVIC_SetPriority+0x50>)
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	3b04      	subs	r3, #4
 8003efc:	0112      	lsls	r2, r2, #4
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	440b      	add	r3, r1
 8003f02:	761a      	strb	r2, [r3, #24]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	e000e100 	.word	0xe000e100
 8003f14:	e000ed00 	.word	0xe000ed00

08003f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b089      	sub	sp, #36	@ 0x24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f1c3 0307 	rsb	r3, r3, #7
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	bf28      	it	cs
 8003f36:	2304      	movcs	r3, #4
 8003f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	2b06      	cmp	r3, #6
 8003f40:	d902      	bls.n	8003f48 <NVIC_EncodePriority+0x30>
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3b03      	subs	r3, #3
 8003f46:	e000      	b.n	8003f4a <NVIC_EncodePriority+0x32>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43da      	mvns	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6a:	43d9      	mvns	r1, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f70:	4313      	orrs	r3, r2
         );
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3724      	adds	r7, #36	@ 0x24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff ff4c 	bl	8003e24 <__NVIC_SetPriorityGrouping>
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fa6:	f7ff ff61 	bl	8003e6c <__NVIC_GetPriorityGrouping>
 8003faa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	6978      	ldr	r0, [r7, #20]
 8003fb2:	f7ff ffb1 	bl	8003f18 <NVIC_EncodePriority>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff ff80 	bl	8003ec4 <__NVIC_SetPriority>
}
 8003fc4:	bf00      	nop
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff ff54 	bl	8003e88 <__NVIC_EnableIRQ>
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ff6:	e166      	b.n	80042c6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	4013      	ands	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 8158 	beq.w	80042c0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d005      	beq.n	8004028 <HAL_GPIO_Init+0x40>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d130      	bne.n	800408a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	2203      	movs	r2, #3
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4013      	ands	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800405e:	2201      	movs	r2, #1
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	f003 0201 	and.w	r2, r3, #1
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b03      	cmp	r3, #3
 8004094:	d017      	beq.n	80040c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	2203      	movs	r2, #3
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4013      	ands	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d123      	bne.n	800411a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	08da      	lsrs	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3208      	adds	r2, #8
 80040da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	220f      	movs	r2, #15
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	08da      	lsrs	r2, r3, #3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3208      	adds	r2, #8
 8004114:	6939      	ldr	r1, [r7, #16]
 8004116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	2203      	movs	r2, #3
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 0203 	and.w	r2, r3, #3
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 80b2 	beq.w	80042c0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800415c:	4b61      	ldr	r3, [pc, #388]	@ (80042e4 <HAL_GPIO_Init+0x2fc>)
 800415e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004160:	4a60      	ldr	r2, [pc, #384]	@ (80042e4 <HAL_GPIO_Init+0x2fc>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	6613      	str	r3, [r2, #96]	@ 0x60
 8004168:	4b5e      	ldr	r3, [pc, #376]	@ (80042e4 <HAL_GPIO_Init+0x2fc>)
 800416a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004174:	4a5c      	ldr	r2, [pc, #368]	@ (80042e8 <HAL_GPIO_Init+0x300>)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	089b      	lsrs	r3, r3, #2
 800417a:	3302      	adds	r3, #2
 800417c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f003 0303 	and.w	r3, r3, #3
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	220f      	movs	r2, #15
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800419e:	d02b      	beq.n	80041f8 <HAL_GPIO_Init+0x210>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a52      	ldr	r2, [pc, #328]	@ (80042ec <HAL_GPIO_Init+0x304>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d025      	beq.n	80041f4 <HAL_GPIO_Init+0x20c>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a51      	ldr	r2, [pc, #324]	@ (80042f0 <HAL_GPIO_Init+0x308>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d01f      	beq.n	80041f0 <HAL_GPIO_Init+0x208>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a50      	ldr	r2, [pc, #320]	@ (80042f4 <HAL_GPIO_Init+0x30c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d019      	beq.n	80041ec <HAL_GPIO_Init+0x204>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a4f      	ldr	r2, [pc, #316]	@ (80042f8 <HAL_GPIO_Init+0x310>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d013      	beq.n	80041e8 <HAL_GPIO_Init+0x200>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a4e      	ldr	r2, [pc, #312]	@ (80042fc <HAL_GPIO_Init+0x314>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00d      	beq.n	80041e4 <HAL_GPIO_Init+0x1fc>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a4d      	ldr	r2, [pc, #308]	@ (8004300 <HAL_GPIO_Init+0x318>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d007      	beq.n	80041e0 <HAL_GPIO_Init+0x1f8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a4c      	ldr	r2, [pc, #304]	@ (8004304 <HAL_GPIO_Init+0x31c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d101      	bne.n	80041dc <HAL_GPIO_Init+0x1f4>
 80041d8:	2307      	movs	r3, #7
 80041da:	e00e      	b.n	80041fa <HAL_GPIO_Init+0x212>
 80041dc:	2308      	movs	r3, #8
 80041de:	e00c      	b.n	80041fa <HAL_GPIO_Init+0x212>
 80041e0:	2306      	movs	r3, #6
 80041e2:	e00a      	b.n	80041fa <HAL_GPIO_Init+0x212>
 80041e4:	2305      	movs	r3, #5
 80041e6:	e008      	b.n	80041fa <HAL_GPIO_Init+0x212>
 80041e8:	2304      	movs	r3, #4
 80041ea:	e006      	b.n	80041fa <HAL_GPIO_Init+0x212>
 80041ec:	2303      	movs	r3, #3
 80041ee:	e004      	b.n	80041fa <HAL_GPIO_Init+0x212>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e002      	b.n	80041fa <HAL_GPIO_Init+0x212>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <HAL_GPIO_Init+0x212>
 80041f8:	2300      	movs	r3, #0
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	f002 0203 	and.w	r2, r2, #3
 8004200:	0092      	lsls	r2, r2, #2
 8004202:	4093      	lsls	r3, r2
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800420a:	4937      	ldr	r1, [pc, #220]	@ (80042e8 <HAL_GPIO_Init+0x300>)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	3302      	adds	r3, #2
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004218:	4b3b      	ldr	r3, [pc, #236]	@ (8004308 <HAL_GPIO_Init+0x320>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	43db      	mvns	r3, r3
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4013      	ands	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800423c:	4a32      	ldr	r2, [pc, #200]	@ (8004308 <HAL_GPIO_Init+0x320>)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004242:	4b31      	ldr	r3, [pc, #196]	@ (8004308 <HAL_GPIO_Init+0x320>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	43db      	mvns	r3, r3
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4013      	ands	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004266:	4a28      	ldr	r2, [pc, #160]	@ (8004308 <HAL_GPIO_Init+0x320>)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800426c:	4b26      	ldr	r3, [pc, #152]	@ (8004308 <HAL_GPIO_Init+0x320>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	43db      	mvns	r3, r3
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4013      	ands	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004290:	4a1d      	ldr	r2, [pc, #116]	@ (8004308 <HAL_GPIO_Init+0x320>)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004296:	4b1c      	ldr	r3, [pc, #112]	@ (8004308 <HAL_GPIO_Init+0x320>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	43db      	mvns	r3, r3
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4013      	ands	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042ba:	4a13      	ldr	r2, [pc, #76]	@ (8004308 <HAL_GPIO_Init+0x320>)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3301      	adds	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f47f ae91 	bne.w	8003ff8 <HAL_GPIO_Init+0x10>
  }
}
 80042d6:	bf00      	nop
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40021000 	.word	0x40021000
 80042e8:	40010000 	.word	0x40010000
 80042ec:	48000400 	.word	0x48000400
 80042f0:	48000800 	.word	0x48000800
 80042f4:	48000c00 	.word	0x48000c00
 80042f8:	48001000 	.word	0x48001000
 80042fc:	48001400 	.word	0x48001400
 8004300:	48001800 	.word	0x48001800
 8004304:	48001c00 	.word	0x48001c00
 8004308:	40010400 	.word	0x40010400

0800430c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	807b      	strh	r3, [r7, #2]
 8004318:	4613      	mov	r3, r2
 800431a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800431c:	787b      	ldrb	r3, [r7, #1]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004322:	887a      	ldrh	r2, [r7, #2]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004328:	e002      	b.n	8004330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800432a:	887a      	ldrh	r2, [r7, #2]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800434e:	887a      	ldrh	r2, [r7, #2]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4013      	ands	r3, r2
 8004354:	041a      	lsls	r2, r3, #16
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	43d9      	mvns	r1, r3
 800435a:	887b      	ldrh	r3, [r7, #2]
 800435c:	400b      	ands	r3, r1
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	619a      	str	r2, [r3, #24]
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800437a:	4b08      	ldr	r3, [pc, #32]	@ (800439c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	4013      	ands	r3, r2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d006      	beq.n	8004394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004386:	4a05      	ldr	r2, [pc, #20]	@ (800439c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f806 	bl	80043a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40010400 	.word	0x40010400

080043a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e08d      	b.n	80044e4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7fe faf9 	bl	80029d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2224      	movs	r2, #36	@ 0x24
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004406:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004416:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d107      	bne.n	8004430 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800442c:	609a      	str	r2, [r3, #8]
 800442e:	e006      	b.n	800443e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800443c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d108      	bne.n	8004458 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	e007      	b.n	8004468 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004466:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800447a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800448a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69d9      	ldr	r1, [r3, #28]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1a      	ldr	r2, [r3, #32]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	461a      	mov	r2, r3
 80044f8:	460b      	mov	r3, r1
 80044fa:	817b      	strh	r3, [r7, #10]
 80044fc:	4613      	mov	r3, r2
 80044fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b20      	cmp	r3, #32
 800450a:	f040 80fd 	bne.w	8004708 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_I2C_Master_Transmit+0x30>
 8004518:	2302      	movs	r3, #2
 800451a:	e0f6      	b.n	800470a <HAL_I2C_Master_Transmit+0x21e>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004524:	f7fe fdb2 	bl	800308c <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	2319      	movs	r3, #25
 8004530:	2201      	movs	r2, #1
 8004532:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fa0a 	bl	8004950 <I2C_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e0e1      	b.n	800470a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2221      	movs	r2, #33	@ 0x21
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2210      	movs	r2, #16
 8004552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	893a      	ldrh	r2, [r7, #8]
 8004566:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	2bff      	cmp	r3, #255	@ 0xff
 8004576:	d906      	bls.n	8004586 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	22ff      	movs	r2, #255	@ 0xff
 800457c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800457e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e007      	b.n	8004596 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004590:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004594:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459a:	2b00      	cmp	r3, #0
 800459c:	d024      	beq.n	80045e8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	781a      	ldrb	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	3301      	adds	r3, #1
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	8979      	ldrh	r1, [r7, #10]
 80045da:	4b4e      	ldr	r3, [pc, #312]	@ (8004714 <HAL_I2C_Master_Transmit+0x228>)
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fc05 	bl	8004df0 <I2C_TransferConfig>
 80045e6:	e066      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	8979      	ldrh	r1, [r7, #10]
 80045f0:	4b48      	ldr	r3, [pc, #288]	@ (8004714 <HAL_I2C_Master_Transmit+0x228>)
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fbfa 	bl	8004df0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045fc:	e05b      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	6a39      	ldr	r1, [r7, #32]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f9fd 	bl	8004a02 <I2C_WaitOnTXISFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e07b      	b.n	800470a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	781a      	ldrb	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d034      	beq.n	80046b6 <HAL_I2C_Master_Transmit+0x1ca>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	d130      	bne.n	80046b6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	2200      	movs	r2, #0
 800465c:	2180      	movs	r1, #128	@ 0x80
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f976 	bl	8004950 <I2C_WaitOnFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e04d      	b.n	800470a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	2bff      	cmp	r3, #255	@ 0xff
 8004676:	d90e      	bls.n	8004696 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	22ff      	movs	r2, #255	@ 0xff
 800467c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004682:	b2da      	uxtb	r2, r3
 8004684:	8979      	ldrh	r1, [r7, #10]
 8004686:	2300      	movs	r3, #0
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 fbae 	bl	8004df0 <I2C_TransferConfig>
 8004694:	e00f      	b.n	80046b6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	8979      	ldrh	r1, [r7, #10]
 80046a8:	2300      	movs	r3, #0
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fb9d 	bl	8004df0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d19e      	bne.n	80045fe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	6a39      	ldr	r1, [r7, #32]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f9e3 	bl	8004a90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e01a      	b.n	800470a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2220      	movs	r2, #32
 80046da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6859      	ldr	r1, [r3, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004718 <HAL_I2C_Master_Transmit+0x22c>)
 80046e8:	400b      	ands	r3, r1
 80046ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	e000      	b.n	800470a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004708:	2302      	movs	r3, #2
  }
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	80002000 	.word	0x80002000
 8004718:	fe00e800 	.word	0xfe00e800

0800471c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	461a      	mov	r2, r3
 8004728:	460b      	mov	r3, r1
 800472a:	817b      	strh	r3, [r7, #10]
 800472c:	4613      	mov	r3, r2
 800472e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b20      	cmp	r3, #32
 800473a:	f040 80db 	bne.w	80048f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_I2C_Master_Receive+0x30>
 8004748:	2302      	movs	r3, #2
 800474a:	e0d4      	b.n	80048f6 <HAL_I2C_Master_Receive+0x1da>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004754:	f7fe fc9a 	bl	800308c <HAL_GetTick>
 8004758:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2319      	movs	r3, #25
 8004760:	2201      	movs	r2, #1
 8004762:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f8f2 	bl	8004950 <I2C_WaitOnFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e0bf      	b.n	80048f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2222      	movs	r2, #34	@ 0x22
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2210      	movs	r2, #16
 8004782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	893a      	ldrh	r2, [r7, #8]
 8004796:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2bff      	cmp	r3, #255	@ 0xff
 80047a6:	d90e      	bls.n	80047c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	8979      	ldrh	r1, [r7, #10]
 80047b6:	4b52      	ldr	r3, [pc, #328]	@ (8004900 <HAL_I2C_Master_Receive+0x1e4>)
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fb16 	bl	8004df0 <I2C_TransferConfig>
 80047c4:	e06d      	b.n	80048a2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	8979      	ldrh	r1, [r7, #10]
 80047d8:	4b49      	ldr	r3, [pc, #292]	@ (8004900 <HAL_I2C_Master_Receive+0x1e4>)
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fb05 	bl	8004df0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047e6:	e05c      	b.n	80048a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	6a39      	ldr	r1, [r7, #32]
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f993 	bl	8004b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e07c      	b.n	80048f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d034      	beq.n	80048a2 <HAL_I2C_Master_Receive+0x186>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483c:	2b00      	cmp	r3, #0
 800483e:	d130      	bne.n	80048a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	2200      	movs	r2, #0
 8004848:	2180      	movs	r1, #128	@ 0x80
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f880 	bl	8004950 <I2C_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e04d      	b.n	80048f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	2bff      	cmp	r3, #255	@ 0xff
 8004862:	d90e      	bls.n	8004882 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	22ff      	movs	r2, #255	@ 0xff
 8004868:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486e:	b2da      	uxtb	r2, r3
 8004870:	8979      	ldrh	r1, [r7, #10]
 8004872:	2300      	movs	r3, #0
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fab8 	bl	8004df0 <I2C_TransferConfig>
 8004880:	e00f      	b.n	80048a2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004890:	b2da      	uxtb	r2, r3
 8004892:	8979      	ldrh	r1, [r7, #10]
 8004894:	2300      	movs	r3, #0
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 faa7 	bl	8004df0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d19d      	bne.n	80047e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	6a39      	ldr	r1, [r7, #32]
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f8ed 	bl	8004a90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e01a      	b.n	80048f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2220      	movs	r2, #32
 80048c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6859      	ldr	r1, [r3, #4]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <HAL_I2C_Master_Receive+0x1e8>)
 80048d4:	400b      	ands	r3, r1
 80048d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e000      	b.n	80048f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80048f4:	2302      	movs	r3, #2
  }
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	80002400 	.word	0x80002400
 8004904:	fe00e800 	.word	0xfe00e800

08004908 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d103      	bne.n	8004926 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2200      	movs	r2, #0
 8004924:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b01      	cmp	r3, #1
 8004932:	d007      	beq.n	8004944 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	619a      	str	r2, [r3, #24]
  }
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	4613      	mov	r3, r2
 800495e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004960:	e03b      	b.n	80049da <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f962 	bl	8004c30 <I2C_IsErrorOccurred>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e041      	b.n	80049fa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800497c:	d02d      	beq.n	80049da <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497e:	f7fe fb85 	bl	800308c <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d302      	bcc.n	8004994 <I2C_WaitOnFlagUntilTimeout+0x44>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d122      	bne.n	80049da <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4013      	ands	r3, r2
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d113      	bne.n	80049da <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b6:	f043 0220 	orr.w	r2, r3, #32
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e00f      	b.n	80049fa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4013      	ands	r3, r2
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d0b4      	beq.n	8004962 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a0e:	e033      	b.n	8004a78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f90b 	bl	8004c30 <I2C_IsErrorOccurred>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e031      	b.n	8004a88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a2a:	d025      	beq.n	8004a78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2c:	f7fe fb2e 	bl	800308c <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d302      	bcc.n	8004a42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d11a      	bne.n	8004a78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d013      	beq.n	8004a78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e007      	b.n	8004a88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d1c4      	bne.n	8004a10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a9c:	e02f      	b.n	8004afe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f8c4 	bl	8004c30 <I2C_IsErrorOccurred>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e02d      	b.n	8004b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7fe faeb 	bl	800308c <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d302      	bcc.n	8004ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d11a      	bne.n	8004afe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d013      	beq.n	8004afe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ada:	f043 0220 	orr.w	r2, r3, #32
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e007      	b.n	8004b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d1c8      	bne.n	8004a9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004b28:	e071      	b.n	8004c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f87e 	bl	8004c30 <I2C_IsErrorOccurred>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d13b      	bne.n	8004bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d138      	bne.n	8004bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d105      	bne.n	8004b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d121      	bne.n	8004bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2210      	movs	r2, #16
 8004b80:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2204      	movs	r2, #4
 8004b86:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4b24      	ldr	r3, [pc, #144]	@ (8004c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004b9c:	400b      	ands	r3, r1
 8004b9e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	75fb      	strb	r3, [r7, #23]
 8004bbc:	e002      	b.n	8004bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004bc4:	f7fe fa62 	bl	800308c <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d302      	bcc.n	8004bda <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d119      	bne.n	8004c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d116      	bne.n	8004c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d00f      	beq.n	8004c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	f043 0220 	orr.w	r2, r3, #32
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d002      	beq.n	8004c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d083      	beq.n	8004b2a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	fe00e800 	.word	0xfe00e800

08004c30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	@ 0x28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d068      	beq.n	8004d2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2210      	movs	r2, #16
 8004c62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c64:	e049      	b.n	8004cfa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c6c:	d045      	beq.n	8004cfa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c6e:	f7fe fa0d 	bl	800308c <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d302      	bcc.n	8004c84 <I2C_IsErrorOccurred+0x54>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d13a      	bne.n	8004cfa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca6:	d121      	bne.n	8004cec <I2C_IsErrorOccurred+0xbc>
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cae:	d01d      	beq.n	8004cec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004cb0:	7cfb      	ldrb	r3, [r7, #19]
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d01a      	beq.n	8004cec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004cc6:	f7fe f9e1 	bl	800308c <HAL_GetTick>
 8004cca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ccc:	e00e      	b.n	8004cec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004cce:	f7fe f9dd 	bl	800308c <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b19      	cmp	r3, #25
 8004cda:	d907      	bls.n	8004cec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	f043 0320 	orr.w	r3, r3, #32
 8004ce2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004cea:	e006      	b.n	8004cfa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d1e9      	bne.n	8004cce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d003      	beq.n	8004d10 <I2C_IsErrorOccurred+0xe0>
 8004d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0aa      	beq.n	8004c66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d103      	bne.n	8004d20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	f043 0304 	orr.w	r3, r3, #4
 8004d26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00b      	beq.n	8004d58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00b      	beq.n	8004d7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	f043 0308 	orr.w	r3, r3, #8
 8004d68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00b      	beq.n	8004d9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	f043 0302 	orr.w	r3, r3, #2
 8004d8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01c      	beq.n	8004dde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff fdaf 	bl	8004908 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6859      	ldr	r1, [r3, #4]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b0d      	ldr	r3, [pc, #52]	@ (8004dec <I2C_IsErrorOccurred+0x1bc>)
 8004db6:	400b      	ands	r3, r1
 8004db8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004dde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3728      	adds	r7, #40	@ 0x28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	fe00e800 	.word	0xfe00e800

08004df0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	817b      	strh	r3, [r7, #10]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e02:	897b      	ldrh	r3, [r7, #10]
 8004e04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e08:	7a7b      	ldrb	r3, [r7, #9]
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	0d5b      	lsrs	r3, r3, #21
 8004e2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004e2e:	4b08      	ldr	r3, [pc, #32]	@ (8004e50 <I2C_TransferConfig+0x60>)
 8004e30:	430b      	orrs	r3, r1
 8004e32:	43db      	mvns	r3, r3
 8004e34:	ea02 0103 	and.w	r1, r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	03ff63ff 	.word	0x03ff63ff

08004e54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	d138      	bne.n	8004edc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e032      	b.n	8004ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2224      	movs	r2, #36	@ 0x24
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ea6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6819      	ldr	r1, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e000      	b.n	8004ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
  }
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d139      	bne.n	8004f74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e033      	b.n	8004f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2224      	movs	r2, #36	@ 0x24
 8004f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004f3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e000      	b.n	8004f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f74:	2302      	movs	r3, #2
  }
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b086      	sub	sp, #24
 8004f86:	af02      	add	r7, sp, #8
 8004f88:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e101      	b.n	8005198 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f00a f8c1 	bl	800f130 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f003 ff0a 	bl	8008dda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	7c1a      	ldrb	r2, [r3, #16]
 8004fce:	f88d 2000 	strb.w	r2, [sp]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fd6:	f003 fe25 	bl	8008c24 <USB_CoreInit>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e0d5      	b.n	8005198 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f003 ff02 	bl	8008dfc <USB_SetCurrentMode>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2202      	movs	r2, #2
 8005002:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e0c6      	b.n	8005198 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
 800500e:	e04a      	b.n	80050a6 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	3315      	adds	r3, #21
 8005020:	2201      	movs	r2, #1
 8005022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005024:	7bfa      	ldrb	r2, [r7, #15]
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	3314      	adds	r3, #20
 8005034:	7bfa      	ldrb	r2, [r7, #15]
 8005036:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005038:	7bfa      	ldrb	r2, [r7, #15]
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	b298      	uxth	r0, r3
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	332e      	adds	r3, #46	@ 0x2e
 800504c:	4602      	mov	r2, r0
 800504e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005050:	7bfa      	ldrb	r2, [r7, #15]
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	3318      	adds	r3, #24
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005064:	7bfa      	ldrb	r2, [r7, #15]
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	331c      	adds	r3, #28
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005078:	7bfa      	ldrb	r2, [r7, #15]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	3320      	adds	r3, #32
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800508c:	7bfa      	ldrb	r2, [r7, #15]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	3324      	adds	r3, #36	@ 0x24
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	3301      	adds	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	791b      	ldrb	r3, [r3, #4]
 80050aa:	7bfa      	ldrb	r2, [r7, #15]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d3af      	bcc.n	8005010 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050b0:	2300      	movs	r3, #0
 80050b2:	73fb      	strb	r3, [r7, #15]
 80050b4:	e044      	b.n	8005140 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050b6:	7bfa      	ldrb	r2, [r7, #15]
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050cc:	7bfa      	ldrb	r2, [r7, #15]
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80050de:	7bfa      	ldrb	r2, [r7, #15]
 80050e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050e2:	7bfa      	ldrb	r2, [r7, #15]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050f8:	7bfa      	ldrb	r2, [r7, #15]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800510e:	7bfa      	ldrb	r2, [r7, #15]
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005124:	7bfa      	ldrb	r2, [r7, #15]
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4613      	mov	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	3301      	adds	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	791b      	ldrb	r3, [r3, #4]
 8005144:	7bfa      	ldrb	r2, [r7, #15]
 8005146:	429a      	cmp	r2, r3
 8005148:	d3b5      	bcc.n	80050b6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	7c1a      	ldrb	r2, [r3, #16]
 8005152:	f88d 2000 	strb.w	r2, [sp]
 8005156:	3304      	adds	r3, #4
 8005158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800515a:	f003 fe9b 	bl	8008e94 <USB_DevInit>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e013      	b.n	8005198 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	7b1b      	ldrb	r3, [r3, #12]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d102      	bne.n	800518c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 f86e 	bl	8006268 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f004 fe52 	bl	8009e3a <USB_DevDisconnect>

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_PCD_Start+0x1c>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e01c      	b.n	80051f6 <HAL_PCD_Start+0x56>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	7b5b      	ldrb	r3, [r3, #13]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d105      	bne.n	80051d8 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f003 fdeb 	bl	8008db8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f004 fe06 	bl	8009df8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80051fe:	b590      	push	{r4, r7, lr}
 8005200:	b08d      	sub	sp, #52	@ 0x34
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f004 fec4 	bl	8009fa2 <USB_GetMode>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	f040 8481 	bne.w	8005b24 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f004 fe28 	bl	8009e7c <USB_ReadInterrupts>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 8477 	beq.w	8005b22 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	0a1b      	lsrs	r3, r3, #8
 800523e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f004 fe15 	bl	8009e7c <USB_ReadInterrupts>
 8005252:	4603      	mov	r3, r0
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b02      	cmp	r3, #2
 800525a:	d107      	bne.n	800526c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695a      	ldr	r2, [r3, #20]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f002 0202 	and.w	r2, r2, #2
 800526a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f004 fe03 	bl	8009e7c <USB_ReadInterrupts>
 8005276:	4603      	mov	r3, r0
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b10      	cmp	r3, #16
 800527e:	d161      	bne.n	8005344 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0210 	bic.w	r2, r2, #16
 800528e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f003 020f 	and.w	r2, r3, #15
 800529c:	4613      	mov	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	4413      	add	r3, r2
 80052ac:	3304      	adds	r3, #4
 80052ae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80052b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052ba:	d124      	bne.n	8005306 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d035      	beq.n	8005334 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	091b      	lsrs	r3, r3, #4
 80052d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	6a38      	ldr	r0, [r7, #32]
 80052dc:	f004 fc3a 	bl	8009b54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	091b      	lsrs	r3, r3, #4
 80052e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ec:	441a      	add	r2, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	695a      	ldr	r2, [r3, #20]
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	091b      	lsrs	r3, r3, #4
 80052fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052fe:	441a      	add	r2, r3
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	615a      	str	r2, [r3, #20]
 8005304:	e016      	b.n	8005334 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800530c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005310:	d110      	bne.n	8005334 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005318:	2208      	movs	r2, #8
 800531a:	4619      	mov	r1, r3
 800531c:	6a38      	ldr	r0, [r7, #32]
 800531e:	f004 fc19 	bl	8009b54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	695a      	ldr	r2, [r3, #20]
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800532e:	441a      	add	r2, r3
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0210 	orr.w	r2, r2, #16
 8005342:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f004 fd97 	bl	8009e7c <USB_ReadInterrupts>
 800534e:	4603      	mov	r3, r0
 8005350:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005354:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005358:	f040 80a7 	bne.w	80054aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f004 fd9c 	bl	8009ea2 <USB_ReadDevAllOutEpInterrupt>
 800536a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800536c:	e099      	b.n	80054a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800536e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 808e 	beq.w	8005496 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	4611      	mov	r1, r2
 8005384:	4618      	mov	r0, r3
 8005386:	f004 fdc0 	bl	8009f0a <USB_ReadDevOutEPInterrupt>
 800538a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00c      	beq.n	80053b0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a2:	461a      	mov	r2, r3
 80053a4:	2301      	movs	r3, #1
 80053a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80053a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fe82 	bl	80060b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00c      	beq.n	80053d4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c6:	461a      	mov	r2, r3
 80053c8:	2308      	movs	r3, #8
 80053ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80053cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 febe 	bl	8006150 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ea:	461a      	mov	r2, r3
 80053ec:	2310      	movs	r3, #16
 80053ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d030      	beq.n	800545c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005402:	2b80      	cmp	r3, #128	@ 0x80
 8005404:	d109      	bne.n	800541a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005414:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005418:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800541a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800541c:	4613      	mov	r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	4413      	add	r3, r2
 800542c:	3304      	adds	r3, #4
 800542e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	78db      	ldrb	r3, [r3, #3]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d108      	bne.n	800544a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2200      	movs	r2, #0
 800543c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	b2db      	uxtb	r3, r3
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f009 ffb7 	bl	800f3b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005456:	461a      	mov	r2, r3
 8005458:	2302      	movs	r3, #2
 800545a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d008      	beq.n	8005478 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005472:	461a      	mov	r2, r3
 8005474:	2320      	movs	r3, #32
 8005476:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548e:	461a      	mov	r2, r3
 8005490:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005494:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	3301      	adds	r3, #1
 800549a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800549c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549e:	085b      	lsrs	r3, r3, #1
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80054a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f47f af62 	bne.w	800536e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f004 fce4 	bl	8009e7c <USB_ReadInterrupts>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054be:	f040 80a4 	bne.w	800560a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f004 fd05 	bl	8009ed6 <USB_ReadDevAllInEpInterrupt>
 80054cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80054d2:	e096      	b.n	8005602 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80054d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 808b 	beq.w	80055f6 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	4611      	mov	r1, r2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f004 fd2b 	bl	8009f46 <USB_ReadDevInEPInterrupt>
 80054f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d020      	beq.n	800553e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	2201      	movs	r2, #1
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	43db      	mvns	r3, r3
 8005516:	69f9      	ldr	r1, [r7, #28]
 8005518:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800551c:	4013      	ands	r3, r2
 800551e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800552c:	461a      	mov	r2, r3
 800552e:	2301      	movs	r3, #1
 8005530:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005534:	b2db      	uxtb	r3, r3
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f009 fea8 	bl	800f28e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005554:	461a      	mov	r2, r3
 8005556:	2308      	movs	r3, #8
 8005558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005570:	461a      	mov	r2, r3
 8005572:	2310      	movs	r3, #16
 8005574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800558c:	461a      	mov	r2, r3
 800558e:	2340      	movs	r3, #64	@ 0x40
 8005590:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d023      	beq.n	80055e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800559c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800559e:	6a38      	ldr	r0, [r7, #32]
 80055a0:	f003 fdc0 	bl	8009124 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80055a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a6:	4613      	mov	r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	3310      	adds	r3, #16
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4413      	add	r3, r2
 80055b4:	3304      	adds	r3, #4
 80055b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	78db      	ldrb	r3, [r3, #3]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d108      	bne.n	80055d2 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2200      	movs	r2, #0
 80055c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f009 ff05 	bl	800f3dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055de:	461a      	mov	r2, r3
 80055e0:	2302      	movs	r3, #2
 80055e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80055ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fcd6 	bl	8005fa2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	3301      	adds	r3, #1
 80055fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80055fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fe:	085b      	lsrs	r3, r3, #1
 8005600:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005604:	2b00      	cmp	r3, #0
 8005606:	f47f af65 	bne.w	80054d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f004 fc34 	bl	8009e7c <USB_ReadInterrupts>
 8005614:	4603      	mov	r3, r0
 8005616:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800561a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800561e:	d122      	bne.n	8005666 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800563a:	2b01      	cmp	r3, #1
 800563c:	d108      	bne.n	8005650 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005646:	2100      	movs	r1, #0
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f00a f939 	bl	800f8c0 <HAL_PCDEx_LPM_Callback>
 800564e:	e002      	b.n	8005656 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f009 fe89 	bl	800f368 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695a      	ldr	r2, [r3, #20]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f004 fc06 	bl	8009e7c <USB_ReadInterrupts>
 8005670:	4603      	mov	r3, r0
 8005672:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005676:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800567a:	d112      	bne.n	80056a2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	d102      	bne.n	8005692 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f009 fe45 	bl	800f31c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80056a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f004 fbe8 	bl	8009e7c <USB_ReadInterrupts>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056b6:	d121      	bne.n	80056fc <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80056c6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d111      	bne.n	80056f6 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e0:	089b      	lsrs	r3, r3, #2
 80056e2:	f003 020f 	and.w	r2, r3, #15
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80056ec:	2101      	movs	r1, #1
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f00a f8e6 	bl	800f8c0 <HAL_PCDEx_LPM_Callback>
 80056f4:	e002      	b.n	80056fc <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f009 fe10 	bl	800f31c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f004 fbbb 	bl	8009e7c <USB_ReadInterrupts>
 8005706:	4603      	mov	r3, r0
 8005708:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800570c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005710:	f040 80b6 	bne.w	8005880 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2110      	movs	r1, #16
 800572e:	4618      	mov	r0, r3
 8005730:	f003 fcf8 	bl	8009124 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005734:	2300      	movs	r3, #0
 8005736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005738:	e046      	b.n	80057c8 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800573a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005746:	461a      	mov	r2, r3
 8005748:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800574c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800574e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005768:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800576c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800576e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577a:	461a      	mov	r2, r3
 800577c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005780:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800579c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057b2:	0151      	lsls	r1, r2, #5
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	440a      	add	r2, r1
 80057b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c4:	3301      	adds	r3, #1
 80057c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	791b      	ldrb	r3, [r3, #4]
 80057cc:	461a      	mov	r2, r3
 80057ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d3b2      	bcc.n	800573a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057e2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80057e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	7bdb      	ldrb	r3, [r3, #15]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d016      	beq.n	800581e <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005800:	f043 030b 	orr.w	r3, r3, #11
 8005804:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800580e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005816:	f043 030b 	orr.w	r3, r3, #11
 800581a:	6453      	str	r3, [r2, #68]	@ 0x44
 800581c:	e015      	b.n	800584a <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800582c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005830:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005834:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005844:	f043 030b 	orr.w	r3, r3, #11
 8005848:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005858:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800585c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005868:	4619      	mov	r1, r3
 800586a:	4610      	mov	r0, r2
 800586c:	f004 fbca 	bl	800a004 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695a      	ldr	r2, [r3, #20]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800587e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4618      	mov	r0, r3
 8005886:	f004 faf9 	bl	8009e7c <USB_ReadInterrupts>
 800588a:	4603      	mov	r3, r0
 800588c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005894:	d123      	bne.n	80058de <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f004 fb8f 	bl	8009fbe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f003 fcb6 	bl	8009216 <USB_GetDevSpeed>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461a      	mov	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681c      	ldr	r4, [r3, #0]
 80058b6:	f001 fb13 	bl	8006ee0 <HAL_RCC_GetHCLKFreq>
 80058ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058c0:	461a      	mov	r2, r3
 80058c2:	4620      	mov	r0, r4
 80058c4:	f003 f9dc 	bl	8008c80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f009 fd08 	bl	800f2de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695a      	ldr	r2, [r3, #20]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80058dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f004 faca 	bl	8009e7c <USB_ReadInterrupts>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	d10a      	bne.n	8005908 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f009 fce5 	bl	800f2c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695a      	ldr	r2, [r3, #20]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f002 0208 	and.w	r2, r2, #8
 8005906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f004 fab5 	bl	8009e7c <USB_ReadInterrupts>
 8005912:	4603      	mov	r3, r0
 8005914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005918:	2b80      	cmp	r3, #128	@ 0x80
 800591a:	d123      	bne.n	8005964 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005928:	2301      	movs	r3, #1
 800592a:	627b      	str	r3, [r7, #36]	@ 0x24
 800592c:	e014      	b.n	8005958 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005932:	4613      	mov	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	440b      	add	r3, r1
 800593c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d105      	bne.n	8005952 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	b2db      	uxtb	r3, r3
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 faf7 	bl	8005f40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	3301      	adds	r3, #1
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	791b      	ldrb	r3, [r3, #4]
 800595c:	461a      	mov	r2, r3
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	4293      	cmp	r3, r2
 8005962:	d3e4      	bcc.n	800592e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f004 fa87 	bl	8009e7c <USB_ReadInterrupts>
 800596e:	4603      	mov	r3, r0
 8005970:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005974:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005978:	d13c      	bne.n	80059f4 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800597a:	2301      	movs	r3, #1
 800597c:	627b      	str	r3, [r7, #36]	@ 0x24
 800597e:	e02b      	b.n	80059d8 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005994:	4613      	mov	r3, r2
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	3318      	adds	r3, #24
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d115      	bne.n	80059d2 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80059a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	da12      	bge.n	80059d2 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b0:	4613      	mov	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	3317      	adds	r3, #23
 80059bc:	2201      	movs	r2, #1
 80059be:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fab7 	bl	8005f40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d4:	3301      	adds	r3, #1
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	791b      	ldrb	r3, [r3, #4]
 80059dc:	461a      	mov	r2, r3
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d3cd      	bcc.n	8005980 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80059f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f004 fa3f 	bl	8009e7c <USB_ReadInterrupts>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a08:	d156      	bne.n	8005ab8 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a0e:	e045      	b.n	8005a9c <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a24:	4613      	mov	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d12e      	bne.n	8005a96 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	da2b      	bge.n	8005a96 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005a4a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d121      	bne.n	8005a96 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005a64:	2201      	movs	r2, #1
 8005a66:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a92:	6053      	str	r3, [r2, #4]
            break;
 8005a94:	e008      	b.n	8005aa8 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	3301      	adds	r3, #1
 8005a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	791b      	ldrb	r3, [r3, #4]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d3b3      	bcc.n	8005a10 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695a      	ldr	r2, [r3, #20]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f004 f9dd 	bl	8009e7c <USB_ReadInterrupts>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005acc:	d10a      	bne.n	8005ae4 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f009 fc96 	bl	800f400 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f004 f9c7 	bl	8009e7c <USB_ReadInterrupts>
 8005aee:	4603      	mov	r3, r0
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d115      	bne.n	8005b24 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f009 fc86 	bl	800f41c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6859      	ldr	r1, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	605a      	str	r2, [r3, #4]
 8005b20:	e000      	b.n	8005b24 <HAL_PCD_IRQHandler+0x926>
      return;
 8005b22:	bf00      	nop
    }
  }
}
 8005b24:	3734      	adds	r7, #52	@ 0x34
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd90      	pop	{r4, r7, pc}

08005b2a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_PCD_SetAddress+0x1a>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e012      	b.n	8005b6a <HAL_PCD_SetAddress+0x40>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f004 f926 	bl	8009dac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	4608      	mov	r0, r1
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4603      	mov	r3, r0
 8005b82:	70fb      	strb	r3, [r7, #3]
 8005b84:	460b      	mov	r3, r1
 8005b86:	803b      	strh	r3, [r7, #0]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	da0f      	bge.n	8005bb8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	f003 020f 	and.w	r2, r3, #15
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	3310      	adds	r3, #16
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	4413      	add	r3, r2
 8005bac:	3304      	adds	r3, #4
 8005bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	705a      	strb	r2, [r3, #1]
 8005bb6:	e00f      	b.n	8005bd8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	f003 020f 	and.w	r2, r3, #15
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4413      	add	r3, r2
 8005bce:	3304      	adds	r3, #4
 8005bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005be4:	883b      	ldrh	r3, [r7, #0]
 8005be6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	78ba      	ldrb	r2, [r7, #2]
 8005bf2:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005c06:	78bb      	ldrb	r3, [r7, #2]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d102      	bne.n	8005c12 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_PCD_EP_Open+0xae>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e00e      	b.n	8005c3e <HAL_PCD_EP_Open+0xcc>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68f9      	ldr	r1, [r7, #12]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f003 fb10 	bl	8009254 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	da0f      	bge.n	8005c7a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	f003 020f 	and.w	r2, r3, #15
 8005c60:	4613      	mov	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	3310      	adds	r3, #16
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3304      	adds	r3, #4
 8005c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	705a      	strb	r2, [r3, #1]
 8005c78:	e00f      	b.n	8005c9a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	f003 020f 	and.w	r2, r3, #15
 8005c80:	4613      	mov	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	4413      	add	r3, r2
 8005c90:	3304      	adds	r3, #4
 8005c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	f003 030f 	and.w	r3, r3, #15
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_PCD_EP_Close+0x6e>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e00e      	b.n	8005cd2 <HAL_PCD_EP_Close+0x8c>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68f9      	ldr	r1, [r7, #12]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f003 fb4e 	bl	8009364 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	607a      	str	r2, [r7, #4]
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cea:	7afb      	ldrb	r3, [r7, #11]
 8005cec:	f003 020f 	and.w	r2, r3, #15
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	3304      	adds	r3, #4
 8005d02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2200      	movs	r2, #0
 8005d14:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d1c:	7afb      	ldrb	r3, [r7, #11]
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6979      	ldr	r1, [r7, #20]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f003 fbf4 	bl	800951c <USB_EPStartXfer>

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	f003 020f 	and.w	r2, r3, #15
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	4613      	mov	r3, r2
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	4413      	add	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	440b      	add	r3, r1
 8005d5c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005d60:	681b      	ldr	r3, [r3, #0]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b086      	sub	sp, #24
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	f003 020f 	and.w	r2, r3, #15
 8005d84:	4613      	mov	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	3310      	adds	r3, #16
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	3304      	adds	r3, #4
 8005d94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2200      	movs	r2, #0
 8005da6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2201      	movs	r2, #1
 8005dac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dae:	7afb      	ldrb	r3, [r7, #11]
 8005db0:	f003 030f 	and.w	r3, r3, #15
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6979      	ldr	r1, [r7, #20]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f003 fbab 	bl	800951c <USB_EPStartXfer>

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	7912      	ldrb	r2, [r2, #4]
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d901      	bls.n	8005dee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e04e      	b.n	8005e8c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	da0f      	bge.n	8005e16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	f003 020f 	and.w	r2, r3, #15
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	3310      	adds	r3, #16
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	4413      	add	r3, r2
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	705a      	strb	r2, [r3, #1]
 8005e14:	e00d      	b.n	8005e32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e16:	78fa      	ldrb	r2, [r7, #3]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	4413      	add	r3, r2
 8005e28:	3304      	adds	r3, #4
 8005e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_PCD_EP_SetStall+0x82>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e01c      	b.n	8005e8c <HAL_PCD_EP_SetStall+0xbc>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68f9      	ldr	r1, [r7, #12]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f003 fecf 	bl	8009c04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	f003 030f 	and.w	r3, r3, #15
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d108      	bne.n	8005e82 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f004 f8c1 	bl	800a004 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	7912      	ldrb	r2, [r2, #4]
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d901      	bls.n	8005eb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e042      	b.n	8005f38 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	da0f      	bge.n	8005eda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	f003 020f 	and.w	r2, r3, #15
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	3310      	adds	r3, #16
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	4413      	add	r3, r2
 8005ece:	3304      	adds	r3, #4
 8005ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	705a      	strb	r2, [r3, #1]
 8005ed8:	e00f      	b.n	8005efa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005eda:	78fb      	ldrb	r3, [r7, #3]
 8005edc:	f003 020f 	and.w	r2, r3, #15
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_PCD_EP_ClrStall+0x86>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e00e      	b.n	8005f38 <HAL_PCD_EP_ClrStall+0xa4>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68f9      	ldr	r1, [r7, #12]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f003 fed9 	bl	8009ce0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	da0c      	bge.n	8005f6e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	f003 020f 	and.w	r2, r3, #15
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	3310      	adds	r3, #16
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	4413      	add	r3, r2
 8005f68:	3304      	adds	r3, #4
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	e00c      	b.n	8005f88 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f6e:	78fb      	ldrb	r3, [r7, #3]
 8005f70:	f003 020f 	and.w	r2, r3, #15
 8005f74:	4613      	mov	r3, r2
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	4413      	add	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	4413      	add	r3, r2
 8005f84:	3304      	adds	r3, #4
 8005f86:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68f9      	ldr	r1, [r7, #12]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f003 fcfc 	bl	800998c <USB_EPStopXfer>
 8005f94:	4603      	mov	r3, r0
 8005f96:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005f98:	7afb      	ldrb	r3, [r7, #11]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b088      	sub	sp, #32
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	3310      	adds	r3, #16
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d901      	bls.n	8005fda <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e067      	b.n	80060aa <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d902      	bls.n	8005ff6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	3303      	adds	r3, #3
 8005ffa:	089b      	lsrs	r3, r3, #2
 8005ffc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ffe:	e026      	b.n	800604e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	429a      	cmp	r2, r3
 8006014:	d902      	bls.n	800601c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	3303      	adds	r3, #3
 8006020:	089b      	lsrs	r3, r3, #2
 8006022:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	68d9      	ldr	r1, [r3, #12]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	b2da      	uxtb	r2, r3
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	b29b      	uxth	r3, r3
 8006030:	6978      	ldr	r0, [r7, #20]
 8006032:	f003 fd55 	bl	8009ae0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	441a      	add	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	695a      	ldr	r2, [r3, #20]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	441a      	add	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	429a      	cmp	r2, r3
 8006062:	d809      	bhi.n	8006078 <PCD_WriteEmptyTxFifo+0xd6>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800606c:	429a      	cmp	r2, r3
 800606e:	d203      	bcs.n	8006078 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1c3      	bne.n	8006000 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	429a      	cmp	r2, r3
 8006082:	d811      	bhi.n	80060a8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	2201      	movs	r2, #1
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	43db      	mvns	r3, r3
 800609e:	6939      	ldr	r1, [r7, #16]
 80060a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060a4:	4013      	ands	r3, r2
 80060a6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3720      	adds	r7, #32
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	333c      	adds	r3, #60	@ 0x3c
 80060cc:	3304      	adds	r3, #4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a19      	ldr	r2, [pc, #100]	@ (800614c <PCD_EP_OutXfrComplete_int+0x98>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d124      	bne.n	8006134 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006100:	461a      	mov	r2, r3
 8006102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006106:	6093      	str	r3, [r2, #8]
 8006108:	e01a      	b.n	8006140 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006120:	461a      	mov	r2, r3
 8006122:	2320      	movs	r3, #32
 8006124:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	b2db      	uxtb	r3, r3
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f009 f893 	bl	800f258 <HAL_PCD_DataOutStageCallback>
 8006132:	e005      	b.n	8006140 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f009 f88c 	bl	800f258 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	4f54310a 	.word	0x4f54310a

08006150 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	333c      	adds	r3, #60	@ 0x3c
 8006168:	3304      	adds	r3, #4
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4a0c      	ldr	r2, [pc, #48]	@ (80061b4 <PCD_EP_OutSetupPacket_int+0x64>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d90e      	bls.n	80061a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800618c:	2b00      	cmp	r3, #0
 800618e:	d009      	beq.n	80061a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619c:	461a      	mov	r2, r3
 800619e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f009 f845 	bl	800f234 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	4f54300a 	.word	0x4f54300a

080061b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70fb      	strb	r3, [r7, #3]
 80061c4:	4613      	mov	r3, r2
 80061c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d107      	bne.n	80061e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80061d6:	883b      	ldrh	r3, [r7, #0]
 80061d8:	0419      	lsls	r1, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80061e4:	e028      	b.n	8006238 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	0c1b      	lsrs	r3, r3, #16
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	4413      	add	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061f4:	2300      	movs	r3, #0
 80061f6:	73fb      	strb	r3, [r7, #15]
 80061f8:	e00d      	b.n	8006216 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	3340      	adds	r3, #64	@ 0x40
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	0c1b      	lsrs	r3, r3, #16
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	4413      	add	r3, r2
 800620e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	3301      	adds	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]
 8006216:	7bfa      	ldrb	r2, [r7, #15]
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	3b01      	subs	r3, #1
 800621c:	429a      	cmp	r2, r3
 800621e:	d3ec      	bcc.n	80061fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006220:	883b      	ldrh	r3, [r7, #0]
 8006222:	0418      	lsls	r0, r3, #16
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6819      	ldr	r1, [r3, #0]
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	3b01      	subs	r3, #1
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	4302      	orrs	r2, r0
 8006230:	3340      	adds	r3, #64	@ 0x40
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	460b      	mov	r3, r1
 8006250:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	887a      	ldrh	r2, [r7, #2]
 8006258:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800629a:	f043 0303 	orr.w	r3, r3, #3
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80062b4:	4b04      	ldr	r3, [pc, #16]	@ (80062c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80062bc:	4618      	mov	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40007000 	.word	0x40007000

080062cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062da:	d130      	bne.n	800633e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80062dc:	4b23      	ldr	r3, [pc, #140]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062e8:	d038      	beq.n	800635c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062ea:	4b20      	ldr	r3, [pc, #128]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062f2:	4a1e      	ldr	r2, [pc, #120]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006370 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2232      	movs	r2, #50	@ 0x32
 8006300:	fb02 f303 	mul.w	r3, r2, r3
 8006304:	4a1b      	ldr	r2, [pc, #108]	@ (8006374 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006306:	fba2 2303 	umull	r2, r3, r2, r3
 800630a:	0c9b      	lsrs	r3, r3, #18
 800630c:	3301      	adds	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006310:	e002      	b.n	8006318 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3b01      	subs	r3, #1
 8006316:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006318:	4b14      	ldr	r3, [pc, #80]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006324:	d102      	bne.n	800632c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1f2      	bne.n	8006312 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800632c:	4b0f      	ldr	r3, [pc, #60]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006338:	d110      	bne.n	800635c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e00f      	b.n	800635e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800633e:	4b0b      	ldr	r3, [pc, #44]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800634a:	d007      	beq.n	800635c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800634c:	4b07      	ldr	r3, [pc, #28]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006354:	4a05      	ldr	r2, [pc, #20]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800635a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40007000 	.word	0x40007000
 8006370:	20000000 	.word	0x20000000
 8006374:	431bde83 	.word	0x431bde83

08006378 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800637c:	4b05      	ldr	r3, [pc, #20]	@ (8006394 <HAL_PWREx_EnableVddUSB+0x1c>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	4a04      	ldr	r2, [pc, #16]	@ (8006394 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006382:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006386:	6053      	str	r3, [r2, #4]
}
 8006388:	bf00      	nop
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40007000 	.word	0x40007000

08006398 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d102      	bne.n	80063ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f000 bc08 	b.w	8006bbc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ac:	4b96      	ldr	r3, [pc, #600]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 030c 	and.w	r3, r3, #12
 80063b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063b6:	4b94      	ldr	r3, [pc, #592]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 80e4 	beq.w	8006596 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <HAL_RCC_OscConfig+0x4c>
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	2b0c      	cmp	r3, #12
 80063d8:	f040 808b 	bne.w	80064f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	f040 8087 	bne.w	80064f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80063e4:	4b88      	ldr	r3, [pc, #544]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d005      	beq.n	80063fc <HAL_RCC_OscConfig+0x64>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e3df      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	4b81      	ldr	r3, [pc, #516]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <HAL_RCC_OscConfig+0x7e>
 800640c:	4b7e      	ldr	r3, [pc, #504]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006414:	e005      	b.n	8006422 <HAL_RCC_OscConfig+0x8a>
 8006416:	4b7c      	ldr	r3, [pc, #496]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800641c:	091b      	lsrs	r3, r3, #4
 800641e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006422:	4293      	cmp	r3, r2
 8006424:	d223      	bcs.n	800646e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fdac 	bl	8006f88 <RCC_SetFlashLatencyFromMSIRange>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e3c0      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800643a:	4b73      	ldr	r3, [pc, #460]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a72      	ldr	r2, [pc, #456]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006440:	f043 0308 	orr.w	r3, r3, #8
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	4b70      	ldr	r3, [pc, #448]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	496d      	ldr	r1, [pc, #436]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006454:	4313      	orrs	r3, r2
 8006456:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006458:	4b6b      	ldr	r3, [pc, #428]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	021b      	lsls	r3, r3, #8
 8006466:	4968      	ldr	r1, [pc, #416]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006468:	4313      	orrs	r3, r2
 800646a:	604b      	str	r3, [r1, #4]
 800646c:	e025      	b.n	80064ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800646e:	4b66      	ldr	r3, [pc, #408]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a65      	ldr	r2, [pc, #404]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006474:	f043 0308 	orr.w	r3, r3, #8
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	4b63      	ldr	r3, [pc, #396]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	4960      	ldr	r1, [pc, #384]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006488:	4313      	orrs	r3, r2
 800648a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800648c:	4b5e      	ldr	r3, [pc, #376]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	495b      	ldr	r1, [pc, #364]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 800649c:	4313      	orrs	r3, r2
 800649e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fd6c 	bl	8006f88 <RCC_SetFlashLatencyFromMSIRange>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e380      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064ba:	f000 fc87 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 80064be:	4602      	mov	r2, r0
 80064c0:	4b51      	ldr	r3, [pc, #324]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	091b      	lsrs	r3, r3, #4
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	4950      	ldr	r1, [pc, #320]	@ (800660c <HAL_RCC_OscConfig+0x274>)
 80064cc:	5ccb      	ldrb	r3, [r1, r3]
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	fa22 f303 	lsr.w	r3, r2, r3
 80064d6:	4a4e      	ldr	r2, [pc, #312]	@ (8006610 <HAL_RCC_OscConfig+0x278>)
 80064d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80064da:	4b4e      	ldr	r3, [pc, #312]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fc fbf0 	bl	8002cc4 <HAL_InitTick>
 80064e4:	4603      	mov	r3, r0
 80064e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d052      	beq.n	8006594 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
 80064f0:	e364      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d032      	beq.n	8006560 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80064fa:	4b43      	ldr	r3, [pc, #268]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a42      	ldr	r2, [pc, #264]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006500:	f043 0301 	orr.w	r3, r3, #1
 8006504:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006506:	f7fc fdc1 	bl	800308c <HAL_GetTick>
 800650a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800650c:	e008      	b.n	8006520 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800650e:	f7fc fdbd 	bl	800308c <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e34d      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006520:	4b39      	ldr	r3, [pc, #228]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0f0      	beq.n	800650e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800652c:	4b36      	ldr	r3, [pc, #216]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a35      	ldr	r2, [pc, #212]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006532:	f043 0308 	orr.w	r3, r3, #8
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	4b33      	ldr	r3, [pc, #204]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	4930      	ldr	r1, [pc, #192]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006546:	4313      	orrs	r3, r2
 8006548:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800654a:	4b2f      	ldr	r3, [pc, #188]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	021b      	lsls	r3, r3, #8
 8006558:	492b      	ldr	r1, [pc, #172]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 800655a:	4313      	orrs	r3, r2
 800655c:	604b      	str	r3, [r1, #4]
 800655e:	e01a      	b.n	8006596 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006560:	4b29      	ldr	r3, [pc, #164]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a28      	ldr	r2, [pc, #160]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800656c:	f7fc fd8e 	bl	800308c <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006574:	f7fc fd8a 	bl	800308c <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e31a      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006586:	4b20      	ldr	r3, [pc, #128]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f0      	bne.n	8006574 <HAL_RCC_OscConfig+0x1dc>
 8006592:	e000      	b.n	8006596 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006594:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d073      	beq.n	800668a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d005      	beq.n	80065b4 <HAL_RCC_OscConfig+0x21c>
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b0c      	cmp	r3, #12
 80065ac:	d10e      	bne.n	80065cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d10b      	bne.n	80065cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b4:	4b14      	ldr	r3, [pc, #80]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d063      	beq.n	8006688 <HAL_RCC_OscConfig+0x2f0>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d15f      	bne.n	8006688 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e2f7      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d4:	d106      	bne.n	80065e4 <HAL_RCC_OscConfig+0x24c>
 80065d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a0b      	ldr	r2, [pc, #44]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 80065dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	e025      	b.n	8006630 <HAL_RCC_OscConfig+0x298>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065ec:	d114      	bne.n	8006618 <HAL_RCC_OscConfig+0x280>
 80065ee:	4b06      	ldr	r3, [pc, #24]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a05      	ldr	r2, [pc, #20]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 80065f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	4b03      	ldr	r3, [pc, #12]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a02      	ldr	r2, [pc, #8]	@ (8006608 <HAL_RCC_OscConfig+0x270>)
 8006600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e013      	b.n	8006630 <HAL_RCC_OscConfig+0x298>
 8006608:	40021000 	.word	0x40021000
 800660c:	08012504 	.word	0x08012504
 8006610:	20000000 	.word	0x20000000
 8006614:	20000004 	.word	0x20000004
 8006618:	4ba0      	ldr	r3, [pc, #640]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a9f      	ldr	r2, [pc, #636]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 800661e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	4b9d      	ldr	r3, [pc, #628]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a9c      	ldr	r2, [pc, #624]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 800662a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800662e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d013      	beq.n	8006660 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006638:	f7fc fd28 	bl	800308c <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006640:	f7fc fd24 	bl	800308c <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b64      	cmp	r3, #100	@ 0x64
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e2b4      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006652:	4b92      	ldr	r3, [pc, #584]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0f0      	beq.n	8006640 <HAL_RCC_OscConfig+0x2a8>
 800665e:	e014      	b.n	800668a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006660:	f7fc fd14 	bl	800308c <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006668:	f7fc fd10 	bl	800308c <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b64      	cmp	r3, #100	@ 0x64
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e2a0      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800667a:	4b88      	ldr	r3, [pc, #544]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f0      	bne.n	8006668 <HAL_RCC_OscConfig+0x2d0>
 8006686:	e000      	b.n	800668a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d060      	beq.n	8006758 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	2b04      	cmp	r3, #4
 800669a:	d005      	beq.n	80066a8 <HAL_RCC_OscConfig+0x310>
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b0c      	cmp	r3, #12
 80066a0:	d119      	bne.n	80066d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d116      	bne.n	80066d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066a8:	4b7c      	ldr	r3, [pc, #496]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <HAL_RCC_OscConfig+0x328>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e27d      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066c0:	4b76      	ldr	r3, [pc, #472]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	061b      	lsls	r3, r3, #24
 80066ce:	4973      	ldr	r1, [pc, #460]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066d4:	e040      	b.n	8006758 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d023      	beq.n	8006726 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066de:	4b6f      	ldr	r3, [pc, #444]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a6e      	ldr	r2, [pc, #440]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 80066e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ea:	f7fc fccf 	bl	800308c <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066f0:	e008      	b.n	8006704 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066f2:	f7fc fccb 	bl	800308c <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e25b      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006704:	4b65      	ldr	r3, [pc, #404]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0f0      	beq.n	80066f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006710:	4b62      	ldr	r3, [pc, #392]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	061b      	lsls	r3, r3, #24
 800671e:	495f      	ldr	r1, [pc, #380]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 8006720:	4313      	orrs	r3, r2
 8006722:	604b      	str	r3, [r1, #4]
 8006724:	e018      	b.n	8006758 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006726:	4b5d      	ldr	r3, [pc, #372]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a5c      	ldr	r2, [pc, #368]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 800672c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006732:	f7fc fcab 	bl	800308c <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006738:	e008      	b.n	800674c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800673a:	f7fc fca7 	bl	800308c <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e237      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800674c:	4b53      	ldr	r3, [pc, #332]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1f0      	bne.n	800673a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b00      	cmp	r3, #0
 8006762:	d03c      	beq.n	80067de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01c      	beq.n	80067a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800676c:	4b4b      	ldr	r3, [pc, #300]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 800676e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006772:	4a4a      	ldr	r2, [pc, #296]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 8006774:	f043 0301 	orr.w	r3, r3, #1
 8006778:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677c:	f7fc fc86 	bl	800308c <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006784:	f7fc fc82 	bl	800308c <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e212      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006796:	4b41      	ldr	r3, [pc, #260]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 8006798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0ef      	beq.n	8006784 <HAL_RCC_OscConfig+0x3ec>
 80067a4:	e01b      	b.n	80067de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067a6:	4b3d      	ldr	r3, [pc, #244]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 80067a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067ac:	4a3b      	ldr	r2, [pc, #236]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 80067ae:	f023 0301 	bic.w	r3, r3, #1
 80067b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b6:	f7fc fc69 	bl	800308c <HAL_GetTick>
 80067ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067be:	f7fc fc65 	bl	800308c <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e1f5      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067d0:	4b32      	ldr	r3, [pc, #200]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 80067d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1ef      	bne.n	80067be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 80a6 	beq.w	8006938 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ec:	2300      	movs	r3, #0
 80067ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80067f0:	4b2a      	ldr	r3, [pc, #168]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 80067f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10d      	bne.n	8006818 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067fc:	4b27      	ldr	r3, [pc, #156]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 80067fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006800:	4a26      	ldr	r2, [pc, #152]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 8006802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006806:	6593      	str	r3, [r2, #88]	@ 0x58
 8006808:	4b24      	ldr	r3, [pc, #144]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 800680a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800680c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006810:	60bb      	str	r3, [r7, #8]
 8006812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006814:	2301      	movs	r3, #1
 8006816:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006818:	4b21      	ldr	r3, [pc, #132]	@ (80068a0 <HAL_RCC_OscConfig+0x508>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006820:	2b00      	cmp	r3, #0
 8006822:	d118      	bne.n	8006856 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006824:	4b1e      	ldr	r3, [pc, #120]	@ (80068a0 <HAL_RCC_OscConfig+0x508>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a1d      	ldr	r2, [pc, #116]	@ (80068a0 <HAL_RCC_OscConfig+0x508>)
 800682a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800682e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006830:	f7fc fc2c 	bl	800308c <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006836:	e008      	b.n	800684a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006838:	f7fc fc28 	bl	800308c <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e1b8      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800684a:	4b15      	ldr	r3, [pc, #84]	@ (80068a0 <HAL_RCC_OscConfig+0x508>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0f0      	beq.n	8006838 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d108      	bne.n	8006870 <HAL_RCC_OscConfig+0x4d8>
 800685e:	4b0f      	ldr	r3, [pc, #60]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 8006860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006864:	4a0d      	ldr	r2, [pc, #52]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800686e:	e029      	b.n	80068c4 <HAL_RCC_OscConfig+0x52c>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b05      	cmp	r3, #5
 8006876:	d115      	bne.n	80068a4 <HAL_RCC_OscConfig+0x50c>
 8006878:	4b08      	ldr	r3, [pc, #32]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 800687a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687e:	4a07      	ldr	r2, [pc, #28]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 8006880:	f043 0304 	orr.w	r3, r3, #4
 8006884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006888:	4b04      	ldr	r3, [pc, #16]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 800688a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800688e:	4a03      	ldr	r2, [pc, #12]	@ (800689c <HAL_RCC_OscConfig+0x504>)
 8006890:	f043 0301 	orr.w	r3, r3, #1
 8006894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006898:	e014      	b.n	80068c4 <HAL_RCC_OscConfig+0x52c>
 800689a:	bf00      	nop
 800689c:	40021000 	.word	0x40021000
 80068a0:	40007000 	.word	0x40007000
 80068a4:	4b9d      	ldr	r3, [pc, #628]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 80068a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068aa:	4a9c      	ldr	r2, [pc, #624]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 80068ac:	f023 0301 	bic.w	r3, r3, #1
 80068b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068b4:	4b99      	ldr	r3, [pc, #612]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 80068b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ba:	4a98      	ldr	r2, [pc, #608]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 80068bc:	f023 0304 	bic.w	r3, r3, #4
 80068c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d016      	beq.n	80068fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068cc:	f7fc fbde 	bl	800308c <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068d2:	e00a      	b.n	80068ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d4:	f7fc fbda 	bl	800308c <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e168      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068ea:	4b8c      	ldr	r3, [pc, #560]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 80068ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0ed      	beq.n	80068d4 <HAL_RCC_OscConfig+0x53c>
 80068f8:	e015      	b.n	8006926 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fa:	f7fc fbc7 	bl	800308c <HAL_GetTick>
 80068fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006900:	e00a      	b.n	8006918 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006902:	f7fc fbc3 	bl	800308c <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006910:	4293      	cmp	r3, r2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e151      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006918:	4b80      	ldr	r3, [pc, #512]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 800691a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1ed      	bne.n	8006902 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006926:	7ffb      	ldrb	r3, [r7, #31]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d105      	bne.n	8006938 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800692c:	4b7b      	ldr	r3, [pc, #492]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 800692e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006930:	4a7a      	ldr	r2, [pc, #488]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006936:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0320 	and.w	r3, r3, #32
 8006940:	2b00      	cmp	r3, #0
 8006942:	d03c      	beq.n	80069be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01c      	beq.n	8006986 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800694c:	4b73      	ldr	r3, [pc, #460]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 800694e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006952:	4a72      	ldr	r2, [pc, #456]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695c:	f7fc fb96 	bl	800308c <HAL_GetTick>
 8006960:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006962:	e008      	b.n	8006976 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006964:	f7fc fb92 	bl	800308c <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d901      	bls.n	8006976 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e122      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006976:	4b69      	ldr	r3, [pc, #420]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006978:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0ef      	beq.n	8006964 <HAL_RCC_OscConfig+0x5cc>
 8006984:	e01b      	b.n	80069be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006986:	4b65      	ldr	r3, [pc, #404]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006988:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800698c:	4a63      	ldr	r2, [pc, #396]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 800698e:	f023 0301 	bic.w	r3, r3, #1
 8006992:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006996:	f7fc fb79 	bl	800308c <HAL_GetTick>
 800699a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800699c:	e008      	b.n	80069b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800699e:	f7fc fb75 	bl	800308c <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d901      	bls.n	80069b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e105      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069b0:	4b5a      	ldr	r3, [pc, #360]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 80069b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1ef      	bne.n	800699e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 80f9 	beq.w	8006bba <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	f040 80cf 	bne.w	8006b70 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80069d2:	4b52      	ldr	r3, [pc, #328]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f003 0203 	and.w	r2, r3, #3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d12c      	bne.n	8006a40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f0:	3b01      	subs	r3, #1
 80069f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d123      	bne.n	8006a40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d11b      	bne.n	8006a40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d113      	bne.n	8006a40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a22:	085b      	lsrs	r3, r3, #1
 8006a24:	3b01      	subs	r3, #1
 8006a26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d109      	bne.n	8006a40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a36:	085b      	lsrs	r3, r3, #1
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d071      	beq.n	8006b24 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	2b0c      	cmp	r3, #12
 8006a44:	d068      	beq.n	8006b18 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a46:	4b35      	ldr	r3, [pc, #212]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d105      	bne.n	8006a5e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006a52:	4b32      	ldr	r3, [pc, #200]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e0ac      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a62:	4b2e      	ldr	r3, [pc, #184]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a2d      	ldr	r2, [pc, #180]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006a68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a6e:	f7fc fb0d 	bl	800308c <HAL_GetTick>
 8006a72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a74:	e008      	b.n	8006a88 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a76:	f7fc fb09 	bl	800308c <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e099      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a88:	4b24      	ldr	r3, [pc, #144]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1f0      	bne.n	8006a76 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a94:	4b21      	ldr	r3, [pc, #132]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	4b21      	ldr	r3, [pc, #132]	@ (8006b20 <HAL_RCC_OscConfig+0x788>)
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006aa4:	3a01      	subs	r2, #1
 8006aa6:	0112      	lsls	r2, r2, #4
 8006aa8:	4311      	orrs	r1, r2
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006aae:	0212      	lsls	r2, r2, #8
 8006ab0:	4311      	orrs	r1, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ab6:	0852      	lsrs	r2, r2, #1
 8006ab8:	3a01      	subs	r2, #1
 8006aba:	0552      	lsls	r2, r2, #21
 8006abc:	4311      	orrs	r1, r2
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006ac2:	0852      	lsrs	r2, r2, #1
 8006ac4:	3a01      	subs	r2, #1
 8006ac6:	0652      	lsls	r2, r2, #25
 8006ac8:	4311      	orrs	r1, r2
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006ace:	06d2      	lsls	r2, r2, #27
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	4912      	ldr	r1, [pc, #72]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ad8:	4b10      	ldr	r3, [pc, #64]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a0f      	ldr	r2, [pc, #60]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006ade:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ae2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006aea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006aee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006af0:	f7fc facc 	bl	800308c <HAL_GetTick>
 8006af4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006af6:	e008      	b.n	8006b0a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006af8:	f7fc fac8 	bl	800308c <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e058      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b0a:	4b04      	ldr	r3, [pc, #16]	@ (8006b1c <HAL_RCC_OscConfig+0x784>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0f0      	beq.n	8006af8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b16:	e050      	b.n	8006bba <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e04f      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b24:	4b27      	ldr	r3, [pc, #156]	@ (8006bc4 <HAL_RCC_OscConfig+0x82c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d144      	bne.n	8006bba <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b30:	4b24      	ldr	r3, [pc, #144]	@ (8006bc4 <HAL_RCC_OscConfig+0x82c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a23      	ldr	r2, [pc, #140]	@ (8006bc4 <HAL_RCC_OscConfig+0x82c>)
 8006b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b3c:	4b21      	ldr	r3, [pc, #132]	@ (8006bc4 <HAL_RCC_OscConfig+0x82c>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	4a20      	ldr	r2, [pc, #128]	@ (8006bc4 <HAL_RCC_OscConfig+0x82c>)
 8006b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b48:	f7fc faa0 	bl	800308c <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b50:	f7fc fa9c 	bl	800308c <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e02c      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b62:	4b18      	ldr	r3, [pc, #96]	@ (8006bc4 <HAL_RCC_OscConfig+0x82c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f0      	beq.n	8006b50 <HAL_RCC_OscConfig+0x7b8>
 8006b6e:	e024      	b.n	8006bba <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	2b0c      	cmp	r3, #12
 8006b74:	d01f      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b76:	4b13      	ldr	r3, [pc, #76]	@ (8006bc4 <HAL_RCC_OscConfig+0x82c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a12      	ldr	r2, [pc, #72]	@ (8006bc4 <HAL_RCC_OscConfig+0x82c>)
 8006b7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b82:	f7fc fa83 	bl	800308c <HAL_GetTick>
 8006b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b88:	e008      	b.n	8006b9c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b8a:	f7fc fa7f 	bl	800308c <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e00f      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b9c:	4b09      	ldr	r3, [pc, #36]	@ (8006bc4 <HAL_RCC_OscConfig+0x82c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1f0      	bne.n	8006b8a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006ba8:	4b06      	ldr	r3, [pc, #24]	@ (8006bc4 <HAL_RCC_OscConfig+0x82c>)
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	4905      	ldr	r1, [pc, #20]	@ (8006bc4 <HAL_RCC_OscConfig+0x82c>)
 8006bae:	4b06      	ldr	r3, [pc, #24]	@ (8006bc8 <HAL_RCC_OscConfig+0x830>)
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	60cb      	str	r3, [r1, #12]
 8006bb4:	e001      	b.n	8006bba <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3720      	adds	r7, #32
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	feeefffc 	.word	0xfeeefffc

08006bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e0e7      	b.n	8006db0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006be0:	4b75      	ldr	r3, [pc, #468]	@ (8006db8 <HAL_RCC_ClockConfig+0x1ec>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d910      	bls.n	8006c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bee:	4b72      	ldr	r3, [pc, #456]	@ (8006db8 <HAL_RCC_ClockConfig+0x1ec>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f023 0207 	bic.w	r2, r3, #7
 8006bf6:	4970      	ldr	r1, [pc, #448]	@ (8006db8 <HAL_RCC_ClockConfig+0x1ec>)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfe:	4b6e      	ldr	r3, [pc, #440]	@ (8006db8 <HAL_RCC_ClockConfig+0x1ec>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d001      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e0cf      	b.n	8006db0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d010      	beq.n	8006c3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	4b66      	ldr	r3, [pc, #408]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d908      	bls.n	8006c3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c2c:	4b63      	ldr	r3, [pc, #396]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	4960      	ldr	r1, [pc, #384]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d04c      	beq.n	8006ce4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d107      	bne.n	8006c62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c52:	4b5a      	ldr	r3, [pc, #360]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d121      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e0a6      	b.n	8006db0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d107      	bne.n	8006c7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c6a:	4b54      	ldr	r3, [pc, #336]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d115      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e09a      	b.n	8006db0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d107      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c82:	4b4e      	ldr	r3, [pc, #312]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e08e      	b.n	8006db0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c92:	4b4a      	ldr	r3, [pc, #296]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e086      	b.n	8006db0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ca2:	4b46      	ldr	r3, [pc, #280]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f023 0203 	bic.w	r2, r3, #3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	4943      	ldr	r1, [pc, #268]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cb4:	f7fc f9ea 	bl	800308c <HAL_GetTick>
 8006cb8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cbc:	f7fc f9e6 	bl	800308c <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e06e      	b.n	8006db0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 020c 	and.w	r2, r3, #12
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d1eb      	bne.n	8006cbc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d010      	beq.n	8006d12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	4b31      	ldr	r3, [pc, #196]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d208      	bcs.n	8006d12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d00:	4b2e      	ldr	r3, [pc, #184]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	492b      	ldr	r1, [pc, #172]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d12:	4b29      	ldr	r3, [pc, #164]	@ (8006db8 <HAL_RCC_ClockConfig+0x1ec>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d210      	bcs.n	8006d42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d20:	4b25      	ldr	r3, [pc, #148]	@ (8006db8 <HAL_RCC_ClockConfig+0x1ec>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f023 0207 	bic.w	r2, r3, #7
 8006d28:	4923      	ldr	r1, [pc, #140]	@ (8006db8 <HAL_RCC_ClockConfig+0x1ec>)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d30:	4b21      	ldr	r3, [pc, #132]	@ (8006db8 <HAL_RCC_ClockConfig+0x1ec>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d001      	beq.n	8006d42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e036      	b.n	8006db0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d008      	beq.n	8006d60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	4918      	ldr	r1, [pc, #96]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d009      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d6c:	4b13      	ldr	r3, [pc, #76]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	00db      	lsls	r3, r3, #3
 8006d7a:	4910      	ldr	r1, [pc, #64]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d80:	f000 f824 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8006d84:	4602      	mov	r2, r0
 8006d86:	4b0d      	ldr	r3, [pc, #52]	@ (8006dbc <HAL_RCC_ClockConfig+0x1f0>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	091b      	lsrs	r3, r3, #4
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	490b      	ldr	r1, [pc, #44]	@ (8006dc0 <HAL_RCC_ClockConfig+0x1f4>)
 8006d92:	5ccb      	ldrb	r3, [r1, r3]
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9c:	4a09      	ldr	r2, [pc, #36]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8006d9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006da0:	4b09      	ldr	r3, [pc, #36]	@ (8006dc8 <HAL_RCC_ClockConfig+0x1fc>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fb ff8d 	bl	8002cc4 <HAL_InitTick>
 8006daa:	4603      	mov	r3, r0
 8006dac:	72fb      	strb	r3, [r7, #11]

  return status;
 8006dae:	7afb      	ldrb	r3, [r7, #11]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40022000 	.word	0x40022000
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	08012504 	.word	0x08012504
 8006dc4:	20000000 	.word	0x20000000
 8006dc8:	20000004 	.word	0x20000004

08006dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b089      	sub	sp, #36	@ 0x24
 8006dd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	61fb      	str	r3, [r7, #28]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dda:	4b3e      	ldr	r3, [pc, #248]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 030c 	and.w	r3, r3, #12
 8006de2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006de4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0303 	and.w	r3, r3, #3
 8006dec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <HAL_RCC_GetSysClockFreq+0x34>
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2b0c      	cmp	r3, #12
 8006df8:	d121      	bne.n	8006e3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d11e      	bne.n	8006e3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e00:	4b34      	ldr	r3, [pc, #208]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0308 	and.w	r3, r3, #8
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d107      	bne.n	8006e1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e0c:	4b31      	ldr	r3, [pc, #196]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e12:	0a1b      	lsrs	r3, r3, #8
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	61fb      	str	r3, [r7, #28]
 8006e1a:	e005      	b.n	8006e28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	091b      	lsrs	r3, r3, #4
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e28:	4a2b      	ldr	r2, [pc, #172]	@ (8006ed8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10d      	bne.n	8006e54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e3c:	e00a      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d102      	bne.n	8006e4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e44:	4b25      	ldr	r3, [pc, #148]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x110>)
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	e004      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d101      	bne.n	8006e54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e50:	4b22      	ldr	r3, [pc, #136]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x110>)
 8006e52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2b0c      	cmp	r3, #12
 8006e58:	d134      	bne.n	8006ec4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d003      	beq.n	8006e72 <HAL_RCC_GetSysClockFreq+0xa6>
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d003      	beq.n	8006e78 <HAL_RCC_GetSysClockFreq+0xac>
 8006e70:	e005      	b.n	8006e7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006e72:	4b1a      	ldr	r3, [pc, #104]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x110>)
 8006e74:	617b      	str	r3, [r7, #20]
      break;
 8006e76:	e005      	b.n	8006e84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006e78:	4b18      	ldr	r3, [pc, #96]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x110>)
 8006e7a:	617b      	str	r3, [r7, #20]
      break;
 8006e7c:	e002      	b.n	8006e84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	617b      	str	r3, [r7, #20]
      break;
 8006e82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e84:	4b13      	ldr	r3, [pc, #76]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	091b      	lsrs	r3, r3, #4
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	3301      	adds	r3, #1
 8006e90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006e92:	4b10      	ldr	r3, [pc, #64]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	fb03 f202 	mul.w	r2, r3, r2
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	0e5b      	lsrs	r3, r3, #25
 8006eb0:	f003 0303 	and.w	r3, r3, #3
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3724      	adds	r7, #36	@ 0x24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	0801251c 	.word	0x0801251c
 8006edc:	00f42400 	.word	0x00f42400

08006ee0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ee4:	4b03      	ldr	r3, [pc, #12]	@ (8006ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	20000000 	.word	0x20000000

08006ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006efc:	f7ff fff0 	bl	8006ee0 <HAL_RCC_GetHCLKFreq>
 8006f00:	4602      	mov	r2, r0
 8006f02:	4b06      	ldr	r3, [pc, #24]	@ (8006f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	0adb      	lsrs	r3, r3, #11
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	4904      	ldr	r1, [pc, #16]	@ (8006f20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f0e:	5ccb      	ldrb	r3, [r1, r3]
 8006f10:	f003 031f 	and.w	r3, r3, #31
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	40021000 	.word	0x40021000
 8006f20:	08012514 	.word	0x08012514

08006f24 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	220f      	movs	r2, #15
 8006f32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006f34:	4b12      	ldr	r3, [pc, #72]	@ (8006f80 <HAL_RCC_GetClockConfig+0x5c>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 0203 	and.w	r2, r3, #3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006f40:	4b0f      	ldr	r3, [pc, #60]	@ (8006f80 <HAL_RCC_GetClockConfig+0x5c>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f80 <HAL_RCC_GetClockConfig+0x5c>)
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006f58:	4b09      	ldr	r3, [pc, #36]	@ (8006f80 <HAL_RCC_GetClockConfig+0x5c>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	08db      	lsrs	r3, r3, #3
 8006f5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006f66:	4b07      	ldr	r3, [pc, #28]	@ (8006f84 <HAL_RCC_GetClockConfig+0x60>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0207 	and.w	r2, r3, #7
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	601a      	str	r2, [r3, #0]
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	40021000 	.word	0x40021000
 8006f84:	40022000 	.word	0x40022000

08006f88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f94:	4b2a      	ldr	r3, [pc, #168]	@ (8007040 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006fa0:	f7ff f986 	bl	80062b0 <HAL_PWREx_GetVoltageRange>
 8006fa4:	6178      	str	r0, [r7, #20]
 8006fa6:	e014      	b.n	8006fd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fa8:	4b25      	ldr	r3, [pc, #148]	@ (8007040 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fac:	4a24      	ldr	r2, [pc, #144]	@ (8007040 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fb4:	4b22      	ldr	r3, [pc, #136]	@ (8007040 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006fc0:	f7ff f976 	bl	80062b0 <HAL_PWREx_GetVoltageRange>
 8006fc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8007040 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fca:	4a1d      	ldr	r2, [pc, #116]	@ (8007040 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fd8:	d10b      	bne.n	8006ff2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b80      	cmp	r3, #128	@ 0x80
 8006fde:	d919      	bls.n	8007014 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2ba0      	cmp	r3, #160	@ 0xa0
 8006fe4:	d902      	bls.n	8006fec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	e013      	b.n	8007014 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fec:	2301      	movs	r3, #1
 8006fee:	613b      	str	r3, [r7, #16]
 8006ff0:	e010      	b.n	8007014 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b80      	cmp	r3, #128	@ 0x80
 8006ff6:	d902      	bls.n	8006ffe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	e00a      	b.n	8007014 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b80      	cmp	r3, #128	@ 0x80
 8007002:	d102      	bne.n	800700a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007004:	2302      	movs	r3, #2
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	e004      	b.n	8007014 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b70      	cmp	r3, #112	@ 0x70
 800700e:	d101      	bne.n	8007014 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007010:	2301      	movs	r3, #1
 8007012:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007014:	4b0b      	ldr	r3, [pc, #44]	@ (8007044 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f023 0207 	bic.w	r2, r3, #7
 800701c:	4909      	ldr	r1, [pc, #36]	@ (8007044 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007024:	4b07      	ldr	r3, [pc, #28]	@ (8007044 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0307 	and.w	r3, r3, #7
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	429a      	cmp	r2, r3
 8007030:	d001      	beq.n	8007036 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40021000 	.word	0x40021000
 8007044:	40022000 	.word	0x40022000

08007048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007050:	2300      	movs	r3, #0
 8007052:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007054:	2300      	movs	r3, #0
 8007056:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007060:	2b00      	cmp	r3, #0
 8007062:	d041      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007068:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800706c:	d02a      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800706e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007072:	d824      	bhi.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007074:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007078:	d008      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800707a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800707e:	d81e      	bhi.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00a      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007084:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007088:	d010      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800708a:	e018      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800708c:	4b86      	ldr	r3, [pc, #536]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	4a85      	ldr	r2, [pc, #532]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007096:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007098:	e015      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3304      	adds	r3, #4
 800709e:	2100      	movs	r1, #0
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 facd 	bl	8007640 <RCCEx_PLLSAI1_Config>
 80070a6:	4603      	mov	r3, r0
 80070a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070aa:	e00c      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3320      	adds	r3, #32
 80070b0:	2100      	movs	r1, #0
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fbb6 	bl	8007824 <RCCEx_PLLSAI2_Config>
 80070b8:	4603      	mov	r3, r0
 80070ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070bc:	e003      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	74fb      	strb	r3, [r7, #19]
      break;
 80070c2:	e000      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80070c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070c6:	7cfb      	ldrb	r3, [r7, #19]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10b      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070cc:	4b76      	ldr	r3, [pc, #472]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070da:	4973      	ldr	r1, [pc, #460]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80070e2:	e001      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e4:	7cfb      	ldrb	r3, [r7, #19]
 80070e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d041      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070fc:	d02a      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80070fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007102:	d824      	bhi.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007104:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007108:	d008      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800710a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800710e:	d81e      	bhi.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00a      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007118:	d010      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800711a:	e018      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800711c:	4b62      	ldr	r3, [pc, #392]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	4a61      	ldr	r2, [pc, #388]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007122:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007126:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007128:	e015      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3304      	adds	r3, #4
 800712e:	2100      	movs	r1, #0
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fa85 	bl	8007640 <RCCEx_PLLSAI1_Config>
 8007136:	4603      	mov	r3, r0
 8007138:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800713a:	e00c      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3320      	adds	r3, #32
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fb6e 	bl	8007824 <RCCEx_PLLSAI2_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800714c:	e003      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	74fb      	strb	r3, [r7, #19]
      break;
 8007152:	e000      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007156:	7cfb      	ldrb	r3, [r7, #19]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10b      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800715c:	4b52      	ldr	r3, [pc, #328]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800715e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007162:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800716a:	494f      	ldr	r1, [pc, #316]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800716c:	4313      	orrs	r3, r2
 800716e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007172:	e001      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007174:	7cfb      	ldrb	r3, [r7, #19]
 8007176:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 80a0 	beq.w	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007186:	2300      	movs	r3, #0
 8007188:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800718a:	4b47      	ldr	r3, [pc, #284]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800718c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800718e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007196:	2301      	movs	r3, #1
 8007198:	e000      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800719a:	2300      	movs	r3, #0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00d      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071a0:	4b41      	ldr	r3, [pc, #260]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a4:	4a40      	ldr	r2, [pc, #256]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80071ac:	4b3e      	ldr	r3, [pc, #248]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071b4:	60bb      	str	r3, [r7, #8]
 80071b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071b8:	2301      	movs	r3, #1
 80071ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071bc:	4b3b      	ldr	r3, [pc, #236]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a3a      	ldr	r2, [pc, #232]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071c8:	f7fb ff60 	bl	800308c <HAL_GetTick>
 80071cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80071ce:	e009      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071d0:	f7fb ff5c 	bl	800308c <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d902      	bls.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	74fb      	strb	r3, [r7, #19]
        break;
 80071e2:	e005      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80071e4:	4b31      	ldr	r3, [pc, #196]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0ef      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80071f0:	7cfb      	ldrb	r3, [r7, #19]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d15c      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071f6:	4b2c      	ldr	r3, [pc, #176]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007200:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01f      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	429a      	cmp	r2, r3
 8007212:	d019      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007214:	4b24      	ldr	r3, [pc, #144]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800721a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800721e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007220:	4b21      	ldr	r3, [pc, #132]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007226:	4a20      	ldr	r2, [pc, #128]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800722c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007230:	4b1d      	ldr	r3, [pc, #116]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007236:	4a1c      	ldr	r2, [pc, #112]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800723c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007240:	4a19      	ldr	r2, [pc, #100]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d016      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007252:	f7fb ff1b 	bl	800308c <HAL_GetTick>
 8007256:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007258:	e00b      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800725a:	f7fb ff17 	bl	800308c <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007268:	4293      	cmp	r3, r2
 800726a:	d902      	bls.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	74fb      	strb	r3, [r7, #19]
            break;
 8007270:	e006      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007272:	4b0d      	ldr	r3, [pc, #52]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0ec      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007280:	7cfb      	ldrb	r3, [r7, #19]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10c      	bne.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007286:	4b08      	ldr	r3, [pc, #32]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800728c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007296:	4904      	ldr	r1, [pc, #16]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007298:	4313      	orrs	r3, r2
 800729a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800729e:	e009      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072a0:	7cfb      	ldrb	r3, [r7, #19]
 80072a2:	74bb      	strb	r3, [r7, #18]
 80072a4:	e006      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80072a6:	bf00      	nop
 80072a8:	40021000 	.word	0x40021000
 80072ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b0:	7cfb      	ldrb	r3, [r7, #19]
 80072b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072b4:	7c7b      	ldrb	r3, [r7, #17]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d105      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ba:	4ba6      	ldr	r3, [pc, #664]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80072bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072be:	4aa5      	ldr	r2, [pc, #660]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80072c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072d2:	4ba0      	ldr	r3, [pc, #640]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80072d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d8:	f023 0203 	bic.w	r2, r3, #3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e0:	499c      	ldr	r1, [pc, #624]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00a      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072f4:	4b97      	ldr	r3, [pc, #604]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80072f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072fa:	f023 020c 	bic.w	r2, r3, #12
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007302:	4994      	ldr	r1, [pc, #592]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007304:	4313      	orrs	r3, r2
 8007306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0304 	and.w	r3, r3, #4
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007316:	4b8f      	ldr	r3, [pc, #572]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800731c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007324:	498b      	ldr	r1, [pc, #556]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0308 	and.w	r3, r3, #8
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007338:	4b86      	ldr	r3, [pc, #536]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800733a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800733e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007346:	4983      	ldr	r1, [pc, #524]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007348:	4313      	orrs	r3, r2
 800734a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00a      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800735a:	4b7e      	ldr	r3, [pc, #504]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007360:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007368:	497a      	ldr	r1, [pc, #488]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800736a:	4313      	orrs	r3, r2
 800736c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800737c:	4b75      	ldr	r3, [pc, #468]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800737e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007382:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800738a:	4972      	ldr	r1, [pc, #456]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800738c:	4313      	orrs	r3, r2
 800738e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800739e:	4b6d      	ldr	r3, [pc, #436]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073ac:	4969      	ldr	r1, [pc, #420]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00a      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073c0:	4b64      	ldr	r3, [pc, #400]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073ce:	4961      	ldr	r1, [pc, #388]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f0:	4958      	ldr	r1, [pc, #352]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007404:	4b53      	ldr	r3, [pc, #332]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800740a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007412:	4950      	ldr	r1, [pc, #320]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007414:	4313      	orrs	r3, r2
 8007416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007426:	4b4b      	ldr	r3, [pc, #300]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007434:	4947      	ldr	r1, [pc, #284]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007448:	4b42      	ldr	r3, [pc, #264]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800744a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800744e:	f023 0203 	bic.w	r2, r3, #3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007456:	493f      	ldr	r1, [pc, #252]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d028      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800746a:	4b3a      	ldr	r3, [pc, #232]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800746c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007470:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007478:	4936      	ldr	r1, [pc, #216]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800747a:	4313      	orrs	r3, r2
 800747c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007484:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007488:	d106      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800748a:	4b32      	ldr	r3, [pc, #200]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	4a31      	ldr	r2, [pc, #196]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007490:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007494:	60d3      	str	r3, [r2, #12]
 8007496:	e011      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800749c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074a0:	d10c      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3304      	adds	r3, #4
 80074a6:	2101      	movs	r1, #1
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 f8c9 	bl	8007640 <RCCEx_PLLSAI1_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80074b2:	7cfb      	ldrb	r3, [r7, #19]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80074b8:	7cfb      	ldrb	r3, [r7, #19]
 80074ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d028      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80074c8:	4b22      	ldr	r3, [pc, #136]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074d6:	491f      	ldr	r1, [pc, #124]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074e6:	d106      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	4a19      	ldr	r2, [pc, #100]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80074ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074f2:	60d3      	str	r3, [r2, #12]
 80074f4:	e011      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074fe:	d10c      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3304      	adds	r3, #4
 8007504:	2101      	movs	r1, #1
 8007506:	4618      	mov	r0, r3
 8007508:	f000 f89a 	bl	8007640 <RCCEx_PLLSAI1_Config>
 800750c:	4603      	mov	r3, r0
 800750e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007510:	7cfb      	ldrb	r3, [r7, #19]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8007516:	7cfb      	ldrb	r3, [r7, #19]
 8007518:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d02a      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007526:	4b0b      	ldr	r3, [pc, #44]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800752c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007534:	4907      	ldr	r1, [pc, #28]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007536:	4313      	orrs	r3, r2
 8007538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007544:	d108      	bne.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007546:	4b03      	ldr	r3, [pc, #12]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	4a02      	ldr	r2, [pc, #8]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800754c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007550:	60d3      	str	r3, [r2, #12]
 8007552:	e013      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8007554:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800755c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007560:	d10c      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3304      	adds	r3, #4
 8007566:	2101      	movs	r1, #1
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f869 	bl	8007640 <RCCEx_PLLSAI1_Config>
 800756e:	4603      	mov	r3, r0
 8007570:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007572:	7cfb      	ldrb	r3, [r7, #19]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8007578:	7cfb      	ldrb	r3, [r7, #19]
 800757a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d02f      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007588:	4b2c      	ldr	r3, [pc, #176]	@ (800763c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800758a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007596:	4929      	ldr	r1, [pc, #164]	@ (800763c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007598:	4313      	orrs	r3, r2
 800759a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075a6:	d10d      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3304      	adds	r3, #4
 80075ac:	2102      	movs	r1, #2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 f846 	bl	8007640 <RCCEx_PLLSAI1_Config>
 80075b4:	4603      	mov	r3, r0
 80075b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075b8:	7cfb      	ldrb	r3, [r7, #19]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d014      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80075be:	7cfb      	ldrb	r3, [r7, #19]
 80075c0:	74bb      	strb	r3, [r7, #18]
 80075c2:	e011      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075cc:	d10c      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3320      	adds	r3, #32
 80075d2:	2102      	movs	r1, #2
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 f925 	bl	8007824 <RCCEx_PLLSAI2_Config>
 80075da:	4603      	mov	r3, r0
 80075dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075de:	7cfb      	ldrb	r3, [r7, #19]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80075e4:	7cfb      	ldrb	r3, [r7, #19]
 80075e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075f4:	4b11      	ldr	r3, [pc, #68]	@ (800763c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80075f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007604:	490d      	ldr	r1, [pc, #52]	@ (800763c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007606:	4313      	orrs	r3, r2
 8007608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00b      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007618:	4b08      	ldr	r3, [pc, #32]	@ (800763c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800761a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800761e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007628:	4904      	ldr	r1, [pc, #16]	@ (800763c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007630:	7cbb      	ldrb	r3, [r7, #18]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	40021000 	.word	0x40021000

08007640 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800764e:	4b74      	ldr	r3, [pc, #464]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d018      	beq.n	800768c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800765a:	4b71      	ldr	r3, [pc, #452]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f003 0203 	and.w	r2, r3, #3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d10d      	bne.n	8007686 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
       ||
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007672:	4b6b      	ldr	r3, [pc, #428]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	091b      	lsrs	r3, r3, #4
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
       ||
 8007682:	429a      	cmp	r2, r3
 8007684:	d047      	beq.n	8007716 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	73fb      	strb	r3, [r7, #15]
 800768a:	e044      	b.n	8007716 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b03      	cmp	r3, #3
 8007692:	d018      	beq.n	80076c6 <RCCEx_PLLSAI1_Config+0x86>
 8007694:	2b03      	cmp	r3, #3
 8007696:	d825      	bhi.n	80076e4 <RCCEx_PLLSAI1_Config+0xa4>
 8007698:	2b01      	cmp	r3, #1
 800769a:	d002      	beq.n	80076a2 <RCCEx_PLLSAI1_Config+0x62>
 800769c:	2b02      	cmp	r3, #2
 800769e:	d009      	beq.n	80076b4 <RCCEx_PLLSAI1_Config+0x74>
 80076a0:	e020      	b.n	80076e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80076a2:	4b5f      	ldr	r3, [pc, #380]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d11d      	bne.n	80076ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076b2:	e01a      	b.n	80076ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80076b4:	4b5a      	ldr	r3, [pc, #360]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d116      	bne.n	80076ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076c4:	e013      	b.n	80076ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076c6:	4b56      	ldr	r3, [pc, #344]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10f      	bne.n	80076f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076d2:	4b53      	ldr	r3, [pc, #332]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d109      	bne.n	80076f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076e2:	e006      	b.n	80076f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73fb      	strb	r3, [r7, #15]
      break;
 80076e8:	e004      	b.n	80076f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076ea:	bf00      	nop
 80076ec:	e002      	b.n	80076f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076ee:	bf00      	nop
 80076f0:	e000      	b.n	80076f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10d      	bne.n	8007716 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80076fa:	4b49      	ldr	r3, [pc, #292]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6819      	ldr	r1, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	3b01      	subs	r3, #1
 800770c:	011b      	lsls	r3, r3, #4
 800770e:	430b      	orrs	r3, r1
 8007710:	4943      	ldr	r1, [pc, #268]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007712:	4313      	orrs	r3, r2
 8007714:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d17c      	bne.n	8007816 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800771c:	4b40      	ldr	r3, [pc, #256]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a3f      	ldr	r2, [pc, #252]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007722:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007728:	f7fb fcb0 	bl	800308c <HAL_GetTick>
 800772c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800772e:	e009      	b.n	8007744 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007730:	f7fb fcac 	bl	800308c <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d902      	bls.n	8007744 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	73fb      	strb	r3, [r7, #15]
        break;
 8007742:	e005      	b.n	8007750 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007744:	4b36      	ldr	r3, [pc, #216]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1ef      	bne.n	8007730 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d15f      	bne.n	8007816 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d110      	bne.n	800777e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800775c:	4b30      	ldr	r3, [pc, #192]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007764:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6892      	ldr	r2, [r2, #8]
 800776c:	0211      	lsls	r1, r2, #8
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	68d2      	ldr	r2, [r2, #12]
 8007772:	06d2      	lsls	r2, r2, #27
 8007774:	430a      	orrs	r2, r1
 8007776:	492a      	ldr	r1, [pc, #168]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007778:	4313      	orrs	r3, r2
 800777a:	610b      	str	r3, [r1, #16]
 800777c:	e027      	b.n	80077ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d112      	bne.n	80077aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007784:	4b26      	ldr	r3, [pc, #152]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800778c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6892      	ldr	r2, [r2, #8]
 8007794:	0211      	lsls	r1, r2, #8
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6912      	ldr	r2, [r2, #16]
 800779a:	0852      	lsrs	r2, r2, #1
 800779c:	3a01      	subs	r2, #1
 800779e:	0552      	lsls	r2, r2, #21
 80077a0:	430a      	orrs	r2, r1
 80077a2:	491f      	ldr	r1, [pc, #124]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	610b      	str	r3, [r1, #16]
 80077a8:	e011      	b.n	80077ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80077b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6892      	ldr	r2, [r2, #8]
 80077ba:	0211      	lsls	r1, r2, #8
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6952      	ldr	r2, [r2, #20]
 80077c0:	0852      	lsrs	r2, r2, #1
 80077c2:	3a01      	subs	r2, #1
 80077c4:	0652      	lsls	r2, r2, #25
 80077c6:	430a      	orrs	r2, r1
 80077c8:	4915      	ldr	r1, [pc, #84]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80077ce:	4b14      	ldr	r3, [pc, #80]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a13      	ldr	r2, [pc, #76]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077da:	f7fb fc57 	bl	800308c <HAL_GetTick>
 80077de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077e0:	e009      	b.n	80077f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077e2:	f7fb fc53 	bl	800308c <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d902      	bls.n	80077f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	73fb      	strb	r3, [r7, #15]
          break;
 80077f4:	e005      	b.n	8007802 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0ef      	beq.n	80077e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d106      	bne.n	8007816 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007808:	4b05      	ldr	r3, [pc, #20]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 800780a:	691a      	ldr	r2, [r3, #16]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	4903      	ldr	r1, [pc, #12]	@ (8007820 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007812:	4313      	orrs	r3, r2
 8007814:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007816:	7bfb      	ldrb	r3, [r7, #15]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	40021000 	.word	0x40021000

08007824 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007832:	4b69      	ldr	r3, [pc, #420]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d018      	beq.n	8007870 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800783e:	4b66      	ldr	r3, [pc, #408]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f003 0203 	and.w	r2, r3, #3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d10d      	bne.n	800786a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
       ||
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007856:	4b60      	ldr	r3, [pc, #384]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	091b      	lsrs	r3, r3, #4
 800785c:	f003 0307 	and.w	r3, r3, #7
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
       ||
 8007866:	429a      	cmp	r2, r3
 8007868:	d047      	beq.n	80078fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	73fb      	strb	r3, [r7, #15]
 800786e:	e044      	b.n	80078fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b03      	cmp	r3, #3
 8007876:	d018      	beq.n	80078aa <RCCEx_PLLSAI2_Config+0x86>
 8007878:	2b03      	cmp	r3, #3
 800787a:	d825      	bhi.n	80078c8 <RCCEx_PLLSAI2_Config+0xa4>
 800787c:	2b01      	cmp	r3, #1
 800787e:	d002      	beq.n	8007886 <RCCEx_PLLSAI2_Config+0x62>
 8007880:	2b02      	cmp	r3, #2
 8007882:	d009      	beq.n	8007898 <RCCEx_PLLSAI2_Config+0x74>
 8007884:	e020      	b.n	80078c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007886:	4b54      	ldr	r3, [pc, #336]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d11d      	bne.n	80078ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007896:	e01a      	b.n	80078ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007898:	4b4f      	ldr	r3, [pc, #316]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d116      	bne.n	80078d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078a8:	e013      	b.n	80078d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80078aa:	4b4b      	ldr	r3, [pc, #300]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10f      	bne.n	80078d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80078b6:	4b48      	ldr	r3, [pc, #288]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078c6:	e006      	b.n	80078d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	73fb      	strb	r3, [r7, #15]
      break;
 80078cc:	e004      	b.n	80078d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80078ce:	bf00      	nop
 80078d0:	e002      	b.n	80078d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80078d2:	bf00      	nop
 80078d4:	e000      	b.n	80078d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80078d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10d      	bne.n	80078fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80078de:	4b3e      	ldr	r3, [pc, #248]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6819      	ldr	r1, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	430b      	orrs	r3, r1
 80078f4:	4938      	ldr	r1, [pc, #224]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d166      	bne.n	80079ce <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007900:	4b35      	ldr	r3, [pc, #212]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a34      	ldr	r2, [pc, #208]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800790a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800790c:	f7fb fbbe 	bl	800308c <HAL_GetTick>
 8007910:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007912:	e009      	b.n	8007928 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007914:	f7fb fbba 	bl	800308c <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b02      	cmp	r3, #2
 8007920:	d902      	bls.n	8007928 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	73fb      	strb	r3, [r7, #15]
        break;
 8007926:	e005      	b.n	8007934 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007928:	4b2b      	ldr	r3, [pc, #172]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1ef      	bne.n	8007914 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d149      	bne.n	80079ce <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d110      	bne.n	8007962 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007940:	4b25      	ldr	r3, [pc, #148]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007948:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6892      	ldr	r2, [r2, #8]
 8007950:	0211      	lsls	r1, r2, #8
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	68d2      	ldr	r2, [r2, #12]
 8007956:	06d2      	lsls	r2, r2, #27
 8007958:	430a      	orrs	r2, r1
 800795a:	491f      	ldr	r1, [pc, #124]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800795c:	4313      	orrs	r3, r2
 800795e:	614b      	str	r3, [r1, #20]
 8007960:	e011      	b.n	8007986 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007962:	4b1d      	ldr	r3, [pc, #116]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800796a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	6892      	ldr	r2, [r2, #8]
 8007972:	0211      	lsls	r1, r2, #8
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6912      	ldr	r2, [r2, #16]
 8007978:	0852      	lsrs	r2, r2, #1
 800797a:	3a01      	subs	r2, #1
 800797c:	0652      	lsls	r2, r2, #25
 800797e:	430a      	orrs	r2, r1
 8007980:	4915      	ldr	r1, [pc, #84]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007982:	4313      	orrs	r3, r2
 8007984:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007986:	4b14      	ldr	r3, [pc, #80]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a13      	ldr	r2, [pc, #76]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800798c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007990:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007992:	f7fb fb7b 	bl	800308c <HAL_GetTick>
 8007996:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007998:	e009      	b.n	80079ae <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800799a:	f7fb fb77 	bl	800308c <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d902      	bls.n	80079ae <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	73fb      	strb	r3, [r7, #15]
          break;
 80079ac:	e005      	b.n	80079ba <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80079ae:	4b0a      	ldr	r3, [pc, #40]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0ef      	beq.n	800799a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d106      	bne.n	80079ce <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80079c0:	4b05      	ldr	r3, [pc, #20]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80079c2:	695a      	ldr	r2, [r3, #20]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	4903      	ldr	r1, [pc, #12]	@ (80079d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	40021000 	.word	0x40021000

080079dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e049      	b.n	8007a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f841 	bl	8007a8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f000 fcba 	bl	8008394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
	...

08007aa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d001      	beq.n	8007ab8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e047      	b.n	8007b48 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a23      	ldr	r2, [pc, #140]	@ (8007b54 <HAL_TIM_Base_Start+0xb4>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d01d      	beq.n	8007b06 <HAL_TIM_Base_Start+0x66>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ad2:	d018      	beq.n	8007b06 <HAL_TIM_Base_Start+0x66>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8007b58 <HAL_TIM_Base_Start+0xb8>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d013      	beq.n	8007b06 <HAL_TIM_Base_Start+0x66>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8007b5c <HAL_TIM_Base_Start+0xbc>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00e      	beq.n	8007b06 <HAL_TIM_Base_Start+0x66>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a1c      	ldr	r2, [pc, #112]	@ (8007b60 <HAL_TIM_Base_Start+0xc0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d009      	beq.n	8007b06 <HAL_TIM_Base_Start+0x66>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a1b      	ldr	r2, [pc, #108]	@ (8007b64 <HAL_TIM_Base_Start+0xc4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d004      	beq.n	8007b06 <HAL_TIM_Base_Start+0x66>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a19      	ldr	r2, [pc, #100]	@ (8007b68 <HAL_TIM_Base_Start+0xc8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d115      	bne.n	8007b32 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689a      	ldr	r2, [r3, #8]
 8007b0c:	4b17      	ldr	r3, [pc, #92]	@ (8007b6c <HAL_TIM_Base_Start+0xcc>)
 8007b0e:	4013      	ands	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b06      	cmp	r3, #6
 8007b16:	d015      	beq.n	8007b44 <HAL_TIM_Base_Start+0xa4>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b1e:	d011      	beq.n	8007b44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0201 	orr.w	r2, r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b30:	e008      	b.n	8007b44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0201 	orr.w	r2, r2, #1
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e000      	b.n	8007b46 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	40012c00 	.word	0x40012c00
 8007b58:	40000400 	.word	0x40000400
 8007b5c:	40000800 	.word	0x40000800
 8007b60:	40000c00 	.word	0x40000c00
 8007b64:	40013400 	.word	0x40013400
 8007b68:	40014000 	.word	0x40014000
 8007b6c:	00010007 	.word	0x00010007

08007b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d001      	beq.n	8007b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e04f      	b.n	8007c28 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0201 	orr.w	r2, r2, #1
 8007b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a23      	ldr	r2, [pc, #140]	@ (8007c34 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d01d      	beq.n	8007be6 <HAL_TIM_Base_Start_IT+0x76>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bb2:	d018      	beq.n	8007be6 <HAL_TIM_Base_Start_IT+0x76>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8007c38 <HAL_TIM_Base_Start_IT+0xc8>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d013      	beq.n	8007be6 <HAL_TIM_Base_Start_IT+0x76>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8007c3c <HAL_TIM_Base_Start_IT+0xcc>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d00e      	beq.n	8007be6 <HAL_TIM_Base_Start_IT+0x76>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8007c40 <HAL_TIM_Base_Start_IT+0xd0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d009      	beq.n	8007be6 <HAL_TIM_Base_Start_IT+0x76>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8007c44 <HAL_TIM_Base_Start_IT+0xd4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d004      	beq.n	8007be6 <HAL_TIM_Base_Start_IT+0x76>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a19      	ldr	r2, [pc, #100]	@ (8007c48 <HAL_TIM_Base_Start_IT+0xd8>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d115      	bne.n	8007c12 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	4b17      	ldr	r3, [pc, #92]	@ (8007c4c <HAL_TIM_Base_Start_IT+0xdc>)
 8007bee:	4013      	ands	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2b06      	cmp	r3, #6
 8007bf6:	d015      	beq.n	8007c24 <HAL_TIM_Base_Start_IT+0xb4>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bfe:	d011      	beq.n	8007c24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0201 	orr.w	r2, r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c10:	e008      	b.n	8007c24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f042 0201 	orr.w	r2, r2, #1
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	e000      	b.n	8007c26 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	40012c00 	.word	0x40012c00
 8007c38:	40000400 	.word	0x40000400
 8007c3c:	40000800 	.word	0x40000800
 8007c40:	40000c00 	.word	0x40000c00
 8007c44:	40013400 	.word	0x40013400
 8007c48:	40014000 	.word	0x40014000
 8007c4c:	00010007 	.word	0x00010007

08007c50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e049      	b.n	8007cf6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d106      	bne.n	8007c7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7fa ff96 	bl	8002ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2202      	movs	r2, #2
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	f000 fb80 	bl	8008394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d109      	bne.n	8007d24 <HAL_TIM_PWM_Start+0x24>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	bf14      	ite	ne
 8007d1c:	2301      	movne	r3, #1
 8007d1e:	2300      	moveq	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	e03c      	b.n	8007d9e <HAL_TIM_PWM_Start+0x9e>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d109      	bne.n	8007d3e <HAL_TIM_PWM_Start+0x3e>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	bf14      	ite	ne
 8007d36:	2301      	movne	r3, #1
 8007d38:	2300      	moveq	r3, #0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	e02f      	b.n	8007d9e <HAL_TIM_PWM_Start+0x9e>
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d109      	bne.n	8007d58 <HAL_TIM_PWM_Start+0x58>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	bf14      	ite	ne
 8007d50:	2301      	movne	r3, #1
 8007d52:	2300      	moveq	r3, #0
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	e022      	b.n	8007d9e <HAL_TIM_PWM_Start+0x9e>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2b0c      	cmp	r3, #12
 8007d5c:	d109      	bne.n	8007d72 <HAL_TIM_PWM_Start+0x72>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	bf14      	ite	ne
 8007d6a:	2301      	movne	r3, #1
 8007d6c:	2300      	moveq	r3, #0
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	e015      	b.n	8007d9e <HAL_TIM_PWM_Start+0x9e>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b10      	cmp	r3, #16
 8007d76:	d109      	bne.n	8007d8c <HAL_TIM_PWM_Start+0x8c>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	bf14      	ite	ne
 8007d84:	2301      	movne	r3, #1
 8007d86:	2300      	moveq	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	e008      	b.n	8007d9e <HAL_TIM_PWM_Start+0x9e>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	bf14      	ite	ne
 8007d98:	2301      	movne	r3, #1
 8007d9a:	2300      	moveq	r3, #0
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e09c      	b.n	8007ee0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d104      	bne.n	8007db6 <HAL_TIM_PWM_Start+0xb6>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007db4:	e023      	b.n	8007dfe <HAL_TIM_PWM_Start+0xfe>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d104      	bne.n	8007dc6 <HAL_TIM_PWM_Start+0xc6>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dc4:	e01b      	b.n	8007dfe <HAL_TIM_PWM_Start+0xfe>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d104      	bne.n	8007dd6 <HAL_TIM_PWM_Start+0xd6>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dd4:	e013      	b.n	8007dfe <HAL_TIM_PWM_Start+0xfe>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b0c      	cmp	r3, #12
 8007dda:	d104      	bne.n	8007de6 <HAL_TIM_PWM_Start+0xe6>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007de4:	e00b      	b.n	8007dfe <HAL_TIM_PWM_Start+0xfe>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b10      	cmp	r3, #16
 8007dea:	d104      	bne.n	8007df6 <HAL_TIM_PWM_Start+0xf6>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007df4:	e003      	b.n	8007dfe <HAL_TIM_PWM_Start+0xfe>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2201      	movs	r2, #1
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fe40 	bl	8008a8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a35      	ldr	r2, [pc, #212]	@ (8007ee8 <HAL_TIM_PWM_Start+0x1e8>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d013      	beq.n	8007e3e <HAL_TIM_PWM_Start+0x13e>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a34      	ldr	r2, [pc, #208]	@ (8007eec <HAL_TIM_PWM_Start+0x1ec>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d00e      	beq.n	8007e3e <HAL_TIM_PWM_Start+0x13e>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a32      	ldr	r2, [pc, #200]	@ (8007ef0 <HAL_TIM_PWM_Start+0x1f0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d009      	beq.n	8007e3e <HAL_TIM_PWM_Start+0x13e>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a31      	ldr	r2, [pc, #196]	@ (8007ef4 <HAL_TIM_PWM_Start+0x1f4>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d004      	beq.n	8007e3e <HAL_TIM_PWM_Start+0x13e>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a2f      	ldr	r2, [pc, #188]	@ (8007ef8 <HAL_TIM_PWM_Start+0x1f8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d101      	bne.n	8007e42 <HAL_TIM_PWM_Start+0x142>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e000      	b.n	8007e44 <HAL_TIM_PWM_Start+0x144>
 8007e42:	2300      	movs	r3, #0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d007      	beq.n	8007e58 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e56:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a22      	ldr	r2, [pc, #136]	@ (8007ee8 <HAL_TIM_PWM_Start+0x1e8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d01d      	beq.n	8007e9e <HAL_TIM_PWM_Start+0x19e>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e6a:	d018      	beq.n	8007e9e <HAL_TIM_PWM_Start+0x19e>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a22      	ldr	r2, [pc, #136]	@ (8007efc <HAL_TIM_PWM_Start+0x1fc>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d013      	beq.n	8007e9e <HAL_TIM_PWM_Start+0x19e>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a21      	ldr	r2, [pc, #132]	@ (8007f00 <HAL_TIM_PWM_Start+0x200>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d00e      	beq.n	8007e9e <HAL_TIM_PWM_Start+0x19e>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a1f      	ldr	r2, [pc, #124]	@ (8007f04 <HAL_TIM_PWM_Start+0x204>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d009      	beq.n	8007e9e <HAL_TIM_PWM_Start+0x19e>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a17      	ldr	r2, [pc, #92]	@ (8007eec <HAL_TIM_PWM_Start+0x1ec>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d004      	beq.n	8007e9e <HAL_TIM_PWM_Start+0x19e>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a15      	ldr	r2, [pc, #84]	@ (8007ef0 <HAL_TIM_PWM_Start+0x1f0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d115      	bne.n	8007eca <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689a      	ldr	r2, [r3, #8]
 8007ea4:	4b18      	ldr	r3, [pc, #96]	@ (8007f08 <HAL_TIM_PWM_Start+0x208>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b06      	cmp	r3, #6
 8007eae:	d015      	beq.n	8007edc <HAL_TIM_PWM_Start+0x1dc>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eb6:	d011      	beq.n	8007edc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f042 0201 	orr.w	r2, r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec8:	e008      	b.n	8007edc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0201 	orr.w	r2, r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	e000      	b.n	8007ede <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007edc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	40012c00 	.word	0x40012c00
 8007eec:	40013400 	.word	0x40013400
 8007ef0:	40014000 	.word	0x40014000
 8007ef4:	40014400 	.word	0x40014400
 8007ef8:	40014800 	.word	0x40014800
 8007efc:	40000400 	.word	0x40000400
 8007f00:	40000800 	.word	0x40000800
 8007f04:	40000c00 	.word	0x40000c00
 8007f08:	00010007 	.word	0x00010007

08007f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d020      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01b      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0202 	mvn.w	r2, #2
 8007f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f9fe 	bl	8008358 <HAL_TIM_IC_CaptureCallback>
 8007f5c:	e005      	b.n	8007f6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f9f0 	bl	8008344 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fa01 	bl	800836c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f003 0304 	and.w	r3, r3, #4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d020      	beq.n	8007fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d01b      	beq.n	8007fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f06f 0204 	mvn.w	r2, #4
 8007f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2202      	movs	r2, #2
 8007f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f9d8 	bl	8008358 <HAL_TIM_IC_CaptureCallback>
 8007fa8:	e005      	b.n	8007fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f9ca 	bl	8008344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f9db 	bl	800836c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f003 0308 	and.w	r3, r3, #8
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d020      	beq.n	8008008 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f003 0308 	and.w	r3, r3, #8
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d01b      	beq.n	8008008 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0208 	mvn.w	r2, #8
 8007fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2204      	movs	r2, #4
 8007fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f9b2 	bl	8008358 <HAL_TIM_IC_CaptureCallback>
 8007ff4:	e005      	b.n	8008002 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f9a4 	bl	8008344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f9b5 	bl	800836c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f003 0310 	and.w	r3, r3, #16
 800800e:	2b00      	cmp	r3, #0
 8008010:	d020      	beq.n	8008054 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f003 0310 	and.w	r3, r3, #16
 8008018:	2b00      	cmp	r3, #0
 800801a:	d01b      	beq.n	8008054 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f06f 0210 	mvn.w	r2, #16
 8008024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2208      	movs	r2, #8
 800802a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f98c 	bl	8008358 <HAL_TIM_IC_CaptureCallback>
 8008040:	e005      	b.n	800804e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f97e 	bl	8008344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f98f 	bl	800836c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00c      	beq.n	8008078 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	d007      	beq.n	8008078 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f06f 0201 	mvn.w	r2, #1
 8008070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fa fbc2 	bl	80027fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800807e:	2b00      	cmp	r3, #0
 8008080:	d104      	bne.n	800808c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00c      	beq.n	80080a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008092:	2b00      	cmp	r3, #0
 8008094:	d007      	beq.n	80080a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800809e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fdab 	bl	8008bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00c      	beq.n	80080ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d007      	beq.n	80080ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80080c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fda3 	bl	8008c10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00c      	beq.n	80080ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d007      	beq.n	80080ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80080e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f949 	bl	8008380 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f003 0320 	and.w	r3, r3, #32
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00c      	beq.n	8008112 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f003 0320 	and.w	r3, r3, #32
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d007      	beq.n	8008112 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f06f 0220 	mvn.w	r2, #32
 800810a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fd6b 	bl	8008be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008112:	bf00      	nop
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008136:	2302      	movs	r3, #2
 8008138:	e0ff      	b.n	800833a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b14      	cmp	r3, #20
 8008146:	f200 80f0 	bhi.w	800832a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800814a:	a201      	add	r2, pc, #4	@ (adr r2, 8008150 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008150:	080081a5 	.word	0x080081a5
 8008154:	0800832b 	.word	0x0800832b
 8008158:	0800832b 	.word	0x0800832b
 800815c:	0800832b 	.word	0x0800832b
 8008160:	080081e5 	.word	0x080081e5
 8008164:	0800832b 	.word	0x0800832b
 8008168:	0800832b 	.word	0x0800832b
 800816c:	0800832b 	.word	0x0800832b
 8008170:	08008227 	.word	0x08008227
 8008174:	0800832b 	.word	0x0800832b
 8008178:	0800832b 	.word	0x0800832b
 800817c:	0800832b 	.word	0x0800832b
 8008180:	08008267 	.word	0x08008267
 8008184:	0800832b 	.word	0x0800832b
 8008188:	0800832b 	.word	0x0800832b
 800818c:	0800832b 	.word	0x0800832b
 8008190:	080082a9 	.word	0x080082a9
 8008194:	0800832b 	.word	0x0800832b
 8008198:	0800832b 	.word	0x0800832b
 800819c:	0800832b 	.word	0x0800832b
 80081a0:	080082e9 	.word	0x080082e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68b9      	ldr	r1, [r7, #8]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 f998 	bl	80084e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699a      	ldr	r2, [r3, #24]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0208 	orr.w	r2, r2, #8
 80081be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699a      	ldr	r2, [r3, #24]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 0204 	bic.w	r2, r2, #4
 80081ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6999      	ldr	r1, [r3, #24]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	691a      	ldr	r2, [r3, #16]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	619a      	str	r2, [r3, #24]
      break;
 80081e2:	e0a5      	b.n	8008330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 fa08 	bl	8008600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699a      	ldr	r2, [r3, #24]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699a      	ldr	r2, [r3, #24]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800820e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6999      	ldr	r1, [r3, #24]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	021a      	lsls	r2, r3, #8
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	619a      	str	r2, [r3, #24]
      break;
 8008224:	e084      	b.n	8008330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68b9      	ldr	r1, [r7, #8]
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fa71 	bl	8008714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69da      	ldr	r2, [r3, #28]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f042 0208 	orr.w	r2, r2, #8
 8008240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69da      	ldr	r2, [r3, #28]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0204 	bic.w	r2, r2, #4
 8008250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69d9      	ldr	r1, [r3, #28]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	691a      	ldr	r2, [r3, #16]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	430a      	orrs	r2, r1
 8008262:	61da      	str	r2, [r3, #28]
      break;
 8008264:	e064      	b.n	8008330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68b9      	ldr	r1, [r7, #8]
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fad9 	bl	8008824 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69da      	ldr	r2, [r3, #28]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69da      	ldr	r2, [r3, #28]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69d9      	ldr	r1, [r3, #28]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	021a      	lsls	r2, r3, #8
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	61da      	str	r2, [r3, #28]
      break;
 80082a6:	e043      	b.n	8008330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68b9      	ldr	r1, [r7, #8]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 fb22 	bl	80088f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f042 0208 	orr.w	r2, r2, #8
 80082c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0204 	bic.w	r2, r2, #4
 80082d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	691a      	ldr	r2, [r3, #16]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80082e6:	e023      	b.n	8008330 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68b9      	ldr	r1, [r7, #8]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fb66 	bl	80089c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008302:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008312:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	021a      	lsls	r2, r3, #8
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	430a      	orrs	r2, r1
 8008326:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008328:	e002      	b.n	8008330 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	75fb      	strb	r3, [r7, #23]
      break;
 800832e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008338:	7dfb      	ldrb	r3, [r7, #23]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3718      	adds	r7, #24
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop

08008344 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a46      	ldr	r2, [pc, #280]	@ (80084c0 <TIM_Base_SetConfig+0x12c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d013      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b2:	d00f      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a43      	ldr	r2, [pc, #268]	@ (80084c4 <TIM_Base_SetConfig+0x130>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00b      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a42      	ldr	r2, [pc, #264]	@ (80084c8 <TIM_Base_SetConfig+0x134>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d007      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a41      	ldr	r2, [pc, #260]	@ (80084cc <TIM_Base_SetConfig+0x138>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d003      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a40      	ldr	r2, [pc, #256]	@ (80084d0 <TIM_Base_SetConfig+0x13c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d108      	bne.n	80083e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a35      	ldr	r2, [pc, #212]	@ (80084c0 <TIM_Base_SetConfig+0x12c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d01f      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083f4:	d01b      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a32      	ldr	r2, [pc, #200]	@ (80084c4 <TIM_Base_SetConfig+0x130>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d017      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a31      	ldr	r2, [pc, #196]	@ (80084c8 <TIM_Base_SetConfig+0x134>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a30      	ldr	r2, [pc, #192]	@ (80084cc <TIM_Base_SetConfig+0x138>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00f      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a2f      	ldr	r2, [pc, #188]	@ (80084d0 <TIM_Base_SetConfig+0x13c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00b      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a2e      	ldr	r2, [pc, #184]	@ (80084d4 <TIM_Base_SetConfig+0x140>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d007      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a2d      	ldr	r2, [pc, #180]	@ (80084d8 <TIM_Base_SetConfig+0x144>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d003      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a2c      	ldr	r2, [pc, #176]	@ (80084dc <TIM_Base_SetConfig+0x148>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d108      	bne.n	8008440 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a16      	ldr	r2, [pc, #88]	@ (80084c0 <TIM_Base_SetConfig+0x12c>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00f      	beq.n	800848c <TIM_Base_SetConfig+0xf8>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a18      	ldr	r2, [pc, #96]	@ (80084d0 <TIM_Base_SetConfig+0x13c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00b      	beq.n	800848c <TIM_Base_SetConfig+0xf8>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a17      	ldr	r2, [pc, #92]	@ (80084d4 <TIM_Base_SetConfig+0x140>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d007      	beq.n	800848c <TIM_Base_SetConfig+0xf8>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a16      	ldr	r2, [pc, #88]	@ (80084d8 <TIM_Base_SetConfig+0x144>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d003      	beq.n	800848c <TIM_Base_SetConfig+0xf8>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a15      	ldr	r2, [pc, #84]	@ (80084dc <TIM_Base_SetConfig+0x148>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d103      	bne.n	8008494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	691a      	ldr	r2, [r3, #16]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d105      	bne.n	80084b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	f023 0201 	bic.w	r2, r3, #1
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	611a      	str	r2, [r3, #16]
  }
}
 80084b2:	bf00      	nop
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	40012c00 	.word	0x40012c00
 80084c4:	40000400 	.word	0x40000400
 80084c8:	40000800 	.word	0x40000800
 80084cc:	40000c00 	.word	0x40000c00
 80084d0:	40013400 	.word	0x40013400
 80084d4:	40014000 	.word	0x40014000
 80084d8:	40014400 	.word	0x40014400
 80084dc:	40014800 	.word	0x40014800

080084e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	f023 0201 	bic.w	r2, r3, #1
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800850e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0303 	bic.w	r3, r3, #3
 800851a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	4313      	orrs	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f023 0302 	bic.w	r3, r3, #2
 800852c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	4313      	orrs	r3, r2
 8008536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a2c      	ldr	r2, [pc, #176]	@ (80085ec <TIM_OC1_SetConfig+0x10c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d00f      	beq.n	8008560 <TIM_OC1_SetConfig+0x80>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a2b      	ldr	r2, [pc, #172]	@ (80085f0 <TIM_OC1_SetConfig+0x110>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d00b      	beq.n	8008560 <TIM_OC1_SetConfig+0x80>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a2a      	ldr	r2, [pc, #168]	@ (80085f4 <TIM_OC1_SetConfig+0x114>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d007      	beq.n	8008560 <TIM_OC1_SetConfig+0x80>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a29      	ldr	r2, [pc, #164]	@ (80085f8 <TIM_OC1_SetConfig+0x118>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d003      	beq.n	8008560 <TIM_OC1_SetConfig+0x80>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a28      	ldr	r2, [pc, #160]	@ (80085fc <TIM_OC1_SetConfig+0x11c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d10c      	bne.n	800857a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f023 0308 	bic.w	r3, r3, #8
 8008566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	4313      	orrs	r3, r2
 8008570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	f023 0304 	bic.w	r3, r3, #4
 8008578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a1b      	ldr	r2, [pc, #108]	@ (80085ec <TIM_OC1_SetConfig+0x10c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d00f      	beq.n	80085a2 <TIM_OC1_SetConfig+0xc2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a1a      	ldr	r2, [pc, #104]	@ (80085f0 <TIM_OC1_SetConfig+0x110>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d00b      	beq.n	80085a2 <TIM_OC1_SetConfig+0xc2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a19      	ldr	r2, [pc, #100]	@ (80085f4 <TIM_OC1_SetConfig+0x114>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d007      	beq.n	80085a2 <TIM_OC1_SetConfig+0xc2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a18      	ldr	r2, [pc, #96]	@ (80085f8 <TIM_OC1_SetConfig+0x118>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d003      	beq.n	80085a2 <TIM_OC1_SetConfig+0xc2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a17      	ldr	r2, [pc, #92]	@ (80085fc <TIM_OC1_SetConfig+0x11c>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d111      	bne.n	80085c6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	621a      	str	r2, [r3, #32]
}
 80085e0:	bf00      	nop
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	40012c00 	.word	0x40012c00
 80085f0:	40013400 	.word	0x40013400
 80085f4:	40014000 	.word	0x40014000
 80085f8:	40014400 	.word	0x40014400
 80085fc:	40014800 	.word	0x40014800

08008600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	f023 0210 	bic.w	r2, r3, #16
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800862e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800863a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	021b      	lsls	r3, r3, #8
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	4313      	orrs	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f023 0320 	bic.w	r3, r3, #32
 800864e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4313      	orrs	r3, r2
 800865a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a28      	ldr	r2, [pc, #160]	@ (8008700 <TIM_OC2_SetConfig+0x100>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d003      	beq.n	800866c <TIM_OC2_SetConfig+0x6c>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a27      	ldr	r2, [pc, #156]	@ (8008704 <TIM_OC2_SetConfig+0x104>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d10d      	bne.n	8008688 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	011b      	lsls	r3, r3, #4
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	4313      	orrs	r3, r2
 800867e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008686:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a1d      	ldr	r2, [pc, #116]	@ (8008700 <TIM_OC2_SetConfig+0x100>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d00f      	beq.n	80086b0 <TIM_OC2_SetConfig+0xb0>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a1c      	ldr	r2, [pc, #112]	@ (8008704 <TIM_OC2_SetConfig+0x104>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d00b      	beq.n	80086b0 <TIM_OC2_SetConfig+0xb0>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a1b      	ldr	r2, [pc, #108]	@ (8008708 <TIM_OC2_SetConfig+0x108>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d007      	beq.n	80086b0 <TIM_OC2_SetConfig+0xb0>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a1a      	ldr	r2, [pc, #104]	@ (800870c <TIM_OC2_SetConfig+0x10c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d003      	beq.n	80086b0 <TIM_OC2_SetConfig+0xb0>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a19      	ldr	r2, [pc, #100]	@ (8008710 <TIM_OC2_SetConfig+0x110>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d113      	bne.n	80086d8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	621a      	str	r2, [r3, #32]
}
 80086f2:	bf00      	nop
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40012c00 	.word	0x40012c00
 8008704:	40013400 	.word	0x40013400
 8008708:	40014000 	.word	0x40014000
 800870c:	40014400 	.word	0x40014400
 8008710:	40014800 	.word	0x40014800

08008714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f023 0303 	bic.w	r3, r3, #3
 800874e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	021b      	lsls	r3, r3, #8
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a27      	ldr	r2, [pc, #156]	@ (8008810 <TIM_OC3_SetConfig+0xfc>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d003      	beq.n	800877e <TIM_OC3_SetConfig+0x6a>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a26      	ldr	r2, [pc, #152]	@ (8008814 <TIM_OC3_SetConfig+0x100>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d10d      	bne.n	800879a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	021b      	lsls	r3, r3, #8
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a1c      	ldr	r2, [pc, #112]	@ (8008810 <TIM_OC3_SetConfig+0xfc>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d00f      	beq.n	80087c2 <TIM_OC3_SetConfig+0xae>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008814 <TIM_OC3_SetConfig+0x100>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d00b      	beq.n	80087c2 <TIM_OC3_SetConfig+0xae>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a1a      	ldr	r2, [pc, #104]	@ (8008818 <TIM_OC3_SetConfig+0x104>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d007      	beq.n	80087c2 <TIM_OC3_SetConfig+0xae>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a19      	ldr	r2, [pc, #100]	@ (800881c <TIM_OC3_SetConfig+0x108>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d003      	beq.n	80087c2 <TIM_OC3_SetConfig+0xae>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a18      	ldr	r2, [pc, #96]	@ (8008820 <TIM_OC3_SetConfig+0x10c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d113      	bne.n	80087ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	011b      	lsls	r3, r3, #4
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	4313      	orrs	r3, r2
 80087dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	011b      	lsls	r3, r3, #4
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	685a      	ldr	r2, [r3, #4]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	621a      	str	r2, [r3, #32]
}
 8008804:	bf00      	nop
 8008806:	371c      	adds	r7, #28
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	40012c00 	.word	0x40012c00
 8008814:	40013400 	.word	0x40013400
 8008818:	40014000 	.word	0x40014000
 800881c:	40014400 	.word	0x40014400
 8008820:	40014800 	.word	0x40014800

08008824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008824:	b480      	push	{r7}
 8008826:	b087      	sub	sp, #28
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800885e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	021b      	lsls	r3, r3, #8
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	4313      	orrs	r3, r2
 800886a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	031b      	lsls	r3, r3, #12
 800887a:	693a      	ldr	r2, [r7, #16]
 800887c:	4313      	orrs	r3, r2
 800887e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a18      	ldr	r2, [pc, #96]	@ (80088e4 <TIM_OC4_SetConfig+0xc0>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d00f      	beq.n	80088a8 <TIM_OC4_SetConfig+0x84>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a17      	ldr	r2, [pc, #92]	@ (80088e8 <TIM_OC4_SetConfig+0xc4>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d00b      	beq.n	80088a8 <TIM_OC4_SetConfig+0x84>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a16      	ldr	r2, [pc, #88]	@ (80088ec <TIM_OC4_SetConfig+0xc8>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d007      	beq.n	80088a8 <TIM_OC4_SetConfig+0x84>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a15      	ldr	r2, [pc, #84]	@ (80088f0 <TIM_OC4_SetConfig+0xcc>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d003      	beq.n	80088a8 <TIM_OC4_SetConfig+0x84>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a14      	ldr	r2, [pc, #80]	@ (80088f4 <TIM_OC4_SetConfig+0xd0>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d109      	bne.n	80088bc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	019b      	lsls	r3, r3, #6
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	621a      	str	r2, [r3, #32]
}
 80088d6:	bf00      	nop
 80088d8:	371c      	adds	r7, #28
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	40012c00 	.word	0x40012c00
 80088e8:	40013400 	.word	0x40013400
 80088ec:	40014000 	.word	0x40014000
 80088f0:	40014400 	.word	0x40014400
 80088f4:	40014800 	.word	0x40014800

080088f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800891e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800892a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	4313      	orrs	r3, r2
 8008934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800893c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	041b      	lsls	r3, r3, #16
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	4313      	orrs	r3, r2
 8008948:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a17      	ldr	r2, [pc, #92]	@ (80089ac <TIM_OC5_SetConfig+0xb4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d00f      	beq.n	8008972 <TIM_OC5_SetConfig+0x7a>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a16      	ldr	r2, [pc, #88]	@ (80089b0 <TIM_OC5_SetConfig+0xb8>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d00b      	beq.n	8008972 <TIM_OC5_SetConfig+0x7a>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a15      	ldr	r2, [pc, #84]	@ (80089b4 <TIM_OC5_SetConfig+0xbc>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d007      	beq.n	8008972 <TIM_OC5_SetConfig+0x7a>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a14      	ldr	r2, [pc, #80]	@ (80089b8 <TIM_OC5_SetConfig+0xc0>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d003      	beq.n	8008972 <TIM_OC5_SetConfig+0x7a>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a13      	ldr	r2, [pc, #76]	@ (80089bc <TIM_OC5_SetConfig+0xc4>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d109      	bne.n	8008986 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008978:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	021b      	lsls	r3, r3, #8
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	4313      	orrs	r3, r2
 8008984:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	621a      	str	r2, [r3, #32]
}
 80089a0:	bf00      	nop
 80089a2:	371c      	adds	r7, #28
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	40012c00 	.word	0x40012c00
 80089b0:	40013400 	.word	0x40013400
 80089b4:	40014000 	.word	0x40014000
 80089b8:	40014400 	.word	0x40014400
 80089bc:	40014800 	.word	0x40014800

080089c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a1b      	ldr	r3, [r3, #32]
 80089d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	021b      	lsls	r3, r3, #8
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	051b      	lsls	r3, r3, #20
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a18      	ldr	r2, [pc, #96]	@ (8008a78 <TIM_OC6_SetConfig+0xb8>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d00f      	beq.n	8008a3c <TIM_OC6_SetConfig+0x7c>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a17      	ldr	r2, [pc, #92]	@ (8008a7c <TIM_OC6_SetConfig+0xbc>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d00b      	beq.n	8008a3c <TIM_OC6_SetConfig+0x7c>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a16      	ldr	r2, [pc, #88]	@ (8008a80 <TIM_OC6_SetConfig+0xc0>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d007      	beq.n	8008a3c <TIM_OC6_SetConfig+0x7c>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a15      	ldr	r2, [pc, #84]	@ (8008a84 <TIM_OC6_SetConfig+0xc4>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d003      	beq.n	8008a3c <TIM_OC6_SetConfig+0x7c>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a14      	ldr	r2, [pc, #80]	@ (8008a88 <TIM_OC6_SetConfig+0xc8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d109      	bne.n	8008a50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	029b      	lsls	r3, r3, #10
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	621a      	str	r2, [r3, #32]
}
 8008a6a:	bf00      	nop
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	40012c00 	.word	0x40012c00
 8008a7c:	40013400 	.word	0x40013400
 8008a80:	40014000 	.word	0x40014000
 8008a84:	40014400 	.word	0x40014400
 8008a88:	40014800 	.word	0x40014800

08008a8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	f003 031f 	and.w	r3, r3, #31
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6a1a      	ldr	r2, [r3, #32]
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	43db      	mvns	r3, r3
 8008aae:	401a      	ands	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6a1a      	ldr	r2, [r3, #32]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f003 031f 	and.w	r3, r3, #31
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	621a      	str	r2, [r3, #32]
}
 8008aca:	bf00      	nop
 8008acc:	371c      	adds	r7, #28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
	...

08008ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d101      	bne.n	8008af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008aec:	2302      	movs	r3, #2
 8008aee:	e068      	b.n	8008bc2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a2e      	ldr	r2, [pc, #184]	@ (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d004      	beq.n	8008b24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d108      	bne.n	8008b36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a1e      	ldr	r2, [pc, #120]	@ (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d01d      	beq.n	8008b96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b62:	d018      	beq.n	8008b96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a1b      	ldr	r2, [pc, #108]	@ (8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d013      	beq.n	8008b96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a1a      	ldr	r2, [pc, #104]	@ (8008bdc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d00e      	beq.n	8008b96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a18      	ldr	r2, [pc, #96]	@ (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d009      	beq.n	8008b96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a13      	ldr	r2, [pc, #76]	@ (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d004      	beq.n	8008b96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a14      	ldr	r2, [pc, #80]	@ (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d10c      	bne.n	8008bb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	40012c00 	.word	0x40012c00
 8008bd4:	40013400 	.word	0x40013400
 8008bd8:	40000400 	.word	0x40000400
 8008bdc:	40000800 	.word	0x40000800
 8008be0:	40000c00 	.word	0x40000c00
 8008be4:	40014000 	.word	0x40014000

08008be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c24:	b084      	sub	sp, #16
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	f107 001c 	add.w	r0, r7, #28
 8008c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f001 fa26 	bl	800a094 <USB_CoreReset>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008c4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d106      	bne.n	8008c62 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c60:	e005      	b.n	8008c6e <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c7a:	b004      	add	sp, #16
 8008c7c:	4770      	bx	lr
	...

08008c80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008c8e:	79fb      	ldrb	r3, [r7, #7]
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d165      	bne.n	8008d60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	4a3e      	ldr	r2, [pc, #248]	@ (8008d90 <USB_SetTurnaroundTime+0x110>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d906      	bls.n	8008caa <USB_SetTurnaroundTime+0x2a>
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	4a3d      	ldr	r2, [pc, #244]	@ (8008d94 <USB_SetTurnaroundTime+0x114>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d202      	bcs.n	8008caa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008ca4:	230f      	movs	r3, #15
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	e05c      	b.n	8008d64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	4a39      	ldr	r2, [pc, #228]	@ (8008d94 <USB_SetTurnaroundTime+0x114>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d306      	bcc.n	8008cc0 <USB_SetTurnaroundTime+0x40>
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	4a38      	ldr	r2, [pc, #224]	@ (8008d98 <USB_SetTurnaroundTime+0x118>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d202      	bcs.n	8008cc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008cba:	230e      	movs	r3, #14
 8008cbc:	617b      	str	r3, [r7, #20]
 8008cbe:	e051      	b.n	8008d64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	4a35      	ldr	r2, [pc, #212]	@ (8008d98 <USB_SetTurnaroundTime+0x118>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d306      	bcc.n	8008cd6 <USB_SetTurnaroundTime+0x56>
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4a34      	ldr	r2, [pc, #208]	@ (8008d9c <USB_SetTurnaroundTime+0x11c>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d202      	bcs.n	8008cd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008cd0:	230d      	movs	r3, #13
 8008cd2:	617b      	str	r3, [r7, #20]
 8008cd4:	e046      	b.n	8008d64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	4a30      	ldr	r2, [pc, #192]	@ (8008d9c <USB_SetTurnaroundTime+0x11c>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d306      	bcc.n	8008cec <USB_SetTurnaroundTime+0x6c>
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8008da0 <USB_SetTurnaroundTime+0x120>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d802      	bhi.n	8008cec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008ce6:	230c      	movs	r3, #12
 8008ce8:	617b      	str	r3, [r7, #20]
 8008cea:	e03b      	b.n	8008d64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	4a2c      	ldr	r2, [pc, #176]	@ (8008da0 <USB_SetTurnaroundTime+0x120>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d906      	bls.n	8008d02 <USB_SetTurnaroundTime+0x82>
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	4a2b      	ldr	r2, [pc, #172]	@ (8008da4 <USB_SetTurnaroundTime+0x124>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d802      	bhi.n	8008d02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008cfc:	230b      	movs	r3, #11
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	e030      	b.n	8008d64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	4a27      	ldr	r2, [pc, #156]	@ (8008da4 <USB_SetTurnaroundTime+0x124>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d906      	bls.n	8008d18 <USB_SetTurnaroundTime+0x98>
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	4a26      	ldr	r2, [pc, #152]	@ (8008da8 <USB_SetTurnaroundTime+0x128>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d802      	bhi.n	8008d18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008d12:	230a      	movs	r3, #10
 8008d14:	617b      	str	r3, [r7, #20]
 8008d16:	e025      	b.n	8008d64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	4a23      	ldr	r2, [pc, #140]	@ (8008da8 <USB_SetTurnaroundTime+0x128>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d906      	bls.n	8008d2e <USB_SetTurnaroundTime+0xae>
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	4a22      	ldr	r2, [pc, #136]	@ (8008dac <USB_SetTurnaroundTime+0x12c>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d202      	bcs.n	8008d2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008d28:	2309      	movs	r3, #9
 8008d2a:	617b      	str	r3, [r7, #20]
 8008d2c:	e01a      	b.n	8008d64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	4a1e      	ldr	r2, [pc, #120]	@ (8008dac <USB_SetTurnaroundTime+0x12c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d306      	bcc.n	8008d44 <USB_SetTurnaroundTime+0xc4>
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	4a1d      	ldr	r2, [pc, #116]	@ (8008db0 <USB_SetTurnaroundTime+0x130>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d802      	bhi.n	8008d44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008d3e:	2308      	movs	r3, #8
 8008d40:	617b      	str	r3, [r7, #20]
 8008d42:	e00f      	b.n	8008d64 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	4a1a      	ldr	r2, [pc, #104]	@ (8008db0 <USB_SetTurnaroundTime+0x130>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d906      	bls.n	8008d5a <USB_SetTurnaroundTime+0xda>
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	4a19      	ldr	r2, [pc, #100]	@ (8008db4 <USB_SetTurnaroundTime+0x134>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d202      	bcs.n	8008d5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008d54:	2307      	movs	r3, #7
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	e004      	b.n	8008d64 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008d5a:	2306      	movs	r3, #6
 8008d5c:	617b      	str	r3, [r7, #20]
 8008d5e:	e001      	b.n	8008d64 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008d60:	2309      	movs	r3, #9
 8008d62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	68da      	ldr	r2, [r3, #12]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	029b      	lsls	r3, r3, #10
 8008d78:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008d7c:	431a      	orrs	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	371c      	adds	r7, #28
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	00d8acbf 	.word	0x00d8acbf
 8008d94:	00e4e1c0 	.word	0x00e4e1c0
 8008d98:	00f42400 	.word	0x00f42400
 8008d9c:	01067380 	.word	0x01067380
 8008da0:	011a499f 	.word	0x011a499f
 8008da4:	01312cff 	.word	0x01312cff
 8008da8:	014ca43f 	.word	0x014ca43f
 8008dac:	016e3600 	.word	0x016e3600
 8008db0:	01a6ab1f 	.word	0x01a6ab1f
 8008db4:	01e84800 	.word	0x01e84800

08008db8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f043 0201 	orr.w	r2, r3, #1
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b083      	sub	sp, #12
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	f023 0201 	bic.w	r2, r3, #1
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e18:	78fb      	ldrb	r3, [r7, #3]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d115      	bne.n	8008e4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008e2a:	200a      	movs	r0, #10
 8008e2c:	f7fa f93a 	bl	80030a4 <HAL_Delay>
      ms += 10U;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	330a      	adds	r3, #10
 8008e34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f001 f8b3 	bl	8009fa2 <USB_GetMode>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d01e      	beq.n	8008e80 <USB_SetCurrentMode+0x84>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2bc7      	cmp	r3, #199	@ 0xc7
 8008e46:	d9f0      	bls.n	8008e2a <USB_SetCurrentMode+0x2e>
 8008e48:	e01a      	b.n	8008e80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e4a:	78fb      	ldrb	r3, [r7, #3]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d115      	bne.n	8008e7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008e5c:	200a      	movs	r0, #10
 8008e5e:	f7fa f921 	bl	80030a4 <HAL_Delay>
      ms += 10U;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	330a      	adds	r3, #10
 8008e66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f001 f89a 	bl	8009fa2 <USB_GetMode>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d005      	beq.n	8008e80 <USB_SetCurrentMode+0x84>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2bc7      	cmp	r3, #199	@ 0xc7
 8008e78:	d9f0      	bls.n	8008e5c <USB_SetCurrentMode+0x60>
 8008e7a:	e001      	b.n	8008e80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e005      	b.n	8008e8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2bc8      	cmp	r3, #200	@ 0xc8
 8008e84:	d101      	bne.n	8008e8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e000      	b.n	8008e8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e94:	b084      	sub	sp, #16
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b086      	sub	sp, #24
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008eae:	2300      	movs	r3, #0
 8008eb0:	613b      	str	r3, [r7, #16]
 8008eb2:	e009      	b.n	8008ec8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	3340      	adds	r3, #64	@ 0x40
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	613b      	str	r3, [r7, #16]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	2b0e      	cmp	r3, #14
 8008ecc:	d9f2      	bls.n	8008eb4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008ece:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d11c      	bne.n	8008f10 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ee4:	f043 0302 	orr.w	r3, r3, #2
 8008ee8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	e005      	b.n	8008f1c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f14:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f22:	461a      	mov	r2, r3
 8008f24:	2300      	movs	r3, #0
 8008f26:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f28:	2103      	movs	r1, #3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f95a 	bl	80091e4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f30:	2110      	movs	r1, #16
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f8f6 	bl	8009124 <USB_FlushTxFifo>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d001      	beq.n	8008f42 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f920 	bl	8009188 <USB_FlushRxFifo>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f58:	461a      	mov	r2, r3
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f64:	461a      	mov	r2, r3
 8008f66:	2300      	movs	r3, #0
 8008f68:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f70:	461a      	mov	r2, r3
 8008f72:	2300      	movs	r3, #0
 8008f74:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f76:	2300      	movs	r3, #0
 8008f78:	613b      	str	r3, [r7, #16]
 8008f7a:	e043      	b.n	8009004 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f92:	d118      	bne.n	8008fc6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10a      	bne.n	8008fb0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	e013      	b.n	8008fd8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	015a      	lsls	r2, r3, #5
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	e008      	b.n	8008fd8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008ffc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	3301      	adds	r3, #1
 8009002:	613b      	str	r3, [r7, #16]
 8009004:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009008:	461a      	mov	r2, r3
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	4293      	cmp	r3, r2
 800900e:	d3b5      	bcc.n	8008f7c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009010:	2300      	movs	r3, #0
 8009012:	613b      	str	r3, [r7, #16]
 8009014:	e043      	b.n	800909e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800902c:	d118      	bne.n	8009060 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10a      	bne.n	800904a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009040:	461a      	mov	r2, r3
 8009042:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	e013      	b.n	8009072 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009056:	461a      	mov	r2, r3
 8009058:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	e008      	b.n	8009072 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800906c:	461a      	mov	r2, r3
 800906e:	2300      	movs	r3, #0
 8009070:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	015a      	lsls	r2, r3, #5
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	4413      	add	r3, r2
 800907a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800907e:	461a      	mov	r2, r3
 8009080:	2300      	movs	r3, #0
 8009082:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009090:	461a      	mov	r2, r3
 8009092:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009096:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	3301      	adds	r3, #1
 800909c:	613b      	str	r3, [r7, #16]
 800909e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80090a2:	461a      	mov	r2, r3
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d3b5      	bcc.n	8009016 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80090ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	f043 0210 	orr.w	r2, r3, #16
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	699a      	ldr	r2, [r3, #24]
 80090dc:	4b10      	ldr	r3, [pc, #64]	@ (8009120 <USB_DevInit+0x28c>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80090e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d005      	beq.n	80090f8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	f043 0208 	orr.w	r2, r3, #8
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80090f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d107      	bne.n	8009110 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009108:	f043 0304 	orr.w	r3, r3, #4
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009110:	7dfb      	ldrb	r3, [r7, #23]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800911c:	b004      	add	sp, #16
 800911e:	4770      	bx	lr
 8009120:	803c3800 	.word	0x803c3800

08009124 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800912e:	2300      	movs	r3, #0
 8009130:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3301      	adds	r3, #1
 8009136:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800913e:	d901      	bls.n	8009144 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e01b      	b.n	800917c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	daf2      	bge.n	8009132 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	019b      	lsls	r3, r3, #6
 8009154:	f043 0220 	orr.w	r2, r3, #32
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3301      	adds	r3, #1
 8009160:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009168:	d901      	bls.n	800916e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e006      	b.n	800917c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b20      	cmp	r3, #32
 8009178:	d0f0      	beq.n	800915c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009190:	2300      	movs	r3, #0
 8009192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3301      	adds	r3, #1
 8009198:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091a0:	d901      	bls.n	80091a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e018      	b.n	80091d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	daf2      	bge.n	8009194 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2210      	movs	r2, #16
 80091b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	3301      	adds	r3, #1
 80091bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091c4:	d901      	bls.n	80091ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e006      	b.n	80091d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	f003 0310 	and.w	r3, r3, #16
 80091d2:	2b10      	cmp	r3, #16
 80091d4:	d0f0      	beq.n	80091b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	68f9      	ldr	r1, [r7, #12]
 8009200:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009204:	4313      	orrs	r3, r2
 8009206:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009216:	b480      	push	{r7}
 8009218:	b087      	sub	sp, #28
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f003 0306 	and.w	r3, r3, #6
 800922e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b02      	cmp	r3, #2
 8009234:	d002      	beq.n	800923c <USB_GetDevSpeed+0x26>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2b06      	cmp	r3, #6
 800923a:	d102      	bne.n	8009242 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800923c:	2302      	movs	r3, #2
 800923e:	75fb      	strb	r3, [r7, #23]
 8009240:	e001      	b.n	8009246 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009242:	230f      	movs	r3, #15
 8009244:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009246:	7dfb      	ldrb	r3, [r7, #23]
}
 8009248:	4618      	mov	r0, r3
 800924a:	371c      	adds	r7, #28
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	785b      	ldrb	r3, [r3, #1]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d13a      	bne.n	80092e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009276:	69da      	ldr	r2, [r3, #28]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	f003 030f 	and.w	r3, r3, #15
 8009280:	2101      	movs	r1, #1
 8009282:	fa01 f303 	lsl.w	r3, r1, r3
 8009286:	b29b      	uxth	r3, r3
 8009288:	68f9      	ldr	r1, [r7, #12]
 800928a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800928e:	4313      	orrs	r3, r2
 8009290:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d155      	bne.n	8009354 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	791b      	ldrb	r3, [r3, #4]
 80092c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80092c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	059b      	lsls	r3, r3, #22
 80092ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80092cc:	4313      	orrs	r3, r2
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	0151      	lsls	r1, r2, #5
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	440a      	add	r2, r1
 80092d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	e036      	b.n	8009354 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ec:	69da      	ldr	r2, [r3, #28]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	f003 030f 	and.w	r3, r3, #15
 80092f6:	2101      	movs	r1, #1
 80092f8:	fa01 f303 	lsl.w	r3, r1, r3
 80092fc:	041b      	lsls	r3, r3, #16
 80092fe:	68f9      	ldr	r1, [r7, #12]
 8009300:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009304:	4313      	orrs	r3, r2
 8009306:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d11a      	bne.n	8009354 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	015a      	lsls	r2, r3, #5
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	4413      	add	r3, r2
 8009326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	791b      	ldrb	r3, [r3, #4]
 8009338:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800933a:	430b      	orrs	r3, r1
 800933c:	4313      	orrs	r3, r2
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	0151      	lsls	r1, r2, #5
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	440a      	add	r2, r1
 8009346:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800934a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800934e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009352:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
	...

08009364 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	785b      	ldrb	r3, [r3, #1]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d161      	bne.n	8009444 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4413      	add	r3, r2
 8009388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009392:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009396:	d11f      	bne.n	80093d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	0151      	lsls	r1, r2, #5
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	440a      	add	r2, r1
 80093ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	0151      	lsls	r1, r2, #5
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	440a      	add	r2, r1
 80093ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	f003 030f 	and.w	r3, r3, #15
 80093e8:	2101      	movs	r1, #1
 80093ea:	fa01 f303 	lsl.w	r3, r1, r3
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	43db      	mvns	r3, r3
 80093f2:	68f9      	ldr	r1, [r7, #12]
 80093f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093f8:	4013      	ands	r3, r2
 80093fa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009402:	69da      	ldr	r2, [r3, #28]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	f003 030f 	and.w	r3, r3, #15
 800940c:	2101      	movs	r1, #1
 800940e:	fa01 f303 	lsl.w	r3, r1, r3
 8009412:	b29b      	uxth	r3, r3
 8009414:	43db      	mvns	r3, r3
 8009416:	68f9      	ldr	r1, [r7, #12]
 8009418:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800941c:	4013      	ands	r3, r2
 800941e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4413      	add	r3, r2
 8009428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	0159      	lsls	r1, r3, #5
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	440b      	add	r3, r1
 8009436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800943a:	4619      	mov	r1, r3
 800943c:	4b35      	ldr	r3, [pc, #212]	@ (8009514 <USB_DeactivateEndpoint+0x1b0>)
 800943e:	4013      	ands	r3, r2
 8009440:	600b      	str	r3, [r1, #0]
 8009442:	e060      	b.n	8009506 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009456:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800945a:	d11f      	bne.n	800949c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	0151      	lsls	r1, r2, #5
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	440a      	add	r2, r1
 8009472:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009476:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800947a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	4413      	add	r3, r2
 8009484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	0151      	lsls	r1, r2, #5
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	440a      	add	r2, r1
 8009492:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009496:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800949a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	f003 030f 	and.w	r3, r3, #15
 80094ac:	2101      	movs	r1, #1
 80094ae:	fa01 f303 	lsl.w	r3, r1, r3
 80094b2:	041b      	lsls	r3, r3, #16
 80094b4:	43db      	mvns	r3, r3
 80094b6:	68f9      	ldr	r1, [r7, #12]
 80094b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094bc:	4013      	ands	r3, r2
 80094be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094c6:	69da      	ldr	r2, [r3, #28]
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	f003 030f 	and.w	r3, r3, #15
 80094d0:	2101      	movs	r1, #1
 80094d2:	fa01 f303 	lsl.w	r3, r1, r3
 80094d6:	041b      	lsls	r3, r3, #16
 80094d8:	43db      	mvns	r3, r3
 80094da:	68f9      	ldr	r1, [r7, #12]
 80094dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094e0:	4013      	ands	r3, r2
 80094e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	0159      	lsls	r1, r3, #5
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	440b      	add	r3, r1
 80094fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094fe:	4619      	mov	r1, r3
 8009500:	4b05      	ldr	r3, [pc, #20]	@ (8009518 <USB_DeactivateEndpoint+0x1b4>)
 8009502:	4013      	ands	r3, r2
 8009504:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	ec337800 	.word	0xec337800
 8009518:	eff37800 	.word	0xeff37800

0800951c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	785b      	ldrb	r3, [r3, #1]
 8009534:	2b01      	cmp	r3, #1
 8009536:	f040 812d 	bne.w	8009794 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d132      	bne.n	80095a8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	4413      	add	r3, r2
 800954a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	0151      	lsls	r1, r2, #5
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	440a      	add	r2, r1
 8009558:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800955c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009560:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009564:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	4413      	add	r3, r2
 800956e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	0151      	lsls	r1, r2, #5
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	440a      	add	r2, r1
 800957c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009580:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009584:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	015a      	lsls	r2, r3, #5
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	4413      	add	r3, r2
 800958e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	0151      	lsls	r1, r2, #5
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	440a      	add	r2, r1
 800959c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095a0:	0cdb      	lsrs	r3, r3, #19
 80095a2:	04db      	lsls	r3, r3, #19
 80095a4:	6113      	str	r3, [r2, #16]
 80095a6:	e097      	b.n	80096d8 <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	0151      	lsls	r1, r2, #5
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	440a      	add	r2, r1
 80095be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095c2:	0cdb      	lsrs	r3, r3, #19
 80095c4:	04db      	lsls	r3, r3, #19
 80095c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	0151      	lsls	r1, r2, #5
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	440a      	add	r2, r1
 80095de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80095e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80095ea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d11a      	bne.n	8009628 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	691a      	ldr	r2, [r3, #16]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d903      	bls.n	8009606 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	689a      	ldr	r2, [r3, #8]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	015a      	lsls	r2, r3, #5
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	4413      	add	r3, r2
 800960e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	0151      	lsls	r1, r2, #5
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	440a      	add	r2, r1
 800961c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009620:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009624:	6113      	str	r3, [r2, #16]
 8009626:	e044      	b.n	80096b2 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	691a      	ldr	r2, [r3, #16]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	4413      	add	r3, r2
 8009632:	1e5a      	subs	r2, r3, #1
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	fbb2 f3f3 	udiv	r3, r2, r3
 800963c:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800964a:	691a      	ldr	r2, [r3, #16]
 800964c:	89fb      	ldrh	r3, [r7, #14]
 800964e:	04d9      	lsls	r1, r3, #19
 8009650:	4b8f      	ldr	r3, [pc, #572]	@ (8009890 <USB_EPStartXfer+0x374>)
 8009652:	400b      	ands	r3, r1
 8009654:	6939      	ldr	r1, [r7, #16]
 8009656:	0148      	lsls	r0, r1, #5
 8009658:	6979      	ldr	r1, [r7, #20]
 800965a:	4401      	add	r1, r0
 800965c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009660:	4313      	orrs	r3, r2
 8009662:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	791b      	ldrb	r3, [r3, #4]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d122      	bne.n	80096b2 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	0151      	lsls	r1, r2, #5
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	440a      	add	r2, r1
 8009682:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009686:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800968a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009698:	691a      	ldr	r2, [r3, #16]
 800969a:	89fb      	ldrh	r3, [r7, #14]
 800969c:	075b      	lsls	r3, r3, #29
 800969e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80096a2:	6939      	ldr	r1, [r7, #16]
 80096a4:	0148      	lsls	r0, r1, #5
 80096a6:	6979      	ldr	r1, [r7, #20]
 80096a8:	4401      	add	r1, r0
 80096aa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80096ae:	4313      	orrs	r3, r2
 80096b0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096be:	691a      	ldr	r2, [r3, #16]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096c8:	6939      	ldr	r1, [r7, #16]
 80096ca:	0148      	lsls	r0, r1, #5
 80096cc:	6979      	ldr	r1, [r7, #20]
 80096ce:	4401      	add	r1, r0
 80096d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80096d4:	4313      	orrs	r3, r2
 80096d6:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	0151      	lsls	r1, r2, #5
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	440a      	add	r2, r1
 80096ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80096f6:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	791b      	ldrb	r3, [r3, #4]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d015      	beq.n	800972c <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 813a 	beq.w	800997e <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	f003 030f 	and.w	r3, r3, #15
 800971a:	2101      	movs	r1, #1
 800971c:	fa01 f303 	lsl.w	r3, r1, r3
 8009720:	6979      	ldr	r1, [r7, #20]
 8009722:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009726:	4313      	orrs	r3, r2
 8009728:	634b      	str	r3, [r1, #52]	@ 0x34
 800972a:	e128      	b.n	800997e <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009738:	2b00      	cmp	r3, #0
 800973a:	d110      	bne.n	800975e <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	015a      	lsls	r2, r3, #5
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	4413      	add	r3, r2
 8009744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	0151      	lsls	r1, r2, #5
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	440a      	add	r2, r1
 8009752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009756:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	e00f      	b.n	800977e <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	015a      	lsls	r2, r3, #5
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	4413      	add	r3, r2
 8009766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	0151      	lsls	r1, r2, #5
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	440a      	add	r2, r1
 8009774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800977c:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68d9      	ldr	r1, [r3, #12]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781a      	ldrb	r2, [r3, #0]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	b29b      	uxth	r3, r3
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f9a7 	bl	8009ae0 <USB_WritePacket>
 8009792:	e0f4      	b.n	800997e <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	0151      	lsls	r1, r2, #5
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	440a      	add	r2, r1
 80097aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097ae:	0cdb      	lsrs	r3, r3, #19
 80097b0:	04db      	lsls	r3, r3, #19
 80097b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	0151      	lsls	r1, r2, #5
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	440a      	add	r2, r1
 80097ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80097d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80097d6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d12f      	bne.n	800983e <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	689a      	ldr	r2, [r3, #8]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	689a      	ldr	r2, [r3, #8]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800980c:	6939      	ldr	r1, [r7, #16]
 800980e:	0148      	lsls	r0, r1, #5
 8009810:	6979      	ldr	r1, [r7, #20]
 8009812:	4401      	add	r1, r0
 8009814:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009818:	4313      	orrs	r3, r2
 800981a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	015a      	lsls	r2, r3, #5
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	4413      	add	r3, r2
 8009824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	0151      	lsls	r1, r2, #5
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	440a      	add	r2, r1
 8009832:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009836:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800983a:	6113      	str	r3, [r2, #16]
 800983c:	e062      	b.n	8009904 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d126      	bne.n	8009894 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	4413      	add	r3, r2
 800984e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009852:	691a      	ldr	r2, [r3, #16]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800985c:	6939      	ldr	r1, [r7, #16]
 800985e:	0148      	lsls	r0, r1, #5
 8009860:	6979      	ldr	r1, [r7, #20]
 8009862:	4401      	add	r1, r0
 8009864:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009868:	4313      	orrs	r3, r2
 800986a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	440a      	add	r2, r1
 8009882:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009886:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800988a:	6113      	str	r3, [r2, #16]
 800988c:	e03a      	b.n	8009904 <USB_EPStartXfer+0x3e8>
 800988e:	bf00      	nop
 8009890:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	691a      	ldr	r2, [r3, #16]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	4413      	add	r3, r2
 800989e:	1e5a      	subs	r2, r3, #1
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a8:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	89fa      	ldrh	r2, [r7, #14]
 80098b0:	fb03 f202 	mul.w	r2, r3, r2
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098c4:	691a      	ldr	r2, [r3, #16]
 80098c6:	89fb      	ldrh	r3, [r7, #14]
 80098c8:	04d9      	lsls	r1, r3, #19
 80098ca:	4b2f      	ldr	r3, [pc, #188]	@ (8009988 <USB_EPStartXfer+0x46c>)
 80098cc:	400b      	ands	r3, r1
 80098ce:	6939      	ldr	r1, [r7, #16]
 80098d0:	0148      	lsls	r0, r1, #5
 80098d2:	6979      	ldr	r1, [r7, #20]
 80098d4:	4401      	add	r1, r0
 80098d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80098da:	4313      	orrs	r3, r2
 80098dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ea:	691a      	ldr	r2, [r3, #16]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098f4:	6939      	ldr	r1, [r7, #16]
 80098f6:	0148      	lsls	r0, r1, #5
 80098f8:	6979      	ldr	r1, [r7, #20]
 80098fa:	4401      	add	r1, r0
 80098fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009900:	4313      	orrs	r3, r2
 8009902:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	791b      	ldrb	r3, [r3, #4]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d128      	bne.n	800995e <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009918:	2b00      	cmp	r3, #0
 800991a:	d110      	bne.n	800993e <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	0151      	lsls	r1, r2, #5
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	440a      	add	r2, r1
 8009932:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009936:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	e00f      	b.n	800995e <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	0151      	lsls	r1, r2, #5
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	440a      	add	r2, r1
 8009954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800995c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	4413      	add	r3, r2
 8009966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	0151      	lsls	r1, r2, #5
 8009970:	697a      	ldr	r2, [r7, #20]
 8009972:	440a      	add	r2, r1
 8009974:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009978:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800997c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3718      	adds	r7, #24
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	1ff80000 	.word	0x1ff80000

0800998c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800998c:	b480      	push	{r7}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	785b      	ldrb	r3, [r3, #1]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d14a      	bne.n	8009a40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099c2:	f040 8086 	bne.w	8009ad2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	7812      	ldrb	r2, [r2, #0]
 80099da:	0151      	lsls	r1, r2, #5
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	440a      	add	r2, r1
 80099e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80099e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	015a      	lsls	r2, r3, #5
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	4413      	add	r3, r2
 80099f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	7812      	ldrb	r2, [r2, #0]
 80099fe:	0151      	lsls	r1, r2, #5
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	440a      	add	r2, r1
 8009a04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	3301      	adds	r3, #1
 8009a12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d902      	bls.n	8009a24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	75fb      	strb	r3, [r7, #23]
          break;
 8009a22:	e056      	b.n	8009ad2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a3c:	d0e7      	beq.n	8009a0e <USB_EPStopXfer+0x82>
 8009a3e:	e048      	b.n	8009ad2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a58:	d13b      	bne.n	8009ad2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	7812      	ldrb	r2, [r2, #0]
 8009a6e:	0151      	lsls	r1, r2, #5
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	440a      	add	r2, r1
 8009a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	7812      	ldrb	r2, [r2, #0]
 8009a92:	0151      	lsls	r1, r2, #5
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	440a      	add	r2, r1
 8009a98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009aa0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d902      	bls.n	8009ab8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ab6:	e00c      	b.n	8009ad2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	015a      	lsls	r2, r3, #5
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009acc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ad0:	d0e7      	beq.n	8009aa2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	371c      	adds	r7, #28
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b089      	sub	sp, #36	@ 0x24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	4611      	mov	r1, r2
 8009aec:	461a      	mov	r2, r3
 8009aee:	460b      	mov	r3, r1
 8009af0:	71fb      	strb	r3, [r7, #7]
 8009af2:	4613      	mov	r3, r2
 8009af4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009afe:	88bb      	ldrh	r3, [r7, #4]
 8009b00:	3303      	adds	r3, #3
 8009b02:	089b      	lsrs	r3, r3, #2
 8009b04:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8009b06:	2300      	movs	r3, #0
 8009b08:	61bb      	str	r3, [r7, #24]
 8009b0a:	e018      	b.n	8009b3e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b0c:	79fb      	ldrb	r3, [r7, #7]
 8009b0e:	031a      	lsls	r2, r3, #12
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b18:	461a      	mov	r2, r3
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	3301      	adds	r3, #1
 8009b24:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	3301      	adds	r3, #1
 8009b36:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	61bb      	str	r3, [r7, #24]
 8009b3e:	69ba      	ldr	r2, [r7, #24]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d3e2      	bcc.n	8009b0c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3724      	adds	r7, #36	@ 0x24
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b08b      	sub	sp, #44	@ 0x2c
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b6a:	88fb      	ldrh	r3, [r7, #6]
 8009b6c:	089b      	lsrs	r3, r3, #2
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009b72:	88fb      	ldrh	r3, [r7, #6]
 8009b74:	f003 0303 	and.w	r3, r3, #3
 8009b78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	623b      	str	r3, [r7, #32]
 8009b7e:	e014      	b.n	8009baa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8e:	3301      	adds	r3, #1
 8009b90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b94:	3301      	adds	r3, #1
 8009b96:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	623b      	str	r3, [r7, #32]
 8009baa:	6a3a      	ldr	r2, [r7, #32]
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d3e6      	bcc.n	8009b80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009bb2:	8bfb      	ldrh	r3, [r7, #30]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d01e      	beq.n	8009bf6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	f107 0310 	add.w	r3, r7, #16
 8009bc8:	6812      	ldr	r2, [r2, #0]
 8009bca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	00db      	lsls	r3, r3, #3
 8009bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bdc:	701a      	strb	r2, [r3, #0]
      i++;
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	3301      	adds	r3, #1
 8009be2:	623b      	str	r3, [r7, #32]
      pDest++;
 8009be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be6:	3301      	adds	r3, #1
 8009be8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009bea:	8bfb      	ldrh	r3, [r7, #30]
 8009bec:	3b01      	subs	r3, #1
 8009bee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009bf0:	8bfb      	ldrh	r3, [r7, #30]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1ea      	bne.n	8009bcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	372c      	adds	r7, #44	@ 0x2c
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	785b      	ldrb	r3, [r3, #1]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d12c      	bne.n	8009c7a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	db12      	blt.n	8009c58 <USB_EPSetStall+0x54>
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00f      	beq.n	8009c58 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	0151      	lsls	r1, r2, #5
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	440a      	add	r2, r1
 8009c4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009c56:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	0151      	lsls	r1, r2, #5
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	440a      	add	r2, r1
 8009c6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009c76:	6013      	str	r3, [r2, #0]
 8009c78:	e02b      	b.n	8009cd2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	015a      	lsls	r2, r3, #5
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	4413      	add	r3, r2
 8009c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	db12      	blt.n	8009cb2 <USB_EPSetStall+0xae>
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00f      	beq.n	8009cb2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	0151      	lsls	r1, r2, #5
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	440a      	add	r2, r1
 8009ca8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009cb0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	015a      	lsls	r2, r3, #5
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4413      	add	r3, r2
 8009cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	0151      	lsls	r1, r2, #5
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	440a      	add	r2, r1
 8009cc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009cd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	785b      	ldrb	r3, [r3, #1]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d128      	bne.n	8009d4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	015a      	lsls	r2, r3, #5
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	4413      	add	r3, r2
 8009d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	0151      	lsls	r1, r2, #5
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	440a      	add	r2, r1
 8009d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	791b      	ldrb	r3, [r3, #4]
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d003      	beq.n	8009d2c <USB_EPClearStall+0x4c>
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	791b      	ldrb	r3, [r3, #4]
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d138      	bne.n	8009d9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	0151      	lsls	r1, r2, #5
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	440a      	add	r2, r1
 8009d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	e027      	b.n	8009d9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	015a      	lsls	r2, r3, #5
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	4413      	add	r3, r2
 8009d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	0151      	lsls	r1, r2, #5
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	440a      	add	r2, r1
 8009d64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	791b      	ldrb	r3, [r3, #4]
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d003      	beq.n	8009d7e <USB_EPClearStall+0x9e>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	791b      	ldrb	r3, [r3, #4]
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d10f      	bne.n	8009d9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	015a      	lsls	r2, r3, #5
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4413      	add	r3, r2
 8009d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	0151      	lsls	r1, r2, #5
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	440a      	add	r2, r1
 8009d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	460b      	mov	r3, r1
 8009db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009dca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009dce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	78fb      	ldrb	r3, [r7, #3]
 8009dda:	011b      	lsls	r3, r3, #4
 8009ddc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009de0:	68f9      	ldr	r1, [r7, #12]
 8009de2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009de6:	4313      	orrs	r3, r2
 8009de8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e12:	f023 0303 	bic.w	r3, r3, #3
 8009e16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e26:	f023 0302 	bic.w	r3, r3, #2
 8009e2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e54:	f023 0303 	bic.w	r3, r3, #3
 8009e58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e68:	f043 0302 	orr.w	r3, r3, #2
 8009e6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	4013      	ands	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e94:	68fb      	ldr	r3, [r7, #12]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b085      	sub	sp, #20
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ebe:	69db      	ldr	r3, [r3, #28]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	0c1b      	lsrs	r3, r3, #16
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b085      	sub	sp, #20
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ef2:	69db      	ldr	r3, [r3, #28]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	b29b      	uxth	r3, r3
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b085      	sub	sp, #20
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	460b      	mov	r3, r1
 8009f14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f1a:	78fb      	ldrb	r3, [r7, #3]
 8009f1c:	015a      	lsls	r2, r3, #5
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	4413      	add	r3, r2
 8009f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	4013      	ands	r3, r2
 8009f36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f38:	68bb      	ldr	r3, [r7, #8]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b087      	sub	sp, #28
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	460b      	mov	r3, r1
 8009f50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f6a:	78fb      	ldrb	r3, [r7, #3]
 8009f6c:	f003 030f 	and.w	r3, r3, #15
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	fa22 f303 	lsr.w	r3, r2, r3
 8009f76:	01db      	lsls	r3, r3, #7
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009f80:	78fb      	ldrb	r3, [r7, #3]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	4013      	ands	r3, r2
 8009f92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f94:	68bb      	ldr	r3, [r7, #8]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	371c      	adds	r7, #28
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b083      	sub	sp, #12
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	f003 0301 	and.w	r3, r3, #1
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fbe:	b480      	push	{r7}
 8009fc0:	b085      	sub	sp, #20
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fd8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009fdc:	f023 0307 	bic.w	r3, r3, #7
 8009fe0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ff4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	333c      	adds	r3, #60	@ 0x3c
 800a016:	3304      	adds	r3, #4
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	4a1c      	ldr	r2, [pc, #112]	@ (800a090 <USB_EP0_OutStart+0x8c>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d90a      	bls.n	800a03a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a034:	d101      	bne.n	800a03a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	e024      	b.n	800a084 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a040:	461a      	mov	r2, r3
 800a042:	2300      	movs	r3, #0
 800a044:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a054:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a058:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a068:	f043 0318 	orr.w	r3, r3, #24
 800a06c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a07c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a080:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	4f54300a 	.word	0x4f54300a

0800a094 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a09c:	2300      	movs	r3, #0
 800a09e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0ac:	d901      	bls.n	800a0b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e01b      	b.n	800a0ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	daf2      	bge.n	800a0a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	f043 0201 	orr.w	r2, r3, #1
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0d6:	d901      	bls.n	800a0dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	e006      	b.n	800a0ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	f003 0301 	and.w	r3, r3, #1
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d0f0      	beq.n	800a0ca <USB_CoreReset+0x36>

  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
	...

0800a0f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a104:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a108:	f005 fc28 	bl	800f95c <USBD_static_malloc>
 800a10c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d109      	bne.n	800a128 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	32b0      	adds	r2, #176	@ 0xb0
 800a11e:	2100      	movs	r1, #0
 800a120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a124:	2302      	movs	r3, #2
 800a126:	e0d4      	b.n	800a2d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a128:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a12c:	2100      	movs	r1, #0
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f006 f98d 	bl	801044e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	32b0      	adds	r2, #176	@ 0xb0
 800a13e:	68f9      	ldr	r1, [r7, #12]
 800a140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	32b0      	adds	r2, #176	@ 0xb0
 800a14e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	7c1b      	ldrb	r3, [r3, #16]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d138      	bne.n	800a1d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a160:	4b5e      	ldr	r3, [pc, #376]	@ (800a2dc <USBD_CDC_Init+0x1e4>)
 800a162:	7819      	ldrb	r1, [r3, #0]
 800a164:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a168:	2202      	movs	r2, #2
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f005 f9e2 	bl	800f534 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a170:	4b5a      	ldr	r3, [pc, #360]	@ (800a2dc <USBD_CDC_Init+0x1e4>)
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	f003 020f 	and.w	r2, r3, #15
 800a178:	6879      	ldr	r1, [r7, #4]
 800a17a:	4613      	mov	r3, r2
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4413      	add	r3, r2
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	440b      	add	r3, r1
 800a184:	3324      	adds	r3, #36	@ 0x24
 800a186:	2201      	movs	r2, #1
 800a188:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a18a:	4b55      	ldr	r3, [pc, #340]	@ (800a2e0 <USBD_CDC_Init+0x1e8>)
 800a18c:	7819      	ldrb	r1, [r3, #0]
 800a18e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a192:	2202      	movs	r2, #2
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f005 f9cd 	bl	800f534 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a19a:	4b51      	ldr	r3, [pc, #324]	@ (800a2e0 <USBD_CDC_Init+0x1e8>)
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	f003 020f 	and.w	r2, r3, #15
 800a1a2:	6879      	ldr	r1, [r7, #4]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	440b      	add	r3, r1
 800a1ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a1b6:	4b4b      	ldr	r3, [pc, #300]	@ (800a2e4 <USBD_CDC_Init+0x1ec>)
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	f003 020f 	and.w	r2, r3, #15
 800a1be:	6879      	ldr	r1, [r7, #4]
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	440b      	add	r3, r1
 800a1ca:	3326      	adds	r3, #38	@ 0x26
 800a1cc:	2210      	movs	r2, #16
 800a1ce:	801a      	strh	r2, [r3, #0]
 800a1d0:	e035      	b.n	800a23e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a1d2:	4b42      	ldr	r3, [pc, #264]	@ (800a2dc <USBD_CDC_Init+0x1e4>)
 800a1d4:	7819      	ldrb	r1, [r3, #0]
 800a1d6:	2340      	movs	r3, #64	@ 0x40
 800a1d8:	2202      	movs	r2, #2
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f005 f9aa 	bl	800f534 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a1e0:	4b3e      	ldr	r3, [pc, #248]	@ (800a2dc <USBD_CDC_Init+0x1e4>)
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	f003 020f 	and.w	r2, r3, #15
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	3324      	adds	r3, #36	@ 0x24
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a1fa:	4b39      	ldr	r3, [pc, #228]	@ (800a2e0 <USBD_CDC_Init+0x1e8>)
 800a1fc:	7819      	ldrb	r1, [r3, #0]
 800a1fe:	2340      	movs	r3, #64	@ 0x40
 800a200:	2202      	movs	r2, #2
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f005 f996 	bl	800f534 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a208:	4b35      	ldr	r3, [pc, #212]	@ (800a2e0 <USBD_CDC_Init+0x1e8>)
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	f003 020f 	and.w	r2, r3, #15
 800a210:	6879      	ldr	r1, [r7, #4]
 800a212:	4613      	mov	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	440b      	add	r3, r1
 800a21c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a220:	2201      	movs	r2, #1
 800a222:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a224:	4b2f      	ldr	r3, [pc, #188]	@ (800a2e4 <USBD_CDC_Init+0x1ec>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	f003 020f 	and.w	r2, r3, #15
 800a22c:	6879      	ldr	r1, [r7, #4]
 800a22e:	4613      	mov	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4413      	add	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	440b      	add	r3, r1
 800a238:	3326      	adds	r3, #38	@ 0x26
 800a23a:	2210      	movs	r2, #16
 800a23c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a23e:	4b29      	ldr	r3, [pc, #164]	@ (800a2e4 <USBD_CDC_Init+0x1ec>)
 800a240:	7819      	ldrb	r1, [r3, #0]
 800a242:	2308      	movs	r3, #8
 800a244:	2203      	movs	r2, #3
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f005 f974 	bl	800f534 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a24c:	4b25      	ldr	r3, [pc, #148]	@ (800a2e4 <USBD_CDC_Init+0x1ec>)
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	f003 020f 	and.w	r2, r3, #15
 800a254:	6879      	ldr	r1, [r7, #4]
 800a256:	4613      	mov	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4413      	add	r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	440b      	add	r3, r1
 800a260:	3324      	adds	r3, #36	@ 0x24
 800a262:	2201      	movs	r2, #1
 800a264:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	33b0      	adds	r3, #176	@ 0xb0
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d101      	bne.n	800a2a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a29c:	2302      	movs	r3, #2
 800a29e:	e018      	b.n	800a2d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	7c1b      	ldrb	r3, [r3, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10a      	bne.n	800a2be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2a8:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e0 <USBD_CDC_Init+0x1e8>)
 800a2aa:	7819      	ldrb	r1, [r3, #0]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a2b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f005 fab6 	bl	800f828 <USBD_LL_PrepareReceive>
 800a2bc:	e008      	b.n	800a2d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2be:	4b08      	ldr	r3, [pc, #32]	@ (800a2e0 <USBD_CDC_Init+0x1e8>)
 800a2c0:	7819      	ldrb	r1, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a2c8:	2340      	movs	r3, #64	@ 0x40
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f005 faac 	bl	800f828 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	20000093 	.word	0x20000093
 800a2e0:	20000094 	.word	0x20000094
 800a2e4:	20000095 	.word	0x20000095

0800a2e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a2f4:	4b3a      	ldr	r3, [pc, #232]	@ (800a3e0 <USBD_CDC_DeInit+0xf8>)
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f005 f958 	bl	800f5b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a300:	4b37      	ldr	r3, [pc, #220]	@ (800a3e0 <USBD_CDC_DeInit+0xf8>)
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	f003 020f 	and.w	r2, r3, #15
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	4613      	mov	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	4413      	add	r3, r2
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	440b      	add	r3, r1
 800a314:	3324      	adds	r3, #36	@ 0x24
 800a316:	2200      	movs	r2, #0
 800a318:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a31a:	4b32      	ldr	r3, [pc, #200]	@ (800a3e4 <USBD_CDC_DeInit+0xfc>)
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f005 f945 	bl	800f5b0 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a326:	4b2f      	ldr	r3, [pc, #188]	@ (800a3e4 <USBD_CDC_DeInit+0xfc>)
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	f003 020f 	and.w	r2, r3, #15
 800a32e:	6879      	ldr	r1, [r7, #4]
 800a330:	4613      	mov	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	440b      	add	r3, r1
 800a33a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a33e:	2200      	movs	r2, #0
 800a340:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a342:	4b29      	ldr	r3, [pc, #164]	@ (800a3e8 <USBD_CDC_DeInit+0x100>)
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	4619      	mov	r1, r3
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f005 f931 	bl	800f5b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a34e:	4b26      	ldr	r3, [pc, #152]	@ (800a3e8 <USBD_CDC_DeInit+0x100>)
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	f003 020f 	and.w	r2, r3, #15
 800a356:	6879      	ldr	r1, [r7, #4]
 800a358:	4613      	mov	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	440b      	add	r3, r1
 800a362:	3324      	adds	r3, #36	@ 0x24
 800a364:	2200      	movs	r2, #0
 800a366:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a368:	4b1f      	ldr	r3, [pc, #124]	@ (800a3e8 <USBD_CDC_DeInit+0x100>)
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	f003 020f 	and.w	r2, r3, #15
 800a370:	6879      	ldr	r1, [r7, #4]
 800a372:	4613      	mov	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	4413      	add	r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	440b      	add	r3, r1
 800a37c:	3326      	adds	r3, #38	@ 0x26
 800a37e:	2200      	movs	r2, #0
 800a380:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	32b0      	adds	r2, #176	@ 0xb0
 800a38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d01f      	beq.n	800a3d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	33b0      	adds	r3, #176	@ 0xb0
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	32b0      	adds	r2, #176	@ 0xb0
 800a3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f005 fade 	bl	800f978 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	32b0      	adds	r2, #176	@ 0xb0
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20000093 	.word	0x20000093
 800a3e4:	20000094 	.word	0x20000094
 800a3e8:	20000095 	.word	0x20000095

0800a3ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	32b0      	adds	r2, #176	@ 0xb0
 800a400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a404:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a406:	2300      	movs	r3, #0
 800a408:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a418:	2303      	movs	r3, #3
 800a41a:	e0bf      	b.n	800a59c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a424:	2b00      	cmp	r3, #0
 800a426:	d050      	beq.n	800a4ca <USBD_CDC_Setup+0xde>
 800a428:	2b20      	cmp	r3, #32
 800a42a:	f040 80af 	bne.w	800a58c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	88db      	ldrh	r3, [r3, #6]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d03a      	beq.n	800a4ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	b25b      	sxtb	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	da1b      	bge.n	800a478 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	33b0      	adds	r3, #176	@ 0xb0
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a456:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a458:	683a      	ldr	r2, [r7, #0]
 800a45a:	88d2      	ldrh	r2, [r2, #6]
 800a45c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	88db      	ldrh	r3, [r3, #6]
 800a462:	2b07      	cmp	r3, #7
 800a464:	bf28      	it	cs
 800a466:	2307      	movcs	r3, #7
 800a468:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	89fa      	ldrh	r2, [r7, #14]
 800a46e:	4619      	mov	r1, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f001 fdbd 	bl	800bff0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a476:	e090      	b.n	800a59a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	785a      	ldrb	r2, [r3, #1]
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	88db      	ldrh	r3, [r3, #6]
 800a486:	2b3f      	cmp	r3, #63	@ 0x3f
 800a488:	d803      	bhi.n	800a492 <USBD_CDC_Setup+0xa6>
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	88db      	ldrh	r3, [r3, #6]
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	e000      	b.n	800a494 <USBD_CDC_Setup+0xa8>
 800a492:	2240      	movs	r2, #64	@ 0x40
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a49a:	6939      	ldr	r1, [r7, #16]
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f001 fdcf 	bl	800c048 <USBD_CtlPrepareRx>
      break;
 800a4aa:	e076      	b.n	800a59a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	33b0      	adds	r3, #176	@ 0xb0
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4413      	add	r3, r2
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	7850      	ldrb	r0, [r2, #1]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	6839      	ldr	r1, [r7, #0]
 800a4c6:	4798      	blx	r3
      break;
 800a4c8:	e067      	b.n	800a59a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	785b      	ldrb	r3, [r3, #1]
 800a4ce:	2b0b      	cmp	r3, #11
 800a4d0:	d851      	bhi.n	800a576 <USBD_CDC_Setup+0x18a>
 800a4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d8 <USBD_CDC_Setup+0xec>)
 800a4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d8:	0800a509 	.word	0x0800a509
 800a4dc:	0800a585 	.word	0x0800a585
 800a4e0:	0800a577 	.word	0x0800a577
 800a4e4:	0800a577 	.word	0x0800a577
 800a4e8:	0800a577 	.word	0x0800a577
 800a4ec:	0800a577 	.word	0x0800a577
 800a4f0:	0800a577 	.word	0x0800a577
 800a4f4:	0800a577 	.word	0x0800a577
 800a4f8:	0800a577 	.word	0x0800a577
 800a4fc:	0800a577 	.word	0x0800a577
 800a500:	0800a533 	.word	0x0800a533
 800a504:	0800a55d 	.word	0x0800a55d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b03      	cmp	r3, #3
 800a512:	d107      	bne.n	800a524 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a514:	f107 030a 	add.w	r3, r7, #10
 800a518:	2202      	movs	r2, #2
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f001 fd67 	bl	800bff0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a522:	e032      	b.n	800a58a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f001 fce5 	bl	800bef6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a52c:	2303      	movs	r3, #3
 800a52e:	75fb      	strb	r3, [r7, #23]
          break;
 800a530:	e02b      	b.n	800a58a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d107      	bne.n	800a54e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a53e:	f107 030d 	add.w	r3, r7, #13
 800a542:	2201      	movs	r2, #1
 800a544:	4619      	mov	r1, r3
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f001 fd52 	bl	800bff0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a54c:	e01d      	b.n	800a58a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f001 fcd0 	bl	800bef6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a556:	2303      	movs	r3, #3
 800a558:	75fb      	strb	r3, [r7, #23]
          break;
 800a55a:	e016      	b.n	800a58a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b03      	cmp	r3, #3
 800a566:	d00f      	beq.n	800a588 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a568:	6839      	ldr	r1, [r7, #0]
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f001 fcc3 	bl	800bef6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a570:	2303      	movs	r3, #3
 800a572:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a574:	e008      	b.n	800a588 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a576:	6839      	ldr	r1, [r7, #0]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f001 fcbc 	bl	800bef6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a57e:	2303      	movs	r3, #3
 800a580:	75fb      	strb	r3, [r7, #23]
          break;
 800a582:	e002      	b.n	800a58a <USBD_CDC_Setup+0x19e>
          break;
 800a584:	bf00      	nop
 800a586:	e008      	b.n	800a59a <USBD_CDC_Setup+0x1ae>
          break;
 800a588:	bf00      	nop
      }
      break;
 800a58a:	e006      	b.n	800a59a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f001 fcb1 	bl	800bef6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a594:	2303      	movs	r3, #3
 800a596:	75fb      	strb	r3, [r7, #23]
      break;
 800a598:	bf00      	nop
  }

  return (uint8_t)ret;
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3718      	adds	r7, #24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	32b0      	adds	r2, #176	@ 0xb0
 800a5c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e065      	b.n	800a69a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	32b0      	adds	r2, #176	@ 0xb0
 800a5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a5de:	78fb      	ldrb	r3, [r7, #3]
 800a5e0:	f003 020f 	and.w	r2, r3, #15
 800a5e4:	6879      	ldr	r1, [r7, #4]
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	4413      	add	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	440b      	add	r3, r1
 800a5f0:	3318      	adds	r3, #24
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d02f      	beq.n	800a658 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a5f8:	78fb      	ldrb	r3, [r7, #3]
 800a5fa:	f003 020f 	and.w	r2, r3, #15
 800a5fe:	6879      	ldr	r1, [r7, #4]
 800a600:	4613      	mov	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	440b      	add	r3, r1
 800a60a:	3318      	adds	r3, #24
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	78fb      	ldrb	r3, [r7, #3]
 800a610:	f003 010f 	and.w	r1, r3, #15
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	460b      	mov	r3, r1
 800a618:	00db      	lsls	r3, r3, #3
 800a61a:	440b      	add	r3, r1
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4403      	add	r3, r0
 800a620:	331c      	adds	r3, #28
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	fbb2 f1f3 	udiv	r1, r2, r3
 800a628:	fb01 f303 	mul.w	r3, r1, r3
 800a62c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d112      	bne.n	800a658 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a632:	78fb      	ldrb	r3, [r7, #3]
 800a634:	f003 020f 	and.w	r2, r3, #15
 800a638:	6879      	ldr	r1, [r7, #4]
 800a63a:	4613      	mov	r3, r2
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4413      	add	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	440b      	add	r3, r1
 800a644:	3318      	adds	r3, #24
 800a646:	2200      	movs	r2, #0
 800a648:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a64a:	78f9      	ldrb	r1, [r7, #3]
 800a64c:	2300      	movs	r3, #0
 800a64e:	2200      	movs	r2, #0
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f005 f8b1 	bl	800f7b8 <USBD_LL_Transmit>
 800a656:	e01f      	b.n	800a698 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	33b0      	adds	r3, #176	@ 0xb0
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d010      	beq.n	800a698 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	33b0      	adds	r3, #176	@ 0xb0
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a694:	78fa      	ldrb	r2, [r7, #3]
 800a696:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b084      	sub	sp, #16
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	32b0      	adds	r2, #176	@ 0xb0
 800a6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	32b0      	adds	r2, #176	@ 0xb0
 800a6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	e01a      	b.n	800a70a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a6d4:	78fb      	ldrb	r3, [r7, #3]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f005 f8dd 	bl	800f898 <USBD_LL_GetRxDataSize>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	33b0      	adds	r3, #176	@ 0xb0
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a704:	4611      	mov	r1, r2
 800a706:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b084      	sub	sp, #16
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	32b0      	adds	r2, #176	@ 0xb0
 800a724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a728:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d101      	bne.n	800a734 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a730:	2303      	movs	r3, #3
 800a732:	e024      	b.n	800a77e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	33b0      	adds	r3, #176	@ 0xb0
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d019      	beq.n	800a77c <USBD_CDC_EP0_RxReady+0x6a>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a74e:	2bff      	cmp	r3, #255	@ 0xff
 800a750:	d014      	beq.n	800a77c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	33b0      	adds	r3, #176	@ 0xb0
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	4413      	add	r3, r2
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a76a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a772:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	22ff      	movs	r2, #255	@ 0xff
 800a778:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
	...

0800a788 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b086      	sub	sp, #24
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a790:	2182      	movs	r1, #130	@ 0x82
 800a792:	4818      	ldr	r0, [pc, #96]	@ (800a7f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a794:	f000 fd4f 	bl	800b236 <USBD_GetEpDesc>
 800a798:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a79a:	2101      	movs	r1, #1
 800a79c:	4815      	ldr	r0, [pc, #84]	@ (800a7f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a79e:	f000 fd4a 	bl	800b236 <USBD_GetEpDesc>
 800a7a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a7a4:	2181      	movs	r1, #129	@ 0x81
 800a7a6:	4813      	ldr	r0, [pc, #76]	@ (800a7f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a7a8:	f000 fd45 	bl	800b236 <USBD_GetEpDesc>
 800a7ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d002      	beq.n	800a7ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	2210      	movs	r2, #16
 800a7b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d006      	beq.n	800a7ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7c8:	711a      	strb	r2, [r3, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d006      	beq.n	800a7e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7dc:	711a      	strb	r2, [r3, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2243      	movs	r2, #67	@ 0x43
 800a7e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a7e8:	4b02      	ldr	r3, [pc, #8]	@ (800a7f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3718      	adds	r7, #24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000050 	.word	0x20000050

0800a7f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a800:	2182      	movs	r1, #130	@ 0x82
 800a802:	4818      	ldr	r0, [pc, #96]	@ (800a864 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a804:	f000 fd17 	bl	800b236 <USBD_GetEpDesc>
 800a808:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a80a:	2101      	movs	r1, #1
 800a80c:	4815      	ldr	r0, [pc, #84]	@ (800a864 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a80e:	f000 fd12 	bl	800b236 <USBD_GetEpDesc>
 800a812:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a814:	2181      	movs	r1, #129	@ 0x81
 800a816:	4813      	ldr	r0, [pc, #76]	@ (800a864 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a818:	f000 fd0d 	bl	800b236 <USBD_GetEpDesc>
 800a81c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	2210      	movs	r2, #16
 800a828:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d006      	beq.n	800a83e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	2200      	movs	r2, #0
 800a834:	711a      	strb	r2, [r3, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	f042 0202 	orr.w	r2, r2, #2
 800a83c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d006      	beq.n	800a852 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	711a      	strb	r2, [r3, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f042 0202 	orr.w	r2, r2, #2
 800a850:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2243      	movs	r2, #67	@ 0x43
 800a856:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a858:	4b02      	ldr	r3, [pc, #8]	@ (800a864 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3718      	adds	r7, #24
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20000050 	.word	0x20000050

0800a868 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b086      	sub	sp, #24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a870:	2182      	movs	r1, #130	@ 0x82
 800a872:	4818      	ldr	r0, [pc, #96]	@ (800a8d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a874:	f000 fcdf 	bl	800b236 <USBD_GetEpDesc>
 800a878:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a87a:	2101      	movs	r1, #1
 800a87c:	4815      	ldr	r0, [pc, #84]	@ (800a8d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a87e:	f000 fcda 	bl	800b236 <USBD_GetEpDesc>
 800a882:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a884:	2181      	movs	r1, #129	@ 0x81
 800a886:	4813      	ldr	r0, [pc, #76]	@ (800a8d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a888:	f000 fcd5 	bl	800b236 <USBD_GetEpDesc>
 800a88c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	2210      	movs	r2, #16
 800a898:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d006      	beq.n	800a8ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8a8:	711a      	strb	r2, [r3, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d006      	beq.n	800a8c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8bc:	711a      	strb	r2, [r3, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2243      	movs	r2, #67	@ 0x43
 800a8c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a8c8:	4b02      	ldr	r3, [pc, #8]	@ (800a8d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	20000050 	.word	0x20000050

0800a8d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	220a      	movs	r2, #10
 800a8e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a8e6:	4b03      	ldr	r3, [pc, #12]	@ (800a8f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	2000000c 	.word	0x2000000c

0800a8f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d101      	bne.n	800a90c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a908:	2303      	movs	r3, #3
 800a90a:	e009      	b.n	800a920 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	33b0      	adds	r3, #176	@ 0xb0
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b087      	sub	sp, #28
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	32b0      	adds	r2, #176	@ 0xb0
 800a942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a946:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a94e:	2303      	movs	r3, #3
 800a950:	e008      	b.n	800a964 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	371c      	adds	r7, #28
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	32b0      	adds	r2, #176	@ 0xb0
 800a984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a988:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d101      	bne.n	800a994 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a990:	2303      	movs	r3, #3
 800a992:	e004      	b.n	800a99e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
	...

0800a9ac <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	32b0      	adds	r2, #176	@ 0xb0
 800a9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	e025      	b.n	800aa1e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d11f      	bne.n	800aa1c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a9e4:	4b10      	ldr	r3, [pc, #64]	@ (800aa28 <USBD_CDC_TransmitPacket+0x7c>)
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	f003 020f 	and.w	r2, r3, #15
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4403      	add	r3, r0
 800a9fe:	3318      	adds	r3, #24
 800aa00:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800aa02:	4b09      	ldr	r3, [pc, #36]	@ (800aa28 <USBD_CDC_TransmitPacket+0x7c>)
 800aa04:	7819      	ldrb	r1, [r3, #0]
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f004 fed0 	bl	800f7b8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	20000093 	.word	0x20000093

0800aa2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	32b0      	adds	r2, #176	@ 0xb0
 800aa3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa42:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	32b0      	adds	r2, #176	@ 0xb0
 800aa4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d101      	bne.n	800aa5a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aa56:	2303      	movs	r3, #3
 800aa58:	e018      	b.n	800aa8c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	7c1b      	ldrb	r3, [r3, #16]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10a      	bne.n	800aa78 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa62:	4b0c      	ldr	r3, [pc, #48]	@ (800aa94 <USBD_CDC_ReceivePacket+0x68>)
 800aa64:	7819      	ldrb	r1, [r3, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f004 fed9 	bl	800f828 <USBD_LL_PrepareReceive>
 800aa76:	e008      	b.n	800aa8a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa78:	4b06      	ldr	r3, [pc, #24]	@ (800aa94 <USBD_CDC_ReceivePacket+0x68>)
 800aa7a:	7819      	ldrb	r1, [r3, #0]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa82:	2340      	movs	r3, #64	@ 0x40
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f004 fecf 	bl	800f828 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	20000094 	.word	0x20000094

0800aa98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d101      	bne.n	800aab0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aaac:	2303      	movs	r3, #3
 800aaae:	e01f      	b.n	800aaf0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2201      	movs	r2, #1
 800aada:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	79fa      	ldrb	r2, [r7, #7]
 800aae2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f004 fca7 	bl	800f438 <USBD_LL_Init>
 800aaea:	4603      	mov	r3, r0
 800aaec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aaee:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3718      	adds	r7, #24
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab02:	2300      	movs	r3, #0
 800ab04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d101      	bne.n	800ab10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	e025      	b.n	800ab5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	32ae      	adds	r2, #174	@ 0xae
 800ab22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00f      	beq.n	800ab4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	32ae      	adds	r2, #174	@ 0xae
 800ab36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab3c:	f107 020e 	add.w	r2, r7, #14
 800ab40:	4610      	mov	r0, r2
 800ab42:	4798      	blx	r3
 800ab44:	4602      	mov	r2, r0
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f004 fcaf 	bl	800f4d0 <USBD_LL_Start>
 800ab72:	4603      	mov	r3, r0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b084      	sub	sp, #16
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d009      	beq.n	800abc0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	78fa      	ldrb	r2, [r7, #3]
 800abb6:	4611      	mov	r1, r2
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	4798      	blx	r3
 800abbc:	4603      	mov	r3, r0
 800abbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b084      	sub	sp, #16
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	460b      	mov	r3, r1
 800abd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	78fa      	ldrb	r2, [r7, #3]
 800abe4:	4611      	mov	r1, r2
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	4798      	blx	r3
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800abf0:	2303      	movs	r3, #3
 800abf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3710      	adds	r7, #16
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b084      	sub	sp, #16
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f001 f936 	bl	800be82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ac24:	461a      	mov	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac32:	f003 031f 	and.w	r3, r3, #31
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d01a      	beq.n	800ac70 <USBD_LL_SetupStage+0x72>
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d822      	bhi.n	800ac84 <USBD_LL_SetupStage+0x86>
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d002      	beq.n	800ac48 <USBD_LL_SetupStage+0x4a>
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d00a      	beq.n	800ac5c <USBD_LL_SetupStage+0x5e>
 800ac46:	e01d      	b.n	800ac84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fb63 	bl	800b31c <USBD_StdDevReq>
 800ac56:	4603      	mov	r3, r0
 800ac58:	73fb      	strb	r3, [r7, #15]
      break;
 800ac5a:	e020      	b.n	800ac9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 fbcb 	bl	800b400 <USBD_StdItfReq>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac6e:	e016      	b.n	800ac9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac76:	4619      	mov	r1, r3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fc2d 	bl	800b4d8 <USBD_StdEPReq>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	73fb      	strb	r3, [r7, #15]
      break;
 800ac82:	e00c      	b.n	800ac9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	4619      	mov	r1, r3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f004 fcc2 	bl	800f61c <USBD_LL_StallEP>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac9c:	bf00      	nop
  }

  return ret;
 800ac9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	460b      	mov	r3, r1
 800acb2:	607a      	str	r2, [r7, #4]
 800acb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800acba:	7afb      	ldrb	r3, [r7, #11]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d16e      	bne.n	800ad9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800acc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800acce:	2b03      	cmp	r3, #3
 800acd0:	f040 8098 	bne.w	800ae04 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	689a      	ldr	r2, [r3, #8]
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d913      	bls.n	800ad08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	1ad2      	subs	r2, r2, r3
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	68da      	ldr	r2, [r3, #12]
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	4293      	cmp	r3, r2
 800acf8:	bf28      	it	cs
 800acfa:	4613      	movcs	r3, r2
 800acfc:	461a      	mov	r2, r3
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f001 f9be 	bl	800c082 <USBD_CtlContinueRx>
 800ad06:	e07d      	b.n	800ae04 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ad0e:	f003 031f 	and.w	r3, r3, #31
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d014      	beq.n	800ad40 <USBD_LL_DataOutStage+0x98>
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d81d      	bhi.n	800ad56 <USBD_LL_DataOutStage+0xae>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <USBD_LL_DataOutStage+0x7c>
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d003      	beq.n	800ad2a <USBD_LL_DataOutStage+0x82>
 800ad22:	e018      	b.n	800ad56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ad24:	2300      	movs	r3, #0
 800ad26:	75bb      	strb	r3, [r7, #22]
            break;
 800ad28:	e018      	b.n	800ad5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	4619      	mov	r1, r3
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f000 fa64 	bl	800b202 <USBD_CoreFindIF>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	75bb      	strb	r3, [r7, #22]
            break;
 800ad3e:	e00d      	b.n	800ad5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	4619      	mov	r1, r3
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 fa66 	bl	800b21c <USBD_CoreFindEP>
 800ad50:	4603      	mov	r3, r0
 800ad52:	75bb      	strb	r3, [r7, #22]
            break;
 800ad54:	e002      	b.n	800ad5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ad56:	2300      	movs	r3, #0
 800ad58:	75bb      	strb	r3, [r7, #22]
            break;
 800ad5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ad5c:	7dbb      	ldrb	r3, [r7, #22]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d119      	bne.n	800ad96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	d113      	bne.n	800ad96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ad6e:	7dba      	ldrb	r2, [r7, #22]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	32ae      	adds	r2, #174	@ 0xae
 800ad74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00b      	beq.n	800ad96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ad7e:	7dba      	ldrb	r2, [r7, #22]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ad86:	7dba      	ldrb	r2, [r7, #22]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	32ae      	adds	r2, #174	@ 0xae
 800ad8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f001 f984 	bl	800c0a4 <USBD_CtlSendStatus>
 800ad9c:	e032      	b.n	800ae04 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ad9e:	7afb      	ldrb	r3, [r7, #11]
 800ada0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	4619      	mov	r1, r3
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 fa37 	bl	800b21c <USBD_CoreFindEP>
 800adae:	4603      	mov	r3, r0
 800adb0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adb2:	7dbb      	ldrb	r3, [r7, #22]
 800adb4:	2bff      	cmp	r3, #255	@ 0xff
 800adb6:	d025      	beq.n	800ae04 <USBD_LL_DataOutStage+0x15c>
 800adb8:	7dbb      	ldrb	r3, [r7, #22]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d122      	bne.n	800ae04 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d117      	bne.n	800adfa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800adca:	7dba      	ldrb	r2, [r7, #22]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	32ae      	adds	r2, #174	@ 0xae
 800add0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00f      	beq.n	800adfa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800adda:	7dba      	ldrb	r2, [r7, #22]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ade2:	7dba      	ldrb	r2, [r7, #22]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	32ae      	adds	r2, #174	@ 0xae
 800ade8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	7afa      	ldrb	r2, [r7, #11]
 800adf0:	4611      	mov	r1, r2
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	4798      	blx	r3
 800adf6:	4603      	mov	r3, r0
 800adf8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ae00:	7dfb      	ldrb	r3, [r7, #23]
 800ae02:	e000      	b.n	800ae06 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3718      	adds	r7, #24
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b086      	sub	sp, #24
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	460b      	mov	r3, r1
 800ae18:	607a      	str	r2, [r7, #4]
 800ae1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ae1c:	7afb      	ldrb	r3, [r7, #11]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d16f      	bne.n	800af02 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3314      	adds	r3, #20
 800ae26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d15a      	bne.n	800aee8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	689a      	ldr	r2, [r3, #8]
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d914      	bls.n	800ae68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	689a      	ldr	r2, [r3, #8]
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	1ad2      	subs	r2, r2, r3
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	461a      	mov	r2, r3
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f001 f8e6 	bl	800c026 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	2100      	movs	r1, #0
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f004 fce1 	bl	800f828 <USBD_LL_PrepareReceive>
 800ae66:	e03f      	b.n	800aee8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	68da      	ldr	r2, [r3, #12]
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d11c      	bne.n	800aeae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d316      	bcc.n	800aeae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	685a      	ldr	r2, [r3, #4]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d20f      	bcs.n	800aeae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae8e:	2200      	movs	r2, #0
 800ae90:	2100      	movs	r1, #0
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f001 f8c7 	bl	800c026 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aea0:	2300      	movs	r3, #0
 800aea2:	2200      	movs	r2, #0
 800aea4:	2100      	movs	r1, #0
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f004 fcbe 	bl	800f828 <USBD_LL_PrepareReceive>
 800aeac:	e01c      	b.n	800aee8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d10f      	bne.n	800aeda <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d009      	beq.n	800aeda <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeda:	2180      	movs	r1, #128	@ 0x80
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f004 fb9d 	bl	800f61c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f001 f8f1 	bl	800c0ca <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d03a      	beq.n	800af68 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f7ff fe42 	bl	800ab7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800af00:	e032      	b.n	800af68 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800af02:	7afb      	ldrb	r3, [r7, #11]
 800af04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	4619      	mov	r1, r3
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f000 f985 	bl	800b21c <USBD_CoreFindEP>
 800af12:	4603      	mov	r3, r0
 800af14:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	2bff      	cmp	r3, #255	@ 0xff
 800af1a:	d025      	beq.n	800af68 <USBD_LL_DataInStage+0x15a>
 800af1c:	7dfb      	ldrb	r3, [r7, #23]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d122      	bne.n	800af68 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	d11c      	bne.n	800af68 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800af2e:	7dfa      	ldrb	r2, [r7, #23]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	32ae      	adds	r2, #174	@ 0xae
 800af34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d014      	beq.n	800af68 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800af3e:	7dfa      	ldrb	r2, [r7, #23]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800af46:	7dfa      	ldrb	r2, [r7, #23]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	32ae      	adds	r2, #174	@ 0xae
 800af4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	7afa      	ldrb	r2, [r7, #11]
 800af54:	4611      	mov	r1, r2
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	4798      	blx	r3
 800af5a:	4603      	mov	r3, r0
 800af5c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800af5e:	7dbb      	ldrb	r3, [r7, #22]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d001      	beq.n	800af68 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800af64:	7dbb      	ldrb	r3, [r7, #22]
 800af66:	e000      	b.n	800af6a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d014      	beq.n	800afd8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00e      	beq.n	800afd8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	6852      	ldr	r2, [r2, #4]
 800afc6:	b2d2      	uxtb	r2, r2
 800afc8:	4611      	mov	r1, r2
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	4798      	blx	r3
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d001      	beq.n	800afd8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800afd4:	2303      	movs	r3, #3
 800afd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afd8:	2340      	movs	r3, #64	@ 0x40
 800afda:	2200      	movs	r2, #0
 800afdc:	2100      	movs	r1, #0
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f004 faa8 	bl	800f534 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2240      	movs	r2, #64	@ 0x40
 800aff0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aff4:	2340      	movs	r3, #64	@ 0x40
 800aff6:	2200      	movs	r2, #0
 800aff8:	2180      	movs	r1, #128	@ 0x80
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f004 fa9a 	bl	800f534 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2240      	movs	r2, #64	@ 0x40
 800b00a:	621a      	str	r2, [r3, #32]

  return ret;
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b016:	b480      	push	{r7}
 800b018:	b083      	sub	sp, #12
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	460b      	mov	r3, r1
 800b020:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	78fa      	ldrb	r2, [r7, #3]
 800b026:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	370c      	adds	r7, #12
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr

0800b036 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b036:	b480      	push	{r7}
 800b038:	b083      	sub	sp, #12
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b04      	cmp	r3, #4
 800b048:	d006      	beq.n	800b058 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b050:	b2da      	uxtb	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2204      	movs	r2, #4
 800b05c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr

0800b06e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b06e:	b480      	push	{r7}
 800b070:	b083      	sub	sp, #12
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d106      	bne.n	800b090 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	370c      	adds	r7, #12
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr

0800b09e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b082      	sub	sp, #8
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	d110      	bne.n	800b0d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00b      	beq.n	800b0d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c2:	69db      	ldr	r3, [r3, #28]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d005      	beq.n	800b0d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ce:	69db      	ldr	r3, [r3, #28]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b082      	sub	sp, #8
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	32ae      	adds	r2, #174	@ 0xae
 800b0f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e01c      	b.n	800b13a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b106:	b2db      	uxtb	r3, r3
 800b108:	2b03      	cmp	r3, #3
 800b10a:	d115      	bne.n	800b138 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	32ae      	adds	r2, #174	@ 0xae
 800b116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11a:	6a1b      	ldr	r3, [r3, #32]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00b      	beq.n	800b138 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	32ae      	adds	r2, #174	@ 0xae
 800b12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12e:	6a1b      	ldr	r3, [r3, #32]
 800b130:	78fa      	ldrb	r2, [r7, #3]
 800b132:	4611      	mov	r1, r2
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b082      	sub	sp, #8
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	460b      	mov	r3, r1
 800b14c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	32ae      	adds	r2, #174	@ 0xae
 800b158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d101      	bne.n	800b164 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b160:	2303      	movs	r3, #3
 800b162:	e01c      	b.n	800b19e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	2b03      	cmp	r3, #3
 800b16e:	d115      	bne.n	800b19c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	32ae      	adds	r2, #174	@ 0xae
 800b17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00b      	beq.n	800b19c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	32ae      	adds	r2, #174	@ 0xae
 800b18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b194:	78fa      	ldrb	r2, [r7, #3]
 800b196:	4611      	mov	r1, r2
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b083      	sub	sp, #12
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00e      	beq.n	800b1f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	6852      	ldr	r2, [r2, #4]
 800b1e6:	b2d2      	uxtb	r2, r2
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	4798      	blx	r3
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b202:	b480      	push	{r7}
 800b204:	b083      	sub	sp, #12
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	460b      	mov	r3, r1
 800b20c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b20e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b210:	4618      	mov	r0, r3
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	460b      	mov	r3, r1
 800b226:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b228:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b086      	sub	sp, #24
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	460b      	mov	r3, r1
 800b240:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	885b      	ldrh	r3, [r3, #2]
 800b252:	b29b      	uxth	r3, r3
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	7812      	ldrb	r2, [r2, #0]
 800b258:	4293      	cmp	r3, r2
 800b25a:	d91f      	bls.n	800b29c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b262:	e013      	b.n	800b28c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b264:	f107 030a 	add.w	r3, r7, #10
 800b268:	4619      	mov	r1, r3
 800b26a:	6978      	ldr	r0, [r7, #20]
 800b26c:	f000 f81b 	bl	800b2a6 <USBD_GetNextDesc>
 800b270:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	785b      	ldrb	r3, [r3, #1]
 800b276:	2b05      	cmp	r3, #5
 800b278:	d108      	bne.n	800b28c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	789b      	ldrb	r3, [r3, #2]
 800b282:	78fa      	ldrb	r2, [r7, #3]
 800b284:	429a      	cmp	r2, r3
 800b286:	d008      	beq.n	800b29a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b288:	2300      	movs	r3, #0
 800b28a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	885b      	ldrh	r3, [r3, #2]
 800b290:	b29a      	uxth	r2, r3
 800b292:	897b      	ldrh	r3, [r7, #10]
 800b294:	429a      	cmp	r2, r3
 800b296:	d8e5      	bhi.n	800b264 <USBD_GetEpDesc+0x2e>
 800b298:	e000      	b.n	800b29c <USBD_GetEpDesc+0x66>
          break;
 800b29a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b29c:	693b      	ldr	r3, [r7, #16]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3718      	adds	r7, #24
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b085      	sub	sp, #20
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	881b      	ldrh	r3, [r3, #0]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	7812      	ldrb	r2, [r2, #0]
 800b2bc:	4413      	add	r3, r2
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3714      	adds	r7, #20
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b087      	sub	sp, #28
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b2fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b300:	021b      	lsls	r3, r3, #8
 800b302:	b21a      	sxth	r2, r3
 800b304:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b308:	4313      	orrs	r3, r2
 800b30a:	b21b      	sxth	r3, r3
 800b30c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b30e:	89fb      	ldrh	r3, [r7, #14]
}
 800b310:	4618      	mov	r0, r3
 800b312:	371c      	adds	r7, #28
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b332:	2b40      	cmp	r3, #64	@ 0x40
 800b334:	d005      	beq.n	800b342 <USBD_StdDevReq+0x26>
 800b336:	2b40      	cmp	r3, #64	@ 0x40
 800b338:	d857      	bhi.n	800b3ea <USBD_StdDevReq+0xce>
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00f      	beq.n	800b35e <USBD_StdDevReq+0x42>
 800b33e:	2b20      	cmp	r3, #32
 800b340:	d153      	bne.n	800b3ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	32ae      	adds	r2, #174	@ 0xae
 800b34c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	4798      	blx	r3
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]
      break;
 800b35c:	e04a      	b.n	800b3f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	785b      	ldrb	r3, [r3, #1]
 800b362:	2b09      	cmp	r3, #9
 800b364:	d83b      	bhi.n	800b3de <USBD_StdDevReq+0xc2>
 800b366:	a201      	add	r2, pc, #4	@ (adr r2, 800b36c <USBD_StdDevReq+0x50>)
 800b368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36c:	0800b3c1 	.word	0x0800b3c1
 800b370:	0800b3d5 	.word	0x0800b3d5
 800b374:	0800b3df 	.word	0x0800b3df
 800b378:	0800b3cb 	.word	0x0800b3cb
 800b37c:	0800b3df 	.word	0x0800b3df
 800b380:	0800b39f 	.word	0x0800b39f
 800b384:	0800b395 	.word	0x0800b395
 800b388:	0800b3df 	.word	0x0800b3df
 800b38c:	0800b3b7 	.word	0x0800b3b7
 800b390:	0800b3a9 	.word	0x0800b3a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fa3c 	bl	800b814 <USBD_GetDescriptor>
          break;
 800b39c:	e024      	b.n	800b3e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b39e:	6839      	ldr	r1, [r7, #0]
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fbcb 	bl	800bb3c <USBD_SetAddress>
          break;
 800b3a6:	e01f      	b.n	800b3e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fc0a 	bl	800bbc4 <USBD_SetConfig>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	73fb      	strb	r3, [r7, #15]
          break;
 800b3b4:	e018      	b.n	800b3e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b3b6:	6839      	ldr	r1, [r7, #0]
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fcad 	bl	800bd18 <USBD_GetConfig>
          break;
 800b3be:	e013      	b.n	800b3e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b3c0:	6839      	ldr	r1, [r7, #0]
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fcde 	bl	800bd84 <USBD_GetStatus>
          break;
 800b3c8:	e00e      	b.n	800b3e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b3ca:	6839      	ldr	r1, [r7, #0]
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fd0d 	bl	800bdec <USBD_SetFeature>
          break;
 800b3d2:	e009      	b.n	800b3e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fd31 	bl	800be3e <USBD_ClrFeature>
          break;
 800b3dc:	e004      	b.n	800b3e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fd88 	bl	800bef6 <USBD_CtlError>
          break;
 800b3e6:	bf00      	nop
      }
      break;
 800b3e8:	e004      	b.n	800b3f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b3ea:	6839      	ldr	r1, [r7, #0]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fd82 	bl	800bef6 <USBD_CtlError>
      break;
 800b3f2:	bf00      	nop
  }

  return ret;
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop

0800b400 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b416:	2b40      	cmp	r3, #64	@ 0x40
 800b418:	d005      	beq.n	800b426 <USBD_StdItfReq+0x26>
 800b41a:	2b40      	cmp	r3, #64	@ 0x40
 800b41c:	d852      	bhi.n	800b4c4 <USBD_StdItfReq+0xc4>
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <USBD_StdItfReq+0x26>
 800b422:	2b20      	cmp	r3, #32
 800b424:	d14e      	bne.n	800b4c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	3b01      	subs	r3, #1
 800b430:	2b02      	cmp	r3, #2
 800b432:	d840      	bhi.n	800b4b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	889b      	ldrh	r3, [r3, #4]
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d836      	bhi.n	800b4ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	889b      	ldrh	r3, [r3, #4]
 800b442:	b2db      	uxtb	r3, r3
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7ff fedb 	bl	800b202 <USBD_CoreFindIF>
 800b44c:	4603      	mov	r3, r0
 800b44e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b450:	7bbb      	ldrb	r3, [r7, #14]
 800b452:	2bff      	cmp	r3, #255	@ 0xff
 800b454:	d01d      	beq.n	800b492 <USBD_StdItfReq+0x92>
 800b456:	7bbb      	ldrb	r3, [r7, #14]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d11a      	bne.n	800b492 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b45c:	7bba      	ldrb	r2, [r7, #14]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	32ae      	adds	r2, #174	@ 0xae
 800b462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00f      	beq.n	800b48c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b46c:	7bba      	ldrb	r2, [r7, #14]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b474:	7bba      	ldrb	r2, [r7, #14]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	32ae      	adds	r2, #174	@ 0xae
 800b47a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	6839      	ldr	r1, [r7, #0]
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	4798      	blx	r3
 800b486:	4603      	mov	r3, r0
 800b488:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b48a:	e004      	b.n	800b496 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b48c:	2303      	movs	r3, #3
 800b48e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b490:	e001      	b.n	800b496 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b492:	2303      	movs	r3, #3
 800b494:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	88db      	ldrh	r3, [r3, #6]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d110      	bne.n	800b4c0 <USBD_StdItfReq+0xc0>
 800b49e:	7bfb      	ldrb	r3, [r7, #15]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10d      	bne.n	800b4c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fdfd 	bl	800c0a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4aa:	e009      	b.n	800b4c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fd21 	bl	800bef6 <USBD_CtlError>
          break;
 800b4b4:	e004      	b.n	800b4c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fd1c 	bl	800bef6 <USBD_CtlError>
          break;
 800b4be:	e000      	b.n	800b4c2 <USBD_StdItfReq+0xc2>
          break;
 800b4c0:	bf00      	nop
      }
      break;
 800b4c2:	e004      	b.n	800b4ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b4c4:	6839      	ldr	r1, [r7, #0]
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fd15 	bl	800bef6 <USBD_CtlError>
      break;
 800b4cc:	bf00      	nop
  }

  return ret;
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	889b      	ldrh	r3, [r3, #4]
 800b4ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b4f4:	2b40      	cmp	r3, #64	@ 0x40
 800b4f6:	d007      	beq.n	800b508 <USBD_StdEPReq+0x30>
 800b4f8:	2b40      	cmp	r3, #64	@ 0x40
 800b4fa:	f200 817f 	bhi.w	800b7fc <USBD_StdEPReq+0x324>
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d02a      	beq.n	800b558 <USBD_StdEPReq+0x80>
 800b502:	2b20      	cmp	r3, #32
 800b504:	f040 817a 	bne.w	800b7fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b508:	7bbb      	ldrb	r3, [r7, #14]
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7ff fe85 	bl	800b21c <USBD_CoreFindEP>
 800b512:	4603      	mov	r3, r0
 800b514:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b516:	7b7b      	ldrb	r3, [r7, #13]
 800b518:	2bff      	cmp	r3, #255	@ 0xff
 800b51a:	f000 8174 	beq.w	800b806 <USBD_StdEPReq+0x32e>
 800b51e:	7b7b      	ldrb	r3, [r7, #13]
 800b520:	2b00      	cmp	r3, #0
 800b522:	f040 8170 	bne.w	800b806 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b526:	7b7a      	ldrb	r2, [r7, #13]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b52e:	7b7a      	ldrb	r2, [r7, #13]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	32ae      	adds	r2, #174	@ 0xae
 800b534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f000 8163 	beq.w	800b806 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b540:	7b7a      	ldrb	r2, [r7, #13]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	32ae      	adds	r2, #174	@ 0xae
 800b546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	4798      	blx	r3
 800b552:	4603      	mov	r3, r0
 800b554:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b556:	e156      	b.n	800b806 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	785b      	ldrb	r3, [r3, #1]
 800b55c:	2b03      	cmp	r3, #3
 800b55e:	d008      	beq.n	800b572 <USBD_StdEPReq+0x9a>
 800b560:	2b03      	cmp	r3, #3
 800b562:	f300 8145 	bgt.w	800b7f0 <USBD_StdEPReq+0x318>
 800b566:	2b00      	cmp	r3, #0
 800b568:	f000 809b 	beq.w	800b6a2 <USBD_StdEPReq+0x1ca>
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d03c      	beq.n	800b5ea <USBD_StdEPReq+0x112>
 800b570:	e13e      	b.n	800b7f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d002      	beq.n	800b584 <USBD_StdEPReq+0xac>
 800b57e:	2b03      	cmp	r3, #3
 800b580:	d016      	beq.n	800b5b0 <USBD_StdEPReq+0xd8>
 800b582:	e02c      	b.n	800b5de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b584:	7bbb      	ldrb	r3, [r7, #14]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00d      	beq.n	800b5a6 <USBD_StdEPReq+0xce>
 800b58a:	7bbb      	ldrb	r3, [r7, #14]
 800b58c:	2b80      	cmp	r3, #128	@ 0x80
 800b58e:	d00a      	beq.n	800b5a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b590:	7bbb      	ldrb	r3, [r7, #14]
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f004 f841 	bl	800f61c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b59a:	2180      	movs	r1, #128	@ 0x80
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f004 f83d 	bl	800f61c <USBD_LL_StallEP>
 800b5a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5a4:	e020      	b.n	800b5e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fca4 	bl	800bef6 <USBD_CtlError>
              break;
 800b5ae:	e01b      	b.n	800b5e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	885b      	ldrh	r3, [r3, #2]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10e      	bne.n	800b5d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b5b8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00b      	beq.n	800b5d6 <USBD_StdEPReq+0xfe>
 800b5be:	7bbb      	ldrb	r3, [r7, #14]
 800b5c0:	2b80      	cmp	r3, #128	@ 0x80
 800b5c2:	d008      	beq.n	800b5d6 <USBD_StdEPReq+0xfe>
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	88db      	ldrh	r3, [r3, #6]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d104      	bne.n	800b5d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5cc:	7bbb      	ldrb	r3, [r7, #14]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f004 f823 	bl	800f61c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 fd64 	bl	800c0a4 <USBD_CtlSendStatus>

              break;
 800b5dc:	e004      	b.n	800b5e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 fc88 	bl	800bef6 <USBD_CtlError>
              break;
 800b5e6:	bf00      	nop
          }
          break;
 800b5e8:	e107      	b.n	800b7fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d002      	beq.n	800b5fc <USBD_StdEPReq+0x124>
 800b5f6:	2b03      	cmp	r3, #3
 800b5f8:	d016      	beq.n	800b628 <USBD_StdEPReq+0x150>
 800b5fa:	e04b      	b.n	800b694 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00d      	beq.n	800b61e <USBD_StdEPReq+0x146>
 800b602:	7bbb      	ldrb	r3, [r7, #14]
 800b604:	2b80      	cmp	r3, #128	@ 0x80
 800b606:	d00a      	beq.n	800b61e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b608:	7bbb      	ldrb	r3, [r7, #14]
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f004 f805 	bl	800f61c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b612:	2180      	movs	r1, #128	@ 0x80
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f004 f801 	bl	800f61c <USBD_LL_StallEP>
 800b61a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b61c:	e040      	b.n	800b6a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fc68 	bl	800bef6 <USBD_CtlError>
              break;
 800b626:	e03b      	b.n	800b6a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	885b      	ldrh	r3, [r3, #2]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d136      	bne.n	800b69e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b630:	7bbb      	ldrb	r3, [r7, #14]
 800b632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b636:	2b00      	cmp	r3, #0
 800b638:	d004      	beq.n	800b644 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f004 f822 	bl	800f688 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fd2d 	bl	800c0a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b64a:	7bbb      	ldrb	r3, [r7, #14]
 800b64c:	4619      	mov	r1, r3
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7ff fde4 	bl	800b21c <USBD_CoreFindEP>
 800b654:	4603      	mov	r3, r0
 800b656:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b658:	7b7b      	ldrb	r3, [r7, #13]
 800b65a:	2bff      	cmp	r3, #255	@ 0xff
 800b65c:	d01f      	beq.n	800b69e <USBD_StdEPReq+0x1c6>
 800b65e:	7b7b      	ldrb	r3, [r7, #13]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d11c      	bne.n	800b69e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b664:	7b7a      	ldrb	r2, [r7, #13]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b66c:	7b7a      	ldrb	r2, [r7, #13]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	32ae      	adds	r2, #174	@ 0xae
 800b672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d010      	beq.n	800b69e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b67c:	7b7a      	ldrb	r2, [r7, #13]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	32ae      	adds	r2, #174	@ 0xae
 800b682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	4798      	blx	r3
 800b68e:	4603      	mov	r3, r0
 800b690:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b692:	e004      	b.n	800b69e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b694:	6839      	ldr	r1, [r7, #0]
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fc2d 	bl	800bef6 <USBD_CtlError>
              break;
 800b69c:	e000      	b.n	800b6a0 <USBD_StdEPReq+0x1c8>
              break;
 800b69e:	bf00      	nop
          }
          break;
 800b6a0:	e0ab      	b.n	800b7fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	d002      	beq.n	800b6b4 <USBD_StdEPReq+0x1dc>
 800b6ae:	2b03      	cmp	r3, #3
 800b6b0:	d032      	beq.n	800b718 <USBD_StdEPReq+0x240>
 800b6b2:	e097      	b.n	800b7e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6b4:	7bbb      	ldrb	r3, [r7, #14]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d007      	beq.n	800b6ca <USBD_StdEPReq+0x1f2>
 800b6ba:	7bbb      	ldrb	r3, [r7, #14]
 800b6bc:	2b80      	cmp	r3, #128	@ 0x80
 800b6be:	d004      	beq.n	800b6ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b6c0:	6839      	ldr	r1, [r7, #0]
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 fc17 	bl	800bef6 <USBD_CtlError>
                break;
 800b6c8:	e091      	b.n	800b7ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	da0b      	bge.n	800b6ea <USBD_StdEPReq+0x212>
 800b6d2:	7bbb      	ldrb	r3, [r7, #14]
 800b6d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6d8:	4613      	mov	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4413      	add	r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	3310      	adds	r3, #16
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	e00b      	b.n	800b702 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6ea:	7bbb      	ldrb	r3, [r7, #14]
 800b6ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6f0:	4613      	mov	r3, r2
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	4413      	add	r3, r2
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	4413      	add	r3, r2
 800b700:	3304      	adds	r3, #4
 800b702:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	2200      	movs	r2, #0
 800b708:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	2202      	movs	r2, #2
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fc6d 	bl	800bff0 <USBD_CtlSendData>
              break;
 800b716:	e06a      	b.n	800b7ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	da11      	bge.n	800b744 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b720:	7bbb      	ldrb	r3, [r7, #14]
 800b722:	f003 020f 	and.w	r2, r3, #15
 800b726:	6879      	ldr	r1, [r7, #4]
 800b728:	4613      	mov	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	4413      	add	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	440b      	add	r3, r1
 800b732:	3324      	adds	r3, #36	@ 0x24
 800b734:	881b      	ldrh	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d117      	bne.n	800b76a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fbda 	bl	800bef6 <USBD_CtlError>
                  break;
 800b742:	e054      	b.n	800b7ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b744:	7bbb      	ldrb	r3, [r7, #14]
 800b746:	f003 020f 	and.w	r2, r3, #15
 800b74a:	6879      	ldr	r1, [r7, #4]
 800b74c:	4613      	mov	r3, r2
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	4413      	add	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	440b      	add	r3, r1
 800b756:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b75a:	881b      	ldrh	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d104      	bne.n	800b76a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fbc7 	bl	800bef6 <USBD_CtlError>
                  break;
 800b768:	e041      	b.n	800b7ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b76a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	da0b      	bge.n	800b78a <USBD_StdEPReq+0x2b2>
 800b772:	7bbb      	ldrb	r3, [r7, #14]
 800b774:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b778:	4613      	mov	r3, r2
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	4413      	add	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	3310      	adds	r3, #16
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	4413      	add	r3, r2
 800b786:	3304      	adds	r3, #4
 800b788:	e00b      	b.n	800b7a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b78a:	7bbb      	ldrb	r3, [r7, #14]
 800b78c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b790:	4613      	mov	r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4413      	add	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	4413      	add	r3, r2
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b7a4:	7bbb      	ldrb	r3, [r7, #14]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d002      	beq.n	800b7b0 <USBD_StdEPReq+0x2d8>
 800b7aa:	7bbb      	ldrb	r3, [r7, #14]
 800b7ac:	2b80      	cmp	r3, #128	@ 0x80
 800b7ae:	d103      	bne.n	800b7b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	e00e      	b.n	800b7d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b7b8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f003 ff99 	bl	800f6f4 <USBD_LL_IsStallEP>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d003      	beq.n	800b7d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	601a      	str	r2, [r3, #0]
 800b7ce:	e002      	b.n	800b7d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	2202      	movs	r2, #2
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 fc07 	bl	800bff0 <USBD_CtlSendData>
              break;
 800b7e2:	e004      	b.n	800b7ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b7e4:	6839      	ldr	r1, [r7, #0]
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fb85 	bl	800bef6 <USBD_CtlError>
              break;
 800b7ec:	bf00      	nop
          }
          break;
 800b7ee:	e004      	b.n	800b7fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b7f0:	6839      	ldr	r1, [r7, #0]
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 fb7f 	bl	800bef6 <USBD_CtlError>
          break;
 800b7f8:	bf00      	nop
      }
      break;
 800b7fa:	e005      	b.n	800b808 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fb79 	bl	800bef6 <USBD_CtlError>
      break;
 800b804:	e000      	b.n	800b808 <USBD_StdEPReq+0x330>
      break;
 800b806:	bf00      	nop
  }

  return ret;
 800b808:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b81e:	2300      	movs	r3, #0
 800b820:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b822:	2300      	movs	r3, #0
 800b824:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b826:	2300      	movs	r3, #0
 800b828:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	885b      	ldrh	r3, [r3, #2]
 800b82e:	0a1b      	lsrs	r3, r3, #8
 800b830:	b29b      	uxth	r3, r3
 800b832:	3b01      	subs	r3, #1
 800b834:	2b0e      	cmp	r3, #14
 800b836:	f200 8152 	bhi.w	800bade <USBD_GetDescriptor+0x2ca>
 800b83a:	a201      	add	r2, pc, #4	@ (adr r2, 800b840 <USBD_GetDescriptor+0x2c>)
 800b83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b840:	0800b8b1 	.word	0x0800b8b1
 800b844:	0800b8c9 	.word	0x0800b8c9
 800b848:	0800b909 	.word	0x0800b909
 800b84c:	0800badf 	.word	0x0800badf
 800b850:	0800badf 	.word	0x0800badf
 800b854:	0800ba7f 	.word	0x0800ba7f
 800b858:	0800baab 	.word	0x0800baab
 800b85c:	0800badf 	.word	0x0800badf
 800b860:	0800badf 	.word	0x0800badf
 800b864:	0800badf 	.word	0x0800badf
 800b868:	0800badf 	.word	0x0800badf
 800b86c:	0800badf 	.word	0x0800badf
 800b870:	0800badf 	.word	0x0800badf
 800b874:	0800badf 	.word	0x0800badf
 800b878:	0800b87d 	.word	0x0800b87d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b882:	69db      	ldr	r3, [r3, #28]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00b      	beq.n	800b8a0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b88e:	69db      	ldr	r3, [r3, #28]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	7c12      	ldrb	r2, [r2, #16]
 800b894:	f107 0108 	add.w	r1, r7, #8
 800b898:	4610      	mov	r0, r2
 800b89a:	4798      	blx	r3
 800b89c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b89e:	e126      	b.n	800baee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b8a0:	6839      	ldr	r1, [r7, #0]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fb27 	bl	800bef6 <USBD_CtlError>
        err++;
 800b8a8:	7afb      	ldrb	r3, [r7, #11]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	72fb      	strb	r3, [r7, #11]
      break;
 800b8ae:	e11e      	b.n	800baee <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	7c12      	ldrb	r2, [r2, #16]
 800b8bc:	f107 0108 	add.w	r1, r7, #8
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	4798      	blx	r3
 800b8c4:	60f8      	str	r0, [r7, #12]
      break;
 800b8c6:	e112      	b.n	800baee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	7c1b      	ldrb	r3, [r3, #16]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d10d      	bne.n	800b8ec <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d8:	f107 0208 	add.w	r2, r7, #8
 800b8dc:	4610      	mov	r0, r2
 800b8de:	4798      	blx	r3
 800b8e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b8ea:	e100      	b.n	800baee <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f4:	f107 0208 	add.w	r2, r7, #8
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	4798      	blx	r3
 800b8fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3301      	adds	r3, #1
 800b902:	2202      	movs	r2, #2
 800b904:	701a      	strb	r2, [r3, #0]
      break;
 800b906:	e0f2      	b.n	800baee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	885b      	ldrh	r3, [r3, #2]
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b05      	cmp	r3, #5
 800b910:	f200 80ac 	bhi.w	800ba6c <USBD_GetDescriptor+0x258>
 800b914:	a201      	add	r2, pc, #4	@ (adr r2, 800b91c <USBD_GetDescriptor+0x108>)
 800b916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b91a:	bf00      	nop
 800b91c:	0800b935 	.word	0x0800b935
 800b920:	0800b969 	.word	0x0800b969
 800b924:	0800b99d 	.word	0x0800b99d
 800b928:	0800b9d1 	.word	0x0800b9d1
 800b92c:	0800ba05 	.word	0x0800ba05
 800b930:	0800ba39 	.word	0x0800ba39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00b      	beq.n	800b958 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	7c12      	ldrb	r2, [r2, #16]
 800b94c:	f107 0108 	add.w	r1, r7, #8
 800b950:	4610      	mov	r0, r2
 800b952:	4798      	blx	r3
 800b954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b956:	e091      	b.n	800ba7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b958:	6839      	ldr	r1, [r7, #0]
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 facb 	bl	800bef6 <USBD_CtlError>
            err++;
 800b960:	7afb      	ldrb	r3, [r7, #11]
 800b962:	3301      	adds	r3, #1
 800b964:	72fb      	strb	r3, [r7, #11]
          break;
 800b966:	e089      	b.n	800ba7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00b      	beq.n	800b98c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	7c12      	ldrb	r2, [r2, #16]
 800b980:	f107 0108 	add.w	r1, r7, #8
 800b984:	4610      	mov	r0, r2
 800b986:	4798      	blx	r3
 800b988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b98a:	e077      	b.n	800ba7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b98c:	6839      	ldr	r1, [r7, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fab1 	bl	800bef6 <USBD_CtlError>
            err++;
 800b994:	7afb      	ldrb	r3, [r7, #11]
 800b996:	3301      	adds	r3, #1
 800b998:	72fb      	strb	r3, [r7, #11]
          break;
 800b99a:	e06f      	b.n	800ba7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00b      	beq.n	800b9c0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	7c12      	ldrb	r2, [r2, #16]
 800b9b4:	f107 0108 	add.w	r1, r7, #8
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	4798      	blx	r3
 800b9bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9be:	e05d      	b.n	800ba7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fa97 	bl	800bef6 <USBD_CtlError>
            err++;
 800b9c8:	7afb      	ldrb	r3, [r7, #11]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b9ce:	e055      	b.n	800ba7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00b      	beq.n	800b9f4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9e2:	691b      	ldr	r3, [r3, #16]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	7c12      	ldrb	r2, [r2, #16]
 800b9e8:	f107 0108 	add.w	r1, r7, #8
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	4798      	blx	r3
 800b9f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9f2:	e043      	b.n	800ba7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b9f4:	6839      	ldr	r1, [r7, #0]
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fa7d 	bl	800bef6 <USBD_CtlError>
            err++;
 800b9fc:	7afb      	ldrb	r3, [r7, #11]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	72fb      	strb	r3, [r7, #11]
          break;
 800ba02:	e03b      	b.n	800ba7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba0a:	695b      	ldr	r3, [r3, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00b      	beq.n	800ba28 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba16:	695b      	ldr	r3, [r3, #20]
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	7c12      	ldrb	r2, [r2, #16]
 800ba1c:	f107 0108 	add.w	r1, r7, #8
 800ba20:	4610      	mov	r0, r2
 800ba22:	4798      	blx	r3
 800ba24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba26:	e029      	b.n	800ba7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ba28:	6839      	ldr	r1, [r7, #0]
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fa63 	bl	800bef6 <USBD_CtlError>
            err++;
 800ba30:	7afb      	ldrb	r3, [r7, #11]
 800ba32:	3301      	adds	r3, #1
 800ba34:	72fb      	strb	r3, [r7, #11]
          break;
 800ba36:	e021      	b.n	800ba7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba3e:	699b      	ldr	r3, [r3, #24]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00b      	beq.n	800ba5c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba4a:	699b      	ldr	r3, [r3, #24]
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	7c12      	ldrb	r2, [r2, #16]
 800ba50:	f107 0108 	add.w	r1, r7, #8
 800ba54:	4610      	mov	r0, r2
 800ba56:	4798      	blx	r3
 800ba58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba5a:	e00f      	b.n	800ba7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ba5c:	6839      	ldr	r1, [r7, #0]
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fa49 	bl	800bef6 <USBD_CtlError>
            err++;
 800ba64:	7afb      	ldrb	r3, [r7, #11]
 800ba66:	3301      	adds	r3, #1
 800ba68:	72fb      	strb	r3, [r7, #11]
          break;
 800ba6a:	e007      	b.n	800ba7c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fa41 	bl	800bef6 <USBD_CtlError>
          err++;
 800ba74:	7afb      	ldrb	r3, [r7, #11]
 800ba76:	3301      	adds	r3, #1
 800ba78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ba7a:	bf00      	nop
      }
      break;
 800ba7c:	e037      	b.n	800baee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	7c1b      	ldrb	r3, [r3, #16]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d109      	bne.n	800ba9a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba8e:	f107 0208 	add.w	r2, r7, #8
 800ba92:	4610      	mov	r0, r2
 800ba94:	4798      	blx	r3
 800ba96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba98:	e029      	b.n	800baee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ba9a:	6839      	ldr	r1, [r7, #0]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fa2a 	bl	800bef6 <USBD_CtlError>
        err++;
 800baa2:	7afb      	ldrb	r3, [r7, #11]
 800baa4:	3301      	adds	r3, #1
 800baa6:	72fb      	strb	r3, [r7, #11]
      break;
 800baa8:	e021      	b.n	800baee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	7c1b      	ldrb	r3, [r3, #16]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d10d      	bne.n	800bace <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baba:	f107 0208 	add.w	r2, r7, #8
 800babe:	4610      	mov	r0, r2
 800bac0:	4798      	blx	r3
 800bac2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	3301      	adds	r3, #1
 800bac8:	2207      	movs	r2, #7
 800baca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bacc:	e00f      	b.n	800baee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bace:	6839      	ldr	r1, [r7, #0]
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fa10 	bl	800bef6 <USBD_CtlError>
        err++;
 800bad6:	7afb      	ldrb	r3, [r7, #11]
 800bad8:	3301      	adds	r3, #1
 800bada:	72fb      	strb	r3, [r7, #11]
      break;
 800badc:	e007      	b.n	800baee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bade:	6839      	ldr	r1, [r7, #0]
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fa08 	bl	800bef6 <USBD_CtlError>
      err++;
 800bae6:	7afb      	ldrb	r3, [r7, #11]
 800bae8:	3301      	adds	r3, #1
 800baea:	72fb      	strb	r3, [r7, #11]
      break;
 800baec:	bf00      	nop
  }

  if (err != 0U)
 800baee:	7afb      	ldrb	r3, [r7, #11]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d11e      	bne.n	800bb32 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	88db      	ldrh	r3, [r3, #6]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d016      	beq.n	800bb2a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bafc:	893b      	ldrh	r3, [r7, #8]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00e      	beq.n	800bb20 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	88da      	ldrh	r2, [r3, #6]
 800bb06:	893b      	ldrh	r3, [r7, #8]
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	bf28      	it	cs
 800bb0c:	4613      	movcs	r3, r2
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bb12:	893b      	ldrh	r3, [r7, #8]
 800bb14:	461a      	mov	r2, r3
 800bb16:	68f9      	ldr	r1, [r7, #12]
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fa69 	bl	800bff0 <USBD_CtlSendData>
 800bb1e:	e009      	b.n	800bb34 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f9e7 	bl	800bef6 <USBD_CtlError>
 800bb28:	e004      	b.n	800bb34 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 faba 	bl	800c0a4 <USBD_CtlSendStatus>
 800bb30:	e000      	b.n	800bb34 <USBD_GetDescriptor+0x320>
    return;
 800bb32:	bf00      	nop
  }
}
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop

0800bb3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	889b      	ldrh	r3, [r3, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d131      	bne.n	800bbb2 <USBD_SetAddress+0x76>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	88db      	ldrh	r3, [r3, #6]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d12d      	bne.n	800bbb2 <USBD_SetAddress+0x76>
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	885b      	ldrh	r3, [r3, #2]
 800bb5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb5c:	d829      	bhi.n	800bbb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	885b      	ldrh	r3, [r3, #2]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b03      	cmp	r3, #3
 800bb74:	d104      	bne.n	800bb80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bb76:	6839      	ldr	r1, [r7, #0]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f9bc 	bl	800bef6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb7e:	e01d      	b.n	800bbbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	7bfa      	ldrb	r2, [r7, #15]
 800bb84:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f003 fddd 	bl	800f74c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fa86 	bl	800c0a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d004      	beq.n	800bba8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2202      	movs	r2, #2
 800bba2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bba6:	e009      	b.n	800bbbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbb0:	e004      	b.n	800bbbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bbb2:	6839      	ldr	r1, [r7, #0]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 f99e 	bl	800bef6 <USBD_CtlError>
  }
}
 800bbba:	bf00      	nop
 800bbbc:	bf00      	nop
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	885b      	ldrh	r3, [r3, #2]
 800bbd6:	b2da      	uxtb	r2, r3
 800bbd8:	4b4e      	ldr	r3, [pc, #312]	@ (800bd14 <USBD_SetConfig+0x150>)
 800bbda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bbdc:	4b4d      	ldr	r3, [pc, #308]	@ (800bd14 <USBD_SetConfig+0x150>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d905      	bls.n	800bbf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f985 	bl	800bef6 <USBD_CtlError>
    return USBD_FAIL;
 800bbec:	2303      	movs	r3, #3
 800bbee:	e08c      	b.n	800bd0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d002      	beq.n	800bc02 <USBD_SetConfig+0x3e>
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	d029      	beq.n	800bc54 <USBD_SetConfig+0x90>
 800bc00:	e075      	b.n	800bcee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bc02:	4b44      	ldr	r3, [pc, #272]	@ (800bd14 <USBD_SetConfig+0x150>)
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d020      	beq.n	800bc4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bc0a:	4b42      	ldr	r3, [pc, #264]	@ (800bd14 <USBD_SetConfig+0x150>)
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	461a      	mov	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc14:	4b3f      	ldr	r3, [pc, #252]	@ (800bd14 <USBD_SetConfig+0x150>)
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	4619      	mov	r1, r3
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7fe ffb9 	bl	800ab92 <USBD_SetClassConfig>
 800bc20:	4603      	mov	r3, r0
 800bc22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d008      	beq.n	800bc3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 f962 	bl	800bef6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2202      	movs	r2, #2
 800bc36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc3a:	e065      	b.n	800bd08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fa31 	bl	800c0a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2203      	movs	r2, #3
 800bc46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bc4a:	e05d      	b.n	800bd08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fa29 	bl	800c0a4 <USBD_CtlSendStatus>
      break;
 800bc52:	e059      	b.n	800bd08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bc54:	4b2f      	ldr	r3, [pc, #188]	@ (800bd14 <USBD_SetConfig+0x150>)
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d112      	bne.n	800bc82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2202      	movs	r2, #2
 800bc60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bc64:	4b2b      	ldr	r3, [pc, #172]	@ (800bd14 <USBD_SetConfig+0x150>)
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	461a      	mov	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc6e:	4b29      	ldr	r3, [pc, #164]	@ (800bd14 <USBD_SetConfig+0x150>)
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	4619      	mov	r1, r3
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7fe ffa8 	bl	800abca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 fa12 	bl	800c0a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc80:	e042      	b.n	800bd08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bc82:	4b24      	ldr	r3, [pc, #144]	@ (800bd14 <USBD_SetConfig+0x150>)
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	461a      	mov	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d02a      	beq.n	800bce6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	4619      	mov	r1, r3
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f7fe ff96 	bl	800abca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc9e:	4b1d      	ldr	r3, [pc, #116]	@ (800bd14 <USBD_SetConfig+0x150>)
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	461a      	mov	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bca8:	4b1a      	ldr	r3, [pc, #104]	@ (800bd14 <USBD_SetConfig+0x150>)
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	4619      	mov	r1, r3
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f7fe ff6f 	bl	800ab92 <USBD_SetClassConfig>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bcb8:	7bfb      	ldrb	r3, [r7, #15]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00f      	beq.n	800bcde <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bcbe:	6839      	ldr	r1, [r7, #0]
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 f918 	bl	800bef6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	4619      	mov	r1, r3
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7fe ff7b 	bl	800abca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2202      	movs	r2, #2
 800bcd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bcdc:	e014      	b.n	800bd08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f9e0 	bl	800c0a4 <USBD_CtlSendStatus>
      break;
 800bce4:	e010      	b.n	800bd08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f9dc 	bl	800c0a4 <USBD_CtlSendStatus>
      break;
 800bcec:	e00c      	b.n	800bd08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bcee:	6839      	ldr	r1, [r7, #0]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f900 	bl	800bef6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bcf6:	4b07      	ldr	r3, [pc, #28]	@ (800bd14 <USBD_SetConfig+0x150>)
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7fe ff64 	bl	800abca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bd02:	2303      	movs	r3, #3
 800bd04:	73fb      	strb	r3, [r7, #15]
      break;
 800bd06:	bf00      	nop
  }

  return ret;
 800bd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	2000092c 	.word	0x2000092c

0800bd18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	88db      	ldrh	r3, [r3, #6]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d004      	beq.n	800bd34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bd2a:	6839      	ldr	r1, [r7, #0]
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 f8e2 	bl	800bef6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bd32:	e023      	b.n	800bd7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	dc02      	bgt.n	800bd46 <USBD_GetConfig+0x2e>
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	dc03      	bgt.n	800bd4c <USBD_GetConfig+0x34>
 800bd44:	e015      	b.n	800bd72 <USBD_GetConfig+0x5a>
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d00b      	beq.n	800bd62 <USBD_GetConfig+0x4a>
 800bd4a:	e012      	b.n	800bd72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	3308      	adds	r3, #8
 800bd56:	2201      	movs	r2, #1
 800bd58:	4619      	mov	r1, r3
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 f948 	bl	800bff0 <USBD_CtlSendData>
        break;
 800bd60:	e00c      	b.n	800bd7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	3304      	adds	r3, #4
 800bd66:	2201      	movs	r2, #1
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 f940 	bl	800bff0 <USBD_CtlSendData>
        break;
 800bd70:	e004      	b.n	800bd7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bd72:	6839      	ldr	r1, [r7, #0]
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 f8be 	bl	800bef6 <USBD_CtlError>
        break;
 800bd7a:	bf00      	nop
}
 800bd7c:	bf00      	nop
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	3b01      	subs	r3, #1
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d81e      	bhi.n	800bdda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	88db      	ldrh	r3, [r3, #6]
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d004      	beq.n	800bdae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bda4:	6839      	ldr	r1, [r7, #0]
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f8a5 	bl	800bef6 <USBD_CtlError>
        break;
 800bdac:	e01a      	b.n	800bde4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d005      	beq.n	800bdca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	f043 0202 	orr.w	r2, r3, #2
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	330c      	adds	r3, #12
 800bdce:	2202      	movs	r2, #2
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f90c 	bl	800bff0 <USBD_CtlSendData>
      break;
 800bdd8:	e004      	b.n	800bde4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bdda:	6839      	ldr	r1, [r7, #0]
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 f88a 	bl	800bef6 <USBD_CtlError>
      break;
 800bde2:	bf00      	nop
  }
}
 800bde4:	bf00      	nop
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	885b      	ldrh	r3, [r3, #2]
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d107      	bne.n	800be0e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2201      	movs	r2, #1
 800be02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 f94c 	bl	800c0a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800be0c:	e013      	b.n	800be36 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	885b      	ldrh	r3, [r3, #2]
 800be12:	2b02      	cmp	r3, #2
 800be14:	d10b      	bne.n	800be2e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	889b      	ldrh	r3, [r3, #4]
 800be1a:	0a1b      	lsrs	r3, r3, #8
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	b2da      	uxtb	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f93c 	bl	800c0a4 <USBD_CtlSendStatus>
}
 800be2c:	e003      	b.n	800be36 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f860 	bl	800bef6 <USBD_CtlError>
}
 800be36:	bf00      	nop
 800be38:	3708      	adds	r7, #8
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b082      	sub	sp, #8
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	3b01      	subs	r3, #1
 800be52:	2b02      	cmp	r3, #2
 800be54:	d80b      	bhi.n	800be6e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	885b      	ldrh	r3, [r3, #2]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d10c      	bne.n	800be78 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f91c 	bl	800c0a4 <USBD_CtlSendStatus>
      }
      break;
 800be6c:	e004      	b.n	800be78 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800be6e:	6839      	ldr	r1, [r7, #0]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 f840 	bl	800bef6 <USBD_CtlError>
      break;
 800be76:	e000      	b.n	800be7a <USBD_ClrFeature+0x3c>
      break;
 800be78:	bf00      	nop
  }
}
 800be7a:	bf00      	nop
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b084      	sub	sp, #16
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	781a      	ldrb	r2, [r3, #0]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	3301      	adds	r3, #1
 800be9c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	3301      	adds	r3, #1
 800beaa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f7ff fa16 	bl	800b2de <SWAPBYTE>
 800beb2:	4603      	mov	r3, r0
 800beb4:	461a      	mov	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3301      	adds	r3, #1
 800bebe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	3301      	adds	r3, #1
 800bec4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f7ff fa09 	bl	800b2de <SWAPBYTE>
 800becc:	4603      	mov	r3, r0
 800bece:	461a      	mov	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	3301      	adds	r3, #1
 800bed8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	3301      	adds	r3, #1
 800bede:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f7ff f9fc 	bl	800b2de <SWAPBYTE>
 800bee6:	4603      	mov	r3, r0
 800bee8:	461a      	mov	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	80da      	strh	r2, [r3, #6]
}
 800beee:	bf00      	nop
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b082      	sub	sp, #8
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
 800befe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf00:	2180      	movs	r1, #128	@ 0x80
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f003 fb8a 	bl	800f61c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bf08:	2100      	movs	r1, #0
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f003 fb86 	bl	800f61c <USBD_LL_StallEP>
}
 800bf10:	bf00      	nop
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b086      	sub	sp, #24
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bf24:	2300      	movs	r3, #0
 800bf26:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d042      	beq.n	800bfb4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800bf32:	6938      	ldr	r0, [r7, #16]
 800bf34:	f000 f842 	bl	800bfbc <USBD_GetLen>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf42:	d808      	bhi.n	800bf56 <USBD_GetString+0x3e>
 800bf44:	6938      	ldr	r0, [r7, #16]
 800bf46:	f000 f839 	bl	800bfbc <USBD_GetLen>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	005b      	lsls	r3, r3, #1
 800bf52:	b29a      	uxth	r2, r3
 800bf54:	e001      	b.n	800bf5a <USBD_GetString+0x42>
 800bf56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bf5e:	7dfb      	ldrb	r3, [r7, #23]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	4413      	add	r3, r2
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	7812      	ldrb	r2, [r2, #0]
 800bf68:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bf70:	7dfb      	ldrb	r3, [r7, #23]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	4413      	add	r3, r2
 800bf76:	2203      	movs	r2, #3
 800bf78:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf7a:	7dfb      	ldrb	r3, [r7, #23]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bf80:	e013      	b.n	800bfaa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800bf82:	7dfb      	ldrb	r3, [r7, #23]
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	4413      	add	r3, r2
 800bf88:	693a      	ldr	r2, [r7, #16]
 800bf8a:	7812      	ldrb	r2, [r2, #0]
 800bf8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	3301      	adds	r3, #1
 800bf92:	613b      	str	r3, [r7, #16]
    idx++;
 800bf94:	7dfb      	ldrb	r3, [r7, #23]
 800bf96:	3301      	adds	r3, #1
 800bf98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bf9a:	7dfb      	ldrb	r3, [r7, #23]
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	701a      	strb	r2, [r3, #0]
    idx++;
 800bfa4:	7dfb      	ldrb	r3, [r7, #23]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d1e7      	bne.n	800bf82 <USBD_GetString+0x6a>
 800bfb2:	e000      	b.n	800bfb6 <USBD_GetString+0x9e>
    return;
 800bfb4:	bf00      	nop
  }
}
 800bfb6:	3718      	adds	r7, #24
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bfcc:	e005      	b.n	800bfda <USBD_GetLen+0x1e>
  {
    len++;
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d1f5      	bne.n	800bfce <USBD_GetLen+0x12>
  }

  return len;
 800bfe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2202      	movs	r2, #2
 800c000:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	2100      	movs	r1, #0
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f003 fbce 	bl	800f7b8 <USBD_LL_Transmit>

  return USBD_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b084      	sub	sp, #16
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	60f8      	str	r0, [r7, #12]
 800c02e:	60b9      	str	r1, [r7, #8]
 800c030:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	2100      	movs	r1, #0
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f003 fbbd 	bl	800f7b8 <USBD_LL_Transmit>

  return USBD_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2203      	movs	r2, #3
 800c058:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	2100      	movs	r1, #0
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	f003 fbd8 	bl	800f828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b084      	sub	sp, #16
 800c086:	af00      	add	r7, sp, #0
 800c088:	60f8      	str	r0, [r7, #12]
 800c08a:	60b9      	str	r1, [r7, #8]
 800c08c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	2100      	movs	r1, #0
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f003 fbc7 	bl	800f828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2204      	movs	r2, #4
 800c0b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f003 fb7c 	bl	800f7b8 <USBD_LL_Transmit>

  return USBD_OK;
 800c0c0:	2300      	movs	r3, #0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b082      	sub	sp, #8
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2205      	movs	r2, #5
 800c0d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0da:	2300      	movs	r3, #0
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2100      	movs	r1, #0
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f003 fba1 	bl	800f828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <__NVIC_SetPriority>:
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	6039      	str	r1, [r7, #0]
 800c0fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c100:	2b00      	cmp	r3, #0
 800c102:	db0a      	blt.n	800c11a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	b2da      	uxtb	r2, r3
 800c108:	490c      	ldr	r1, [pc, #48]	@ (800c13c <__NVIC_SetPriority+0x4c>)
 800c10a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c10e:	0112      	lsls	r2, r2, #4
 800c110:	b2d2      	uxtb	r2, r2
 800c112:	440b      	add	r3, r1
 800c114:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c118:	e00a      	b.n	800c130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	4908      	ldr	r1, [pc, #32]	@ (800c140 <__NVIC_SetPriority+0x50>)
 800c120:	79fb      	ldrb	r3, [r7, #7]
 800c122:	f003 030f 	and.w	r3, r3, #15
 800c126:	3b04      	subs	r3, #4
 800c128:	0112      	lsls	r2, r2, #4
 800c12a:	b2d2      	uxtb	r2, r2
 800c12c:	440b      	add	r3, r1
 800c12e:	761a      	strb	r2, [r3, #24]
}
 800c130:	bf00      	nop
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr
 800c13c:	e000e100 	.word	0xe000e100
 800c140:	e000ed00 	.word	0xe000ed00

0800c144 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c144:	b580      	push	{r7, lr}
 800c146:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c148:	4b05      	ldr	r3, [pc, #20]	@ (800c160 <SysTick_Handler+0x1c>)
 800c14a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c14c:	f001 fd46 	bl	800dbdc <xTaskGetSchedulerState>
 800c150:	4603      	mov	r3, r0
 800c152:	2b01      	cmp	r3, #1
 800c154:	d001      	beq.n	800c15a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c156:	f002 fb3f 	bl	800e7d8 <xPortSysTickHandler>
  }
}
 800c15a:	bf00      	nop
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	e000e010 	.word	0xe000e010

0800c164 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c164:	b580      	push	{r7, lr}
 800c166:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c168:	2100      	movs	r1, #0
 800c16a:	f06f 0004 	mvn.w	r0, #4
 800c16e:	f7ff ffbf 	bl	800c0f0 <__NVIC_SetPriority>
#endif
}
 800c172:	bf00      	nop
 800c174:	bd80      	pop	{r7, pc}
	...

0800c178 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c17e:	f3ef 8305 	mrs	r3, IPSR
 800c182:	603b      	str	r3, [r7, #0]
  return(result);
 800c184:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c186:	2b00      	cmp	r3, #0
 800c188:	d003      	beq.n	800c192 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c18a:	f06f 0305 	mvn.w	r3, #5
 800c18e:	607b      	str	r3, [r7, #4]
 800c190:	e00c      	b.n	800c1ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c192:	4b0a      	ldr	r3, [pc, #40]	@ (800c1bc <osKernelInitialize+0x44>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d105      	bne.n	800c1a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c19a:	4b08      	ldr	r3, [pc, #32]	@ (800c1bc <osKernelInitialize+0x44>)
 800c19c:	2201      	movs	r2, #1
 800c19e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	607b      	str	r3, [r7, #4]
 800c1a4:	e002      	b.n	800c1ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c1a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c1aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c1ac:	687b      	ldr	r3, [r7, #4]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	20000930 	.word	0x20000930

0800c1c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1c6:	f3ef 8305 	mrs	r3, IPSR
 800c1ca:	603b      	str	r3, [r7, #0]
  return(result);
 800c1cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d003      	beq.n	800c1da <osKernelStart+0x1a>
    stat = osErrorISR;
 800c1d2:	f06f 0305 	mvn.w	r3, #5
 800c1d6:	607b      	str	r3, [r7, #4]
 800c1d8:	e010      	b.n	800c1fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c1da:	4b0b      	ldr	r3, [pc, #44]	@ (800c208 <osKernelStart+0x48>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d109      	bne.n	800c1f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c1e2:	f7ff ffbf 	bl	800c164 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c1e6:	4b08      	ldr	r3, [pc, #32]	@ (800c208 <osKernelStart+0x48>)
 800c1e8:	2202      	movs	r2, #2
 800c1ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c1ec:	f001 f892 	bl	800d314 <vTaskStartScheduler>
      stat = osOK;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	607b      	str	r3, [r7, #4]
 800c1f4:	e002      	b.n	800c1fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c1f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c1fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c1fc:	687b      	ldr	r3, [r7, #4]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	20000930 	.word	0x20000930

0800c20c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b08e      	sub	sp, #56	@ 0x38
 800c210:	af04      	add	r7, sp, #16
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c218:	2300      	movs	r3, #0
 800c21a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c21c:	f3ef 8305 	mrs	r3, IPSR
 800c220:	617b      	str	r3, [r7, #20]
  return(result);
 800c222:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c224:	2b00      	cmp	r3, #0
 800c226:	d17e      	bne.n	800c326 <osThreadNew+0x11a>
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d07b      	beq.n	800c326 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c22e:	2380      	movs	r3, #128	@ 0x80
 800c230:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c232:	2318      	movs	r3, #24
 800c234:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c236:	2300      	movs	r3, #0
 800c238:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c23a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c23e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d045      	beq.n	800c2d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d002      	beq.n	800c254 <osThreadNew+0x48>
        name = attr->name;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	699b      	ldr	r3, [r3, #24]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	699b      	ldr	r3, [r3, #24]
 800c260:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d008      	beq.n	800c27a <osThreadNew+0x6e>
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	2b38      	cmp	r3, #56	@ 0x38
 800c26c:	d805      	bhi.n	800c27a <osThreadNew+0x6e>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	f003 0301 	and.w	r3, r3, #1
 800c276:	2b00      	cmp	r3, #0
 800c278:	d001      	beq.n	800c27e <osThreadNew+0x72>
        return (NULL);
 800c27a:	2300      	movs	r3, #0
 800c27c:	e054      	b.n	800c328 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	695b      	ldr	r3, [r3, #20]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d003      	beq.n	800c28e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	695b      	ldr	r3, [r3, #20]
 800c28a:	089b      	lsrs	r3, r3, #2
 800c28c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00e      	beq.n	800c2b4 <osThreadNew+0xa8>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	2ba7      	cmp	r3, #167	@ 0xa7
 800c29c:	d90a      	bls.n	800c2b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d006      	beq.n	800c2b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	695b      	ldr	r3, [r3, #20]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <osThreadNew+0xa8>
        mem = 1;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	61bb      	str	r3, [r7, #24]
 800c2b2:	e010      	b.n	800c2d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d10c      	bne.n	800c2d6 <osThreadNew+0xca>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d108      	bne.n	800c2d6 <osThreadNew+0xca>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d104      	bne.n	800c2d6 <osThreadNew+0xca>
          mem = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	61bb      	str	r3, [r7, #24]
 800c2d0:	e001      	b.n	800c2d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d110      	bne.n	800c2fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2e4:	9202      	str	r2, [sp, #8]
 800c2e6:	9301      	str	r3, [sp, #4]
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	6a3a      	ldr	r2, [r7, #32]
 800c2f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f000 fe1a 	bl	800cf2c <xTaskCreateStatic>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	613b      	str	r3, [r7, #16]
 800c2fc:	e013      	b.n	800c326 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d110      	bne.n	800c326 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c304:	6a3b      	ldr	r3, [r7, #32]
 800c306:	b29a      	uxth	r2, r3
 800c308:	f107 0310 	add.w	r3, r7, #16
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f000 fe68 	bl	800cfec <xTaskCreate>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d001      	beq.n	800c326 <osThreadNew+0x11a>
            hTask = NULL;
 800c322:	2300      	movs	r3, #0
 800c324:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c326:	693b      	ldr	r3, [r7, #16]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3728      	adds	r7, #40	@ 0x28
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c338:	f3ef 8305 	mrs	r3, IPSR
 800c33c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c33e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c340:	2b00      	cmp	r3, #0
 800c342:	d003      	beq.n	800c34c <osDelay+0x1c>
    stat = osErrorISR;
 800c344:	f06f 0305 	mvn.w	r3, #5
 800c348:	60fb      	str	r3, [r7, #12]
 800c34a:	e007      	b.n	800c35c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c34c:	2300      	movs	r3, #0
 800c34e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d002      	beq.n	800c35c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 ffa6 	bl	800d2a8 <vTaskDelay>
    }
  }

  return (stat);
 800c35c:	68fb      	ldr	r3, [r7, #12]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
	...

0800c368 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	4a07      	ldr	r2, [pc, #28]	@ (800c394 <vApplicationGetIdleTaskMemory+0x2c>)
 800c378:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	4a06      	ldr	r2, [pc, #24]	@ (800c398 <vApplicationGetIdleTaskMemory+0x30>)
 800c37e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2280      	movs	r2, #128	@ 0x80
 800c384:	601a      	str	r2, [r3, #0]
}
 800c386:	bf00      	nop
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	20000934 	.word	0x20000934
 800c398:	200009dc 	.word	0x200009dc

0800c39c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	4a07      	ldr	r2, [pc, #28]	@ (800c3c8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c3ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	4a06      	ldr	r2, [pc, #24]	@ (800c3cc <vApplicationGetTimerTaskMemory+0x30>)
 800c3b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c3ba:	601a      	str	r2, [r3, #0]
}
 800c3bc:	bf00      	nop
 800c3be:	3714      	adds	r7, #20
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr
 800c3c8:	20000bdc 	.word	0x20000bdc
 800c3cc:	20000c84 	.word	0x20000c84

0800c3d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f103 0208 	add.w	r2, r3, #8
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f103 0208 	add.w	r2, r3, #8
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f103 0208 	add.w	r2, r3, #8
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c404:	bf00      	nop
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c41e:	bf00      	nop
 800c420:	370c      	adds	r7, #12
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr

0800c42a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c42a:	b480      	push	{r7}
 800c42c:	b085      	sub	sp, #20
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	689a      	ldr	r2, [r3, #8]
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	683a      	ldr	r2, [r7, #0]
 800c44e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	1c5a      	adds	r2, r3, #1
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	601a      	str	r2, [r3, #0]
}
 800c466:	bf00      	nop
 800c468:	3714      	adds	r7, #20
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr

0800c472 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c472:	b480      	push	{r7}
 800c474:	b085      	sub	sp, #20
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
 800c47a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c488:	d103      	bne.n	800c492 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	60fb      	str	r3, [r7, #12]
 800c490:	e00c      	b.n	800c4ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	3308      	adds	r3, #8
 800c496:	60fb      	str	r3, [r7, #12]
 800c498:	e002      	b.n	800c4a0 <vListInsert+0x2e>
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	60fb      	str	r3, [r7, #12]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d2f6      	bcs.n	800c49a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	685a      	ldr	r2, [r3, #4]
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	683a      	ldr	r2, [r7, #0]
 800c4ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	1c5a      	adds	r2, r3, #1
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	601a      	str	r2, [r3, #0]
}
 800c4d8:	bf00      	nop
 800c4da:	3714      	adds	r7, #20
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	6892      	ldr	r2, [r2, #8]
 800c4fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	6852      	ldr	r2, [r2, #4]
 800c504:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d103      	bne.n	800c518 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	689a      	ldr	r2, [r3, #8]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	1e5a      	subs	r2, r3, #1
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10b      	bne.n	800c564 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c550:	f383 8811 	msr	BASEPRI, r3
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c55e:	bf00      	nop
 800c560:	bf00      	nop
 800c562:	e7fd      	b.n	800c560 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c564:	f002 f8a8 	bl	800e6b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c570:	68f9      	ldr	r1, [r7, #12]
 800c572:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c574:	fb01 f303 	mul.w	r3, r1, r3
 800c578:	441a      	add	r2, r3
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2200      	movs	r2, #0
 800c582:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c594:	3b01      	subs	r3, #1
 800c596:	68f9      	ldr	r1, [r7, #12]
 800c598:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c59a:	fb01 f303 	mul.w	r3, r1, r3
 800c59e:	441a      	add	r2, r3
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	22ff      	movs	r2, #255	@ 0xff
 800c5a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	22ff      	movs	r2, #255	@ 0xff
 800c5b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d114      	bne.n	800c5e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d01a      	beq.n	800c5f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	3310      	adds	r3, #16
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f001 f942 	bl	800d850 <xTaskRemoveFromEventList>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d012      	beq.n	800c5f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c5d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c608 <xQueueGenericReset+0xd0>)
 800c5d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5d8:	601a      	str	r2, [r3, #0]
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	e009      	b.n	800c5f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	3310      	adds	r3, #16
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7ff fef1 	bl	800c3d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	3324      	adds	r3, #36	@ 0x24
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7ff feec 	bl	800c3d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c5f8:	f002 f890 	bl	800e71c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c5fc:	2301      	movs	r3, #1
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	e000ed04 	.word	0xe000ed04

0800c60c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b08e      	sub	sp, #56	@ 0x38
 800c610:	af02      	add	r7, sp, #8
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
 800c618:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10b      	bne.n	800c638 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c624:	f383 8811 	msr	BASEPRI, r3
 800c628:	f3bf 8f6f 	isb	sy
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c632:	bf00      	nop
 800c634:	bf00      	nop
 800c636:	e7fd      	b.n	800c634 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10b      	bne.n	800c656 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c650:	bf00      	nop
 800c652:	bf00      	nop
 800c654:	e7fd      	b.n	800c652 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d002      	beq.n	800c662 <xQueueGenericCreateStatic+0x56>
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d001      	beq.n	800c666 <xQueueGenericCreateStatic+0x5a>
 800c662:	2301      	movs	r3, #1
 800c664:	e000      	b.n	800c668 <xQueueGenericCreateStatic+0x5c>
 800c666:	2300      	movs	r3, #0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10b      	bne.n	800c684 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c670:	f383 8811 	msr	BASEPRI, r3
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	623b      	str	r3, [r7, #32]
}
 800c67e:	bf00      	nop
 800c680:	bf00      	nop
 800c682:	e7fd      	b.n	800c680 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d102      	bne.n	800c690 <xQueueGenericCreateStatic+0x84>
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d101      	bne.n	800c694 <xQueueGenericCreateStatic+0x88>
 800c690:	2301      	movs	r3, #1
 800c692:	e000      	b.n	800c696 <xQueueGenericCreateStatic+0x8a>
 800c694:	2300      	movs	r3, #0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10b      	bne.n	800c6b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	61fb      	str	r3, [r7, #28]
}
 800c6ac:	bf00      	nop
 800c6ae:	bf00      	nop
 800c6b0:	e7fd      	b.n	800c6ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c6b2:	2350      	movs	r3, #80	@ 0x50
 800c6b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2b50      	cmp	r3, #80	@ 0x50
 800c6ba:	d00b      	beq.n	800c6d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c0:	f383 8811 	msr	BASEPRI, r3
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	61bb      	str	r3, [r7, #24]
}
 800c6ce:	bf00      	nop
 800c6d0:	bf00      	nop
 800c6d2:	e7fd      	b.n	800c6d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c6d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00d      	beq.n	800c6fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c6e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	68b9      	ldr	r1, [r7, #8]
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f000 f805 	bl	800c706 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3730      	adds	r7, #48	@ 0x30
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b084      	sub	sp, #16
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	60f8      	str	r0, [r7, #12]
 800c70e:	60b9      	str	r1, [r7, #8]
 800c710:	607a      	str	r2, [r7, #4]
 800c712:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d103      	bne.n	800c722 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	69ba      	ldr	r2, [r7, #24]
 800c71e:	601a      	str	r2, [r3, #0]
 800c720:	e002      	b.n	800c728 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	68ba      	ldr	r2, [r7, #8]
 800c732:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c734:	2101      	movs	r1, #1
 800c736:	69b8      	ldr	r0, [r7, #24]
 800c738:	f7ff fefe 	bl	800c538 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	78fa      	ldrb	r2, [r7, #3]
 800c740:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c744:	bf00      	nop
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b08e      	sub	sp, #56	@ 0x38
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
 800c758:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c75a:	2300      	movs	r3, #0
 800c75c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c764:	2b00      	cmp	r3, #0
 800c766:	d10b      	bne.n	800c780 <xQueueGenericSend+0x34>
	__asm volatile
 800c768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c77a:	bf00      	nop
 800c77c:	bf00      	nop
 800c77e:	e7fd      	b.n	800c77c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d103      	bne.n	800c78e <xQueueGenericSend+0x42>
 800c786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d101      	bne.n	800c792 <xQueueGenericSend+0x46>
 800c78e:	2301      	movs	r3, #1
 800c790:	e000      	b.n	800c794 <xQueueGenericSend+0x48>
 800c792:	2300      	movs	r3, #0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10b      	bne.n	800c7b0 <xQueueGenericSend+0x64>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c7aa:	bf00      	nop
 800c7ac:	bf00      	nop
 800c7ae:	e7fd      	b.n	800c7ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d103      	bne.n	800c7be <xQueueGenericSend+0x72>
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d101      	bne.n	800c7c2 <xQueueGenericSend+0x76>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e000      	b.n	800c7c4 <xQueueGenericSend+0x78>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10b      	bne.n	800c7e0 <xQueueGenericSend+0x94>
	__asm volatile
 800c7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	623b      	str	r3, [r7, #32]
}
 800c7da:	bf00      	nop
 800c7dc:	bf00      	nop
 800c7de:	e7fd      	b.n	800c7dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7e0:	f001 f9fc 	bl	800dbdc <xTaskGetSchedulerState>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d102      	bne.n	800c7f0 <xQueueGenericSend+0xa4>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d101      	bne.n	800c7f4 <xQueueGenericSend+0xa8>
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e000      	b.n	800c7f6 <xQueueGenericSend+0xaa>
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10b      	bne.n	800c812 <xQueueGenericSend+0xc6>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	61fb      	str	r3, [r7, #28]
}
 800c80c:	bf00      	nop
 800c80e:	bf00      	nop
 800c810:	e7fd      	b.n	800c80e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c812:	f001 ff51 	bl	800e6b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c81e:	429a      	cmp	r2, r3
 800c820:	d302      	bcc.n	800c828 <xQueueGenericSend+0xdc>
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2b02      	cmp	r3, #2
 800c826:	d129      	bne.n	800c87c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c828:	683a      	ldr	r2, [r7, #0]
 800c82a:	68b9      	ldr	r1, [r7, #8]
 800c82c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c82e:	f000 fa0f 	bl	800cc50 <prvCopyDataToQueue>
 800c832:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d010      	beq.n	800c85e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83e:	3324      	adds	r3, #36	@ 0x24
 800c840:	4618      	mov	r0, r3
 800c842:	f001 f805 	bl	800d850 <xTaskRemoveFromEventList>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d013      	beq.n	800c874 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c84c:	4b3f      	ldr	r3, [pc, #252]	@ (800c94c <xQueueGenericSend+0x200>)
 800c84e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	e00a      	b.n	800c874 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c860:	2b00      	cmp	r3, #0
 800c862:	d007      	beq.n	800c874 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c864:	4b39      	ldr	r3, [pc, #228]	@ (800c94c <xQueueGenericSend+0x200>)
 800c866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c86a:	601a      	str	r2, [r3, #0]
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c874:	f001 ff52 	bl	800e71c <vPortExitCritical>
				return pdPASS;
 800c878:	2301      	movs	r3, #1
 800c87a:	e063      	b.n	800c944 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d103      	bne.n	800c88a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c882:	f001 ff4b 	bl	800e71c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c886:	2300      	movs	r3, #0
 800c888:	e05c      	b.n	800c944 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d106      	bne.n	800c89e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c890:	f107 0314 	add.w	r3, r7, #20
 800c894:	4618      	mov	r0, r3
 800c896:	f001 f83f 	bl	800d918 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c89a:	2301      	movs	r3, #1
 800c89c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c89e:	f001 ff3d 	bl	800e71c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8a2:	f000 fda7 	bl	800d3f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8a6:	f001 ff07 	bl	800e6b8 <vPortEnterCritical>
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8b0:	b25b      	sxtb	r3, r3
 800c8b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c8b6:	d103      	bne.n	800c8c0 <xQueueGenericSend+0x174>
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c8c6:	b25b      	sxtb	r3, r3
 800c8c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c8cc:	d103      	bne.n	800c8d6 <xQueueGenericSend+0x18a>
 800c8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c8d6:	f001 ff21 	bl	800e71c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8da:	1d3a      	adds	r2, r7, #4
 800c8dc:	f107 0314 	add.w	r3, r7, #20
 800c8e0:	4611      	mov	r1, r2
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f001 f82e 	bl	800d944 <xTaskCheckForTimeOut>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d124      	bne.n	800c938 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c8ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8f0:	f000 faa6 	bl	800ce40 <prvIsQueueFull>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d018      	beq.n	800c92c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8fc:	3310      	adds	r3, #16
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	4611      	mov	r1, r2
 800c902:	4618      	mov	r0, r3
 800c904:	f000 ff52 	bl	800d7ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c908:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c90a:	f000 fa31 	bl	800cd70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c90e:	f000 fd7f 	bl	800d410 <xTaskResumeAll>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	f47f af7c 	bne.w	800c812 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c91a:	4b0c      	ldr	r3, [pc, #48]	@ (800c94c <xQueueGenericSend+0x200>)
 800c91c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c920:	601a      	str	r2, [r3, #0]
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	e772      	b.n	800c812 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c92c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c92e:	f000 fa1f 	bl	800cd70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c932:	f000 fd6d 	bl	800d410 <xTaskResumeAll>
 800c936:	e76c      	b.n	800c812 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c938:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c93a:	f000 fa19 	bl	800cd70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c93e:	f000 fd67 	bl	800d410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c942:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c944:	4618      	mov	r0, r3
 800c946:	3738      	adds	r7, #56	@ 0x38
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	e000ed04 	.word	0xe000ed04

0800c950 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b090      	sub	sp, #64	@ 0x40
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
 800c95c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c964:	2b00      	cmp	r3, #0
 800c966:	d10b      	bne.n	800c980 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c96c:	f383 8811 	msr	BASEPRI, r3
 800c970:	f3bf 8f6f 	isb	sy
 800c974:	f3bf 8f4f 	dsb	sy
 800c978:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c97a:	bf00      	nop
 800c97c:	bf00      	nop
 800c97e:	e7fd      	b.n	800c97c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d103      	bne.n	800c98e <xQueueGenericSendFromISR+0x3e>
 800c986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d101      	bne.n	800c992 <xQueueGenericSendFromISR+0x42>
 800c98e:	2301      	movs	r3, #1
 800c990:	e000      	b.n	800c994 <xQueueGenericSendFromISR+0x44>
 800c992:	2300      	movs	r3, #0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10b      	bne.n	800c9b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c99c:	f383 8811 	msr	BASEPRI, r3
 800c9a0:	f3bf 8f6f 	isb	sy
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c9aa:	bf00      	nop
 800c9ac:	bf00      	nop
 800c9ae:	e7fd      	b.n	800c9ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d103      	bne.n	800c9be <xQueueGenericSendFromISR+0x6e>
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d101      	bne.n	800c9c2 <xQueueGenericSendFromISR+0x72>
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e000      	b.n	800c9c4 <xQueueGenericSendFromISR+0x74>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d10b      	bne.n	800c9e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9cc:	f383 8811 	msr	BASEPRI, r3
 800c9d0:	f3bf 8f6f 	isb	sy
 800c9d4:	f3bf 8f4f 	dsb	sy
 800c9d8:	623b      	str	r3, [r7, #32]
}
 800c9da:	bf00      	nop
 800c9dc:	bf00      	nop
 800c9de:	e7fd      	b.n	800c9dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c9e0:	f001 ff4a 	bl	800e878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c9e4:	f3ef 8211 	mrs	r2, BASEPRI
 800c9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ec:	f383 8811 	msr	BASEPRI, r3
 800c9f0:	f3bf 8f6f 	isb	sy
 800c9f4:	f3bf 8f4f 	dsb	sy
 800c9f8:	61fa      	str	r2, [r7, #28]
 800c9fa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c9fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c9fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d302      	bcc.n	800ca12 <xQueueGenericSendFromISR+0xc2>
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d12f      	bne.n	800ca72 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ca12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca20:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca22:	683a      	ldr	r2, [r7, #0]
 800ca24:	68b9      	ldr	r1, [r7, #8]
 800ca26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca28:	f000 f912 	bl	800cc50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ca2c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ca30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca34:	d112      	bne.n	800ca5c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d016      	beq.n	800ca6c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca40:	3324      	adds	r3, #36	@ 0x24
 800ca42:	4618      	mov	r0, r3
 800ca44:	f000 ff04 	bl	800d850 <xTaskRemoveFromEventList>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00e      	beq.n	800ca6c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d00b      	beq.n	800ca6c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2201      	movs	r2, #1
 800ca58:	601a      	str	r2, [r3, #0]
 800ca5a:	e007      	b.n	800ca6c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ca5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ca60:	3301      	adds	r3, #1
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	b25a      	sxtb	r2, r3
 800ca66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ca70:	e001      	b.n	800ca76 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca72:	2300      	movs	r3, #0
 800ca74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca78:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ca80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3740      	adds	r7, #64	@ 0x40
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b08c      	sub	sp, #48	@ 0x30
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	60b9      	str	r1, [r7, #8]
 800ca96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800caa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d10b      	bne.n	800cabe <xQueueReceive+0x32>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caaa:	f383 8811 	msr	BASEPRI, r3
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	623b      	str	r3, [r7, #32]
}
 800cab8:	bf00      	nop
 800caba:	bf00      	nop
 800cabc:	e7fd      	b.n	800caba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d103      	bne.n	800cacc <xQueueReceive+0x40>
 800cac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d101      	bne.n	800cad0 <xQueueReceive+0x44>
 800cacc:	2301      	movs	r3, #1
 800cace:	e000      	b.n	800cad2 <xQueueReceive+0x46>
 800cad0:	2300      	movs	r3, #0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d10b      	bne.n	800caee <xQueueReceive+0x62>
	__asm volatile
 800cad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cada:	f383 8811 	msr	BASEPRI, r3
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f3bf 8f4f 	dsb	sy
 800cae6:	61fb      	str	r3, [r7, #28]
}
 800cae8:	bf00      	nop
 800caea:	bf00      	nop
 800caec:	e7fd      	b.n	800caea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800caee:	f001 f875 	bl	800dbdc <xTaskGetSchedulerState>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d102      	bne.n	800cafe <xQueueReceive+0x72>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d101      	bne.n	800cb02 <xQueueReceive+0x76>
 800cafe:	2301      	movs	r3, #1
 800cb00:	e000      	b.n	800cb04 <xQueueReceive+0x78>
 800cb02:	2300      	movs	r3, #0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d10b      	bne.n	800cb20 <xQueueReceive+0x94>
	__asm volatile
 800cb08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0c:	f383 8811 	msr	BASEPRI, r3
 800cb10:	f3bf 8f6f 	isb	sy
 800cb14:	f3bf 8f4f 	dsb	sy
 800cb18:	61bb      	str	r3, [r7, #24]
}
 800cb1a:	bf00      	nop
 800cb1c:	bf00      	nop
 800cb1e:	e7fd      	b.n	800cb1c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb20:	f001 fdca 	bl	800e6b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d01f      	beq.n	800cb70 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb30:	68b9      	ldr	r1, [r7, #8]
 800cb32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb34:	f000 f8f6 	bl	800cd24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3a:	1e5a      	subs	r2, r3, #1
 800cb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb3e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00f      	beq.n	800cb68 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb4a:	3310      	adds	r3, #16
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f000 fe7f 	bl	800d850 <xTaskRemoveFromEventList>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d007      	beq.n	800cb68 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb58:	4b3c      	ldr	r3, [pc, #240]	@ (800cc4c <xQueueReceive+0x1c0>)
 800cb5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb5e:	601a      	str	r2, [r3, #0]
 800cb60:	f3bf 8f4f 	dsb	sy
 800cb64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb68:	f001 fdd8 	bl	800e71c <vPortExitCritical>
				return pdPASS;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e069      	b.n	800cc44 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d103      	bne.n	800cb7e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb76:	f001 fdd1 	bl	800e71c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e062      	b.n	800cc44 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d106      	bne.n	800cb92 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb84:	f107 0310 	add.w	r3, r7, #16
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f000 fec5 	bl	800d918 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb92:	f001 fdc3 	bl	800e71c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb96:	f000 fc2d 	bl	800d3f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb9a:	f001 fd8d 	bl	800e6b8 <vPortEnterCritical>
 800cb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cba4:	b25b      	sxtb	r3, r3
 800cba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cbaa:	d103      	bne.n	800cbb4 <xQueueReceive+0x128>
 800cbac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbba:	b25b      	sxtb	r3, r3
 800cbbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cbc0:	d103      	bne.n	800cbca <xQueueReceive+0x13e>
 800cbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbca:	f001 fda7 	bl	800e71c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbce:	1d3a      	adds	r2, r7, #4
 800cbd0:	f107 0310 	add.w	r3, r7, #16
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 feb4 	bl	800d944 <xTaskCheckForTimeOut>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d123      	bne.n	800cc2a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbe4:	f000 f916 	bl	800ce14 <prvIsQueueEmpty>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d017      	beq.n	800cc1e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf0:	3324      	adds	r3, #36	@ 0x24
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	4611      	mov	r1, r2
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fdd8 	bl	800d7ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cbfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbfe:	f000 f8b7 	bl	800cd70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc02:	f000 fc05 	bl	800d410 <xTaskResumeAll>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d189      	bne.n	800cb20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cc0c:	4b0f      	ldr	r3, [pc, #60]	@ (800cc4c <xQueueReceive+0x1c0>)
 800cc0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc12:	601a      	str	r2, [r3, #0]
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	e780      	b.n	800cb20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cc1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc20:	f000 f8a6 	bl	800cd70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc24:	f000 fbf4 	bl	800d410 <xTaskResumeAll>
 800cc28:	e77a      	b.n	800cb20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cc2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc2c:	f000 f8a0 	bl	800cd70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc30:	f000 fbee 	bl	800d410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc36:	f000 f8ed 	bl	800ce14 <prvIsQueueEmpty>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f43f af6f 	beq.w	800cb20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3730      	adds	r7, #48	@ 0x30
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	e000ed04 	.word	0xe000ed04

0800cc50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d10d      	bne.n	800cc8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d14d      	bne.n	800cd12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f000 ffcc 	bl	800dc18 <xTaskPriorityDisinherit>
 800cc80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2200      	movs	r2, #0
 800cc86:	609a      	str	r2, [r3, #8]
 800cc88:	e043      	b.n	800cd12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d119      	bne.n	800ccc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	6858      	ldr	r0, [r3, #4]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc98:	461a      	mov	r2, r3
 800cc9a:	68b9      	ldr	r1, [r7, #8]
 800cc9c:	f003 fcb5 	bl	801060a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	685a      	ldr	r2, [r3, #4]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cca8:	441a      	add	r2, r3
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	685a      	ldr	r2, [r3, #4]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d32b      	bcc.n	800cd12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	605a      	str	r2, [r3, #4]
 800ccc2:	e026      	b.n	800cd12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	68d8      	ldr	r0, [r3, #12]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cccc:	461a      	mov	r2, r3
 800ccce:	68b9      	ldr	r1, [r7, #8]
 800ccd0:	f003 fc9b 	bl	801060a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	68da      	ldr	r2, [r3, #12]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccdc:	425b      	negs	r3, r3
 800ccde:	441a      	add	r2, r3
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	68da      	ldr	r2, [r3, #12]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d207      	bcs.n	800cd00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	689a      	ldr	r2, [r3, #8]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccf8:	425b      	negs	r3, r3
 800ccfa:	441a      	add	r2, r3
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b02      	cmp	r3, #2
 800cd04:	d105      	bne.n	800cd12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d002      	beq.n	800cd12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	3b01      	subs	r3, #1
 800cd10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	1c5a      	adds	r2, r3, #1
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cd1a:	697b      	ldr	r3, [r7, #20]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3718      	adds	r7, #24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d018      	beq.n	800cd68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	68da      	ldr	r2, [r3, #12]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd3e:	441a      	add	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68da      	ldr	r2, [r3, #12]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d303      	bcc.n	800cd58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	68d9      	ldr	r1, [r3, #12]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd60:	461a      	mov	r2, r3
 800cd62:	6838      	ldr	r0, [r7, #0]
 800cd64:	f003 fc51 	bl	801060a <memcpy>
	}
}
 800cd68:	bf00      	nop
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cd78:	f001 fc9e 	bl	800e6b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd84:	e011      	b.n	800cdaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d012      	beq.n	800cdb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	3324      	adds	r3, #36	@ 0x24
 800cd92:	4618      	mov	r0, r3
 800cd94:	f000 fd5c 	bl	800d850 <xTaskRemoveFromEventList>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d001      	beq.n	800cda2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cd9e:	f000 fe35 	bl	800da0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cda2:	7bfb      	ldrb	r3, [r7, #15]
 800cda4:	3b01      	subs	r3, #1
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cdaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	dce9      	bgt.n	800cd86 <prvUnlockQueue+0x16>
 800cdb2:	e000      	b.n	800cdb6 <prvUnlockQueue+0x46>
					break;
 800cdb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	22ff      	movs	r2, #255	@ 0xff
 800cdba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cdbe:	f001 fcad 	bl	800e71c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cdc2:	f001 fc79 	bl	800e6b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cdcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cdce:	e011      	b.n	800cdf4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d012      	beq.n	800cdfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	3310      	adds	r3, #16
 800cddc:	4618      	mov	r0, r3
 800cdde:	f000 fd37 	bl	800d850 <xTaskRemoveFromEventList>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d001      	beq.n	800cdec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cde8:	f000 fe10 	bl	800da0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cdec:	7bbb      	ldrb	r3, [r7, #14]
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cdf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	dce9      	bgt.n	800cdd0 <prvUnlockQueue+0x60>
 800cdfc:	e000      	b.n	800ce00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cdfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	22ff      	movs	r2, #255	@ 0xff
 800ce04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ce08:	f001 fc88 	bl	800e71c <vPortExitCritical>
}
 800ce0c:	bf00      	nop
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce1c:	f001 fc4c 	bl	800e6b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d102      	bne.n	800ce2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	60fb      	str	r3, [r7, #12]
 800ce2c:	e001      	b.n	800ce32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce32:	f001 fc73 	bl	800e71c <vPortExitCritical>

	return xReturn;
 800ce36:	68fb      	ldr	r3, [r7, #12]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce48:	f001 fc36 	bl	800e6b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d102      	bne.n	800ce5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	60fb      	str	r3, [r7, #12]
 800ce5c:	e001      	b.n	800ce62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce62:	f001 fc5b 	bl	800e71c <vPortExitCritical>

	return xReturn;
 800ce66:	68fb      	ldr	r3, [r7, #12]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	60fb      	str	r3, [r7, #12]
 800ce7e:	e014      	b.n	800ceaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ce80:	4a0f      	ldr	r2, [pc, #60]	@ (800cec0 <vQueueAddToRegistry+0x50>)
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10b      	bne.n	800cea4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ce8c:	490c      	ldr	r1, [pc, #48]	@ (800cec0 <vQueueAddToRegistry+0x50>)
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	683a      	ldr	r2, [r7, #0]
 800ce92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ce96:	4a0a      	ldr	r2, [pc, #40]	@ (800cec0 <vQueueAddToRegistry+0x50>)
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	00db      	lsls	r3, r3, #3
 800ce9c:	4413      	add	r3, r2
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cea2:	e006      	b.n	800ceb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	3301      	adds	r3, #1
 800cea8:	60fb      	str	r3, [r7, #12]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2b07      	cmp	r3, #7
 800ceae:	d9e7      	bls.n	800ce80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ceb0:	bf00      	nop
 800ceb2:	bf00      	nop
 800ceb4:	3714      	adds	r7, #20
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	20001084 	.word	0x20001084

0800cec4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b086      	sub	sp, #24
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ced4:	f001 fbf0 	bl	800e6b8 <vPortEnterCritical>
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cede:	b25b      	sxtb	r3, r3
 800cee0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cee4:	d103      	bne.n	800ceee <vQueueWaitForMessageRestricted+0x2a>
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	2200      	movs	r2, #0
 800ceea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cef4:	b25b      	sxtb	r3, r3
 800cef6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cefa:	d103      	bne.n	800cf04 <vQueueWaitForMessageRestricted+0x40>
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	2200      	movs	r2, #0
 800cf00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf04:	f001 fc0a 	bl	800e71c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d106      	bne.n	800cf1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	3324      	adds	r3, #36	@ 0x24
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	68b9      	ldr	r1, [r7, #8]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f000 fc6d 	bl	800d7f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cf1e:	6978      	ldr	r0, [r7, #20]
 800cf20:	f7ff ff26 	bl	800cd70 <prvUnlockQueue>
	}
 800cf24:	bf00      	nop
 800cf26:	3718      	adds	r7, #24
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b08e      	sub	sp, #56	@ 0x38
 800cf30:	af04      	add	r7, sp, #16
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cf3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10b      	bne.n	800cf58 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	623b      	str	r3, [r7, #32]
}
 800cf52:	bf00      	nop
 800cf54:	bf00      	nop
 800cf56:	e7fd      	b.n	800cf54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cf58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10b      	bne.n	800cf76 <xTaskCreateStatic+0x4a>
	__asm volatile
 800cf5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf62:	f383 8811 	msr	BASEPRI, r3
 800cf66:	f3bf 8f6f 	isb	sy
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	61fb      	str	r3, [r7, #28]
}
 800cf70:	bf00      	nop
 800cf72:	bf00      	nop
 800cf74:	e7fd      	b.n	800cf72 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cf76:	23a8      	movs	r3, #168	@ 0xa8
 800cf78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	2ba8      	cmp	r3, #168	@ 0xa8
 800cf7e:	d00b      	beq.n	800cf98 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	61bb      	str	r3, [r7, #24]
}
 800cf92:	bf00      	nop
 800cf94:	bf00      	nop
 800cf96:	e7fd      	b.n	800cf94 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cf98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cf9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d01e      	beq.n	800cfde <xTaskCreateStatic+0xb2>
 800cfa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d01b      	beq.n	800cfde <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb2:	2202      	movs	r2, #2
 800cfb4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cfb8:	2300      	movs	r3, #0
 800cfba:	9303      	str	r3, [sp, #12]
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbe:	9302      	str	r3, [sp, #8]
 800cfc0:	f107 0314 	add.w	r3, r7, #20
 800cfc4:	9301      	str	r3, [sp, #4]
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	68b9      	ldr	r1, [r7, #8]
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f000 f851 	bl	800d078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cfd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cfd8:	f000 f8f6 	bl	800d1c8 <prvAddNewTaskToReadyList>
 800cfdc:	e001      	b.n	800cfe2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cfe2:	697b      	ldr	r3, [r7, #20]
	}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3728      	adds	r7, #40	@ 0x28
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b08c      	sub	sp, #48	@ 0x30
 800cff0:	af04      	add	r7, sp, #16
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	603b      	str	r3, [r7, #0]
 800cff8:	4613      	mov	r3, r2
 800cffa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cffc:	88fb      	ldrh	r3, [r7, #6]
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4618      	mov	r0, r3
 800d002:	f001 fc7b 	bl	800e8fc <pvPortMalloc>
 800d006:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d00e      	beq.n	800d02c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d00e:	20a8      	movs	r0, #168	@ 0xa8
 800d010:	f001 fc74 	bl	800e8fc <pvPortMalloc>
 800d014:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d016:	69fb      	ldr	r3, [r7, #28]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d003      	beq.n	800d024 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	697a      	ldr	r2, [r7, #20]
 800d020:	631a      	str	r2, [r3, #48]	@ 0x30
 800d022:	e005      	b.n	800d030 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d024:	6978      	ldr	r0, [r7, #20]
 800d026:	f001 fd37 	bl	800ea98 <vPortFree>
 800d02a:	e001      	b.n	800d030 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d02c:	2300      	movs	r3, #0
 800d02e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d017      	beq.n	800d066 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	2200      	movs	r2, #0
 800d03a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d03e:	88fa      	ldrh	r2, [r7, #6]
 800d040:	2300      	movs	r3, #0
 800d042:	9303      	str	r3, [sp, #12]
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	9302      	str	r3, [sp, #8]
 800d048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d04a:	9301      	str	r3, [sp, #4]
 800d04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	68b9      	ldr	r1, [r7, #8]
 800d054:	68f8      	ldr	r0, [r7, #12]
 800d056:	f000 f80f 	bl	800d078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d05a:	69f8      	ldr	r0, [r7, #28]
 800d05c:	f000 f8b4 	bl	800d1c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d060:	2301      	movs	r3, #1
 800d062:	61bb      	str	r3, [r7, #24]
 800d064:	e002      	b.n	800d06c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d06a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d06c:	69bb      	ldr	r3, [r7, #24]
	}
 800d06e:	4618      	mov	r0, r3
 800d070:	3720      	adds	r7, #32
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
	...

0800d078 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b088      	sub	sp, #32
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
 800d084:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d088:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	461a      	mov	r2, r3
 800d090:	21a5      	movs	r1, #165	@ 0xa5
 800d092:	f003 f9dc 	bl	801044e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0a0:	3b01      	subs	r3, #1
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	4413      	add	r3, r2
 800d0a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	f023 0307 	bic.w	r3, r3, #7
 800d0ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	f003 0307 	and.w	r3, r3, #7
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00b      	beq.n	800d0d2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	617b      	str	r3, [r7, #20]
}
 800d0cc:	bf00      	nop
 800d0ce:	bf00      	nop
 800d0d0:	e7fd      	b.n	800d0ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d01f      	beq.n	800d118 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d0d8:	2300      	movs	r3, #0
 800d0da:	61fb      	str	r3, [r7, #28]
 800d0dc:	e012      	b.n	800d104 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d0de:	68ba      	ldr	r2, [r7, #8]
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	7819      	ldrb	r1, [r3, #0]
 800d0e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	3334      	adds	r3, #52	@ 0x34
 800d0ee:	460a      	mov	r2, r1
 800d0f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	69fb      	ldr	r3, [r7, #28]
 800d0f6:	4413      	add	r3, r2
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d006      	beq.n	800d10c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	3301      	adds	r3, #1
 800d102:	61fb      	str	r3, [r7, #28]
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	2b0f      	cmp	r3, #15
 800d108:	d9e9      	bls.n	800d0de <prvInitialiseNewTask+0x66>
 800d10a:	e000      	b.n	800d10e <prvInitialiseNewTask+0x96>
			{
				break;
 800d10c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d116:	e003      	b.n	800d120 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d11a:	2200      	movs	r2, #0
 800d11c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d122:	2b37      	cmp	r3, #55	@ 0x37
 800d124:	d901      	bls.n	800d12a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d126:	2337      	movs	r3, #55	@ 0x37
 800d128:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d12c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d12e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d134:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d138:	2200      	movs	r2, #0
 800d13a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d13e:	3304      	adds	r3, #4
 800d140:	4618      	mov	r0, r3
 800d142:	f7ff f965 	bl	800c410 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d148:	3318      	adds	r3, #24
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7ff f960 	bl	800c410 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d154:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d158:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d15e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d164:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d168:	2200      	movs	r2, #0
 800d16a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d170:	2200      	movs	r2, #0
 800d172:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d178:	3354      	adds	r3, #84	@ 0x54
 800d17a:	224c      	movs	r2, #76	@ 0x4c
 800d17c:	2100      	movs	r1, #0
 800d17e:	4618      	mov	r0, r3
 800d180:	f003 f965 	bl	801044e <memset>
 800d184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d186:	4a0d      	ldr	r2, [pc, #52]	@ (800d1bc <prvInitialiseNewTask+0x144>)
 800d188:	659a      	str	r2, [r3, #88]	@ 0x58
 800d18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d18c:	4a0c      	ldr	r2, [pc, #48]	@ (800d1c0 <prvInitialiseNewTask+0x148>)
 800d18e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d192:	4a0c      	ldr	r2, [pc, #48]	@ (800d1c4 <prvInitialiseNewTask+0x14c>)
 800d194:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d196:	683a      	ldr	r2, [r7, #0]
 800d198:	68f9      	ldr	r1, [r7, #12]
 800d19a:	69b8      	ldr	r0, [r7, #24]
 800d19c:	f001 f95a 	bl	800e454 <pxPortInitialiseStack>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d002      	beq.n	800d1b2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1b2:	bf00      	nop
 800d1b4:	3720      	adds	r7, #32
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	20004680 	.word	0x20004680
 800d1c0:	200046e8 	.word	0x200046e8
 800d1c4:	20004750 	.word	0x20004750

0800d1c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d1d0:	f001 fa72 	bl	800e6b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d1d4:	4b2d      	ldr	r3, [pc, #180]	@ (800d28c <prvAddNewTaskToReadyList+0xc4>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	4a2c      	ldr	r2, [pc, #176]	@ (800d28c <prvAddNewTaskToReadyList+0xc4>)
 800d1dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d1de:	4b2c      	ldr	r3, [pc, #176]	@ (800d290 <prvAddNewTaskToReadyList+0xc8>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d109      	bne.n	800d1fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d1e6:	4a2a      	ldr	r2, [pc, #168]	@ (800d290 <prvAddNewTaskToReadyList+0xc8>)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d1ec:	4b27      	ldr	r3, [pc, #156]	@ (800d28c <prvAddNewTaskToReadyList+0xc4>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d110      	bne.n	800d216 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d1f4:	f000 fc2e 	bl	800da54 <prvInitialiseTaskLists>
 800d1f8:	e00d      	b.n	800d216 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d1fa:	4b26      	ldr	r3, [pc, #152]	@ (800d294 <prvAddNewTaskToReadyList+0xcc>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d109      	bne.n	800d216 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d202:	4b23      	ldr	r3, [pc, #140]	@ (800d290 <prvAddNewTaskToReadyList+0xc8>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d802      	bhi.n	800d216 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d210:	4a1f      	ldr	r2, [pc, #124]	@ (800d290 <prvAddNewTaskToReadyList+0xc8>)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d216:	4b20      	ldr	r3, [pc, #128]	@ (800d298 <prvAddNewTaskToReadyList+0xd0>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	3301      	adds	r3, #1
 800d21c:	4a1e      	ldr	r2, [pc, #120]	@ (800d298 <prvAddNewTaskToReadyList+0xd0>)
 800d21e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d220:	4b1d      	ldr	r3, [pc, #116]	@ (800d298 <prvAddNewTaskToReadyList+0xd0>)
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d22c:	4b1b      	ldr	r3, [pc, #108]	@ (800d29c <prvAddNewTaskToReadyList+0xd4>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	429a      	cmp	r2, r3
 800d232:	d903      	bls.n	800d23c <prvAddNewTaskToReadyList+0x74>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d238:	4a18      	ldr	r2, [pc, #96]	@ (800d29c <prvAddNewTaskToReadyList+0xd4>)
 800d23a:	6013      	str	r3, [r2, #0]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d240:	4613      	mov	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	4a15      	ldr	r2, [pc, #84]	@ (800d2a0 <prvAddNewTaskToReadyList+0xd8>)
 800d24a:	441a      	add	r2, r3
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	3304      	adds	r3, #4
 800d250:	4619      	mov	r1, r3
 800d252:	4610      	mov	r0, r2
 800d254:	f7ff f8e9 	bl	800c42a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d258:	f001 fa60 	bl	800e71c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d25c:	4b0d      	ldr	r3, [pc, #52]	@ (800d294 <prvAddNewTaskToReadyList+0xcc>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d00e      	beq.n	800d282 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d264:	4b0a      	ldr	r3, [pc, #40]	@ (800d290 <prvAddNewTaskToReadyList+0xc8>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d26e:	429a      	cmp	r2, r3
 800d270:	d207      	bcs.n	800d282 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d272:	4b0c      	ldr	r3, [pc, #48]	@ (800d2a4 <prvAddNewTaskToReadyList+0xdc>)
 800d274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d278:	601a      	str	r2, [r3, #0]
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d282:	bf00      	nop
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	20001598 	.word	0x20001598
 800d290:	200010c4 	.word	0x200010c4
 800d294:	200015a4 	.word	0x200015a4
 800d298:	200015b4 	.word	0x200015b4
 800d29c:	200015a0 	.word	0x200015a0
 800d2a0:	200010c8 	.word	0x200010c8
 800d2a4:	e000ed04 	.word	0xe000ed04

0800d2a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d018      	beq.n	800d2ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d2ba:	4b14      	ldr	r3, [pc, #80]	@ (800d30c <vTaskDelay+0x64>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00b      	beq.n	800d2da <vTaskDelay+0x32>
	__asm volatile
 800d2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c6:	f383 8811 	msr	BASEPRI, r3
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	60bb      	str	r3, [r7, #8]
}
 800d2d4:	bf00      	nop
 800d2d6:	bf00      	nop
 800d2d8:	e7fd      	b.n	800d2d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d2da:	f000 f88b 	bl	800d3f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d2de:	2100      	movs	r1, #0
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 fd09 	bl	800dcf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d2e6:	f000 f893 	bl	800d410 <xTaskResumeAll>
 800d2ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d107      	bne.n	800d302 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d2f2:	4b07      	ldr	r3, [pc, #28]	@ (800d310 <vTaskDelay+0x68>)
 800d2f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2f8:	601a      	str	r2, [r3, #0]
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d302:	bf00      	nop
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	200015c0 	.word	0x200015c0
 800d310:	e000ed04 	.word	0xe000ed04

0800d314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08a      	sub	sp, #40	@ 0x28
 800d318:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d31a:	2300      	movs	r3, #0
 800d31c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d31e:	2300      	movs	r3, #0
 800d320:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d322:	463a      	mov	r2, r7
 800d324:	1d39      	adds	r1, r7, #4
 800d326:	f107 0308 	add.w	r3, r7, #8
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7ff f81c 	bl	800c368 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d330:	6839      	ldr	r1, [r7, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	9202      	str	r2, [sp, #8]
 800d338:	9301      	str	r3, [sp, #4]
 800d33a:	2300      	movs	r3, #0
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	2300      	movs	r3, #0
 800d340:	460a      	mov	r2, r1
 800d342:	4924      	ldr	r1, [pc, #144]	@ (800d3d4 <vTaskStartScheduler+0xc0>)
 800d344:	4824      	ldr	r0, [pc, #144]	@ (800d3d8 <vTaskStartScheduler+0xc4>)
 800d346:	f7ff fdf1 	bl	800cf2c <xTaskCreateStatic>
 800d34a:	4603      	mov	r3, r0
 800d34c:	4a23      	ldr	r2, [pc, #140]	@ (800d3dc <vTaskStartScheduler+0xc8>)
 800d34e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d350:	4b22      	ldr	r3, [pc, #136]	@ (800d3dc <vTaskStartScheduler+0xc8>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d002      	beq.n	800d35e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d358:	2301      	movs	r3, #1
 800d35a:	617b      	str	r3, [r7, #20]
 800d35c:	e001      	b.n	800d362 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d35e:	2300      	movs	r3, #0
 800d360:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	2b01      	cmp	r3, #1
 800d366:	d102      	bne.n	800d36e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d368:	f000 fd1a 	bl	800dda0 <xTimerCreateTimerTask>
 800d36c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	2b01      	cmp	r3, #1
 800d372:	d11b      	bne.n	800d3ac <vTaskStartScheduler+0x98>
	__asm volatile
 800d374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d378:	f383 8811 	msr	BASEPRI, r3
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	f3bf 8f4f 	dsb	sy
 800d384:	613b      	str	r3, [r7, #16]
}
 800d386:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d388:	4b15      	ldr	r3, [pc, #84]	@ (800d3e0 <vTaskStartScheduler+0xcc>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	3354      	adds	r3, #84	@ 0x54
 800d38e:	4a15      	ldr	r2, [pc, #84]	@ (800d3e4 <vTaskStartScheduler+0xd0>)
 800d390:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d392:	4b15      	ldr	r3, [pc, #84]	@ (800d3e8 <vTaskStartScheduler+0xd4>)
 800d394:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d398:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d39a:	4b14      	ldr	r3, [pc, #80]	@ (800d3ec <vTaskStartScheduler+0xd8>)
 800d39c:	2201      	movs	r2, #1
 800d39e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d3a0:	4b13      	ldr	r3, [pc, #76]	@ (800d3f0 <vTaskStartScheduler+0xdc>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d3a6:	f001 f8e3 	bl	800e570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d3aa:	e00f      	b.n	800d3cc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3b2:	d10b      	bne.n	800d3cc <vTaskStartScheduler+0xb8>
	__asm volatile
 800d3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	60fb      	str	r3, [r7, #12]
}
 800d3c6:	bf00      	nop
 800d3c8:	bf00      	nop
 800d3ca:	e7fd      	b.n	800d3c8 <vTaskStartScheduler+0xb4>
}
 800d3cc:	bf00      	nop
 800d3ce:	3718      	adds	r7, #24
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	080123cc 	.word	0x080123cc
 800d3d8:	0800da25 	.word	0x0800da25
 800d3dc:	200015bc 	.word	0x200015bc
 800d3e0:	200010c4 	.word	0x200010c4
 800d3e4:	20000124 	.word	0x20000124
 800d3e8:	200015b8 	.word	0x200015b8
 800d3ec:	200015a4 	.word	0x200015a4
 800d3f0:	2000159c 	.word	0x2000159c

0800d3f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d3f8:	4b04      	ldr	r3, [pc, #16]	@ (800d40c <vTaskSuspendAll+0x18>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	4a03      	ldr	r2, [pc, #12]	@ (800d40c <vTaskSuspendAll+0x18>)
 800d400:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d402:	bf00      	nop
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr
 800d40c:	200015c0 	.word	0x200015c0

0800d410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d416:	2300      	movs	r3, #0
 800d418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d41a:	2300      	movs	r3, #0
 800d41c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d41e:	4b42      	ldr	r3, [pc, #264]	@ (800d528 <xTaskResumeAll+0x118>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d10b      	bne.n	800d43e <xTaskResumeAll+0x2e>
	__asm volatile
 800d426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d42a:	f383 8811 	msr	BASEPRI, r3
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	f3bf 8f4f 	dsb	sy
 800d436:	603b      	str	r3, [r7, #0]
}
 800d438:	bf00      	nop
 800d43a:	bf00      	nop
 800d43c:	e7fd      	b.n	800d43a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d43e:	f001 f93b 	bl	800e6b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d442:	4b39      	ldr	r3, [pc, #228]	@ (800d528 <xTaskResumeAll+0x118>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	3b01      	subs	r3, #1
 800d448:	4a37      	ldr	r2, [pc, #220]	@ (800d528 <xTaskResumeAll+0x118>)
 800d44a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d44c:	4b36      	ldr	r3, [pc, #216]	@ (800d528 <xTaskResumeAll+0x118>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d162      	bne.n	800d51a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d454:	4b35      	ldr	r3, [pc, #212]	@ (800d52c <xTaskResumeAll+0x11c>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d05e      	beq.n	800d51a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d45c:	e02f      	b.n	800d4be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d45e:	4b34      	ldr	r3, [pc, #208]	@ (800d530 <xTaskResumeAll+0x120>)
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	3318      	adds	r3, #24
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7ff f83a 	bl	800c4e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	3304      	adds	r3, #4
 800d474:	4618      	mov	r0, r3
 800d476:	f7ff f835 	bl	800c4e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d47e:	4b2d      	ldr	r3, [pc, #180]	@ (800d534 <xTaskResumeAll+0x124>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	429a      	cmp	r2, r3
 800d484:	d903      	bls.n	800d48e <xTaskResumeAll+0x7e>
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d48a:	4a2a      	ldr	r2, [pc, #168]	@ (800d534 <xTaskResumeAll+0x124>)
 800d48c:	6013      	str	r3, [r2, #0]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d492:	4613      	mov	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4413      	add	r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	4a27      	ldr	r2, [pc, #156]	@ (800d538 <xTaskResumeAll+0x128>)
 800d49c:	441a      	add	r2, r3
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	4610      	mov	r0, r2
 800d4a6:	f7fe ffc0 	bl	800c42a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ae:	4b23      	ldr	r3, [pc, #140]	@ (800d53c <xTaskResumeAll+0x12c>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d302      	bcc.n	800d4be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d4b8:	4b21      	ldr	r3, [pc, #132]	@ (800d540 <xTaskResumeAll+0x130>)
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d4be:	4b1c      	ldr	r3, [pc, #112]	@ (800d530 <xTaskResumeAll+0x120>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d1cb      	bne.n	800d45e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d001      	beq.n	800d4d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d4cc:	f000 fb66 	bl	800db9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d4d0:	4b1c      	ldr	r3, [pc, #112]	@ (800d544 <xTaskResumeAll+0x134>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d010      	beq.n	800d4fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d4dc:	f000 f846 	bl	800d56c <xTaskIncrementTick>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d002      	beq.n	800d4ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d4e6:	4b16      	ldr	r3, [pc, #88]	@ (800d540 <xTaskResumeAll+0x130>)
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1f1      	bne.n	800d4dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d4f8:	4b12      	ldr	r3, [pc, #72]	@ (800d544 <xTaskResumeAll+0x134>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d4fe:	4b10      	ldr	r3, [pc, #64]	@ (800d540 <xTaskResumeAll+0x130>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d009      	beq.n	800d51a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d506:	2301      	movs	r3, #1
 800d508:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d50a:	4b0f      	ldr	r3, [pc, #60]	@ (800d548 <xTaskResumeAll+0x138>)
 800d50c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d510:	601a      	str	r2, [r3, #0]
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d51a:	f001 f8ff 	bl	800e71c <vPortExitCritical>

	return xAlreadyYielded;
 800d51e:	68bb      	ldr	r3, [r7, #8]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3710      	adds	r7, #16
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	200015c0 	.word	0x200015c0
 800d52c:	20001598 	.word	0x20001598
 800d530:	20001558 	.word	0x20001558
 800d534:	200015a0 	.word	0x200015a0
 800d538:	200010c8 	.word	0x200010c8
 800d53c:	200010c4 	.word	0x200010c4
 800d540:	200015ac 	.word	0x200015ac
 800d544:	200015a8 	.word	0x200015a8
 800d548:	e000ed04 	.word	0xe000ed04

0800d54c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d552:	4b05      	ldr	r3, [pc, #20]	@ (800d568 <xTaskGetTickCount+0x1c>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d558:	687b      	ldr	r3, [r7, #4]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	370c      	adds	r7, #12
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr
 800d566:	bf00      	nop
 800d568:	2000159c 	.word	0x2000159c

0800d56c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d572:	2300      	movs	r3, #0
 800d574:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d576:	4b4f      	ldr	r3, [pc, #316]	@ (800d6b4 <xTaskIncrementTick+0x148>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f040 8090 	bne.w	800d6a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d580:	4b4d      	ldr	r3, [pc, #308]	@ (800d6b8 <xTaskIncrementTick+0x14c>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	3301      	adds	r3, #1
 800d586:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d588:	4a4b      	ldr	r2, [pc, #300]	@ (800d6b8 <xTaskIncrementTick+0x14c>)
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d121      	bne.n	800d5d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d594:	4b49      	ldr	r3, [pc, #292]	@ (800d6bc <xTaskIncrementTick+0x150>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00b      	beq.n	800d5b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	603b      	str	r3, [r7, #0]
}
 800d5b0:	bf00      	nop
 800d5b2:	bf00      	nop
 800d5b4:	e7fd      	b.n	800d5b2 <xTaskIncrementTick+0x46>
 800d5b6:	4b41      	ldr	r3, [pc, #260]	@ (800d6bc <xTaskIncrementTick+0x150>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	60fb      	str	r3, [r7, #12]
 800d5bc:	4b40      	ldr	r3, [pc, #256]	@ (800d6c0 <xTaskIncrementTick+0x154>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a3e      	ldr	r2, [pc, #248]	@ (800d6bc <xTaskIncrementTick+0x150>)
 800d5c2:	6013      	str	r3, [r2, #0]
 800d5c4:	4a3e      	ldr	r2, [pc, #248]	@ (800d6c0 <xTaskIncrementTick+0x154>)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6013      	str	r3, [r2, #0]
 800d5ca:	4b3e      	ldr	r3, [pc, #248]	@ (800d6c4 <xTaskIncrementTick+0x158>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	4a3c      	ldr	r2, [pc, #240]	@ (800d6c4 <xTaskIncrementTick+0x158>)
 800d5d2:	6013      	str	r3, [r2, #0]
 800d5d4:	f000 fae2 	bl	800db9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d5d8:	4b3b      	ldr	r3, [pc, #236]	@ (800d6c8 <xTaskIncrementTick+0x15c>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	693a      	ldr	r2, [r7, #16]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d349      	bcc.n	800d676 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5e2:	4b36      	ldr	r3, [pc, #216]	@ (800d6bc <xTaskIncrementTick+0x150>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d104      	bne.n	800d5f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5ec:	4b36      	ldr	r3, [pc, #216]	@ (800d6c8 <xTaskIncrementTick+0x15c>)
 800d5ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d5f2:	601a      	str	r2, [r3, #0]
					break;
 800d5f4:	e03f      	b.n	800d676 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5f6:	4b31      	ldr	r3, [pc, #196]	@ (800d6bc <xTaskIncrementTick+0x150>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d606:	693a      	ldr	r2, [r7, #16]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d203      	bcs.n	800d616 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d60e:	4a2e      	ldr	r2, [pc, #184]	@ (800d6c8 <xTaskIncrementTick+0x15c>)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d614:	e02f      	b.n	800d676 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	3304      	adds	r3, #4
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7fe ff62 	bl	800c4e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d624:	2b00      	cmp	r3, #0
 800d626:	d004      	beq.n	800d632 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	3318      	adds	r3, #24
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fe ff59 	bl	800c4e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d636:	4b25      	ldr	r3, [pc, #148]	@ (800d6cc <xTaskIncrementTick+0x160>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d903      	bls.n	800d646 <xTaskIncrementTick+0xda>
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d642:	4a22      	ldr	r2, [pc, #136]	@ (800d6cc <xTaskIncrementTick+0x160>)
 800d644:	6013      	str	r3, [r2, #0]
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d64a:	4613      	mov	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4413      	add	r3, r2
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	4a1f      	ldr	r2, [pc, #124]	@ (800d6d0 <xTaskIncrementTick+0x164>)
 800d654:	441a      	add	r2, r3
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	3304      	adds	r3, #4
 800d65a:	4619      	mov	r1, r3
 800d65c:	4610      	mov	r0, r2
 800d65e:	f7fe fee4 	bl	800c42a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d666:	4b1b      	ldr	r3, [pc, #108]	@ (800d6d4 <xTaskIncrementTick+0x168>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d3b8      	bcc.n	800d5e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d670:	2301      	movs	r3, #1
 800d672:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d674:	e7b5      	b.n	800d5e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d676:	4b17      	ldr	r3, [pc, #92]	@ (800d6d4 <xTaskIncrementTick+0x168>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d67c:	4914      	ldr	r1, [pc, #80]	@ (800d6d0 <xTaskIncrementTick+0x164>)
 800d67e:	4613      	mov	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	4413      	add	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	440b      	add	r3, r1
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d901      	bls.n	800d692 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d68e:	2301      	movs	r3, #1
 800d690:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d692:	4b11      	ldr	r3, [pc, #68]	@ (800d6d8 <xTaskIncrementTick+0x16c>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d007      	beq.n	800d6aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d69a:	2301      	movs	r3, #1
 800d69c:	617b      	str	r3, [r7, #20]
 800d69e:	e004      	b.n	800d6aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d6a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d6dc <xTaskIncrementTick+0x170>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	4a0d      	ldr	r2, [pc, #52]	@ (800d6dc <xTaskIncrementTick+0x170>)
 800d6a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d6aa:	697b      	ldr	r3, [r7, #20]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3718      	adds	r7, #24
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	200015c0 	.word	0x200015c0
 800d6b8:	2000159c 	.word	0x2000159c
 800d6bc:	20001550 	.word	0x20001550
 800d6c0:	20001554 	.word	0x20001554
 800d6c4:	200015b0 	.word	0x200015b0
 800d6c8:	200015b8 	.word	0x200015b8
 800d6cc:	200015a0 	.word	0x200015a0
 800d6d0:	200010c8 	.word	0x200010c8
 800d6d4:	200010c4 	.word	0x200010c4
 800d6d8:	200015ac 	.word	0x200015ac
 800d6dc:	200015a8 	.word	0x200015a8

0800d6e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b085      	sub	sp, #20
 800d6e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d6e6:	4b2b      	ldr	r3, [pc, #172]	@ (800d794 <vTaskSwitchContext+0xb4>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d003      	beq.n	800d6f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d6ee:	4b2a      	ldr	r3, [pc, #168]	@ (800d798 <vTaskSwitchContext+0xb8>)
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d6f4:	e047      	b.n	800d786 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d6f6:	4b28      	ldr	r3, [pc, #160]	@ (800d798 <vTaskSwitchContext+0xb8>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6fc:	4b27      	ldr	r3, [pc, #156]	@ (800d79c <vTaskSwitchContext+0xbc>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	60fb      	str	r3, [r7, #12]
 800d702:	e011      	b.n	800d728 <vTaskSwitchContext+0x48>
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10b      	bne.n	800d722 <vTaskSwitchContext+0x42>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	607b      	str	r3, [r7, #4]
}
 800d71c:	bf00      	nop
 800d71e:	bf00      	nop
 800d720:	e7fd      	b.n	800d71e <vTaskSwitchContext+0x3e>
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	3b01      	subs	r3, #1
 800d726:	60fb      	str	r3, [r7, #12]
 800d728:	491d      	ldr	r1, [pc, #116]	@ (800d7a0 <vTaskSwitchContext+0xc0>)
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	4613      	mov	r3, r2
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	4413      	add	r3, r2
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	440b      	add	r3, r1
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d0e3      	beq.n	800d704 <vTaskSwitchContext+0x24>
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	4613      	mov	r3, r2
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	4413      	add	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4a16      	ldr	r2, [pc, #88]	@ (800d7a0 <vTaskSwitchContext+0xc0>)
 800d748:	4413      	add	r3, r2
 800d74a:	60bb      	str	r3, [r7, #8]
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	685a      	ldr	r2, [r3, #4]
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	605a      	str	r2, [r3, #4]
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	685a      	ldr	r2, [r3, #4]
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	3308      	adds	r3, #8
 800d75e:	429a      	cmp	r2, r3
 800d760:	d104      	bne.n	800d76c <vTaskSwitchContext+0x8c>
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	685a      	ldr	r2, [r3, #4]
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	605a      	str	r2, [r3, #4]
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	4a0c      	ldr	r2, [pc, #48]	@ (800d7a4 <vTaskSwitchContext+0xc4>)
 800d774:	6013      	str	r3, [r2, #0]
 800d776:	4a09      	ldr	r2, [pc, #36]	@ (800d79c <vTaskSwitchContext+0xbc>)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d77c:	4b09      	ldr	r3, [pc, #36]	@ (800d7a4 <vTaskSwitchContext+0xc4>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	3354      	adds	r3, #84	@ 0x54
 800d782:	4a09      	ldr	r2, [pc, #36]	@ (800d7a8 <vTaskSwitchContext+0xc8>)
 800d784:	6013      	str	r3, [r2, #0]
}
 800d786:	bf00      	nop
 800d788:	3714      	adds	r7, #20
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	200015c0 	.word	0x200015c0
 800d798:	200015ac 	.word	0x200015ac
 800d79c:	200015a0 	.word	0x200015a0
 800d7a0:	200010c8 	.word	0x200010c8
 800d7a4:	200010c4 	.word	0x200010c4
 800d7a8:	20000124 	.word	0x20000124

0800d7ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d10b      	bne.n	800d7d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c0:	f383 8811 	msr	BASEPRI, r3
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	60fb      	str	r3, [r7, #12]
}
 800d7ce:	bf00      	nop
 800d7d0:	bf00      	nop
 800d7d2:	e7fd      	b.n	800d7d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d7d4:	4b07      	ldr	r3, [pc, #28]	@ (800d7f4 <vTaskPlaceOnEventList+0x48>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	3318      	adds	r3, #24
 800d7da:	4619      	mov	r1, r3
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f7fe fe48 	bl	800c472 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	6838      	ldr	r0, [r7, #0]
 800d7e6:	f000 fa87 	bl	800dcf8 <prvAddCurrentTaskToDelayedList>
}
 800d7ea:	bf00      	nop
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	200010c4 	.word	0x200010c4

0800d7f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b086      	sub	sp, #24
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d10b      	bne.n	800d822 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d80e:	f383 8811 	msr	BASEPRI, r3
 800d812:	f3bf 8f6f 	isb	sy
 800d816:	f3bf 8f4f 	dsb	sy
 800d81a:	617b      	str	r3, [r7, #20]
}
 800d81c:	bf00      	nop
 800d81e:	bf00      	nop
 800d820:	e7fd      	b.n	800d81e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d822:	4b0a      	ldr	r3, [pc, #40]	@ (800d84c <vTaskPlaceOnEventListRestricted+0x54>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	3318      	adds	r3, #24
 800d828:	4619      	mov	r1, r3
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	f7fe fdfd 	bl	800c42a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d002      	beq.n	800d83c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d83a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d83c:	6879      	ldr	r1, [r7, #4]
 800d83e:	68b8      	ldr	r0, [r7, #8]
 800d840:	f000 fa5a 	bl	800dcf8 <prvAddCurrentTaskToDelayedList>
	}
 800d844:	bf00      	nop
 800d846:	3718      	adds	r7, #24
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	200010c4 	.word	0x200010c4

0800d850 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b086      	sub	sp, #24
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d10b      	bne.n	800d87e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	60fb      	str	r3, [r7, #12]
}
 800d878:	bf00      	nop
 800d87a:	bf00      	nop
 800d87c:	e7fd      	b.n	800d87a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	3318      	adds	r3, #24
 800d882:	4618      	mov	r0, r3
 800d884:	f7fe fe2e 	bl	800c4e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d888:	4b1d      	ldr	r3, [pc, #116]	@ (800d900 <xTaskRemoveFromEventList+0xb0>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d11d      	bne.n	800d8cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	3304      	adds	r3, #4
 800d894:	4618      	mov	r0, r3
 800d896:	f7fe fe25 	bl	800c4e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d89e:	4b19      	ldr	r3, [pc, #100]	@ (800d904 <xTaskRemoveFromEventList+0xb4>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d903      	bls.n	800d8ae <xTaskRemoveFromEventList+0x5e>
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8aa:	4a16      	ldr	r2, [pc, #88]	@ (800d904 <xTaskRemoveFromEventList+0xb4>)
 800d8ac:	6013      	str	r3, [r2, #0]
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4a13      	ldr	r2, [pc, #76]	@ (800d908 <xTaskRemoveFromEventList+0xb8>)
 800d8bc:	441a      	add	r2, r3
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	3304      	adds	r3, #4
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	4610      	mov	r0, r2
 800d8c6:	f7fe fdb0 	bl	800c42a <vListInsertEnd>
 800d8ca:	e005      	b.n	800d8d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	3318      	adds	r3, #24
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	480e      	ldr	r0, [pc, #56]	@ (800d90c <xTaskRemoveFromEventList+0xbc>)
 800d8d4:	f7fe fda9 	bl	800c42a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d910 <xTaskRemoveFromEventList+0xc0>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d905      	bls.n	800d8f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d8ea:	4b0a      	ldr	r3, [pc, #40]	@ (800d914 <xTaskRemoveFromEventList+0xc4>)
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	601a      	str	r2, [r3, #0]
 800d8f0:	e001      	b.n	800d8f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d8f6:	697b      	ldr	r3, [r7, #20]
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3718      	adds	r7, #24
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	200015c0 	.word	0x200015c0
 800d904:	200015a0 	.word	0x200015a0
 800d908:	200010c8 	.word	0x200010c8
 800d90c:	20001558 	.word	0x20001558
 800d910:	200010c4 	.word	0x200010c4
 800d914:	200015ac 	.word	0x200015ac

0800d918 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d920:	4b06      	ldr	r3, [pc, #24]	@ (800d93c <vTaskInternalSetTimeOutState+0x24>)
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d928:	4b05      	ldr	r3, [pc, #20]	@ (800d940 <vTaskInternalSetTimeOutState+0x28>)
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	605a      	str	r2, [r3, #4]
}
 800d930:	bf00      	nop
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	200015b0 	.word	0x200015b0
 800d940:	2000159c 	.word	0x2000159c

0800d944 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b088      	sub	sp, #32
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d10b      	bne.n	800d96c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	613b      	str	r3, [r7, #16]
}
 800d966:	bf00      	nop
 800d968:	bf00      	nop
 800d96a:	e7fd      	b.n	800d968 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d10b      	bne.n	800d98a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	60fb      	str	r3, [r7, #12]
}
 800d984:	bf00      	nop
 800d986:	bf00      	nop
 800d988:	e7fd      	b.n	800d986 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d98a:	f000 fe95 	bl	800e6b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d98e:	4b1d      	ldr	r3, [pc, #116]	@ (800da04 <xTaskCheckForTimeOut+0xc0>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	69ba      	ldr	r2, [r7, #24]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9a6:	d102      	bne.n	800d9ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	61fb      	str	r3, [r7, #28]
 800d9ac:	e023      	b.n	800d9f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	4b15      	ldr	r3, [pc, #84]	@ (800da08 <xTaskCheckForTimeOut+0xc4>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d007      	beq.n	800d9ca <xTaskCheckForTimeOut+0x86>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	69ba      	ldr	r2, [r7, #24]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d302      	bcc.n	800d9ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	61fb      	str	r3, [r7, #28]
 800d9c8:	e015      	b.n	800d9f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	697a      	ldr	r2, [r7, #20]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d20b      	bcs.n	800d9ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	1ad2      	subs	r2, r2, r3
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7ff ff99 	bl	800d918 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	61fb      	str	r3, [r7, #28]
 800d9ea:	e004      	b.n	800d9f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d9f6:	f000 fe91 	bl	800e71c <vPortExitCritical>

	return xReturn;
 800d9fa:	69fb      	ldr	r3, [r7, #28]
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3720      	adds	r7, #32
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	2000159c 	.word	0x2000159c
 800da08:	200015b0 	.word	0x200015b0

0800da0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800da0c:	b480      	push	{r7}
 800da0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800da10:	4b03      	ldr	r3, [pc, #12]	@ (800da20 <vTaskMissedYield+0x14>)
 800da12:	2201      	movs	r2, #1
 800da14:	601a      	str	r2, [r3, #0]
}
 800da16:	bf00      	nop
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr
 800da20:	200015ac 	.word	0x200015ac

0800da24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800da2c:	f000 f852 	bl	800dad4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800da30:	4b06      	ldr	r3, [pc, #24]	@ (800da4c <prvIdleTask+0x28>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d9f9      	bls.n	800da2c <prvIdleTask+0x8>
			{
				taskYIELD();
 800da38:	4b05      	ldr	r3, [pc, #20]	@ (800da50 <prvIdleTask+0x2c>)
 800da3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da3e:	601a      	str	r2, [r3, #0]
 800da40:	f3bf 8f4f 	dsb	sy
 800da44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800da48:	e7f0      	b.n	800da2c <prvIdleTask+0x8>
 800da4a:	bf00      	nop
 800da4c:	200010c8 	.word	0x200010c8
 800da50:	e000ed04 	.word	0xe000ed04

0800da54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da5a:	2300      	movs	r3, #0
 800da5c:	607b      	str	r3, [r7, #4]
 800da5e:	e00c      	b.n	800da7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	4613      	mov	r3, r2
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	4413      	add	r3, r2
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4a12      	ldr	r2, [pc, #72]	@ (800dab4 <prvInitialiseTaskLists+0x60>)
 800da6c:	4413      	add	r3, r2
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fe fcae 	bl	800c3d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	3301      	adds	r3, #1
 800da78:	607b      	str	r3, [r7, #4]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2b37      	cmp	r3, #55	@ 0x37
 800da7e:	d9ef      	bls.n	800da60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800da80:	480d      	ldr	r0, [pc, #52]	@ (800dab8 <prvInitialiseTaskLists+0x64>)
 800da82:	f7fe fca5 	bl	800c3d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da86:	480d      	ldr	r0, [pc, #52]	@ (800dabc <prvInitialiseTaskLists+0x68>)
 800da88:	f7fe fca2 	bl	800c3d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da8c:	480c      	ldr	r0, [pc, #48]	@ (800dac0 <prvInitialiseTaskLists+0x6c>)
 800da8e:	f7fe fc9f 	bl	800c3d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800da92:	480c      	ldr	r0, [pc, #48]	@ (800dac4 <prvInitialiseTaskLists+0x70>)
 800da94:	f7fe fc9c 	bl	800c3d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da98:	480b      	ldr	r0, [pc, #44]	@ (800dac8 <prvInitialiseTaskLists+0x74>)
 800da9a:	f7fe fc99 	bl	800c3d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da9e:	4b0b      	ldr	r3, [pc, #44]	@ (800dacc <prvInitialiseTaskLists+0x78>)
 800daa0:	4a05      	ldr	r2, [pc, #20]	@ (800dab8 <prvInitialiseTaskLists+0x64>)
 800daa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800daa4:	4b0a      	ldr	r3, [pc, #40]	@ (800dad0 <prvInitialiseTaskLists+0x7c>)
 800daa6:	4a05      	ldr	r2, [pc, #20]	@ (800dabc <prvInitialiseTaskLists+0x68>)
 800daa8:	601a      	str	r2, [r3, #0]
}
 800daaa:	bf00      	nop
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	200010c8 	.word	0x200010c8
 800dab8:	20001528 	.word	0x20001528
 800dabc:	2000153c 	.word	0x2000153c
 800dac0:	20001558 	.word	0x20001558
 800dac4:	2000156c 	.word	0x2000156c
 800dac8:	20001584 	.word	0x20001584
 800dacc:	20001550 	.word	0x20001550
 800dad0:	20001554 	.word	0x20001554

0800dad4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dada:	e019      	b.n	800db10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dadc:	f000 fdec 	bl	800e6b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dae0:	4b10      	ldr	r3, [pc, #64]	@ (800db24 <prvCheckTasksWaitingTermination+0x50>)
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	3304      	adds	r3, #4
 800daec:	4618      	mov	r0, r3
 800daee:	f7fe fcf9 	bl	800c4e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800daf2:	4b0d      	ldr	r3, [pc, #52]	@ (800db28 <prvCheckTasksWaitingTermination+0x54>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	3b01      	subs	r3, #1
 800daf8:	4a0b      	ldr	r2, [pc, #44]	@ (800db28 <prvCheckTasksWaitingTermination+0x54>)
 800dafa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dafc:	4b0b      	ldr	r3, [pc, #44]	@ (800db2c <prvCheckTasksWaitingTermination+0x58>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	3b01      	subs	r3, #1
 800db02:	4a0a      	ldr	r2, [pc, #40]	@ (800db2c <prvCheckTasksWaitingTermination+0x58>)
 800db04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800db06:	f000 fe09 	bl	800e71c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f000 f810 	bl	800db30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db10:	4b06      	ldr	r3, [pc, #24]	@ (800db2c <prvCheckTasksWaitingTermination+0x58>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d1e1      	bne.n	800dadc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800db18:	bf00      	nop
 800db1a:	bf00      	nop
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	2000156c 	.word	0x2000156c
 800db28:	20001598 	.word	0x20001598
 800db2c:	20001580 	.word	0x20001580

0800db30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	3354      	adds	r3, #84	@ 0x54
 800db3c:	4618      	mov	r0, r3
 800db3e:	f002 fca3 	bl	8010488 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d108      	bne.n	800db5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db50:	4618      	mov	r0, r3
 800db52:	f000 ffa1 	bl	800ea98 <vPortFree>
				vPortFree( pxTCB );
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 ff9e 	bl	800ea98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800db5c:	e019      	b.n	800db92 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800db64:	2b01      	cmp	r3, #1
 800db66:	d103      	bne.n	800db70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 ff95 	bl	800ea98 <vPortFree>
	}
 800db6e:	e010      	b.n	800db92 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800db76:	2b02      	cmp	r3, #2
 800db78:	d00b      	beq.n	800db92 <prvDeleteTCB+0x62>
	__asm volatile
 800db7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db7e:	f383 8811 	msr	BASEPRI, r3
 800db82:	f3bf 8f6f 	isb	sy
 800db86:	f3bf 8f4f 	dsb	sy
 800db8a:	60fb      	str	r3, [r7, #12]
}
 800db8c:	bf00      	nop
 800db8e:	bf00      	nop
 800db90:	e7fd      	b.n	800db8e <prvDeleteTCB+0x5e>
	}
 800db92:	bf00      	nop
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
	...

0800db9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dba2:	4b0c      	ldr	r3, [pc, #48]	@ (800dbd4 <prvResetNextTaskUnblockTime+0x38>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d104      	bne.n	800dbb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dbac:	4b0a      	ldr	r3, [pc, #40]	@ (800dbd8 <prvResetNextTaskUnblockTime+0x3c>)
 800dbae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dbb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dbb4:	e008      	b.n	800dbc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbb6:	4b07      	ldr	r3, [pc, #28]	@ (800dbd4 <prvResetNextTaskUnblockTime+0x38>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	4a04      	ldr	r2, [pc, #16]	@ (800dbd8 <prvResetNextTaskUnblockTime+0x3c>)
 800dbc6:	6013      	str	r3, [r2, #0]
}
 800dbc8:	bf00      	nop
 800dbca:	370c      	adds	r7, #12
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr
 800dbd4:	20001550 	.word	0x20001550
 800dbd8:	200015b8 	.word	0x200015b8

0800dbdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dbe2:	4b0b      	ldr	r3, [pc, #44]	@ (800dc10 <xTaskGetSchedulerState+0x34>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d102      	bne.n	800dbf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dbea:	2301      	movs	r3, #1
 800dbec:	607b      	str	r3, [r7, #4]
 800dbee:	e008      	b.n	800dc02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbf0:	4b08      	ldr	r3, [pc, #32]	@ (800dc14 <xTaskGetSchedulerState+0x38>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d102      	bne.n	800dbfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dbf8:	2302      	movs	r3, #2
 800dbfa:	607b      	str	r3, [r7, #4]
 800dbfc:	e001      	b.n	800dc02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dc02:	687b      	ldr	r3, [r7, #4]
	}
 800dc04:	4618      	mov	r0, r3
 800dc06:	370c      	adds	r7, #12
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr
 800dc10:	200015a4 	.word	0x200015a4
 800dc14:	200015c0 	.word	0x200015c0

0800dc18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b086      	sub	sp, #24
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dc24:	2300      	movs	r3, #0
 800dc26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d058      	beq.n	800dce0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dc2e:	4b2f      	ldr	r3, [pc, #188]	@ (800dcec <xTaskPriorityDisinherit+0xd4>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	693a      	ldr	r2, [r7, #16]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d00b      	beq.n	800dc50 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dc38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc3c:	f383 8811 	msr	BASEPRI, r3
 800dc40:	f3bf 8f6f 	isb	sy
 800dc44:	f3bf 8f4f 	dsb	sy
 800dc48:	60fb      	str	r3, [r7, #12]
}
 800dc4a:	bf00      	nop
 800dc4c:	bf00      	nop
 800dc4e:	e7fd      	b.n	800dc4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d10b      	bne.n	800dc70 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dc58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc5c:	f383 8811 	msr	BASEPRI, r3
 800dc60:	f3bf 8f6f 	isb	sy
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	60bb      	str	r3, [r7, #8]
}
 800dc6a:	bf00      	nop
 800dc6c:	bf00      	nop
 800dc6e:	e7fd      	b.n	800dc6c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc74:	1e5a      	subs	r2, r3, #1
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d02c      	beq.n	800dce0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d128      	bne.n	800dce0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	3304      	adds	r3, #4
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fe fc26 	bl	800c4e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dca4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcb0:	4b0f      	ldr	r3, [pc, #60]	@ (800dcf0 <xTaskPriorityDisinherit+0xd8>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d903      	bls.n	800dcc0 <xTaskPriorityDisinherit+0xa8>
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcbc:	4a0c      	ldr	r2, [pc, #48]	@ (800dcf0 <xTaskPriorityDisinherit+0xd8>)
 800dcbe:	6013      	str	r3, [r2, #0]
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcc4:	4613      	mov	r3, r2
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	4413      	add	r3, r2
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	4a09      	ldr	r2, [pc, #36]	@ (800dcf4 <xTaskPriorityDisinherit+0xdc>)
 800dcce:	441a      	add	r2, r3
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	4610      	mov	r0, r2
 800dcd8:	f7fe fba7 	bl	800c42a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dcdc:	2301      	movs	r3, #1
 800dcde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dce0:	697b      	ldr	r3, [r7, #20]
	}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3718      	adds	r7, #24
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	200010c4 	.word	0x200010c4
 800dcf0:	200015a0 	.word	0x200015a0
 800dcf4:	200010c8 	.word	0x200010c8

0800dcf8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dd02:	4b21      	ldr	r3, [pc, #132]	@ (800dd88 <prvAddCurrentTaskToDelayedList+0x90>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd08:	4b20      	ldr	r3, [pc, #128]	@ (800dd8c <prvAddCurrentTaskToDelayedList+0x94>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7fe fbe8 	bl	800c4e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd1a:	d10a      	bne.n	800dd32 <prvAddCurrentTaskToDelayedList+0x3a>
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d007      	beq.n	800dd32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd22:	4b1a      	ldr	r3, [pc, #104]	@ (800dd8c <prvAddCurrentTaskToDelayedList+0x94>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	3304      	adds	r3, #4
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4819      	ldr	r0, [pc, #100]	@ (800dd90 <prvAddCurrentTaskToDelayedList+0x98>)
 800dd2c:	f7fe fb7d 	bl	800c42a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dd30:	e026      	b.n	800dd80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	4413      	add	r3, r2
 800dd38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd3a:	4b14      	ldr	r3, [pc, #80]	@ (800dd8c <prvAddCurrentTaskToDelayedList+0x94>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dd42:	68ba      	ldr	r2, [r7, #8]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d209      	bcs.n	800dd5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd4a:	4b12      	ldr	r3, [pc, #72]	@ (800dd94 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	4b0f      	ldr	r3, [pc, #60]	@ (800dd8c <prvAddCurrentTaskToDelayedList+0x94>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	3304      	adds	r3, #4
 800dd54:	4619      	mov	r1, r3
 800dd56:	4610      	mov	r0, r2
 800dd58:	f7fe fb8b 	bl	800c472 <vListInsert>
}
 800dd5c:	e010      	b.n	800dd80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd5e:	4b0e      	ldr	r3, [pc, #56]	@ (800dd98 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	4b0a      	ldr	r3, [pc, #40]	@ (800dd8c <prvAddCurrentTaskToDelayedList+0x94>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	3304      	adds	r3, #4
 800dd68:	4619      	mov	r1, r3
 800dd6a:	4610      	mov	r0, r2
 800dd6c:	f7fe fb81 	bl	800c472 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dd70:	4b0a      	ldr	r3, [pc, #40]	@ (800dd9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	68ba      	ldr	r2, [r7, #8]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d202      	bcs.n	800dd80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dd7a:	4a08      	ldr	r2, [pc, #32]	@ (800dd9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	6013      	str	r3, [r2, #0]
}
 800dd80:	bf00      	nop
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	2000159c 	.word	0x2000159c
 800dd8c:	200010c4 	.word	0x200010c4
 800dd90:	20001584 	.word	0x20001584
 800dd94:	20001554 	.word	0x20001554
 800dd98:	20001550 	.word	0x20001550
 800dd9c:	200015b8 	.word	0x200015b8

0800dda0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b08a      	sub	sp, #40	@ 0x28
 800dda4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dda6:	2300      	movs	r3, #0
 800dda8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ddaa:	f000 fb13 	bl	800e3d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ddae:	4b1d      	ldr	r3, [pc, #116]	@ (800de24 <xTimerCreateTimerTask+0x84>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d021      	beq.n	800ddfa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ddbe:	1d3a      	adds	r2, r7, #4
 800ddc0:	f107 0108 	add.w	r1, r7, #8
 800ddc4:	f107 030c 	add.w	r3, r7, #12
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7fe fae7 	bl	800c39c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ddce:	6879      	ldr	r1, [r7, #4]
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	9202      	str	r2, [sp, #8]
 800ddd6:	9301      	str	r3, [sp, #4]
 800ddd8:	2302      	movs	r3, #2
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	2300      	movs	r3, #0
 800ddde:	460a      	mov	r2, r1
 800dde0:	4911      	ldr	r1, [pc, #68]	@ (800de28 <xTimerCreateTimerTask+0x88>)
 800dde2:	4812      	ldr	r0, [pc, #72]	@ (800de2c <xTimerCreateTimerTask+0x8c>)
 800dde4:	f7ff f8a2 	bl	800cf2c <xTaskCreateStatic>
 800dde8:	4603      	mov	r3, r0
 800ddea:	4a11      	ldr	r2, [pc, #68]	@ (800de30 <xTimerCreateTimerTask+0x90>)
 800ddec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ddee:	4b10      	ldr	r3, [pc, #64]	@ (800de30 <xTimerCreateTimerTask+0x90>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d001      	beq.n	800ddfa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d10b      	bne.n	800de18 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800de00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de04:	f383 8811 	msr	BASEPRI, r3
 800de08:	f3bf 8f6f 	isb	sy
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	613b      	str	r3, [r7, #16]
}
 800de12:	bf00      	nop
 800de14:	bf00      	nop
 800de16:	e7fd      	b.n	800de14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800de18:	697b      	ldr	r3, [r7, #20]
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3718      	adds	r7, #24
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	200015f4 	.word	0x200015f4
 800de28:	080123d4 	.word	0x080123d4
 800de2c:	0800df6d 	.word	0x0800df6d
 800de30:	200015f8 	.word	0x200015f8

0800de34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b08a      	sub	sp, #40	@ 0x28
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	607a      	str	r2, [r7, #4]
 800de40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800de42:	2300      	movs	r3, #0
 800de44:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d10b      	bne.n	800de64 <xTimerGenericCommand+0x30>
	__asm volatile
 800de4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de50:	f383 8811 	msr	BASEPRI, r3
 800de54:	f3bf 8f6f 	isb	sy
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	623b      	str	r3, [r7, #32]
}
 800de5e:	bf00      	nop
 800de60:	bf00      	nop
 800de62:	e7fd      	b.n	800de60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800de64:	4b19      	ldr	r3, [pc, #100]	@ (800decc <xTimerGenericCommand+0x98>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d02a      	beq.n	800dec2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	2b05      	cmp	r3, #5
 800de7c:	dc18      	bgt.n	800deb0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800de7e:	f7ff fead 	bl	800dbdc <xTaskGetSchedulerState>
 800de82:	4603      	mov	r3, r0
 800de84:	2b02      	cmp	r3, #2
 800de86:	d109      	bne.n	800de9c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800de88:	4b10      	ldr	r3, [pc, #64]	@ (800decc <xTimerGenericCommand+0x98>)
 800de8a:	6818      	ldr	r0, [r3, #0]
 800de8c:	f107 0110 	add.w	r1, r7, #16
 800de90:	2300      	movs	r3, #0
 800de92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de94:	f7fe fc5a 	bl	800c74c <xQueueGenericSend>
 800de98:	6278      	str	r0, [r7, #36]	@ 0x24
 800de9a:	e012      	b.n	800dec2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800de9c:	4b0b      	ldr	r3, [pc, #44]	@ (800decc <xTimerGenericCommand+0x98>)
 800de9e:	6818      	ldr	r0, [r3, #0]
 800dea0:	f107 0110 	add.w	r1, r7, #16
 800dea4:	2300      	movs	r3, #0
 800dea6:	2200      	movs	r2, #0
 800dea8:	f7fe fc50 	bl	800c74c <xQueueGenericSend>
 800deac:	6278      	str	r0, [r7, #36]	@ 0x24
 800deae:	e008      	b.n	800dec2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800deb0:	4b06      	ldr	r3, [pc, #24]	@ (800decc <xTimerGenericCommand+0x98>)
 800deb2:	6818      	ldr	r0, [r3, #0]
 800deb4:	f107 0110 	add.w	r1, r7, #16
 800deb8:	2300      	movs	r3, #0
 800deba:	683a      	ldr	r2, [r7, #0]
 800debc:	f7fe fd48 	bl	800c950 <xQueueGenericSendFromISR>
 800dec0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3728      	adds	r7, #40	@ 0x28
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	200015f4 	.word	0x200015f4

0800ded0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b088      	sub	sp, #32
 800ded4:	af02      	add	r7, sp, #8
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deda:	4b23      	ldr	r3, [pc, #140]	@ (800df68 <prvProcessExpiredTimer+0x98>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	68db      	ldr	r3, [r3, #12]
 800dee2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	3304      	adds	r3, #4
 800dee8:	4618      	mov	r0, r3
 800deea:	f7fe fafb 	bl	800c4e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800def4:	f003 0304 	and.w	r3, r3, #4
 800def8:	2b00      	cmp	r3, #0
 800defa:	d023      	beq.n	800df44 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	699a      	ldr	r2, [r3, #24]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	18d1      	adds	r1, r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	683a      	ldr	r2, [r7, #0]
 800df08:	6978      	ldr	r0, [r7, #20]
 800df0a:	f000 f8d5 	bl	800e0b8 <prvInsertTimerInActiveList>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d020      	beq.n	800df56 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df14:	2300      	movs	r3, #0
 800df16:	9300      	str	r3, [sp, #0]
 800df18:	2300      	movs	r3, #0
 800df1a:	687a      	ldr	r2, [r7, #4]
 800df1c:	2100      	movs	r1, #0
 800df1e:	6978      	ldr	r0, [r7, #20]
 800df20:	f7ff ff88 	bl	800de34 <xTimerGenericCommand>
 800df24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d114      	bne.n	800df56 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800df2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df30:	f383 8811 	msr	BASEPRI, r3
 800df34:	f3bf 8f6f 	isb	sy
 800df38:	f3bf 8f4f 	dsb	sy
 800df3c:	60fb      	str	r3, [r7, #12]
}
 800df3e:	bf00      	nop
 800df40:	bf00      	nop
 800df42:	e7fd      	b.n	800df40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df4a:	f023 0301 	bic.w	r3, r3, #1
 800df4e:	b2da      	uxtb	r2, r3
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	6a1b      	ldr	r3, [r3, #32]
 800df5a:	6978      	ldr	r0, [r7, #20]
 800df5c:	4798      	blx	r3
}
 800df5e:	bf00      	nop
 800df60:	3718      	adds	r7, #24
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	200015ec 	.word	0x200015ec

0800df6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df74:	f107 0308 	add.w	r3, r7, #8
 800df78:	4618      	mov	r0, r3
 800df7a:	f000 f859 	bl	800e030 <prvGetNextExpireTime>
 800df7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	4619      	mov	r1, r3
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f000 f805 	bl	800df94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800df8a:	f000 f8d7 	bl	800e13c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df8e:	bf00      	nop
 800df90:	e7f0      	b.n	800df74 <prvTimerTask+0x8>
	...

0800df94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800df9e:	f7ff fa29 	bl	800d3f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dfa2:	f107 0308 	add.w	r3, r7, #8
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f000 f866 	bl	800e078 <prvSampleTimeNow>
 800dfac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d130      	bne.n	800e016 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d10a      	bne.n	800dfd0 <prvProcessTimerOrBlockTask+0x3c>
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d806      	bhi.n	800dfd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dfc2:	f7ff fa25 	bl	800d410 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dfc6:	68f9      	ldr	r1, [r7, #12]
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7ff ff81 	bl	800ded0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dfce:	e024      	b.n	800e01a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d008      	beq.n	800dfe8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dfd6:	4b13      	ldr	r3, [pc, #76]	@ (800e024 <prvProcessTimerOrBlockTask+0x90>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d101      	bne.n	800dfe4 <prvProcessTimerOrBlockTask+0x50>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e000      	b.n	800dfe6 <prvProcessTimerOrBlockTask+0x52>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dfe8:	4b0f      	ldr	r3, [pc, #60]	@ (800e028 <prvProcessTimerOrBlockTask+0x94>)
 800dfea:	6818      	ldr	r0, [r3, #0]
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	683a      	ldr	r2, [r7, #0]
 800dff4:	4619      	mov	r1, r3
 800dff6:	f7fe ff65 	bl	800cec4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dffa:	f7ff fa09 	bl	800d410 <xTaskResumeAll>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d10a      	bne.n	800e01a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e004:	4b09      	ldr	r3, [pc, #36]	@ (800e02c <prvProcessTimerOrBlockTask+0x98>)
 800e006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e00a:	601a      	str	r2, [r3, #0]
 800e00c:	f3bf 8f4f 	dsb	sy
 800e010:	f3bf 8f6f 	isb	sy
}
 800e014:	e001      	b.n	800e01a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e016:	f7ff f9fb 	bl	800d410 <xTaskResumeAll>
}
 800e01a:	bf00      	nop
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	200015f0 	.word	0x200015f0
 800e028:	200015f4 	.word	0x200015f4
 800e02c:	e000ed04 	.word	0xe000ed04

0800e030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e038:	4b0e      	ldr	r3, [pc, #56]	@ (800e074 <prvGetNextExpireTime+0x44>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d101      	bne.n	800e046 <prvGetNextExpireTime+0x16>
 800e042:	2201      	movs	r2, #1
 800e044:	e000      	b.n	800e048 <prvGetNextExpireTime+0x18>
 800e046:	2200      	movs	r2, #0
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d105      	bne.n	800e060 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e054:	4b07      	ldr	r3, [pc, #28]	@ (800e074 <prvGetNextExpireTime+0x44>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	60fb      	str	r3, [r7, #12]
 800e05e:	e001      	b.n	800e064 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e060:	2300      	movs	r3, #0
 800e062:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e064:	68fb      	ldr	r3, [r7, #12]
}
 800e066:	4618      	mov	r0, r3
 800e068:	3714      	adds	r7, #20
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr
 800e072:	bf00      	nop
 800e074:	200015ec 	.word	0x200015ec

0800e078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e080:	f7ff fa64 	bl	800d54c <xTaskGetTickCount>
 800e084:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e086:	4b0b      	ldr	r3, [pc, #44]	@ (800e0b4 <prvSampleTimeNow+0x3c>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	68fa      	ldr	r2, [r7, #12]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d205      	bcs.n	800e09c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e090:	f000 f93a 	bl	800e308 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2201      	movs	r2, #1
 800e098:	601a      	str	r2, [r3, #0]
 800e09a:	e002      	b.n	800e0a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e0a2:	4a04      	ldr	r2, [pc, #16]	@ (800e0b4 <prvSampleTimeNow+0x3c>)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	200015fc 	.word	0x200015fc

0800e0b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b086      	sub	sp, #24
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	607a      	str	r2, [r7, #4]
 800e0c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	68ba      	ldr	r2, [r7, #8]
 800e0ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	68fa      	ldr	r2, [r7, #12]
 800e0d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e0d6:	68ba      	ldr	r2, [r7, #8]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d812      	bhi.n	800e104 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	1ad2      	subs	r2, r2, r3
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	699b      	ldr	r3, [r3, #24]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d302      	bcc.n	800e0f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	617b      	str	r3, [r7, #20]
 800e0f0:	e01b      	b.n	800e12a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e0f2:	4b10      	ldr	r3, [pc, #64]	@ (800e134 <prvInsertTimerInActiveList+0x7c>)
 800e0f4:	681a      	ldr	r2, [r3, #0]
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	3304      	adds	r3, #4
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	f7fe f9b8 	bl	800c472 <vListInsert>
 800e102:	e012      	b.n	800e12a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d206      	bcs.n	800e11a <prvInsertTimerInActiveList+0x62>
 800e10c:	68ba      	ldr	r2, [r7, #8]
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	429a      	cmp	r2, r3
 800e112:	d302      	bcc.n	800e11a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e114:	2301      	movs	r3, #1
 800e116:	617b      	str	r3, [r7, #20]
 800e118:	e007      	b.n	800e12a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e11a:	4b07      	ldr	r3, [pc, #28]	@ (800e138 <prvInsertTimerInActiveList+0x80>)
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	3304      	adds	r3, #4
 800e122:	4619      	mov	r1, r3
 800e124:	4610      	mov	r0, r2
 800e126:	f7fe f9a4 	bl	800c472 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e12a:	697b      	ldr	r3, [r7, #20]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3718      	adds	r7, #24
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	200015f0 	.word	0x200015f0
 800e138:	200015ec 	.word	0x200015ec

0800e13c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b08e      	sub	sp, #56	@ 0x38
 800e140:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e142:	e0ce      	b.n	800e2e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	da19      	bge.n	800e17e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e14a:	1d3b      	adds	r3, r7, #4
 800e14c:	3304      	adds	r3, #4
 800e14e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10b      	bne.n	800e16e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e15a:	f383 8811 	msr	BASEPRI, r3
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	61fb      	str	r3, [r7, #28]
}
 800e168:	bf00      	nop
 800e16a:	bf00      	nop
 800e16c:	e7fd      	b.n	800e16a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e174:	6850      	ldr	r0, [r2, #4]
 800e176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e178:	6892      	ldr	r2, [r2, #8]
 800e17a:	4611      	mov	r1, r2
 800e17c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2b00      	cmp	r3, #0
 800e182:	f2c0 80ae 	blt.w	800e2e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e18c:	695b      	ldr	r3, [r3, #20]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d004      	beq.n	800e19c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e194:	3304      	adds	r3, #4
 800e196:	4618      	mov	r0, r3
 800e198:	f7fe f9a4 	bl	800c4e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e19c:	463b      	mov	r3, r7
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7ff ff6a 	bl	800e078 <prvSampleTimeNow>
 800e1a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b09      	cmp	r3, #9
 800e1aa:	f200 8097 	bhi.w	800e2dc <prvProcessReceivedCommands+0x1a0>
 800e1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800e1b4 <prvProcessReceivedCommands+0x78>)
 800e1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b4:	0800e1dd 	.word	0x0800e1dd
 800e1b8:	0800e1dd 	.word	0x0800e1dd
 800e1bc:	0800e1dd 	.word	0x0800e1dd
 800e1c0:	0800e253 	.word	0x0800e253
 800e1c4:	0800e267 	.word	0x0800e267
 800e1c8:	0800e2b3 	.word	0x0800e2b3
 800e1cc:	0800e1dd 	.word	0x0800e1dd
 800e1d0:	0800e1dd 	.word	0x0800e1dd
 800e1d4:	0800e253 	.word	0x0800e253
 800e1d8:	0800e267 	.word	0x0800e267
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1e2:	f043 0301 	orr.w	r3, r3, #1
 800e1e6:	b2da      	uxtb	r2, r3
 800e1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1f2:	699b      	ldr	r3, [r3, #24]
 800e1f4:	18d1      	adds	r1, r2, r3
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e1fc:	f7ff ff5c 	bl	800e0b8 <prvInsertTimerInActiveList>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d06c      	beq.n	800e2e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e208:	6a1b      	ldr	r3, [r3, #32]
 800e20a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e20c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e214:	f003 0304 	and.w	r3, r3, #4
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d061      	beq.n	800e2e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e21c:	68ba      	ldr	r2, [r7, #8]
 800e21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e220:	699b      	ldr	r3, [r3, #24]
 800e222:	441a      	add	r2, r3
 800e224:	2300      	movs	r3, #0
 800e226:	9300      	str	r3, [sp, #0]
 800e228:	2300      	movs	r3, #0
 800e22a:	2100      	movs	r1, #0
 800e22c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e22e:	f7ff fe01 	bl	800de34 <xTimerGenericCommand>
 800e232:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e234:	6a3b      	ldr	r3, [r7, #32]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d152      	bne.n	800e2e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e23a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e23e:	f383 8811 	msr	BASEPRI, r3
 800e242:	f3bf 8f6f 	isb	sy
 800e246:	f3bf 8f4f 	dsb	sy
 800e24a:	61bb      	str	r3, [r7, #24]
}
 800e24c:	bf00      	nop
 800e24e:	bf00      	nop
 800e250:	e7fd      	b.n	800e24e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e254:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e258:	f023 0301 	bic.w	r3, r3, #1
 800e25c:	b2da      	uxtb	r2, r3
 800e25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e260:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e264:	e03d      	b.n	800e2e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e26c:	f043 0301 	orr.w	r3, r3, #1
 800e270:	b2da      	uxtb	r2, r3
 800e272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e274:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e27c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e280:	699b      	ldr	r3, [r3, #24]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d10b      	bne.n	800e29e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e28a:	f383 8811 	msr	BASEPRI, r3
 800e28e:	f3bf 8f6f 	isb	sy
 800e292:	f3bf 8f4f 	dsb	sy
 800e296:	617b      	str	r3, [r7, #20]
}
 800e298:	bf00      	nop
 800e29a:	bf00      	nop
 800e29c:	e7fd      	b.n	800e29a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a0:	699a      	ldr	r2, [r3, #24]
 800e2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a4:	18d1      	adds	r1, r2, r3
 800e2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2ac:	f7ff ff04 	bl	800e0b8 <prvInsertTimerInActiveList>
					break;
 800e2b0:	e017      	b.n	800e2e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2b8:	f003 0302 	and.w	r3, r3, #2
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d103      	bne.n	800e2c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e2c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2c2:	f000 fbe9 	bl	800ea98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e2c6:	e00c      	b.n	800e2e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2ce:	f023 0301 	bic.w	r3, r3, #1
 800e2d2:	b2da      	uxtb	r2, r3
 800e2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e2da:	e002      	b.n	800e2e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e2dc:	bf00      	nop
 800e2de:	e000      	b.n	800e2e2 <prvProcessReceivedCommands+0x1a6>
					break;
 800e2e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e2e2:	4b08      	ldr	r3, [pc, #32]	@ (800e304 <prvProcessReceivedCommands+0x1c8>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	1d39      	adds	r1, r7, #4
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fe fbce 	bl	800ca8c <xQueueReceive>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f47f af26 	bne.w	800e144 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e2f8:	bf00      	nop
 800e2fa:	bf00      	nop
 800e2fc:	3730      	adds	r7, #48	@ 0x30
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	200015f4 	.word	0x200015f4

0800e308 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b088      	sub	sp, #32
 800e30c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e30e:	e049      	b.n	800e3a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e310:	4b2e      	ldr	r3, [pc, #184]	@ (800e3cc <prvSwitchTimerLists+0xc4>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e31a:	4b2c      	ldr	r3, [pc, #176]	@ (800e3cc <prvSwitchTimerLists+0xc4>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	3304      	adds	r3, #4
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fe f8db 	bl	800c4e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	6a1b      	ldr	r3, [r3, #32]
 800e332:	68f8      	ldr	r0, [r7, #12]
 800e334:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e33c:	f003 0304 	and.w	r3, r3, #4
 800e340:	2b00      	cmp	r3, #0
 800e342:	d02f      	beq.n	800e3a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	699b      	ldr	r3, [r3, #24]
 800e348:	693a      	ldr	r2, [r7, #16]
 800e34a:	4413      	add	r3, r2
 800e34c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e34e:	68ba      	ldr	r2, [r7, #8]
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	429a      	cmp	r2, r3
 800e354:	d90e      	bls.n	800e374 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	68ba      	ldr	r2, [r7, #8]
 800e35a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	68fa      	ldr	r2, [r7, #12]
 800e360:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e362:	4b1a      	ldr	r3, [pc, #104]	@ (800e3cc <prvSwitchTimerLists+0xc4>)
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	3304      	adds	r3, #4
 800e36a:	4619      	mov	r1, r3
 800e36c:	4610      	mov	r0, r2
 800e36e:	f7fe f880 	bl	800c472 <vListInsert>
 800e372:	e017      	b.n	800e3a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e374:	2300      	movs	r3, #0
 800e376:	9300      	str	r3, [sp, #0]
 800e378:	2300      	movs	r3, #0
 800e37a:	693a      	ldr	r2, [r7, #16]
 800e37c:	2100      	movs	r1, #0
 800e37e:	68f8      	ldr	r0, [r7, #12]
 800e380:	f7ff fd58 	bl	800de34 <xTimerGenericCommand>
 800e384:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10b      	bne.n	800e3a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	603b      	str	r3, [r7, #0]
}
 800e39e:	bf00      	nop
 800e3a0:	bf00      	nop
 800e3a2:	e7fd      	b.n	800e3a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3a4:	4b09      	ldr	r3, [pc, #36]	@ (800e3cc <prvSwitchTimerLists+0xc4>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d1b0      	bne.n	800e310 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e3ae:	4b07      	ldr	r3, [pc, #28]	@ (800e3cc <prvSwitchTimerLists+0xc4>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e3b4:	4b06      	ldr	r3, [pc, #24]	@ (800e3d0 <prvSwitchTimerLists+0xc8>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a04      	ldr	r2, [pc, #16]	@ (800e3cc <prvSwitchTimerLists+0xc4>)
 800e3ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e3bc:	4a04      	ldr	r2, [pc, #16]	@ (800e3d0 <prvSwitchTimerLists+0xc8>)
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	6013      	str	r3, [r2, #0]
}
 800e3c2:	bf00      	nop
 800e3c4:	3718      	adds	r7, #24
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	200015ec 	.word	0x200015ec
 800e3d0:	200015f0 	.word	0x200015f0

0800e3d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e3da:	f000 f96d 	bl	800e6b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e3de:	4b15      	ldr	r3, [pc, #84]	@ (800e434 <prvCheckForValidListAndQueue+0x60>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d120      	bne.n	800e428 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e3e6:	4814      	ldr	r0, [pc, #80]	@ (800e438 <prvCheckForValidListAndQueue+0x64>)
 800e3e8:	f7fd fff2 	bl	800c3d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e3ec:	4813      	ldr	r0, [pc, #76]	@ (800e43c <prvCheckForValidListAndQueue+0x68>)
 800e3ee:	f7fd ffef 	bl	800c3d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e3f2:	4b13      	ldr	r3, [pc, #76]	@ (800e440 <prvCheckForValidListAndQueue+0x6c>)
 800e3f4:	4a10      	ldr	r2, [pc, #64]	@ (800e438 <prvCheckForValidListAndQueue+0x64>)
 800e3f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e3f8:	4b12      	ldr	r3, [pc, #72]	@ (800e444 <prvCheckForValidListAndQueue+0x70>)
 800e3fa:	4a10      	ldr	r2, [pc, #64]	@ (800e43c <prvCheckForValidListAndQueue+0x68>)
 800e3fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e3fe:	2300      	movs	r3, #0
 800e400:	9300      	str	r3, [sp, #0]
 800e402:	4b11      	ldr	r3, [pc, #68]	@ (800e448 <prvCheckForValidListAndQueue+0x74>)
 800e404:	4a11      	ldr	r2, [pc, #68]	@ (800e44c <prvCheckForValidListAndQueue+0x78>)
 800e406:	2110      	movs	r1, #16
 800e408:	200a      	movs	r0, #10
 800e40a:	f7fe f8ff 	bl	800c60c <xQueueGenericCreateStatic>
 800e40e:	4603      	mov	r3, r0
 800e410:	4a08      	ldr	r2, [pc, #32]	@ (800e434 <prvCheckForValidListAndQueue+0x60>)
 800e412:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e414:	4b07      	ldr	r3, [pc, #28]	@ (800e434 <prvCheckForValidListAndQueue+0x60>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d005      	beq.n	800e428 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e41c:	4b05      	ldr	r3, [pc, #20]	@ (800e434 <prvCheckForValidListAndQueue+0x60>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	490b      	ldr	r1, [pc, #44]	@ (800e450 <prvCheckForValidListAndQueue+0x7c>)
 800e422:	4618      	mov	r0, r3
 800e424:	f7fe fd24 	bl	800ce70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e428:	f000 f978 	bl	800e71c <vPortExitCritical>
}
 800e42c:	bf00      	nop
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	200015f4 	.word	0x200015f4
 800e438:	200015c4 	.word	0x200015c4
 800e43c:	200015d8 	.word	0x200015d8
 800e440:	200015ec 	.word	0x200015ec
 800e444:	200015f0 	.word	0x200015f0
 800e448:	200016a0 	.word	0x200016a0
 800e44c:	20001600 	.word	0x20001600
 800e450:	080123dc 	.word	0x080123dc

0800e454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	3b04      	subs	r3, #4
 800e464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e46c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	3b04      	subs	r3, #4
 800e472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	f023 0201 	bic.w	r2, r3, #1
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	3b04      	subs	r3, #4
 800e482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e484:	4a0c      	ldr	r2, [pc, #48]	@ (800e4b8 <pxPortInitialiseStack+0x64>)
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	3b14      	subs	r3, #20
 800e48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	3b04      	subs	r3, #4
 800e49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f06f 0202 	mvn.w	r2, #2
 800e4a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	3b20      	subs	r3, #32
 800e4a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3714      	adds	r7, #20
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr
 800e4b8:	0800e4bd 	.word	0x0800e4bd

0800e4bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b085      	sub	sp, #20
 800e4c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e4c6:	4b13      	ldr	r3, [pc, #76]	@ (800e514 <prvTaskExitError+0x58>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e4ce:	d00b      	beq.n	800e4e8 <prvTaskExitError+0x2c>
	__asm volatile
 800e4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d4:	f383 8811 	msr	BASEPRI, r3
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	60fb      	str	r3, [r7, #12]
}
 800e4e2:	bf00      	nop
 800e4e4:	bf00      	nop
 800e4e6:	e7fd      	b.n	800e4e4 <prvTaskExitError+0x28>
	__asm volatile
 800e4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ec:	f383 8811 	msr	BASEPRI, r3
 800e4f0:	f3bf 8f6f 	isb	sy
 800e4f4:	f3bf 8f4f 	dsb	sy
 800e4f8:	60bb      	str	r3, [r7, #8]
}
 800e4fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e4fc:	bf00      	nop
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d0fc      	beq.n	800e4fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e504:	bf00      	nop
 800e506:	bf00      	nop
 800e508:	3714      	adds	r7, #20
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr
 800e512:	bf00      	nop
 800e514:	20000098 	.word	0x20000098
	...

0800e520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e520:	4b07      	ldr	r3, [pc, #28]	@ (800e540 <pxCurrentTCBConst2>)
 800e522:	6819      	ldr	r1, [r3, #0]
 800e524:	6808      	ldr	r0, [r1, #0]
 800e526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e52a:	f380 8809 	msr	PSP, r0
 800e52e:	f3bf 8f6f 	isb	sy
 800e532:	f04f 0000 	mov.w	r0, #0
 800e536:	f380 8811 	msr	BASEPRI, r0
 800e53a:	4770      	bx	lr
 800e53c:	f3af 8000 	nop.w

0800e540 <pxCurrentTCBConst2>:
 800e540:	200010c4 	.word	0x200010c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e544:	bf00      	nop
 800e546:	bf00      	nop

0800e548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e548:	4808      	ldr	r0, [pc, #32]	@ (800e56c <prvPortStartFirstTask+0x24>)
 800e54a:	6800      	ldr	r0, [r0, #0]
 800e54c:	6800      	ldr	r0, [r0, #0]
 800e54e:	f380 8808 	msr	MSP, r0
 800e552:	f04f 0000 	mov.w	r0, #0
 800e556:	f380 8814 	msr	CONTROL, r0
 800e55a:	b662      	cpsie	i
 800e55c:	b661      	cpsie	f
 800e55e:	f3bf 8f4f 	dsb	sy
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	df00      	svc	0
 800e568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e56a:	bf00      	nop
 800e56c:	e000ed08 	.word	0xe000ed08

0800e570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e576:	4b47      	ldr	r3, [pc, #284]	@ (800e694 <xPortStartScheduler+0x124>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4a47      	ldr	r2, [pc, #284]	@ (800e698 <xPortStartScheduler+0x128>)
 800e57c:	4293      	cmp	r3, r2
 800e57e:	d10b      	bne.n	800e598 <xPortStartScheduler+0x28>
	__asm volatile
 800e580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e584:	f383 8811 	msr	BASEPRI, r3
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	60fb      	str	r3, [r7, #12]
}
 800e592:	bf00      	nop
 800e594:	bf00      	nop
 800e596:	e7fd      	b.n	800e594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e598:	4b3e      	ldr	r3, [pc, #248]	@ (800e694 <xPortStartScheduler+0x124>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a3f      	ldr	r2, [pc, #252]	@ (800e69c <xPortStartScheduler+0x12c>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d10b      	bne.n	800e5ba <xPortStartScheduler+0x4a>
	__asm volatile
 800e5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a6:	f383 8811 	msr	BASEPRI, r3
 800e5aa:	f3bf 8f6f 	isb	sy
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	613b      	str	r3, [r7, #16]
}
 800e5b4:	bf00      	nop
 800e5b6:	bf00      	nop
 800e5b8:	e7fd      	b.n	800e5b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e5ba:	4b39      	ldr	r3, [pc, #228]	@ (800e6a0 <xPortStartScheduler+0x130>)
 800e5bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	22ff      	movs	r2, #255	@ 0xff
 800e5ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e5d4:	78fb      	ldrb	r3, [r7, #3]
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e5dc:	b2da      	uxtb	r2, r3
 800e5de:	4b31      	ldr	r3, [pc, #196]	@ (800e6a4 <xPortStartScheduler+0x134>)
 800e5e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e5e2:	4b31      	ldr	r3, [pc, #196]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e5e4:	2207      	movs	r2, #7
 800e5e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5e8:	e009      	b.n	800e5fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e5ea:	4b2f      	ldr	r3, [pc, #188]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	4a2d      	ldr	r2, [pc, #180]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e5f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e5f4:	78fb      	ldrb	r3, [r7, #3]
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	005b      	lsls	r3, r3, #1
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5fe:	78fb      	ldrb	r3, [r7, #3]
 800e600:	b2db      	uxtb	r3, r3
 800e602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e606:	2b80      	cmp	r3, #128	@ 0x80
 800e608:	d0ef      	beq.n	800e5ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e60a:	4b27      	ldr	r3, [pc, #156]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f1c3 0307 	rsb	r3, r3, #7
 800e612:	2b04      	cmp	r3, #4
 800e614:	d00b      	beq.n	800e62e <xPortStartScheduler+0xbe>
	__asm volatile
 800e616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61a:	f383 8811 	msr	BASEPRI, r3
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	60bb      	str	r3, [r7, #8]
}
 800e628:	bf00      	nop
 800e62a:	bf00      	nop
 800e62c:	e7fd      	b.n	800e62a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e62e:	4b1e      	ldr	r3, [pc, #120]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	021b      	lsls	r3, r3, #8
 800e634:	4a1c      	ldr	r2, [pc, #112]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e636:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e638:	4b1b      	ldr	r3, [pc, #108]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e640:	4a19      	ldr	r2, [pc, #100]	@ (800e6a8 <xPortStartScheduler+0x138>)
 800e642:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	b2da      	uxtb	r2, r3
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e64c:	4b17      	ldr	r3, [pc, #92]	@ (800e6ac <xPortStartScheduler+0x13c>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a16      	ldr	r2, [pc, #88]	@ (800e6ac <xPortStartScheduler+0x13c>)
 800e652:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e656:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e658:	4b14      	ldr	r3, [pc, #80]	@ (800e6ac <xPortStartScheduler+0x13c>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a13      	ldr	r2, [pc, #76]	@ (800e6ac <xPortStartScheduler+0x13c>)
 800e65e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e662:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e664:	f000 f8da 	bl	800e81c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e668:	4b11      	ldr	r3, [pc, #68]	@ (800e6b0 <xPortStartScheduler+0x140>)
 800e66a:	2200      	movs	r2, #0
 800e66c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e66e:	f000 f8f9 	bl	800e864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e672:	4b10      	ldr	r3, [pc, #64]	@ (800e6b4 <xPortStartScheduler+0x144>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a0f      	ldr	r2, [pc, #60]	@ (800e6b4 <xPortStartScheduler+0x144>)
 800e678:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e67c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e67e:	f7ff ff63 	bl	800e548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e682:	f7ff f82d 	bl	800d6e0 <vTaskSwitchContext>
	prvTaskExitError();
 800e686:	f7ff ff19 	bl	800e4bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3718      	adds	r7, #24
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	e000ed00 	.word	0xe000ed00
 800e698:	410fc271 	.word	0x410fc271
 800e69c:	410fc270 	.word	0x410fc270
 800e6a0:	e000e400 	.word	0xe000e400
 800e6a4:	200016f0 	.word	0x200016f0
 800e6a8:	200016f4 	.word	0x200016f4
 800e6ac:	e000ed20 	.word	0xe000ed20
 800e6b0:	20000098 	.word	0x20000098
 800e6b4:	e000ef34 	.word	0xe000ef34

0800e6b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	607b      	str	r3, [r7, #4]
}
 800e6d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e6d2:	4b10      	ldr	r3, [pc, #64]	@ (800e714 <vPortEnterCritical+0x5c>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	4a0e      	ldr	r2, [pc, #56]	@ (800e714 <vPortEnterCritical+0x5c>)
 800e6da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800e714 <vPortEnterCritical+0x5c>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d110      	bne.n	800e706 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e6e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e718 <vPortEnterCritical+0x60>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00b      	beq.n	800e706 <vPortEnterCritical+0x4e>
	__asm volatile
 800e6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6f2:	f383 8811 	msr	BASEPRI, r3
 800e6f6:	f3bf 8f6f 	isb	sy
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	603b      	str	r3, [r7, #0]
}
 800e700:	bf00      	nop
 800e702:	bf00      	nop
 800e704:	e7fd      	b.n	800e702 <vPortEnterCritical+0x4a>
	}
}
 800e706:	bf00      	nop
 800e708:	370c      	adds	r7, #12
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr
 800e712:	bf00      	nop
 800e714:	20000098 	.word	0x20000098
 800e718:	e000ed04 	.word	0xe000ed04

0800e71c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e722:	4b12      	ldr	r3, [pc, #72]	@ (800e76c <vPortExitCritical+0x50>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d10b      	bne.n	800e742 <vPortExitCritical+0x26>
	__asm volatile
 800e72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e72e:	f383 8811 	msr	BASEPRI, r3
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	607b      	str	r3, [r7, #4]
}
 800e73c:	bf00      	nop
 800e73e:	bf00      	nop
 800e740:	e7fd      	b.n	800e73e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e742:	4b0a      	ldr	r3, [pc, #40]	@ (800e76c <vPortExitCritical+0x50>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	3b01      	subs	r3, #1
 800e748:	4a08      	ldr	r2, [pc, #32]	@ (800e76c <vPortExitCritical+0x50>)
 800e74a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e74c:	4b07      	ldr	r3, [pc, #28]	@ (800e76c <vPortExitCritical+0x50>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d105      	bne.n	800e760 <vPortExitCritical+0x44>
 800e754:	2300      	movs	r3, #0
 800e756:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	f383 8811 	msr	BASEPRI, r3
}
 800e75e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e760:	bf00      	nop
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr
 800e76c:	20000098 	.word	0x20000098

0800e770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e770:	f3ef 8009 	mrs	r0, PSP
 800e774:	f3bf 8f6f 	isb	sy
 800e778:	4b15      	ldr	r3, [pc, #84]	@ (800e7d0 <pxCurrentTCBConst>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	f01e 0f10 	tst.w	lr, #16
 800e780:	bf08      	it	eq
 800e782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e78a:	6010      	str	r0, [r2, #0]
 800e78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e790:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e794:	f380 8811 	msr	BASEPRI, r0
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	f3bf 8f6f 	isb	sy
 800e7a0:	f7fe ff9e 	bl	800d6e0 <vTaskSwitchContext>
 800e7a4:	f04f 0000 	mov.w	r0, #0
 800e7a8:	f380 8811 	msr	BASEPRI, r0
 800e7ac:	bc09      	pop	{r0, r3}
 800e7ae:	6819      	ldr	r1, [r3, #0]
 800e7b0:	6808      	ldr	r0, [r1, #0]
 800e7b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b6:	f01e 0f10 	tst.w	lr, #16
 800e7ba:	bf08      	it	eq
 800e7bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e7c0:	f380 8809 	msr	PSP, r0
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop
 800e7cc:	f3af 8000 	nop.w

0800e7d0 <pxCurrentTCBConst>:
 800e7d0:	200010c4 	.word	0x200010c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e7d4:	bf00      	nop
 800e7d6:	bf00      	nop

0800e7d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e2:	f383 8811 	msr	BASEPRI, r3
 800e7e6:	f3bf 8f6f 	isb	sy
 800e7ea:	f3bf 8f4f 	dsb	sy
 800e7ee:	607b      	str	r3, [r7, #4]
}
 800e7f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e7f2:	f7fe febb 	bl	800d56c <xTaskIncrementTick>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d003      	beq.n	800e804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e7fc:	4b06      	ldr	r3, [pc, #24]	@ (800e818 <xPortSysTickHandler+0x40>)
 800e7fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e802:	601a      	str	r2, [r3, #0]
 800e804:	2300      	movs	r3, #0
 800e806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	f383 8811 	msr	BASEPRI, r3
}
 800e80e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e810:	bf00      	nop
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	e000ed04 	.word	0xe000ed04

0800e81c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e81c:	b480      	push	{r7}
 800e81e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e820:	4b0b      	ldr	r3, [pc, #44]	@ (800e850 <vPortSetupTimerInterrupt+0x34>)
 800e822:	2200      	movs	r2, #0
 800e824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e826:	4b0b      	ldr	r3, [pc, #44]	@ (800e854 <vPortSetupTimerInterrupt+0x38>)
 800e828:	2200      	movs	r2, #0
 800e82a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e82c:	4b0a      	ldr	r3, [pc, #40]	@ (800e858 <vPortSetupTimerInterrupt+0x3c>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a0a      	ldr	r2, [pc, #40]	@ (800e85c <vPortSetupTimerInterrupt+0x40>)
 800e832:	fba2 2303 	umull	r2, r3, r2, r3
 800e836:	099b      	lsrs	r3, r3, #6
 800e838:	4a09      	ldr	r2, [pc, #36]	@ (800e860 <vPortSetupTimerInterrupt+0x44>)
 800e83a:	3b01      	subs	r3, #1
 800e83c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e83e:	4b04      	ldr	r3, [pc, #16]	@ (800e850 <vPortSetupTimerInterrupt+0x34>)
 800e840:	2207      	movs	r2, #7
 800e842:	601a      	str	r2, [r3, #0]
}
 800e844:	bf00      	nop
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop
 800e850:	e000e010 	.word	0xe000e010
 800e854:	e000e018 	.word	0xe000e018
 800e858:	20000000 	.word	0x20000000
 800e85c:	10624dd3 	.word	0x10624dd3
 800e860:	e000e014 	.word	0xe000e014

0800e864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e864:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e874 <vPortEnableVFP+0x10>
 800e868:	6801      	ldr	r1, [r0, #0]
 800e86a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e86e:	6001      	str	r1, [r0, #0]
 800e870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e872:	bf00      	nop
 800e874:	e000ed88 	.word	0xe000ed88

0800e878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e878:	b480      	push	{r7}
 800e87a:	b085      	sub	sp, #20
 800e87c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e87e:	f3ef 8305 	mrs	r3, IPSR
 800e882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2b0f      	cmp	r3, #15
 800e888:	d915      	bls.n	800e8b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e88a:	4a18      	ldr	r2, [pc, #96]	@ (800e8ec <vPortValidateInterruptPriority+0x74>)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	4413      	add	r3, r2
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e894:	4b16      	ldr	r3, [pc, #88]	@ (800e8f0 <vPortValidateInterruptPriority+0x78>)
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	7afa      	ldrb	r2, [r7, #11]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d20b      	bcs.n	800e8b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a2:	f383 8811 	msr	BASEPRI, r3
 800e8a6:	f3bf 8f6f 	isb	sy
 800e8aa:	f3bf 8f4f 	dsb	sy
 800e8ae:	607b      	str	r3, [r7, #4]
}
 800e8b0:	bf00      	nop
 800e8b2:	bf00      	nop
 800e8b4:	e7fd      	b.n	800e8b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e8b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e8f4 <vPortValidateInterruptPriority+0x7c>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e8be:	4b0e      	ldr	r3, [pc, #56]	@ (800e8f8 <vPortValidateInterruptPriority+0x80>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d90b      	bls.n	800e8de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ca:	f383 8811 	msr	BASEPRI, r3
 800e8ce:	f3bf 8f6f 	isb	sy
 800e8d2:	f3bf 8f4f 	dsb	sy
 800e8d6:	603b      	str	r3, [r7, #0]
}
 800e8d8:	bf00      	nop
 800e8da:	bf00      	nop
 800e8dc:	e7fd      	b.n	800e8da <vPortValidateInterruptPriority+0x62>
	}
 800e8de:	bf00      	nop
 800e8e0:	3714      	adds	r7, #20
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr
 800e8ea:	bf00      	nop
 800e8ec:	e000e3f0 	.word	0xe000e3f0
 800e8f0:	200016f0 	.word	0x200016f0
 800e8f4:	e000ed0c 	.word	0xe000ed0c
 800e8f8:	200016f4 	.word	0x200016f4

0800e8fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b08a      	sub	sp, #40	@ 0x28
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e904:	2300      	movs	r3, #0
 800e906:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e908:	f7fe fd74 	bl	800d3f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e90c:	4b5c      	ldr	r3, [pc, #368]	@ (800ea80 <pvPortMalloc+0x184>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d101      	bne.n	800e918 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e914:	f000 f924 	bl	800eb60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e918:	4b5a      	ldr	r3, [pc, #360]	@ (800ea84 <pvPortMalloc+0x188>)
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	4013      	ands	r3, r2
 800e920:	2b00      	cmp	r3, #0
 800e922:	f040 8095 	bne.w	800ea50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d01e      	beq.n	800e96a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e92c:	2208      	movs	r2, #8
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	4413      	add	r3, r2
 800e932:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f003 0307 	and.w	r3, r3, #7
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d015      	beq.n	800e96a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f023 0307 	bic.w	r3, r3, #7
 800e944:	3308      	adds	r3, #8
 800e946:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f003 0307 	and.w	r3, r3, #7
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d00b      	beq.n	800e96a <pvPortMalloc+0x6e>
	__asm volatile
 800e952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e956:	f383 8811 	msr	BASEPRI, r3
 800e95a:	f3bf 8f6f 	isb	sy
 800e95e:	f3bf 8f4f 	dsb	sy
 800e962:	617b      	str	r3, [r7, #20]
}
 800e964:	bf00      	nop
 800e966:	bf00      	nop
 800e968:	e7fd      	b.n	800e966 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d06f      	beq.n	800ea50 <pvPortMalloc+0x154>
 800e970:	4b45      	ldr	r3, [pc, #276]	@ (800ea88 <pvPortMalloc+0x18c>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	429a      	cmp	r2, r3
 800e978:	d86a      	bhi.n	800ea50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e97a:	4b44      	ldr	r3, [pc, #272]	@ (800ea8c <pvPortMalloc+0x190>)
 800e97c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e97e:	4b43      	ldr	r3, [pc, #268]	@ (800ea8c <pvPortMalloc+0x190>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e984:	e004      	b.n	800e990 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e988:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	429a      	cmp	r2, r3
 800e998:	d903      	bls.n	800e9a2 <pvPortMalloc+0xa6>
 800e99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d1f1      	bne.n	800e986 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e9a2:	4b37      	ldr	r3, [pc, #220]	@ (800ea80 <pvPortMalloc+0x184>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d051      	beq.n	800ea50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e9ac:	6a3b      	ldr	r3, [r7, #32]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	2208      	movs	r2, #8
 800e9b2:	4413      	add	r3, r2
 800e9b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	6a3b      	ldr	r3, [r7, #32]
 800e9bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c0:	685a      	ldr	r2, [r3, #4]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	1ad2      	subs	r2, r2, r3
 800e9c6:	2308      	movs	r3, #8
 800e9c8:	005b      	lsls	r3, r3, #1
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d920      	bls.n	800ea10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e9ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	f003 0307 	and.w	r3, r3, #7
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d00b      	beq.n	800e9f8 <pvPortMalloc+0xfc>
	__asm volatile
 800e9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9e4:	f383 8811 	msr	BASEPRI, r3
 800e9e8:	f3bf 8f6f 	isb	sy
 800e9ec:	f3bf 8f4f 	dsb	sy
 800e9f0:	613b      	str	r3, [r7, #16]
}
 800e9f2:	bf00      	nop
 800e9f4:	bf00      	nop
 800e9f6:	e7fd      	b.n	800e9f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9fa:	685a      	ldr	r2, [r3, #4]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	1ad2      	subs	r2, r2, r3
 800ea00:	69bb      	ldr	r3, [r7, #24]
 800ea02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea0a:	69b8      	ldr	r0, [r7, #24]
 800ea0c:	f000 f90a 	bl	800ec24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea10:	4b1d      	ldr	r3, [pc, #116]	@ (800ea88 <pvPortMalloc+0x18c>)
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	4a1b      	ldr	r2, [pc, #108]	@ (800ea88 <pvPortMalloc+0x18c>)
 800ea1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ea88 <pvPortMalloc+0x18c>)
 800ea20:	681a      	ldr	r2, [r3, #0]
 800ea22:	4b1b      	ldr	r3, [pc, #108]	@ (800ea90 <pvPortMalloc+0x194>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d203      	bcs.n	800ea32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea2a:	4b17      	ldr	r3, [pc, #92]	@ (800ea88 <pvPortMalloc+0x18c>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a18      	ldr	r2, [pc, #96]	@ (800ea90 <pvPortMalloc+0x194>)
 800ea30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea34:	685a      	ldr	r2, [r3, #4]
 800ea36:	4b13      	ldr	r3, [pc, #76]	@ (800ea84 <pvPortMalloc+0x188>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	431a      	orrs	r2, r3
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea42:	2200      	movs	r2, #0
 800ea44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ea46:	4b13      	ldr	r3, [pc, #76]	@ (800ea94 <pvPortMalloc+0x198>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	4a11      	ldr	r2, [pc, #68]	@ (800ea94 <pvPortMalloc+0x198>)
 800ea4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea50:	f7fe fcde 	bl	800d410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	f003 0307 	and.w	r3, r3, #7
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d00b      	beq.n	800ea76 <pvPortMalloc+0x17a>
	__asm volatile
 800ea5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea62:	f383 8811 	msr	BASEPRI, r3
 800ea66:	f3bf 8f6f 	isb	sy
 800ea6a:	f3bf 8f4f 	dsb	sy
 800ea6e:	60fb      	str	r3, [r7, #12]
}
 800ea70:	bf00      	nop
 800ea72:	bf00      	nop
 800ea74:	e7fd      	b.n	800ea72 <pvPortMalloc+0x176>
	return pvReturn;
 800ea76:	69fb      	ldr	r3, [r7, #28]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3728      	adds	r7, #40	@ 0x28
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	20002a88 	.word	0x20002a88
 800ea84:	20002a9c 	.word	0x20002a9c
 800ea88:	20002a8c 	.word	0x20002a8c
 800ea8c:	20002a80 	.word	0x20002a80
 800ea90:	20002a90 	.word	0x20002a90
 800ea94:	20002a94 	.word	0x20002a94

0800ea98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b086      	sub	sp, #24
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d04f      	beq.n	800eb4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eaaa:	2308      	movs	r3, #8
 800eaac:	425b      	negs	r3, r3
 800eaae:	697a      	ldr	r2, [r7, #20]
 800eab0:	4413      	add	r3, r2
 800eab2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	685a      	ldr	r2, [r3, #4]
 800eabc:	4b25      	ldr	r3, [pc, #148]	@ (800eb54 <vPortFree+0xbc>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4013      	ands	r3, r2
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d10b      	bne.n	800eade <vPortFree+0x46>
	__asm volatile
 800eac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaca:	f383 8811 	msr	BASEPRI, r3
 800eace:	f3bf 8f6f 	isb	sy
 800ead2:	f3bf 8f4f 	dsb	sy
 800ead6:	60fb      	str	r3, [r7, #12]
}
 800ead8:	bf00      	nop
 800eada:	bf00      	nop
 800eadc:	e7fd      	b.n	800eada <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d00b      	beq.n	800eafe <vPortFree+0x66>
	__asm volatile
 800eae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaea:	f383 8811 	msr	BASEPRI, r3
 800eaee:	f3bf 8f6f 	isb	sy
 800eaf2:	f3bf 8f4f 	dsb	sy
 800eaf6:	60bb      	str	r3, [r7, #8]
}
 800eaf8:	bf00      	nop
 800eafa:	bf00      	nop
 800eafc:	e7fd      	b.n	800eafa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	685a      	ldr	r2, [r3, #4]
 800eb02:	4b14      	ldr	r3, [pc, #80]	@ (800eb54 <vPortFree+0xbc>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	4013      	ands	r3, r2
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d01e      	beq.n	800eb4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d11a      	bne.n	800eb4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	685a      	ldr	r2, [r3, #4]
 800eb18:	4b0e      	ldr	r3, [pc, #56]	@ (800eb54 <vPortFree+0xbc>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	43db      	mvns	r3, r3
 800eb1e:	401a      	ands	r2, r3
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb24:	f7fe fc66 	bl	800d3f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	685a      	ldr	r2, [r3, #4]
 800eb2c:	4b0a      	ldr	r3, [pc, #40]	@ (800eb58 <vPortFree+0xc0>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4413      	add	r3, r2
 800eb32:	4a09      	ldr	r2, [pc, #36]	@ (800eb58 <vPortFree+0xc0>)
 800eb34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb36:	6938      	ldr	r0, [r7, #16]
 800eb38:	f000 f874 	bl	800ec24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eb3c:	4b07      	ldr	r3, [pc, #28]	@ (800eb5c <vPortFree+0xc4>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	3301      	adds	r3, #1
 800eb42:	4a06      	ldr	r2, [pc, #24]	@ (800eb5c <vPortFree+0xc4>)
 800eb44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eb46:	f7fe fc63 	bl	800d410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb4a:	bf00      	nop
 800eb4c:	3718      	adds	r7, #24
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	20002a9c 	.word	0x20002a9c
 800eb58:	20002a8c 	.word	0x20002a8c
 800eb5c:	20002a98 	.word	0x20002a98

0800eb60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb60:	b480      	push	{r7}
 800eb62:	b085      	sub	sp, #20
 800eb64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb66:	f241 3388 	movw	r3, #5000	@ 0x1388
 800eb6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb6c:	4b27      	ldr	r3, [pc, #156]	@ (800ec0c <prvHeapInit+0xac>)
 800eb6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f003 0307 	and.w	r3, r3, #7
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00c      	beq.n	800eb94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	3307      	adds	r3, #7
 800eb7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f023 0307 	bic.w	r3, r3, #7
 800eb86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb88:	68ba      	ldr	r2, [r7, #8]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	1ad3      	subs	r3, r2, r3
 800eb8e:	4a1f      	ldr	r2, [pc, #124]	@ (800ec0c <prvHeapInit+0xac>)
 800eb90:	4413      	add	r3, r2
 800eb92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb98:	4a1d      	ldr	r2, [pc, #116]	@ (800ec10 <prvHeapInit+0xb0>)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ec10 <prvHeapInit+0xb0>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	4413      	add	r3, r2
 800ebaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ebac:	2208      	movs	r2, #8
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	1a9b      	subs	r3, r3, r2
 800ebb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f023 0307 	bic.w	r3, r3, #7
 800ebba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	4a15      	ldr	r2, [pc, #84]	@ (800ec14 <prvHeapInit+0xb4>)
 800ebc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ebc2:	4b14      	ldr	r3, [pc, #80]	@ (800ec14 <prvHeapInit+0xb4>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ebca:	4b12      	ldr	r3, [pc, #72]	@ (800ec14 <prvHeapInit+0xb4>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	68fa      	ldr	r2, [r7, #12]
 800ebda:	1ad2      	subs	r2, r2, r3
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ebe0:	4b0c      	ldr	r3, [pc, #48]	@ (800ec14 <prvHeapInit+0xb4>)
 800ebe2:	681a      	ldr	r2, [r3, #0]
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	4a0a      	ldr	r2, [pc, #40]	@ (800ec18 <prvHeapInit+0xb8>)
 800ebee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	4a09      	ldr	r2, [pc, #36]	@ (800ec1c <prvHeapInit+0xbc>)
 800ebf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ebf8:	4b09      	ldr	r3, [pc, #36]	@ (800ec20 <prvHeapInit+0xc0>)
 800ebfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ebfe:	601a      	str	r2, [r3, #0]
}
 800ec00:	bf00      	nop
 800ec02:	3714      	adds	r7, #20
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr
 800ec0c:	200016f8 	.word	0x200016f8
 800ec10:	20002a80 	.word	0x20002a80
 800ec14:	20002a88 	.word	0x20002a88
 800ec18:	20002a90 	.word	0x20002a90
 800ec1c:	20002a8c 	.word	0x20002a8c
 800ec20:	20002a9c 	.word	0x20002a9c

0800ec24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec2c:	4b28      	ldr	r3, [pc, #160]	@ (800ecd0 <prvInsertBlockIntoFreeList+0xac>)
 800ec2e:	60fb      	str	r3, [r7, #12]
 800ec30:	e002      	b.n	800ec38 <prvInsertBlockIntoFreeList+0x14>
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	60fb      	str	r3, [r7, #12]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d8f7      	bhi.n	800ec32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	68ba      	ldr	r2, [r7, #8]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d108      	bne.n	800ec66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	685a      	ldr	r2, [r3, #4]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	441a      	add	r2, r3
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	68ba      	ldr	r2, [r7, #8]
 800ec70:	441a      	add	r2, r3
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d118      	bne.n	800ecac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681a      	ldr	r2, [r3, #0]
 800ec7e:	4b15      	ldr	r3, [pc, #84]	@ (800ecd4 <prvInsertBlockIntoFreeList+0xb0>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d00d      	beq.n	800eca2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	685a      	ldr	r2, [r3, #4]
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	441a      	add	r2, r3
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	601a      	str	r2, [r3, #0]
 800eca0:	e008      	b.n	800ecb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eca2:	4b0c      	ldr	r3, [pc, #48]	@ (800ecd4 <prvInsertBlockIntoFreeList+0xb0>)
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	601a      	str	r2, [r3, #0]
 800ecaa:	e003      	b.n	800ecb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681a      	ldr	r2, [r3, #0]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ecb4:	68fa      	ldr	r2, [r7, #12]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d002      	beq.n	800ecc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecc2:	bf00      	nop
 800ecc4:	3714      	adds	r7, #20
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eccc:	4770      	bx	lr
 800ecce:	bf00      	nop
 800ecd0:	20002a80 	.word	0x20002a80
 800ecd4:	20002a88 	.word	0x20002a88

0800ecd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	4912      	ldr	r1, [pc, #72]	@ (800ed28 <MX_USB_DEVICE_Init+0x50>)
 800ece0:	4812      	ldr	r0, [pc, #72]	@ (800ed2c <MX_USB_DEVICE_Init+0x54>)
 800ece2:	f7fb fed9 	bl	800aa98 <USBD_Init>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d001      	beq.n	800ecf0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ecec:	f7f3 fd98 	bl	8002820 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ecf0:	490f      	ldr	r1, [pc, #60]	@ (800ed30 <MX_USB_DEVICE_Init+0x58>)
 800ecf2:	480e      	ldr	r0, [pc, #56]	@ (800ed2c <MX_USB_DEVICE_Init+0x54>)
 800ecf4:	f7fb ff00 	bl	800aaf8 <USBD_RegisterClass>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d001      	beq.n	800ed02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ecfe:	f7f3 fd8f 	bl	8002820 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ed02:	490c      	ldr	r1, [pc, #48]	@ (800ed34 <MX_USB_DEVICE_Init+0x5c>)
 800ed04:	4809      	ldr	r0, [pc, #36]	@ (800ed2c <MX_USB_DEVICE_Init+0x54>)
 800ed06:	f7fb fdf7 	bl	800a8f8 <USBD_CDC_RegisterInterface>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d001      	beq.n	800ed14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ed10:	f7f3 fd86 	bl	8002820 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ed14:	4805      	ldr	r0, [pc, #20]	@ (800ed2c <MX_USB_DEVICE_Init+0x54>)
 800ed16:	f7fb ff25 	bl	800ab64 <USBD_Start>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d001      	beq.n	800ed24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ed20:	f7f3 fd7e 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ed24:	bf00      	nop
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	200000b8 	.word	0x200000b8
 800ed2c:	20002aa0 	.word	0x20002aa0
 800ed30:	20000018 	.word	0x20000018
 800ed34:	200000a4 	.word	0x200000a4

0800ed38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	4905      	ldr	r1, [pc, #20]	@ (800ed54 <CDC_Init_FS+0x1c>)
 800ed40:	4805      	ldr	r0, [pc, #20]	@ (800ed58 <CDC_Init_FS+0x20>)
 800ed42:	f7fb fdf3 	bl	800a92c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ed46:	4905      	ldr	r1, [pc, #20]	@ (800ed5c <CDC_Init_FS+0x24>)
 800ed48:	4803      	ldr	r0, [pc, #12]	@ (800ed58 <CDC_Init_FS+0x20>)
 800ed4a:	f7fb fe11 	bl	800a970 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ed4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	2000357c 	.word	0x2000357c
 800ed58:	20002aa0 	.word	0x20002aa0
 800ed5c:	20002d7c 	.word	0x20002d7c

0800ed60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ed60:	b480      	push	{r7}
 800ed62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ed64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6e:	4770      	bx	lr

0800ed70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b083      	sub	sp, #12
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	4603      	mov	r3, r0
 800ed78:	6039      	str	r1, [r7, #0]
 800ed7a:	71fb      	strb	r3, [r7, #7]
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ed80:	79fb      	ldrb	r3, [r7, #7]
 800ed82:	2b23      	cmp	r3, #35	@ 0x23
 800ed84:	d85c      	bhi.n	800ee40 <CDC_Control_FS+0xd0>
 800ed86:	a201      	add	r2, pc, #4	@ (adr r2, 800ed8c <CDC_Control_FS+0x1c>)
 800ed88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed8c:	0800ee41 	.word	0x0800ee41
 800ed90:	0800ee41 	.word	0x0800ee41
 800ed94:	0800ee41 	.word	0x0800ee41
 800ed98:	0800ee41 	.word	0x0800ee41
 800ed9c:	0800ee41 	.word	0x0800ee41
 800eda0:	0800ee41 	.word	0x0800ee41
 800eda4:	0800ee41 	.word	0x0800ee41
 800eda8:	0800ee41 	.word	0x0800ee41
 800edac:	0800ee41 	.word	0x0800ee41
 800edb0:	0800ee41 	.word	0x0800ee41
 800edb4:	0800ee41 	.word	0x0800ee41
 800edb8:	0800ee41 	.word	0x0800ee41
 800edbc:	0800ee41 	.word	0x0800ee41
 800edc0:	0800ee41 	.word	0x0800ee41
 800edc4:	0800ee41 	.word	0x0800ee41
 800edc8:	0800ee41 	.word	0x0800ee41
 800edcc:	0800ee41 	.word	0x0800ee41
 800edd0:	0800ee41 	.word	0x0800ee41
 800edd4:	0800ee41 	.word	0x0800ee41
 800edd8:	0800ee41 	.word	0x0800ee41
 800eddc:	0800ee41 	.word	0x0800ee41
 800ede0:	0800ee41 	.word	0x0800ee41
 800ede4:	0800ee41 	.word	0x0800ee41
 800ede8:	0800ee41 	.word	0x0800ee41
 800edec:	0800ee41 	.word	0x0800ee41
 800edf0:	0800ee41 	.word	0x0800ee41
 800edf4:	0800ee41 	.word	0x0800ee41
 800edf8:	0800ee41 	.word	0x0800ee41
 800edfc:	0800ee41 	.word	0x0800ee41
 800ee00:	0800ee41 	.word	0x0800ee41
 800ee04:	0800ee41 	.word	0x0800ee41
 800ee08:	0800ee41 	.word	0x0800ee41
 800ee0c:	0800ee1d 	.word	0x0800ee1d
 800ee10:	0800ee2f 	.word	0x0800ee2f
 800ee14:	0800ee41 	.word	0x0800ee41
 800ee18:	0800ee41 	.word	0x0800ee41
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800ee1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ee50 <CDC_Control_FS+0xe0>)
 800ee1e:	683a      	ldr	r2, [r7, #0]
 800ee20:	6810      	ldr	r0, [r2, #0]
 800ee22:	6018      	str	r0, [r3, #0]
 800ee24:	8891      	ldrh	r1, [r2, #4]
 800ee26:	7992      	ldrb	r2, [r2, #6]
 800ee28:	8099      	strh	r1, [r3, #4]
 800ee2a:	719a      	strb	r2, [r3, #6]
    break;
 800ee2c:	e009      	b.n	800ee42 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	4a07      	ldr	r2, [pc, #28]	@ (800ee50 <CDC_Control_FS+0xe0>)
 800ee32:	6810      	ldr	r0, [r2, #0]
 800ee34:	6018      	str	r0, [r3, #0]
 800ee36:	8891      	ldrh	r1, [r2, #4]
 800ee38:	7992      	ldrb	r2, [r2, #6]
 800ee3a:	8099      	strh	r1, [r3, #4]
 800ee3c:	719a      	strb	r2, [r3, #6]
    break;
 800ee3e:	e000      	b.n	800ee42 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ee40:	bf00      	nop
  }

  return (USBD_OK);
 800ee42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	370c      	adds	r7, #12
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr
 800ee50:	2000009c 	.word	0x2000009c

0800ee54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ee5e:	6879      	ldr	r1, [r7, #4]
 800ee60:	4805      	ldr	r0, [pc, #20]	@ (800ee78 <CDC_Receive_FS+0x24>)
 800ee62:	f7fb fd85 	bl	800a970 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ee66:	4804      	ldr	r0, [pc, #16]	@ (800ee78 <CDC_Receive_FS+0x24>)
 800ee68:	f7fb fde0 	bl	800aa2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ee6c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3708      	adds	r7, #8
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	20002aa0 	.word	0x20002aa0

0800ee7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b084      	sub	sp, #16
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	460b      	mov	r3, r1
 800ee86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ee8c:	4b0d      	ldr	r3, [pc, #52]	@ (800eec4 <CDC_Transmit_FS+0x48>)
 800ee8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ee9e:	2301      	movs	r3, #1
 800eea0:	e00b      	b.n	800eeba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800eea2:	887b      	ldrh	r3, [r7, #2]
 800eea4:	461a      	mov	r2, r3
 800eea6:	6879      	ldr	r1, [r7, #4]
 800eea8:	4806      	ldr	r0, [pc, #24]	@ (800eec4 <CDC_Transmit_FS+0x48>)
 800eeaa:	f7fb fd3f 	bl	800a92c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800eeae:	4805      	ldr	r0, [pc, #20]	@ (800eec4 <CDC_Transmit_FS+0x48>)
 800eeb0:	f7fb fd7c 	bl	800a9ac <USBD_CDC_TransmitPacket>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eeb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3710      	adds	r7, #16
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	20002aa0 	.word	0x20002aa0

0800eec8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b087      	sub	sp, #28
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	4613      	mov	r3, r2
 800eed4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eed6:	2300      	movs	r3, #0
 800eed8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eeda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eede:	4618      	mov	r0, r3
 800eee0:	371c      	adds	r7, #28
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr
	...

0800eeec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	4603      	mov	r3, r0
 800eef4:	6039      	str	r1, [r7, #0]
 800eef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	2212      	movs	r2, #18
 800eefc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eefe:	4b03      	ldr	r3, [pc, #12]	@ (800ef0c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	370c      	adds	r7, #12
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr
 800ef0c:	200000d8 	.word	0x200000d8

0800ef10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b083      	sub	sp, #12
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	4603      	mov	r3, r0
 800ef18:	6039      	str	r1, [r7, #0]
 800ef1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	2204      	movs	r2, #4
 800ef20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ef22:	4b03      	ldr	r3, [pc, #12]	@ (800ef30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	370c      	adds	r7, #12
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr
 800ef30:	200000f8 	.word	0x200000f8

0800ef34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	6039      	str	r1, [r7, #0]
 800ef3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef40:	79fb      	ldrb	r3, [r7, #7]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d105      	bne.n	800ef52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef46:	683a      	ldr	r2, [r7, #0]
 800ef48:	4907      	ldr	r1, [pc, #28]	@ (800ef68 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef4a:	4808      	ldr	r0, [pc, #32]	@ (800ef6c <USBD_FS_ProductStrDescriptor+0x38>)
 800ef4c:	f7fc ffe4 	bl	800bf18 <USBD_GetString>
 800ef50:	e004      	b.n	800ef5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef52:	683a      	ldr	r2, [r7, #0]
 800ef54:	4904      	ldr	r1, [pc, #16]	@ (800ef68 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef56:	4805      	ldr	r0, [pc, #20]	@ (800ef6c <USBD_FS_ProductStrDescriptor+0x38>)
 800ef58:	f7fc ffde 	bl	800bf18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef5c:	4b02      	ldr	r3, [pc, #8]	@ (800ef68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	20003d7c 	.word	0x20003d7c
 800ef6c:	080123e4 	.word	0x080123e4

0800ef70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	4603      	mov	r3, r0
 800ef78:	6039      	str	r1, [r7, #0]
 800ef7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ef7c:	683a      	ldr	r2, [r7, #0]
 800ef7e:	4904      	ldr	r1, [pc, #16]	@ (800ef90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ef80:	4804      	ldr	r0, [pc, #16]	@ (800ef94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ef82:	f7fc ffc9 	bl	800bf18 <USBD_GetString>
  return USBD_StrDesc;
 800ef86:	4b02      	ldr	r3, [pc, #8]	@ (800ef90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	20003d7c 	.word	0x20003d7c
 800ef94:	080123fc 	.word	0x080123fc

0800ef98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	4603      	mov	r3, r0
 800efa0:	6039      	str	r1, [r7, #0]
 800efa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	221a      	movs	r2, #26
 800efa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800efaa:	f000 f855 	bl	800f058 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800efae:	4b02      	ldr	r3, [pc, #8]	@ (800efb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3708      	adds	r7, #8
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	200000fc 	.word	0x200000fc

0800efbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	4603      	mov	r3, r0
 800efc4:	6039      	str	r1, [r7, #0]
 800efc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800efc8:	79fb      	ldrb	r3, [r7, #7]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d105      	bne.n	800efda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800efce:	683a      	ldr	r2, [r7, #0]
 800efd0:	4907      	ldr	r1, [pc, #28]	@ (800eff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800efd2:	4808      	ldr	r0, [pc, #32]	@ (800eff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800efd4:	f7fc ffa0 	bl	800bf18 <USBD_GetString>
 800efd8:	e004      	b.n	800efe4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800efda:	683a      	ldr	r2, [r7, #0]
 800efdc:	4904      	ldr	r1, [pc, #16]	@ (800eff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800efde:	4805      	ldr	r0, [pc, #20]	@ (800eff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800efe0:	f7fc ff9a 	bl	800bf18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800efe4:	4b02      	ldr	r3, [pc, #8]	@ (800eff0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3708      	adds	r7, #8
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	20003d7c 	.word	0x20003d7c
 800eff4:	08012410 	.word	0x08012410

0800eff8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	4603      	mov	r3, r0
 800f000:	6039      	str	r1, [r7, #0]
 800f002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f004:	79fb      	ldrb	r3, [r7, #7]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d105      	bne.n	800f016 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f00a:	683a      	ldr	r2, [r7, #0]
 800f00c:	4907      	ldr	r1, [pc, #28]	@ (800f02c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f00e:	4808      	ldr	r0, [pc, #32]	@ (800f030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f010:	f7fc ff82 	bl	800bf18 <USBD_GetString>
 800f014:	e004      	b.n	800f020 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f016:	683a      	ldr	r2, [r7, #0]
 800f018:	4904      	ldr	r1, [pc, #16]	@ (800f02c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f01a:	4805      	ldr	r0, [pc, #20]	@ (800f030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f01c:	f7fc ff7c 	bl	800bf18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f020:	4b02      	ldr	r3, [pc, #8]	@ (800f02c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f022:	4618      	mov	r0, r3
 800f024:	3708      	adds	r7, #8
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	20003d7c 	.word	0x20003d7c
 800f030:	0801241c 	.word	0x0801241c

0800f034 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	4603      	mov	r3, r0
 800f03c:	6039      	str	r1, [r7, #0]
 800f03e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	220c      	movs	r2, #12
 800f044:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f046:	4b03      	ldr	r3, [pc, #12]	@ (800f054 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f048:	4618      	mov	r0, r3
 800f04a:	370c      	adds	r7, #12
 800f04c:	46bd      	mov	sp, r7
 800f04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f052:	4770      	bx	lr
 800f054:	200000ec 	.word	0x200000ec

0800f058 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f05e:	4b0f      	ldr	r3, [pc, #60]	@ (800f09c <Get_SerialNum+0x44>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f064:	4b0e      	ldr	r3, [pc, #56]	@ (800f0a0 <Get_SerialNum+0x48>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f06a:	4b0e      	ldr	r3, [pc, #56]	@ (800f0a4 <Get_SerialNum+0x4c>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4413      	add	r3, r2
 800f076:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d009      	beq.n	800f092 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f07e:	2208      	movs	r2, #8
 800f080:	4909      	ldr	r1, [pc, #36]	@ (800f0a8 <Get_SerialNum+0x50>)
 800f082:	68f8      	ldr	r0, [r7, #12]
 800f084:	f000 f814 	bl	800f0b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f088:	2204      	movs	r2, #4
 800f08a:	4908      	ldr	r1, [pc, #32]	@ (800f0ac <Get_SerialNum+0x54>)
 800f08c:	68b8      	ldr	r0, [r7, #8]
 800f08e:	f000 f80f 	bl	800f0b0 <IntToUnicode>
  }
}
 800f092:	bf00      	nop
 800f094:	3710      	adds	r7, #16
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop
 800f09c:	1fff7590 	.word	0x1fff7590
 800f0a0:	1fff7594 	.word	0x1fff7594
 800f0a4:	1fff7598 	.word	0x1fff7598
 800f0a8:	200000fe 	.word	0x200000fe
 800f0ac:	2000010e 	.word	0x2000010e

0800f0b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b087      	sub	sp, #28
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	75fb      	strb	r3, [r7, #23]
 800f0c6:	e027      	b.n	800f118 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	0f1b      	lsrs	r3, r3, #28
 800f0cc:	2b09      	cmp	r3, #9
 800f0ce:	d80b      	bhi.n	800f0e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	0f1b      	lsrs	r3, r3, #28
 800f0d4:	b2da      	uxtb	r2, r3
 800f0d6:	7dfb      	ldrb	r3, [r7, #23]
 800f0d8:	005b      	lsls	r3, r3, #1
 800f0da:	4619      	mov	r1, r3
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	440b      	add	r3, r1
 800f0e0:	3230      	adds	r2, #48	@ 0x30
 800f0e2:	b2d2      	uxtb	r2, r2
 800f0e4:	701a      	strb	r2, [r3, #0]
 800f0e6:	e00a      	b.n	800f0fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	0f1b      	lsrs	r3, r3, #28
 800f0ec:	b2da      	uxtb	r2, r3
 800f0ee:	7dfb      	ldrb	r3, [r7, #23]
 800f0f0:	005b      	lsls	r3, r3, #1
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	440b      	add	r3, r1
 800f0f8:	3237      	adds	r2, #55	@ 0x37
 800f0fa:	b2d2      	uxtb	r2, r2
 800f0fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	011b      	lsls	r3, r3, #4
 800f102:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f104:	7dfb      	ldrb	r3, [r7, #23]
 800f106:	005b      	lsls	r3, r3, #1
 800f108:	3301      	adds	r3, #1
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	4413      	add	r3, r2
 800f10e:	2200      	movs	r2, #0
 800f110:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f112:	7dfb      	ldrb	r3, [r7, #23]
 800f114:	3301      	adds	r3, #1
 800f116:	75fb      	strb	r3, [r7, #23]
 800f118:	7dfa      	ldrb	r2, [r7, #23]
 800f11a:	79fb      	ldrb	r3, [r7, #7]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d3d3      	bcc.n	800f0c8 <IntToUnicode+0x18>
  }
}
 800f120:	bf00      	nop
 800f122:	bf00      	nop
 800f124:	371c      	adds	r7, #28
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr
	...

0800f130 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b0ae      	sub	sp, #184	@ 0xb8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f138:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800f13c:	2200      	movs	r2, #0
 800f13e:	601a      	str	r2, [r3, #0]
 800f140:	605a      	str	r2, [r3, #4]
 800f142:	609a      	str	r2, [r3, #8]
 800f144:	60da      	str	r2, [r3, #12]
 800f146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f148:	f107 0318 	add.w	r3, r7, #24
 800f14c:	228c      	movs	r2, #140	@ 0x8c
 800f14e:	2100      	movs	r1, #0
 800f150:	4618      	mov	r0, r3
 800f152:	f001 f97c 	bl	801044e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f15e:	d163      	bne.n	800f228 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f160:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f164:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f166:	2300      	movs	r3, #0
 800f168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f16c:	f107 0318 	add.w	r3, r7, #24
 800f170:	4618      	mov	r0, r3
 800f172:	f7f7 ff69 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d001      	beq.n	800f180 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f17c:	f7f3 fb50 	bl	8002820 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f180:	4b2b      	ldr	r3, [pc, #172]	@ (800f230 <HAL_PCD_MspInit+0x100>)
 800f182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f184:	4a2a      	ldr	r2, [pc, #168]	@ (800f230 <HAL_PCD_MspInit+0x100>)
 800f186:	f043 0301 	orr.w	r3, r3, #1
 800f18a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f18c:	4b28      	ldr	r3, [pc, #160]	@ (800f230 <HAL_PCD_MspInit+0x100>)
 800f18e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f190:	f003 0301 	and.w	r3, r3, #1
 800f194:	617b      	str	r3, [r7, #20]
 800f196:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f198:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f19c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1a0:	2302      	movs	r3, #2
 800f1a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f1ac:	2303      	movs	r3, #3
 800f1ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f1b2:	230a      	movs	r3, #10
 800f1b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f1b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800f1bc:	4619      	mov	r1, r3
 800f1be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800f1c2:	f7f4 ff11 	bl	8003fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f1c6:	4b1a      	ldr	r3, [pc, #104]	@ (800f230 <HAL_PCD_MspInit+0x100>)
 800f1c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1ca:	4a19      	ldr	r2, [pc, #100]	@ (800f230 <HAL_PCD_MspInit+0x100>)
 800f1cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f1d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f1d2:	4b17      	ldr	r3, [pc, #92]	@ (800f230 <HAL_PCD_MspInit+0x100>)
 800f1d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f1da:	613b      	str	r3, [r7, #16]
 800f1dc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f1de:	4b14      	ldr	r3, [pc, #80]	@ (800f230 <HAL_PCD_MspInit+0x100>)
 800f1e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d114      	bne.n	800f214 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f1ea:	4b11      	ldr	r3, [pc, #68]	@ (800f230 <HAL_PCD_MspInit+0x100>)
 800f1ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1ee:	4a10      	ldr	r2, [pc, #64]	@ (800f230 <HAL_PCD_MspInit+0x100>)
 800f1f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f1f4:	6593      	str	r3, [r2, #88]	@ 0x58
 800f1f6:	4b0e      	ldr	r3, [pc, #56]	@ (800f230 <HAL_PCD_MspInit+0x100>)
 800f1f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f1fe:	60fb      	str	r3, [r7, #12]
 800f200:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800f202:	f7f7 f8b9 	bl	8006378 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f206:	4b0a      	ldr	r3, [pc, #40]	@ (800f230 <HAL_PCD_MspInit+0x100>)
 800f208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f20a:	4a09      	ldr	r2, [pc, #36]	@ (800f230 <HAL_PCD_MspInit+0x100>)
 800f20c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f210:	6593      	str	r3, [r2, #88]	@ 0x58
 800f212:	e001      	b.n	800f218 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800f214:	f7f7 f8b0 	bl	8006378 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f218:	2200      	movs	r2, #0
 800f21a:	2105      	movs	r1, #5
 800f21c:	2043      	movs	r0, #67	@ 0x43
 800f21e:	f7f4 feb9 	bl	8003f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f222:	2043      	movs	r0, #67	@ 0x43
 800f224:	f7f4 fed2 	bl	8003fcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f228:	bf00      	nop
 800f22a:	37b8      	adds	r7, #184	@ 0xb8
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	40021000 	.word	0x40021000

0800f234 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f248:	4619      	mov	r1, r3
 800f24a:	4610      	mov	r0, r2
 800f24c:	f7fb fcd7 	bl	800abfe <USBD_LL_SetupStage>
}
 800f250:	bf00      	nop
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	460b      	mov	r3, r1
 800f262:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f26a:	78fa      	ldrb	r2, [r7, #3]
 800f26c:	6879      	ldr	r1, [r7, #4]
 800f26e:	4613      	mov	r3, r2
 800f270:	00db      	lsls	r3, r3, #3
 800f272:	4413      	add	r3, r2
 800f274:	009b      	lsls	r3, r3, #2
 800f276:	440b      	add	r3, r1
 800f278:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f27c:	681a      	ldr	r2, [r3, #0]
 800f27e:	78fb      	ldrb	r3, [r7, #3]
 800f280:	4619      	mov	r1, r3
 800f282:	f7fb fd11 	bl	800aca8 <USBD_LL_DataOutStage>
}
 800f286:	bf00      	nop
 800f288:	3708      	adds	r7, #8
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}

0800f28e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f28e:	b580      	push	{r7, lr}
 800f290:	b082      	sub	sp, #8
 800f292:	af00      	add	r7, sp, #0
 800f294:	6078      	str	r0, [r7, #4]
 800f296:	460b      	mov	r3, r1
 800f298:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f2a0:	78fa      	ldrb	r2, [r7, #3]
 800f2a2:	6879      	ldr	r1, [r7, #4]
 800f2a4:	4613      	mov	r3, r2
 800f2a6:	00db      	lsls	r3, r3, #3
 800f2a8:	4413      	add	r3, r2
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	440b      	add	r3, r1
 800f2ae:	3320      	adds	r3, #32
 800f2b0:	681a      	ldr	r2, [r3, #0]
 800f2b2:	78fb      	ldrb	r3, [r7, #3]
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	f7fb fdaa 	bl	800ae0e <USBD_LL_DataInStage>
}
 800f2ba:	bf00      	nop
 800f2bc:	3708      	adds	r7, #8
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}

0800f2c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2c2:	b580      	push	{r7, lr}
 800f2c4:	b082      	sub	sp, #8
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7fb fee4 	bl	800b09e <USBD_LL_SOF>
}
 800f2d6:	bf00      	nop
 800f2d8:	3708      	adds	r7, #8
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2de:	b580      	push	{r7, lr}
 800f2e0:	b084      	sub	sp, #16
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	79db      	ldrb	r3, [r3, #7]
 800f2ee:	2b02      	cmp	r3, #2
 800f2f0:	d001      	beq.n	800f2f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f2f2:	f7f3 fa95 	bl	8002820 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2fc:	7bfa      	ldrb	r2, [r7, #15]
 800f2fe:	4611      	mov	r1, r2
 800f300:	4618      	mov	r0, r3
 800f302:	f7fb fe88 	bl	800b016 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7fb fe30 	bl	800af72 <USBD_LL_Reset>
}
 800f312:	bf00      	nop
 800f314:	3710      	adds	r7, #16
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
	...

0800f31c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	6812      	ldr	r2, [r2, #0]
 800f332:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f336:	f043 0301 	orr.w	r3, r3, #1
 800f33a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f342:	4618      	mov	r0, r3
 800f344:	f7fb fe77 	bl	800b036 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	7adb      	ldrb	r3, [r3, #11]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d005      	beq.n	800f35c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f350:	4b04      	ldr	r3, [pc, #16]	@ (800f364 <HAL_PCD_SuspendCallback+0x48>)
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	4a03      	ldr	r2, [pc, #12]	@ (800f364 <HAL_PCD_SuspendCallback+0x48>)
 800f356:	f043 0306 	orr.w	r3, r3, #6
 800f35a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f35c:	bf00      	nop
 800f35e:	3708      	adds	r7, #8
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}
 800f364:	e000ed00 	.word	0xe000ed00

0800f368 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	687a      	ldr	r2, [r7, #4]
 800f37c:	6812      	ldr	r2, [r2, #0]
 800f37e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f382:	f023 0301 	bic.w	r3, r3, #1
 800f386:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	7adb      	ldrb	r3, [r3, #11]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d007      	beq.n	800f3a0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f390:	4b08      	ldr	r3, [pc, #32]	@ (800f3b4 <HAL_PCD_ResumeCallback+0x4c>)
 800f392:	691b      	ldr	r3, [r3, #16]
 800f394:	4a07      	ldr	r2, [pc, #28]	@ (800f3b4 <HAL_PCD_ResumeCallback+0x4c>)
 800f396:	f023 0306 	bic.w	r3, r3, #6
 800f39a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f39c:	f000 faf6 	bl	800f98c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fb fe61 	bl	800b06e <USBD_LL_Resume>
}
 800f3ac:	bf00      	nop
 800f3ae:	3708      	adds	r7, #8
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	e000ed00 	.word	0xe000ed00

0800f3b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b082      	sub	sp, #8
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3ca:	78fa      	ldrb	r2, [r7, #3]
 800f3cc:	4611      	mov	r1, r2
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7fb feb7 	bl	800b142 <USBD_LL_IsoOUTIncomplete>
}
 800f3d4:	bf00      	nop
 800f3d6:	3708      	adds	r7, #8
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	460b      	mov	r3, r1
 800f3e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3ee:	78fa      	ldrb	r2, [r7, #3]
 800f3f0:	4611      	mov	r1, r2
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7fb fe73 	bl	800b0de <USBD_LL_IsoINIncomplete>
}
 800f3f8:	bf00      	nop
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fb fec9 	bl	800b1a6 <USBD_LL_DevConnected>
}
 800f414:	bf00      	nop
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7fb fec6 	bl	800b1bc <USBD_LL_DevDisconnected>
}
 800f430:	bf00      	nop
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d13c      	bne.n	800f4c2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f448:	4a20      	ldr	r2, [pc, #128]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	4a1e      	ldr	r2, [pc, #120]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f454:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f458:	4b1c      	ldr	r3, [pc, #112]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f45a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f45e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f460:	4b1a      	ldr	r3, [pc, #104]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f462:	2206      	movs	r2, #6
 800f464:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f466:	4b19      	ldr	r3, [pc, #100]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f468:	2202      	movs	r2, #2
 800f46a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f46c:	4b17      	ldr	r3, [pc, #92]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f46e:	2202      	movs	r2, #2
 800f470:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f472:	4b16      	ldr	r3, [pc, #88]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f474:	2200      	movs	r2, #0
 800f476:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f478:	4b14      	ldr	r3, [pc, #80]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f47a:	2200      	movs	r2, #0
 800f47c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f47e:	4b13      	ldr	r3, [pc, #76]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f480:	2200      	movs	r2, #0
 800f482:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f484:	4b11      	ldr	r3, [pc, #68]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f486:	2200      	movs	r2, #0
 800f488:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f48a:	4b10      	ldr	r3, [pc, #64]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f48c:	2200      	movs	r2, #0
 800f48e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f490:	4b0e      	ldr	r3, [pc, #56]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f492:	2200      	movs	r2, #0
 800f494:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f496:	480d      	ldr	r0, [pc, #52]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f498:	f7f5 fd73 	bl	8004f82 <HAL_PCD_Init>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d001      	beq.n	800f4a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f4a2:	f7f3 f9bd 	bl	8002820 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f4a6:	2180      	movs	r1, #128	@ 0x80
 800f4a8:	4808      	ldr	r0, [pc, #32]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f4aa:	f7f6 fecc 	bl	8006246 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f4ae:	2240      	movs	r2, #64	@ 0x40
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	4806      	ldr	r0, [pc, #24]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f4b4:	f7f6 fe80 	bl	80061b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f4b8:	2280      	movs	r2, #128	@ 0x80
 800f4ba:	2101      	movs	r1, #1
 800f4bc:	4803      	ldr	r0, [pc, #12]	@ (800f4cc <USBD_LL_Init+0x94>)
 800f4be:	f7f6 fe7b 	bl	80061b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f4c2:	2300      	movs	r3, #0
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	20003f7c 	.word	0x20003f7c

0800f4d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7f5 fe5a 	bl	80051a0 <HAL_PCD_Start>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f4f0:	7bbb      	ldrb	r3, [r7, #14]
 800f4f2:	2b03      	cmp	r3, #3
 800f4f4:	d816      	bhi.n	800f524 <USBD_LL_Start+0x54>
 800f4f6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4fc <USBD_LL_Start+0x2c>)
 800f4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4fc:	0800f50d 	.word	0x0800f50d
 800f500:	0800f513 	.word	0x0800f513
 800f504:	0800f519 	.word	0x0800f519
 800f508:	0800f51f 	.word	0x0800f51f
    case HAL_OK :
      usb_status = USBD_OK;
 800f50c:	2300      	movs	r3, #0
 800f50e:	73fb      	strb	r3, [r7, #15]
    break;
 800f510:	e00b      	b.n	800f52a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f512:	2303      	movs	r3, #3
 800f514:	73fb      	strb	r3, [r7, #15]
    break;
 800f516:	e008      	b.n	800f52a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f518:	2301      	movs	r3, #1
 800f51a:	73fb      	strb	r3, [r7, #15]
    break;
 800f51c:	e005      	b.n	800f52a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f51e:	2303      	movs	r3, #3
 800f520:	73fb      	strb	r3, [r7, #15]
    break;
 800f522:	e002      	b.n	800f52a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f524:	2303      	movs	r3, #3
 800f526:	73fb      	strb	r3, [r7, #15]
    break;
 800f528:	bf00      	nop
  }
  return usb_status;
 800f52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	4608      	mov	r0, r1
 800f53e:	4611      	mov	r1, r2
 800f540:	461a      	mov	r2, r3
 800f542:	4603      	mov	r3, r0
 800f544:	70fb      	strb	r3, [r7, #3]
 800f546:	460b      	mov	r3, r1
 800f548:	70bb      	strb	r3, [r7, #2]
 800f54a:	4613      	mov	r3, r2
 800f54c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f54e:	2300      	movs	r3, #0
 800f550:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f552:	2300      	movs	r3, #0
 800f554:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f55c:	78bb      	ldrb	r3, [r7, #2]
 800f55e:	883a      	ldrh	r2, [r7, #0]
 800f560:	78f9      	ldrb	r1, [r7, #3]
 800f562:	f7f6 fb06 	bl	8005b72 <HAL_PCD_EP_Open>
 800f566:	4603      	mov	r3, r0
 800f568:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f56a:	7bbb      	ldrb	r3, [r7, #14]
 800f56c:	2b03      	cmp	r3, #3
 800f56e:	d817      	bhi.n	800f5a0 <USBD_LL_OpenEP+0x6c>
 800f570:	a201      	add	r2, pc, #4	@ (adr r2, 800f578 <USBD_LL_OpenEP+0x44>)
 800f572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f576:	bf00      	nop
 800f578:	0800f589 	.word	0x0800f589
 800f57c:	0800f58f 	.word	0x0800f58f
 800f580:	0800f595 	.word	0x0800f595
 800f584:	0800f59b 	.word	0x0800f59b
    case HAL_OK :
      usb_status = USBD_OK;
 800f588:	2300      	movs	r3, #0
 800f58a:	73fb      	strb	r3, [r7, #15]
    break;
 800f58c:	e00b      	b.n	800f5a6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f58e:	2303      	movs	r3, #3
 800f590:	73fb      	strb	r3, [r7, #15]
    break;
 800f592:	e008      	b.n	800f5a6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f594:	2301      	movs	r3, #1
 800f596:	73fb      	strb	r3, [r7, #15]
    break;
 800f598:	e005      	b.n	800f5a6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f59a:	2303      	movs	r3, #3
 800f59c:	73fb      	strb	r3, [r7, #15]
    break;
 800f59e:	e002      	b.n	800f5a6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f5a0:	2303      	movs	r3, #3
 800f5a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f5a4:	bf00      	nop
  }
  return usb_status;
 800f5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3710      	adds	r7, #16
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	460b      	mov	r3, r1
 800f5ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f5ca:	78fa      	ldrb	r2, [r7, #3]
 800f5cc:	4611      	mov	r1, r2
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7f6 fb39 	bl	8005c46 <HAL_PCD_EP_Close>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f5d8:	7bbb      	ldrb	r3, [r7, #14]
 800f5da:	2b03      	cmp	r3, #3
 800f5dc:	d816      	bhi.n	800f60c <USBD_LL_CloseEP+0x5c>
 800f5de:	a201      	add	r2, pc, #4	@ (adr r2, 800f5e4 <USBD_LL_CloseEP+0x34>)
 800f5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5e4:	0800f5f5 	.word	0x0800f5f5
 800f5e8:	0800f5fb 	.word	0x0800f5fb
 800f5ec:	0800f601 	.word	0x0800f601
 800f5f0:	0800f607 	.word	0x0800f607
    case HAL_OK :
      usb_status = USBD_OK;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f5f8:	e00b      	b.n	800f612 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f5fa:	2303      	movs	r3, #3
 800f5fc:	73fb      	strb	r3, [r7, #15]
    break;
 800f5fe:	e008      	b.n	800f612 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f600:	2301      	movs	r3, #1
 800f602:	73fb      	strb	r3, [r7, #15]
    break;
 800f604:	e005      	b.n	800f612 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f606:	2303      	movs	r3, #3
 800f608:	73fb      	strb	r3, [r7, #15]
    break;
 800f60a:	e002      	b.n	800f612 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f60c:	2303      	movs	r3, #3
 800f60e:	73fb      	strb	r3, [r7, #15]
    break;
 800f610:	bf00      	nop
  }
  return usb_status;
 800f612:	7bfb      	ldrb	r3, [r7, #15]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3710      	adds	r7, #16
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b084      	sub	sp, #16
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	460b      	mov	r3, r1
 800f626:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f62c:	2300      	movs	r3, #0
 800f62e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f636:	78fa      	ldrb	r2, [r7, #3]
 800f638:	4611      	mov	r1, r2
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7f6 fbc8 	bl	8005dd0 <HAL_PCD_EP_SetStall>
 800f640:	4603      	mov	r3, r0
 800f642:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f644:	7bbb      	ldrb	r3, [r7, #14]
 800f646:	2b03      	cmp	r3, #3
 800f648:	d816      	bhi.n	800f678 <USBD_LL_StallEP+0x5c>
 800f64a:	a201      	add	r2, pc, #4	@ (adr r2, 800f650 <USBD_LL_StallEP+0x34>)
 800f64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f650:	0800f661 	.word	0x0800f661
 800f654:	0800f667 	.word	0x0800f667
 800f658:	0800f66d 	.word	0x0800f66d
 800f65c:	0800f673 	.word	0x0800f673
    case HAL_OK :
      usb_status = USBD_OK;
 800f660:	2300      	movs	r3, #0
 800f662:	73fb      	strb	r3, [r7, #15]
    break;
 800f664:	e00b      	b.n	800f67e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f666:	2303      	movs	r3, #3
 800f668:	73fb      	strb	r3, [r7, #15]
    break;
 800f66a:	e008      	b.n	800f67e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f66c:	2301      	movs	r3, #1
 800f66e:	73fb      	strb	r3, [r7, #15]
    break;
 800f670:	e005      	b.n	800f67e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f672:	2303      	movs	r3, #3
 800f674:	73fb      	strb	r3, [r7, #15]
    break;
 800f676:	e002      	b.n	800f67e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f678:	2303      	movs	r3, #3
 800f67a:	73fb      	strb	r3, [r7, #15]
    break;
 800f67c:	bf00      	nop
  }
  return usb_status;
 800f67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f680:	4618      	mov	r0, r3
 800f682:	3710      	adds	r7, #16
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	460b      	mov	r3, r1
 800f692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f694:	2300      	movs	r3, #0
 800f696:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f698:	2300      	movs	r3, #0
 800f69a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6a2:	78fa      	ldrb	r2, [r7, #3]
 800f6a4:	4611      	mov	r1, r2
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7f6 fbf4 	bl	8005e94 <HAL_PCD_EP_ClrStall>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f6b0:	7bbb      	ldrb	r3, [r7, #14]
 800f6b2:	2b03      	cmp	r3, #3
 800f6b4:	d816      	bhi.n	800f6e4 <USBD_LL_ClearStallEP+0x5c>
 800f6b6:	a201      	add	r2, pc, #4	@ (adr r2, 800f6bc <USBD_LL_ClearStallEP+0x34>)
 800f6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6bc:	0800f6cd 	.word	0x0800f6cd
 800f6c0:	0800f6d3 	.word	0x0800f6d3
 800f6c4:	0800f6d9 	.word	0x0800f6d9
 800f6c8:	0800f6df 	.word	0x0800f6df
    case HAL_OK :
      usb_status = USBD_OK;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f6d0:	e00b      	b.n	800f6ea <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f6d2:	2303      	movs	r3, #3
 800f6d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f6d6:	e008      	b.n	800f6ea <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f6d8:	2301      	movs	r3, #1
 800f6da:	73fb      	strb	r3, [r7, #15]
    break;
 800f6dc:	e005      	b.n	800f6ea <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f6de:	2303      	movs	r3, #3
 800f6e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f6e2:	e002      	b.n	800f6ea <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f6e4:	2303      	movs	r3, #3
 800f6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f6e8:	bf00      	nop
  }
  return usb_status;
 800f6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b085      	sub	sp, #20
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f706:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	da0b      	bge.n	800f728 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f710:	78fb      	ldrb	r3, [r7, #3]
 800f712:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f716:	68f9      	ldr	r1, [r7, #12]
 800f718:	4613      	mov	r3, r2
 800f71a:	00db      	lsls	r3, r3, #3
 800f71c:	4413      	add	r3, r2
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	440b      	add	r3, r1
 800f722:	3316      	adds	r3, #22
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	e00b      	b.n	800f740 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f728:	78fb      	ldrb	r3, [r7, #3]
 800f72a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f72e:	68f9      	ldr	r1, [r7, #12]
 800f730:	4613      	mov	r3, r2
 800f732:	00db      	lsls	r3, r3, #3
 800f734:	4413      	add	r3, r2
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	440b      	add	r3, r1
 800f73a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f73e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f740:	4618      	mov	r0, r3
 800f742:	3714      	adds	r7, #20
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	460b      	mov	r3, r1
 800f756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f758:	2300      	movs	r3, #0
 800f75a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f75c:	2300      	movs	r3, #0
 800f75e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f766:	78fa      	ldrb	r2, [r7, #3]
 800f768:	4611      	mov	r1, r2
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7f6 f9dd 	bl	8005b2a <HAL_PCD_SetAddress>
 800f770:	4603      	mov	r3, r0
 800f772:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f774:	7bbb      	ldrb	r3, [r7, #14]
 800f776:	2b03      	cmp	r3, #3
 800f778:	d816      	bhi.n	800f7a8 <USBD_LL_SetUSBAddress+0x5c>
 800f77a:	a201      	add	r2, pc, #4	@ (adr r2, 800f780 <USBD_LL_SetUSBAddress+0x34>)
 800f77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f780:	0800f791 	.word	0x0800f791
 800f784:	0800f797 	.word	0x0800f797
 800f788:	0800f79d 	.word	0x0800f79d
 800f78c:	0800f7a3 	.word	0x0800f7a3
    case HAL_OK :
      usb_status = USBD_OK;
 800f790:	2300      	movs	r3, #0
 800f792:	73fb      	strb	r3, [r7, #15]
    break;
 800f794:	e00b      	b.n	800f7ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f796:	2303      	movs	r3, #3
 800f798:	73fb      	strb	r3, [r7, #15]
    break;
 800f79a:	e008      	b.n	800f7ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f79c:	2301      	movs	r3, #1
 800f79e:	73fb      	strb	r3, [r7, #15]
    break;
 800f7a0:	e005      	b.n	800f7ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f7a2:	2303      	movs	r3, #3
 800f7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800f7a6:	e002      	b.n	800f7ae <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800f7a8:	2303      	movs	r3, #3
 800f7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800f7ac:	bf00      	nop
  }
  return usb_status;
 800f7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3710      	adds	r7, #16
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b086      	sub	sp, #24
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	607a      	str	r2, [r7, #4]
 800f7c2:	603b      	str	r3, [r7, #0]
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f7d6:	7af9      	ldrb	r1, [r7, #11]
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	f7f6 fac7 	bl	8005d6e <HAL_PCD_EP_Transmit>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f7e4:	7dbb      	ldrb	r3, [r7, #22]
 800f7e6:	2b03      	cmp	r3, #3
 800f7e8:	d816      	bhi.n	800f818 <USBD_LL_Transmit+0x60>
 800f7ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f7f0 <USBD_LL_Transmit+0x38>)
 800f7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f0:	0800f801 	.word	0x0800f801
 800f7f4:	0800f807 	.word	0x0800f807
 800f7f8:	0800f80d 	.word	0x0800f80d
 800f7fc:	0800f813 	.word	0x0800f813
    case HAL_OK :
      usb_status = USBD_OK;
 800f800:	2300      	movs	r3, #0
 800f802:	75fb      	strb	r3, [r7, #23]
    break;
 800f804:	e00b      	b.n	800f81e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f806:	2303      	movs	r3, #3
 800f808:	75fb      	strb	r3, [r7, #23]
    break;
 800f80a:	e008      	b.n	800f81e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f80c:	2301      	movs	r3, #1
 800f80e:	75fb      	strb	r3, [r7, #23]
    break;
 800f810:	e005      	b.n	800f81e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f812:	2303      	movs	r3, #3
 800f814:	75fb      	strb	r3, [r7, #23]
    break;
 800f816:	e002      	b.n	800f81e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800f818:	2303      	movs	r3, #3
 800f81a:	75fb      	strb	r3, [r7, #23]
    break;
 800f81c:	bf00      	nop
  }
  return usb_status;
 800f81e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f820:	4618      	mov	r0, r3
 800f822:	3718      	adds	r7, #24
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b086      	sub	sp, #24
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	607a      	str	r2, [r7, #4]
 800f832:	603b      	str	r3, [r7, #0]
 800f834:	460b      	mov	r3, r1
 800f836:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f838:	2300      	movs	r3, #0
 800f83a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f83c:	2300      	movs	r3, #0
 800f83e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f846:	7af9      	ldrb	r1, [r7, #11]
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	f7f6 fa45 	bl	8005cda <HAL_PCD_EP_Receive>
 800f850:	4603      	mov	r3, r0
 800f852:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f854:	7dbb      	ldrb	r3, [r7, #22]
 800f856:	2b03      	cmp	r3, #3
 800f858:	d816      	bhi.n	800f888 <USBD_LL_PrepareReceive+0x60>
 800f85a:	a201      	add	r2, pc, #4	@ (adr r2, 800f860 <USBD_LL_PrepareReceive+0x38>)
 800f85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f860:	0800f871 	.word	0x0800f871
 800f864:	0800f877 	.word	0x0800f877
 800f868:	0800f87d 	.word	0x0800f87d
 800f86c:	0800f883 	.word	0x0800f883
    case HAL_OK :
      usb_status = USBD_OK;
 800f870:	2300      	movs	r3, #0
 800f872:	75fb      	strb	r3, [r7, #23]
    break;
 800f874:	e00b      	b.n	800f88e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f876:	2303      	movs	r3, #3
 800f878:	75fb      	strb	r3, [r7, #23]
    break;
 800f87a:	e008      	b.n	800f88e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f87c:	2301      	movs	r3, #1
 800f87e:	75fb      	strb	r3, [r7, #23]
    break;
 800f880:	e005      	b.n	800f88e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f882:	2303      	movs	r3, #3
 800f884:	75fb      	strb	r3, [r7, #23]
    break;
 800f886:	e002      	b.n	800f88e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800f888:	2303      	movs	r3, #3
 800f88a:	75fb      	strb	r3, [r7, #23]
    break;
 800f88c:	bf00      	nop
  }
  return usb_status;
 800f88e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f890:	4618      	mov	r0, r3
 800f892:	3718      	adds	r7, #24
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f8aa:	78fa      	ldrb	r2, [r7, #3]
 800f8ac:	4611      	mov	r1, r2
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7f6 fa45 	bl	8005d3e <HAL_PCD_EP_GetRxCount>
 800f8b4:	4603      	mov	r3, r0
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
	...

0800f8c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f8cc:	78fb      	ldrb	r3, [r7, #3]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d002      	beq.n	800f8d8 <HAL_PCDEx_LPM_Callback+0x18>
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	d01f      	beq.n	800f916 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f8d6:	e03b      	b.n	800f950 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	7adb      	ldrb	r3, [r3, #11]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d007      	beq.n	800f8f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f8e0:	f000 f854 	bl	800f98c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f8e4:	4b1c      	ldr	r3, [pc, #112]	@ (800f958 <HAL_PCDEx_LPM_Callback+0x98>)
 800f8e6:	691b      	ldr	r3, [r3, #16]
 800f8e8:	4a1b      	ldr	r2, [pc, #108]	@ (800f958 <HAL_PCDEx_LPM_Callback+0x98>)
 800f8ea:	f023 0306 	bic.w	r3, r3, #6
 800f8ee:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	6812      	ldr	r2, [r2, #0]
 800f8fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f902:	f023 0301 	bic.w	r3, r3, #1
 800f906:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fb fbad 	bl	800b06e <USBD_LL_Resume>
    break;
 800f914:	e01c      	b.n	800f950 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	6812      	ldr	r2, [r2, #0]
 800f924:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f928:	f043 0301 	orr.w	r3, r3, #1
 800f92c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f934:	4618      	mov	r0, r3
 800f936:	f7fb fb7e 	bl	800b036 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	7adb      	ldrb	r3, [r3, #11]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d005      	beq.n	800f94e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f942:	4b05      	ldr	r3, [pc, #20]	@ (800f958 <HAL_PCDEx_LPM_Callback+0x98>)
 800f944:	691b      	ldr	r3, [r3, #16]
 800f946:	4a04      	ldr	r2, [pc, #16]	@ (800f958 <HAL_PCDEx_LPM_Callback+0x98>)
 800f948:	f043 0306 	orr.w	r3, r3, #6
 800f94c:	6113      	str	r3, [r2, #16]
    break;
 800f94e:	bf00      	nop
}
 800f950:	bf00      	nop
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	e000ed00 	.word	0xe000ed00

0800f95c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f964:	4b03      	ldr	r3, [pc, #12]	@ (800f974 <USBD_static_malloc+0x18>)
}
 800f966:	4618      	mov	r0, r3
 800f968:	370c      	adds	r7, #12
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr
 800f972:	bf00      	nop
 800f974:	20004460 	.word	0x20004460

0800f978 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]

}
 800f980:	bf00      	nop
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr

0800f98c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f98c:	b480      	push	{r7}
 800f98e:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 800f990:	bf00      	nop
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr

0800f99a <__cvt>:
 800f99a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f99e:	ec57 6b10 	vmov	r6, r7, d0
 800f9a2:	2f00      	cmp	r7, #0
 800f9a4:	460c      	mov	r4, r1
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	463b      	mov	r3, r7
 800f9aa:	bfbb      	ittet	lt
 800f9ac:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f9b0:	461f      	movlt	r7, r3
 800f9b2:	2300      	movge	r3, #0
 800f9b4:	232d      	movlt	r3, #45	@ 0x2d
 800f9b6:	700b      	strb	r3, [r1, #0]
 800f9b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f9ba:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f9be:	4691      	mov	r9, r2
 800f9c0:	f023 0820 	bic.w	r8, r3, #32
 800f9c4:	bfbc      	itt	lt
 800f9c6:	4632      	movlt	r2, r6
 800f9c8:	4616      	movlt	r6, r2
 800f9ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f9ce:	d005      	beq.n	800f9dc <__cvt+0x42>
 800f9d0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f9d4:	d100      	bne.n	800f9d8 <__cvt+0x3e>
 800f9d6:	3401      	adds	r4, #1
 800f9d8:	2102      	movs	r1, #2
 800f9da:	e000      	b.n	800f9de <__cvt+0x44>
 800f9dc:	2103      	movs	r1, #3
 800f9de:	ab03      	add	r3, sp, #12
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	ab02      	add	r3, sp, #8
 800f9e4:	9300      	str	r3, [sp, #0]
 800f9e6:	ec47 6b10 	vmov	d0, r6, r7
 800f9ea:	4653      	mov	r3, sl
 800f9ec:	4622      	mov	r2, r4
 800f9ee:	f000 fea3 	bl	8010738 <_dtoa_r>
 800f9f2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	d119      	bne.n	800fa2e <__cvt+0x94>
 800f9fa:	f019 0f01 	tst.w	r9, #1
 800f9fe:	d00e      	beq.n	800fa1e <__cvt+0x84>
 800fa00:	eb00 0904 	add.w	r9, r0, r4
 800fa04:	2200      	movs	r2, #0
 800fa06:	2300      	movs	r3, #0
 800fa08:	4630      	mov	r0, r6
 800fa0a:	4639      	mov	r1, r7
 800fa0c:	f7f1 f86c 	bl	8000ae8 <__aeabi_dcmpeq>
 800fa10:	b108      	cbz	r0, 800fa16 <__cvt+0x7c>
 800fa12:	f8cd 900c 	str.w	r9, [sp, #12]
 800fa16:	2230      	movs	r2, #48	@ 0x30
 800fa18:	9b03      	ldr	r3, [sp, #12]
 800fa1a:	454b      	cmp	r3, r9
 800fa1c:	d31e      	bcc.n	800fa5c <__cvt+0xc2>
 800fa1e:	9b03      	ldr	r3, [sp, #12]
 800fa20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa22:	1b5b      	subs	r3, r3, r5
 800fa24:	4628      	mov	r0, r5
 800fa26:	6013      	str	r3, [r2, #0]
 800fa28:	b004      	add	sp, #16
 800fa2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa2e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fa32:	eb00 0904 	add.w	r9, r0, r4
 800fa36:	d1e5      	bne.n	800fa04 <__cvt+0x6a>
 800fa38:	7803      	ldrb	r3, [r0, #0]
 800fa3a:	2b30      	cmp	r3, #48	@ 0x30
 800fa3c:	d10a      	bne.n	800fa54 <__cvt+0xba>
 800fa3e:	2200      	movs	r2, #0
 800fa40:	2300      	movs	r3, #0
 800fa42:	4630      	mov	r0, r6
 800fa44:	4639      	mov	r1, r7
 800fa46:	f7f1 f84f 	bl	8000ae8 <__aeabi_dcmpeq>
 800fa4a:	b918      	cbnz	r0, 800fa54 <__cvt+0xba>
 800fa4c:	f1c4 0401 	rsb	r4, r4, #1
 800fa50:	f8ca 4000 	str.w	r4, [sl]
 800fa54:	f8da 3000 	ldr.w	r3, [sl]
 800fa58:	4499      	add	r9, r3
 800fa5a:	e7d3      	b.n	800fa04 <__cvt+0x6a>
 800fa5c:	1c59      	adds	r1, r3, #1
 800fa5e:	9103      	str	r1, [sp, #12]
 800fa60:	701a      	strb	r2, [r3, #0]
 800fa62:	e7d9      	b.n	800fa18 <__cvt+0x7e>

0800fa64 <__exponent>:
 800fa64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa66:	2900      	cmp	r1, #0
 800fa68:	bfba      	itte	lt
 800fa6a:	4249      	neglt	r1, r1
 800fa6c:	232d      	movlt	r3, #45	@ 0x2d
 800fa6e:	232b      	movge	r3, #43	@ 0x2b
 800fa70:	2909      	cmp	r1, #9
 800fa72:	7002      	strb	r2, [r0, #0]
 800fa74:	7043      	strb	r3, [r0, #1]
 800fa76:	dd29      	ble.n	800facc <__exponent+0x68>
 800fa78:	f10d 0307 	add.w	r3, sp, #7
 800fa7c:	461d      	mov	r5, r3
 800fa7e:	270a      	movs	r7, #10
 800fa80:	461a      	mov	r2, r3
 800fa82:	fbb1 f6f7 	udiv	r6, r1, r7
 800fa86:	fb07 1416 	mls	r4, r7, r6, r1
 800fa8a:	3430      	adds	r4, #48	@ 0x30
 800fa8c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fa90:	460c      	mov	r4, r1
 800fa92:	2c63      	cmp	r4, #99	@ 0x63
 800fa94:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800fa98:	4631      	mov	r1, r6
 800fa9a:	dcf1      	bgt.n	800fa80 <__exponent+0x1c>
 800fa9c:	3130      	adds	r1, #48	@ 0x30
 800fa9e:	1e94      	subs	r4, r2, #2
 800faa0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800faa4:	1c41      	adds	r1, r0, #1
 800faa6:	4623      	mov	r3, r4
 800faa8:	42ab      	cmp	r3, r5
 800faaa:	d30a      	bcc.n	800fac2 <__exponent+0x5e>
 800faac:	f10d 0309 	add.w	r3, sp, #9
 800fab0:	1a9b      	subs	r3, r3, r2
 800fab2:	42ac      	cmp	r4, r5
 800fab4:	bf88      	it	hi
 800fab6:	2300      	movhi	r3, #0
 800fab8:	3302      	adds	r3, #2
 800faba:	4403      	add	r3, r0
 800fabc:	1a18      	subs	r0, r3, r0
 800fabe:	b003      	add	sp, #12
 800fac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fac2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fac6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800faca:	e7ed      	b.n	800faa8 <__exponent+0x44>
 800facc:	2330      	movs	r3, #48	@ 0x30
 800face:	3130      	adds	r1, #48	@ 0x30
 800fad0:	7083      	strb	r3, [r0, #2]
 800fad2:	70c1      	strb	r1, [r0, #3]
 800fad4:	1d03      	adds	r3, r0, #4
 800fad6:	e7f1      	b.n	800fabc <__exponent+0x58>

0800fad8 <_printf_float>:
 800fad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fadc:	b08d      	sub	sp, #52	@ 0x34
 800fade:	460c      	mov	r4, r1
 800fae0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fae4:	4616      	mov	r6, r2
 800fae6:	461f      	mov	r7, r3
 800fae8:	4605      	mov	r5, r0
 800faea:	f000 fcb9 	bl	8010460 <_localeconv_r>
 800faee:	6803      	ldr	r3, [r0, #0]
 800faf0:	9304      	str	r3, [sp, #16]
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7f0 fbcc 	bl	8000290 <strlen>
 800faf8:	2300      	movs	r3, #0
 800fafa:	930a      	str	r3, [sp, #40]	@ 0x28
 800fafc:	f8d8 3000 	ldr.w	r3, [r8]
 800fb00:	9005      	str	r0, [sp, #20]
 800fb02:	3307      	adds	r3, #7
 800fb04:	f023 0307 	bic.w	r3, r3, #7
 800fb08:	f103 0208 	add.w	r2, r3, #8
 800fb0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fb10:	f8d4 b000 	ldr.w	fp, [r4]
 800fb14:	f8c8 2000 	str.w	r2, [r8]
 800fb18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fb20:	9307      	str	r3, [sp, #28]
 800fb22:	f8cd 8018 	str.w	r8, [sp, #24]
 800fb26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fb2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb2e:	4b9c      	ldr	r3, [pc, #624]	@ (800fda0 <_printf_float+0x2c8>)
 800fb30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fb34:	f7f1 f80a 	bl	8000b4c <__aeabi_dcmpun>
 800fb38:	bb70      	cbnz	r0, 800fb98 <_printf_float+0xc0>
 800fb3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb3e:	4b98      	ldr	r3, [pc, #608]	@ (800fda0 <_printf_float+0x2c8>)
 800fb40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fb44:	f7f0 ffe4 	bl	8000b10 <__aeabi_dcmple>
 800fb48:	bb30      	cbnz	r0, 800fb98 <_printf_float+0xc0>
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	4640      	mov	r0, r8
 800fb50:	4649      	mov	r1, r9
 800fb52:	f7f0 ffd3 	bl	8000afc <__aeabi_dcmplt>
 800fb56:	b110      	cbz	r0, 800fb5e <_printf_float+0x86>
 800fb58:	232d      	movs	r3, #45	@ 0x2d
 800fb5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb5e:	4a91      	ldr	r2, [pc, #580]	@ (800fda4 <_printf_float+0x2cc>)
 800fb60:	4b91      	ldr	r3, [pc, #580]	@ (800fda8 <_printf_float+0x2d0>)
 800fb62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fb66:	bf8c      	ite	hi
 800fb68:	4690      	movhi	r8, r2
 800fb6a:	4698      	movls	r8, r3
 800fb6c:	2303      	movs	r3, #3
 800fb6e:	6123      	str	r3, [r4, #16]
 800fb70:	f02b 0304 	bic.w	r3, fp, #4
 800fb74:	6023      	str	r3, [r4, #0]
 800fb76:	f04f 0900 	mov.w	r9, #0
 800fb7a:	9700      	str	r7, [sp, #0]
 800fb7c:	4633      	mov	r3, r6
 800fb7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fb80:	4621      	mov	r1, r4
 800fb82:	4628      	mov	r0, r5
 800fb84:	f000 f9d2 	bl	800ff2c <_printf_common>
 800fb88:	3001      	adds	r0, #1
 800fb8a:	f040 808d 	bne.w	800fca8 <_printf_float+0x1d0>
 800fb8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fb92:	b00d      	add	sp, #52	@ 0x34
 800fb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb98:	4642      	mov	r2, r8
 800fb9a:	464b      	mov	r3, r9
 800fb9c:	4640      	mov	r0, r8
 800fb9e:	4649      	mov	r1, r9
 800fba0:	f7f0 ffd4 	bl	8000b4c <__aeabi_dcmpun>
 800fba4:	b140      	cbz	r0, 800fbb8 <_printf_float+0xe0>
 800fba6:	464b      	mov	r3, r9
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	bfbc      	itt	lt
 800fbac:	232d      	movlt	r3, #45	@ 0x2d
 800fbae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fbb2:	4a7e      	ldr	r2, [pc, #504]	@ (800fdac <_printf_float+0x2d4>)
 800fbb4:	4b7e      	ldr	r3, [pc, #504]	@ (800fdb0 <_printf_float+0x2d8>)
 800fbb6:	e7d4      	b.n	800fb62 <_printf_float+0x8a>
 800fbb8:	6863      	ldr	r3, [r4, #4]
 800fbba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fbbe:	9206      	str	r2, [sp, #24]
 800fbc0:	1c5a      	adds	r2, r3, #1
 800fbc2:	d13b      	bne.n	800fc3c <_printf_float+0x164>
 800fbc4:	2306      	movs	r3, #6
 800fbc6:	6063      	str	r3, [r4, #4]
 800fbc8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fbcc:	2300      	movs	r3, #0
 800fbce:	6022      	str	r2, [r4, #0]
 800fbd0:	9303      	str	r3, [sp, #12]
 800fbd2:	ab0a      	add	r3, sp, #40	@ 0x28
 800fbd4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fbd8:	ab09      	add	r3, sp, #36	@ 0x24
 800fbda:	9300      	str	r3, [sp, #0]
 800fbdc:	6861      	ldr	r1, [r4, #4]
 800fbde:	ec49 8b10 	vmov	d0, r8, r9
 800fbe2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	f7ff fed7 	bl	800f99a <__cvt>
 800fbec:	9b06      	ldr	r3, [sp, #24]
 800fbee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fbf0:	2b47      	cmp	r3, #71	@ 0x47
 800fbf2:	4680      	mov	r8, r0
 800fbf4:	d129      	bne.n	800fc4a <_printf_float+0x172>
 800fbf6:	1cc8      	adds	r0, r1, #3
 800fbf8:	db02      	blt.n	800fc00 <_printf_float+0x128>
 800fbfa:	6863      	ldr	r3, [r4, #4]
 800fbfc:	4299      	cmp	r1, r3
 800fbfe:	dd41      	ble.n	800fc84 <_printf_float+0x1ac>
 800fc00:	f1aa 0a02 	sub.w	sl, sl, #2
 800fc04:	fa5f fa8a 	uxtb.w	sl, sl
 800fc08:	3901      	subs	r1, #1
 800fc0a:	4652      	mov	r2, sl
 800fc0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fc10:	9109      	str	r1, [sp, #36]	@ 0x24
 800fc12:	f7ff ff27 	bl	800fa64 <__exponent>
 800fc16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc18:	1813      	adds	r3, r2, r0
 800fc1a:	2a01      	cmp	r2, #1
 800fc1c:	4681      	mov	r9, r0
 800fc1e:	6123      	str	r3, [r4, #16]
 800fc20:	dc02      	bgt.n	800fc28 <_printf_float+0x150>
 800fc22:	6822      	ldr	r2, [r4, #0]
 800fc24:	07d2      	lsls	r2, r2, #31
 800fc26:	d501      	bpl.n	800fc2c <_printf_float+0x154>
 800fc28:	3301      	adds	r3, #1
 800fc2a:	6123      	str	r3, [r4, #16]
 800fc2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d0a2      	beq.n	800fb7a <_printf_float+0xa2>
 800fc34:	232d      	movs	r3, #45	@ 0x2d
 800fc36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc3a:	e79e      	b.n	800fb7a <_printf_float+0xa2>
 800fc3c:	9a06      	ldr	r2, [sp, #24]
 800fc3e:	2a47      	cmp	r2, #71	@ 0x47
 800fc40:	d1c2      	bne.n	800fbc8 <_printf_float+0xf0>
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d1c0      	bne.n	800fbc8 <_printf_float+0xf0>
 800fc46:	2301      	movs	r3, #1
 800fc48:	e7bd      	b.n	800fbc6 <_printf_float+0xee>
 800fc4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fc4e:	d9db      	bls.n	800fc08 <_printf_float+0x130>
 800fc50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fc54:	d118      	bne.n	800fc88 <_printf_float+0x1b0>
 800fc56:	2900      	cmp	r1, #0
 800fc58:	6863      	ldr	r3, [r4, #4]
 800fc5a:	dd0b      	ble.n	800fc74 <_printf_float+0x19c>
 800fc5c:	6121      	str	r1, [r4, #16]
 800fc5e:	b913      	cbnz	r3, 800fc66 <_printf_float+0x18e>
 800fc60:	6822      	ldr	r2, [r4, #0]
 800fc62:	07d0      	lsls	r0, r2, #31
 800fc64:	d502      	bpl.n	800fc6c <_printf_float+0x194>
 800fc66:	3301      	adds	r3, #1
 800fc68:	440b      	add	r3, r1
 800fc6a:	6123      	str	r3, [r4, #16]
 800fc6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fc6e:	f04f 0900 	mov.w	r9, #0
 800fc72:	e7db      	b.n	800fc2c <_printf_float+0x154>
 800fc74:	b913      	cbnz	r3, 800fc7c <_printf_float+0x1a4>
 800fc76:	6822      	ldr	r2, [r4, #0]
 800fc78:	07d2      	lsls	r2, r2, #31
 800fc7a:	d501      	bpl.n	800fc80 <_printf_float+0x1a8>
 800fc7c:	3302      	adds	r3, #2
 800fc7e:	e7f4      	b.n	800fc6a <_printf_float+0x192>
 800fc80:	2301      	movs	r3, #1
 800fc82:	e7f2      	b.n	800fc6a <_printf_float+0x192>
 800fc84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fc88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc8a:	4299      	cmp	r1, r3
 800fc8c:	db05      	blt.n	800fc9a <_printf_float+0x1c2>
 800fc8e:	6823      	ldr	r3, [r4, #0]
 800fc90:	6121      	str	r1, [r4, #16]
 800fc92:	07d8      	lsls	r0, r3, #31
 800fc94:	d5ea      	bpl.n	800fc6c <_printf_float+0x194>
 800fc96:	1c4b      	adds	r3, r1, #1
 800fc98:	e7e7      	b.n	800fc6a <_printf_float+0x192>
 800fc9a:	2900      	cmp	r1, #0
 800fc9c:	bfd4      	ite	le
 800fc9e:	f1c1 0202 	rsble	r2, r1, #2
 800fca2:	2201      	movgt	r2, #1
 800fca4:	4413      	add	r3, r2
 800fca6:	e7e0      	b.n	800fc6a <_printf_float+0x192>
 800fca8:	6823      	ldr	r3, [r4, #0]
 800fcaa:	055a      	lsls	r2, r3, #21
 800fcac:	d407      	bmi.n	800fcbe <_printf_float+0x1e6>
 800fcae:	6923      	ldr	r3, [r4, #16]
 800fcb0:	4642      	mov	r2, r8
 800fcb2:	4631      	mov	r1, r6
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	47b8      	blx	r7
 800fcb8:	3001      	adds	r0, #1
 800fcba:	d12b      	bne.n	800fd14 <_printf_float+0x23c>
 800fcbc:	e767      	b.n	800fb8e <_printf_float+0xb6>
 800fcbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fcc2:	f240 80dd 	bls.w	800fe80 <_printf_float+0x3a8>
 800fcc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fcca:	2200      	movs	r2, #0
 800fccc:	2300      	movs	r3, #0
 800fcce:	f7f0 ff0b 	bl	8000ae8 <__aeabi_dcmpeq>
 800fcd2:	2800      	cmp	r0, #0
 800fcd4:	d033      	beq.n	800fd3e <_printf_float+0x266>
 800fcd6:	4a37      	ldr	r2, [pc, #220]	@ (800fdb4 <_printf_float+0x2dc>)
 800fcd8:	2301      	movs	r3, #1
 800fcda:	4631      	mov	r1, r6
 800fcdc:	4628      	mov	r0, r5
 800fcde:	47b8      	blx	r7
 800fce0:	3001      	adds	r0, #1
 800fce2:	f43f af54 	beq.w	800fb8e <_printf_float+0xb6>
 800fce6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fcea:	4543      	cmp	r3, r8
 800fcec:	db02      	blt.n	800fcf4 <_printf_float+0x21c>
 800fcee:	6823      	ldr	r3, [r4, #0]
 800fcf0:	07d8      	lsls	r0, r3, #31
 800fcf2:	d50f      	bpl.n	800fd14 <_printf_float+0x23c>
 800fcf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcf8:	4631      	mov	r1, r6
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	47b8      	blx	r7
 800fcfe:	3001      	adds	r0, #1
 800fd00:	f43f af45 	beq.w	800fb8e <_printf_float+0xb6>
 800fd04:	f04f 0900 	mov.w	r9, #0
 800fd08:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800fd0c:	f104 0a1a 	add.w	sl, r4, #26
 800fd10:	45c8      	cmp	r8, r9
 800fd12:	dc09      	bgt.n	800fd28 <_printf_float+0x250>
 800fd14:	6823      	ldr	r3, [r4, #0]
 800fd16:	079b      	lsls	r3, r3, #30
 800fd18:	f100 8103 	bmi.w	800ff22 <_printf_float+0x44a>
 800fd1c:	68e0      	ldr	r0, [r4, #12]
 800fd1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd20:	4298      	cmp	r0, r3
 800fd22:	bfb8      	it	lt
 800fd24:	4618      	movlt	r0, r3
 800fd26:	e734      	b.n	800fb92 <_printf_float+0xba>
 800fd28:	2301      	movs	r3, #1
 800fd2a:	4652      	mov	r2, sl
 800fd2c:	4631      	mov	r1, r6
 800fd2e:	4628      	mov	r0, r5
 800fd30:	47b8      	blx	r7
 800fd32:	3001      	adds	r0, #1
 800fd34:	f43f af2b 	beq.w	800fb8e <_printf_float+0xb6>
 800fd38:	f109 0901 	add.w	r9, r9, #1
 800fd3c:	e7e8      	b.n	800fd10 <_printf_float+0x238>
 800fd3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	dc39      	bgt.n	800fdb8 <_printf_float+0x2e0>
 800fd44:	4a1b      	ldr	r2, [pc, #108]	@ (800fdb4 <_printf_float+0x2dc>)
 800fd46:	2301      	movs	r3, #1
 800fd48:	4631      	mov	r1, r6
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	47b8      	blx	r7
 800fd4e:	3001      	adds	r0, #1
 800fd50:	f43f af1d 	beq.w	800fb8e <_printf_float+0xb6>
 800fd54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fd58:	ea59 0303 	orrs.w	r3, r9, r3
 800fd5c:	d102      	bne.n	800fd64 <_printf_float+0x28c>
 800fd5e:	6823      	ldr	r3, [r4, #0]
 800fd60:	07d9      	lsls	r1, r3, #31
 800fd62:	d5d7      	bpl.n	800fd14 <_printf_float+0x23c>
 800fd64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd68:	4631      	mov	r1, r6
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	47b8      	blx	r7
 800fd6e:	3001      	adds	r0, #1
 800fd70:	f43f af0d 	beq.w	800fb8e <_printf_float+0xb6>
 800fd74:	f04f 0a00 	mov.w	sl, #0
 800fd78:	f104 0b1a 	add.w	fp, r4, #26
 800fd7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd7e:	425b      	negs	r3, r3
 800fd80:	4553      	cmp	r3, sl
 800fd82:	dc01      	bgt.n	800fd88 <_printf_float+0x2b0>
 800fd84:	464b      	mov	r3, r9
 800fd86:	e793      	b.n	800fcb0 <_printf_float+0x1d8>
 800fd88:	2301      	movs	r3, #1
 800fd8a:	465a      	mov	r2, fp
 800fd8c:	4631      	mov	r1, r6
 800fd8e:	4628      	mov	r0, r5
 800fd90:	47b8      	blx	r7
 800fd92:	3001      	adds	r0, #1
 800fd94:	f43f aefb 	beq.w	800fb8e <_printf_float+0xb6>
 800fd98:	f10a 0a01 	add.w	sl, sl, #1
 800fd9c:	e7ee      	b.n	800fd7c <_printf_float+0x2a4>
 800fd9e:	bf00      	nop
 800fda0:	7fefffff 	.word	0x7fefffff
 800fda4:	08012550 	.word	0x08012550
 800fda8:	0801254c 	.word	0x0801254c
 800fdac:	08012558 	.word	0x08012558
 800fdb0:	08012554 	.word	0x08012554
 800fdb4:	0801255c 	.word	0x0801255c
 800fdb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fdba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fdbe:	4553      	cmp	r3, sl
 800fdc0:	bfa8      	it	ge
 800fdc2:	4653      	movge	r3, sl
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	4699      	mov	r9, r3
 800fdc8:	dc36      	bgt.n	800fe38 <_printf_float+0x360>
 800fdca:	f04f 0b00 	mov.w	fp, #0
 800fdce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fdd2:	f104 021a 	add.w	r2, r4, #26
 800fdd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fdd8:	9306      	str	r3, [sp, #24]
 800fdda:	eba3 0309 	sub.w	r3, r3, r9
 800fdde:	455b      	cmp	r3, fp
 800fde0:	dc31      	bgt.n	800fe46 <_printf_float+0x36e>
 800fde2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fde4:	459a      	cmp	sl, r3
 800fde6:	dc3a      	bgt.n	800fe5e <_printf_float+0x386>
 800fde8:	6823      	ldr	r3, [r4, #0]
 800fdea:	07da      	lsls	r2, r3, #31
 800fdec:	d437      	bmi.n	800fe5e <_printf_float+0x386>
 800fdee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdf0:	ebaa 0903 	sub.w	r9, sl, r3
 800fdf4:	9b06      	ldr	r3, [sp, #24]
 800fdf6:	ebaa 0303 	sub.w	r3, sl, r3
 800fdfa:	4599      	cmp	r9, r3
 800fdfc:	bfa8      	it	ge
 800fdfe:	4699      	movge	r9, r3
 800fe00:	f1b9 0f00 	cmp.w	r9, #0
 800fe04:	dc33      	bgt.n	800fe6e <_printf_float+0x396>
 800fe06:	f04f 0800 	mov.w	r8, #0
 800fe0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fe0e:	f104 0b1a 	add.w	fp, r4, #26
 800fe12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe14:	ebaa 0303 	sub.w	r3, sl, r3
 800fe18:	eba3 0309 	sub.w	r3, r3, r9
 800fe1c:	4543      	cmp	r3, r8
 800fe1e:	f77f af79 	ble.w	800fd14 <_printf_float+0x23c>
 800fe22:	2301      	movs	r3, #1
 800fe24:	465a      	mov	r2, fp
 800fe26:	4631      	mov	r1, r6
 800fe28:	4628      	mov	r0, r5
 800fe2a:	47b8      	blx	r7
 800fe2c:	3001      	adds	r0, #1
 800fe2e:	f43f aeae 	beq.w	800fb8e <_printf_float+0xb6>
 800fe32:	f108 0801 	add.w	r8, r8, #1
 800fe36:	e7ec      	b.n	800fe12 <_printf_float+0x33a>
 800fe38:	4642      	mov	r2, r8
 800fe3a:	4631      	mov	r1, r6
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	47b8      	blx	r7
 800fe40:	3001      	adds	r0, #1
 800fe42:	d1c2      	bne.n	800fdca <_printf_float+0x2f2>
 800fe44:	e6a3      	b.n	800fb8e <_printf_float+0xb6>
 800fe46:	2301      	movs	r3, #1
 800fe48:	4631      	mov	r1, r6
 800fe4a:	4628      	mov	r0, r5
 800fe4c:	9206      	str	r2, [sp, #24]
 800fe4e:	47b8      	blx	r7
 800fe50:	3001      	adds	r0, #1
 800fe52:	f43f ae9c 	beq.w	800fb8e <_printf_float+0xb6>
 800fe56:	9a06      	ldr	r2, [sp, #24]
 800fe58:	f10b 0b01 	add.w	fp, fp, #1
 800fe5c:	e7bb      	b.n	800fdd6 <_printf_float+0x2fe>
 800fe5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe62:	4631      	mov	r1, r6
 800fe64:	4628      	mov	r0, r5
 800fe66:	47b8      	blx	r7
 800fe68:	3001      	adds	r0, #1
 800fe6a:	d1c0      	bne.n	800fdee <_printf_float+0x316>
 800fe6c:	e68f      	b.n	800fb8e <_printf_float+0xb6>
 800fe6e:	9a06      	ldr	r2, [sp, #24]
 800fe70:	464b      	mov	r3, r9
 800fe72:	4442      	add	r2, r8
 800fe74:	4631      	mov	r1, r6
 800fe76:	4628      	mov	r0, r5
 800fe78:	47b8      	blx	r7
 800fe7a:	3001      	adds	r0, #1
 800fe7c:	d1c3      	bne.n	800fe06 <_printf_float+0x32e>
 800fe7e:	e686      	b.n	800fb8e <_printf_float+0xb6>
 800fe80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fe84:	f1ba 0f01 	cmp.w	sl, #1
 800fe88:	dc01      	bgt.n	800fe8e <_printf_float+0x3b6>
 800fe8a:	07db      	lsls	r3, r3, #31
 800fe8c:	d536      	bpl.n	800fefc <_printf_float+0x424>
 800fe8e:	2301      	movs	r3, #1
 800fe90:	4642      	mov	r2, r8
 800fe92:	4631      	mov	r1, r6
 800fe94:	4628      	mov	r0, r5
 800fe96:	47b8      	blx	r7
 800fe98:	3001      	adds	r0, #1
 800fe9a:	f43f ae78 	beq.w	800fb8e <_printf_float+0xb6>
 800fe9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fea2:	4631      	mov	r1, r6
 800fea4:	4628      	mov	r0, r5
 800fea6:	47b8      	blx	r7
 800fea8:	3001      	adds	r0, #1
 800feaa:	f43f ae70 	beq.w	800fb8e <_printf_float+0xb6>
 800feae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800feb2:	2200      	movs	r2, #0
 800feb4:	2300      	movs	r3, #0
 800feb6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800feba:	f7f0 fe15 	bl	8000ae8 <__aeabi_dcmpeq>
 800febe:	b9c0      	cbnz	r0, 800fef2 <_printf_float+0x41a>
 800fec0:	4653      	mov	r3, sl
 800fec2:	f108 0201 	add.w	r2, r8, #1
 800fec6:	4631      	mov	r1, r6
 800fec8:	4628      	mov	r0, r5
 800feca:	47b8      	blx	r7
 800fecc:	3001      	adds	r0, #1
 800fece:	d10c      	bne.n	800feea <_printf_float+0x412>
 800fed0:	e65d      	b.n	800fb8e <_printf_float+0xb6>
 800fed2:	2301      	movs	r3, #1
 800fed4:	465a      	mov	r2, fp
 800fed6:	4631      	mov	r1, r6
 800fed8:	4628      	mov	r0, r5
 800feda:	47b8      	blx	r7
 800fedc:	3001      	adds	r0, #1
 800fede:	f43f ae56 	beq.w	800fb8e <_printf_float+0xb6>
 800fee2:	f108 0801 	add.w	r8, r8, #1
 800fee6:	45d0      	cmp	r8, sl
 800fee8:	dbf3      	blt.n	800fed2 <_printf_float+0x3fa>
 800feea:	464b      	mov	r3, r9
 800feec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fef0:	e6df      	b.n	800fcb2 <_printf_float+0x1da>
 800fef2:	f04f 0800 	mov.w	r8, #0
 800fef6:	f104 0b1a 	add.w	fp, r4, #26
 800fefa:	e7f4      	b.n	800fee6 <_printf_float+0x40e>
 800fefc:	2301      	movs	r3, #1
 800fefe:	4642      	mov	r2, r8
 800ff00:	e7e1      	b.n	800fec6 <_printf_float+0x3ee>
 800ff02:	2301      	movs	r3, #1
 800ff04:	464a      	mov	r2, r9
 800ff06:	4631      	mov	r1, r6
 800ff08:	4628      	mov	r0, r5
 800ff0a:	47b8      	blx	r7
 800ff0c:	3001      	adds	r0, #1
 800ff0e:	f43f ae3e 	beq.w	800fb8e <_printf_float+0xb6>
 800ff12:	f108 0801 	add.w	r8, r8, #1
 800ff16:	68e3      	ldr	r3, [r4, #12]
 800ff18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ff1a:	1a5b      	subs	r3, r3, r1
 800ff1c:	4543      	cmp	r3, r8
 800ff1e:	dcf0      	bgt.n	800ff02 <_printf_float+0x42a>
 800ff20:	e6fc      	b.n	800fd1c <_printf_float+0x244>
 800ff22:	f04f 0800 	mov.w	r8, #0
 800ff26:	f104 0919 	add.w	r9, r4, #25
 800ff2a:	e7f4      	b.n	800ff16 <_printf_float+0x43e>

0800ff2c <_printf_common>:
 800ff2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff30:	4616      	mov	r6, r2
 800ff32:	4698      	mov	r8, r3
 800ff34:	688a      	ldr	r2, [r1, #8]
 800ff36:	690b      	ldr	r3, [r1, #16]
 800ff38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	bfb8      	it	lt
 800ff40:	4613      	movlt	r3, r2
 800ff42:	6033      	str	r3, [r6, #0]
 800ff44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ff48:	4607      	mov	r7, r0
 800ff4a:	460c      	mov	r4, r1
 800ff4c:	b10a      	cbz	r2, 800ff52 <_printf_common+0x26>
 800ff4e:	3301      	adds	r3, #1
 800ff50:	6033      	str	r3, [r6, #0]
 800ff52:	6823      	ldr	r3, [r4, #0]
 800ff54:	0699      	lsls	r1, r3, #26
 800ff56:	bf42      	ittt	mi
 800ff58:	6833      	ldrmi	r3, [r6, #0]
 800ff5a:	3302      	addmi	r3, #2
 800ff5c:	6033      	strmi	r3, [r6, #0]
 800ff5e:	6825      	ldr	r5, [r4, #0]
 800ff60:	f015 0506 	ands.w	r5, r5, #6
 800ff64:	d106      	bne.n	800ff74 <_printf_common+0x48>
 800ff66:	f104 0a19 	add.w	sl, r4, #25
 800ff6a:	68e3      	ldr	r3, [r4, #12]
 800ff6c:	6832      	ldr	r2, [r6, #0]
 800ff6e:	1a9b      	subs	r3, r3, r2
 800ff70:	42ab      	cmp	r3, r5
 800ff72:	dc26      	bgt.n	800ffc2 <_printf_common+0x96>
 800ff74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ff78:	6822      	ldr	r2, [r4, #0]
 800ff7a:	3b00      	subs	r3, #0
 800ff7c:	bf18      	it	ne
 800ff7e:	2301      	movne	r3, #1
 800ff80:	0692      	lsls	r2, r2, #26
 800ff82:	d42b      	bmi.n	800ffdc <_printf_common+0xb0>
 800ff84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ff88:	4641      	mov	r1, r8
 800ff8a:	4638      	mov	r0, r7
 800ff8c:	47c8      	blx	r9
 800ff8e:	3001      	adds	r0, #1
 800ff90:	d01e      	beq.n	800ffd0 <_printf_common+0xa4>
 800ff92:	6823      	ldr	r3, [r4, #0]
 800ff94:	6922      	ldr	r2, [r4, #16]
 800ff96:	f003 0306 	and.w	r3, r3, #6
 800ff9a:	2b04      	cmp	r3, #4
 800ff9c:	bf02      	ittt	eq
 800ff9e:	68e5      	ldreq	r5, [r4, #12]
 800ffa0:	6833      	ldreq	r3, [r6, #0]
 800ffa2:	1aed      	subeq	r5, r5, r3
 800ffa4:	68a3      	ldr	r3, [r4, #8]
 800ffa6:	bf0c      	ite	eq
 800ffa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ffac:	2500      	movne	r5, #0
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	bfc4      	itt	gt
 800ffb2:	1a9b      	subgt	r3, r3, r2
 800ffb4:	18ed      	addgt	r5, r5, r3
 800ffb6:	2600      	movs	r6, #0
 800ffb8:	341a      	adds	r4, #26
 800ffba:	42b5      	cmp	r5, r6
 800ffbc:	d11a      	bne.n	800fff4 <_printf_common+0xc8>
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	e008      	b.n	800ffd4 <_printf_common+0xa8>
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	4652      	mov	r2, sl
 800ffc6:	4641      	mov	r1, r8
 800ffc8:	4638      	mov	r0, r7
 800ffca:	47c8      	blx	r9
 800ffcc:	3001      	adds	r0, #1
 800ffce:	d103      	bne.n	800ffd8 <_printf_common+0xac>
 800ffd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ffd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffd8:	3501      	adds	r5, #1
 800ffda:	e7c6      	b.n	800ff6a <_printf_common+0x3e>
 800ffdc:	18e1      	adds	r1, r4, r3
 800ffde:	1c5a      	adds	r2, r3, #1
 800ffe0:	2030      	movs	r0, #48	@ 0x30
 800ffe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ffe6:	4422      	add	r2, r4
 800ffe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ffec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fff0:	3302      	adds	r3, #2
 800fff2:	e7c7      	b.n	800ff84 <_printf_common+0x58>
 800fff4:	2301      	movs	r3, #1
 800fff6:	4622      	mov	r2, r4
 800fff8:	4641      	mov	r1, r8
 800fffa:	4638      	mov	r0, r7
 800fffc:	47c8      	blx	r9
 800fffe:	3001      	adds	r0, #1
 8010000:	d0e6      	beq.n	800ffd0 <_printf_common+0xa4>
 8010002:	3601      	adds	r6, #1
 8010004:	e7d9      	b.n	800ffba <_printf_common+0x8e>
	...

08010008 <_printf_i>:
 8010008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801000c:	7e0f      	ldrb	r7, [r1, #24]
 801000e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010010:	2f78      	cmp	r7, #120	@ 0x78
 8010012:	4691      	mov	r9, r2
 8010014:	4680      	mov	r8, r0
 8010016:	460c      	mov	r4, r1
 8010018:	469a      	mov	sl, r3
 801001a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801001e:	d807      	bhi.n	8010030 <_printf_i+0x28>
 8010020:	2f62      	cmp	r7, #98	@ 0x62
 8010022:	d80a      	bhi.n	801003a <_printf_i+0x32>
 8010024:	2f00      	cmp	r7, #0
 8010026:	f000 80d1 	beq.w	80101cc <_printf_i+0x1c4>
 801002a:	2f58      	cmp	r7, #88	@ 0x58
 801002c:	f000 80b8 	beq.w	80101a0 <_printf_i+0x198>
 8010030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010034:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010038:	e03a      	b.n	80100b0 <_printf_i+0xa8>
 801003a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801003e:	2b15      	cmp	r3, #21
 8010040:	d8f6      	bhi.n	8010030 <_printf_i+0x28>
 8010042:	a101      	add	r1, pc, #4	@ (adr r1, 8010048 <_printf_i+0x40>)
 8010044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010048:	080100a1 	.word	0x080100a1
 801004c:	080100b5 	.word	0x080100b5
 8010050:	08010031 	.word	0x08010031
 8010054:	08010031 	.word	0x08010031
 8010058:	08010031 	.word	0x08010031
 801005c:	08010031 	.word	0x08010031
 8010060:	080100b5 	.word	0x080100b5
 8010064:	08010031 	.word	0x08010031
 8010068:	08010031 	.word	0x08010031
 801006c:	08010031 	.word	0x08010031
 8010070:	08010031 	.word	0x08010031
 8010074:	080101b3 	.word	0x080101b3
 8010078:	080100df 	.word	0x080100df
 801007c:	0801016d 	.word	0x0801016d
 8010080:	08010031 	.word	0x08010031
 8010084:	08010031 	.word	0x08010031
 8010088:	080101d5 	.word	0x080101d5
 801008c:	08010031 	.word	0x08010031
 8010090:	080100df 	.word	0x080100df
 8010094:	08010031 	.word	0x08010031
 8010098:	08010031 	.word	0x08010031
 801009c:	08010175 	.word	0x08010175
 80100a0:	6833      	ldr	r3, [r6, #0]
 80100a2:	1d1a      	adds	r2, r3, #4
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	6032      	str	r2, [r6, #0]
 80100a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80100ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80100b0:	2301      	movs	r3, #1
 80100b2:	e09c      	b.n	80101ee <_printf_i+0x1e6>
 80100b4:	6833      	ldr	r3, [r6, #0]
 80100b6:	6820      	ldr	r0, [r4, #0]
 80100b8:	1d19      	adds	r1, r3, #4
 80100ba:	6031      	str	r1, [r6, #0]
 80100bc:	0606      	lsls	r6, r0, #24
 80100be:	d501      	bpl.n	80100c4 <_printf_i+0xbc>
 80100c0:	681d      	ldr	r5, [r3, #0]
 80100c2:	e003      	b.n	80100cc <_printf_i+0xc4>
 80100c4:	0645      	lsls	r5, r0, #25
 80100c6:	d5fb      	bpl.n	80100c0 <_printf_i+0xb8>
 80100c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80100cc:	2d00      	cmp	r5, #0
 80100ce:	da03      	bge.n	80100d8 <_printf_i+0xd0>
 80100d0:	232d      	movs	r3, #45	@ 0x2d
 80100d2:	426d      	negs	r5, r5
 80100d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100d8:	4858      	ldr	r0, [pc, #352]	@ (801023c <_printf_i+0x234>)
 80100da:	230a      	movs	r3, #10
 80100dc:	e011      	b.n	8010102 <_printf_i+0xfa>
 80100de:	6821      	ldr	r1, [r4, #0]
 80100e0:	6833      	ldr	r3, [r6, #0]
 80100e2:	0608      	lsls	r0, r1, #24
 80100e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80100e8:	d402      	bmi.n	80100f0 <_printf_i+0xe8>
 80100ea:	0649      	lsls	r1, r1, #25
 80100ec:	bf48      	it	mi
 80100ee:	b2ad      	uxthmi	r5, r5
 80100f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80100f2:	4852      	ldr	r0, [pc, #328]	@ (801023c <_printf_i+0x234>)
 80100f4:	6033      	str	r3, [r6, #0]
 80100f6:	bf14      	ite	ne
 80100f8:	230a      	movne	r3, #10
 80100fa:	2308      	moveq	r3, #8
 80100fc:	2100      	movs	r1, #0
 80100fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010102:	6866      	ldr	r6, [r4, #4]
 8010104:	60a6      	str	r6, [r4, #8]
 8010106:	2e00      	cmp	r6, #0
 8010108:	db05      	blt.n	8010116 <_printf_i+0x10e>
 801010a:	6821      	ldr	r1, [r4, #0]
 801010c:	432e      	orrs	r6, r5
 801010e:	f021 0104 	bic.w	r1, r1, #4
 8010112:	6021      	str	r1, [r4, #0]
 8010114:	d04b      	beq.n	80101ae <_printf_i+0x1a6>
 8010116:	4616      	mov	r6, r2
 8010118:	fbb5 f1f3 	udiv	r1, r5, r3
 801011c:	fb03 5711 	mls	r7, r3, r1, r5
 8010120:	5dc7      	ldrb	r7, [r0, r7]
 8010122:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010126:	462f      	mov	r7, r5
 8010128:	42bb      	cmp	r3, r7
 801012a:	460d      	mov	r5, r1
 801012c:	d9f4      	bls.n	8010118 <_printf_i+0x110>
 801012e:	2b08      	cmp	r3, #8
 8010130:	d10b      	bne.n	801014a <_printf_i+0x142>
 8010132:	6823      	ldr	r3, [r4, #0]
 8010134:	07df      	lsls	r7, r3, #31
 8010136:	d508      	bpl.n	801014a <_printf_i+0x142>
 8010138:	6923      	ldr	r3, [r4, #16]
 801013a:	6861      	ldr	r1, [r4, #4]
 801013c:	4299      	cmp	r1, r3
 801013e:	bfde      	ittt	le
 8010140:	2330      	movle	r3, #48	@ 0x30
 8010142:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010146:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801014a:	1b92      	subs	r2, r2, r6
 801014c:	6122      	str	r2, [r4, #16]
 801014e:	f8cd a000 	str.w	sl, [sp]
 8010152:	464b      	mov	r3, r9
 8010154:	aa03      	add	r2, sp, #12
 8010156:	4621      	mov	r1, r4
 8010158:	4640      	mov	r0, r8
 801015a:	f7ff fee7 	bl	800ff2c <_printf_common>
 801015e:	3001      	adds	r0, #1
 8010160:	d14a      	bne.n	80101f8 <_printf_i+0x1f0>
 8010162:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010166:	b004      	add	sp, #16
 8010168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801016c:	6823      	ldr	r3, [r4, #0]
 801016e:	f043 0320 	orr.w	r3, r3, #32
 8010172:	6023      	str	r3, [r4, #0]
 8010174:	4832      	ldr	r0, [pc, #200]	@ (8010240 <_printf_i+0x238>)
 8010176:	2778      	movs	r7, #120	@ 0x78
 8010178:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801017c:	6823      	ldr	r3, [r4, #0]
 801017e:	6831      	ldr	r1, [r6, #0]
 8010180:	061f      	lsls	r7, r3, #24
 8010182:	f851 5b04 	ldr.w	r5, [r1], #4
 8010186:	d402      	bmi.n	801018e <_printf_i+0x186>
 8010188:	065f      	lsls	r7, r3, #25
 801018a:	bf48      	it	mi
 801018c:	b2ad      	uxthmi	r5, r5
 801018e:	6031      	str	r1, [r6, #0]
 8010190:	07d9      	lsls	r1, r3, #31
 8010192:	bf44      	itt	mi
 8010194:	f043 0320 	orrmi.w	r3, r3, #32
 8010198:	6023      	strmi	r3, [r4, #0]
 801019a:	b11d      	cbz	r5, 80101a4 <_printf_i+0x19c>
 801019c:	2310      	movs	r3, #16
 801019e:	e7ad      	b.n	80100fc <_printf_i+0xf4>
 80101a0:	4826      	ldr	r0, [pc, #152]	@ (801023c <_printf_i+0x234>)
 80101a2:	e7e9      	b.n	8010178 <_printf_i+0x170>
 80101a4:	6823      	ldr	r3, [r4, #0]
 80101a6:	f023 0320 	bic.w	r3, r3, #32
 80101aa:	6023      	str	r3, [r4, #0]
 80101ac:	e7f6      	b.n	801019c <_printf_i+0x194>
 80101ae:	4616      	mov	r6, r2
 80101b0:	e7bd      	b.n	801012e <_printf_i+0x126>
 80101b2:	6833      	ldr	r3, [r6, #0]
 80101b4:	6825      	ldr	r5, [r4, #0]
 80101b6:	6961      	ldr	r1, [r4, #20]
 80101b8:	1d18      	adds	r0, r3, #4
 80101ba:	6030      	str	r0, [r6, #0]
 80101bc:	062e      	lsls	r6, r5, #24
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	d501      	bpl.n	80101c6 <_printf_i+0x1be>
 80101c2:	6019      	str	r1, [r3, #0]
 80101c4:	e002      	b.n	80101cc <_printf_i+0x1c4>
 80101c6:	0668      	lsls	r0, r5, #25
 80101c8:	d5fb      	bpl.n	80101c2 <_printf_i+0x1ba>
 80101ca:	8019      	strh	r1, [r3, #0]
 80101cc:	2300      	movs	r3, #0
 80101ce:	6123      	str	r3, [r4, #16]
 80101d0:	4616      	mov	r6, r2
 80101d2:	e7bc      	b.n	801014e <_printf_i+0x146>
 80101d4:	6833      	ldr	r3, [r6, #0]
 80101d6:	1d1a      	adds	r2, r3, #4
 80101d8:	6032      	str	r2, [r6, #0]
 80101da:	681e      	ldr	r6, [r3, #0]
 80101dc:	6862      	ldr	r2, [r4, #4]
 80101de:	2100      	movs	r1, #0
 80101e0:	4630      	mov	r0, r6
 80101e2:	f7f0 f805 	bl	80001f0 <memchr>
 80101e6:	b108      	cbz	r0, 80101ec <_printf_i+0x1e4>
 80101e8:	1b80      	subs	r0, r0, r6
 80101ea:	6060      	str	r0, [r4, #4]
 80101ec:	6863      	ldr	r3, [r4, #4]
 80101ee:	6123      	str	r3, [r4, #16]
 80101f0:	2300      	movs	r3, #0
 80101f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101f6:	e7aa      	b.n	801014e <_printf_i+0x146>
 80101f8:	6923      	ldr	r3, [r4, #16]
 80101fa:	4632      	mov	r2, r6
 80101fc:	4649      	mov	r1, r9
 80101fe:	4640      	mov	r0, r8
 8010200:	47d0      	blx	sl
 8010202:	3001      	adds	r0, #1
 8010204:	d0ad      	beq.n	8010162 <_printf_i+0x15a>
 8010206:	6823      	ldr	r3, [r4, #0]
 8010208:	079b      	lsls	r3, r3, #30
 801020a:	d413      	bmi.n	8010234 <_printf_i+0x22c>
 801020c:	68e0      	ldr	r0, [r4, #12]
 801020e:	9b03      	ldr	r3, [sp, #12]
 8010210:	4298      	cmp	r0, r3
 8010212:	bfb8      	it	lt
 8010214:	4618      	movlt	r0, r3
 8010216:	e7a6      	b.n	8010166 <_printf_i+0x15e>
 8010218:	2301      	movs	r3, #1
 801021a:	4632      	mov	r2, r6
 801021c:	4649      	mov	r1, r9
 801021e:	4640      	mov	r0, r8
 8010220:	47d0      	blx	sl
 8010222:	3001      	adds	r0, #1
 8010224:	d09d      	beq.n	8010162 <_printf_i+0x15a>
 8010226:	3501      	adds	r5, #1
 8010228:	68e3      	ldr	r3, [r4, #12]
 801022a:	9903      	ldr	r1, [sp, #12]
 801022c:	1a5b      	subs	r3, r3, r1
 801022e:	42ab      	cmp	r3, r5
 8010230:	dcf2      	bgt.n	8010218 <_printf_i+0x210>
 8010232:	e7eb      	b.n	801020c <_printf_i+0x204>
 8010234:	2500      	movs	r5, #0
 8010236:	f104 0619 	add.w	r6, r4, #25
 801023a:	e7f5      	b.n	8010228 <_printf_i+0x220>
 801023c:	0801255e 	.word	0x0801255e
 8010240:	0801256f 	.word	0x0801256f

08010244 <std>:
 8010244:	2300      	movs	r3, #0
 8010246:	b510      	push	{r4, lr}
 8010248:	4604      	mov	r4, r0
 801024a:	e9c0 3300 	strd	r3, r3, [r0]
 801024e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010252:	6083      	str	r3, [r0, #8]
 8010254:	8181      	strh	r1, [r0, #12]
 8010256:	6643      	str	r3, [r0, #100]	@ 0x64
 8010258:	81c2      	strh	r2, [r0, #14]
 801025a:	6183      	str	r3, [r0, #24]
 801025c:	4619      	mov	r1, r3
 801025e:	2208      	movs	r2, #8
 8010260:	305c      	adds	r0, #92	@ 0x5c
 8010262:	f000 f8f4 	bl	801044e <memset>
 8010266:	4b0d      	ldr	r3, [pc, #52]	@ (801029c <std+0x58>)
 8010268:	6263      	str	r3, [r4, #36]	@ 0x24
 801026a:	4b0d      	ldr	r3, [pc, #52]	@ (80102a0 <std+0x5c>)
 801026c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801026e:	4b0d      	ldr	r3, [pc, #52]	@ (80102a4 <std+0x60>)
 8010270:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010272:	4b0d      	ldr	r3, [pc, #52]	@ (80102a8 <std+0x64>)
 8010274:	6323      	str	r3, [r4, #48]	@ 0x30
 8010276:	4b0d      	ldr	r3, [pc, #52]	@ (80102ac <std+0x68>)
 8010278:	6224      	str	r4, [r4, #32]
 801027a:	429c      	cmp	r4, r3
 801027c:	d006      	beq.n	801028c <std+0x48>
 801027e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010282:	4294      	cmp	r4, r2
 8010284:	d002      	beq.n	801028c <std+0x48>
 8010286:	33d0      	adds	r3, #208	@ 0xd0
 8010288:	429c      	cmp	r4, r3
 801028a:	d105      	bne.n	8010298 <std+0x54>
 801028c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010294:	f000 b9b6 	b.w	8010604 <__retarget_lock_init_recursive>
 8010298:	bd10      	pop	{r4, pc}
 801029a:	bf00      	nop
 801029c:	080103c9 	.word	0x080103c9
 80102a0:	080103eb 	.word	0x080103eb
 80102a4:	08010423 	.word	0x08010423
 80102a8:	08010447 	.word	0x08010447
 80102ac:	20004680 	.word	0x20004680

080102b0 <stdio_exit_handler>:
 80102b0:	4a02      	ldr	r2, [pc, #8]	@ (80102bc <stdio_exit_handler+0xc>)
 80102b2:	4903      	ldr	r1, [pc, #12]	@ (80102c0 <stdio_exit_handler+0x10>)
 80102b4:	4803      	ldr	r0, [pc, #12]	@ (80102c4 <stdio_exit_handler+0x14>)
 80102b6:	f000 b869 	b.w	801038c <_fwalk_sglue>
 80102ba:	bf00      	nop
 80102bc:	20000118 	.word	0x20000118
 80102c0:	08011cd5 	.word	0x08011cd5
 80102c4:	20000128 	.word	0x20000128

080102c8 <cleanup_stdio>:
 80102c8:	6841      	ldr	r1, [r0, #4]
 80102ca:	4b0c      	ldr	r3, [pc, #48]	@ (80102fc <cleanup_stdio+0x34>)
 80102cc:	4299      	cmp	r1, r3
 80102ce:	b510      	push	{r4, lr}
 80102d0:	4604      	mov	r4, r0
 80102d2:	d001      	beq.n	80102d8 <cleanup_stdio+0x10>
 80102d4:	f001 fcfe 	bl	8011cd4 <_fflush_r>
 80102d8:	68a1      	ldr	r1, [r4, #8]
 80102da:	4b09      	ldr	r3, [pc, #36]	@ (8010300 <cleanup_stdio+0x38>)
 80102dc:	4299      	cmp	r1, r3
 80102de:	d002      	beq.n	80102e6 <cleanup_stdio+0x1e>
 80102e0:	4620      	mov	r0, r4
 80102e2:	f001 fcf7 	bl	8011cd4 <_fflush_r>
 80102e6:	68e1      	ldr	r1, [r4, #12]
 80102e8:	4b06      	ldr	r3, [pc, #24]	@ (8010304 <cleanup_stdio+0x3c>)
 80102ea:	4299      	cmp	r1, r3
 80102ec:	d004      	beq.n	80102f8 <cleanup_stdio+0x30>
 80102ee:	4620      	mov	r0, r4
 80102f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102f4:	f001 bcee 	b.w	8011cd4 <_fflush_r>
 80102f8:	bd10      	pop	{r4, pc}
 80102fa:	bf00      	nop
 80102fc:	20004680 	.word	0x20004680
 8010300:	200046e8 	.word	0x200046e8
 8010304:	20004750 	.word	0x20004750

08010308 <global_stdio_init.part.0>:
 8010308:	b510      	push	{r4, lr}
 801030a:	4b0b      	ldr	r3, [pc, #44]	@ (8010338 <global_stdio_init.part.0+0x30>)
 801030c:	4c0b      	ldr	r4, [pc, #44]	@ (801033c <global_stdio_init.part.0+0x34>)
 801030e:	4a0c      	ldr	r2, [pc, #48]	@ (8010340 <global_stdio_init.part.0+0x38>)
 8010310:	601a      	str	r2, [r3, #0]
 8010312:	4620      	mov	r0, r4
 8010314:	2200      	movs	r2, #0
 8010316:	2104      	movs	r1, #4
 8010318:	f7ff ff94 	bl	8010244 <std>
 801031c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010320:	2201      	movs	r2, #1
 8010322:	2109      	movs	r1, #9
 8010324:	f7ff ff8e 	bl	8010244 <std>
 8010328:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801032c:	2202      	movs	r2, #2
 801032e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010332:	2112      	movs	r1, #18
 8010334:	f7ff bf86 	b.w	8010244 <std>
 8010338:	200047b8 	.word	0x200047b8
 801033c:	20004680 	.word	0x20004680
 8010340:	080102b1 	.word	0x080102b1

08010344 <__sfp_lock_acquire>:
 8010344:	4801      	ldr	r0, [pc, #4]	@ (801034c <__sfp_lock_acquire+0x8>)
 8010346:	f000 b95e 	b.w	8010606 <__retarget_lock_acquire_recursive>
 801034a:	bf00      	nop
 801034c:	200047c1 	.word	0x200047c1

08010350 <__sfp_lock_release>:
 8010350:	4801      	ldr	r0, [pc, #4]	@ (8010358 <__sfp_lock_release+0x8>)
 8010352:	f000 b959 	b.w	8010608 <__retarget_lock_release_recursive>
 8010356:	bf00      	nop
 8010358:	200047c1 	.word	0x200047c1

0801035c <__sinit>:
 801035c:	b510      	push	{r4, lr}
 801035e:	4604      	mov	r4, r0
 8010360:	f7ff fff0 	bl	8010344 <__sfp_lock_acquire>
 8010364:	6a23      	ldr	r3, [r4, #32]
 8010366:	b11b      	cbz	r3, 8010370 <__sinit+0x14>
 8010368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801036c:	f7ff bff0 	b.w	8010350 <__sfp_lock_release>
 8010370:	4b04      	ldr	r3, [pc, #16]	@ (8010384 <__sinit+0x28>)
 8010372:	6223      	str	r3, [r4, #32]
 8010374:	4b04      	ldr	r3, [pc, #16]	@ (8010388 <__sinit+0x2c>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d1f5      	bne.n	8010368 <__sinit+0xc>
 801037c:	f7ff ffc4 	bl	8010308 <global_stdio_init.part.0>
 8010380:	e7f2      	b.n	8010368 <__sinit+0xc>
 8010382:	bf00      	nop
 8010384:	080102c9 	.word	0x080102c9
 8010388:	200047b8 	.word	0x200047b8

0801038c <_fwalk_sglue>:
 801038c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010390:	4607      	mov	r7, r0
 8010392:	4688      	mov	r8, r1
 8010394:	4614      	mov	r4, r2
 8010396:	2600      	movs	r6, #0
 8010398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801039c:	f1b9 0901 	subs.w	r9, r9, #1
 80103a0:	d505      	bpl.n	80103ae <_fwalk_sglue+0x22>
 80103a2:	6824      	ldr	r4, [r4, #0]
 80103a4:	2c00      	cmp	r4, #0
 80103a6:	d1f7      	bne.n	8010398 <_fwalk_sglue+0xc>
 80103a8:	4630      	mov	r0, r6
 80103aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103ae:	89ab      	ldrh	r3, [r5, #12]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d907      	bls.n	80103c4 <_fwalk_sglue+0x38>
 80103b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103b8:	3301      	adds	r3, #1
 80103ba:	d003      	beq.n	80103c4 <_fwalk_sglue+0x38>
 80103bc:	4629      	mov	r1, r5
 80103be:	4638      	mov	r0, r7
 80103c0:	47c0      	blx	r8
 80103c2:	4306      	orrs	r6, r0
 80103c4:	3568      	adds	r5, #104	@ 0x68
 80103c6:	e7e9      	b.n	801039c <_fwalk_sglue+0x10>

080103c8 <__sread>:
 80103c8:	b510      	push	{r4, lr}
 80103ca:	460c      	mov	r4, r1
 80103cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103d0:	f000 f8ca 	bl	8010568 <_read_r>
 80103d4:	2800      	cmp	r0, #0
 80103d6:	bfab      	itete	ge
 80103d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80103da:	89a3      	ldrhlt	r3, [r4, #12]
 80103dc:	181b      	addge	r3, r3, r0
 80103de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80103e2:	bfac      	ite	ge
 80103e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80103e6:	81a3      	strhlt	r3, [r4, #12]
 80103e8:	bd10      	pop	{r4, pc}

080103ea <__swrite>:
 80103ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ee:	461f      	mov	r7, r3
 80103f0:	898b      	ldrh	r3, [r1, #12]
 80103f2:	05db      	lsls	r3, r3, #23
 80103f4:	4605      	mov	r5, r0
 80103f6:	460c      	mov	r4, r1
 80103f8:	4616      	mov	r6, r2
 80103fa:	d505      	bpl.n	8010408 <__swrite+0x1e>
 80103fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010400:	2302      	movs	r3, #2
 8010402:	2200      	movs	r2, #0
 8010404:	f000 f89e 	bl	8010544 <_lseek_r>
 8010408:	89a3      	ldrh	r3, [r4, #12]
 801040a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801040e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010412:	81a3      	strh	r3, [r4, #12]
 8010414:	4632      	mov	r2, r6
 8010416:	463b      	mov	r3, r7
 8010418:	4628      	mov	r0, r5
 801041a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801041e:	f000 b8b5 	b.w	801058c <_write_r>

08010422 <__sseek>:
 8010422:	b510      	push	{r4, lr}
 8010424:	460c      	mov	r4, r1
 8010426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801042a:	f000 f88b 	bl	8010544 <_lseek_r>
 801042e:	1c43      	adds	r3, r0, #1
 8010430:	89a3      	ldrh	r3, [r4, #12]
 8010432:	bf15      	itete	ne
 8010434:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010436:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801043a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801043e:	81a3      	strheq	r3, [r4, #12]
 8010440:	bf18      	it	ne
 8010442:	81a3      	strhne	r3, [r4, #12]
 8010444:	bd10      	pop	{r4, pc}

08010446 <__sclose>:
 8010446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801044a:	f000 b80d 	b.w	8010468 <_close_r>

0801044e <memset>:
 801044e:	4402      	add	r2, r0
 8010450:	4603      	mov	r3, r0
 8010452:	4293      	cmp	r3, r2
 8010454:	d100      	bne.n	8010458 <memset+0xa>
 8010456:	4770      	bx	lr
 8010458:	f803 1b01 	strb.w	r1, [r3], #1
 801045c:	e7f9      	b.n	8010452 <memset+0x4>
	...

08010460 <_localeconv_r>:
 8010460:	4800      	ldr	r0, [pc, #0]	@ (8010464 <_localeconv_r+0x4>)
 8010462:	4770      	bx	lr
 8010464:	20000264 	.word	0x20000264

08010468 <_close_r>:
 8010468:	b538      	push	{r3, r4, r5, lr}
 801046a:	4d06      	ldr	r5, [pc, #24]	@ (8010484 <_close_r+0x1c>)
 801046c:	2300      	movs	r3, #0
 801046e:	4604      	mov	r4, r0
 8010470:	4608      	mov	r0, r1
 8010472:	602b      	str	r3, [r5, #0]
 8010474:	f7f2 fd38 	bl	8002ee8 <_close>
 8010478:	1c43      	adds	r3, r0, #1
 801047a:	d102      	bne.n	8010482 <_close_r+0x1a>
 801047c:	682b      	ldr	r3, [r5, #0]
 801047e:	b103      	cbz	r3, 8010482 <_close_r+0x1a>
 8010480:	6023      	str	r3, [r4, #0]
 8010482:	bd38      	pop	{r3, r4, r5, pc}
 8010484:	200047bc 	.word	0x200047bc

08010488 <_reclaim_reent>:
 8010488:	4b2d      	ldr	r3, [pc, #180]	@ (8010540 <_reclaim_reent+0xb8>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	4283      	cmp	r3, r0
 801048e:	b570      	push	{r4, r5, r6, lr}
 8010490:	4604      	mov	r4, r0
 8010492:	d053      	beq.n	801053c <_reclaim_reent+0xb4>
 8010494:	69c3      	ldr	r3, [r0, #28]
 8010496:	b31b      	cbz	r3, 80104e0 <_reclaim_reent+0x58>
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	b163      	cbz	r3, 80104b6 <_reclaim_reent+0x2e>
 801049c:	2500      	movs	r5, #0
 801049e:	69e3      	ldr	r3, [r4, #28]
 80104a0:	68db      	ldr	r3, [r3, #12]
 80104a2:	5959      	ldr	r1, [r3, r5]
 80104a4:	b9b1      	cbnz	r1, 80104d4 <_reclaim_reent+0x4c>
 80104a6:	3504      	adds	r5, #4
 80104a8:	2d80      	cmp	r5, #128	@ 0x80
 80104aa:	d1f8      	bne.n	801049e <_reclaim_reent+0x16>
 80104ac:	69e3      	ldr	r3, [r4, #28]
 80104ae:	4620      	mov	r0, r4
 80104b0:	68d9      	ldr	r1, [r3, #12]
 80104b2:	f000 ff11 	bl	80112d8 <_free_r>
 80104b6:	69e3      	ldr	r3, [r4, #28]
 80104b8:	6819      	ldr	r1, [r3, #0]
 80104ba:	b111      	cbz	r1, 80104c2 <_reclaim_reent+0x3a>
 80104bc:	4620      	mov	r0, r4
 80104be:	f000 ff0b 	bl	80112d8 <_free_r>
 80104c2:	69e3      	ldr	r3, [r4, #28]
 80104c4:	689d      	ldr	r5, [r3, #8]
 80104c6:	b15d      	cbz	r5, 80104e0 <_reclaim_reent+0x58>
 80104c8:	4629      	mov	r1, r5
 80104ca:	4620      	mov	r0, r4
 80104cc:	682d      	ldr	r5, [r5, #0]
 80104ce:	f000 ff03 	bl	80112d8 <_free_r>
 80104d2:	e7f8      	b.n	80104c6 <_reclaim_reent+0x3e>
 80104d4:	680e      	ldr	r6, [r1, #0]
 80104d6:	4620      	mov	r0, r4
 80104d8:	f000 fefe 	bl	80112d8 <_free_r>
 80104dc:	4631      	mov	r1, r6
 80104de:	e7e1      	b.n	80104a4 <_reclaim_reent+0x1c>
 80104e0:	6961      	ldr	r1, [r4, #20]
 80104e2:	b111      	cbz	r1, 80104ea <_reclaim_reent+0x62>
 80104e4:	4620      	mov	r0, r4
 80104e6:	f000 fef7 	bl	80112d8 <_free_r>
 80104ea:	69e1      	ldr	r1, [r4, #28]
 80104ec:	b111      	cbz	r1, 80104f4 <_reclaim_reent+0x6c>
 80104ee:	4620      	mov	r0, r4
 80104f0:	f000 fef2 	bl	80112d8 <_free_r>
 80104f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80104f6:	b111      	cbz	r1, 80104fe <_reclaim_reent+0x76>
 80104f8:	4620      	mov	r0, r4
 80104fa:	f000 feed 	bl	80112d8 <_free_r>
 80104fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010500:	b111      	cbz	r1, 8010508 <_reclaim_reent+0x80>
 8010502:	4620      	mov	r0, r4
 8010504:	f000 fee8 	bl	80112d8 <_free_r>
 8010508:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801050a:	b111      	cbz	r1, 8010512 <_reclaim_reent+0x8a>
 801050c:	4620      	mov	r0, r4
 801050e:	f000 fee3 	bl	80112d8 <_free_r>
 8010512:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010514:	b111      	cbz	r1, 801051c <_reclaim_reent+0x94>
 8010516:	4620      	mov	r0, r4
 8010518:	f000 fede 	bl	80112d8 <_free_r>
 801051c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801051e:	b111      	cbz	r1, 8010526 <_reclaim_reent+0x9e>
 8010520:	4620      	mov	r0, r4
 8010522:	f000 fed9 	bl	80112d8 <_free_r>
 8010526:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010528:	b111      	cbz	r1, 8010530 <_reclaim_reent+0xa8>
 801052a:	4620      	mov	r0, r4
 801052c:	f000 fed4 	bl	80112d8 <_free_r>
 8010530:	6a23      	ldr	r3, [r4, #32]
 8010532:	b11b      	cbz	r3, 801053c <_reclaim_reent+0xb4>
 8010534:	4620      	mov	r0, r4
 8010536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801053a:	4718      	bx	r3
 801053c:	bd70      	pop	{r4, r5, r6, pc}
 801053e:	bf00      	nop
 8010540:	20000124 	.word	0x20000124

08010544 <_lseek_r>:
 8010544:	b538      	push	{r3, r4, r5, lr}
 8010546:	4d07      	ldr	r5, [pc, #28]	@ (8010564 <_lseek_r+0x20>)
 8010548:	4604      	mov	r4, r0
 801054a:	4608      	mov	r0, r1
 801054c:	4611      	mov	r1, r2
 801054e:	2200      	movs	r2, #0
 8010550:	602a      	str	r2, [r5, #0]
 8010552:	461a      	mov	r2, r3
 8010554:	f7f2 fcef 	bl	8002f36 <_lseek>
 8010558:	1c43      	adds	r3, r0, #1
 801055a:	d102      	bne.n	8010562 <_lseek_r+0x1e>
 801055c:	682b      	ldr	r3, [r5, #0]
 801055e:	b103      	cbz	r3, 8010562 <_lseek_r+0x1e>
 8010560:	6023      	str	r3, [r4, #0]
 8010562:	bd38      	pop	{r3, r4, r5, pc}
 8010564:	200047bc 	.word	0x200047bc

08010568 <_read_r>:
 8010568:	b538      	push	{r3, r4, r5, lr}
 801056a:	4d07      	ldr	r5, [pc, #28]	@ (8010588 <_read_r+0x20>)
 801056c:	4604      	mov	r4, r0
 801056e:	4608      	mov	r0, r1
 8010570:	4611      	mov	r1, r2
 8010572:	2200      	movs	r2, #0
 8010574:	602a      	str	r2, [r5, #0]
 8010576:	461a      	mov	r2, r3
 8010578:	f7f2 fc7d 	bl	8002e76 <_read>
 801057c:	1c43      	adds	r3, r0, #1
 801057e:	d102      	bne.n	8010586 <_read_r+0x1e>
 8010580:	682b      	ldr	r3, [r5, #0]
 8010582:	b103      	cbz	r3, 8010586 <_read_r+0x1e>
 8010584:	6023      	str	r3, [r4, #0]
 8010586:	bd38      	pop	{r3, r4, r5, pc}
 8010588:	200047bc 	.word	0x200047bc

0801058c <_write_r>:
 801058c:	b538      	push	{r3, r4, r5, lr}
 801058e:	4d07      	ldr	r5, [pc, #28]	@ (80105ac <_write_r+0x20>)
 8010590:	4604      	mov	r4, r0
 8010592:	4608      	mov	r0, r1
 8010594:	4611      	mov	r1, r2
 8010596:	2200      	movs	r2, #0
 8010598:	602a      	str	r2, [r5, #0]
 801059a:	461a      	mov	r2, r3
 801059c:	f7f2 fc88 	bl	8002eb0 <_write>
 80105a0:	1c43      	adds	r3, r0, #1
 80105a2:	d102      	bne.n	80105aa <_write_r+0x1e>
 80105a4:	682b      	ldr	r3, [r5, #0]
 80105a6:	b103      	cbz	r3, 80105aa <_write_r+0x1e>
 80105a8:	6023      	str	r3, [r4, #0]
 80105aa:	bd38      	pop	{r3, r4, r5, pc}
 80105ac:	200047bc 	.word	0x200047bc

080105b0 <__errno>:
 80105b0:	4b01      	ldr	r3, [pc, #4]	@ (80105b8 <__errno+0x8>)
 80105b2:	6818      	ldr	r0, [r3, #0]
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop
 80105b8:	20000124 	.word	0x20000124

080105bc <__libc_init_array>:
 80105bc:	b570      	push	{r4, r5, r6, lr}
 80105be:	4d0d      	ldr	r5, [pc, #52]	@ (80105f4 <__libc_init_array+0x38>)
 80105c0:	4c0d      	ldr	r4, [pc, #52]	@ (80105f8 <__libc_init_array+0x3c>)
 80105c2:	1b64      	subs	r4, r4, r5
 80105c4:	10a4      	asrs	r4, r4, #2
 80105c6:	2600      	movs	r6, #0
 80105c8:	42a6      	cmp	r6, r4
 80105ca:	d109      	bne.n	80105e0 <__libc_init_array+0x24>
 80105cc:	4d0b      	ldr	r5, [pc, #44]	@ (80105fc <__libc_init_array+0x40>)
 80105ce:	4c0c      	ldr	r4, [pc, #48]	@ (8010600 <__libc_init_array+0x44>)
 80105d0:	f001 fec0 	bl	8012354 <_init>
 80105d4:	1b64      	subs	r4, r4, r5
 80105d6:	10a4      	asrs	r4, r4, #2
 80105d8:	2600      	movs	r6, #0
 80105da:	42a6      	cmp	r6, r4
 80105dc:	d105      	bne.n	80105ea <__libc_init_array+0x2e>
 80105de:	bd70      	pop	{r4, r5, r6, pc}
 80105e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80105e4:	4798      	blx	r3
 80105e6:	3601      	adds	r6, #1
 80105e8:	e7ee      	b.n	80105c8 <__libc_init_array+0xc>
 80105ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80105ee:	4798      	blx	r3
 80105f0:	3601      	adds	r6, #1
 80105f2:	e7f2      	b.n	80105da <__libc_init_array+0x1e>
 80105f4:	080128cc 	.word	0x080128cc
 80105f8:	080128cc 	.word	0x080128cc
 80105fc:	080128cc 	.word	0x080128cc
 8010600:	080128d4 	.word	0x080128d4

08010604 <__retarget_lock_init_recursive>:
 8010604:	4770      	bx	lr

08010606 <__retarget_lock_acquire_recursive>:
 8010606:	4770      	bx	lr

08010608 <__retarget_lock_release_recursive>:
 8010608:	4770      	bx	lr

0801060a <memcpy>:
 801060a:	440a      	add	r2, r1
 801060c:	4291      	cmp	r1, r2
 801060e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010612:	d100      	bne.n	8010616 <memcpy+0xc>
 8010614:	4770      	bx	lr
 8010616:	b510      	push	{r4, lr}
 8010618:	f811 4b01 	ldrb.w	r4, [r1], #1
 801061c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010620:	4291      	cmp	r1, r2
 8010622:	d1f9      	bne.n	8010618 <memcpy+0xe>
 8010624:	bd10      	pop	{r4, pc}

08010626 <quorem>:
 8010626:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801062a:	6903      	ldr	r3, [r0, #16]
 801062c:	690c      	ldr	r4, [r1, #16]
 801062e:	42a3      	cmp	r3, r4
 8010630:	4607      	mov	r7, r0
 8010632:	db7e      	blt.n	8010732 <quorem+0x10c>
 8010634:	3c01      	subs	r4, #1
 8010636:	f101 0814 	add.w	r8, r1, #20
 801063a:	00a3      	lsls	r3, r4, #2
 801063c:	f100 0514 	add.w	r5, r0, #20
 8010640:	9300      	str	r3, [sp, #0]
 8010642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010646:	9301      	str	r3, [sp, #4]
 8010648:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801064c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010650:	3301      	adds	r3, #1
 8010652:	429a      	cmp	r2, r3
 8010654:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010658:	fbb2 f6f3 	udiv	r6, r2, r3
 801065c:	d32e      	bcc.n	80106bc <quorem+0x96>
 801065e:	f04f 0a00 	mov.w	sl, #0
 8010662:	46c4      	mov	ip, r8
 8010664:	46ae      	mov	lr, r5
 8010666:	46d3      	mov	fp, sl
 8010668:	f85c 3b04 	ldr.w	r3, [ip], #4
 801066c:	b298      	uxth	r0, r3
 801066e:	fb06 a000 	mla	r0, r6, r0, sl
 8010672:	0c02      	lsrs	r2, r0, #16
 8010674:	0c1b      	lsrs	r3, r3, #16
 8010676:	fb06 2303 	mla	r3, r6, r3, r2
 801067a:	f8de 2000 	ldr.w	r2, [lr]
 801067e:	b280      	uxth	r0, r0
 8010680:	b292      	uxth	r2, r2
 8010682:	1a12      	subs	r2, r2, r0
 8010684:	445a      	add	r2, fp
 8010686:	f8de 0000 	ldr.w	r0, [lr]
 801068a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801068e:	b29b      	uxth	r3, r3
 8010690:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010694:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010698:	b292      	uxth	r2, r2
 801069a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801069e:	45e1      	cmp	r9, ip
 80106a0:	f84e 2b04 	str.w	r2, [lr], #4
 80106a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80106a8:	d2de      	bcs.n	8010668 <quorem+0x42>
 80106aa:	9b00      	ldr	r3, [sp, #0]
 80106ac:	58eb      	ldr	r3, [r5, r3]
 80106ae:	b92b      	cbnz	r3, 80106bc <quorem+0x96>
 80106b0:	9b01      	ldr	r3, [sp, #4]
 80106b2:	3b04      	subs	r3, #4
 80106b4:	429d      	cmp	r5, r3
 80106b6:	461a      	mov	r2, r3
 80106b8:	d32f      	bcc.n	801071a <quorem+0xf4>
 80106ba:	613c      	str	r4, [r7, #16]
 80106bc:	4638      	mov	r0, r7
 80106be:	f001 f97d 	bl	80119bc <__mcmp>
 80106c2:	2800      	cmp	r0, #0
 80106c4:	db25      	blt.n	8010712 <quorem+0xec>
 80106c6:	4629      	mov	r1, r5
 80106c8:	2000      	movs	r0, #0
 80106ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80106ce:	f8d1 c000 	ldr.w	ip, [r1]
 80106d2:	fa1f fe82 	uxth.w	lr, r2
 80106d6:	fa1f f38c 	uxth.w	r3, ip
 80106da:	eba3 030e 	sub.w	r3, r3, lr
 80106de:	4403      	add	r3, r0
 80106e0:	0c12      	lsrs	r2, r2, #16
 80106e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80106e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80106ea:	b29b      	uxth	r3, r3
 80106ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106f0:	45c1      	cmp	r9, r8
 80106f2:	f841 3b04 	str.w	r3, [r1], #4
 80106f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80106fa:	d2e6      	bcs.n	80106ca <quorem+0xa4>
 80106fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010700:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010704:	b922      	cbnz	r2, 8010710 <quorem+0xea>
 8010706:	3b04      	subs	r3, #4
 8010708:	429d      	cmp	r5, r3
 801070a:	461a      	mov	r2, r3
 801070c:	d30b      	bcc.n	8010726 <quorem+0x100>
 801070e:	613c      	str	r4, [r7, #16]
 8010710:	3601      	adds	r6, #1
 8010712:	4630      	mov	r0, r6
 8010714:	b003      	add	sp, #12
 8010716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801071a:	6812      	ldr	r2, [r2, #0]
 801071c:	3b04      	subs	r3, #4
 801071e:	2a00      	cmp	r2, #0
 8010720:	d1cb      	bne.n	80106ba <quorem+0x94>
 8010722:	3c01      	subs	r4, #1
 8010724:	e7c6      	b.n	80106b4 <quorem+0x8e>
 8010726:	6812      	ldr	r2, [r2, #0]
 8010728:	3b04      	subs	r3, #4
 801072a:	2a00      	cmp	r2, #0
 801072c:	d1ef      	bne.n	801070e <quorem+0xe8>
 801072e:	3c01      	subs	r4, #1
 8010730:	e7ea      	b.n	8010708 <quorem+0xe2>
 8010732:	2000      	movs	r0, #0
 8010734:	e7ee      	b.n	8010714 <quorem+0xee>
	...

08010738 <_dtoa_r>:
 8010738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801073c:	69c7      	ldr	r7, [r0, #28]
 801073e:	b097      	sub	sp, #92	@ 0x5c
 8010740:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010744:	ec55 4b10 	vmov	r4, r5, d0
 8010748:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801074a:	9107      	str	r1, [sp, #28]
 801074c:	4681      	mov	r9, r0
 801074e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010750:	9311      	str	r3, [sp, #68]	@ 0x44
 8010752:	b97f      	cbnz	r7, 8010774 <_dtoa_r+0x3c>
 8010754:	2010      	movs	r0, #16
 8010756:	f000 fe09 	bl	801136c <malloc>
 801075a:	4602      	mov	r2, r0
 801075c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010760:	b920      	cbnz	r0, 801076c <_dtoa_r+0x34>
 8010762:	4ba9      	ldr	r3, [pc, #676]	@ (8010a08 <_dtoa_r+0x2d0>)
 8010764:	21ef      	movs	r1, #239	@ 0xef
 8010766:	48a9      	ldr	r0, [pc, #676]	@ (8010a0c <_dtoa_r+0x2d4>)
 8010768:	f001 faec 	bl	8011d44 <__assert_func>
 801076c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010770:	6007      	str	r7, [r0, #0]
 8010772:	60c7      	str	r7, [r0, #12]
 8010774:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010778:	6819      	ldr	r1, [r3, #0]
 801077a:	b159      	cbz	r1, 8010794 <_dtoa_r+0x5c>
 801077c:	685a      	ldr	r2, [r3, #4]
 801077e:	604a      	str	r2, [r1, #4]
 8010780:	2301      	movs	r3, #1
 8010782:	4093      	lsls	r3, r2
 8010784:	608b      	str	r3, [r1, #8]
 8010786:	4648      	mov	r0, r9
 8010788:	f000 fee6 	bl	8011558 <_Bfree>
 801078c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010790:	2200      	movs	r2, #0
 8010792:	601a      	str	r2, [r3, #0]
 8010794:	1e2b      	subs	r3, r5, #0
 8010796:	bfb9      	ittee	lt
 8010798:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801079c:	9305      	strlt	r3, [sp, #20]
 801079e:	2300      	movge	r3, #0
 80107a0:	6033      	strge	r3, [r6, #0]
 80107a2:	9f05      	ldr	r7, [sp, #20]
 80107a4:	4b9a      	ldr	r3, [pc, #616]	@ (8010a10 <_dtoa_r+0x2d8>)
 80107a6:	bfbc      	itt	lt
 80107a8:	2201      	movlt	r2, #1
 80107aa:	6032      	strlt	r2, [r6, #0]
 80107ac:	43bb      	bics	r3, r7
 80107ae:	d112      	bne.n	80107d6 <_dtoa_r+0x9e>
 80107b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80107b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80107b6:	6013      	str	r3, [r2, #0]
 80107b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80107bc:	4323      	orrs	r3, r4
 80107be:	f000 855a 	beq.w	8011276 <_dtoa_r+0xb3e>
 80107c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80107c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010a24 <_dtoa_r+0x2ec>
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	f000 855c 	beq.w	8011286 <_dtoa_r+0xb4e>
 80107ce:	f10a 0303 	add.w	r3, sl, #3
 80107d2:	f000 bd56 	b.w	8011282 <_dtoa_r+0xb4a>
 80107d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80107da:	2200      	movs	r2, #0
 80107dc:	ec51 0b17 	vmov	r0, r1, d7
 80107e0:	2300      	movs	r3, #0
 80107e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80107e6:	f7f0 f97f 	bl	8000ae8 <__aeabi_dcmpeq>
 80107ea:	4680      	mov	r8, r0
 80107ec:	b158      	cbz	r0, 8010806 <_dtoa_r+0xce>
 80107ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80107f0:	2301      	movs	r3, #1
 80107f2:	6013      	str	r3, [r2, #0]
 80107f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80107f6:	b113      	cbz	r3, 80107fe <_dtoa_r+0xc6>
 80107f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80107fa:	4b86      	ldr	r3, [pc, #536]	@ (8010a14 <_dtoa_r+0x2dc>)
 80107fc:	6013      	str	r3, [r2, #0]
 80107fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010a28 <_dtoa_r+0x2f0>
 8010802:	f000 bd40 	b.w	8011286 <_dtoa_r+0xb4e>
 8010806:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801080a:	aa14      	add	r2, sp, #80	@ 0x50
 801080c:	a915      	add	r1, sp, #84	@ 0x54
 801080e:	4648      	mov	r0, r9
 8010810:	f001 f984 	bl	8011b1c <__d2b>
 8010814:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010818:	9002      	str	r0, [sp, #8]
 801081a:	2e00      	cmp	r6, #0
 801081c:	d078      	beq.n	8010910 <_dtoa_r+0x1d8>
 801081e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010820:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010828:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801082c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010830:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010834:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010838:	4619      	mov	r1, r3
 801083a:	2200      	movs	r2, #0
 801083c:	4b76      	ldr	r3, [pc, #472]	@ (8010a18 <_dtoa_r+0x2e0>)
 801083e:	f7ef fd33 	bl	80002a8 <__aeabi_dsub>
 8010842:	a36b      	add	r3, pc, #428	@ (adr r3, 80109f0 <_dtoa_r+0x2b8>)
 8010844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010848:	f7ef fee6 	bl	8000618 <__aeabi_dmul>
 801084c:	a36a      	add	r3, pc, #424	@ (adr r3, 80109f8 <_dtoa_r+0x2c0>)
 801084e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010852:	f7ef fd2b 	bl	80002ac <__adddf3>
 8010856:	4604      	mov	r4, r0
 8010858:	4630      	mov	r0, r6
 801085a:	460d      	mov	r5, r1
 801085c:	f7ef fe72 	bl	8000544 <__aeabi_i2d>
 8010860:	a367      	add	r3, pc, #412	@ (adr r3, 8010a00 <_dtoa_r+0x2c8>)
 8010862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010866:	f7ef fed7 	bl	8000618 <__aeabi_dmul>
 801086a:	4602      	mov	r2, r0
 801086c:	460b      	mov	r3, r1
 801086e:	4620      	mov	r0, r4
 8010870:	4629      	mov	r1, r5
 8010872:	f7ef fd1b 	bl	80002ac <__adddf3>
 8010876:	4604      	mov	r4, r0
 8010878:	460d      	mov	r5, r1
 801087a:	f7f0 f97d 	bl	8000b78 <__aeabi_d2iz>
 801087e:	2200      	movs	r2, #0
 8010880:	4607      	mov	r7, r0
 8010882:	2300      	movs	r3, #0
 8010884:	4620      	mov	r0, r4
 8010886:	4629      	mov	r1, r5
 8010888:	f7f0 f938 	bl	8000afc <__aeabi_dcmplt>
 801088c:	b140      	cbz	r0, 80108a0 <_dtoa_r+0x168>
 801088e:	4638      	mov	r0, r7
 8010890:	f7ef fe58 	bl	8000544 <__aeabi_i2d>
 8010894:	4622      	mov	r2, r4
 8010896:	462b      	mov	r3, r5
 8010898:	f7f0 f926 	bl	8000ae8 <__aeabi_dcmpeq>
 801089c:	b900      	cbnz	r0, 80108a0 <_dtoa_r+0x168>
 801089e:	3f01      	subs	r7, #1
 80108a0:	2f16      	cmp	r7, #22
 80108a2:	d852      	bhi.n	801094a <_dtoa_r+0x212>
 80108a4:	4b5d      	ldr	r3, [pc, #372]	@ (8010a1c <_dtoa_r+0x2e4>)
 80108a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80108aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80108b2:	f7f0 f923 	bl	8000afc <__aeabi_dcmplt>
 80108b6:	2800      	cmp	r0, #0
 80108b8:	d049      	beq.n	801094e <_dtoa_r+0x216>
 80108ba:	3f01      	subs	r7, #1
 80108bc:	2300      	movs	r3, #0
 80108be:	9310      	str	r3, [sp, #64]	@ 0x40
 80108c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80108c2:	1b9b      	subs	r3, r3, r6
 80108c4:	1e5a      	subs	r2, r3, #1
 80108c6:	bf45      	ittet	mi
 80108c8:	f1c3 0301 	rsbmi	r3, r3, #1
 80108cc:	9300      	strmi	r3, [sp, #0]
 80108ce:	2300      	movpl	r3, #0
 80108d0:	2300      	movmi	r3, #0
 80108d2:	9206      	str	r2, [sp, #24]
 80108d4:	bf54      	ite	pl
 80108d6:	9300      	strpl	r3, [sp, #0]
 80108d8:	9306      	strmi	r3, [sp, #24]
 80108da:	2f00      	cmp	r7, #0
 80108dc:	db39      	blt.n	8010952 <_dtoa_r+0x21a>
 80108de:	9b06      	ldr	r3, [sp, #24]
 80108e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80108e2:	443b      	add	r3, r7
 80108e4:	9306      	str	r3, [sp, #24]
 80108e6:	2300      	movs	r3, #0
 80108e8:	9308      	str	r3, [sp, #32]
 80108ea:	9b07      	ldr	r3, [sp, #28]
 80108ec:	2b09      	cmp	r3, #9
 80108ee:	d863      	bhi.n	80109b8 <_dtoa_r+0x280>
 80108f0:	2b05      	cmp	r3, #5
 80108f2:	bfc4      	itt	gt
 80108f4:	3b04      	subgt	r3, #4
 80108f6:	9307      	strgt	r3, [sp, #28]
 80108f8:	9b07      	ldr	r3, [sp, #28]
 80108fa:	f1a3 0302 	sub.w	r3, r3, #2
 80108fe:	bfcc      	ite	gt
 8010900:	2400      	movgt	r4, #0
 8010902:	2401      	movle	r4, #1
 8010904:	2b03      	cmp	r3, #3
 8010906:	d863      	bhi.n	80109d0 <_dtoa_r+0x298>
 8010908:	e8df f003 	tbb	[pc, r3]
 801090c:	2b375452 	.word	0x2b375452
 8010910:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010914:	441e      	add	r6, r3
 8010916:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801091a:	2b20      	cmp	r3, #32
 801091c:	bfc1      	itttt	gt
 801091e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010922:	409f      	lslgt	r7, r3
 8010924:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010928:	fa24 f303 	lsrgt.w	r3, r4, r3
 801092c:	bfd6      	itet	le
 801092e:	f1c3 0320 	rsble	r3, r3, #32
 8010932:	ea47 0003 	orrgt.w	r0, r7, r3
 8010936:	fa04 f003 	lslle.w	r0, r4, r3
 801093a:	f7ef fdf3 	bl	8000524 <__aeabi_ui2d>
 801093e:	2201      	movs	r2, #1
 8010940:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010944:	3e01      	subs	r6, #1
 8010946:	9212      	str	r2, [sp, #72]	@ 0x48
 8010948:	e776      	b.n	8010838 <_dtoa_r+0x100>
 801094a:	2301      	movs	r3, #1
 801094c:	e7b7      	b.n	80108be <_dtoa_r+0x186>
 801094e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010950:	e7b6      	b.n	80108c0 <_dtoa_r+0x188>
 8010952:	9b00      	ldr	r3, [sp, #0]
 8010954:	1bdb      	subs	r3, r3, r7
 8010956:	9300      	str	r3, [sp, #0]
 8010958:	427b      	negs	r3, r7
 801095a:	9308      	str	r3, [sp, #32]
 801095c:	2300      	movs	r3, #0
 801095e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010960:	e7c3      	b.n	80108ea <_dtoa_r+0x1b2>
 8010962:	2301      	movs	r3, #1
 8010964:	9309      	str	r3, [sp, #36]	@ 0x24
 8010966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010968:	eb07 0b03 	add.w	fp, r7, r3
 801096c:	f10b 0301 	add.w	r3, fp, #1
 8010970:	2b01      	cmp	r3, #1
 8010972:	9303      	str	r3, [sp, #12]
 8010974:	bfb8      	it	lt
 8010976:	2301      	movlt	r3, #1
 8010978:	e006      	b.n	8010988 <_dtoa_r+0x250>
 801097a:	2301      	movs	r3, #1
 801097c:	9309      	str	r3, [sp, #36]	@ 0x24
 801097e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010980:	2b00      	cmp	r3, #0
 8010982:	dd28      	ble.n	80109d6 <_dtoa_r+0x29e>
 8010984:	469b      	mov	fp, r3
 8010986:	9303      	str	r3, [sp, #12]
 8010988:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801098c:	2100      	movs	r1, #0
 801098e:	2204      	movs	r2, #4
 8010990:	f102 0514 	add.w	r5, r2, #20
 8010994:	429d      	cmp	r5, r3
 8010996:	d926      	bls.n	80109e6 <_dtoa_r+0x2ae>
 8010998:	6041      	str	r1, [r0, #4]
 801099a:	4648      	mov	r0, r9
 801099c:	f000 fd9c 	bl	80114d8 <_Balloc>
 80109a0:	4682      	mov	sl, r0
 80109a2:	2800      	cmp	r0, #0
 80109a4:	d142      	bne.n	8010a2c <_dtoa_r+0x2f4>
 80109a6:	4b1e      	ldr	r3, [pc, #120]	@ (8010a20 <_dtoa_r+0x2e8>)
 80109a8:	4602      	mov	r2, r0
 80109aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80109ae:	e6da      	b.n	8010766 <_dtoa_r+0x2e>
 80109b0:	2300      	movs	r3, #0
 80109b2:	e7e3      	b.n	801097c <_dtoa_r+0x244>
 80109b4:	2300      	movs	r3, #0
 80109b6:	e7d5      	b.n	8010964 <_dtoa_r+0x22c>
 80109b8:	2401      	movs	r4, #1
 80109ba:	2300      	movs	r3, #0
 80109bc:	9307      	str	r3, [sp, #28]
 80109be:	9409      	str	r4, [sp, #36]	@ 0x24
 80109c0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80109c4:	2200      	movs	r2, #0
 80109c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80109ca:	2312      	movs	r3, #18
 80109cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80109ce:	e7db      	b.n	8010988 <_dtoa_r+0x250>
 80109d0:	2301      	movs	r3, #1
 80109d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80109d4:	e7f4      	b.n	80109c0 <_dtoa_r+0x288>
 80109d6:	f04f 0b01 	mov.w	fp, #1
 80109da:	f8cd b00c 	str.w	fp, [sp, #12]
 80109de:	465b      	mov	r3, fp
 80109e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80109e4:	e7d0      	b.n	8010988 <_dtoa_r+0x250>
 80109e6:	3101      	adds	r1, #1
 80109e8:	0052      	lsls	r2, r2, #1
 80109ea:	e7d1      	b.n	8010990 <_dtoa_r+0x258>
 80109ec:	f3af 8000 	nop.w
 80109f0:	636f4361 	.word	0x636f4361
 80109f4:	3fd287a7 	.word	0x3fd287a7
 80109f8:	8b60c8b3 	.word	0x8b60c8b3
 80109fc:	3fc68a28 	.word	0x3fc68a28
 8010a00:	509f79fb 	.word	0x509f79fb
 8010a04:	3fd34413 	.word	0x3fd34413
 8010a08:	0801258d 	.word	0x0801258d
 8010a0c:	080125a4 	.word	0x080125a4
 8010a10:	7ff00000 	.word	0x7ff00000
 8010a14:	0801255d 	.word	0x0801255d
 8010a18:	3ff80000 	.word	0x3ff80000
 8010a1c:	080126f8 	.word	0x080126f8
 8010a20:	080125fc 	.word	0x080125fc
 8010a24:	08012589 	.word	0x08012589
 8010a28:	0801255c 	.word	0x0801255c
 8010a2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010a30:	6018      	str	r0, [r3, #0]
 8010a32:	9b03      	ldr	r3, [sp, #12]
 8010a34:	2b0e      	cmp	r3, #14
 8010a36:	f200 80a1 	bhi.w	8010b7c <_dtoa_r+0x444>
 8010a3a:	2c00      	cmp	r4, #0
 8010a3c:	f000 809e 	beq.w	8010b7c <_dtoa_r+0x444>
 8010a40:	2f00      	cmp	r7, #0
 8010a42:	dd33      	ble.n	8010aac <_dtoa_r+0x374>
 8010a44:	4b9c      	ldr	r3, [pc, #624]	@ (8010cb8 <_dtoa_r+0x580>)
 8010a46:	f007 020f 	and.w	r2, r7, #15
 8010a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a4e:	ed93 7b00 	vldr	d7, [r3]
 8010a52:	05f8      	lsls	r0, r7, #23
 8010a54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010a58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010a5c:	d516      	bpl.n	8010a8c <_dtoa_r+0x354>
 8010a5e:	4b97      	ldr	r3, [pc, #604]	@ (8010cbc <_dtoa_r+0x584>)
 8010a60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010a64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a68:	f7ef ff00 	bl	800086c <__aeabi_ddiv>
 8010a6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a70:	f004 040f 	and.w	r4, r4, #15
 8010a74:	2603      	movs	r6, #3
 8010a76:	4d91      	ldr	r5, [pc, #580]	@ (8010cbc <_dtoa_r+0x584>)
 8010a78:	b954      	cbnz	r4, 8010a90 <_dtoa_r+0x358>
 8010a7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010a7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a82:	f7ef fef3 	bl	800086c <__aeabi_ddiv>
 8010a86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a8a:	e028      	b.n	8010ade <_dtoa_r+0x3a6>
 8010a8c:	2602      	movs	r6, #2
 8010a8e:	e7f2      	b.n	8010a76 <_dtoa_r+0x33e>
 8010a90:	07e1      	lsls	r1, r4, #31
 8010a92:	d508      	bpl.n	8010aa6 <_dtoa_r+0x36e>
 8010a94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010a98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a9c:	f7ef fdbc 	bl	8000618 <__aeabi_dmul>
 8010aa0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010aa4:	3601      	adds	r6, #1
 8010aa6:	1064      	asrs	r4, r4, #1
 8010aa8:	3508      	adds	r5, #8
 8010aaa:	e7e5      	b.n	8010a78 <_dtoa_r+0x340>
 8010aac:	f000 80af 	beq.w	8010c0e <_dtoa_r+0x4d6>
 8010ab0:	427c      	negs	r4, r7
 8010ab2:	4b81      	ldr	r3, [pc, #516]	@ (8010cb8 <_dtoa_r+0x580>)
 8010ab4:	4d81      	ldr	r5, [pc, #516]	@ (8010cbc <_dtoa_r+0x584>)
 8010ab6:	f004 020f 	and.w	r2, r4, #15
 8010aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010ac6:	f7ef fda7 	bl	8000618 <__aeabi_dmul>
 8010aca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ace:	1124      	asrs	r4, r4, #4
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	2602      	movs	r6, #2
 8010ad4:	2c00      	cmp	r4, #0
 8010ad6:	f040 808f 	bne.w	8010bf8 <_dtoa_r+0x4c0>
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d1d3      	bne.n	8010a86 <_dtoa_r+0x34e>
 8010ade:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010ae0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	f000 8094 	beq.w	8010c12 <_dtoa_r+0x4da>
 8010aea:	4b75      	ldr	r3, [pc, #468]	@ (8010cc0 <_dtoa_r+0x588>)
 8010aec:	2200      	movs	r2, #0
 8010aee:	4620      	mov	r0, r4
 8010af0:	4629      	mov	r1, r5
 8010af2:	f7f0 f803 	bl	8000afc <__aeabi_dcmplt>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	f000 808b 	beq.w	8010c12 <_dtoa_r+0x4da>
 8010afc:	9b03      	ldr	r3, [sp, #12]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	f000 8087 	beq.w	8010c12 <_dtoa_r+0x4da>
 8010b04:	f1bb 0f00 	cmp.w	fp, #0
 8010b08:	dd34      	ble.n	8010b74 <_dtoa_r+0x43c>
 8010b0a:	4620      	mov	r0, r4
 8010b0c:	4b6d      	ldr	r3, [pc, #436]	@ (8010cc4 <_dtoa_r+0x58c>)
 8010b0e:	2200      	movs	r2, #0
 8010b10:	4629      	mov	r1, r5
 8010b12:	f7ef fd81 	bl	8000618 <__aeabi_dmul>
 8010b16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b1a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8010b1e:	3601      	adds	r6, #1
 8010b20:	465c      	mov	r4, fp
 8010b22:	4630      	mov	r0, r6
 8010b24:	f7ef fd0e 	bl	8000544 <__aeabi_i2d>
 8010b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b2c:	f7ef fd74 	bl	8000618 <__aeabi_dmul>
 8010b30:	4b65      	ldr	r3, [pc, #404]	@ (8010cc8 <_dtoa_r+0x590>)
 8010b32:	2200      	movs	r2, #0
 8010b34:	f7ef fbba 	bl	80002ac <__adddf3>
 8010b38:	4605      	mov	r5, r0
 8010b3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010b3e:	2c00      	cmp	r4, #0
 8010b40:	d16a      	bne.n	8010c18 <_dtoa_r+0x4e0>
 8010b42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b46:	4b61      	ldr	r3, [pc, #388]	@ (8010ccc <_dtoa_r+0x594>)
 8010b48:	2200      	movs	r2, #0
 8010b4a:	f7ef fbad 	bl	80002a8 <__aeabi_dsub>
 8010b4e:	4602      	mov	r2, r0
 8010b50:	460b      	mov	r3, r1
 8010b52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010b56:	462a      	mov	r2, r5
 8010b58:	4633      	mov	r3, r6
 8010b5a:	f7ef ffed 	bl	8000b38 <__aeabi_dcmpgt>
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	f040 8298 	bne.w	8011094 <_dtoa_r+0x95c>
 8010b64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b68:	462a      	mov	r2, r5
 8010b6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010b6e:	f7ef ffc5 	bl	8000afc <__aeabi_dcmplt>
 8010b72:	bb38      	cbnz	r0, 8010bc4 <_dtoa_r+0x48c>
 8010b74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010b78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010b7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	f2c0 8157 	blt.w	8010e32 <_dtoa_r+0x6fa>
 8010b84:	2f0e      	cmp	r7, #14
 8010b86:	f300 8154 	bgt.w	8010e32 <_dtoa_r+0x6fa>
 8010b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8010cb8 <_dtoa_r+0x580>)
 8010b8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010b90:	ed93 7b00 	vldr	d7, [r3]
 8010b94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	ed8d 7b00 	vstr	d7, [sp]
 8010b9c:	f280 80e5 	bge.w	8010d6a <_dtoa_r+0x632>
 8010ba0:	9b03      	ldr	r3, [sp, #12]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	f300 80e1 	bgt.w	8010d6a <_dtoa_r+0x632>
 8010ba8:	d10c      	bne.n	8010bc4 <_dtoa_r+0x48c>
 8010baa:	4b48      	ldr	r3, [pc, #288]	@ (8010ccc <_dtoa_r+0x594>)
 8010bac:	2200      	movs	r2, #0
 8010bae:	ec51 0b17 	vmov	r0, r1, d7
 8010bb2:	f7ef fd31 	bl	8000618 <__aeabi_dmul>
 8010bb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bba:	f7ef ffb3 	bl	8000b24 <__aeabi_dcmpge>
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	f000 8266 	beq.w	8011090 <_dtoa_r+0x958>
 8010bc4:	2400      	movs	r4, #0
 8010bc6:	4625      	mov	r5, r4
 8010bc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010bca:	4656      	mov	r6, sl
 8010bcc:	ea6f 0803 	mvn.w	r8, r3
 8010bd0:	2700      	movs	r7, #0
 8010bd2:	4621      	mov	r1, r4
 8010bd4:	4648      	mov	r0, r9
 8010bd6:	f000 fcbf 	bl	8011558 <_Bfree>
 8010bda:	2d00      	cmp	r5, #0
 8010bdc:	f000 80bd 	beq.w	8010d5a <_dtoa_r+0x622>
 8010be0:	b12f      	cbz	r7, 8010bee <_dtoa_r+0x4b6>
 8010be2:	42af      	cmp	r7, r5
 8010be4:	d003      	beq.n	8010bee <_dtoa_r+0x4b6>
 8010be6:	4639      	mov	r1, r7
 8010be8:	4648      	mov	r0, r9
 8010bea:	f000 fcb5 	bl	8011558 <_Bfree>
 8010bee:	4629      	mov	r1, r5
 8010bf0:	4648      	mov	r0, r9
 8010bf2:	f000 fcb1 	bl	8011558 <_Bfree>
 8010bf6:	e0b0      	b.n	8010d5a <_dtoa_r+0x622>
 8010bf8:	07e2      	lsls	r2, r4, #31
 8010bfa:	d505      	bpl.n	8010c08 <_dtoa_r+0x4d0>
 8010bfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010c00:	f7ef fd0a 	bl	8000618 <__aeabi_dmul>
 8010c04:	3601      	adds	r6, #1
 8010c06:	2301      	movs	r3, #1
 8010c08:	1064      	asrs	r4, r4, #1
 8010c0a:	3508      	adds	r5, #8
 8010c0c:	e762      	b.n	8010ad4 <_dtoa_r+0x39c>
 8010c0e:	2602      	movs	r6, #2
 8010c10:	e765      	b.n	8010ade <_dtoa_r+0x3a6>
 8010c12:	9c03      	ldr	r4, [sp, #12]
 8010c14:	46b8      	mov	r8, r7
 8010c16:	e784      	b.n	8010b22 <_dtoa_r+0x3ea>
 8010c18:	4b27      	ldr	r3, [pc, #156]	@ (8010cb8 <_dtoa_r+0x580>)
 8010c1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010c1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010c20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010c24:	4454      	add	r4, sl
 8010c26:	2900      	cmp	r1, #0
 8010c28:	d054      	beq.n	8010cd4 <_dtoa_r+0x59c>
 8010c2a:	4929      	ldr	r1, [pc, #164]	@ (8010cd0 <_dtoa_r+0x598>)
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	f7ef fe1d 	bl	800086c <__aeabi_ddiv>
 8010c32:	4633      	mov	r3, r6
 8010c34:	462a      	mov	r2, r5
 8010c36:	f7ef fb37 	bl	80002a8 <__aeabi_dsub>
 8010c3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010c3e:	4656      	mov	r6, sl
 8010c40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c44:	f7ef ff98 	bl	8000b78 <__aeabi_d2iz>
 8010c48:	4605      	mov	r5, r0
 8010c4a:	f7ef fc7b 	bl	8000544 <__aeabi_i2d>
 8010c4e:	4602      	mov	r2, r0
 8010c50:	460b      	mov	r3, r1
 8010c52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c56:	f7ef fb27 	bl	80002a8 <__aeabi_dsub>
 8010c5a:	3530      	adds	r5, #48	@ 0x30
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	460b      	mov	r3, r1
 8010c60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c64:	f806 5b01 	strb.w	r5, [r6], #1
 8010c68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010c6c:	f7ef ff46 	bl	8000afc <__aeabi_dcmplt>
 8010c70:	2800      	cmp	r0, #0
 8010c72:	d172      	bne.n	8010d5a <_dtoa_r+0x622>
 8010c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c78:	4911      	ldr	r1, [pc, #68]	@ (8010cc0 <_dtoa_r+0x588>)
 8010c7a:	2000      	movs	r0, #0
 8010c7c:	f7ef fb14 	bl	80002a8 <__aeabi_dsub>
 8010c80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010c84:	f7ef ff3a 	bl	8000afc <__aeabi_dcmplt>
 8010c88:	2800      	cmp	r0, #0
 8010c8a:	f040 80b4 	bne.w	8010df6 <_dtoa_r+0x6be>
 8010c8e:	42a6      	cmp	r6, r4
 8010c90:	f43f af70 	beq.w	8010b74 <_dtoa_r+0x43c>
 8010c94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010c98:	4b0a      	ldr	r3, [pc, #40]	@ (8010cc4 <_dtoa_r+0x58c>)
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	f7ef fcbc 	bl	8000618 <__aeabi_dmul>
 8010ca0:	4b08      	ldr	r3, [pc, #32]	@ (8010cc4 <_dtoa_r+0x58c>)
 8010ca2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cac:	f7ef fcb4 	bl	8000618 <__aeabi_dmul>
 8010cb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010cb4:	e7c4      	b.n	8010c40 <_dtoa_r+0x508>
 8010cb6:	bf00      	nop
 8010cb8:	080126f8 	.word	0x080126f8
 8010cbc:	080126d0 	.word	0x080126d0
 8010cc0:	3ff00000 	.word	0x3ff00000
 8010cc4:	40240000 	.word	0x40240000
 8010cc8:	401c0000 	.word	0x401c0000
 8010ccc:	40140000 	.word	0x40140000
 8010cd0:	3fe00000 	.word	0x3fe00000
 8010cd4:	4631      	mov	r1, r6
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	f7ef fc9e 	bl	8000618 <__aeabi_dmul>
 8010cdc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010ce0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010ce2:	4656      	mov	r6, sl
 8010ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ce8:	f7ef ff46 	bl	8000b78 <__aeabi_d2iz>
 8010cec:	4605      	mov	r5, r0
 8010cee:	f7ef fc29 	bl	8000544 <__aeabi_i2d>
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cfa:	f7ef fad5 	bl	80002a8 <__aeabi_dsub>
 8010cfe:	3530      	adds	r5, #48	@ 0x30
 8010d00:	f806 5b01 	strb.w	r5, [r6], #1
 8010d04:	4602      	mov	r2, r0
 8010d06:	460b      	mov	r3, r1
 8010d08:	42a6      	cmp	r6, r4
 8010d0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010d0e:	f04f 0200 	mov.w	r2, #0
 8010d12:	d124      	bne.n	8010d5e <_dtoa_r+0x626>
 8010d14:	4baf      	ldr	r3, [pc, #700]	@ (8010fd4 <_dtoa_r+0x89c>)
 8010d16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010d1a:	f7ef fac7 	bl	80002ac <__adddf3>
 8010d1e:	4602      	mov	r2, r0
 8010d20:	460b      	mov	r3, r1
 8010d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d26:	f7ef ff07 	bl	8000b38 <__aeabi_dcmpgt>
 8010d2a:	2800      	cmp	r0, #0
 8010d2c:	d163      	bne.n	8010df6 <_dtoa_r+0x6be>
 8010d2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010d32:	49a8      	ldr	r1, [pc, #672]	@ (8010fd4 <_dtoa_r+0x89c>)
 8010d34:	2000      	movs	r0, #0
 8010d36:	f7ef fab7 	bl	80002a8 <__aeabi_dsub>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d42:	f7ef fedb 	bl	8000afc <__aeabi_dcmplt>
 8010d46:	2800      	cmp	r0, #0
 8010d48:	f43f af14 	beq.w	8010b74 <_dtoa_r+0x43c>
 8010d4c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010d4e:	1e73      	subs	r3, r6, #1
 8010d50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010d52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d56:	2b30      	cmp	r3, #48	@ 0x30
 8010d58:	d0f8      	beq.n	8010d4c <_dtoa_r+0x614>
 8010d5a:	4647      	mov	r7, r8
 8010d5c:	e03b      	b.n	8010dd6 <_dtoa_r+0x69e>
 8010d5e:	4b9e      	ldr	r3, [pc, #632]	@ (8010fd8 <_dtoa_r+0x8a0>)
 8010d60:	f7ef fc5a 	bl	8000618 <__aeabi_dmul>
 8010d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d68:	e7bc      	b.n	8010ce4 <_dtoa_r+0x5ac>
 8010d6a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010d6e:	4656      	mov	r6, sl
 8010d70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d74:	4620      	mov	r0, r4
 8010d76:	4629      	mov	r1, r5
 8010d78:	f7ef fd78 	bl	800086c <__aeabi_ddiv>
 8010d7c:	f7ef fefc 	bl	8000b78 <__aeabi_d2iz>
 8010d80:	4680      	mov	r8, r0
 8010d82:	f7ef fbdf 	bl	8000544 <__aeabi_i2d>
 8010d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d8a:	f7ef fc45 	bl	8000618 <__aeabi_dmul>
 8010d8e:	4602      	mov	r2, r0
 8010d90:	460b      	mov	r3, r1
 8010d92:	4620      	mov	r0, r4
 8010d94:	4629      	mov	r1, r5
 8010d96:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010d9a:	f7ef fa85 	bl	80002a8 <__aeabi_dsub>
 8010d9e:	f806 4b01 	strb.w	r4, [r6], #1
 8010da2:	9d03      	ldr	r5, [sp, #12]
 8010da4:	eba6 040a 	sub.w	r4, r6, sl
 8010da8:	42a5      	cmp	r5, r4
 8010daa:	4602      	mov	r2, r0
 8010dac:	460b      	mov	r3, r1
 8010dae:	d133      	bne.n	8010e18 <_dtoa_r+0x6e0>
 8010db0:	f7ef fa7c 	bl	80002ac <__adddf3>
 8010db4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010db8:	4604      	mov	r4, r0
 8010dba:	460d      	mov	r5, r1
 8010dbc:	f7ef febc 	bl	8000b38 <__aeabi_dcmpgt>
 8010dc0:	b9c0      	cbnz	r0, 8010df4 <_dtoa_r+0x6bc>
 8010dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	4629      	mov	r1, r5
 8010dca:	f7ef fe8d 	bl	8000ae8 <__aeabi_dcmpeq>
 8010dce:	b110      	cbz	r0, 8010dd6 <_dtoa_r+0x69e>
 8010dd0:	f018 0f01 	tst.w	r8, #1
 8010dd4:	d10e      	bne.n	8010df4 <_dtoa_r+0x6bc>
 8010dd6:	9902      	ldr	r1, [sp, #8]
 8010dd8:	4648      	mov	r0, r9
 8010dda:	f000 fbbd 	bl	8011558 <_Bfree>
 8010dde:	2300      	movs	r3, #0
 8010de0:	7033      	strb	r3, [r6, #0]
 8010de2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010de4:	3701      	adds	r7, #1
 8010de6:	601f      	str	r7, [r3, #0]
 8010de8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	f000 824b 	beq.w	8011286 <_dtoa_r+0xb4e>
 8010df0:	601e      	str	r6, [r3, #0]
 8010df2:	e248      	b.n	8011286 <_dtoa_r+0xb4e>
 8010df4:	46b8      	mov	r8, r7
 8010df6:	4633      	mov	r3, r6
 8010df8:	461e      	mov	r6, r3
 8010dfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dfe:	2a39      	cmp	r2, #57	@ 0x39
 8010e00:	d106      	bne.n	8010e10 <_dtoa_r+0x6d8>
 8010e02:	459a      	cmp	sl, r3
 8010e04:	d1f8      	bne.n	8010df8 <_dtoa_r+0x6c0>
 8010e06:	2230      	movs	r2, #48	@ 0x30
 8010e08:	f108 0801 	add.w	r8, r8, #1
 8010e0c:	f88a 2000 	strb.w	r2, [sl]
 8010e10:	781a      	ldrb	r2, [r3, #0]
 8010e12:	3201      	adds	r2, #1
 8010e14:	701a      	strb	r2, [r3, #0]
 8010e16:	e7a0      	b.n	8010d5a <_dtoa_r+0x622>
 8010e18:	4b6f      	ldr	r3, [pc, #444]	@ (8010fd8 <_dtoa_r+0x8a0>)
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f7ef fbfc 	bl	8000618 <__aeabi_dmul>
 8010e20:	2200      	movs	r2, #0
 8010e22:	2300      	movs	r3, #0
 8010e24:	4604      	mov	r4, r0
 8010e26:	460d      	mov	r5, r1
 8010e28:	f7ef fe5e 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	d09f      	beq.n	8010d70 <_dtoa_r+0x638>
 8010e30:	e7d1      	b.n	8010dd6 <_dtoa_r+0x69e>
 8010e32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e34:	2a00      	cmp	r2, #0
 8010e36:	f000 80ea 	beq.w	801100e <_dtoa_r+0x8d6>
 8010e3a:	9a07      	ldr	r2, [sp, #28]
 8010e3c:	2a01      	cmp	r2, #1
 8010e3e:	f300 80cd 	bgt.w	8010fdc <_dtoa_r+0x8a4>
 8010e42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010e44:	2a00      	cmp	r2, #0
 8010e46:	f000 80c1 	beq.w	8010fcc <_dtoa_r+0x894>
 8010e4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010e4e:	9c08      	ldr	r4, [sp, #32]
 8010e50:	9e00      	ldr	r6, [sp, #0]
 8010e52:	9a00      	ldr	r2, [sp, #0]
 8010e54:	441a      	add	r2, r3
 8010e56:	9200      	str	r2, [sp, #0]
 8010e58:	9a06      	ldr	r2, [sp, #24]
 8010e5a:	2101      	movs	r1, #1
 8010e5c:	441a      	add	r2, r3
 8010e5e:	4648      	mov	r0, r9
 8010e60:	9206      	str	r2, [sp, #24]
 8010e62:	f000 fc2d 	bl	80116c0 <__i2b>
 8010e66:	4605      	mov	r5, r0
 8010e68:	b166      	cbz	r6, 8010e84 <_dtoa_r+0x74c>
 8010e6a:	9b06      	ldr	r3, [sp, #24]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	dd09      	ble.n	8010e84 <_dtoa_r+0x74c>
 8010e70:	42b3      	cmp	r3, r6
 8010e72:	9a00      	ldr	r2, [sp, #0]
 8010e74:	bfa8      	it	ge
 8010e76:	4633      	movge	r3, r6
 8010e78:	1ad2      	subs	r2, r2, r3
 8010e7a:	9200      	str	r2, [sp, #0]
 8010e7c:	9a06      	ldr	r2, [sp, #24]
 8010e7e:	1af6      	subs	r6, r6, r3
 8010e80:	1ad3      	subs	r3, r2, r3
 8010e82:	9306      	str	r3, [sp, #24]
 8010e84:	9b08      	ldr	r3, [sp, #32]
 8010e86:	b30b      	cbz	r3, 8010ecc <_dtoa_r+0x794>
 8010e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f000 80c6 	beq.w	801101c <_dtoa_r+0x8e4>
 8010e90:	2c00      	cmp	r4, #0
 8010e92:	f000 80c0 	beq.w	8011016 <_dtoa_r+0x8de>
 8010e96:	4629      	mov	r1, r5
 8010e98:	4622      	mov	r2, r4
 8010e9a:	4648      	mov	r0, r9
 8010e9c:	f000 fcc8 	bl	8011830 <__pow5mult>
 8010ea0:	9a02      	ldr	r2, [sp, #8]
 8010ea2:	4601      	mov	r1, r0
 8010ea4:	4605      	mov	r5, r0
 8010ea6:	4648      	mov	r0, r9
 8010ea8:	f000 fc20 	bl	80116ec <__multiply>
 8010eac:	9902      	ldr	r1, [sp, #8]
 8010eae:	4680      	mov	r8, r0
 8010eb0:	4648      	mov	r0, r9
 8010eb2:	f000 fb51 	bl	8011558 <_Bfree>
 8010eb6:	9b08      	ldr	r3, [sp, #32]
 8010eb8:	1b1b      	subs	r3, r3, r4
 8010eba:	9308      	str	r3, [sp, #32]
 8010ebc:	f000 80b1 	beq.w	8011022 <_dtoa_r+0x8ea>
 8010ec0:	9a08      	ldr	r2, [sp, #32]
 8010ec2:	4641      	mov	r1, r8
 8010ec4:	4648      	mov	r0, r9
 8010ec6:	f000 fcb3 	bl	8011830 <__pow5mult>
 8010eca:	9002      	str	r0, [sp, #8]
 8010ecc:	2101      	movs	r1, #1
 8010ece:	4648      	mov	r0, r9
 8010ed0:	f000 fbf6 	bl	80116c0 <__i2b>
 8010ed4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ed6:	4604      	mov	r4, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	f000 81d8 	beq.w	801128e <_dtoa_r+0xb56>
 8010ede:	461a      	mov	r2, r3
 8010ee0:	4601      	mov	r1, r0
 8010ee2:	4648      	mov	r0, r9
 8010ee4:	f000 fca4 	bl	8011830 <__pow5mult>
 8010ee8:	9b07      	ldr	r3, [sp, #28]
 8010eea:	2b01      	cmp	r3, #1
 8010eec:	4604      	mov	r4, r0
 8010eee:	f300 809f 	bgt.w	8011030 <_dtoa_r+0x8f8>
 8010ef2:	9b04      	ldr	r3, [sp, #16]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	f040 8097 	bne.w	8011028 <_dtoa_r+0x8f0>
 8010efa:	9b05      	ldr	r3, [sp, #20]
 8010efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f040 8093 	bne.w	801102c <_dtoa_r+0x8f4>
 8010f06:	9b05      	ldr	r3, [sp, #20]
 8010f08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010f0c:	0d1b      	lsrs	r3, r3, #20
 8010f0e:	051b      	lsls	r3, r3, #20
 8010f10:	b133      	cbz	r3, 8010f20 <_dtoa_r+0x7e8>
 8010f12:	9b00      	ldr	r3, [sp, #0]
 8010f14:	3301      	adds	r3, #1
 8010f16:	9300      	str	r3, [sp, #0]
 8010f18:	9b06      	ldr	r3, [sp, #24]
 8010f1a:	3301      	adds	r3, #1
 8010f1c:	9306      	str	r3, [sp, #24]
 8010f1e:	2301      	movs	r3, #1
 8010f20:	9308      	str	r3, [sp, #32]
 8010f22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	f000 81b8 	beq.w	801129a <_dtoa_r+0xb62>
 8010f2a:	6923      	ldr	r3, [r4, #16]
 8010f2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f30:	6918      	ldr	r0, [r3, #16]
 8010f32:	f000 fb79 	bl	8011628 <__hi0bits>
 8010f36:	f1c0 0020 	rsb	r0, r0, #32
 8010f3a:	9b06      	ldr	r3, [sp, #24]
 8010f3c:	4418      	add	r0, r3
 8010f3e:	f010 001f 	ands.w	r0, r0, #31
 8010f42:	f000 8082 	beq.w	801104a <_dtoa_r+0x912>
 8010f46:	f1c0 0320 	rsb	r3, r0, #32
 8010f4a:	2b04      	cmp	r3, #4
 8010f4c:	dd73      	ble.n	8011036 <_dtoa_r+0x8fe>
 8010f4e:	9b00      	ldr	r3, [sp, #0]
 8010f50:	f1c0 001c 	rsb	r0, r0, #28
 8010f54:	4403      	add	r3, r0
 8010f56:	9300      	str	r3, [sp, #0]
 8010f58:	9b06      	ldr	r3, [sp, #24]
 8010f5a:	4403      	add	r3, r0
 8010f5c:	4406      	add	r6, r0
 8010f5e:	9306      	str	r3, [sp, #24]
 8010f60:	9b00      	ldr	r3, [sp, #0]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	dd05      	ble.n	8010f72 <_dtoa_r+0x83a>
 8010f66:	9902      	ldr	r1, [sp, #8]
 8010f68:	461a      	mov	r2, r3
 8010f6a:	4648      	mov	r0, r9
 8010f6c:	f000 fcba 	bl	80118e4 <__lshift>
 8010f70:	9002      	str	r0, [sp, #8]
 8010f72:	9b06      	ldr	r3, [sp, #24]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	dd05      	ble.n	8010f84 <_dtoa_r+0x84c>
 8010f78:	4621      	mov	r1, r4
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	4648      	mov	r0, r9
 8010f7e:	f000 fcb1 	bl	80118e4 <__lshift>
 8010f82:	4604      	mov	r4, r0
 8010f84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d061      	beq.n	801104e <_dtoa_r+0x916>
 8010f8a:	9802      	ldr	r0, [sp, #8]
 8010f8c:	4621      	mov	r1, r4
 8010f8e:	f000 fd15 	bl	80119bc <__mcmp>
 8010f92:	2800      	cmp	r0, #0
 8010f94:	da5b      	bge.n	801104e <_dtoa_r+0x916>
 8010f96:	2300      	movs	r3, #0
 8010f98:	9902      	ldr	r1, [sp, #8]
 8010f9a:	220a      	movs	r2, #10
 8010f9c:	4648      	mov	r0, r9
 8010f9e:	f000 fafd 	bl	801159c <__multadd>
 8010fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fa4:	9002      	str	r0, [sp, #8]
 8010fa6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	f000 8177 	beq.w	801129e <_dtoa_r+0xb66>
 8010fb0:	4629      	mov	r1, r5
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	220a      	movs	r2, #10
 8010fb6:	4648      	mov	r0, r9
 8010fb8:	f000 faf0 	bl	801159c <__multadd>
 8010fbc:	f1bb 0f00 	cmp.w	fp, #0
 8010fc0:	4605      	mov	r5, r0
 8010fc2:	dc6f      	bgt.n	80110a4 <_dtoa_r+0x96c>
 8010fc4:	9b07      	ldr	r3, [sp, #28]
 8010fc6:	2b02      	cmp	r3, #2
 8010fc8:	dc49      	bgt.n	801105e <_dtoa_r+0x926>
 8010fca:	e06b      	b.n	80110a4 <_dtoa_r+0x96c>
 8010fcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010fce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010fd2:	e73c      	b.n	8010e4e <_dtoa_r+0x716>
 8010fd4:	3fe00000 	.word	0x3fe00000
 8010fd8:	40240000 	.word	0x40240000
 8010fdc:	9b03      	ldr	r3, [sp, #12]
 8010fde:	1e5c      	subs	r4, r3, #1
 8010fe0:	9b08      	ldr	r3, [sp, #32]
 8010fe2:	42a3      	cmp	r3, r4
 8010fe4:	db09      	blt.n	8010ffa <_dtoa_r+0x8c2>
 8010fe6:	1b1c      	subs	r4, r3, r4
 8010fe8:	9b03      	ldr	r3, [sp, #12]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	f6bf af30 	bge.w	8010e50 <_dtoa_r+0x718>
 8010ff0:	9b00      	ldr	r3, [sp, #0]
 8010ff2:	9a03      	ldr	r2, [sp, #12]
 8010ff4:	1a9e      	subs	r6, r3, r2
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	e72b      	b.n	8010e52 <_dtoa_r+0x71a>
 8010ffa:	9b08      	ldr	r3, [sp, #32]
 8010ffc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010ffe:	9408      	str	r4, [sp, #32]
 8011000:	1ae3      	subs	r3, r4, r3
 8011002:	441a      	add	r2, r3
 8011004:	9e00      	ldr	r6, [sp, #0]
 8011006:	9b03      	ldr	r3, [sp, #12]
 8011008:	920d      	str	r2, [sp, #52]	@ 0x34
 801100a:	2400      	movs	r4, #0
 801100c:	e721      	b.n	8010e52 <_dtoa_r+0x71a>
 801100e:	9c08      	ldr	r4, [sp, #32]
 8011010:	9e00      	ldr	r6, [sp, #0]
 8011012:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011014:	e728      	b.n	8010e68 <_dtoa_r+0x730>
 8011016:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801101a:	e751      	b.n	8010ec0 <_dtoa_r+0x788>
 801101c:	9a08      	ldr	r2, [sp, #32]
 801101e:	9902      	ldr	r1, [sp, #8]
 8011020:	e750      	b.n	8010ec4 <_dtoa_r+0x78c>
 8011022:	f8cd 8008 	str.w	r8, [sp, #8]
 8011026:	e751      	b.n	8010ecc <_dtoa_r+0x794>
 8011028:	2300      	movs	r3, #0
 801102a:	e779      	b.n	8010f20 <_dtoa_r+0x7e8>
 801102c:	9b04      	ldr	r3, [sp, #16]
 801102e:	e777      	b.n	8010f20 <_dtoa_r+0x7e8>
 8011030:	2300      	movs	r3, #0
 8011032:	9308      	str	r3, [sp, #32]
 8011034:	e779      	b.n	8010f2a <_dtoa_r+0x7f2>
 8011036:	d093      	beq.n	8010f60 <_dtoa_r+0x828>
 8011038:	9a00      	ldr	r2, [sp, #0]
 801103a:	331c      	adds	r3, #28
 801103c:	441a      	add	r2, r3
 801103e:	9200      	str	r2, [sp, #0]
 8011040:	9a06      	ldr	r2, [sp, #24]
 8011042:	441a      	add	r2, r3
 8011044:	441e      	add	r6, r3
 8011046:	9206      	str	r2, [sp, #24]
 8011048:	e78a      	b.n	8010f60 <_dtoa_r+0x828>
 801104a:	4603      	mov	r3, r0
 801104c:	e7f4      	b.n	8011038 <_dtoa_r+0x900>
 801104e:	9b03      	ldr	r3, [sp, #12]
 8011050:	2b00      	cmp	r3, #0
 8011052:	46b8      	mov	r8, r7
 8011054:	dc20      	bgt.n	8011098 <_dtoa_r+0x960>
 8011056:	469b      	mov	fp, r3
 8011058:	9b07      	ldr	r3, [sp, #28]
 801105a:	2b02      	cmp	r3, #2
 801105c:	dd1e      	ble.n	801109c <_dtoa_r+0x964>
 801105e:	f1bb 0f00 	cmp.w	fp, #0
 8011062:	f47f adb1 	bne.w	8010bc8 <_dtoa_r+0x490>
 8011066:	4621      	mov	r1, r4
 8011068:	465b      	mov	r3, fp
 801106a:	2205      	movs	r2, #5
 801106c:	4648      	mov	r0, r9
 801106e:	f000 fa95 	bl	801159c <__multadd>
 8011072:	4601      	mov	r1, r0
 8011074:	4604      	mov	r4, r0
 8011076:	9802      	ldr	r0, [sp, #8]
 8011078:	f000 fca0 	bl	80119bc <__mcmp>
 801107c:	2800      	cmp	r0, #0
 801107e:	f77f ada3 	ble.w	8010bc8 <_dtoa_r+0x490>
 8011082:	4656      	mov	r6, sl
 8011084:	2331      	movs	r3, #49	@ 0x31
 8011086:	f806 3b01 	strb.w	r3, [r6], #1
 801108a:	f108 0801 	add.w	r8, r8, #1
 801108e:	e59f      	b.n	8010bd0 <_dtoa_r+0x498>
 8011090:	9c03      	ldr	r4, [sp, #12]
 8011092:	46b8      	mov	r8, r7
 8011094:	4625      	mov	r5, r4
 8011096:	e7f4      	b.n	8011082 <_dtoa_r+0x94a>
 8011098:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801109c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801109e:	2b00      	cmp	r3, #0
 80110a0:	f000 8101 	beq.w	80112a6 <_dtoa_r+0xb6e>
 80110a4:	2e00      	cmp	r6, #0
 80110a6:	dd05      	ble.n	80110b4 <_dtoa_r+0x97c>
 80110a8:	4629      	mov	r1, r5
 80110aa:	4632      	mov	r2, r6
 80110ac:	4648      	mov	r0, r9
 80110ae:	f000 fc19 	bl	80118e4 <__lshift>
 80110b2:	4605      	mov	r5, r0
 80110b4:	9b08      	ldr	r3, [sp, #32]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d05c      	beq.n	8011174 <_dtoa_r+0xa3c>
 80110ba:	6869      	ldr	r1, [r5, #4]
 80110bc:	4648      	mov	r0, r9
 80110be:	f000 fa0b 	bl	80114d8 <_Balloc>
 80110c2:	4606      	mov	r6, r0
 80110c4:	b928      	cbnz	r0, 80110d2 <_dtoa_r+0x99a>
 80110c6:	4b82      	ldr	r3, [pc, #520]	@ (80112d0 <_dtoa_r+0xb98>)
 80110c8:	4602      	mov	r2, r0
 80110ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80110ce:	f7ff bb4a 	b.w	8010766 <_dtoa_r+0x2e>
 80110d2:	692a      	ldr	r2, [r5, #16]
 80110d4:	3202      	adds	r2, #2
 80110d6:	0092      	lsls	r2, r2, #2
 80110d8:	f105 010c 	add.w	r1, r5, #12
 80110dc:	300c      	adds	r0, #12
 80110de:	f7ff fa94 	bl	801060a <memcpy>
 80110e2:	2201      	movs	r2, #1
 80110e4:	4631      	mov	r1, r6
 80110e6:	4648      	mov	r0, r9
 80110e8:	f000 fbfc 	bl	80118e4 <__lshift>
 80110ec:	f10a 0301 	add.w	r3, sl, #1
 80110f0:	9300      	str	r3, [sp, #0]
 80110f2:	eb0a 030b 	add.w	r3, sl, fp
 80110f6:	9308      	str	r3, [sp, #32]
 80110f8:	9b04      	ldr	r3, [sp, #16]
 80110fa:	f003 0301 	and.w	r3, r3, #1
 80110fe:	462f      	mov	r7, r5
 8011100:	9306      	str	r3, [sp, #24]
 8011102:	4605      	mov	r5, r0
 8011104:	9b00      	ldr	r3, [sp, #0]
 8011106:	9802      	ldr	r0, [sp, #8]
 8011108:	4621      	mov	r1, r4
 801110a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801110e:	f7ff fa8a 	bl	8010626 <quorem>
 8011112:	4603      	mov	r3, r0
 8011114:	3330      	adds	r3, #48	@ 0x30
 8011116:	9003      	str	r0, [sp, #12]
 8011118:	4639      	mov	r1, r7
 801111a:	9802      	ldr	r0, [sp, #8]
 801111c:	9309      	str	r3, [sp, #36]	@ 0x24
 801111e:	f000 fc4d 	bl	80119bc <__mcmp>
 8011122:	462a      	mov	r2, r5
 8011124:	9004      	str	r0, [sp, #16]
 8011126:	4621      	mov	r1, r4
 8011128:	4648      	mov	r0, r9
 801112a:	f000 fc63 	bl	80119f4 <__mdiff>
 801112e:	68c2      	ldr	r2, [r0, #12]
 8011130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011132:	4606      	mov	r6, r0
 8011134:	bb02      	cbnz	r2, 8011178 <_dtoa_r+0xa40>
 8011136:	4601      	mov	r1, r0
 8011138:	9802      	ldr	r0, [sp, #8]
 801113a:	f000 fc3f 	bl	80119bc <__mcmp>
 801113e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011140:	4602      	mov	r2, r0
 8011142:	4631      	mov	r1, r6
 8011144:	4648      	mov	r0, r9
 8011146:	920c      	str	r2, [sp, #48]	@ 0x30
 8011148:	9309      	str	r3, [sp, #36]	@ 0x24
 801114a:	f000 fa05 	bl	8011558 <_Bfree>
 801114e:	9b07      	ldr	r3, [sp, #28]
 8011150:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011152:	9e00      	ldr	r6, [sp, #0]
 8011154:	ea42 0103 	orr.w	r1, r2, r3
 8011158:	9b06      	ldr	r3, [sp, #24]
 801115a:	4319      	orrs	r1, r3
 801115c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801115e:	d10d      	bne.n	801117c <_dtoa_r+0xa44>
 8011160:	2b39      	cmp	r3, #57	@ 0x39
 8011162:	d027      	beq.n	80111b4 <_dtoa_r+0xa7c>
 8011164:	9a04      	ldr	r2, [sp, #16]
 8011166:	2a00      	cmp	r2, #0
 8011168:	dd01      	ble.n	801116e <_dtoa_r+0xa36>
 801116a:	9b03      	ldr	r3, [sp, #12]
 801116c:	3331      	adds	r3, #49	@ 0x31
 801116e:	f88b 3000 	strb.w	r3, [fp]
 8011172:	e52e      	b.n	8010bd2 <_dtoa_r+0x49a>
 8011174:	4628      	mov	r0, r5
 8011176:	e7b9      	b.n	80110ec <_dtoa_r+0x9b4>
 8011178:	2201      	movs	r2, #1
 801117a:	e7e2      	b.n	8011142 <_dtoa_r+0xa0a>
 801117c:	9904      	ldr	r1, [sp, #16]
 801117e:	2900      	cmp	r1, #0
 8011180:	db04      	blt.n	801118c <_dtoa_r+0xa54>
 8011182:	9807      	ldr	r0, [sp, #28]
 8011184:	4301      	orrs	r1, r0
 8011186:	9806      	ldr	r0, [sp, #24]
 8011188:	4301      	orrs	r1, r0
 801118a:	d120      	bne.n	80111ce <_dtoa_r+0xa96>
 801118c:	2a00      	cmp	r2, #0
 801118e:	ddee      	ble.n	801116e <_dtoa_r+0xa36>
 8011190:	9902      	ldr	r1, [sp, #8]
 8011192:	9300      	str	r3, [sp, #0]
 8011194:	2201      	movs	r2, #1
 8011196:	4648      	mov	r0, r9
 8011198:	f000 fba4 	bl	80118e4 <__lshift>
 801119c:	4621      	mov	r1, r4
 801119e:	9002      	str	r0, [sp, #8]
 80111a0:	f000 fc0c 	bl	80119bc <__mcmp>
 80111a4:	2800      	cmp	r0, #0
 80111a6:	9b00      	ldr	r3, [sp, #0]
 80111a8:	dc02      	bgt.n	80111b0 <_dtoa_r+0xa78>
 80111aa:	d1e0      	bne.n	801116e <_dtoa_r+0xa36>
 80111ac:	07da      	lsls	r2, r3, #31
 80111ae:	d5de      	bpl.n	801116e <_dtoa_r+0xa36>
 80111b0:	2b39      	cmp	r3, #57	@ 0x39
 80111b2:	d1da      	bne.n	801116a <_dtoa_r+0xa32>
 80111b4:	2339      	movs	r3, #57	@ 0x39
 80111b6:	f88b 3000 	strb.w	r3, [fp]
 80111ba:	4633      	mov	r3, r6
 80111bc:	461e      	mov	r6, r3
 80111be:	3b01      	subs	r3, #1
 80111c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80111c4:	2a39      	cmp	r2, #57	@ 0x39
 80111c6:	d04e      	beq.n	8011266 <_dtoa_r+0xb2e>
 80111c8:	3201      	adds	r2, #1
 80111ca:	701a      	strb	r2, [r3, #0]
 80111cc:	e501      	b.n	8010bd2 <_dtoa_r+0x49a>
 80111ce:	2a00      	cmp	r2, #0
 80111d0:	dd03      	ble.n	80111da <_dtoa_r+0xaa2>
 80111d2:	2b39      	cmp	r3, #57	@ 0x39
 80111d4:	d0ee      	beq.n	80111b4 <_dtoa_r+0xa7c>
 80111d6:	3301      	adds	r3, #1
 80111d8:	e7c9      	b.n	801116e <_dtoa_r+0xa36>
 80111da:	9a00      	ldr	r2, [sp, #0]
 80111dc:	9908      	ldr	r1, [sp, #32]
 80111de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80111e2:	428a      	cmp	r2, r1
 80111e4:	d028      	beq.n	8011238 <_dtoa_r+0xb00>
 80111e6:	9902      	ldr	r1, [sp, #8]
 80111e8:	2300      	movs	r3, #0
 80111ea:	220a      	movs	r2, #10
 80111ec:	4648      	mov	r0, r9
 80111ee:	f000 f9d5 	bl	801159c <__multadd>
 80111f2:	42af      	cmp	r7, r5
 80111f4:	9002      	str	r0, [sp, #8]
 80111f6:	f04f 0300 	mov.w	r3, #0
 80111fa:	f04f 020a 	mov.w	r2, #10
 80111fe:	4639      	mov	r1, r7
 8011200:	4648      	mov	r0, r9
 8011202:	d107      	bne.n	8011214 <_dtoa_r+0xadc>
 8011204:	f000 f9ca 	bl	801159c <__multadd>
 8011208:	4607      	mov	r7, r0
 801120a:	4605      	mov	r5, r0
 801120c:	9b00      	ldr	r3, [sp, #0]
 801120e:	3301      	adds	r3, #1
 8011210:	9300      	str	r3, [sp, #0]
 8011212:	e777      	b.n	8011104 <_dtoa_r+0x9cc>
 8011214:	f000 f9c2 	bl	801159c <__multadd>
 8011218:	4629      	mov	r1, r5
 801121a:	4607      	mov	r7, r0
 801121c:	2300      	movs	r3, #0
 801121e:	220a      	movs	r2, #10
 8011220:	4648      	mov	r0, r9
 8011222:	f000 f9bb 	bl	801159c <__multadd>
 8011226:	4605      	mov	r5, r0
 8011228:	e7f0      	b.n	801120c <_dtoa_r+0xad4>
 801122a:	f1bb 0f00 	cmp.w	fp, #0
 801122e:	bfcc      	ite	gt
 8011230:	465e      	movgt	r6, fp
 8011232:	2601      	movle	r6, #1
 8011234:	4456      	add	r6, sl
 8011236:	2700      	movs	r7, #0
 8011238:	9902      	ldr	r1, [sp, #8]
 801123a:	9300      	str	r3, [sp, #0]
 801123c:	2201      	movs	r2, #1
 801123e:	4648      	mov	r0, r9
 8011240:	f000 fb50 	bl	80118e4 <__lshift>
 8011244:	4621      	mov	r1, r4
 8011246:	9002      	str	r0, [sp, #8]
 8011248:	f000 fbb8 	bl	80119bc <__mcmp>
 801124c:	2800      	cmp	r0, #0
 801124e:	dcb4      	bgt.n	80111ba <_dtoa_r+0xa82>
 8011250:	d102      	bne.n	8011258 <_dtoa_r+0xb20>
 8011252:	9b00      	ldr	r3, [sp, #0]
 8011254:	07db      	lsls	r3, r3, #31
 8011256:	d4b0      	bmi.n	80111ba <_dtoa_r+0xa82>
 8011258:	4633      	mov	r3, r6
 801125a:	461e      	mov	r6, r3
 801125c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011260:	2a30      	cmp	r2, #48	@ 0x30
 8011262:	d0fa      	beq.n	801125a <_dtoa_r+0xb22>
 8011264:	e4b5      	b.n	8010bd2 <_dtoa_r+0x49a>
 8011266:	459a      	cmp	sl, r3
 8011268:	d1a8      	bne.n	80111bc <_dtoa_r+0xa84>
 801126a:	2331      	movs	r3, #49	@ 0x31
 801126c:	f108 0801 	add.w	r8, r8, #1
 8011270:	f88a 3000 	strb.w	r3, [sl]
 8011274:	e4ad      	b.n	8010bd2 <_dtoa_r+0x49a>
 8011276:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011278:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80112d4 <_dtoa_r+0xb9c>
 801127c:	b11b      	cbz	r3, 8011286 <_dtoa_r+0xb4e>
 801127e:	f10a 0308 	add.w	r3, sl, #8
 8011282:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011284:	6013      	str	r3, [r2, #0]
 8011286:	4650      	mov	r0, sl
 8011288:	b017      	add	sp, #92	@ 0x5c
 801128a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801128e:	9b07      	ldr	r3, [sp, #28]
 8011290:	2b01      	cmp	r3, #1
 8011292:	f77f ae2e 	ble.w	8010ef2 <_dtoa_r+0x7ba>
 8011296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011298:	9308      	str	r3, [sp, #32]
 801129a:	2001      	movs	r0, #1
 801129c:	e64d      	b.n	8010f3a <_dtoa_r+0x802>
 801129e:	f1bb 0f00 	cmp.w	fp, #0
 80112a2:	f77f aed9 	ble.w	8011058 <_dtoa_r+0x920>
 80112a6:	4656      	mov	r6, sl
 80112a8:	9802      	ldr	r0, [sp, #8]
 80112aa:	4621      	mov	r1, r4
 80112ac:	f7ff f9bb 	bl	8010626 <quorem>
 80112b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80112b4:	f806 3b01 	strb.w	r3, [r6], #1
 80112b8:	eba6 020a 	sub.w	r2, r6, sl
 80112bc:	4593      	cmp	fp, r2
 80112be:	ddb4      	ble.n	801122a <_dtoa_r+0xaf2>
 80112c0:	9902      	ldr	r1, [sp, #8]
 80112c2:	2300      	movs	r3, #0
 80112c4:	220a      	movs	r2, #10
 80112c6:	4648      	mov	r0, r9
 80112c8:	f000 f968 	bl	801159c <__multadd>
 80112cc:	9002      	str	r0, [sp, #8]
 80112ce:	e7eb      	b.n	80112a8 <_dtoa_r+0xb70>
 80112d0:	080125fc 	.word	0x080125fc
 80112d4:	08012580 	.word	0x08012580

080112d8 <_free_r>:
 80112d8:	b538      	push	{r3, r4, r5, lr}
 80112da:	4605      	mov	r5, r0
 80112dc:	2900      	cmp	r1, #0
 80112de:	d041      	beq.n	8011364 <_free_r+0x8c>
 80112e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112e4:	1f0c      	subs	r4, r1, #4
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	bfb8      	it	lt
 80112ea:	18e4      	addlt	r4, r4, r3
 80112ec:	f000 f8e8 	bl	80114c0 <__malloc_lock>
 80112f0:	4a1d      	ldr	r2, [pc, #116]	@ (8011368 <_free_r+0x90>)
 80112f2:	6813      	ldr	r3, [r2, #0]
 80112f4:	b933      	cbnz	r3, 8011304 <_free_r+0x2c>
 80112f6:	6063      	str	r3, [r4, #4]
 80112f8:	6014      	str	r4, [r2, #0]
 80112fa:	4628      	mov	r0, r5
 80112fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011300:	f000 b8e4 	b.w	80114cc <__malloc_unlock>
 8011304:	42a3      	cmp	r3, r4
 8011306:	d908      	bls.n	801131a <_free_r+0x42>
 8011308:	6820      	ldr	r0, [r4, #0]
 801130a:	1821      	adds	r1, r4, r0
 801130c:	428b      	cmp	r3, r1
 801130e:	bf01      	itttt	eq
 8011310:	6819      	ldreq	r1, [r3, #0]
 8011312:	685b      	ldreq	r3, [r3, #4]
 8011314:	1809      	addeq	r1, r1, r0
 8011316:	6021      	streq	r1, [r4, #0]
 8011318:	e7ed      	b.n	80112f6 <_free_r+0x1e>
 801131a:	461a      	mov	r2, r3
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	b10b      	cbz	r3, 8011324 <_free_r+0x4c>
 8011320:	42a3      	cmp	r3, r4
 8011322:	d9fa      	bls.n	801131a <_free_r+0x42>
 8011324:	6811      	ldr	r1, [r2, #0]
 8011326:	1850      	adds	r0, r2, r1
 8011328:	42a0      	cmp	r0, r4
 801132a:	d10b      	bne.n	8011344 <_free_r+0x6c>
 801132c:	6820      	ldr	r0, [r4, #0]
 801132e:	4401      	add	r1, r0
 8011330:	1850      	adds	r0, r2, r1
 8011332:	4283      	cmp	r3, r0
 8011334:	6011      	str	r1, [r2, #0]
 8011336:	d1e0      	bne.n	80112fa <_free_r+0x22>
 8011338:	6818      	ldr	r0, [r3, #0]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	6053      	str	r3, [r2, #4]
 801133e:	4408      	add	r0, r1
 8011340:	6010      	str	r0, [r2, #0]
 8011342:	e7da      	b.n	80112fa <_free_r+0x22>
 8011344:	d902      	bls.n	801134c <_free_r+0x74>
 8011346:	230c      	movs	r3, #12
 8011348:	602b      	str	r3, [r5, #0]
 801134a:	e7d6      	b.n	80112fa <_free_r+0x22>
 801134c:	6820      	ldr	r0, [r4, #0]
 801134e:	1821      	adds	r1, r4, r0
 8011350:	428b      	cmp	r3, r1
 8011352:	bf04      	itt	eq
 8011354:	6819      	ldreq	r1, [r3, #0]
 8011356:	685b      	ldreq	r3, [r3, #4]
 8011358:	6063      	str	r3, [r4, #4]
 801135a:	bf04      	itt	eq
 801135c:	1809      	addeq	r1, r1, r0
 801135e:	6021      	streq	r1, [r4, #0]
 8011360:	6054      	str	r4, [r2, #4]
 8011362:	e7ca      	b.n	80112fa <_free_r+0x22>
 8011364:	bd38      	pop	{r3, r4, r5, pc}
 8011366:	bf00      	nop
 8011368:	200047c8 	.word	0x200047c8

0801136c <malloc>:
 801136c:	4b02      	ldr	r3, [pc, #8]	@ (8011378 <malloc+0xc>)
 801136e:	4601      	mov	r1, r0
 8011370:	6818      	ldr	r0, [r3, #0]
 8011372:	f000 b825 	b.w	80113c0 <_malloc_r>
 8011376:	bf00      	nop
 8011378:	20000124 	.word	0x20000124

0801137c <sbrk_aligned>:
 801137c:	b570      	push	{r4, r5, r6, lr}
 801137e:	4e0f      	ldr	r6, [pc, #60]	@ (80113bc <sbrk_aligned+0x40>)
 8011380:	460c      	mov	r4, r1
 8011382:	6831      	ldr	r1, [r6, #0]
 8011384:	4605      	mov	r5, r0
 8011386:	b911      	cbnz	r1, 801138e <sbrk_aligned+0x12>
 8011388:	f000 fccc 	bl	8011d24 <_sbrk_r>
 801138c:	6030      	str	r0, [r6, #0]
 801138e:	4621      	mov	r1, r4
 8011390:	4628      	mov	r0, r5
 8011392:	f000 fcc7 	bl	8011d24 <_sbrk_r>
 8011396:	1c43      	adds	r3, r0, #1
 8011398:	d103      	bne.n	80113a2 <sbrk_aligned+0x26>
 801139a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801139e:	4620      	mov	r0, r4
 80113a0:	bd70      	pop	{r4, r5, r6, pc}
 80113a2:	1cc4      	adds	r4, r0, #3
 80113a4:	f024 0403 	bic.w	r4, r4, #3
 80113a8:	42a0      	cmp	r0, r4
 80113aa:	d0f8      	beq.n	801139e <sbrk_aligned+0x22>
 80113ac:	1a21      	subs	r1, r4, r0
 80113ae:	4628      	mov	r0, r5
 80113b0:	f000 fcb8 	bl	8011d24 <_sbrk_r>
 80113b4:	3001      	adds	r0, #1
 80113b6:	d1f2      	bne.n	801139e <sbrk_aligned+0x22>
 80113b8:	e7ef      	b.n	801139a <sbrk_aligned+0x1e>
 80113ba:	bf00      	nop
 80113bc:	200047c4 	.word	0x200047c4

080113c0 <_malloc_r>:
 80113c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113c4:	1ccd      	adds	r5, r1, #3
 80113c6:	f025 0503 	bic.w	r5, r5, #3
 80113ca:	3508      	adds	r5, #8
 80113cc:	2d0c      	cmp	r5, #12
 80113ce:	bf38      	it	cc
 80113d0:	250c      	movcc	r5, #12
 80113d2:	2d00      	cmp	r5, #0
 80113d4:	4606      	mov	r6, r0
 80113d6:	db01      	blt.n	80113dc <_malloc_r+0x1c>
 80113d8:	42a9      	cmp	r1, r5
 80113da:	d904      	bls.n	80113e6 <_malloc_r+0x26>
 80113dc:	230c      	movs	r3, #12
 80113de:	6033      	str	r3, [r6, #0]
 80113e0:	2000      	movs	r0, #0
 80113e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80114bc <_malloc_r+0xfc>
 80113ea:	f000 f869 	bl	80114c0 <__malloc_lock>
 80113ee:	f8d8 3000 	ldr.w	r3, [r8]
 80113f2:	461c      	mov	r4, r3
 80113f4:	bb44      	cbnz	r4, 8011448 <_malloc_r+0x88>
 80113f6:	4629      	mov	r1, r5
 80113f8:	4630      	mov	r0, r6
 80113fa:	f7ff ffbf 	bl	801137c <sbrk_aligned>
 80113fe:	1c43      	adds	r3, r0, #1
 8011400:	4604      	mov	r4, r0
 8011402:	d158      	bne.n	80114b6 <_malloc_r+0xf6>
 8011404:	f8d8 4000 	ldr.w	r4, [r8]
 8011408:	4627      	mov	r7, r4
 801140a:	2f00      	cmp	r7, #0
 801140c:	d143      	bne.n	8011496 <_malloc_r+0xd6>
 801140e:	2c00      	cmp	r4, #0
 8011410:	d04b      	beq.n	80114aa <_malloc_r+0xea>
 8011412:	6823      	ldr	r3, [r4, #0]
 8011414:	4639      	mov	r1, r7
 8011416:	4630      	mov	r0, r6
 8011418:	eb04 0903 	add.w	r9, r4, r3
 801141c:	f000 fc82 	bl	8011d24 <_sbrk_r>
 8011420:	4581      	cmp	r9, r0
 8011422:	d142      	bne.n	80114aa <_malloc_r+0xea>
 8011424:	6821      	ldr	r1, [r4, #0]
 8011426:	1a6d      	subs	r5, r5, r1
 8011428:	4629      	mov	r1, r5
 801142a:	4630      	mov	r0, r6
 801142c:	f7ff ffa6 	bl	801137c <sbrk_aligned>
 8011430:	3001      	adds	r0, #1
 8011432:	d03a      	beq.n	80114aa <_malloc_r+0xea>
 8011434:	6823      	ldr	r3, [r4, #0]
 8011436:	442b      	add	r3, r5
 8011438:	6023      	str	r3, [r4, #0]
 801143a:	f8d8 3000 	ldr.w	r3, [r8]
 801143e:	685a      	ldr	r2, [r3, #4]
 8011440:	bb62      	cbnz	r2, 801149c <_malloc_r+0xdc>
 8011442:	f8c8 7000 	str.w	r7, [r8]
 8011446:	e00f      	b.n	8011468 <_malloc_r+0xa8>
 8011448:	6822      	ldr	r2, [r4, #0]
 801144a:	1b52      	subs	r2, r2, r5
 801144c:	d420      	bmi.n	8011490 <_malloc_r+0xd0>
 801144e:	2a0b      	cmp	r2, #11
 8011450:	d917      	bls.n	8011482 <_malloc_r+0xc2>
 8011452:	1961      	adds	r1, r4, r5
 8011454:	42a3      	cmp	r3, r4
 8011456:	6025      	str	r5, [r4, #0]
 8011458:	bf18      	it	ne
 801145a:	6059      	strne	r1, [r3, #4]
 801145c:	6863      	ldr	r3, [r4, #4]
 801145e:	bf08      	it	eq
 8011460:	f8c8 1000 	streq.w	r1, [r8]
 8011464:	5162      	str	r2, [r4, r5]
 8011466:	604b      	str	r3, [r1, #4]
 8011468:	4630      	mov	r0, r6
 801146a:	f000 f82f 	bl	80114cc <__malloc_unlock>
 801146e:	f104 000b 	add.w	r0, r4, #11
 8011472:	1d23      	adds	r3, r4, #4
 8011474:	f020 0007 	bic.w	r0, r0, #7
 8011478:	1ac2      	subs	r2, r0, r3
 801147a:	bf1c      	itt	ne
 801147c:	1a1b      	subne	r3, r3, r0
 801147e:	50a3      	strne	r3, [r4, r2]
 8011480:	e7af      	b.n	80113e2 <_malloc_r+0x22>
 8011482:	6862      	ldr	r2, [r4, #4]
 8011484:	42a3      	cmp	r3, r4
 8011486:	bf0c      	ite	eq
 8011488:	f8c8 2000 	streq.w	r2, [r8]
 801148c:	605a      	strne	r2, [r3, #4]
 801148e:	e7eb      	b.n	8011468 <_malloc_r+0xa8>
 8011490:	4623      	mov	r3, r4
 8011492:	6864      	ldr	r4, [r4, #4]
 8011494:	e7ae      	b.n	80113f4 <_malloc_r+0x34>
 8011496:	463c      	mov	r4, r7
 8011498:	687f      	ldr	r7, [r7, #4]
 801149a:	e7b6      	b.n	801140a <_malloc_r+0x4a>
 801149c:	461a      	mov	r2, r3
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	42a3      	cmp	r3, r4
 80114a2:	d1fb      	bne.n	801149c <_malloc_r+0xdc>
 80114a4:	2300      	movs	r3, #0
 80114a6:	6053      	str	r3, [r2, #4]
 80114a8:	e7de      	b.n	8011468 <_malloc_r+0xa8>
 80114aa:	230c      	movs	r3, #12
 80114ac:	6033      	str	r3, [r6, #0]
 80114ae:	4630      	mov	r0, r6
 80114b0:	f000 f80c 	bl	80114cc <__malloc_unlock>
 80114b4:	e794      	b.n	80113e0 <_malloc_r+0x20>
 80114b6:	6005      	str	r5, [r0, #0]
 80114b8:	e7d6      	b.n	8011468 <_malloc_r+0xa8>
 80114ba:	bf00      	nop
 80114bc:	200047c8 	.word	0x200047c8

080114c0 <__malloc_lock>:
 80114c0:	4801      	ldr	r0, [pc, #4]	@ (80114c8 <__malloc_lock+0x8>)
 80114c2:	f7ff b8a0 	b.w	8010606 <__retarget_lock_acquire_recursive>
 80114c6:	bf00      	nop
 80114c8:	200047c0 	.word	0x200047c0

080114cc <__malloc_unlock>:
 80114cc:	4801      	ldr	r0, [pc, #4]	@ (80114d4 <__malloc_unlock+0x8>)
 80114ce:	f7ff b89b 	b.w	8010608 <__retarget_lock_release_recursive>
 80114d2:	bf00      	nop
 80114d4:	200047c0 	.word	0x200047c0

080114d8 <_Balloc>:
 80114d8:	b570      	push	{r4, r5, r6, lr}
 80114da:	69c6      	ldr	r6, [r0, #28]
 80114dc:	4604      	mov	r4, r0
 80114de:	460d      	mov	r5, r1
 80114e0:	b976      	cbnz	r6, 8011500 <_Balloc+0x28>
 80114e2:	2010      	movs	r0, #16
 80114e4:	f7ff ff42 	bl	801136c <malloc>
 80114e8:	4602      	mov	r2, r0
 80114ea:	61e0      	str	r0, [r4, #28]
 80114ec:	b920      	cbnz	r0, 80114f8 <_Balloc+0x20>
 80114ee:	4b18      	ldr	r3, [pc, #96]	@ (8011550 <_Balloc+0x78>)
 80114f0:	4818      	ldr	r0, [pc, #96]	@ (8011554 <_Balloc+0x7c>)
 80114f2:	216b      	movs	r1, #107	@ 0x6b
 80114f4:	f000 fc26 	bl	8011d44 <__assert_func>
 80114f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114fc:	6006      	str	r6, [r0, #0]
 80114fe:	60c6      	str	r6, [r0, #12]
 8011500:	69e6      	ldr	r6, [r4, #28]
 8011502:	68f3      	ldr	r3, [r6, #12]
 8011504:	b183      	cbz	r3, 8011528 <_Balloc+0x50>
 8011506:	69e3      	ldr	r3, [r4, #28]
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801150e:	b9b8      	cbnz	r0, 8011540 <_Balloc+0x68>
 8011510:	2101      	movs	r1, #1
 8011512:	fa01 f605 	lsl.w	r6, r1, r5
 8011516:	1d72      	adds	r2, r6, #5
 8011518:	0092      	lsls	r2, r2, #2
 801151a:	4620      	mov	r0, r4
 801151c:	f000 fc30 	bl	8011d80 <_calloc_r>
 8011520:	b160      	cbz	r0, 801153c <_Balloc+0x64>
 8011522:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011526:	e00e      	b.n	8011546 <_Balloc+0x6e>
 8011528:	2221      	movs	r2, #33	@ 0x21
 801152a:	2104      	movs	r1, #4
 801152c:	4620      	mov	r0, r4
 801152e:	f000 fc27 	bl	8011d80 <_calloc_r>
 8011532:	69e3      	ldr	r3, [r4, #28]
 8011534:	60f0      	str	r0, [r6, #12]
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d1e4      	bne.n	8011506 <_Balloc+0x2e>
 801153c:	2000      	movs	r0, #0
 801153e:	bd70      	pop	{r4, r5, r6, pc}
 8011540:	6802      	ldr	r2, [r0, #0]
 8011542:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011546:	2300      	movs	r3, #0
 8011548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801154c:	e7f7      	b.n	801153e <_Balloc+0x66>
 801154e:	bf00      	nop
 8011550:	0801258d 	.word	0x0801258d
 8011554:	0801260d 	.word	0x0801260d

08011558 <_Bfree>:
 8011558:	b570      	push	{r4, r5, r6, lr}
 801155a:	69c6      	ldr	r6, [r0, #28]
 801155c:	4605      	mov	r5, r0
 801155e:	460c      	mov	r4, r1
 8011560:	b976      	cbnz	r6, 8011580 <_Bfree+0x28>
 8011562:	2010      	movs	r0, #16
 8011564:	f7ff ff02 	bl	801136c <malloc>
 8011568:	4602      	mov	r2, r0
 801156a:	61e8      	str	r0, [r5, #28]
 801156c:	b920      	cbnz	r0, 8011578 <_Bfree+0x20>
 801156e:	4b09      	ldr	r3, [pc, #36]	@ (8011594 <_Bfree+0x3c>)
 8011570:	4809      	ldr	r0, [pc, #36]	@ (8011598 <_Bfree+0x40>)
 8011572:	218f      	movs	r1, #143	@ 0x8f
 8011574:	f000 fbe6 	bl	8011d44 <__assert_func>
 8011578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801157c:	6006      	str	r6, [r0, #0]
 801157e:	60c6      	str	r6, [r0, #12]
 8011580:	b13c      	cbz	r4, 8011592 <_Bfree+0x3a>
 8011582:	69eb      	ldr	r3, [r5, #28]
 8011584:	6862      	ldr	r2, [r4, #4]
 8011586:	68db      	ldr	r3, [r3, #12]
 8011588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801158c:	6021      	str	r1, [r4, #0]
 801158e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011592:	bd70      	pop	{r4, r5, r6, pc}
 8011594:	0801258d 	.word	0x0801258d
 8011598:	0801260d 	.word	0x0801260d

0801159c <__multadd>:
 801159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a0:	690d      	ldr	r5, [r1, #16]
 80115a2:	4607      	mov	r7, r0
 80115a4:	460c      	mov	r4, r1
 80115a6:	461e      	mov	r6, r3
 80115a8:	f101 0c14 	add.w	ip, r1, #20
 80115ac:	2000      	movs	r0, #0
 80115ae:	f8dc 3000 	ldr.w	r3, [ip]
 80115b2:	b299      	uxth	r1, r3
 80115b4:	fb02 6101 	mla	r1, r2, r1, r6
 80115b8:	0c1e      	lsrs	r6, r3, #16
 80115ba:	0c0b      	lsrs	r3, r1, #16
 80115bc:	fb02 3306 	mla	r3, r2, r6, r3
 80115c0:	b289      	uxth	r1, r1
 80115c2:	3001      	adds	r0, #1
 80115c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80115c8:	4285      	cmp	r5, r0
 80115ca:	f84c 1b04 	str.w	r1, [ip], #4
 80115ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80115d2:	dcec      	bgt.n	80115ae <__multadd+0x12>
 80115d4:	b30e      	cbz	r6, 801161a <__multadd+0x7e>
 80115d6:	68a3      	ldr	r3, [r4, #8]
 80115d8:	42ab      	cmp	r3, r5
 80115da:	dc19      	bgt.n	8011610 <__multadd+0x74>
 80115dc:	6861      	ldr	r1, [r4, #4]
 80115de:	4638      	mov	r0, r7
 80115e0:	3101      	adds	r1, #1
 80115e2:	f7ff ff79 	bl	80114d8 <_Balloc>
 80115e6:	4680      	mov	r8, r0
 80115e8:	b928      	cbnz	r0, 80115f6 <__multadd+0x5a>
 80115ea:	4602      	mov	r2, r0
 80115ec:	4b0c      	ldr	r3, [pc, #48]	@ (8011620 <__multadd+0x84>)
 80115ee:	480d      	ldr	r0, [pc, #52]	@ (8011624 <__multadd+0x88>)
 80115f0:	21ba      	movs	r1, #186	@ 0xba
 80115f2:	f000 fba7 	bl	8011d44 <__assert_func>
 80115f6:	6922      	ldr	r2, [r4, #16]
 80115f8:	3202      	adds	r2, #2
 80115fa:	f104 010c 	add.w	r1, r4, #12
 80115fe:	0092      	lsls	r2, r2, #2
 8011600:	300c      	adds	r0, #12
 8011602:	f7ff f802 	bl	801060a <memcpy>
 8011606:	4621      	mov	r1, r4
 8011608:	4638      	mov	r0, r7
 801160a:	f7ff ffa5 	bl	8011558 <_Bfree>
 801160e:	4644      	mov	r4, r8
 8011610:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011614:	3501      	adds	r5, #1
 8011616:	615e      	str	r6, [r3, #20]
 8011618:	6125      	str	r5, [r4, #16]
 801161a:	4620      	mov	r0, r4
 801161c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011620:	080125fc 	.word	0x080125fc
 8011624:	0801260d 	.word	0x0801260d

08011628 <__hi0bits>:
 8011628:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801162c:	4603      	mov	r3, r0
 801162e:	bf36      	itet	cc
 8011630:	0403      	lslcc	r3, r0, #16
 8011632:	2000      	movcs	r0, #0
 8011634:	2010      	movcc	r0, #16
 8011636:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801163a:	bf3c      	itt	cc
 801163c:	021b      	lslcc	r3, r3, #8
 801163e:	3008      	addcc	r0, #8
 8011640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011644:	bf3c      	itt	cc
 8011646:	011b      	lslcc	r3, r3, #4
 8011648:	3004      	addcc	r0, #4
 801164a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801164e:	bf3c      	itt	cc
 8011650:	009b      	lslcc	r3, r3, #2
 8011652:	3002      	addcc	r0, #2
 8011654:	2b00      	cmp	r3, #0
 8011656:	db05      	blt.n	8011664 <__hi0bits+0x3c>
 8011658:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801165c:	f100 0001 	add.w	r0, r0, #1
 8011660:	bf08      	it	eq
 8011662:	2020      	moveq	r0, #32
 8011664:	4770      	bx	lr

08011666 <__lo0bits>:
 8011666:	6803      	ldr	r3, [r0, #0]
 8011668:	4602      	mov	r2, r0
 801166a:	f013 0007 	ands.w	r0, r3, #7
 801166e:	d00b      	beq.n	8011688 <__lo0bits+0x22>
 8011670:	07d9      	lsls	r1, r3, #31
 8011672:	d421      	bmi.n	80116b8 <__lo0bits+0x52>
 8011674:	0798      	lsls	r0, r3, #30
 8011676:	bf49      	itett	mi
 8011678:	085b      	lsrmi	r3, r3, #1
 801167a:	089b      	lsrpl	r3, r3, #2
 801167c:	2001      	movmi	r0, #1
 801167e:	6013      	strmi	r3, [r2, #0]
 8011680:	bf5c      	itt	pl
 8011682:	6013      	strpl	r3, [r2, #0]
 8011684:	2002      	movpl	r0, #2
 8011686:	4770      	bx	lr
 8011688:	b299      	uxth	r1, r3
 801168a:	b909      	cbnz	r1, 8011690 <__lo0bits+0x2a>
 801168c:	0c1b      	lsrs	r3, r3, #16
 801168e:	2010      	movs	r0, #16
 8011690:	b2d9      	uxtb	r1, r3
 8011692:	b909      	cbnz	r1, 8011698 <__lo0bits+0x32>
 8011694:	3008      	adds	r0, #8
 8011696:	0a1b      	lsrs	r3, r3, #8
 8011698:	0719      	lsls	r1, r3, #28
 801169a:	bf04      	itt	eq
 801169c:	091b      	lsreq	r3, r3, #4
 801169e:	3004      	addeq	r0, #4
 80116a0:	0799      	lsls	r1, r3, #30
 80116a2:	bf04      	itt	eq
 80116a4:	089b      	lsreq	r3, r3, #2
 80116a6:	3002      	addeq	r0, #2
 80116a8:	07d9      	lsls	r1, r3, #31
 80116aa:	d403      	bmi.n	80116b4 <__lo0bits+0x4e>
 80116ac:	085b      	lsrs	r3, r3, #1
 80116ae:	f100 0001 	add.w	r0, r0, #1
 80116b2:	d003      	beq.n	80116bc <__lo0bits+0x56>
 80116b4:	6013      	str	r3, [r2, #0]
 80116b6:	4770      	bx	lr
 80116b8:	2000      	movs	r0, #0
 80116ba:	4770      	bx	lr
 80116bc:	2020      	movs	r0, #32
 80116be:	4770      	bx	lr

080116c0 <__i2b>:
 80116c0:	b510      	push	{r4, lr}
 80116c2:	460c      	mov	r4, r1
 80116c4:	2101      	movs	r1, #1
 80116c6:	f7ff ff07 	bl	80114d8 <_Balloc>
 80116ca:	4602      	mov	r2, r0
 80116cc:	b928      	cbnz	r0, 80116da <__i2b+0x1a>
 80116ce:	4b05      	ldr	r3, [pc, #20]	@ (80116e4 <__i2b+0x24>)
 80116d0:	4805      	ldr	r0, [pc, #20]	@ (80116e8 <__i2b+0x28>)
 80116d2:	f240 1145 	movw	r1, #325	@ 0x145
 80116d6:	f000 fb35 	bl	8011d44 <__assert_func>
 80116da:	2301      	movs	r3, #1
 80116dc:	6144      	str	r4, [r0, #20]
 80116de:	6103      	str	r3, [r0, #16]
 80116e0:	bd10      	pop	{r4, pc}
 80116e2:	bf00      	nop
 80116e4:	080125fc 	.word	0x080125fc
 80116e8:	0801260d 	.word	0x0801260d

080116ec <__multiply>:
 80116ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f0:	4617      	mov	r7, r2
 80116f2:	690a      	ldr	r2, [r1, #16]
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	429a      	cmp	r2, r3
 80116f8:	bfa8      	it	ge
 80116fa:	463b      	movge	r3, r7
 80116fc:	4689      	mov	r9, r1
 80116fe:	bfa4      	itt	ge
 8011700:	460f      	movge	r7, r1
 8011702:	4699      	movge	r9, r3
 8011704:	693d      	ldr	r5, [r7, #16]
 8011706:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	6879      	ldr	r1, [r7, #4]
 801170e:	eb05 060a 	add.w	r6, r5, sl
 8011712:	42b3      	cmp	r3, r6
 8011714:	b085      	sub	sp, #20
 8011716:	bfb8      	it	lt
 8011718:	3101      	addlt	r1, #1
 801171a:	f7ff fedd 	bl	80114d8 <_Balloc>
 801171e:	b930      	cbnz	r0, 801172e <__multiply+0x42>
 8011720:	4602      	mov	r2, r0
 8011722:	4b41      	ldr	r3, [pc, #260]	@ (8011828 <__multiply+0x13c>)
 8011724:	4841      	ldr	r0, [pc, #260]	@ (801182c <__multiply+0x140>)
 8011726:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801172a:	f000 fb0b 	bl	8011d44 <__assert_func>
 801172e:	f100 0414 	add.w	r4, r0, #20
 8011732:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011736:	4623      	mov	r3, r4
 8011738:	2200      	movs	r2, #0
 801173a:	4573      	cmp	r3, lr
 801173c:	d320      	bcc.n	8011780 <__multiply+0x94>
 801173e:	f107 0814 	add.w	r8, r7, #20
 8011742:	f109 0114 	add.w	r1, r9, #20
 8011746:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801174a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801174e:	9302      	str	r3, [sp, #8]
 8011750:	1beb      	subs	r3, r5, r7
 8011752:	3b15      	subs	r3, #21
 8011754:	f023 0303 	bic.w	r3, r3, #3
 8011758:	3304      	adds	r3, #4
 801175a:	3715      	adds	r7, #21
 801175c:	42bd      	cmp	r5, r7
 801175e:	bf38      	it	cc
 8011760:	2304      	movcc	r3, #4
 8011762:	9301      	str	r3, [sp, #4]
 8011764:	9b02      	ldr	r3, [sp, #8]
 8011766:	9103      	str	r1, [sp, #12]
 8011768:	428b      	cmp	r3, r1
 801176a:	d80c      	bhi.n	8011786 <__multiply+0x9a>
 801176c:	2e00      	cmp	r6, #0
 801176e:	dd03      	ble.n	8011778 <__multiply+0x8c>
 8011770:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011774:	2b00      	cmp	r3, #0
 8011776:	d055      	beq.n	8011824 <__multiply+0x138>
 8011778:	6106      	str	r6, [r0, #16]
 801177a:	b005      	add	sp, #20
 801177c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011780:	f843 2b04 	str.w	r2, [r3], #4
 8011784:	e7d9      	b.n	801173a <__multiply+0x4e>
 8011786:	f8b1 a000 	ldrh.w	sl, [r1]
 801178a:	f1ba 0f00 	cmp.w	sl, #0
 801178e:	d01f      	beq.n	80117d0 <__multiply+0xe4>
 8011790:	46c4      	mov	ip, r8
 8011792:	46a1      	mov	r9, r4
 8011794:	2700      	movs	r7, #0
 8011796:	f85c 2b04 	ldr.w	r2, [ip], #4
 801179a:	f8d9 3000 	ldr.w	r3, [r9]
 801179e:	fa1f fb82 	uxth.w	fp, r2
 80117a2:	b29b      	uxth	r3, r3
 80117a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80117a8:	443b      	add	r3, r7
 80117aa:	f8d9 7000 	ldr.w	r7, [r9]
 80117ae:	0c12      	lsrs	r2, r2, #16
 80117b0:	0c3f      	lsrs	r7, r7, #16
 80117b2:	fb0a 7202 	mla	r2, sl, r2, r7
 80117b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117c0:	4565      	cmp	r5, ip
 80117c2:	f849 3b04 	str.w	r3, [r9], #4
 80117c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80117ca:	d8e4      	bhi.n	8011796 <__multiply+0xaa>
 80117cc:	9b01      	ldr	r3, [sp, #4]
 80117ce:	50e7      	str	r7, [r4, r3]
 80117d0:	9b03      	ldr	r3, [sp, #12]
 80117d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80117d6:	3104      	adds	r1, #4
 80117d8:	f1b9 0f00 	cmp.w	r9, #0
 80117dc:	d020      	beq.n	8011820 <__multiply+0x134>
 80117de:	6823      	ldr	r3, [r4, #0]
 80117e0:	4647      	mov	r7, r8
 80117e2:	46a4      	mov	ip, r4
 80117e4:	f04f 0a00 	mov.w	sl, #0
 80117e8:	f8b7 b000 	ldrh.w	fp, [r7]
 80117ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80117f0:	fb09 220b 	mla	r2, r9, fp, r2
 80117f4:	4452      	add	r2, sl
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117fc:	f84c 3b04 	str.w	r3, [ip], #4
 8011800:	f857 3b04 	ldr.w	r3, [r7], #4
 8011804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011808:	f8bc 3000 	ldrh.w	r3, [ip]
 801180c:	fb09 330a 	mla	r3, r9, sl, r3
 8011810:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011814:	42bd      	cmp	r5, r7
 8011816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801181a:	d8e5      	bhi.n	80117e8 <__multiply+0xfc>
 801181c:	9a01      	ldr	r2, [sp, #4]
 801181e:	50a3      	str	r3, [r4, r2]
 8011820:	3404      	adds	r4, #4
 8011822:	e79f      	b.n	8011764 <__multiply+0x78>
 8011824:	3e01      	subs	r6, #1
 8011826:	e7a1      	b.n	801176c <__multiply+0x80>
 8011828:	080125fc 	.word	0x080125fc
 801182c:	0801260d 	.word	0x0801260d

08011830 <__pow5mult>:
 8011830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011834:	4615      	mov	r5, r2
 8011836:	f012 0203 	ands.w	r2, r2, #3
 801183a:	4607      	mov	r7, r0
 801183c:	460e      	mov	r6, r1
 801183e:	d007      	beq.n	8011850 <__pow5mult+0x20>
 8011840:	4c25      	ldr	r4, [pc, #148]	@ (80118d8 <__pow5mult+0xa8>)
 8011842:	3a01      	subs	r2, #1
 8011844:	2300      	movs	r3, #0
 8011846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801184a:	f7ff fea7 	bl	801159c <__multadd>
 801184e:	4606      	mov	r6, r0
 8011850:	10ad      	asrs	r5, r5, #2
 8011852:	d03d      	beq.n	80118d0 <__pow5mult+0xa0>
 8011854:	69fc      	ldr	r4, [r7, #28]
 8011856:	b97c      	cbnz	r4, 8011878 <__pow5mult+0x48>
 8011858:	2010      	movs	r0, #16
 801185a:	f7ff fd87 	bl	801136c <malloc>
 801185e:	4602      	mov	r2, r0
 8011860:	61f8      	str	r0, [r7, #28]
 8011862:	b928      	cbnz	r0, 8011870 <__pow5mult+0x40>
 8011864:	4b1d      	ldr	r3, [pc, #116]	@ (80118dc <__pow5mult+0xac>)
 8011866:	481e      	ldr	r0, [pc, #120]	@ (80118e0 <__pow5mult+0xb0>)
 8011868:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801186c:	f000 fa6a 	bl	8011d44 <__assert_func>
 8011870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011874:	6004      	str	r4, [r0, #0]
 8011876:	60c4      	str	r4, [r0, #12]
 8011878:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801187c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011880:	b94c      	cbnz	r4, 8011896 <__pow5mult+0x66>
 8011882:	f240 2171 	movw	r1, #625	@ 0x271
 8011886:	4638      	mov	r0, r7
 8011888:	f7ff ff1a 	bl	80116c0 <__i2b>
 801188c:	2300      	movs	r3, #0
 801188e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011892:	4604      	mov	r4, r0
 8011894:	6003      	str	r3, [r0, #0]
 8011896:	f04f 0900 	mov.w	r9, #0
 801189a:	07eb      	lsls	r3, r5, #31
 801189c:	d50a      	bpl.n	80118b4 <__pow5mult+0x84>
 801189e:	4631      	mov	r1, r6
 80118a0:	4622      	mov	r2, r4
 80118a2:	4638      	mov	r0, r7
 80118a4:	f7ff ff22 	bl	80116ec <__multiply>
 80118a8:	4631      	mov	r1, r6
 80118aa:	4680      	mov	r8, r0
 80118ac:	4638      	mov	r0, r7
 80118ae:	f7ff fe53 	bl	8011558 <_Bfree>
 80118b2:	4646      	mov	r6, r8
 80118b4:	106d      	asrs	r5, r5, #1
 80118b6:	d00b      	beq.n	80118d0 <__pow5mult+0xa0>
 80118b8:	6820      	ldr	r0, [r4, #0]
 80118ba:	b938      	cbnz	r0, 80118cc <__pow5mult+0x9c>
 80118bc:	4622      	mov	r2, r4
 80118be:	4621      	mov	r1, r4
 80118c0:	4638      	mov	r0, r7
 80118c2:	f7ff ff13 	bl	80116ec <__multiply>
 80118c6:	6020      	str	r0, [r4, #0]
 80118c8:	f8c0 9000 	str.w	r9, [r0]
 80118cc:	4604      	mov	r4, r0
 80118ce:	e7e4      	b.n	801189a <__pow5mult+0x6a>
 80118d0:	4630      	mov	r0, r6
 80118d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118d6:	bf00      	nop
 80118d8:	080126c0 	.word	0x080126c0
 80118dc:	0801258d 	.word	0x0801258d
 80118e0:	0801260d 	.word	0x0801260d

080118e4 <__lshift>:
 80118e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118e8:	460c      	mov	r4, r1
 80118ea:	6849      	ldr	r1, [r1, #4]
 80118ec:	6923      	ldr	r3, [r4, #16]
 80118ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80118f2:	68a3      	ldr	r3, [r4, #8]
 80118f4:	4607      	mov	r7, r0
 80118f6:	4691      	mov	r9, r2
 80118f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80118fc:	f108 0601 	add.w	r6, r8, #1
 8011900:	42b3      	cmp	r3, r6
 8011902:	db0b      	blt.n	801191c <__lshift+0x38>
 8011904:	4638      	mov	r0, r7
 8011906:	f7ff fde7 	bl	80114d8 <_Balloc>
 801190a:	4605      	mov	r5, r0
 801190c:	b948      	cbnz	r0, 8011922 <__lshift+0x3e>
 801190e:	4602      	mov	r2, r0
 8011910:	4b28      	ldr	r3, [pc, #160]	@ (80119b4 <__lshift+0xd0>)
 8011912:	4829      	ldr	r0, [pc, #164]	@ (80119b8 <__lshift+0xd4>)
 8011914:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011918:	f000 fa14 	bl	8011d44 <__assert_func>
 801191c:	3101      	adds	r1, #1
 801191e:	005b      	lsls	r3, r3, #1
 8011920:	e7ee      	b.n	8011900 <__lshift+0x1c>
 8011922:	2300      	movs	r3, #0
 8011924:	f100 0114 	add.w	r1, r0, #20
 8011928:	f100 0210 	add.w	r2, r0, #16
 801192c:	4618      	mov	r0, r3
 801192e:	4553      	cmp	r3, sl
 8011930:	db33      	blt.n	801199a <__lshift+0xb6>
 8011932:	6920      	ldr	r0, [r4, #16]
 8011934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011938:	f104 0314 	add.w	r3, r4, #20
 801193c:	f019 091f 	ands.w	r9, r9, #31
 8011940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011948:	d02b      	beq.n	80119a2 <__lshift+0xbe>
 801194a:	f1c9 0e20 	rsb	lr, r9, #32
 801194e:	468a      	mov	sl, r1
 8011950:	2200      	movs	r2, #0
 8011952:	6818      	ldr	r0, [r3, #0]
 8011954:	fa00 f009 	lsl.w	r0, r0, r9
 8011958:	4310      	orrs	r0, r2
 801195a:	f84a 0b04 	str.w	r0, [sl], #4
 801195e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011962:	459c      	cmp	ip, r3
 8011964:	fa22 f20e 	lsr.w	r2, r2, lr
 8011968:	d8f3      	bhi.n	8011952 <__lshift+0x6e>
 801196a:	ebac 0304 	sub.w	r3, ip, r4
 801196e:	3b15      	subs	r3, #21
 8011970:	f023 0303 	bic.w	r3, r3, #3
 8011974:	3304      	adds	r3, #4
 8011976:	f104 0015 	add.w	r0, r4, #21
 801197a:	4560      	cmp	r0, ip
 801197c:	bf88      	it	hi
 801197e:	2304      	movhi	r3, #4
 8011980:	50ca      	str	r2, [r1, r3]
 8011982:	b10a      	cbz	r2, 8011988 <__lshift+0xa4>
 8011984:	f108 0602 	add.w	r6, r8, #2
 8011988:	3e01      	subs	r6, #1
 801198a:	4638      	mov	r0, r7
 801198c:	612e      	str	r6, [r5, #16]
 801198e:	4621      	mov	r1, r4
 8011990:	f7ff fde2 	bl	8011558 <_Bfree>
 8011994:	4628      	mov	r0, r5
 8011996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801199a:	f842 0f04 	str.w	r0, [r2, #4]!
 801199e:	3301      	adds	r3, #1
 80119a0:	e7c5      	b.n	801192e <__lshift+0x4a>
 80119a2:	3904      	subs	r1, #4
 80119a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80119a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80119ac:	459c      	cmp	ip, r3
 80119ae:	d8f9      	bhi.n	80119a4 <__lshift+0xc0>
 80119b0:	e7ea      	b.n	8011988 <__lshift+0xa4>
 80119b2:	bf00      	nop
 80119b4:	080125fc 	.word	0x080125fc
 80119b8:	0801260d 	.word	0x0801260d

080119bc <__mcmp>:
 80119bc:	690a      	ldr	r2, [r1, #16]
 80119be:	4603      	mov	r3, r0
 80119c0:	6900      	ldr	r0, [r0, #16]
 80119c2:	1a80      	subs	r0, r0, r2
 80119c4:	b530      	push	{r4, r5, lr}
 80119c6:	d10e      	bne.n	80119e6 <__mcmp+0x2a>
 80119c8:	3314      	adds	r3, #20
 80119ca:	3114      	adds	r1, #20
 80119cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80119d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80119d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80119d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80119dc:	4295      	cmp	r5, r2
 80119de:	d003      	beq.n	80119e8 <__mcmp+0x2c>
 80119e0:	d205      	bcs.n	80119ee <__mcmp+0x32>
 80119e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80119e6:	bd30      	pop	{r4, r5, pc}
 80119e8:	42a3      	cmp	r3, r4
 80119ea:	d3f3      	bcc.n	80119d4 <__mcmp+0x18>
 80119ec:	e7fb      	b.n	80119e6 <__mcmp+0x2a>
 80119ee:	2001      	movs	r0, #1
 80119f0:	e7f9      	b.n	80119e6 <__mcmp+0x2a>
	...

080119f4 <__mdiff>:
 80119f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f8:	4689      	mov	r9, r1
 80119fa:	4606      	mov	r6, r0
 80119fc:	4611      	mov	r1, r2
 80119fe:	4648      	mov	r0, r9
 8011a00:	4614      	mov	r4, r2
 8011a02:	f7ff ffdb 	bl	80119bc <__mcmp>
 8011a06:	1e05      	subs	r5, r0, #0
 8011a08:	d112      	bne.n	8011a30 <__mdiff+0x3c>
 8011a0a:	4629      	mov	r1, r5
 8011a0c:	4630      	mov	r0, r6
 8011a0e:	f7ff fd63 	bl	80114d8 <_Balloc>
 8011a12:	4602      	mov	r2, r0
 8011a14:	b928      	cbnz	r0, 8011a22 <__mdiff+0x2e>
 8011a16:	4b3f      	ldr	r3, [pc, #252]	@ (8011b14 <__mdiff+0x120>)
 8011a18:	f240 2137 	movw	r1, #567	@ 0x237
 8011a1c:	483e      	ldr	r0, [pc, #248]	@ (8011b18 <__mdiff+0x124>)
 8011a1e:	f000 f991 	bl	8011d44 <__assert_func>
 8011a22:	2301      	movs	r3, #1
 8011a24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a28:	4610      	mov	r0, r2
 8011a2a:	b003      	add	sp, #12
 8011a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a30:	bfbc      	itt	lt
 8011a32:	464b      	movlt	r3, r9
 8011a34:	46a1      	movlt	r9, r4
 8011a36:	4630      	mov	r0, r6
 8011a38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011a3c:	bfba      	itte	lt
 8011a3e:	461c      	movlt	r4, r3
 8011a40:	2501      	movlt	r5, #1
 8011a42:	2500      	movge	r5, #0
 8011a44:	f7ff fd48 	bl	80114d8 <_Balloc>
 8011a48:	4602      	mov	r2, r0
 8011a4a:	b918      	cbnz	r0, 8011a54 <__mdiff+0x60>
 8011a4c:	4b31      	ldr	r3, [pc, #196]	@ (8011b14 <__mdiff+0x120>)
 8011a4e:	f240 2145 	movw	r1, #581	@ 0x245
 8011a52:	e7e3      	b.n	8011a1c <__mdiff+0x28>
 8011a54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011a58:	6926      	ldr	r6, [r4, #16]
 8011a5a:	60c5      	str	r5, [r0, #12]
 8011a5c:	f109 0310 	add.w	r3, r9, #16
 8011a60:	f109 0514 	add.w	r5, r9, #20
 8011a64:	f104 0e14 	add.w	lr, r4, #20
 8011a68:	f100 0b14 	add.w	fp, r0, #20
 8011a6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011a70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011a74:	9301      	str	r3, [sp, #4]
 8011a76:	46d9      	mov	r9, fp
 8011a78:	f04f 0c00 	mov.w	ip, #0
 8011a7c:	9b01      	ldr	r3, [sp, #4]
 8011a7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011a82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011a86:	9301      	str	r3, [sp, #4]
 8011a88:	fa1f f38a 	uxth.w	r3, sl
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	b283      	uxth	r3, r0
 8011a90:	1acb      	subs	r3, r1, r3
 8011a92:	0c00      	lsrs	r0, r0, #16
 8011a94:	4463      	add	r3, ip
 8011a96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011a9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011aa4:	4576      	cmp	r6, lr
 8011aa6:	f849 3b04 	str.w	r3, [r9], #4
 8011aaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011aae:	d8e5      	bhi.n	8011a7c <__mdiff+0x88>
 8011ab0:	1b33      	subs	r3, r6, r4
 8011ab2:	3b15      	subs	r3, #21
 8011ab4:	f023 0303 	bic.w	r3, r3, #3
 8011ab8:	3415      	adds	r4, #21
 8011aba:	3304      	adds	r3, #4
 8011abc:	42a6      	cmp	r6, r4
 8011abe:	bf38      	it	cc
 8011ac0:	2304      	movcc	r3, #4
 8011ac2:	441d      	add	r5, r3
 8011ac4:	445b      	add	r3, fp
 8011ac6:	461e      	mov	r6, r3
 8011ac8:	462c      	mov	r4, r5
 8011aca:	4544      	cmp	r4, r8
 8011acc:	d30e      	bcc.n	8011aec <__mdiff+0xf8>
 8011ace:	f108 0103 	add.w	r1, r8, #3
 8011ad2:	1b49      	subs	r1, r1, r5
 8011ad4:	f021 0103 	bic.w	r1, r1, #3
 8011ad8:	3d03      	subs	r5, #3
 8011ada:	45a8      	cmp	r8, r5
 8011adc:	bf38      	it	cc
 8011ade:	2100      	movcc	r1, #0
 8011ae0:	440b      	add	r3, r1
 8011ae2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011ae6:	b191      	cbz	r1, 8011b0e <__mdiff+0x11a>
 8011ae8:	6117      	str	r7, [r2, #16]
 8011aea:	e79d      	b.n	8011a28 <__mdiff+0x34>
 8011aec:	f854 1b04 	ldr.w	r1, [r4], #4
 8011af0:	46e6      	mov	lr, ip
 8011af2:	0c08      	lsrs	r0, r1, #16
 8011af4:	fa1c fc81 	uxtah	ip, ip, r1
 8011af8:	4471      	add	r1, lr
 8011afa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011afe:	b289      	uxth	r1, r1
 8011b00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011b04:	f846 1b04 	str.w	r1, [r6], #4
 8011b08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b0c:	e7dd      	b.n	8011aca <__mdiff+0xd6>
 8011b0e:	3f01      	subs	r7, #1
 8011b10:	e7e7      	b.n	8011ae2 <__mdiff+0xee>
 8011b12:	bf00      	nop
 8011b14:	080125fc 	.word	0x080125fc
 8011b18:	0801260d 	.word	0x0801260d

08011b1c <__d2b>:
 8011b1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011b20:	460f      	mov	r7, r1
 8011b22:	2101      	movs	r1, #1
 8011b24:	ec59 8b10 	vmov	r8, r9, d0
 8011b28:	4616      	mov	r6, r2
 8011b2a:	f7ff fcd5 	bl	80114d8 <_Balloc>
 8011b2e:	4604      	mov	r4, r0
 8011b30:	b930      	cbnz	r0, 8011b40 <__d2b+0x24>
 8011b32:	4602      	mov	r2, r0
 8011b34:	4b23      	ldr	r3, [pc, #140]	@ (8011bc4 <__d2b+0xa8>)
 8011b36:	4824      	ldr	r0, [pc, #144]	@ (8011bc8 <__d2b+0xac>)
 8011b38:	f240 310f 	movw	r1, #783	@ 0x30f
 8011b3c:	f000 f902 	bl	8011d44 <__assert_func>
 8011b40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011b44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011b48:	b10d      	cbz	r5, 8011b4e <__d2b+0x32>
 8011b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011b4e:	9301      	str	r3, [sp, #4]
 8011b50:	f1b8 0300 	subs.w	r3, r8, #0
 8011b54:	d023      	beq.n	8011b9e <__d2b+0x82>
 8011b56:	4668      	mov	r0, sp
 8011b58:	9300      	str	r3, [sp, #0]
 8011b5a:	f7ff fd84 	bl	8011666 <__lo0bits>
 8011b5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011b62:	b1d0      	cbz	r0, 8011b9a <__d2b+0x7e>
 8011b64:	f1c0 0320 	rsb	r3, r0, #32
 8011b68:	fa02 f303 	lsl.w	r3, r2, r3
 8011b6c:	430b      	orrs	r3, r1
 8011b6e:	40c2      	lsrs	r2, r0
 8011b70:	6163      	str	r3, [r4, #20]
 8011b72:	9201      	str	r2, [sp, #4]
 8011b74:	9b01      	ldr	r3, [sp, #4]
 8011b76:	61a3      	str	r3, [r4, #24]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	bf0c      	ite	eq
 8011b7c:	2201      	moveq	r2, #1
 8011b7e:	2202      	movne	r2, #2
 8011b80:	6122      	str	r2, [r4, #16]
 8011b82:	b1a5      	cbz	r5, 8011bae <__d2b+0x92>
 8011b84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011b88:	4405      	add	r5, r0
 8011b8a:	603d      	str	r5, [r7, #0]
 8011b8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011b90:	6030      	str	r0, [r6, #0]
 8011b92:	4620      	mov	r0, r4
 8011b94:	b003      	add	sp, #12
 8011b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b9a:	6161      	str	r1, [r4, #20]
 8011b9c:	e7ea      	b.n	8011b74 <__d2b+0x58>
 8011b9e:	a801      	add	r0, sp, #4
 8011ba0:	f7ff fd61 	bl	8011666 <__lo0bits>
 8011ba4:	9b01      	ldr	r3, [sp, #4]
 8011ba6:	6163      	str	r3, [r4, #20]
 8011ba8:	3020      	adds	r0, #32
 8011baa:	2201      	movs	r2, #1
 8011bac:	e7e8      	b.n	8011b80 <__d2b+0x64>
 8011bae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011bb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011bb6:	6038      	str	r0, [r7, #0]
 8011bb8:	6918      	ldr	r0, [r3, #16]
 8011bba:	f7ff fd35 	bl	8011628 <__hi0bits>
 8011bbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011bc2:	e7e5      	b.n	8011b90 <__d2b+0x74>
 8011bc4:	080125fc 	.word	0x080125fc
 8011bc8:	0801260d 	.word	0x0801260d

08011bcc <__sflush_r>:
 8011bcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd4:	0716      	lsls	r6, r2, #28
 8011bd6:	4605      	mov	r5, r0
 8011bd8:	460c      	mov	r4, r1
 8011bda:	d454      	bmi.n	8011c86 <__sflush_r+0xba>
 8011bdc:	684b      	ldr	r3, [r1, #4]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	dc02      	bgt.n	8011be8 <__sflush_r+0x1c>
 8011be2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	dd48      	ble.n	8011c7a <__sflush_r+0xae>
 8011be8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011bea:	2e00      	cmp	r6, #0
 8011bec:	d045      	beq.n	8011c7a <__sflush_r+0xae>
 8011bee:	2300      	movs	r3, #0
 8011bf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011bf4:	682f      	ldr	r7, [r5, #0]
 8011bf6:	6a21      	ldr	r1, [r4, #32]
 8011bf8:	602b      	str	r3, [r5, #0]
 8011bfa:	d030      	beq.n	8011c5e <__sflush_r+0x92>
 8011bfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011bfe:	89a3      	ldrh	r3, [r4, #12]
 8011c00:	0759      	lsls	r1, r3, #29
 8011c02:	d505      	bpl.n	8011c10 <__sflush_r+0x44>
 8011c04:	6863      	ldr	r3, [r4, #4]
 8011c06:	1ad2      	subs	r2, r2, r3
 8011c08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011c0a:	b10b      	cbz	r3, 8011c10 <__sflush_r+0x44>
 8011c0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011c0e:	1ad2      	subs	r2, r2, r3
 8011c10:	2300      	movs	r3, #0
 8011c12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011c14:	6a21      	ldr	r1, [r4, #32]
 8011c16:	4628      	mov	r0, r5
 8011c18:	47b0      	blx	r6
 8011c1a:	1c43      	adds	r3, r0, #1
 8011c1c:	89a3      	ldrh	r3, [r4, #12]
 8011c1e:	d106      	bne.n	8011c2e <__sflush_r+0x62>
 8011c20:	6829      	ldr	r1, [r5, #0]
 8011c22:	291d      	cmp	r1, #29
 8011c24:	d82b      	bhi.n	8011c7e <__sflush_r+0xb2>
 8011c26:	4a2a      	ldr	r2, [pc, #168]	@ (8011cd0 <__sflush_r+0x104>)
 8011c28:	40ca      	lsrs	r2, r1
 8011c2a:	07d6      	lsls	r6, r2, #31
 8011c2c:	d527      	bpl.n	8011c7e <__sflush_r+0xb2>
 8011c2e:	2200      	movs	r2, #0
 8011c30:	6062      	str	r2, [r4, #4]
 8011c32:	04d9      	lsls	r1, r3, #19
 8011c34:	6922      	ldr	r2, [r4, #16]
 8011c36:	6022      	str	r2, [r4, #0]
 8011c38:	d504      	bpl.n	8011c44 <__sflush_r+0x78>
 8011c3a:	1c42      	adds	r2, r0, #1
 8011c3c:	d101      	bne.n	8011c42 <__sflush_r+0x76>
 8011c3e:	682b      	ldr	r3, [r5, #0]
 8011c40:	b903      	cbnz	r3, 8011c44 <__sflush_r+0x78>
 8011c42:	6560      	str	r0, [r4, #84]	@ 0x54
 8011c44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c46:	602f      	str	r7, [r5, #0]
 8011c48:	b1b9      	cbz	r1, 8011c7a <__sflush_r+0xae>
 8011c4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c4e:	4299      	cmp	r1, r3
 8011c50:	d002      	beq.n	8011c58 <__sflush_r+0x8c>
 8011c52:	4628      	mov	r0, r5
 8011c54:	f7ff fb40 	bl	80112d8 <_free_r>
 8011c58:	2300      	movs	r3, #0
 8011c5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c5c:	e00d      	b.n	8011c7a <__sflush_r+0xae>
 8011c5e:	2301      	movs	r3, #1
 8011c60:	4628      	mov	r0, r5
 8011c62:	47b0      	blx	r6
 8011c64:	4602      	mov	r2, r0
 8011c66:	1c50      	adds	r0, r2, #1
 8011c68:	d1c9      	bne.n	8011bfe <__sflush_r+0x32>
 8011c6a:	682b      	ldr	r3, [r5, #0]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d0c6      	beq.n	8011bfe <__sflush_r+0x32>
 8011c70:	2b1d      	cmp	r3, #29
 8011c72:	d001      	beq.n	8011c78 <__sflush_r+0xac>
 8011c74:	2b16      	cmp	r3, #22
 8011c76:	d11e      	bne.n	8011cb6 <__sflush_r+0xea>
 8011c78:	602f      	str	r7, [r5, #0]
 8011c7a:	2000      	movs	r0, #0
 8011c7c:	e022      	b.n	8011cc4 <__sflush_r+0xf8>
 8011c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c82:	b21b      	sxth	r3, r3
 8011c84:	e01b      	b.n	8011cbe <__sflush_r+0xf2>
 8011c86:	690f      	ldr	r7, [r1, #16]
 8011c88:	2f00      	cmp	r7, #0
 8011c8a:	d0f6      	beq.n	8011c7a <__sflush_r+0xae>
 8011c8c:	0793      	lsls	r3, r2, #30
 8011c8e:	680e      	ldr	r6, [r1, #0]
 8011c90:	bf08      	it	eq
 8011c92:	694b      	ldreq	r3, [r1, #20]
 8011c94:	600f      	str	r7, [r1, #0]
 8011c96:	bf18      	it	ne
 8011c98:	2300      	movne	r3, #0
 8011c9a:	eba6 0807 	sub.w	r8, r6, r7
 8011c9e:	608b      	str	r3, [r1, #8]
 8011ca0:	f1b8 0f00 	cmp.w	r8, #0
 8011ca4:	dde9      	ble.n	8011c7a <__sflush_r+0xae>
 8011ca6:	6a21      	ldr	r1, [r4, #32]
 8011ca8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011caa:	4643      	mov	r3, r8
 8011cac:	463a      	mov	r2, r7
 8011cae:	4628      	mov	r0, r5
 8011cb0:	47b0      	blx	r6
 8011cb2:	2800      	cmp	r0, #0
 8011cb4:	dc08      	bgt.n	8011cc8 <__sflush_r+0xfc>
 8011cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cbe:	81a3      	strh	r3, [r4, #12]
 8011cc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cc8:	4407      	add	r7, r0
 8011cca:	eba8 0800 	sub.w	r8, r8, r0
 8011cce:	e7e7      	b.n	8011ca0 <__sflush_r+0xd4>
 8011cd0:	20400001 	.word	0x20400001

08011cd4 <_fflush_r>:
 8011cd4:	b538      	push	{r3, r4, r5, lr}
 8011cd6:	690b      	ldr	r3, [r1, #16]
 8011cd8:	4605      	mov	r5, r0
 8011cda:	460c      	mov	r4, r1
 8011cdc:	b913      	cbnz	r3, 8011ce4 <_fflush_r+0x10>
 8011cde:	2500      	movs	r5, #0
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	bd38      	pop	{r3, r4, r5, pc}
 8011ce4:	b118      	cbz	r0, 8011cee <_fflush_r+0x1a>
 8011ce6:	6a03      	ldr	r3, [r0, #32]
 8011ce8:	b90b      	cbnz	r3, 8011cee <_fflush_r+0x1a>
 8011cea:	f7fe fb37 	bl	801035c <__sinit>
 8011cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d0f3      	beq.n	8011cde <_fflush_r+0xa>
 8011cf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011cf8:	07d0      	lsls	r0, r2, #31
 8011cfa:	d404      	bmi.n	8011d06 <_fflush_r+0x32>
 8011cfc:	0599      	lsls	r1, r3, #22
 8011cfe:	d402      	bmi.n	8011d06 <_fflush_r+0x32>
 8011d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d02:	f7fe fc80 	bl	8010606 <__retarget_lock_acquire_recursive>
 8011d06:	4628      	mov	r0, r5
 8011d08:	4621      	mov	r1, r4
 8011d0a:	f7ff ff5f 	bl	8011bcc <__sflush_r>
 8011d0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011d10:	07da      	lsls	r2, r3, #31
 8011d12:	4605      	mov	r5, r0
 8011d14:	d4e4      	bmi.n	8011ce0 <_fflush_r+0xc>
 8011d16:	89a3      	ldrh	r3, [r4, #12]
 8011d18:	059b      	lsls	r3, r3, #22
 8011d1a:	d4e1      	bmi.n	8011ce0 <_fflush_r+0xc>
 8011d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d1e:	f7fe fc73 	bl	8010608 <__retarget_lock_release_recursive>
 8011d22:	e7dd      	b.n	8011ce0 <_fflush_r+0xc>

08011d24 <_sbrk_r>:
 8011d24:	b538      	push	{r3, r4, r5, lr}
 8011d26:	4d06      	ldr	r5, [pc, #24]	@ (8011d40 <_sbrk_r+0x1c>)
 8011d28:	2300      	movs	r3, #0
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	4608      	mov	r0, r1
 8011d2e:	602b      	str	r3, [r5, #0]
 8011d30:	f7f1 f90e 	bl	8002f50 <_sbrk>
 8011d34:	1c43      	adds	r3, r0, #1
 8011d36:	d102      	bne.n	8011d3e <_sbrk_r+0x1a>
 8011d38:	682b      	ldr	r3, [r5, #0]
 8011d3a:	b103      	cbz	r3, 8011d3e <_sbrk_r+0x1a>
 8011d3c:	6023      	str	r3, [r4, #0]
 8011d3e:	bd38      	pop	{r3, r4, r5, pc}
 8011d40:	200047bc 	.word	0x200047bc

08011d44 <__assert_func>:
 8011d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d46:	4614      	mov	r4, r2
 8011d48:	461a      	mov	r2, r3
 8011d4a:	4b09      	ldr	r3, [pc, #36]	@ (8011d70 <__assert_func+0x2c>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	4605      	mov	r5, r0
 8011d50:	68d8      	ldr	r0, [r3, #12]
 8011d52:	b14c      	cbz	r4, 8011d68 <__assert_func+0x24>
 8011d54:	4b07      	ldr	r3, [pc, #28]	@ (8011d74 <__assert_func+0x30>)
 8011d56:	9100      	str	r1, [sp, #0]
 8011d58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d5c:	4906      	ldr	r1, [pc, #24]	@ (8011d78 <__assert_func+0x34>)
 8011d5e:	462b      	mov	r3, r5
 8011d60:	f000 f842 	bl	8011de8 <fiprintf>
 8011d64:	f000 f852 	bl	8011e0c <abort>
 8011d68:	4b04      	ldr	r3, [pc, #16]	@ (8011d7c <__assert_func+0x38>)
 8011d6a:	461c      	mov	r4, r3
 8011d6c:	e7f3      	b.n	8011d56 <__assert_func+0x12>
 8011d6e:	bf00      	nop
 8011d70:	20000124 	.word	0x20000124
 8011d74:	08012670 	.word	0x08012670
 8011d78:	0801267d 	.word	0x0801267d
 8011d7c:	080126ab 	.word	0x080126ab

08011d80 <_calloc_r>:
 8011d80:	b570      	push	{r4, r5, r6, lr}
 8011d82:	fba1 5402 	umull	r5, r4, r1, r2
 8011d86:	b934      	cbnz	r4, 8011d96 <_calloc_r+0x16>
 8011d88:	4629      	mov	r1, r5
 8011d8a:	f7ff fb19 	bl	80113c0 <_malloc_r>
 8011d8e:	4606      	mov	r6, r0
 8011d90:	b928      	cbnz	r0, 8011d9e <_calloc_r+0x1e>
 8011d92:	4630      	mov	r0, r6
 8011d94:	bd70      	pop	{r4, r5, r6, pc}
 8011d96:	220c      	movs	r2, #12
 8011d98:	6002      	str	r2, [r0, #0]
 8011d9a:	2600      	movs	r6, #0
 8011d9c:	e7f9      	b.n	8011d92 <_calloc_r+0x12>
 8011d9e:	462a      	mov	r2, r5
 8011da0:	4621      	mov	r1, r4
 8011da2:	f7fe fb54 	bl	801044e <memset>
 8011da6:	e7f4      	b.n	8011d92 <_calloc_r+0x12>

08011da8 <__ascii_mbtowc>:
 8011da8:	b082      	sub	sp, #8
 8011daa:	b901      	cbnz	r1, 8011dae <__ascii_mbtowc+0x6>
 8011dac:	a901      	add	r1, sp, #4
 8011dae:	b142      	cbz	r2, 8011dc2 <__ascii_mbtowc+0x1a>
 8011db0:	b14b      	cbz	r3, 8011dc6 <__ascii_mbtowc+0x1e>
 8011db2:	7813      	ldrb	r3, [r2, #0]
 8011db4:	600b      	str	r3, [r1, #0]
 8011db6:	7812      	ldrb	r2, [r2, #0]
 8011db8:	1e10      	subs	r0, r2, #0
 8011dba:	bf18      	it	ne
 8011dbc:	2001      	movne	r0, #1
 8011dbe:	b002      	add	sp, #8
 8011dc0:	4770      	bx	lr
 8011dc2:	4610      	mov	r0, r2
 8011dc4:	e7fb      	b.n	8011dbe <__ascii_mbtowc+0x16>
 8011dc6:	f06f 0001 	mvn.w	r0, #1
 8011dca:	e7f8      	b.n	8011dbe <__ascii_mbtowc+0x16>

08011dcc <__ascii_wctomb>:
 8011dcc:	4603      	mov	r3, r0
 8011dce:	4608      	mov	r0, r1
 8011dd0:	b141      	cbz	r1, 8011de4 <__ascii_wctomb+0x18>
 8011dd2:	2aff      	cmp	r2, #255	@ 0xff
 8011dd4:	d904      	bls.n	8011de0 <__ascii_wctomb+0x14>
 8011dd6:	228a      	movs	r2, #138	@ 0x8a
 8011dd8:	601a      	str	r2, [r3, #0]
 8011dda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011dde:	4770      	bx	lr
 8011de0:	700a      	strb	r2, [r1, #0]
 8011de2:	2001      	movs	r0, #1
 8011de4:	4770      	bx	lr
	...

08011de8 <fiprintf>:
 8011de8:	b40e      	push	{r1, r2, r3}
 8011dea:	b503      	push	{r0, r1, lr}
 8011dec:	4601      	mov	r1, r0
 8011dee:	ab03      	add	r3, sp, #12
 8011df0:	4805      	ldr	r0, [pc, #20]	@ (8011e08 <fiprintf+0x20>)
 8011df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011df6:	6800      	ldr	r0, [r0, #0]
 8011df8:	9301      	str	r3, [sp, #4]
 8011dfa:	f000 f837 	bl	8011e6c <_vfiprintf_r>
 8011dfe:	b002      	add	sp, #8
 8011e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e04:	b003      	add	sp, #12
 8011e06:	4770      	bx	lr
 8011e08:	20000124 	.word	0x20000124

08011e0c <abort>:
 8011e0c:	b508      	push	{r3, lr}
 8011e0e:	2006      	movs	r0, #6
 8011e10:	f000 fa00 	bl	8012214 <raise>
 8011e14:	2001      	movs	r0, #1
 8011e16:	f7f1 f823 	bl	8002e60 <_exit>

08011e1a <__sfputc_r>:
 8011e1a:	6893      	ldr	r3, [r2, #8]
 8011e1c:	3b01      	subs	r3, #1
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	b410      	push	{r4}
 8011e22:	6093      	str	r3, [r2, #8]
 8011e24:	da08      	bge.n	8011e38 <__sfputc_r+0x1e>
 8011e26:	6994      	ldr	r4, [r2, #24]
 8011e28:	42a3      	cmp	r3, r4
 8011e2a:	db01      	blt.n	8011e30 <__sfputc_r+0x16>
 8011e2c:	290a      	cmp	r1, #10
 8011e2e:	d103      	bne.n	8011e38 <__sfputc_r+0x1e>
 8011e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e34:	f000 b932 	b.w	801209c <__swbuf_r>
 8011e38:	6813      	ldr	r3, [r2, #0]
 8011e3a:	1c58      	adds	r0, r3, #1
 8011e3c:	6010      	str	r0, [r2, #0]
 8011e3e:	7019      	strb	r1, [r3, #0]
 8011e40:	4608      	mov	r0, r1
 8011e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e46:	4770      	bx	lr

08011e48 <__sfputs_r>:
 8011e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e4a:	4606      	mov	r6, r0
 8011e4c:	460f      	mov	r7, r1
 8011e4e:	4614      	mov	r4, r2
 8011e50:	18d5      	adds	r5, r2, r3
 8011e52:	42ac      	cmp	r4, r5
 8011e54:	d101      	bne.n	8011e5a <__sfputs_r+0x12>
 8011e56:	2000      	movs	r0, #0
 8011e58:	e007      	b.n	8011e6a <__sfputs_r+0x22>
 8011e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e5e:	463a      	mov	r2, r7
 8011e60:	4630      	mov	r0, r6
 8011e62:	f7ff ffda 	bl	8011e1a <__sfputc_r>
 8011e66:	1c43      	adds	r3, r0, #1
 8011e68:	d1f3      	bne.n	8011e52 <__sfputs_r+0xa>
 8011e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e6c <_vfiprintf_r>:
 8011e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e70:	460d      	mov	r5, r1
 8011e72:	b09d      	sub	sp, #116	@ 0x74
 8011e74:	4614      	mov	r4, r2
 8011e76:	4698      	mov	r8, r3
 8011e78:	4606      	mov	r6, r0
 8011e7a:	b118      	cbz	r0, 8011e84 <_vfiprintf_r+0x18>
 8011e7c:	6a03      	ldr	r3, [r0, #32]
 8011e7e:	b90b      	cbnz	r3, 8011e84 <_vfiprintf_r+0x18>
 8011e80:	f7fe fa6c 	bl	801035c <__sinit>
 8011e84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e86:	07d9      	lsls	r1, r3, #31
 8011e88:	d405      	bmi.n	8011e96 <_vfiprintf_r+0x2a>
 8011e8a:	89ab      	ldrh	r3, [r5, #12]
 8011e8c:	059a      	lsls	r2, r3, #22
 8011e8e:	d402      	bmi.n	8011e96 <_vfiprintf_r+0x2a>
 8011e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e92:	f7fe fbb8 	bl	8010606 <__retarget_lock_acquire_recursive>
 8011e96:	89ab      	ldrh	r3, [r5, #12]
 8011e98:	071b      	lsls	r3, r3, #28
 8011e9a:	d501      	bpl.n	8011ea0 <_vfiprintf_r+0x34>
 8011e9c:	692b      	ldr	r3, [r5, #16]
 8011e9e:	b99b      	cbnz	r3, 8011ec8 <_vfiprintf_r+0x5c>
 8011ea0:	4629      	mov	r1, r5
 8011ea2:	4630      	mov	r0, r6
 8011ea4:	f000 f938 	bl	8012118 <__swsetup_r>
 8011ea8:	b170      	cbz	r0, 8011ec8 <_vfiprintf_r+0x5c>
 8011eaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011eac:	07dc      	lsls	r4, r3, #31
 8011eae:	d504      	bpl.n	8011eba <_vfiprintf_r+0x4e>
 8011eb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011eb4:	b01d      	add	sp, #116	@ 0x74
 8011eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eba:	89ab      	ldrh	r3, [r5, #12]
 8011ebc:	0598      	lsls	r0, r3, #22
 8011ebe:	d4f7      	bmi.n	8011eb0 <_vfiprintf_r+0x44>
 8011ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ec2:	f7fe fba1 	bl	8010608 <__retarget_lock_release_recursive>
 8011ec6:	e7f3      	b.n	8011eb0 <_vfiprintf_r+0x44>
 8011ec8:	2300      	movs	r3, #0
 8011eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ecc:	2320      	movs	r3, #32
 8011ece:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ed6:	2330      	movs	r3, #48	@ 0x30
 8011ed8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012088 <_vfiprintf_r+0x21c>
 8011edc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ee0:	f04f 0901 	mov.w	r9, #1
 8011ee4:	4623      	mov	r3, r4
 8011ee6:	469a      	mov	sl, r3
 8011ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eec:	b10a      	cbz	r2, 8011ef2 <_vfiprintf_r+0x86>
 8011eee:	2a25      	cmp	r2, #37	@ 0x25
 8011ef0:	d1f9      	bne.n	8011ee6 <_vfiprintf_r+0x7a>
 8011ef2:	ebba 0b04 	subs.w	fp, sl, r4
 8011ef6:	d00b      	beq.n	8011f10 <_vfiprintf_r+0xa4>
 8011ef8:	465b      	mov	r3, fp
 8011efa:	4622      	mov	r2, r4
 8011efc:	4629      	mov	r1, r5
 8011efe:	4630      	mov	r0, r6
 8011f00:	f7ff ffa2 	bl	8011e48 <__sfputs_r>
 8011f04:	3001      	adds	r0, #1
 8011f06:	f000 80a7 	beq.w	8012058 <_vfiprintf_r+0x1ec>
 8011f0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f0c:	445a      	add	r2, fp
 8011f0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f10:	f89a 3000 	ldrb.w	r3, [sl]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	f000 809f 	beq.w	8012058 <_vfiprintf_r+0x1ec>
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011f20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f24:	f10a 0a01 	add.w	sl, sl, #1
 8011f28:	9304      	str	r3, [sp, #16]
 8011f2a:	9307      	str	r3, [sp, #28]
 8011f2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f30:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f32:	4654      	mov	r4, sl
 8011f34:	2205      	movs	r2, #5
 8011f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f3a:	4853      	ldr	r0, [pc, #332]	@ (8012088 <_vfiprintf_r+0x21c>)
 8011f3c:	f7ee f958 	bl	80001f0 <memchr>
 8011f40:	9a04      	ldr	r2, [sp, #16]
 8011f42:	b9d8      	cbnz	r0, 8011f7c <_vfiprintf_r+0x110>
 8011f44:	06d1      	lsls	r1, r2, #27
 8011f46:	bf44      	itt	mi
 8011f48:	2320      	movmi	r3, #32
 8011f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f4e:	0713      	lsls	r3, r2, #28
 8011f50:	bf44      	itt	mi
 8011f52:	232b      	movmi	r3, #43	@ 0x2b
 8011f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f58:	f89a 3000 	ldrb.w	r3, [sl]
 8011f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f5e:	d015      	beq.n	8011f8c <_vfiprintf_r+0x120>
 8011f60:	9a07      	ldr	r2, [sp, #28]
 8011f62:	4654      	mov	r4, sl
 8011f64:	2000      	movs	r0, #0
 8011f66:	f04f 0c0a 	mov.w	ip, #10
 8011f6a:	4621      	mov	r1, r4
 8011f6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f70:	3b30      	subs	r3, #48	@ 0x30
 8011f72:	2b09      	cmp	r3, #9
 8011f74:	d94b      	bls.n	801200e <_vfiprintf_r+0x1a2>
 8011f76:	b1b0      	cbz	r0, 8011fa6 <_vfiprintf_r+0x13a>
 8011f78:	9207      	str	r2, [sp, #28]
 8011f7a:	e014      	b.n	8011fa6 <_vfiprintf_r+0x13a>
 8011f7c:	eba0 0308 	sub.w	r3, r0, r8
 8011f80:	fa09 f303 	lsl.w	r3, r9, r3
 8011f84:	4313      	orrs	r3, r2
 8011f86:	9304      	str	r3, [sp, #16]
 8011f88:	46a2      	mov	sl, r4
 8011f8a:	e7d2      	b.n	8011f32 <_vfiprintf_r+0xc6>
 8011f8c:	9b03      	ldr	r3, [sp, #12]
 8011f8e:	1d19      	adds	r1, r3, #4
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	9103      	str	r1, [sp, #12]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	bfbb      	ittet	lt
 8011f98:	425b      	neglt	r3, r3
 8011f9a:	f042 0202 	orrlt.w	r2, r2, #2
 8011f9e:	9307      	strge	r3, [sp, #28]
 8011fa0:	9307      	strlt	r3, [sp, #28]
 8011fa2:	bfb8      	it	lt
 8011fa4:	9204      	strlt	r2, [sp, #16]
 8011fa6:	7823      	ldrb	r3, [r4, #0]
 8011fa8:	2b2e      	cmp	r3, #46	@ 0x2e
 8011faa:	d10a      	bne.n	8011fc2 <_vfiprintf_r+0x156>
 8011fac:	7863      	ldrb	r3, [r4, #1]
 8011fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fb0:	d132      	bne.n	8012018 <_vfiprintf_r+0x1ac>
 8011fb2:	9b03      	ldr	r3, [sp, #12]
 8011fb4:	1d1a      	adds	r2, r3, #4
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	9203      	str	r2, [sp, #12]
 8011fba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011fbe:	3402      	adds	r4, #2
 8011fc0:	9305      	str	r3, [sp, #20]
 8011fc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012098 <_vfiprintf_r+0x22c>
 8011fc6:	7821      	ldrb	r1, [r4, #0]
 8011fc8:	2203      	movs	r2, #3
 8011fca:	4650      	mov	r0, sl
 8011fcc:	f7ee f910 	bl	80001f0 <memchr>
 8011fd0:	b138      	cbz	r0, 8011fe2 <_vfiprintf_r+0x176>
 8011fd2:	9b04      	ldr	r3, [sp, #16]
 8011fd4:	eba0 000a 	sub.w	r0, r0, sl
 8011fd8:	2240      	movs	r2, #64	@ 0x40
 8011fda:	4082      	lsls	r2, r0
 8011fdc:	4313      	orrs	r3, r2
 8011fde:	3401      	adds	r4, #1
 8011fe0:	9304      	str	r3, [sp, #16]
 8011fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fe6:	4829      	ldr	r0, [pc, #164]	@ (801208c <_vfiprintf_r+0x220>)
 8011fe8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011fec:	2206      	movs	r2, #6
 8011fee:	f7ee f8ff 	bl	80001f0 <memchr>
 8011ff2:	2800      	cmp	r0, #0
 8011ff4:	d03f      	beq.n	8012076 <_vfiprintf_r+0x20a>
 8011ff6:	4b26      	ldr	r3, [pc, #152]	@ (8012090 <_vfiprintf_r+0x224>)
 8011ff8:	bb1b      	cbnz	r3, 8012042 <_vfiprintf_r+0x1d6>
 8011ffa:	9b03      	ldr	r3, [sp, #12]
 8011ffc:	3307      	adds	r3, #7
 8011ffe:	f023 0307 	bic.w	r3, r3, #7
 8012002:	3308      	adds	r3, #8
 8012004:	9303      	str	r3, [sp, #12]
 8012006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012008:	443b      	add	r3, r7
 801200a:	9309      	str	r3, [sp, #36]	@ 0x24
 801200c:	e76a      	b.n	8011ee4 <_vfiprintf_r+0x78>
 801200e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012012:	460c      	mov	r4, r1
 8012014:	2001      	movs	r0, #1
 8012016:	e7a8      	b.n	8011f6a <_vfiprintf_r+0xfe>
 8012018:	2300      	movs	r3, #0
 801201a:	3401      	adds	r4, #1
 801201c:	9305      	str	r3, [sp, #20]
 801201e:	4619      	mov	r1, r3
 8012020:	f04f 0c0a 	mov.w	ip, #10
 8012024:	4620      	mov	r0, r4
 8012026:	f810 2b01 	ldrb.w	r2, [r0], #1
 801202a:	3a30      	subs	r2, #48	@ 0x30
 801202c:	2a09      	cmp	r2, #9
 801202e:	d903      	bls.n	8012038 <_vfiprintf_r+0x1cc>
 8012030:	2b00      	cmp	r3, #0
 8012032:	d0c6      	beq.n	8011fc2 <_vfiprintf_r+0x156>
 8012034:	9105      	str	r1, [sp, #20]
 8012036:	e7c4      	b.n	8011fc2 <_vfiprintf_r+0x156>
 8012038:	fb0c 2101 	mla	r1, ip, r1, r2
 801203c:	4604      	mov	r4, r0
 801203e:	2301      	movs	r3, #1
 8012040:	e7f0      	b.n	8012024 <_vfiprintf_r+0x1b8>
 8012042:	ab03      	add	r3, sp, #12
 8012044:	9300      	str	r3, [sp, #0]
 8012046:	462a      	mov	r2, r5
 8012048:	4b12      	ldr	r3, [pc, #72]	@ (8012094 <_vfiprintf_r+0x228>)
 801204a:	a904      	add	r1, sp, #16
 801204c:	4630      	mov	r0, r6
 801204e:	f7fd fd43 	bl	800fad8 <_printf_float>
 8012052:	4607      	mov	r7, r0
 8012054:	1c78      	adds	r0, r7, #1
 8012056:	d1d6      	bne.n	8012006 <_vfiprintf_r+0x19a>
 8012058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801205a:	07d9      	lsls	r1, r3, #31
 801205c:	d405      	bmi.n	801206a <_vfiprintf_r+0x1fe>
 801205e:	89ab      	ldrh	r3, [r5, #12]
 8012060:	059a      	lsls	r2, r3, #22
 8012062:	d402      	bmi.n	801206a <_vfiprintf_r+0x1fe>
 8012064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012066:	f7fe facf 	bl	8010608 <__retarget_lock_release_recursive>
 801206a:	89ab      	ldrh	r3, [r5, #12]
 801206c:	065b      	lsls	r3, r3, #25
 801206e:	f53f af1f 	bmi.w	8011eb0 <_vfiprintf_r+0x44>
 8012072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012074:	e71e      	b.n	8011eb4 <_vfiprintf_r+0x48>
 8012076:	ab03      	add	r3, sp, #12
 8012078:	9300      	str	r3, [sp, #0]
 801207a:	462a      	mov	r2, r5
 801207c:	4b05      	ldr	r3, [pc, #20]	@ (8012094 <_vfiprintf_r+0x228>)
 801207e:	a904      	add	r1, sp, #16
 8012080:	4630      	mov	r0, r6
 8012082:	f7fd ffc1 	bl	8010008 <_printf_i>
 8012086:	e7e4      	b.n	8012052 <_vfiprintf_r+0x1e6>
 8012088:	080126ac 	.word	0x080126ac
 801208c:	080126b6 	.word	0x080126b6
 8012090:	0800fad9 	.word	0x0800fad9
 8012094:	08011e49 	.word	0x08011e49
 8012098:	080126b2 	.word	0x080126b2

0801209c <__swbuf_r>:
 801209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801209e:	460e      	mov	r6, r1
 80120a0:	4614      	mov	r4, r2
 80120a2:	4605      	mov	r5, r0
 80120a4:	b118      	cbz	r0, 80120ae <__swbuf_r+0x12>
 80120a6:	6a03      	ldr	r3, [r0, #32]
 80120a8:	b90b      	cbnz	r3, 80120ae <__swbuf_r+0x12>
 80120aa:	f7fe f957 	bl	801035c <__sinit>
 80120ae:	69a3      	ldr	r3, [r4, #24]
 80120b0:	60a3      	str	r3, [r4, #8]
 80120b2:	89a3      	ldrh	r3, [r4, #12]
 80120b4:	071a      	lsls	r2, r3, #28
 80120b6:	d501      	bpl.n	80120bc <__swbuf_r+0x20>
 80120b8:	6923      	ldr	r3, [r4, #16]
 80120ba:	b943      	cbnz	r3, 80120ce <__swbuf_r+0x32>
 80120bc:	4621      	mov	r1, r4
 80120be:	4628      	mov	r0, r5
 80120c0:	f000 f82a 	bl	8012118 <__swsetup_r>
 80120c4:	b118      	cbz	r0, 80120ce <__swbuf_r+0x32>
 80120c6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80120ca:	4638      	mov	r0, r7
 80120cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120ce:	6823      	ldr	r3, [r4, #0]
 80120d0:	6922      	ldr	r2, [r4, #16]
 80120d2:	1a98      	subs	r0, r3, r2
 80120d4:	6963      	ldr	r3, [r4, #20]
 80120d6:	b2f6      	uxtb	r6, r6
 80120d8:	4283      	cmp	r3, r0
 80120da:	4637      	mov	r7, r6
 80120dc:	dc05      	bgt.n	80120ea <__swbuf_r+0x4e>
 80120de:	4621      	mov	r1, r4
 80120e0:	4628      	mov	r0, r5
 80120e2:	f7ff fdf7 	bl	8011cd4 <_fflush_r>
 80120e6:	2800      	cmp	r0, #0
 80120e8:	d1ed      	bne.n	80120c6 <__swbuf_r+0x2a>
 80120ea:	68a3      	ldr	r3, [r4, #8]
 80120ec:	3b01      	subs	r3, #1
 80120ee:	60a3      	str	r3, [r4, #8]
 80120f0:	6823      	ldr	r3, [r4, #0]
 80120f2:	1c5a      	adds	r2, r3, #1
 80120f4:	6022      	str	r2, [r4, #0]
 80120f6:	701e      	strb	r6, [r3, #0]
 80120f8:	6962      	ldr	r2, [r4, #20]
 80120fa:	1c43      	adds	r3, r0, #1
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d004      	beq.n	801210a <__swbuf_r+0x6e>
 8012100:	89a3      	ldrh	r3, [r4, #12]
 8012102:	07db      	lsls	r3, r3, #31
 8012104:	d5e1      	bpl.n	80120ca <__swbuf_r+0x2e>
 8012106:	2e0a      	cmp	r6, #10
 8012108:	d1df      	bne.n	80120ca <__swbuf_r+0x2e>
 801210a:	4621      	mov	r1, r4
 801210c:	4628      	mov	r0, r5
 801210e:	f7ff fde1 	bl	8011cd4 <_fflush_r>
 8012112:	2800      	cmp	r0, #0
 8012114:	d0d9      	beq.n	80120ca <__swbuf_r+0x2e>
 8012116:	e7d6      	b.n	80120c6 <__swbuf_r+0x2a>

08012118 <__swsetup_r>:
 8012118:	b538      	push	{r3, r4, r5, lr}
 801211a:	4b29      	ldr	r3, [pc, #164]	@ (80121c0 <__swsetup_r+0xa8>)
 801211c:	4605      	mov	r5, r0
 801211e:	6818      	ldr	r0, [r3, #0]
 8012120:	460c      	mov	r4, r1
 8012122:	b118      	cbz	r0, 801212c <__swsetup_r+0x14>
 8012124:	6a03      	ldr	r3, [r0, #32]
 8012126:	b90b      	cbnz	r3, 801212c <__swsetup_r+0x14>
 8012128:	f7fe f918 	bl	801035c <__sinit>
 801212c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012130:	0719      	lsls	r1, r3, #28
 8012132:	d422      	bmi.n	801217a <__swsetup_r+0x62>
 8012134:	06da      	lsls	r2, r3, #27
 8012136:	d407      	bmi.n	8012148 <__swsetup_r+0x30>
 8012138:	2209      	movs	r2, #9
 801213a:	602a      	str	r2, [r5, #0]
 801213c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012140:	81a3      	strh	r3, [r4, #12]
 8012142:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012146:	e033      	b.n	80121b0 <__swsetup_r+0x98>
 8012148:	0758      	lsls	r0, r3, #29
 801214a:	d512      	bpl.n	8012172 <__swsetup_r+0x5a>
 801214c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801214e:	b141      	cbz	r1, 8012162 <__swsetup_r+0x4a>
 8012150:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012154:	4299      	cmp	r1, r3
 8012156:	d002      	beq.n	801215e <__swsetup_r+0x46>
 8012158:	4628      	mov	r0, r5
 801215a:	f7ff f8bd 	bl	80112d8 <_free_r>
 801215e:	2300      	movs	r3, #0
 8012160:	6363      	str	r3, [r4, #52]	@ 0x34
 8012162:	89a3      	ldrh	r3, [r4, #12]
 8012164:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012168:	81a3      	strh	r3, [r4, #12]
 801216a:	2300      	movs	r3, #0
 801216c:	6063      	str	r3, [r4, #4]
 801216e:	6923      	ldr	r3, [r4, #16]
 8012170:	6023      	str	r3, [r4, #0]
 8012172:	89a3      	ldrh	r3, [r4, #12]
 8012174:	f043 0308 	orr.w	r3, r3, #8
 8012178:	81a3      	strh	r3, [r4, #12]
 801217a:	6923      	ldr	r3, [r4, #16]
 801217c:	b94b      	cbnz	r3, 8012192 <__swsetup_r+0x7a>
 801217e:	89a3      	ldrh	r3, [r4, #12]
 8012180:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012188:	d003      	beq.n	8012192 <__swsetup_r+0x7a>
 801218a:	4621      	mov	r1, r4
 801218c:	4628      	mov	r0, r5
 801218e:	f000 f883 	bl	8012298 <__smakebuf_r>
 8012192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012196:	f013 0201 	ands.w	r2, r3, #1
 801219a:	d00a      	beq.n	80121b2 <__swsetup_r+0x9a>
 801219c:	2200      	movs	r2, #0
 801219e:	60a2      	str	r2, [r4, #8]
 80121a0:	6962      	ldr	r2, [r4, #20]
 80121a2:	4252      	negs	r2, r2
 80121a4:	61a2      	str	r2, [r4, #24]
 80121a6:	6922      	ldr	r2, [r4, #16]
 80121a8:	b942      	cbnz	r2, 80121bc <__swsetup_r+0xa4>
 80121aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80121ae:	d1c5      	bne.n	801213c <__swsetup_r+0x24>
 80121b0:	bd38      	pop	{r3, r4, r5, pc}
 80121b2:	0799      	lsls	r1, r3, #30
 80121b4:	bf58      	it	pl
 80121b6:	6962      	ldrpl	r2, [r4, #20]
 80121b8:	60a2      	str	r2, [r4, #8]
 80121ba:	e7f4      	b.n	80121a6 <__swsetup_r+0x8e>
 80121bc:	2000      	movs	r0, #0
 80121be:	e7f7      	b.n	80121b0 <__swsetup_r+0x98>
 80121c0:	20000124 	.word	0x20000124

080121c4 <_raise_r>:
 80121c4:	291f      	cmp	r1, #31
 80121c6:	b538      	push	{r3, r4, r5, lr}
 80121c8:	4605      	mov	r5, r0
 80121ca:	460c      	mov	r4, r1
 80121cc:	d904      	bls.n	80121d8 <_raise_r+0x14>
 80121ce:	2316      	movs	r3, #22
 80121d0:	6003      	str	r3, [r0, #0]
 80121d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80121d6:	bd38      	pop	{r3, r4, r5, pc}
 80121d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80121da:	b112      	cbz	r2, 80121e2 <_raise_r+0x1e>
 80121dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80121e0:	b94b      	cbnz	r3, 80121f6 <_raise_r+0x32>
 80121e2:	4628      	mov	r0, r5
 80121e4:	f000 f830 	bl	8012248 <_getpid_r>
 80121e8:	4622      	mov	r2, r4
 80121ea:	4601      	mov	r1, r0
 80121ec:	4628      	mov	r0, r5
 80121ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121f2:	f000 b817 	b.w	8012224 <_kill_r>
 80121f6:	2b01      	cmp	r3, #1
 80121f8:	d00a      	beq.n	8012210 <_raise_r+0x4c>
 80121fa:	1c59      	adds	r1, r3, #1
 80121fc:	d103      	bne.n	8012206 <_raise_r+0x42>
 80121fe:	2316      	movs	r3, #22
 8012200:	6003      	str	r3, [r0, #0]
 8012202:	2001      	movs	r0, #1
 8012204:	e7e7      	b.n	80121d6 <_raise_r+0x12>
 8012206:	2100      	movs	r1, #0
 8012208:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801220c:	4620      	mov	r0, r4
 801220e:	4798      	blx	r3
 8012210:	2000      	movs	r0, #0
 8012212:	e7e0      	b.n	80121d6 <_raise_r+0x12>

08012214 <raise>:
 8012214:	4b02      	ldr	r3, [pc, #8]	@ (8012220 <raise+0xc>)
 8012216:	4601      	mov	r1, r0
 8012218:	6818      	ldr	r0, [r3, #0]
 801221a:	f7ff bfd3 	b.w	80121c4 <_raise_r>
 801221e:	bf00      	nop
 8012220:	20000124 	.word	0x20000124

08012224 <_kill_r>:
 8012224:	b538      	push	{r3, r4, r5, lr}
 8012226:	4d07      	ldr	r5, [pc, #28]	@ (8012244 <_kill_r+0x20>)
 8012228:	2300      	movs	r3, #0
 801222a:	4604      	mov	r4, r0
 801222c:	4608      	mov	r0, r1
 801222e:	4611      	mov	r1, r2
 8012230:	602b      	str	r3, [r5, #0]
 8012232:	f7f0 fe05 	bl	8002e40 <_kill>
 8012236:	1c43      	adds	r3, r0, #1
 8012238:	d102      	bne.n	8012240 <_kill_r+0x1c>
 801223a:	682b      	ldr	r3, [r5, #0]
 801223c:	b103      	cbz	r3, 8012240 <_kill_r+0x1c>
 801223e:	6023      	str	r3, [r4, #0]
 8012240:	bd38      	pop	{r3, r4, r5, pc}
 8012242:	bf00      	nop
 8012244:	200047bc 	.word	0x200047bc

08012248 <_getpid_r>:
 8012248:	f7f0 bdf2 	b.w	8002e30 <_getpid>

0801224c <__swhatbuf_r>:
 801224c:	b570      	push	{r4, r5, r6, lr}
 801224e:	460c      	mov	r4, r1
 8012250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012254:	2900      	cmp	r1, #0
 8012256:	b096      	sub	sp, #88	@ 0x58
 8012258:	4615      	mov	r5, r2
 801225a:	461e      	mov	r6, r3
 801225c:	da0d      	bge.n	801227a <__swhatbuf_r+0x2e>
 801225e:	89a3      	ldrh	r3, [r4, #12]
 8012260:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012264:	f04f 0100 	mov.w	r1, #0
 8012268:	bf14      	ite	ne
 801226a:	2340      	movne	r3, #64	@ 0x40
 801226c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012270:	2000      	movs	r0, #0
 8012272:	6031      	str	r1, [r6, #0]
 8012274:	602b      	str	r3, [r5, #0]
 8012276:	b016      	add	sp, #88	@ 0x58
 8012278:	bd70      	pop	{r4, r5, r6, pc}
 801227a:	466a      	mov	r2, sp
 801227c:	f000 f848 	bl	8012310 <_fstat_r>
 8012280:	2800      	cmp	r0, #0
 8012282:	dbec      	blt.n	801225e <__swhatbuf_r+0x12>
 8012284:	9901      	ldr	r1, [sp, #4]
 8012286:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801228a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801228e:	4259      	negs	r1, r3
 8012290:	4159      	adcs	r1, r3
 8012292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012296:	e7eb      	b.n	8012270 <__swhatbuf_r+0x24>

08012298 <__smakebuf_r>:
 8012298:	898b      	ldrh	r3, [r1, #12]
 801229a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801229c:	079d      	lsls	r5, r3, #30
 801229e:	4606      	mov	r6, r0
 80122a0:	460c      	mov	r4, r1
 80122a2:	d507      	bpl.n	80122b4 <__smakebuf_r+0x1c>
 80122a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80122a8:	6023      	str	r3, [r4, #0]
 80122aa:	6123      	str	r3, [r4, #16]
 80122ac:	2301      	movs	r3, #1
 80122ae:	6163      	str	r3, [r4, #20]
 80122b0:	b003      	add	sp, #12
 80122b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122b4:	ab01      	add	r3, sp, #4
 80122b6:	466a      	mov	r2, sp
 80122b8:	f7ff ffc8 	bl	801224c <__swhatbuf_r>
 80122bc:	9f00      	ldr	r7, [sp, #0]
 80122be:	4605      	mov	r5, r0
 80122c0:	4639      	mov	r1, r7
 80122c2:	4630      	mov	r0, r6
 80122c4:	f7ff f87c 	bl	80113c0 <_malloc_r>
 80122c8:	b948      	cbnz	r0, 80122de <__smakebuf_r+0x46>
 80122ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122ce:	059a      	lsls	r2, r3, #22
 80122d0:	d4ee      	bmi.n	80122b0 <__smakebuf_r+0x18>
 80122d2:	f023 0303 	bic.w	r3, r3, #3
 80122d6:	f043 0302 	orr.w	r3, r3, #2
 80122da:	81a3      	strh	r3, [r4, #12]
 80122dc:	e7e2      	b.n	80122a4 <__smakebuf_r+0xc>
 80122de:	89a3      	ldrh	r3, [r4, #12]
 80122e0:	6020      	str	r0, [r4, #0]
 80122e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122e6:	81a3      	strh	r3, [r4, #12]
 80122e8:	9b01      	ldr	r3, [sp, #4]
 80122ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80122ee:	b15b      	cbz	r3, 8012308 <__smakebuf_r+0x70>
 80122f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122f4:	4630      	mov	r0, r6
 80122f6:	f000 f81d 	bl	8012334 <_isatty_r>
 80122fa:	b128      	cbz	r0, 8012308 <__smakebuf_r+0x70>
 80122fc:	89a3      	ldrh	r3, [r4, #12]
 80122fe:	f023 0303 	bic.w	r3, r3, #3
 8012302:	f043 0301 	orr.w	r3, r3, #1
 8012306:	81a3      	strh	r3, [r4, #12]
 8012308:	89a3      	ldrh	r3, [r4, #12]
 801230a:	431d      	orrs	r5, r3
 801230c:	81a5      	strh	r5, [r4, #12]
 801230e:	e7cf      	b.n	80122b0 <__smakebuf_r+0x18>

08012310 <_fstat_r>:
 8012310:	b538      	push	{r3, r4, r5, lr}
 8012312:	4d07      	ldr	r5, [pc, #28]	@ (8012330 <_fstat_r+0x20>)
 8012314:	2300      	movs	r3, #0
 8012316:	4604      	mov	r4, r0
 8012318:	4608      	mov	r0, r1
 801231a:	4611      	mov	r1, r2
 801231c:	602b      	str	r3, [r5, #0]
 801231e:	f7f0 fdef 	bl	8002f00 <_fstat>
 8012322:	1c43      	adds	r3, r0, #1
 8012324:	d102      	bne.n	801232c <_fstat_r+0x1c>
 8012326:	682b      	ldr	r3, [r5, #0]
 8012328:	b103      	cbz	r3, 801232c <_fstat_r+0x1c>
 801232a:	6023      	str	r3, [r4, #0]
 801232c:	bd38      	pop	{r3, r4, r5, pc}
 801232e:	bf00      	nop
 8012330:	200047bc 	.word	0x200047bc

08012334 <_isatty_r>:
 8012334:	b538      	push	{r3, r4, r5, lr}
 8012336:	4d06      	ldr	r5, [pc, #24]	@ (8012350 <_isatty_r+0x1c>)
 8012338:	2300      	movs	r3, #0
 801233a:	4604      	mov	r4, r0
 801233c:	4608      	mov	r0, r1
 801233e:	602b      	str	r3, [r5, #0]
 8012340:	f7f0 fdee 	bl	8002f20 <_isatty>
 8012344:	1c43      	adds	r3, r0, #1
 8012346:	d102      	bne.n	801234e <_isatty_r+0x1a>
 8012348:	682b      	ldr	r3, [r5, #0]
 801234a:	b103      	cbz	r3, 801234e <_isatty_r+0x1a>
 801234c:	6023      	str	r3, [r4, #0]
 801234e:	bd38      	pop	{r3, r4, r5, pc}
 8012350:	200047bc 	.word	0x200047bc

08012354 <_init>:
 8012354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012356:	bf00      	nop
 8012358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801235a:	bc08      	pop	{r3}
 801235c:	469e      	mov	lr, r3
 801235e:	4770      	bx	lr

08012360 <_fini>:
 8012360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012362:	bf00      	nop
 8012364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012366:	bc08      	pop	{r3}
 8012368:	469e      	mov	lr, r3
 801236a:	4770      	bx	lr
