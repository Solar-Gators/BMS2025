
BMS2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008db0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08008f60  08008f60  00009f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f4  080090f4  0000b060  2**0
                  CONTENTS
  4 .ARM          00000000  080090f4  080090f4  0000b060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090f4  080090f4  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080090f4  080090f4  0000a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090fc  080090fc  0000a0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009100  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002870  20000060  08009160  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200028d0  08009160  0000b8d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ef8  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000475f  00000000  00000000  0002df88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  000326e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001671  00000000  00000000  000343e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cb6d  00000000  00000000  00035a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b8a  00000000  00000000  000625be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110545  00000000  00000000  00083148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019368d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e5c  00000000  00000000  001936d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0019b52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008f48 	.word	0x08008f48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08008f48 	.word	0x08008f48

080001f0 <_ZN7ADS7138C1EP19__I2C_HandleTypeDefh>:
#include "ADS7138.hpp"

#include <cstring>

ADS7138::ADS7138(I2C_HandleTypeDef *phi2c, uint8_t address) {
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	4613      	mov	r3, r2
 80001fc:	71fb      	strb	r3, [r7, #7]
    this->_phi2c = phi2c;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	68ba      	ldr	r2, [r7, #8]
 8000202:	601a      	str	r2, [r3, #0]
    this->_address = address;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	79fa      	ldrb	r2, [r7, #7]
 8000208:	711a      	strb	r2, [r3, #4]
}
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	4618      	mov	r0, r3
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <_ZN7ADS71384InitEv>:

HAL_StatusTypeDef ADS7138::Init() {
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    // Soft reset ADC
    uint8_t generalCfg = ADS7138_GENERAL_CFG_RST;
 8000220:	2301      	movs	r3, #1
 8000222:	73fb      	strb	r3, [r7, #15]
    if (WriteReg(ADS7138_Register::GENERAL_CFG, generalCfg) != HAL_OK)
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	461a      	mov	r2, r3
 8000228:	2101      	movs	r1, #1
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f93a 	bl	80004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	bf14      	ite	ne
 8000236:	2301      	movne	r3, #1
 8000238:	2300      	moveq	r3, #0
 800023a:	b2db      	uxtb	r3, r3
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <_ZN7ADS71384InitEv+0x2c>
        return HAL_ERROR;
 8000240:	2301      	movs	r3, #1
 8000242:	e024      	b.n	800028e <_ZN7ADS71384InitEv+0x76>

    // Wait for reset to complete
    while (ReadReg(ADS7138_Register::GENERAL_CFG, &generalCfg) != HAL_OK);
 8000244:	bf00      	nop
 8000246:	f107 030f 	add.w	r3, r7, #15
 800024a:	461a      	mov	r2, r3
 800024c:	2101      	movs	r1, #1
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f8e7 	bl	8000422 <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	bf14      	ite	ne
 800025a:	2301      	movne	r3, #1
 800025c:	2300      	moveq	r3, #0
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2b00      	cmp	r3, #0
 8000262:	d1f0      	bne.n	8000246 <_ZN7ADS71384InitEv+0x2e>

    uint8_t system_status;
    ReadReg(ADS7138_Register::SYSTEM_STATUS, &system_status);
 8000264:	f107 030e 	add.w	r3, r7, #14
 8000268:	461a      	mov	r2, r3
 800026a:	2100      	movs	r1, #0
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f000 f8d8 	bl	8000422 <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh>

    // Check that bit 7 (constant value) is set to 1
    if ((system_status & ADS7138_SYSTEM_STATUS_RSVD) == 0) {
 8000272:	7bbb      	ldrb	r3, [r7, #14]
 8000274:	b25b      	sxtb	r3, r3
 8000276:	2b00      	cmp	r3, #0
 8000278:	db01      	blt.n	800027e <_ZN7ADS71384InitEv+0x66>
        return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e007      	b.n	800028e <_ZN7ADS71384InitEv+0x76>
    }

    // Check that I2C is not in high-speed mode
    if ((system_status & ADS7138_SYSTEM_I2C_SPEED) != 0) {
 800027e:	7bbb      	ldrb	r3, [r7, #14]
 8000280:	f003 0320 	and.w	r3, r3, #32
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <_ZN7ADS71384InitEv+0x74>
        return HAL_ERROR;
 8000288:	2301      	movs	r3, #1
 800028a:	e000      	b.n	800028e <_ZN7ADS71384InitEv+0x76>
    }

    return HAL_OK;
 800028c:	2300      	movs	r3, #0
}
 800028e:	4618      	mov	r0, r3
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}

08000296 <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType>:
/**
 * @brief Configure the data register
 * @param fix_pattern Enable fixed pattern mode
 * @param append_type Append channel id and/or status bits to data
*/
HAL_StatusTypeDef ADS7138::ConfigureData(bool fix_pattern, DataCfg_AppendType append_type) {
 8000296:	b580      	push	{r7, lr}
 8000298:	b084      	sub	sp, #16
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
 800029e:	460b      	mov	r3, r1
 80002a0:	70fb      	strb	r3, [r7, #3]
 80002a2:	4613      	mov	r3, r2
 80002a4:	70bb      	strb	r3, [r7, #2]
    uint8_t dataCfg = 0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	73fb      	strb	r3, [r7, #15]

    if (fix_pattern)
 80002aa:	78fb      	ldrb	r3, [r7, #3]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d003      	beq.n	80002b8 <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x22>
        dataCfg |= ADS7138_DATA_CFG_FIX_PAT;
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
 80002b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002b6:	73fb      	strb	r3, [r7, #15]

    dataCfg |= static_cast<uint8_t>(append_type);
 80002b8:	7bfa      	ldrb	r2, [r7, #15]
 80002ba:	78bb      	ldrb	r3, [r7, #2]
 80002bc:	4313      	orrs	r3, r2
 80002be:	73fb      	strb	r3, [r7, #15]

    if (WriteReg(ADS7138_Register::DATA_CFG, dataCfg) != HAL_OK)
 80002c0:	7bfb      	ldrb	r3, [r7, #15]
 80002c2:	461a      	mov	r2, r3
 80002c4:	2102      	movs	r1, #2
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f000 f8ec 	bl	80004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	bf14      	ite	ne
 80002d2:	2301      	movne	r3, #1
 80002d4:	2300      	moveq	r3, #0
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x4a>
        return HAL_ERROR;
 80002dc:	2301      	movs	r3, #1
 80002de:	e01d      	b.n	800031c <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x86>

    // Set internal variables
    _fix_pattern = fix_pattern;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	78fa      	ldrb	r2, [r7, #3]
 80002e4:	719a      	strb	r2, [r3, #6]
    _append_type = append_type;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	78ba      	ldrb	r2, [r7, #2]
 80002ea:	71da      	strb	r2, [r3, #7]

    // Read back data to verify write
    uint8_t readDataCfg;
    if (ReadReg(ADS7138_Register::DATA_CFG, &readDataCfg) != HAL_OK)
 80002ec:	f107 030e 	add.w	r3, r7, #14
 80002f0:	461a      	mov	r2, r3
 80002f2:	2102      	movs	r1, #2
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f000 f894 	bl	8000422 <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	bf14      	ite	ne
 8000300:	2301      	movne	r3, #1
 8000302:	2300      	moveq	r3, #0
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x78>
        return HAL_ERROR;
 800030a:	2301      	movs	r3, #1
 800030c:	e006      	b.n	800031c <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x86>
    if (readDataCfg != dataCfg)
 800030e:	7bbb      	ldrb	r3, [r7, #14]
 8000310:	7bfa      	ldrb	r2, [r7, #15]
 8000312:	429a      	cmp	r2, r3
 8000314:	d001      	beq.n	800031a <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x84>
        return HAL_ERROR;
 8000316:	2301      	movs	r3, #1
 8000318:	e000      	b.n	800031c <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType+0x86>

    return HAL_OK;
 800031a:	2300      	movs	r3, #0
}
 800031c:	4618      	mov	r0, r3
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <_ZN7ADS713815ConfigureOpmodeEb13ConvMode_Type>:
/**
 * @brief Configure ADC operational mode
 * @param conv_on_err If set to true, CRC error will change all inputs to analog and pause channel sequencing
 * @param conv_mode ADC conversion initiator mode, manual, autonomous, or turbo mode
*/
HAL_StatusTypeDef ADS7138::ConfigureOpmode(bool conv_on_err, ConvMode_Type conv_mode) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
 8000330:	4613      	mov	r3, r2
 8000332:	70bb      	strb	r3, [r7, #2]
    uint8_t opmodeCfg = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	73fb      	strb	r3, [r7, #15]

    if (conv_on_err)
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d003      	beq.n	8000346 <_ZN7ADS713815ConfigureOpmodeEb13ConvMode_Type+0x22>
        opmodeCfg |= ADS7138_OPMODE_CFG_CONV_ON_ERR;
 800033e:	7bfb      	ldrb	r3, [r7, #15]
 8000340:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000344:	73fb      	strb	r3, [r7, #15]

    opmodeCfg |= static_cast<uint8_t>(conv_mode);
 8000346:	7bfa      	ldrb	r2, [r7, #15]
 8000348:	78bb      	ldrb	r3, [r7, #2]
 800034a:	4313      	orrs	r3, r2
 800034c:	73fb      	strb	r3, [r7, #15]

    if (WriteReg(ADS7138_Register::OPMODE_CFG, opmodeCfg) != HAL_OK)
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	461a      	mov	r2, r3
 8000352:	2104      	movs	r1, #4
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f000 f8a5 	bl	80004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	bf14      	ite	ne
 8000360:	2301      	movne	r3, #1
 8000362:	2300      	moveq	r3, #0
 8000364:	b2db      	uxtb	r3, r3
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <_ZN7ADS713815ConfigureOpmodeEb13ConvMode_Type+0x4a>
        return HAL_ERROR;
 800036a:	2301      	movs	r3, #1
 800036c:	e003      	b.n	8000376 <_ZN7ADS713815ConfigureOpmodeEb13ConvMode_Type+0x52>

    _conv_mode = conv_mode;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	78ba      	ldrb	r2, [r7, #2]
 8000372:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8000374:	2300      	movs	r3, #0
}
 8000376:	4618      	mov	r0, r3
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <_ZN7ADS713826ConversionReadAutoSequenceEPth>:
/**
 * @brief Read conversion data from the ADC in auto-sequence mode. ADC must be in manual conversion mode
 * @param buf Buffer to store data. Data stored in 16-bit format
 * @param len Number of channels to read. Read will start at channel 0
*/
HAL_StatusTypeDef ADS7138::ConversionReadAutoSequence(uint16_t *buf, uint8_t len) {
 800037e:	b580      	push	{r7, lr}
 8000380:	b088      	sub	sp, #32
 8000382:	af02      	add	r7, sp, #8
 8000384:	60f8      	str	r0, [r7, #12]
 8000386:	60b9      	str	r1, [r7, #8]
 8000388:	4613      	mov	r3, r2
 800038a:	71fb      	strb	r3, [r7, #7]
    if (len > 8)
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	2b08      	cmp	r3, #8
 8000390:	d901      	bls.n	8000396 <_ZN7ADS713826ConversionReadAutoSequenceEPth+0x18>
        return HAL_ERROR;
 8000392:	2301      	movs	r3, #1
 8000394:	e041      	b.n	800041a <_ZN7ADS713826ConversionReadAutoSequenceEPth+0x9c>

    if (_conv_mode != ConvMode_Type::MANUAL)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	795b      	ldrb	r3, [r3, #5]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <_ZN7ADS713826ConversionReadAutoSequenceEPth+0x24>
        return HAL_ERROR;
 800039e:	2301      	movs	r3, #1
 80003a0:	e03b      	b.n	800041a <_ZN7ADS713826ConversionReadAutoSequenceEPth+0x9c>

    // Start sequence, scan in auto sequence mode
    WriteReg(ADS7138_Register::SEQUENCE_CFG,
 80003a2:	2211      	movs	r2, #17
 80003a4:	2110      	movs	r1, #16
 80003a6:	68f8      	ldr	r0, [r7, #12]
 80003a8:	f000 f87c 	bl	80004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>
                ADS7138_SEQUENCE_CFG_SEQ_START | 0x1);

    // Read conversion data
    HAL_I2C_Master_Receive(_phi2c,
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	6818      	ldr	r0, [r3, #0]
                            _address << 1,
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	791b      	ldrb	r3, [r3, #4]
    HAL_I2C_Master_Receive(_phi2c,
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	b299      	uxth	r1, r3
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	b29b      	uxth	r3, r3
 80003c0:	f04f 32ff 	mov.w	r2, #4294967295
 80003c4:	9200      	str	r2, [sp, #0]
 80003c6:	68ba      	ldr	r2, [r7, #8]
 80003c8:	f002 fddc 	bl	8002f84 <HAL_I2C_Master_Receive>
                            reinterpret_cast<uint8_t*>(buf),
                            2 * len,
                            HAL_MAX_DELAY);

    // Swap endianness of each item in buffer
    for (int i = 0; i < len; i++) {
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	e019      	b.n	8000406 <_ZN7ADS713826ConversionReadAutoSequenceEPth+0x88>
        buf[i] = (buf[i] << 8) | (buf[i] >> 8);
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	68ba      	ldr	r2, [r7, #8]
 80003d8:	4413      	add	r3, r2
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	021b      	lsls	r3, r3, #8
 80003de:	b21a      	sxth	r2, r3
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	440b      	add	r3, r1
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	0a1b      	lsrs	r3, r3, #8
 80003ec:	b29b      	uxth	r3, r3
 80003ee:	b21b      	sxth	r3, r3
 80003f0:	4313      	orrs	r3, r2
 80003f2:	b219      	sxth	r1, r3
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	68ba      	ldr	r2, [r7, #8]
 80003fa:	4413      	add	r3, r2
 80003fc:	b28a      	uxth	r2, r1
 80003fe:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < len; i++) {
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	3301      	adds	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	429a      	cmp	r2, r3
 800040c:	dbe1      	blt.n	80003d2 <_ZN7ADS713826ConversionReadAutoSequenceEPth+0x54>
    }

    // Stop sequence and switch to manual select mode
    WriteReg(ADS7138_Register::SEQUENCE_CFG, 0x0);
 800040e:	2200      	movs	r2, #0
 8000410:	2110      	movs	r1, #16
 8000412:	68f8      	ldr	r0, [r7, #12]
 8000414:	f000 f846 	bl	80004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>

    return HAL_OK;
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh>:
    *data = (dataMSB << 8) | dataLSB;

    return HAL_OK;
}

HAL_StatusTypeDef ADS7138::ReadReg(ADS7138_Register reg, uint8_t *data) {
 8000422:	b580      	push	{r7, lr}
 8000424:	b088      	sub	sp, #32
 8000426:	af02      	add	r7, sp, #8
 8000428:	60f8      	str	r0, [r7, #12]
 800042a:	460b      	mov	r3, r1
 800042c:	607a      	str	r2, [r7, #4]
 800042e:	72fb      	strb	r3, [r7, #11]
    uint8_t txData[2] = {static_cast<uint8_t>(ADS7138_Opcode::READ),
 8000430:	2300      	movs	r3, #0
 8000432:	82bb      	strh	r3, [r7, #20]
 8000434:	2310      	movs	r3, #16
 8000436:	753b      	strb	r3, [r7, #20]
                        static_cast<uint8_t>(reg)};
 8000438:	7afb      	ldrb	r3, [r7, #11]
 800043a:	757b      	strb	r3, [r7, #21]

    if (HAL_I2C_Master_Transmit(_phi2c, _address << 1, txData, 2, HAL_MAX_DELAY) != HAL_OK) {
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	6818      	ldr	r0, [r3, #0]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	b299      	uxth	r1, r3
 8000448:	f107 0214 	add.w	r2, r7, #20
 800044c:	f04f 33ff 	mov.w	r3, #4294967295
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	2302      	movs	r3, #2
 8000454:	f002 fc7e 	bl	8002d54 <HAL_I2C_Master_Transmit>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	bf14      	ite	ne
 800045e:	2301      	movne	r3, #1
 8000460:	2300      	moveq	r3, #0
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh+0x4a>
        return HAL_ERROR;
 8000468:	2301      	movs	r3, #1
 800046a:	e017      	b.n	800049c <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh+0x7a>
    }

    if (HAL_I2C_Master_Receive(_phi2c, _address << 1, data, 1, HAL_MAX_DELAY) != HAL_OK) {
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	6818      	ldr	r0, [r3, #0]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	791b      	ldrb	r3, [r3, #4]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	b299      	uxth	r1, r3
 8000478:	f04f 33ff 	mov.w	r3, #4294967295
 800047c:	9300      	str	r3, [sp, #0]
 800047e:	2301      	movs	r3, #1
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	f002 fd7f 	bl	8002f84 <HAL_I2C_Master_Receive>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	bf14      	ite	ne
 800048c:	2301      	movne	r3, #1
 800048e:	2300      	moveq	r3, #0
 8000490:	b2db      	uxtb	r3, r3
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh+0x78>
        return HAL_ERROR;
 8000496:	2301      	movs	r3, #1
 8000498:	e000      	b.n	800049c <_ZN7ADS71387ReadRegE16ADS7138_RegisterPh+0x7a>
    }

    return HAL_OK;
 800049a:	2300      	movs	r3, #0
}
 800049c:	4618      	mov	r0, r3
 800049e:	3718      	adds	r7, #24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>:

HAL_StatusTypeDef ADS7138::WriteReg(ADS7138_Register reg, uint8_t data) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	70fb      	strb	r3, [r7, #3]
 80004b0:	4613      	mov	r3, r2
 80004b2:	70bb      	strb	r3, [r7, #2]
    uint8_t txData[3] = {static_cast<uint8_t>(ADS7138_Opcode::WRITE),
 80004b4:	f107 030c 	add.w	r3, r7, #12
 80004b8:	2100      	movs	r1, #0
 80004ba:	460a      	mov	r2, r1
 80004bc:	801a      	strh	r2, [r3, #0]
 80004be:	460a      	mov	r2, r1
 80004c0:	709a      	strb	r2, [r3, #2]
 80004c2:	2308      	movs	r3, #8
 80004c4:	733b      	strb	r3, [r7, #12]
                        static_cast<uint8_t>(reg),
                        data};
 80004c6:	78fb      	ldrb	r3, [r7, #3]
 80004c8:	737b      	strb	r3, [r7, #13]
 80004ca:	78bb      	ldrb	r3, [r7, #2]
 80004cc:	73bb      	strb	r3, [r7, #14]

    if (HAL_I2C_Master_Transmit(_phi2c, _address << 1, txData, 3, HAL_MAX_DELAY) != HAL_OK) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6818      	ldr	r0, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	b299      	uxth	r1, r3
 80004da:	f107 020c 	add.w	r2, r7, #12
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2303      	movs	r3, #3
 80004e6:	f002 fc35 	bl	8002d54 <HAL_I2C_Master_Transmit>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	bf14      	ite	ne
 80004f0:	2301      	movne	r3, #1
 80004f2:	2300      	moveq	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <_ZN7ADS71388WriteRegE16ADS7138_Registerh+0x5a>
        return HAL_ERROR;
 80004fa:	2301      	movs	r3, #1
 80004fc:	e000      	b.n	8000500 <_ZN7ADS71388WriteRegE16ADS7138_Registerh+0x5c>

    }

    return HAL_OK;
 80004fe:	2300      	movs	r3, #0
}
 8000500:	4618      	mov	r0, r3
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <_ZN7ADS713818AutoSelectChannelsEh>:
    return HAL_OK;
}


// TODO: Get rid of this
HAL_StatusTypeDef ADS7138::AutoSelectChannels(uint8_t channels) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	70fb      	strb	r3, [r7, #3]
    if (WriteReg(ADS7138_Register::AUTO_SEQ_CH_SEL, channels) != HAL_OK)
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	461a      	mov	r2, r3
 8000518:	2112      	movs	r1, #18
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f7ff ffc2 	bl	80004a4 <_ZN7ADS71388WriteRegE16ADS7138_Registerh>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	bf14      	ite	ne
 8000526:	2301      	movne	r3, #1
 8000528:	2300      	moveq	r3, #0
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <_ZN7ADS713818AutoSelectChannelsEh+0x2c>
        return HAL_ERROR;
 8000530:	2301      	movs	r3, #1
 8000532:	e000      	b.n	8000536 <_ZN7ADS713818AutoSelectChannelsEh+0x2e>

    return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <_Z13CPP_UserSetupv>:
};
union FloatBytes fb;



void CPP_UserSetup(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    // Make sure that timer priorities are configured correctly
    HAL_Delay(10);
 8000544:	200a      	movs	r0, #10
 8000546:	f001 f981 	bl	800184c <HAL_Delay>

    //set conactors to be off
    contactors_on = false;
 800054a:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <_Z13CPP_UserSetupv+0x38>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]


    //setup current ADCs
    adc.Init();
 8000550:	480a      	ldr	r0, [pc, #40]	@ (800057c <_Z13CPP_UserSetupv+0x3c>)
 8000552:	f7ff fe61 	bl	8000218 <_ZN7ADS71384InitEv>
    adc.ConfigureOpmode(false, ConvMode_Type::MANUAL);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	4808      	ldr	r0, [pc, #32]	@ (800057c <_Z13CPP_UserSetupv+0x3c>)
 800055c:	f7ff fee2 	bl	8000324 <_ZN7ADS713815ConfigureOpmodeEb13ConvMode_Type>
    adc.ConfigureData(false, DataCfg_AppendType::ID);
 8000560:	2210      	movs	r2, #16
 8000562:	2100      	movs	r1, #0
 8000564:	4805      	ldr	r0, [pc, #20]	@ (800057c <_Z13CPP_UserSetupv+0x3c>)
 8000566:	f7ff fe96 	bl	8000296 <_ZN7ADS713813ConfigureDataEb18DataCfg_AppendType>
    adc.AutoSelectChannels((0x1 << 0));
 800056a:	2101      	movs	r1, #1
 800056c:	4803      	ldr	r0, [pc, #12]	@ (800057c <_Z13CPP_UserSetupv+0x3c>)
 800056e:	f7ff ffcb 	bl	8000508 <_ZN7ADS713818AutoSelectChannelsEh>

}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200000a0 	.word	0x200000a0
 800057c:	200000a4 	.word	0x200000a4

08000580 <_Z16StartDefaultTaskPv>:


void StartDefaultTask(void *argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//toggle OK Led at 1Hz
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000588:	2101      	movs	r1, #1
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f002 faa9 	bl	8002ae4 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000592:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000596:	f005 ff1b 	bl	80063d0 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800059a:	bf00      	nop
 800059c:	e7f4      	b.n	8000588 <_Z16StartDefaultTaskPv+0x8>
	...

080005a0 <_Z11StartTask02Pv>:
  }
  /* USER CODE END 5 */
}

void StartTask02(void *argument)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]


  for (;;)
  {
	  //take current readings
	  adc.ConversionReadAutoSequence(&rawData, 1);
 80005a8:	f107 030e 	add.w	r3, r7, #14
 80005ac:	2201      	movs	r2, #1
 80005ae:	4619      	mov	r1, r3
 80005b0:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <_Z11StartTask02Pv+0x34>)
 80005b2:	f7ff fee4 	bl	800037e <_ZN7ADS713826ConversionReadAutoSequenceEPth>
	  fb.value = ADCToCurrentL(rawData);
 80005b6:	89fb      	ldrh	r3, [r7, #14]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f8e1 	bl	8000780 <_Z13ADCToCurrentLt>
 80005be:	eef0 7a40 	vmov.f32	s15, s0
 80005c2:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <_Z11StartTask02Pv+0x38>)
 80005c4:	edc3 7a00 	vstr	s15, [r3]



    osDelay(20);
 80005c8:	2014      	movs	r0, #20
 80005ca:	f005 ff01 	bl	80063d0 <osDelay>
	  adc.ConversionReadAutoSequence(&rawData, 1);
 80005ce:	bf00      	nop
 80005d0:	e7ea      	b.n	80005a8 <_Z11StartTask02Pv+0x8>
 80005d2:	bf00      	nop
 80005d4:	200000a4 	.word	0x200000a4
 80005d8:	200000ac 	.word	0x200000ac

080005dc <_Z11StartTask03Pv>:
  }
  /* USER CODE END StartTask02 */
}
//voltage stuff
void StartTask03(void *argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{

	  osDelay(50);
 80005e4:	2032      	movs	r0, #50	@ 0x32
 80005e6:	f005 fef3 	bl	80063d0 <osDelay>
 80005ea:	e7fb      	b.n	80005e4 <_Z11StartTask03Pv+0x8>

080005ec <_Z11StartTask04Pv>:
  /* USER CODE END StartTask03 */
}


void StartTask04(void *argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  for(;;)
  {



    osDelay(100);
 80005f4:	2064      	movs	r0, #100	@ 0x64
 80005f6:	f005 feeb 	bl	80063d0 <osDelay>
 80005fa:	e7fb      	b.n	80005f4 <_Z11StartTask04Pv+0x8>

080005fc <_Z11StartTask05Pv>:
  /* USER CODE END StartTask04 */
}


void StartTask05(void *argument)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b090      	sub	sp, #64	@ 0x40
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]

  //setup CAN TX header
  CAN_TxHeaderTypeDef TxHeader;
  uint8_t TxData[8] = { 0 };
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  uint32_t TxMailbox = { 0 };
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]

  TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  TxHeader.StdId = 0x4; // 11 bit Identifier
 8000614:	2304      	movs	r3, #4
 8000616:	617b      	str	r3, [r7, #20]
  TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000618:	2300      	movs	r3, #0
 800061a:	623b      	str	r3, [r7, #32]
  TxHeader.DLC = 8; // 8 bytes being transmitted
 800061c:	2308      	movs	r3, #8
 800061e:	627b      	str	r3, [r7, #36]	@ 0x24
  TxData[0] = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	733b      	strb	r3, [r7, #12]

  //setup stuff for tracking outbound message count
  int HAL_CAN_BUSY = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t messages_sent = 0;
 8000628:	f04f 0200 	mov.w	r2, #0
 800062c:	f04f 0300 	mov.w	r3, #0
 8000630:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Infinite loop */
  for(;;)
  {
	  //setup the union
	  TxData[1] = fb.bytes[0];
 8000634:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <_Z11StartTask05Pv+0xb4>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	737b      	strb	r3, [r7, #13]
	  TxData[2] = fb.bytes[1];
 800063a:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <_Z11StartTask05Pv+0xb4>)
 800063c:	785b      	ldrb	r3, [r3, #1]
 800063e:	73bb      	strb	r3, [r7, #14]
	  TxData[3] = fb.bytes[2];
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <_Z11StartTask05Pv+0xb4>)
 8000642:	789b      	ldrb	r3, [r3, #2]
 8000644:	73fb      	strb	r3, [r7, #15]
	  TxData[4] = fb.bytes[3];
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <_Z11StartTask05Pv+0xb4>)
 8000648:	78db      	ldrb	r3, [r3, #3]
 800064a:	743b      	strb	r3, [r7, #16]

	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 800064c:	bf00      	nop
 800064e:	4819      	ldr	r0, [pc, #100]	@ (80006b4 <_Z11StartTask05Pv+0xb8>)
 8000650:	f001 fc10 	bl	8001e74 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf0c      	ite	eq
 800065a:	2301      	moveq	r3, #1
 800065c:	2300      	movne	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1f4      	bne.n	800064e <_Z11StartTask05Pv+0x52>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	f107 020c 	add.w	r2, r7, #12
 800066c:	f107 0114 	add.w	r1, r7, #20
 8000670:	4810      	ldr	r0, [pc, #64]	@ (80006b4 <_Z11StartTask05Pv+0xb8>)
 8000672:	f001 fb2f 	bl	8001cd4 <HAL_CAN_AddTxMessage>
 8000676:	4603      	mov	r3, r0
 8000678:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  messages_sent++;
 800067c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000680:	1c54      	adds	r4, r2, #1
 8000682:	f143 0500 	adc.w	r5, r3, #0
 8000686:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	  if (status == HAL_ERROR)
 800068a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800068e:	2b01      	cmp	r3, #1
 8000690:	d102      	bne.n	8000698 <_Z11StartTask05Pv+0x9c>
	  {
		  Error_Handler();
 8000692:	f000 fcdf 	bl	8001054 <Error_Handler>
 8000696:	e006      	b.n	80006a6 <_Z11StartTask05Pv+0xaa>
	  }
	  else if (status == HAL_BUSY)
 8000698:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800069c:	2b02      	cmp	r3, #2
 800069e:	d102      	bne.n	80006a6 <_Z11StartTask05Pv+0xaa>
	  {
	  HAL_CAN_BUSY++;
 80006a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006a2:	3301      	adds	r3, #1
 80006a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  }


    osDelay(100);
 80006a6:	2064      	movs	r0, #100	@ 0x64
 80006a8:	f005 fe92 	bl	80063d0 <osDelay>
  }
 80006ac:	e7c2      	b.n	8000634 <_Z11StartTask05Pv+0x38>
 80006ae:	bf00      	nop
 80006b0:	200000ac 	.word	0x200000ac
 80006b4:	200000b0 	.word	0x200000b0

080006b8 <_Z11StartTask06Pv>:

}

void StartTask06(void *argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
	  if(contactors_on == true){
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <_Z11StartTask06Pv+0x54>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10e      	bne.n	80006e6 <_Z11StartTask06Pv+0x2e>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2104      	movs	r1, #4
 80006cc:	4810      	ldr	r0, [pc, #64]	@ (8000710 <_Z11StartTask06Pv+0x58>)
 80006ce:	f002 f9f1 	bl	8002ab4 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80006d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006d6:	f001 f8b9 	bl	800184c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2101      	movs	r1, #1
 80006de:	480c      	ldr	r0, [pc, #48]	@ (8000710 <_Z11StartTask06Pv+0x58>)
 80006e0:	f002 f9e8 	bl	8002ab4 <HAL_GPIO_WritePin>
 80006e4:	e00d      	b.n	8000702 <_Z11StartTask06Pv+0x4a>
	  }else{

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2104      	movs	r1, #4
 80006ea:	4809      	ldr	r0, [pc, #36]	@ (8000710 <_Z11StartTask06Pv+0x58>)
 80006ec:	f002 f9e2 	bl	8002ab4 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80006f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006f4:	f001 f8aa 	bl	800184c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2101      	movs	r1, #1
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <_Z11StartTask06Pv+0x58>)
 80006fe:	f002 f9d9 	bl	8002ab4 <HAL_GPIO_WritePin>
	  }
      osDelay(10);
 8000702:	200a      	movs	r0, #10
 8000704:	f005 fe64 	bl	80063d0 <osDelay>
	  if(contactors_on == true){
 8000708:	e7da      	b.n	80006c0 <_Z11StartTask06Pv+0x8>
 800070a:	bf00      	nop
 800070c:	200000a0 	.word	0x200000a0
 8000710:	48000400 	.word	0x48000400

08000714 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END StartTask06 */
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800071e:	4a16      	ldr	r2, [pc, #88]	@ (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000720:	2100      	movs	r1, #0
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f001 fbdb 	bl	8001ede <HAL_CAN_GetRxMessage>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	bf14      	ite	ne
 800072e:	2301      	movne	r3, #1
 8000730:	2300      	moveq	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
  {
    Error_Handler();
 8000738:	f000 fc8c 	bl	8001054 <Error_Handler>
  }

  if (RxHeader.StdId == 0x7FF){
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000744:	4293      	cmp	r3, r2
 8000746:	d110      	bne.n	800076a <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
	  if(RxData[0] == 1){
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d10c      	bne.n	800076a <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		  //ignition switch
		  if((RxData[1] & 0x80) != 0x00){
			  //preform shut down sequence
		  }

		  if((RxData[1] & 0x08) != 0x00){
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000752:	785b      	ldrb	r3, [r3, #1]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	2b00      	cmp	r3, #0
 800075a:	d003      	beq.n	8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
			  contactors_on = true; // turn brakes on
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]



	  }
  }
}
 8000762:	e002      	b.n	800076a <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
			  contactors_on = false; // turn breaks off
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000098 	.word	0x20000098
 8000778:	2000007c 	.word	0x2000007c
 800077c:	200000a0 	.word	0x200000a0

08000780 <_Z13ADCToCurrentLt>:

float ADCToCurrentL(uint16_t adc_val) {
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]

    // Constant offset for linear estimator
    static constexpr float b = -62.87;

    // Convert ADC value to current
    return (float)adc_val * m + b;
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	ee07 3a90 	vmov	s15, r3
 8000790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000794:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80007b4 <_Z13ADCToCurrentLt+0x34>
 8000798:	ee67 7a87 	vmul.f32	s15, s15, s14
 800079c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80007b8 <_Z13ADCToCurrentLt+0x38>
 80007a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 80007a4:	eeb0 0a67 	vmov.f32	s0, s15
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	3af84018 	.word	0x3af84018
 80007b8:	427b7ae1 	.word	0x427b7ae1

080007bc <_Z41__static_initialization_and_destruction_0ii>:
    // Constant offset for linear estimator
    static constexpr float b = -252.4;

    // Convert ADC value to current
    return (float)adc_val * m + b;
}
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d109      	bne.n	80007e0 <_Z41__static_initialization_and_destruction_0ii+0x24>
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d104      	bne.n	80007e0 <_Z41__static_initialization_and_destruction_0ii+0x24>
ADS7138 adc = ADS7138(&hi2c2, 0x10);
 80007d6:	2210      	movs	r2, #16
 80007d8:	4903      	ldr	r1, [pc, #12]	@ (80007e8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80007da:	4804      	ldr	r0, [pc, #16]	@ (80007ec <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80007dc:	f7ff fd08 	bl	80001f0 <_ZN7ADS7138C1EP19__I2C_HandleTypeDefh>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000100 	.word	0x20000100
 80007ec:	200000a4 	.word	0x200000a4

080007f0 <_GLOBAL__sub_I_RxHeader>:
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff ffdf 	bl	80007bc <_Z41__static_initialization_and_destruction_0ii>
 80007fe:	bd80      	pop	{r7, pc}

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 ffe9 	bl	80017da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f882 	bl	8000910 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f000 fb52 	bl	8000eb4 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8000810:	f000 f8de 	bl	80009d0 <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 8000814:	f000 f932 	bl	8000a7c <_ZL12MX_CAN2_Initv>
  MX_I2C2_Init();
 8000818:	f000 f96a 	bl	8000af0 <_ZL12MX_I2C2_Initv>
  MX_I2C3_Init();
 800081c:	f000 f9b6 	bl	8000b8c <_ZL12MX_I2C3_Initv>
  MX_I2C4_Init();
 8000820:	f000 fa02 	bl	8000c28 <_ZL12MX_I2C4_Initv>
  MX_TIM2_Init();
 8000824:	f000 fa4e 	bl	8000cc4 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000828:	f000 fab4 	bl	8000d94 <_ZL12MX_TIM3_Initv>
  MX_USB_OTG_FS_HCD_Init();
 800082c:	f000 fb1c 	bl	8000e68 <_ZL22MX_USB_OTG_FS_HCD_Initv>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000830:	4824      	ldr	r0, [pc, #144]	@ (80008c4 <main+0xc4>)
 8000832:	f001 fa0b 	bl	8001c4c <HAL_CAN_Start>




  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000836:	2102      	movs	r1, #2
 8000838:	4822      	ldr	r0, [pc, #136]	@ (80008c4 <main+0xc4>)
 800083a:	f001 fc72 	bl	8002122 <HAL_CAN_ActivateNotification>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	bf14      	ite	ne
 8000844:	2301      	movne	r3, #1
 8000846:	2300      	moveq	r3, #0
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <main+0x52>
  {
	  Error_Handler();
 800084e:	f000 fc01 	bl	8001054 <Error_Handler>
  }

  CPP_UserSetup();
 8000852:	f7ff fe75 	bl	8000540 <_Z13CPP_UserSetupv>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000856:	f005 fcdf 	bl	8006218 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800085a:	4a1b      	ldr	r2, [pc, #108]	@ (80008c8 <main+0xc8>)
 800085c:	2100      	movs	r1, #0
 800085e:	481b      	ldr	r0, [pc, #108]	@ (80008cc <main+0xcc>)
 8000860:	f005 fd24 	bl	80062ac <osThreadNew>
 8000864:	4603      	mov	r3, r0
 8000866:	4a1a      	ldr	r2, [pc, #104]	@ (80008d0 <main+0xd0>)
 8000868:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(StartTask02, NULL, &Voltage_Monitor_attributes);
 800086a:	4a1a      	ldr	r2, [pc, #104]	@ (80008d4 <main+0xd4>)
 800086c:	2100      	movs	r1, #0
 800086e:	481a      	ldr	r0, [pc, #104]	@ (80008d8 <main+0xd8>)
 8000870:	f005 fd1c 	bl	80062ac <osThreadNew>
 8000874:	4603      	mov	r3, r0
 8000876:	4a19      	ldr	r2, [pc, #100]	@ (80008dc <main+0xdc>)
 8000878:	6013      	str	r3, [r2, #0]

  /* creation of Temp_Monitoring */
  Temp_MonitoringHandle = osThreadNew(StartTask03, NULL, &Temp_Monitoring_attributes);
 800087a:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <main+0xe0>)
 800087c:	2100      	movs	r1, #0
 800087e:	4819      	ldr	r0, [pc, #100]	@ (80008e4 <main+0xe4>)
 8000880:	f005 fd14 	bl	80062ac <osThreadNew>
 8000884:	4603      	mov	r3, r0
 8000886:	4a18      	ldr	r2, [pc, #96]	@ (80008e8 <main+0xe8>)
 8000888:	6013      	str	r3, [r2, #0]

  /* creation of Current_Monitor */
  Current_MonitorHandle = osThreadNew(StartTask04, NULL, &Current_Monitor_attributes);
 800088a:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <main+0xec>)
 800088c:	2100      	movs	r1, #0
 800088e:	4818      	ldr	r0, [pc, #96]	@ (80008f0 <main+0xf0>)
 8000890:	f005 fd0c 	bl	80062ac <osThreadNew>
 8000894:	4603      	mov	r3, r0
 8000896:	4a17      	ldr	r2, [pc, #92]	@ (80008f4 <main+0xf4>)
 8000898:	6013      	str	r3, [r2, #0]

  /* creation of Battery_Data_Tr */
  Battery_Data_TrHandle = osThreadNew(StartTask05, NULL, &Battery_Data_Tr_attributes);
 800089a:	4a17      	ldr	r2, [pc, #92]	@ (80008f8 <main+0xf8>)
 800089c:	2100      	movs	r1, #0
 800089e:	4817      	ldr	r0, [pc, #92]	@ (80008fc <main+0xfc>)
 80008a0:	f005 fd04 	bl	80062ac <osThreadNew>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4a16      	ldr	r2, [pc, #88]	@ (8000900 <main+0x100>)
 80008a8:	6013      	str	r3, [r2, #0]

  /* creation of Update_Fan_Spee */
  Update_Fan_SpeeHandle = osThreadNew(StartTask06, NULL, &Update_Fan_Spee_attributes);
 80008aa:	4a16      	ldr	r2, [pc, #88]	@ (8000904 <main+0x104>)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4816      	ldr	r0, [pc, #88]	@ (8000908 <main+0x108>)
 80008b0:	f005 fcfc 	bl	80062ac <osThreadNew>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4a15      	ldr	r2, [pc, #84]	@ (800090c <main+0x10c>)
 80008b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008ba:	f005 fcd1 	bl	8006260 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80008be:	bf00      	nop
 80008c0:	e7fd      	b.n	80008be <main+0xbe>
 80008c2:	bf00      	nop
 80008c4:	200000b0 	.word	0x200000b0
 80008c8:	08008fd4 	.word	0x08008fd4
 80008cc:	08000581 	.word	0x08000581
 80008d0:	200005b4 	.word	0x200005b4
 80008d4:	08008ff8 	.word	0x08008ff8
 80008d8:	080005a1 	.word	0x080005a1
 80008dc:	200005b8 	.word	0x200005b8
 80008e0:	0800901c 	.word	0x0800901c
 80008e4:	080005dd 	.word	0x080005dd
 80008e8:	200005bc 	.word	0x200005bc
 80008ec:	08009040 	.word	0x08009040
 80008f0:	080005ed 	.word	0x080005ed
 80008f4:	200005c0 	.word	0x200005c0
 80008f8:	08009064 	.word	0x08009064
 80008fc:	080005fd 	.word	0x080005fd
 8000900:	200005c4 	.word	0x200005c4
 8000904:	08009088 	.word	0x08009088
 8000908:	080006b9 	.word	0x080006b9
 800090c:	200005c8 	.word	0x200005c8

08000910 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b096      	sub	sp, #88	@ 0x58
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2244      	movs	r2, #68	@ 0x44
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f008 fa2a 	bl	8008d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	463b      	mov	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000932:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000936:	f002 ff67 	bl	8003808 <HAL_PWREx_ControlVoltageScaling>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	bf14      	ite	ne
 8000940:	2301      	movne	r3, #1
 8000942:	2300      	moveq	r3, #0
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800094a:	f000 fb83 	bl	8001054 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800094e:	2301      	movs	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000952:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000956:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000958:	2302      	movs	r3, #2
 800095a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095c:	2303      	movs	r3, #3
 800095e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000960:	2301      	movs	r3, #1
 8000962:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000964:	2308      	movs	r3, #8
 8000966:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000968:	2302      	movs	r3, #2
 800096a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000970:	2302      	movs	r3, #2
 8000972:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4618      	mov	r0, r3
 800097a:	f002 ffab 	bl	80038d4 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	bf14      	ite	ne
 8000984:	2301      	movne	r3, #1
 8000986:	2300      	moveq	r3, #0
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 800098e:	f000 fb61 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	230f      	movs	r3, #15
 8000994:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000996:	2303      	movs	r3, #3
 8000998:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800099e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80009a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	2103      	movs	r1, #3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f003 fbab 	bl	8004108 <HAL_RCC_ClockConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bf14      	ite	ne
 80009b8:	2301      	movne	r3, #1
 80009ba:	2300      	moveq	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 80009c2:	f000 fb47 	bl	8001054 <Error_Handler>
  }
}
 80009c6:	bf00      	nop
 80009c8:	3758      	adds	r7, #88	@ 0x58
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009d6:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 80009d8:	4a27      	ldr	r2, [pc, #156]	@ (8000a78 <_ZL12MX_CAN1_Initv+0xa8>)
 80009da:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80009dc:	4b25      	ldr	r3, [pc, #148]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 80009de:	2202      	movs	r2, #2
 80009e0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009e2:	4b24      	ldr	r3, [pc, #144]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009e8:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 80009f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009f4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a14:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a20:	4814      	ldr	r0, [pc, #80]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a22:	f000 ff37 	bl	8001894 <HAL_CAN_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	bf14      	ite	ne
 8000a2c:	2301      	movne	r3, #1
 8000a2e:	2300      	moveq	r3, #0
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 8000a36:	f000 fb0d 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterBank = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000a5e:	230e      	movs	r3, #14
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <_ZL12MX_CAN1_Initv+0xa4>)
 8000a68:	f001 f810 	bl	8001a8c <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	@ 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200000b0 	.word	0x200000b0
 8000a78:	40006400 	.word	0x40006400

08000a7c <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000a80:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <_ZL12MX_CAN2_Initv+0x6c>)
 8000a82:	4a1a      	ldr	r2, [pc, #104]	@ (8000aec <_ZL12MX_CAN2_Initv+0x70>)
 8000a84:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 8000a86:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <_ZL12MX_CAN2_Initv+0x6c>)
 8000a88:	220a      	movs	r2, #10
 8000a8a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <_ZL12MX_CAN2_Initv+0x6c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <_ZL12MX_CAN2_Initv+0x6c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000a98:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <_ZL12MX_CAN2_Initv+0x6c>)
 8000a9a:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000a9e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <_ZL12MX_CAN2_Initv+0x6c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <_ZL12MX_CAN2_Initv+0x6c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <_ZL12MX_CAN2_Initv+0x6c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <_ZL12MX_CAN2_Initv+0x6c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <_ZL12MX_CAN2_Initv+0x6c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <_ZL12MX_CAN2_Initv+0x6c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <_ZL12MX_CAN2_Initv+0x6c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000aca:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <_ZL12MX_CAN2_Initv+0x6c>)
 8000acc:	f000 fee2 	bl	8001894 <HAL_CAN_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bf14      	ite	ne
 8000ad6:	2301      	movne	r3, #1
 8000ad8:	2300      	moveq	r3, #0
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 8000ae0:	f000 fab8 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200000d8 	.word	0x200000d8
 8000aec:	40006800 	.word	0x40006800

08000af0 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <_ZL12MX_I2C2_Initv+0x90>)
 8000af6:	4a23      	ldr	r2, [pc, #140]	@ (8000b84 <_ZL12MX_I2C2_Initv+0x94>)
 8000af8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <_ZL12MX_I2C2_Initv+0x90>)
 8000afc:	4a22      	ldr	r2, [pc, #136]	@ (8000b88 <_ZL12MX_I2C2_Initv+0x98>)
 8000afe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <_ZL12MX_I2C2_Initv+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b06:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <_ZL12MX_I2C2_Initv+0x90>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <_ZL12MX_I2C2_Initv+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b12:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <_ZL12MX_I2C2_Initv+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <_ZL12MX_I2C2_Initv+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <_ZL12MX_I2C2_Initv+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b24:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <_ZL12MX_I2C2_Initv+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b2a:	4815      	ldr	r0, [pc, #84]	@ (8000b80 <_ZL12MX_I2C2_Initv+0x90>)
 8000b2c:	f002 f877 	bl	8002c1e <HAL_I2C_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bf14      	ite	ne
 8000b36:	2301      	movne	r3, #1
 8000b38:	2300      	moveq	r3, #0
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8000b40:	f000 fa88 	bl	8001054 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b44:	2100      	movs	r1, #0
 8000b46:	480e      	ldr	r0, [pc, #56]	@ (8000b80 <_ZL12MX_I2C2_Initv+0x90>)
 8000b48:	f002 fdb8 	bl	80036bc <HAL_I2CEx_ConfigAnalogFilter>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	bf14      	ite	ne
 8000b52:	2301      	movne	r3, #1
 8000b54:	2300      	moveq	r3, #0
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8000b5c:	f000 fa7a 	bl	8001054 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <_ZL12MX_I2C2_Initv+0x90>)
 8000b64:	f002 fdf5 	bl	8003752 <HAL_I2CEx_ConfigDigitalFilter>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	bf14      	ite	ne
 8000b6e:	2301      	movne	r3, #1
 8000b70:	2300      	moveq	r3, #0
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8000b78:	f000 fa6c 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000100 	.word	0x20000100
 8000b84:	40005800 	.word	0x40005800
 8000b88:	00100d14 	.word	0x00100d14

08000b8c <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b90:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <_ZL12MX_I2C3_Initv+0x90>)
 8000b92:	4a23      	ldr	r2, [pc, #140]	@ (8000c20 <_ZL12MX_I2C3_Initv+0x94>)
 8000b94:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100D14;
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <_ZL12MX_I2C3_Initv+0x90>)
 8000b98:	4a22      	ldr	r2, [pc, #136]	@ (8000c24 <_ZL12MX_I2C3_Initv+0x98>)
 8000b9a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <_ZL12MX_I2C3_Initv+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <_ZL12MX_I2C3_Initv+0x90>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <_ZL12MX_I2C3_Initv+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <_ZL12MX_I2C3_Initv+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <_ZL12MX_I2C3_Initv+0x90>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <_ZL12MX_I2C3_Initv+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <_ZL12MX_I2C3_Initv+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bc6:	4815      	ldr	r0, [pc, #84]	@ (8000c1c <_ZL12MX_I2C3_Initv+0x90>)
 8000bc8:	f002 f829 	bl	8002c1e <HAL_I2C_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bf14      	ite	ne
 8000bd2:	2301      	movne	r3, #1
 8000bd4:	2300      	moveq	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8000bdc:	f000 fa3a 	bl	8001054 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480e      	ldr	r0, [pc, #56]	@ (8000c1c <_ZL12MX_I2C3_Initv+0x90>)
 8000be4:	f002 fd6a 	bl	80036bc <HAL_I2CEx_ConfigAnalogFilter>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	bf14      	ite	ne
 8000bee:	2301      	movne	r3, #1
 8000bf0:	2300      	moveq	r3, #0
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8000bf8:	f000 fa2c 	bl	8001054 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <_ZL12MX_I2C3_Initv+0x90>)
 8000c00:	f002 fda7 	bl	8003752 <HAL_I2CEx_ConfigDigitalFilter>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	2301      	movne	r3, #1
 8000c0c:	2300      	moveq	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8000c14:	f000 fa1e 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000154 	.word	0x20000154
 8000c20:	40005c00 	.word	0x40005c00
 8000c24:	00100d14 	.word	0x00100d14

08000c28 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c2c:	4b22      	ldr	r3, [pc, #136]	@ (8000cb8 <_ZL12MX_I2C4_Initv+0x90>)
 8000c2e:	4a23      	ldr	r2, [pc, #140]	@ (8000cbc <_ZL12MX_I2C4_Initv+0x94>)
 8000c30:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8000c32:	4b21      	ldr	r3, [pc, #132]	@ (8000cb8 <_ZL12MX_I2C4_Initv+0x90>)
 8000c34:	4a22      	ldr	r2, [pc, #136]	@ (8000cc0 <_ZL12MX_I2C4_Initv+0x98>)
 8000c36:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <_ZL12MX_I2C4_Initv+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <_ZL12MX_I2C4_Initv+0x90>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c44:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb8 <_ZL12MX_I2C4_Initv+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <_ZL12MX_I2C4_Initv+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c50:	4b19      	ldr	r3, [pc, #100]	@ (8000cb8 <_ZL12MX_I2C4_Initv+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c56:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <_ZL12MX_I2C4_Initv+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	@ (8000cb8 <_ZL12MX_I2C4_Initv+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c62:	4815      	ldr	r0, [pc, #84]	@ (8000cb8 <_ZL12MX_I2C4_Initv+0x90>)
 8000c64:	f001 ffdb 	bl	8002c1e <HAL_I2C_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	bf14      	ite	ne
 8000c6e:	2301      	movne	r3, #1
 8000c70:	2300      	moveq	r3, #0
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8000c78:	f000 f9ec 	bl	8001054 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	480e      	ldr	r0, [pc, #56]	@ (8000cb8 <_ZL12MX_I2C4_Initv+0x90>)
 8000c80:	f002 fd1c 	bl	80036bc <HAL_I2CEx_ConfigAnalogFilter>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf14      	ite	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	2300      	moveq	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8000c94:	f000 f9de 	bl	8001054 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4807      	ldr	r0, [pc, #28]	@ (8000cb8 <_ZL12MX_I2C4_Initv+0x90>)
 8000c9c:	f002 fd59 	bl	8003752 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf14      	ite	ne
 8000ca6:	2301      	movne	r3, #1
 8000ca8:	2300      	moveq	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8000cb0:	f000 f9d0 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200001a8 	.word	0x200001a8
 8000cbc:	40008400 	.word	0x40008400
 8000cc0:	00100d14 	.word	0x00100d14

08000cc4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	@ 0x28
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ce8:	4b29      	ldr	r3, [pc, #164]	@ (8000d90 <_ZL12MX_TIM2_Initv+0xcc>)
 8000cea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cf0:	4b27      	ldr	r3, [pc, #156]	@ (8000d90 <_ZL12MX_TIM2_Initv+0xcc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <_ZL12MX_TIM2_Initv+0xcc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000cfc:	4b24      	ldr	r3, [pc, #144]	@ (8000d90 <_ZL12MX_TIM2_Initv+0xcc>)
 8000cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8000d02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d04:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d10:	481f      	ldr	r0, [pc, #124]	@ (8000d90 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d12:	f004 f9d3 	bl	80050bc <HAL_TIM_PWM_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	2301      	movne	r3, #1
 8000d1e:	2300      	moveq	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <_ZL12MX_TIM2_Initv+0x66>
  {
    Error_Handler();
 8000d26:	f000 f995 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	4815      	ldr	r0, [pc, #84]	@ (8000d90 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d3a:	f004 ffd5 	bl	8005ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf14      	ite	ne
 8000d44:	2301      	movne	r3, #1
 8000d46:	2300      	moveq	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <_ZL12MX_TIM2_Initv+0x8e>
  {
    Error_Handler();
 8000d4e:	f000 f981 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d52:	2360      	movs	r3, #96	@ 0x60
 8000d54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	4809      	ldr	r0, [pc, #36]	@ (8000d90 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d6a:	f004 fb05 	bl	8005378 <HAL_TIM_PWM_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	bf14      	ite	ne
 8000d74:	2301      	movne	r3, #1
 8000d76:	2300      	moveq	r3, #0
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <_ZL12MX_TIM2_Initv+0xbe>
  {
    Error_Handler();
 8000d7e:	f000 f969 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d82:	4803      	ldr	r0, [pc, #12]	@ (8000d90 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d84:	f000 fb5c 	bl	8001440 <HAL_TIM_MspPostInit>

}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	@ 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200001fc 	.word	0x200001fc

08000d94 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	@ 0x28
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da6:	463b      	mov	r3, r7
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	615a      	str	r2, [r3, #20]
 8000db6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db8:	4b29      	ldr	r3, [pc, #164]	@ (8000e60 <_ZL12MX_TIM3_Initv+0xcc>)
 8000dba:	4a2a      	ldr	r2, [pc, #168]	@ (8000e64 <_ZL12MX_TIM3_Initv+0xd0>)
 8000dbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000dbe:	4b28      	ldr	r3, [pc, #160]	@ (8000e60 <_ZL12MX_TIM3_Initv+0xcc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b26      	ldr	r3, [pc, #152]	@ (8000e60 <_ZL12MX_TIM3_Initv+0xcc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dca:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <_ZL12MX_TIM3_Initv+0xcc>)
 8000dcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b23      	ldr	r3, [pc, #140]	@ (8000e60 <_ZL12MX_TIM3_Initv+0xcc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b21      	ldr	r3, [pc, #132]	@ (8000e60 <_ZL12MX_TIM3_Initv+0xcc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dde:	4820      	ldr	r0, [pc, #128]	@ (8000e60 <_ZL12MX_TIM3_Initv+0xcc>)
 8000de0:	f004 f96c 	bl	80050bc <HAL_TIM_PWM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	bf14      	ite	ne
 8000dea:	2301      	movne	r3, #1
 8000dec:	2300      	moveq	r3, #0
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8000df4:	f000 f92e 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	4816      	ldr	r0, [pc, #88]	@ (8000e60 <_ZL12MX_TIM3_Initv+0xcc>)
 8000e08:	f004 ff6e 	bl	8005ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bf14      	ite	ne
 8000e12:	2301      	movne	r3, #1
 8000e14:	2300      	moveq	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8000e1c:	f000 f91a 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e20:	2360      	movs	r3, #96	@ 0x60
 8000e22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	4619      	mov	r1, r3
 8000e36:	480a      	ldr	r0, [pc, #40]	@ (8000e60 <_ZL12MX_TIM3_Initv+0xcc>)
 8000e38:	f004 fa9e 	bl	8005378 <HAL_TIM_PWM_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bf14      	ite	ne
 8000e42:	2301      	movne	r3, #1
 8000e44:	2300      	moveq	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8000e4c:	f000 f902 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e50:	4803      	ldr	r0, [pc, #12]	@ (8000e60 <_ZL12MX_TIM3_Initv+0xcc>)
 8000e52:	f000 faf5 	bl	8001440 <HAL_TIM_MspPostInit>

}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	@ 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000248 	.word	0x20000248
 8000e64:	40000400 	.word	0x40000400

08000e68 <_ZL22MX_USB_OTG_FS_HCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e6c:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000e6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e72:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8000e74:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e80:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000e86:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000e88:	2202      	movs	r2, #2
 8000e8a:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000e92:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000e94:	f001 fe63 	bl	8002b5e <HAL_HCD_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf14      	ite	ne
 8000e9e:	2301      	movne	r3, #1
 8000ea0:	2300      	moveq	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <_ZL22MX_USB_OTG_FS_HCD_Initv+0x44>
  {
    Error_Handler();
 8000ea8:	f000 f8d4 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000294 	.word	0x20000294

08000eb4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	@ 0x28
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eca:	4b56      	ldr	r3, [pc, #344]	@ (8001024 <_ZL12MX_GPIO_Initv+0x170>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	4a55      	ldr	r2, [pc, #340]	@ (8001024 <_ZL12MX_GPIO_Initv+0x170>)
 8000ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed6:	4b53      	ldr	r3, [pc, #332]	@ (8001024 <_ZL12MX_GPIO_Initv+0x170>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	4b50      	ldr	r3, [pc, #320]	@ (8001024 <_ZL12MX_GPIO_Initv+0x170>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	4a4f      	ldr	r2, [pc, #316]	@ (8001024 <_ZL12MX_GPIO_Initv+0x170>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eee:	4b4d      	ldr	r3, [pc, #308]	@ (8001024 <_ZL12MX_GPIO_Initv+0x170>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b4a      	ldr	r3, [pc, #296]	@ (8001024 <_ZL12MX_GPIO_Initv+0x170>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	4a49      	ldr	r2, [pc, #292]	@ (8001024 <_ZL12MX_GPIO_Initv+0x170>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f06:	4b47      	ldr	r3, [pc, #284]	@ (8001024 <_ZL12MX_GPIO_Initv+0x170>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	4b44      	ldr	r3, [pc, #272]	@ (8001024 <_ZL12MX_GPIO_Initv+0x170>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	4a43      	ldr	r2, [pc, #268]	@ (8001024 <_ZL12MX_GPIO_Initv+0x170>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1e:	4b41      	ldr	r3, [pc, #260]	@ (8001024 <_ZL12MX_GPIO_Initv+0x170>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2134      	movs	r1, #52	@ 0x34
 8000f2e:	483e      	ldr	r0, [pc, #248]	@ (8001028 <_ZL12MX_GPIO_Initv+0x174>)
 8000f30:	f001 fdc0 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 8000f34:	2200      	movs	r2, #0
 8000f36:	f240 41c3 	movw	r1, #1219	@ 0x4c3
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3e:	f001 fdb9 	bl	8002ab4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2107      	movs	r1, #7
 8000f46:	4839      	ldr	r0, [pc, #228]	@ (800102c <_ZL12MX_GPIO_Initv+0x178>)
 8000f48:	f001 fdb4 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8000f4c:	2334      	movs	r3, #52	@ 0x34
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4831      	ldr	r0, [pc, #196]	@ (8001028 <_ZL12MX_GPIO_Initv+0x174>)
 8000f64:	f001 fc14 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	482a      	ldr	r0, [pc, #168]	@ (8001028 <_ZL12MX_GPIO_Initv+0x174>)
 8000f7e:	f001 fc07 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 PA7
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 8000f82:	f240 43c3 	movw	r3, #1219	@ 0x4c3
 8000f86:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9e:	f001 fbf7 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fba:	f001 fbe9 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4815      	ldr	r0, [pc, #84]	@ (800102c <_ZL12MX_GPIO_Initv+0x178>)
 8000fd6:	f001 fbdb 	bl	8002790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2105      	movs	r1, #5
 8000fde:	2009      	movs	r0, #9
 8000fe0:	f001 fbac 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fe4:	2009      	movs	r0, #9
 8000fe6:	f001 fbc5 	bl	8002774 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2105      	movs	r1, #5
 8000fee:	2017      	movs	r0, #23
 8000ff0:	f001 fba4 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ff4:	2017      	movs	r0, #23
 8000ff6:	f001 fbbd 	bl	8002774 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	480b      	ldr	r0, [pc, #44]	@ (800102c <_ZL12MX_GPIO_Initv+0x178>)
 8001000:	f001 fd58 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2104      	movs	r1, #4
 8001008:	4808      	ldr	r0, [pc, #32]	@ (800102c <_ZL12MX_GPIO_Initv+0x178>)
 800100a:	f001 fd53 	bl	8002ab4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2180      	movs	r1, #128	@ 0x80
 8001012:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001016:	f001 fd4d 	bl	8002ab4 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	@ 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	48000800 	.word	0x48000800
 800102c:	48000400 	.word	0x48000400

08001030 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001042:	f000 fbe3 	bl	800180c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40012c00 	.word	0x40012c00

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <Error_Handler+0x8>

08001060 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_MspInit+0x4c>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106a:	4a10      	ldr	r2, [pc, #64]	@ (80010ac <HAL_MspInit+0x4c>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6613      	str	r3, [r2, #96]	@ 0x60
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_MspInit+0x4c>)
 8001074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <HAL_MspInit+0x4c>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <HAL_MspInit+0x4c>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001088:	6593      	str	r3, [r2, #88]	@ 0x58
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <HAL_MspInit+0x4c>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	210f      	movs	r1, #15
 800109a:	f06f 0001 	mvn.w	r0, #1
 800109e:	f001 fb4d 	bl	800273c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	@ 0x30
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a49      	ldr	r2, [pc, #292]	@ (80011f4 <HAL_CAN_MspInit+0x144>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d13a      	bne.n	8001148 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010d2:	4b49      	ldr	r3, [pc, #292]	@ (80011f8 <HAL_CAN_MspInit+0x148>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4a47      	ldr	r2, [pc, #284]	@ (80011f8 <HAL_CAN_MspInit+0x148>)
 80010da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010dc:	4b46      	ldr	r3, [pc, #280]	@ (80011f8 <HAL_CAN_MspInit+0x148>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10b      	bne.n	80010fc <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010e4:	4b45      	ldr	r3, [pc, #276]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e8:	4a44      	ldr	r2, [pc, #272]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 80010ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80010f0:	4b42      	ldr	r3, [pc, #264]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fc:	4b3f      	ldr	r3, [pc, #252]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001100:	4a3e      	ldr	r2, [pc, #248]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001108:	4b3c      	ldr	r3, [pc, #240]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001114:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001126:	2309      	movs	r3, #9
 8001128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4833      	ldr	r0, [pc, #204]	@ (8001200 <HAL_CAN_MspInit+0x150>)
 8001132:	f001 fb2d 	bl	8002790 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2105      	movs	r1, #5
 800113a:	2014      	movs	r0, #20
 800113c:	f001 fafe 	bl	800273c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001140:	2014      	movs	r0, #20
 8001142:	f001 fb17 	bl	8002774 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001146:	e051      	b.n	80011ec <HAL_CAN_MspInit+0x13c>
  else if(hcan->Instance==CAN2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a2d      	ldr	r2, [pc, #180]	@ (8001204 <HAL_CAN_MspInit+0x154>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d14c      	bne.n	80011ec <HAL_CAN_MspInit+0x13c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001152:	4b2a      	ldr	r3, [pc, #168]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 8001154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001156:	4a29      	ldr	r2, [pc, #164]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 8001158:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800115c:	6593      	str	r3, [r2, #88]	@ 0x58
 800115e:	4b27      	ldr	r3, [pc, #156]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 8001160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001162:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800116a:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <HAL_CAN_MspInit+0x148>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	4a21      	ldr	r2, [pc, #132]	@ (80011f8 <HAL_CAN_MspInit+0x148>)
 8001172:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001174:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <HAL_CAN_MspInit+0x148>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d10b      	bne.n	8001194 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800117c:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001180:	4a1e      	ldr	r2, [pc, #120]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 8001182:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001186:	6593      	str	r3, [r2, #88]	@ 0x58
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001198:	4a18      	ldr	r2, [pc, #96]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <HAL_CAN_MspInit+0x14c>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011ac:	2320      	movs	r3, #32
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 80011bc:	2303      	movs	r3, #3
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	480e      	ldr	r0, [pc, #56]	@ (8001200 <HAL_CAN_MspInit+0x150>)
 80011c8:	f001 fae2 	bl	8002790 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011cc:	2340      	movs	r3, #64	@ 0x40
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 80011dc:	2308      	movs	r3, #8
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	@ (8001200 <HAL_CAN_MspInit+0x150>)
 80011e8:	f001 fad2 	bl	8002790 <HAL_GPIO_Init>
}
 80011ec:	bf00      	nop
 80011ee:	3730      	adds	r7, #48	@ 0x30
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40006400 	.word	0x40006400
 80011f8:	200005cc 	.word	0x200005cc
 80011fc:	40021000 	.word	0x40021000
 8001200:	48000400 	.word	0x48000400
 8001204:	40006800 	.word	0x40006800

08001208 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0b0      	sub	sp, #192	@ 0xc0
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001220:	f107 0320 	add.w	r3, r7, #32
 8001224:	228c      	movs	r2, #140	@ 0x8c
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f007 fda5 	bl	8008d78 <memset>
  if(hi2c->Instance==I2C2)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a64      	ldr	r2, [pc, #400]	@ (80013c4 <HAL_I2C_MspInit+0x1bc>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d13c      	bne.n	80012b2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001238:	2380      	movs	r3, #128	@ 0x80
 800123a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800123c:	2300      	movs	r3, #0
 800123e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	4618      	mov	r0, r3
 8001246:	f003 f99d 	bl	8004584 <HAL_RCCEx_PeriphCLKConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001250:	f7ff ff00 	bl	8001054 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001254:	4b5c      	ldr	r3, [pc, #368]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001258:	4a5b      	ldr	r2, [pc, #364]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001260:	4b59      	ldr	r3, [pc, #356]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	69fb      	ldr	r3, [r7, #28]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800126c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001270:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001274:	2312      	movs	r3, #18
 8001276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001286:	2304      	movs	r3, #4
 8001288:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001290:	4619      	mov	r1, r3
 8001292:	484e      	ldr	r0, [pc, #312]	@ (80013cc <HAL_I2C_MspInit+0x1c4>)
 8001294:	f001 fa7c 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001298:	4b4b      	ldr	r3, [pc, #300]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129c:	4a4a      	ldr	r2, [pc, #296]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 800129e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012a4:	4b48      	ldr	r3, [pc, #288]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 80012a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80012b0:	e083      	b.n	80013ba <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C3)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a46      	ldr	r2, [pc, #280]	@ (80013d0 <HAL_I2C_MspInit+0x1c8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d13c      	bne.n	8001336 <HAL_I2C_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80012bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 f95a 	bl	8004584 <HAL_RCCEx_PeriphCLKConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 80012d6:	f7ff febd 	bl	8001054 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	4b3b      	ldr	r3, [pc, #236]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a3a      	ldr	r2, [pc, #232]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b38      	ldr	r3, [pc, #224]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012f2:	2303      	movs	r3, #3
 80012f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f8:	2312      	movs	r3, #18
 80012fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800130a:	2304      	movs	r3, #4
 800130c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001310:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001314:	4619      	mov	r1, r3
 8001316:	482f      	ldr	r0, [pc, #188]	@ (80013d4 <HAL_I2C_MspInit+0x1cc>)
 8001318:	f001 fa3a 	bl	8002790 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800131c:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001320:	4a29      	ldr	r2, [pc, #164]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 8001322:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001326:	6593      	str	r3, [r2, #88]	@ 0x58
 8001328:	4b27      	ldr	r3, [pc, #156]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]
}
 8001334:	e041      	b.n	80013ba <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C4)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a27      	ldr	r2, [pc, #156]	@ (80013d8 <HAL_I2C_MspInit+0x1d0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d13c      	bne.n	80013ba <HAL_I2C_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001340:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001344:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001346:	2300      	movs	r3, #0
 8001348:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	4618      	mov	r0, r3
 8001350:	f003 f918 	bl	8004584 <HAL_RCCEx_PeriphCLKConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_MspInit+0x156>
      Error_Handler();
 800135a:	f7ff fe7b 	bl	8001054 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	4a19      	ldr	r2, [pc, #100]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136a:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001376:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800137a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800137e:	2312      	movs	r3, #18
 8001380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001390:	2303      	movs	r3, #3
 8001392:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800139a:	4619      	mov	r1, r3
 800139c:	480b      	ldr	r0, [pc, #44]	@ (80013cc <HAL_I2C_MspInit+0x1c4>)
 800139e:	f001 f9f7 	bl	8002790 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 80013a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013a6:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_I2C_MspInit+0x1c0>)
 80013b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
}
 80013ba:	bf00      	nop
 80013bc:	37c0      	adds	r7, #192	@ 0xc0
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40005800 	.word	0x40005800
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	40005c00 	.word	0x40005c00
 80013d4:	48000800 	.word	0x48000800
 80013d8:	40008400 	.word	0x40008400

080013dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013ec:	d10c      	bne.n	8001408 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ee:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_TIM_PWM_MspInit+0x5c>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f2:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <HAL_TIM_PWM_MspInit+0x5c>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <HAL_TIM_PWM_MspInit+0x5c>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001406:	e010      	b.n	800142a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0b      	ldr	r2, [pc, #44]	@ (800143c <HAL_TIM_PWM_MspInit+0x60>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10b      	bne.n	800142a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_TIM_PWM_MspInit+0x5c>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001416:	4a08      	ldr	r2, [pc, #32]	@ (8001438 <HAL_TIM_PWM_MspInit+0x5c>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6593      	str	r3, [r2, #88]	@ 0x58
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_TIM_PWM_MspInit+0x5c>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	40000400 	.word	0x40000400

08001440 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	@ 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001460:	d11e      	bne.n	80014a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <HAL_TIM_MspPostInit+0xac>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	4a21      	ldr	r2, [pc, #132]	@ (80014ec <HAL_TIM_MspPostInit+0xac>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <HAL_TIM_MspPostInit+0xac>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800147a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800148c:	2301      	movs	r3, #1
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800149a:	f001 f979 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800149e:	e020      	b.n	80014e2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <HAL_TIM_MspPostInit+0xb0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d11b      	bne.n	80014e2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <HAL_TIM_MspPostInit+0xac>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	4a0f      	ldr	r2, [pc, #60]	@ (80014ec <HAL_TIM_MspPostInit+0xac>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b6:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <HAL_TIM_MspPostInit+0xac>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c2:	2310      	movs	r3, #16
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014d2:	2302      	movs	r3, #2
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <HAL_TIM_MspPostInit+0xb4>)
 80014de:	f001 f957 	bl	8002790 <HAL_GPIO_Init>
}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	@ 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40000400 	.word	0x40000400
 80014f4:	48000400 	.word	0x48000400

080014f8 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b0ae      	sub	sp, #184	@ 0xb8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001510:	f107 0318 	add.w	r3, r7, #24
 8001514:	228c      	movs	r2, #140	@ 0x8c
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f007 fc2d 	bl	8008d78 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001526:	d16b      	bne.n	8001600 <HAL_HCD_MspInit+0x108>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001528:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800152c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800152e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001532:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001536:	2303      	movs	r3, #3
 8001538:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800153e:	230c      	movs	r3, #12
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001542:	2302      	movs	r3, #2
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001546:	2304      	movs	r3, #4
 8001548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800154a:	2302      	movs	r3, #2
 800154c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800154e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001552:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001554:	f107 0318 	add.w	r3, r7, #24
 8001558:	4618      	mov	r0, r3
 800155a:	f003 f813 	bl	8004584 <HAL_RCCEx_PeriphCLKConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 8001564:	f7ff fd76 	bl	8001054 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b27      	ldr	r3, [pc, #156]	@ (8001608 <HAL_HCD_MspInit+0x110>)
 800156a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156c:	4a26      	ldr	r2, [pc, #152]	@ (8001608 <HAL_HCD_MspInit+0x110>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <HAL_HCD_MspInit+0x110>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001580:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001584:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800159a:	230a      	movs	r3, #10
 800159c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015aa:	f001 f8f1 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_HCD_MspInit+0x110>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a15      	ldr	r2, [pc, #84]	@ (8001608 <HAL_HCD_MspInit+0x110>)
 80015b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <HAL_HCD_MspInit+0x110>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_HCD_MspInit+0x110>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d114      	bne.n	80015fc <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <HAL_HCD_MspInit+0x110>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001608 <HAL_HCD_MspInit+0x110>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <HAL_HCD_MspInit+0x110>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80015ea:	f002 f963 	bl	80038b4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_HCD_MspInit+0x110>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <HAL_HCD_MspInit+0x110>)
 80015f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80015fa:	e001      	b.n	8001600 <HAL_HCD_MspInit+0x108>
      HAL_PWREx_EnableVddUSB();
 80015fc:	f002 f95a 	bl	80038b4 <HAL_PWREx_EnableVddUSB>
}
 8001600:	bf00      	nop
 8001602:	37b8      	adds	r7, #184	@ 0xb8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	@ 0x30
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800161a:	4b2e      	ldr	r3, [pc, #184]	@ (80016d4 <HAL_InitTick+0xc8>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161e:	4a2d      	ldr	r2, [pc, #180]	@ (80016d4 <HAL_InitTick+0xc8>)
 8001620:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001624:	6613      	str	r3, [r2, #96]	@ 0x60
 8001626:	4b2b      	ldr	r3, [pc, #172]	@ (80016d4 <HAL_InitTick+0xc8>)
 8001628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800162a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001632:	f107 020c 	add.w	r2, r7, #12
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f002 ff0f 	bl	8004460 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001642:	f002 fef7 	bl	8004434 <HAL_RCC_GetPCLK2Freq>
 8001646:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164a:	4a23      	ldr	r2, [pc, #140]	@ (80016d8 <HAL_InitTick+0xcc>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	0c9b      	lsrs	r3, r3, #18
 8001652:	3b01      	subs	r3, #1
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001656:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <HAL_InitTick+0xd0>)
 8001658:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <HAL_InitTick+0xd4>)
 800165a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <HAL_InitTick+0xd0>)
 800165e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001662:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001664:	4a1d      	ldr	r2, [pc, #116]	@ (80016dc <HAL_InitTick+0xd0>)
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800166a:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <HAL_InitTick+0xd0>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <HAL_InitTick+0xd0>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001676:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <HAL_InitTick+0xd0>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800167c:	4817      	ldr	r0, [pc, #92]	@ (80016dc <HAL_InitTick+0xd0>)
 800167e:	f003 fc4b 	bl	8004f18 <HAL_TIM_Base_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001688:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800168c:	2b00      	cmp	r3, #0
 800168e:	d11b      	bne.n	80016c8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001690:	4812      	ldr	r0, [pc, #72]	@ (80016dc <HAL_InitTick+0xd0>)
 8001692:	f003 fca3 	bl	8004fdc <HAL_TIM_Base_Start_IT>
 8001696:	4603      	mov	r3, r0
 8001698:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800169c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d111      	bne.n	80016c8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80016a4:	2019      	movs	r0, #25
 80016a6:	f001 f865 	bl	8002774 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d808      	bhi.n	80016c2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	2019      	movs	r0, #25
 80016b6:	f001 f841 	bl	800273c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <HAL_InitTick+0xd8>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e002      	b.n	80016c8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3730      	adds	r7, #48	@ 0x30
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000
 80016d8:	431bde83 	.word	0x431bde83
 80016dc:	200005d0 	.word	0x200005d0
 80016e0:	40012c00 	.word	0x40012c00
 80016e4:	20000004 	.word	0x20000004

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <NMI_Handler+0x4>

080016f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <MemManage_Handler+0x4>

08001700 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <UsageFault_Handler+0x4>

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001722:	2008      	movs	r0, #8
 8001724:	f001 f9f8 	bl	8002b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <CAN1_RX0_IRQHandler+0x10>)
 8001732:	f000 fd1c 	bl	800216e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200000b0 	.word	0x200000b0

08001740 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001744:	2020      	movs	r0, #32
 8001746:	f001 f9e7 	bl	8002b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001756:	f003 fd08 	bl	800516a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200005d0 	.word	0x200005d0

08001764 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <SystemInit+0x20>)
 800176a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800176e:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <SystemInit+0x20>)
 8001770:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001774:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001788:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800178c:	f7ff ffea 	bl	8001764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001790:	480c      	ldr	r0, [pc, #48]	@ (80017c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001792:	490d      	ldr	r1, [pc, #52]	@ (80017c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001794:	4a0d      	ldr	r2, [pc, #52]	@ (80017cc <LoopForever+0xe>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a8:	4c0a      	ldr	r4, [pc, #40]	@ (80017d4 <LoopForever+0x16>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b6:	f007 fb3d 	bl	8008e34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ba:	f7ff f821 	bl	8000800 <main>

080017be <LoopForever>:

LoopForever:
    b LoopForever
 80017be:	e7fe      	b.n	80017be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80017cc:	08009100 	.word	0x08009100
  ldr r2, =_sbss
 80017d0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80017d4:	200028d0 	.word	0x200028d0

080017d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC1_2_IRQHandler>

080017da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e4:	2003      	movs	r0, #3
 80017e6:	f000 ff9e 	bl	8002726 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ea:	200f      	movs	r0, #15
 80017ec:	f7ff ff0e 	bl	800160c <HAL_InitTick>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	71fb      	strb	r3, [r7, #7]
 80017fa:	e001      	b.n	8001800 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017fc:	f7ff fc30 	bl	8001060 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001800:	79fb      	ldrb	r3, [r7, #7]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_IncTick+0x20>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x24>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <HAL_IncTick+0x24>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008
 8001830:	2000061c 	.word	0x2000061c

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000061c 	.word	0x2000061c

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff ffee 	bl	8001834 <HAL_GetTick>
 8001858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001864:	d005      	beq.n	8001872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001866:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <HAL_Delay+0x44>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001872:	bf00      	nop
 8001874:	f7ff ffde 	bl	8001834 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d8f7      	bhi.n	8001874 <HAL_Delay+0x28>
  {
  }
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000008 	.word	0x20000008

08001894 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e0ed      	b.n	8001a82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fbfc 	bl	80010b0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018c8:	f7ff ffb4 	bl	8001834 <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018ce:	e012      	b.n	80018f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018d0:	f7ff ffb0 	bl	8001834 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b0a      	cmp	r3, #10
 80018dc:	d90b      	bls.n	80018f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2205      	movs	r2, #5
 80018ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0c5      	b.n	8001a82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0e5      	beq.n	80018d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0202 	bic.w	r2, r2, #2
 8001912:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001914:	f7ff ff8e 	bl	8001834 <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800191a:	e012      	b.n	8001942 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800191c:	f7ff ff8a 	bl	8001834 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b0a      	cmp	r3, #10
 8001928:	d90b      	bls.n	8001942 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2205      	movs	r2, #5
 800193a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e09f      	b.n	8001a82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1e5      	bne.n	800191c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7e1b      	ldrb	r3, [r3, #24]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d108      	bne.n	800196a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e007      	b.n	800197a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7e5b      	ldrb	r3, [r3, #25]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d108      	bne.n	8001994 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e007      	b.n	80019a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7e9b      	ldrb	r3, [r3, #26]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d108      	bne.n	80019be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0220 	orr.w	r2, r2, #32
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e007      	b.n	80019ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0220 	bic.w	r2, r2, #32
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7edb      	ldrb	r3, [r3, #27]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d108      	bne.n	80019e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0210 	bic.w	r2, r2, #16
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	e007      	b.n	80019f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0210 	orr.w	r2, r2, #16
 80019f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7f1b      	ldrb	r3, [r3, #28]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d108      	bne.n	8001a12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0208 	orr.w	r2, r2, #8
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e007      	b.n	8001a22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0208 	bic.w	r2, r2, #8
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7f5b      	ldrb	r3, [r3, #29]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d108      	bne.n	8001a3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0204 	orr.w	r2, r2, #4
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	e007      	b.n	8001a4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0204 	bic.w	r2, r2, #4
 8001a4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	ea42 0103 	orr.w	r1, r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001aa4:	7cfb      	ldrb	r3, [r7, #19]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d003      	beq.n	8001ab2 <HAL_CAN_ConfigFilter+0x26>
 8001aaa:	7cfb      	ldrb	r3, [r7, #19]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	f040 80be 	bne.w	8001c2e <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001ab2:	4b65      	ldr	r3, [pc, #404]	@ (8001c48 <HAL_CAN_ConfigFilter+0x1bc>)
 8001ab4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001acc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	2201      	movs	r2, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	401a      	ands	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d123      	bne.n	8001b5c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3248      	adds	r2, #72	@ 0x48
 8001b3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b52:	6979      	ldr	r1, [r7, #20]
 8001b54:	3348      	adds	r3, #72	@ 0x48
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d122      	bne.n	8001baa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b84:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3248      	adds	r2, #72	@ 0x48
 8001b8a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b9e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ba0:	6979      	ldr	r1, [r7, #20]
 8001ba2:	3348      	adds	r3, #72	@ 0x48
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	440b      	add	r3, r1
 8001ba8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001bc4:	e007      	b.n	8001bd6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	401a      	ands	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001bf0:	e007      	b.n	8001c02 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d107      	bne.n	8001c1a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c20:	f023 0201 	bic.w	r2, r3, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e006      	b.n	8001c3c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c32:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
  }
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40006400 	.word	0x40006400

08001c4c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d12e      	bne.n	8001cbe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c78:	f7ff fddc 	bl	8001834 <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c7e:	e012      	b.n	8001ca6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c80:	f7ff fdd8 	bl	8001834 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b0a      	cmp	r3, #10
 8001c8c:	d90b      	bls.n	8001ca6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2205      	movs	r2, #5
 8001c9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e012      	b.n	8001ccc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1e5      	bne.n	8001c80 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e006      	b.n	8001ccc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
  }
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	@ 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cf2:	7ffb      	ldrb	r3, [r7, #31]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d003      	beq.n	8001d00 <HAL_CAN_AddTxMessage+0x2c>
 8001cf8:	7ffb      	ldrb	r3, [r7, #31]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	f040 80ad 	bne.w	8001e5a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10a      	bne.n	8001d20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d105      	bne.n	8001d20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8095 	beq.w	8001e4a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	0e1b      	lsrs	r3, r3, #24
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10d      	bne.n	8001d58 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d46:	68f9      	ldr	r1, [r7, #12]
 8001d48:	6809      	ldr	r1, [r1, #0]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3318      	adds	r3, #24
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	440b      	add	r3, r1
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e00f      	b.n	8001d78 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d62:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d6c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3318      	adds	r3, #24
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	440b      	add	r3, r1
 8001d76:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6819      	ldr	r1, [r3, #0]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3318      	adds	r3, #24
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	440b      	add	r3, r1
 8001d88:	3304      	adds	r3, #4
 8001d8a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	7d1b      	ldrb	r3, [r3, #20]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d111      	bne.n	8001db8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3318      	adds	r3, #24
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	4413      	add	r3, r2
 8001da0:	3304      	adds	r3, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	6811      	ldr	r1, [r2, #0]
 8001da8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3318      	adds	r3, #24
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	440b      	add	r3, r1
 8001db4:	3304      	adds	r3, #4
 8001db6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3307      	adds	r3, #7
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	061a      	lsls	r2, r3, #24
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3306      	adds	r3, #6
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3305      	adds	r3, #5
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	3204      	adds	r2, #4
 8001dd8:	7812      	ldrb	r2, [r2, #0]
 8001dda:	4610      	mov	r0, r2
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	6811      	ldr	r1, [r2, #0]
 8001de0:	ea43 0200 	orr.w	r2, r3, r0
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	440b      	add	r3, r1
 8001dea:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001dee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3303      	adds	r3, #3
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	061a      	lsls	r2, r3, #24
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	041b      	lsls	r3, r3, #16
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3301      	adds	r3, #1
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	7812      	ldrb	r2, [r2, #0]
 8001e10:	4610      	mov	r0, r2
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	6811      	ldr	r1, [r2, #0]
 8001e16:	ea43 0200 	orr.w	r2, r3, r0
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	440b      	add	r3, r1
 8001e20:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001e24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3318      	adds	r3, #24
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	4413      	add	r3, r2
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	6811      	ldr	r1, [r2, #0]
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3318      	adds	r3, #24
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	440b      	add	r3, r1
 8001e44:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e00e      	b.n	8001e68 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e006      	b.n	8001e68 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
  }
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3724      	adds	r7, #36	@ 0x24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e86:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d002      	beq.n	8001e94 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d11d      	bne.n	8001ed0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b087      	sub	sp, #28
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d003      	beq.n	8001f02 <HAL_CAN_GetRxMessage+0x24>
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	f040 8103 	bne.w	8002108 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10e      	bne.n	8001f26 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d116      	bne.n	8001f44 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e0f7      	b.n	8002116 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d107      	bne.n	8001f44 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0e8      	b.n	8002116 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	331b      	adds	r3, #27
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	4413      	add	r3, r2
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0204 	and.w	r2, r3, #4
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	331b      	adds	r3, #27
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4413      	add	r3, r2
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0d5b      	lsrs	r3, r3, #21
 8001f72:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e00b      	b.n	8001f94 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	331b      	adds	r3, #27
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	08db      	lsrs	r3, r3, #3
 8001f8c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	331b      	adds	r3, #27
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	4413      	add	r3, r2
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0202 	and.w	r2, r3, #2
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	331b      	adds	r3, #27
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	611a      	str	r2, [r3, #16]
 8001fc8:	e00b      	b.n	8001fe2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	331b      	adds	r3, #27
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 020f 	and.w	r2, r3, #15
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	331b      	adds	r3, #27
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	4413      	add	r3, r2
 8001fee:	3304      	adds	r3, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	331b      	adds	r3, #27
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0c1b      	lsrs	r3, r3, #16
 800200c:	b29a      	uxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	4413      	add	r3, r2
 800201c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	4413      	add	r3, r2
 8002032:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0a1a      	lsrs	r2, r3, #8
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	4413      	add	r3, r2
 800204c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0c1a      	lsrs	r2, r3, #16
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	3302      	adds	r3, #2
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	4413      	add	r3, r2
 8002066:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e1a      	lsrs	r2, r3, #24
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	3303      	adds	r3, #3
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	4413      	add	r3, r2
 8002080:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	3304      	adds	r3, #4
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	4413      	add	r3, r2
 8002098:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	0a1a      	lsrs	r2, r3, #8
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	3305      	adds	r3, #5
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	0c1a      	lsrs	r2, r3, #16
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	3306      	adds	r3, #6
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	0e1a      	lsrs	r2, r3, #24
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	3307      	adds	r3, #7
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d108      	bne.n	80020f4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0220 	orr.w	r2, r2, #32
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	e007      	b.n	8002104 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0220 	orr.w	r2, r2, #32
 8002102:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	e006      	b.n	8002116 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	371c      	adds	r7, #28
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002132:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d002      	beq.n	8002140 <HAL_CAN_ActivateNotification+0x1e>
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d109      	bne.n	8002154 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6959      	ldr	r1, [r3, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e006      	b.n	8002162 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002158:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b08a      	sub	sp, #40	@ 0x28
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d07c      	beq.n	80022ae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d023      	beq.n	8002206 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2201      	movs	r2, #1
 80021c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f983 	bl	80024dc <HAL_CAN_TxMailbox0CompleteCallback>
 80021d6:	e016      	b.n	8002206 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d004      	beq.n	80021ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ea:	e00c      	b.n	8002206 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80021fe:	e002      	b.n	8002206 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f989 	bl	8002518 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d024      	beq.n	800225a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002218:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f963 	bl	80024f0 <HAL_CAN_TxMailbox1CompleteCallback>
 800222a:	e016      	b.n	800225a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002232:	2b00      	cmp	r3, #0
 8002234:	d004      	beq.n	8002240 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
 800223e:	e00c      	b.n	800225a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
 8002252:	e002      	b.n	800225a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f969 	bl	800252c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d024      	beq.n	80022ae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800226c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f943 	bl	8002504 <HAL_CAN_TxMailbox2CompleteCallback>
 800227e:	e016      	b.n	80022ae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
 8002292:	e00c      	b.n	80022ae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022a6:	e002      	b.n	80022ae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f949 	bl	8002540 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00c      	beq.n	80022d2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d007      	beq.n	80022d2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2210      	movs	r2, #16
 80022d0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00b      	beq.n	80022f4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2208      	movs	r2, #8
 80022ec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f930 	bl	8002554 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7fe fa01 	bl	8000714 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00c      	beq.n	8002336 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b00      	cmp	r3, #0
 8002324:	d007      	beq.n	8002336 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2210      	movs	r2, #16
 8002334:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00b      	beq.n	8002358 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2208      	movs	r2, #8
 8002350:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f912 	bl	800257c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f8f9 	bl	8002568 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00b      	beq.n	8002398 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	d006      	beq.n	8002398 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2210      	movs	r2, #16
 8002390:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f8fc 	bl	8002590 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00b      	beq.n	80023ba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2208      	movs	r2, #8
 80023b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f8f5 	bl	80025a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d07b      	beq.n	80024bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d072      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002428:	2b00      	cmp	r3, #0
 800242a:	d043      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002432:	2b00      	cmp	r3, #0
 8002434:	d03e      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800243c:	2b60      	cmp	r3, #96	@ 0x60
 800243e:	d02b      	beq.n	8002498 <HAL_CAN_IRQHandler+0x32a>
 8002440:	2b60      	cmp	r3, #96	@ 0x60
 8002442:	d82e      	bhi.n	80024a2 <HAL_CAN_IRQHandler+0x334>
 8002444:	2b50      	cmp	r3, #80	@ 0x50
 8002446:	d022      	beq.n	800248e <HAL_CAN_IRQHandler+0x320>
 8002448:	2b50      	cmp	r3, #80	@ 0x50
 800244a:	d82a      	bhi.n	80024a2 <HAL_CAN_IRQHandler+0x334>
 800244c:	2b40      	cmp	r3, #64	@ 0x40
 800244e:	d019      	beq.n	8002484 <HAL_CAN_IRQHandler+0x316>
 8002450:	2b40      	cmp	r3, #64	@ 0x40
 8002452:	d826      	bhi.n	80024a2 <HAL_CAN_IRQHandler+0x334>
 8002454:	2b30      	cmp	r3, #48	@ 0x30
 8002456:	d010      	beq.n	800247a <HAL_CAN_IRQHandler+0x30c>
 8002458:	2b30      	cmp	r3, #48	@ 0x30
 800245a:	d822      	bhi.n	80024a2 <HAL_CAN_IRQHandler+0x334>
 800245c:	2b10      	cmp	r3, #16
 800245e:	d002      	beq.n	8002466 <HAL_CAN_IRQHandler+0x2f8>
 8002460:	2b20      	cmp	r3, #32
 8002462:	d005      	beq.n	8002470 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002464:	e01d      	b.n	80024a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	f043 0308 	orr.w	r3, r3, #8
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800246e:	e019      	b.n	80024a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002478:	e014      	b.n	80024a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	f043 0320 	orr.w	r3, r3, #32
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002482:	e00f      	b.n	80024a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800248c:	e00a      	b.n	80024a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002496:	e005      	b.n	80024a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024a0:	e000      	b.n	80024a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80024a2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80024b2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2204      	movs	r2, #4
 80024ba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f872 	bl	80025b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024d4:	bf00      	nop
 80024d6:	3728      	adds	r7, #40	@ 0x28
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025e8:	4013      	ands	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	@ (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b04      	ldr	r3, [pc, #16]	@ (800262c <__NVIC_GetPriorityGrouping+0x18>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0307 	and.w	r3, r3, #7
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db0b      	blt.n	800265a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4907      	ldr	r1, [pc, #28]	@ (8002668 <__NVIC_EnableIRQ+0x38>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2001      	movs	r0, #1
 8002652:	fa00 f202 	lsl.w	r2, r0, r2
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100

0800266c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db0a      	blt.n	8002696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	490c      	ldr	r1, [pc, #48]	@ (80026b8 <__NVIC_SetPriority+0x4c>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	440b      	add	r3, r1
 8002690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002694:	e00a      	b.n	80026ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	@ (80026bc <__NVIC_SetPriority+0x50>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3b04      	subs	r3, #4
 80026a4:	0112      	lsls	r2, r2, #4
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	440b      	add	r3, r1
 80026aa:	761a      	strb	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	@ 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f1c3 0307 	rsb	r3, r3, #7
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf28      	it	cs
 80026de:	2304      	movcs	r3, #4
 80026e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d902      	bls.n	80026f0 <NVIC_EncodePriority+0x30>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3b03      	subs	r3, #3
 80026ee:	e000      	b.n	80026f2 <NVIC_EncodePriority+0x32>
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002708:	f04f 31ff 	mov.w	r1, #4294967295
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43d9      	mvns	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	4313      	orrs	r3, r2
         );
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	@ 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ff4c 	bl	80025cc <__NVIC_SetPriorityGrouping>
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800274e:	f7ff ff61 	bl	8002614 <__NVIC_GetPriorityGrouping>
 8002752:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	6978      	ldr	r0, [r7, #20]
 800275a:	f7ff ffb1 	bl	80026c0 <NVIC_EncodePriority>
 800275e:	4602      	mov	r2, r0
 8002760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ff80 	bl	800266c <__NVIC_SetPriority>
}
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ff54 	bl	8002630 <__NVIC_EnableIRQ>
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279e:	e166      	b.n	8002a6e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	4013      	ands	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8158 	beq.w	8002a68 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d005      	beq.n	80027d0 <HAL_GPIO_Init+0x40>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d130      	bne.n	8002832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002806:	2201      	movs	r2, #1
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 0201 	and.w	r2, r3, #1
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b03      	cmp	r3, #3
 800283c:	d017      	beq.n	800286e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d123      	bne.n	80028c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	08da      	lsrs	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	220f      	movs	r2, #15
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	08da      	lsrs	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3208      	adds	r2, #8
 80028bc:	6939      	ldr	r1, [r7, #16]
 80028be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0203 	and.w	r2, r3, #3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80b2 	beq.w	8002a68 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002904:	4b61      	ldr	r3, [pc, #388]	@ (8002a8c <HAL_GPIO_Init+0x2fc>)
 8002906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002908:	4a60      	ldr	r2, [pc, #384]	@ (8002a8c <HAL_GPIO_Init+0x2fc>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002910:	4b5e      	ldr	r3, [pc, #376]	@ (8002a8c <HAL_GPIO_Init+0x2fc>)
 8002912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800291c:	4a5c      	ldr	r2, [pc, #368]	@ (8002a90 <HAL_GPIO_Init+0x300>)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002946:	d02b      	beq.n	80029a0 <HAL_GPIO_Init+0x210>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a52      	ldr	r2, [pc, #328]	@ (8002a94 <HAL_GPIO_Init+0x304>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d025      	beq.n	800299c <HAL_GPIO_Init+0x20c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a51      	ldr	r2, [pc, #324]	@ (8002a98 <HAL_GPIO_Init+0x308>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d01f      	beq.n	8002998 <HAL_GPIO_Init+0x208>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a50      	ldr	r2, [pc, #320]	@ (8002a9c <HAL_GPIO_Init+0x30c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d019      	beq.n	8002994 <HAL_GPIO_Init+0x204>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a4f      	ldr	r2, [pc, #316]	@ (8002aa0 <HAL_GPIO_Init+0x310>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d013      	beq.n	8002990 <HAL_GPIO_Init+0x200>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a4e      	ldr	r2, [pc, #312]	@ (8002aa4 <HAL_GPIO_Init+0x314>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00d      	beq.n	800298c <HAL_GPIO_Init+0x1fc>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a4d      	ldr	r2, [pc, #308]	@ (8002aa8 <HAL_GPIO_Init+0x318>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d007      	beq.n	8002988 <HAL_GPIO_Init+0x1f8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a4c      	ldr	r2, [pc, #304]	@ (8002aac <HAL_GPIO_Init+0x31c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_GPIO_Init+0x1f4>
 8002980:	2307      	movs	r3, #7
 8002982:	e00e      	b.n	80029a2 <HAL_GPIO_Init+0x212>
 8002984:	2308      	movs	r3, #8
 8002986:	e00c      	b.n	80029a2 <HAL_GPIO_Init+0x212>
 8002988:	2306      	movs	r3, #6
 800298a:	e00a      	b.n	80029a2 <HAL_GPIO_Init+0x212>
 800298c:	2305      	movs	r3, #5
 800298e:	e008      	b.n	80029a2 <HAL_GPIO_Init+0x212>
 8002990:	2304      	movs	r3, #4
 8002992:	e006      	b.n	80029a2 <HAL_GPIO_Init+0x212>
 8002994:	2303      	movs	r3, #3
 8002996:	e004      	b.n	80029a2 <HAL_GPIO_Init+0x212>
 8002998:	2302      	movs	r3, #2
 800299a:	e002      	b.n	80029a2 <HAL_GPIO_Init+0x212>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <HAL_GPIO_Init+0x212>
 80029a0:	2300      	movs	r3, #0
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	f002 0203 	and.w	r2, r2, #3
 80029a8:	0092      	lsls	r2, r2, #2
 80029aa:	4093      	lsls	r3, r2
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029b2:	4937      	ldr	r1, [pc, #220]	@ (8002a90 <HAL_GPIO_Init+0x300>)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029c0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab0 <HAL_GPIO_Init+0x320>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029e4:	4a32      	ldr	r2, [pc, #200]	@ (8002ab0 <HAL_GPIO_Init+0x320>)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029ea:	4b31      	ldr	r3, [pc, #196]	@ (8002ab0 <HAL_GPIO_Init+0x320>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a0e:	4a28      	ldr	r2, [pc, #160]	@ (8002ab0 <HAL_GPIO_Init+0x320>)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a14:	4b26      	ldr	r3, [pc, #152]	@ (8002ab0 <HAL_GPIO_Init+0x320>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a38:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab0 <HAL_GPIO_Init+0x320>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab0 <HAL_GPIO_Init+0x320>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a62:	4a13      	ldr	r2, [pc, #76]	@ (8002ab0 <HAL_GPIO_Init+0x320>)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f47f ae91 	bne.w	80027a0 <HAL_GPIO_Init+0x10>
  }
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	371c      	adds	r7, #28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40010000 	.word	0x40010000
 8002a94:	48000400 	.word	0x48000400
 8002a98:	48000800 	.word	0x48000800
 8002a9c:	48000c00 	.word	0x48000c00
 8002aa0:	48001000 	.word	0x48001000
 8002aa4:	48001400 	.word	0x48001400
 8002aa8:	48001800 	.word	0x48001800
 8002aac:	48001c00 	.word	0x48001c00
 8002ab0:	40010400 	.word	0x40010400

08002ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac4:	787b      	ldrb	r3, [r7, #1]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ad0:	e002      	b.n	8002ad8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4013      	ands	r3, r2
 8002afc:	041a      	lsls	r2, r3, #16
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43d9      	mvns	r1, r3
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	400b      	ands	r3, r1
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	619a      	str	r2, [r3, #24]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b22:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d006      	beq.n	8002b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b2e:	4a05      	ldr	r2, [pc, #20]	@ (8002b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f806 	bl	8002b48 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40010400 	.word	0x40010400

08002b48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af02      	add	r7, sp, #8
 8002b64:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e052      	b.n	8002c16 <HAL_HCD_Init+0xb8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3315 	ldrb.w	r3, [r3, #789]	@ 0x315
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7fe fcb7 	bl	80014f8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315

  /* Disable DMA mode for FS instance */
  hhcd->Init.dma_enable = 0U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f003 f976 	bl	8005e8e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	7c1a      	ldrb	r2, [r3, #16]
 8002baa:	f88d 2000 	strb.w	r2, [sp]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb2:	f003 f93f 	bl	8005e34 <USB_CoreInit>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_HCD_Init+0x6a>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e026      	b.n	8002c16 <HAL_HCD_Init+0xb8>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 f96e 	bl	8005eb0 <USB_SetCurrentMode>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_HCD_Init+0x88>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e017      	b.n	8002c16 <HAL_HCD_Init+0xb8>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7c1a      	ldrb	r2, [r3, #16]
 8002bee:	f88d 2000 	strb.w	r2, [sp]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bf6:	f003 fa47 	bl	8006088 <USB_HostInit>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_HCD_Init+0xae>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e004      	b.n	8002c16 <HAL_HCD_Init+0xb8>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e08d      	b.n	8002d4c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7fe fadf 	bl	8001208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2224      	movs	r2, #36	@ 0x24
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0201 	bic.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d107      	bne.n	8002c98 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c94:	609a      	str	r2, [r3, #8]
 8002c96:	e006      	b.n	8002ca6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ca4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d108      	bne.n	8002cc0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	e007      	b.n	8002cd0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69d9      	ldr	r1, [r3, #28]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1a      	ldr	r2, [r3, #32]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	460b      	mov	r3, r1
 8002d62:	817b      	strh	r3, [r7, #10]
 8002d64:	4613      	mov	r3, r2
 8002d66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	f040 80fd 	bne.w	8002f70 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_I2C_Master_Transmit+0x30>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e0f6      	b.n	8002f72 <HAL_I2C_Master_Transmit+0x21e>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d8c:	f7fe fd52 	bl	8001834 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2319      	movs	r3, #25
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fa0a 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e0e1      	b.n	8002f72 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2221      	movs	r2, #33	@ 0x21
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2210      	movs	r2, #16
 8002dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	893a      	ldrh	r2, [r7, #8]
 8002dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2bff      	cmp	r3, #255	@ 0xff
 8002dde:	d906      	bls.n	8002dee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	22ff      	movs	r2, #255	@ 0xff
 8002de4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002de6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	e007      	b.n	8002dfe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002df8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dfc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d024      	beq.n	8002e50 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	8979      	ldrh	r1, [r7, #10]
 8002e42:	4b4e      	ldr	r3, [pc, #312]	@ (8002f7c <HAL_I2C_Master_Transmit+0x228>)
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fc05 	bl	8003658 <I2C_TransferConfig>
 8002e4e:	e066      	b.n	8002f1e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	8979      	ldrh	r1, [r7, #10]
 8002e58:	4b48      	ldr	r3, [pc, #288]	@ (8002f7c <HAL_I2C_Master_Transmit+0x228>)
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fbfa 	bl	8003658 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e64:	e05b      	b.n	8002f1e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	6a39      	ldr	r1, [r7, #32]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f9fd 	bl	800326a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07b      	b.n	8002f72 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	781a      	ldrb	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d034      	beq.n	8002f1e <HAL_I2C_Master_Transmit+0x1ca>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d130      	bne.n	8002f1e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2180      	movs	r1, #128	@ 0x80
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f976 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e04d      	b.n	8002f72 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2bff      	cmp	r3, #255	@ 0xff
 8002ede:	d90e      	bls.n	8002efe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	22ff      	movs	r2, #255	@ 0xff
 8002ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	8979      	ldrh	r1, [r7, #10]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fbae 	bl	8003658 <I2C_TransferConfig>
 8002efc:	e00f      	b.n	8002f1e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	8979      	ldrh	r1, [r7, #10]
 8002f10:	2300      	movs	r3, #0
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fb9d 	bl	8003658 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d19e      	bne.n	8002e66 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	6a39      	ldr	r1, [r7, #32]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f9e3 	bl	80032f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e01a      	b.n	8002f72 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2220      	movs	r2, #32
 8002f42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f80 <HAL_I2C_Master_Transmit+0x22c>)
 8002f50:	400b      	ands	r3, r1
 8002f52:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002f70:	2302      	movs	r3, #2
  }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	80002000 	.word	0x80002000
 8002f80:	fe00e800 	.word	0xfe00e800

08002f84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	460b      	mov	r3, r1
 8002f92:	817b      	strh	r3, [r7, #10]
 8002f94:	4613      	mov	r3, r2
 8002f96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	f040 80db 	bne.w	800315c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_I2C_Master_Receive+0x30>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e0d4      	b.n	800315e <HAL_I2C_Master_Receive+0x1da>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fbc:	f7fe fc3a 	bl	8001834 <HAL_GetTick>
 8002fc0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2319      	movs	r3, #25
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f8f2 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0bf      	b.n	800315e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2222      	movs	r2, #34	@ 0x22
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2210      	movs	r2, #16
 8002fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	893a      	ldrh	r2, [r7, #8]
 8002ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	2bff      	cmp	r3, #255	@ 0xff
 800300e:	d90e      	bls.n	800302e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301a:	b2da      	uxtb	r2, r3
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	4b52      	ldr	r3, [pc, #328]	@ (8003168 <HAL_I2C_Master_Receive+0x1e4>)
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fb16 	bl	8003658 <I2C_TransferConfig>
 800302c:	e06d      	b.n	800310a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303c:	b2da      	uxtb	r2, r3
 800303e:	8979      	ldrh	r1, [r7, #10]
 8003040:	4b49      	ldr	r3, [pc, #292]	@ (8003168 <HAL_I2C_Master_Receive+0x1e4>)
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fb05 	bl	8003658 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800304e:	e05c      	b.n	800310a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	6a39      	ldr	r1, [r7, #32]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f993 	bl	8003380 <I2C_WaitOnRXNEFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e07c      	b.n	800315e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d034      	beq.n	800310a <HAL_I2C_Master_Receive+0x186>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d130      	bne.n	800310a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	2200      	movs	r2, #0
 80030b0:	2180      	movs	r1, #128	@ 0x80
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f880 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e04d      	b.n	800315e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2bff      	cmp	r3, #255	@ 0xff
 80030ca:	d90e      	bls.n	80030ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	22ff      	movs	r2, #255	@ 0xff
 80030d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	8979      	ldrh	r1, [r7, #10]
 80030da:	2300      	movs	r3, #0
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fab8 	bl	8003658 <I2C_TransferConfig>
 80030e8:	e00f      	b.n	800310a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	8979      	ldrh	r1, [r7, #10]
 80030fc:	2300      	movs	r3, #0
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 faa7 	bl	8003658 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d19d      	bne.n	8003050 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	6a39      	ldr	r1, [r7, #32]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f8ed 	bl	80032f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e01a      	b.n	800315e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2220      	movs	r2, #32
 800312e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <HAL_I2C_Master_Receive+0x1e8>)
 800313c:	400b      	ands	r3, r1
 800313e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800315c:	2302      	movs	r3, #2
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	80002400 	.word	0x80002400
 800316c:	fe00e800 	.word	0xfe00e800

08003170 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b02      	cmp	r3, #2
 8003184:	d103      	bne.n	800318e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2200      	movs	r2, #0
 800318c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	d007      	beq.n	80031ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	619a      	str	r2, [r3, #24]
  }
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c8:	e03b      	b.n	8003242 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	6839      	ldr	r1, [r7, #0]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f962 	bl	8003498 <I2C_IsErrorOccurred>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e041      	b.n	8003262 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d02d      	beq.n	8003242 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	f7fe fb25 	bl	8001834 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d302      	bcc.n	80031fc <I2C_WaitOnFlagUntilTimeout+0x44>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d122      	bne.n	8003242 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4013      	ands	r3, r2
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	429a      	cmp	r2, r3
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	429a      	cmp	r2, r3
 8003218:	d113      	bne.n	8003242 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f043 0220 	orr.w	r2, r3, #32
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e00f      	b.n	8003262 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699a      	ldr	r2, [r3, #24]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4013      	ands	r3, r2
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	429a      	cmp	r2, r3
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	429a      	cmp	r2, r3
 800325e:	d0b4      	beq.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003276:	e033      	b.n	80032e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f90b 	bl	8003498 <I2C_IsErrorOccurred>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e031      	b.n	80032f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d025      	beq.n	80032e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003294:	f7fe face 	bl	8001834 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d302      	bcc.n	80032aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d11a      	bne.n	80032e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d013      	beq.n	80032e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e007      	b.n	80032f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d1c4      	bne.n	8003278 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003304:	e02f      	b.n	8003366 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f8c4 	bl	8003498 <I2C_IsErrorOccurred>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e02d      	b.n	8003376 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331a:	f7fe fa8b 	bl	8001834 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	429a      	cmp	r2, r3
 8003328:	d302      	bcc.n	8003330 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d11a      	bne.n	8003366 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b20      	cmp	r3, #32
 800333c:	d013      	beq.n	8003366 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003342:	f043 0220 	orr.w	r2, r3, #32
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e007      	b.n	8003376 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b20      	cmp	r3, #32
 8003372:	d1c8      	bne.n	8003306 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003390:	e071      	b.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f87e 	bl	8003498 <I2C_IsErrorOccurred>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d13b      	bne.n	800342c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d138      	bne.n	800342c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d105      	bne.n	80033d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d121      	bne.n	8003426 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2210      	movs	r2, #16
 80033e8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2204      	movs	r2, #4
 80033ee:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2220      	movs	r2, #32
 80033f6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b24      	ldr	r3, [pc, #144]	@ (8003494 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003404:	400b      	ands	r3, r1
 8003406:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	75fb      	strb	r3, [r7, #23]
 8003424:	e002      	b.n	800342c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800342c:	f7fe fa02 	bl	8001834 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d302      	bcc.n	8003442 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d119      	bne.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003442:	7dfb      	ldrb	r3, [r7, #23]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d116      	bne.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b04      	cmp	r3, #4
 8003454:	d00f      	beq.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	f043 0220 	orr.w	r2, r3, #32
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d002      	beq.n	800348a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003484:	7dfb      	ldrb	r3, [r7, #23]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d083      	beq.n	8003392 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800348a:	7dfb      	ldrb	r3, [r7, #23]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	fe00e800 	.word	0xfe00e800

08003498 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	@ 0x28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d068      	beq.n	8003596 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2210      	movs	r2, #16
 80034ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034cc:	e049      	b.n	8003562 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d045      	beq.n	8003562 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034d6:	f7fe f9ad 	bl	8001834 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d302      	bcc.n	80034ec <I2C_IsErrorOccurred+0x54>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d13a      	bne.n	8003562 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800350a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800350e:	d121      	bne.n	8003554 <I2C_IsErrorOccurred+0xbc>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003516:	d01d      	beq.n	8003554 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003518:	7cfb      	ldrb	r3, [r7, #19]
 800351a:	2b20      	cmp	r3, #32
 800351c:	d01a      	beq.n	8003554 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800352c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800352e:	f7fe f981 	bl	8001834 <HAL_GetTick>
 8003532:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003534:	e00e      	b.n	8003554 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003536:	f7fe f97d 	bl	8001834 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b19      	cmp	r3, #25
 8003542:	d907      	bls.n	8003554 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	f043 0320 	orr.w	r3, r3, #32
 800354a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003552:	e006      	b.n	8003562 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b20      	cmp	r3, #32
 8003560:	d1e9      	bne.n	8003536 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b20      	cmp	r3, #32
 800356e:	d003      	beq.n	8003578 <I2C_IsErrorOccurred+0xe0>
 8003570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0aa      	beq.n	80034ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800357c:	2b00      	cmp	r3, #0
 800357e:	d103      	bne.n	8003588 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2220      	movs	r2, #32
 8003586:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	f043 0304 	orr.w	r3, r3, #4
 800358e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00b      	beq.n	80035c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	f043 0308 	orr.w	r3, r3, #8
 80035d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00b      	beq.n	8003604 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003604:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01c      	beq.n	8003646 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f7ff fdaf 	bl	8003170 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6859      	ldr	r1, [r3, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4b0d      	ldr	r3, [pc, #52]	@ (8003654 <I2C_IsErrorOccurred+0x1bc>)
 800361e:	400b      	ands	r3, r1
 8003620:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	431a      	orrs	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003646:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800364a:	4618      	mov	r0, r3
 800364c:	3728      	adds	r7, #40	@ 0x28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	fe00e800 	.word	0xfe00e800

08003658 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	460b      	mov	r3, r1
 8003664:	817b      	strh	r3, [r7, #10]
 8003666:	4613      	mov	r3, r2
 8003668:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800366a:	897b      	ldrh	r3, [r7, #10]
 800366c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003670:	7a7b      	ldrb	r3, [r7, #9]
 8003672:	041b      	lsls	r3, r3, #16
 8003674:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003678:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	4313      	orrs	r3, r2
 8003682:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003686:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	0d5b      	lsrs	r3, r3, #21
 8003692:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003696:	4b08      	ldr	r3, [pc, #32]	@ (80036b8 <I2C_TransferConfig+0x60>)
 8003698:	430b      	orrs	r3, r1
 800369a:	43db      	mvns	r3, r3
 800369c:	ea02 0103 	and.w	r1, r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	03ff63ff 	.word	0x03ff63ff

080036bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d138      	bne.n	8003744 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036dc:	2302      	movs	r3, #2
 80036de:	e032      	b.n	8003746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2224      	movs	r2, #36	@ 0x24
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800370e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e000      	b.n	8003746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003752:	b480      	push	{r7}
 8003754:	b085      	sub	sp, #20
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b20      	cmp	r3, #32
 8003766:	d139      	bne.n	80037dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003772:	2302      	movs	r3, #2
 8003774:	e033      	b.n	80037de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2224      	movs	r2, #36	@ 0x24
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	e000      	b.n	80037de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037f0:	4b04      	ldr	r3, [pc, #16]	@ (8003804 <HAL_PWREx_GetVoltageRange+0x18>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40007000 	.word	0x40007000

08003808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003816:	d130      	bne.n	800387a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003818:	4b23      	ldr	r3, [pc, #140]	@ (80038a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003824:	d038      	beq.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003826:	4b20      	ldr	r3, [pc, #128]	@ (80038a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800382e:	4a1e      	ldr	r2, [pc, #120]	@ (80038a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003830:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003834:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003836:	4b1d      	ldr	r3, [pc, #116]	@ (80038ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2232      	movs	r2, #50	@ 0x32
 800383c:	fb02 f303 	mul.w	r3, r2, r3
 8003840:	4a1b      	ldr	r2, [pc, #108]	@ (80038b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	0c9b      	lsrs	r3, r3, #18
 8003848:	3301      	adds	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800384c:	e002      	b.n	8003854 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3b01      	subs	r3, #1
 8003852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003854:	4b14      	ldr	r3, [pc, #80]	@ (80038a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800385c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003860:	d102      	bne.n	8003868 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f2      	bne.n	800384e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003868:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003874:	d110      	bne.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e00f      	b.n	800389a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800387a:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003886:	d007      	beq.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003888:	4b07      	ldr	r3, [pc, #28]	@ (80038a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003890:	4a05      	ldr	r2, [pc, #20]	@ (80038a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003892:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003896:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40007000 	.word	0x40007000
 80038ac:	20000000 	.word	0x20000000
 80038b0:	431bde83 	.word	0x431bde83

080038b4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80038b8:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a04      	ldr	r2, [pc, #16]	@ (80038d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038c2:	6053      	str	r3, [r2, #4]
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40007000 	.word	0x40007000

080038d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f000 bc08 	b.w	80040f8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e8:	4b96      	ldr	r3, [pc, #600]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f2:	4b94      	ldr	r3, [pc, #592]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80e4 	beq.w	8003ad2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <HAL_RCC_OscConfig+0x4c>
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b0c      	cmp	r3, #12
 8003914:	f040 808b 	bne.w	8003a2e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2b01      	cmp	r3, #1
 800391c:	f040 8087 	bne.w	8003a2e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003920:	4b88      	ldr	r3, [pc, #544]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_OscConfig+0x64>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e3df      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1a      	ldr	r2, [r3, #32]
 800393c:	4b81      	ldr	r3, [pc, #516]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d004      	beq.n	8003952 <HAL_RCC_OscConfig+0x7e>
 8003948:	4b7e      	ldr	r3, [pc, #504]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003950:	e005      	b.n	800395e <HAL_RCC_OscConfig+0x8a>
 8003952:	4b7c      	ldr	r3, [pc, #496]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800395e:	4293      	cmp	r3, r2
 8003960:	d223      	bcs.n	80039aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fdac 	bl	80044c4 <RCC_SetFlashLatencyFromMSIRange>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e3c0      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003976:	4b73      	ldr	r3, [pc, #460]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a72      	ldr	r2, [pc, #456]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 800397c:	f043 0308 	orr.w	r3, r3, #8
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	4b70      	ldr	r3, [pc, #448]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	496d      	ldr	r1, [pc, #436]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003990:	4313      	orrs	r3, r2
 8003992:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003994:	4b6b      	ldr	r3, [pc, #428]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	4968      	ldr	r1, [pc, #416]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
 80039a8:	e025      	b.n	80039f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039aa:	4b66      	ldr	r3, [pc, #408]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a65      	ldr	r2, [pc, #404]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 80039b0:	f043 0308 	orr.w	r3, r3, #8
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b63      	ldr	r3, [pc, #396]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4960      	ldr	r1, [pc, #384]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	495b      	ldr	r1, [pc, #364]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fd6c 	bl	80044c4 <RCC_SetFlashLatencyFromMSIRange>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e380      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039f6:	f000 fc87 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b51      	ldr	r3, [pc, #324]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	4950      	ldr	r1, [pc, #320]	@ (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003a08:	5ccb      	ldrb	r3, [r1, r3]
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a12:	4a4e      	ldr	r2, [pc, #312]	@ (8003b4c <HAL_RCC_OscConfig+0x278>)
 8003a14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a16:	4b4e      	ldr	r3, [pc, #312]	@ (8003b50 <HAL_RCC_OscConfig+0x27c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd fdf6 	bl	800160c <HAL_InitTick>
 8003a20:	4603      	mov	r3, r0
 8003a22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d052      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	e364      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d032      	beq.n	8003a9c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a36:	4b43      	ldr	r3, [pc, #268]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a42      	ldr	r2, [pc, #264]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a42:	f7fd fef7 	bl	8001834 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a4a:	f7fd fef3 	bl	8001834 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e34d      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a5c:	4b39      	ldr	r3, [pc, #228]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a68:	4b36      	ldr	r3, [pc, #216]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a35      	ldr	r2, [pc, #212]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	f043 0308 	orr.w	r3, r3, #8
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b33      	ldr	r3, [pc, #204]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4930      	ldr	r1, [pc, #192]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a86:	4b2f      	ldr	r3, [pc, #188]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	492b      	ldr	r1, [pc, #172]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
 8003a9a:	e01a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a9c:	4b29      	ldr	r3, [pc, #164]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a28      	ldr	r2, [pc, #160]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fec4 	bl	8001834 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab0:	f7fd fec0 	bl	8001834 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e31a      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ac2:	4b20      	ldr	r3, [pc, #128]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x1dc>
 8003ace:	e000      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ad0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d073      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_OscConfig+0x21c>
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	d10e      	bne.n	8003b08 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d10b      	bne.n	8003b08 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af0:	4b14      	ldr	r3, [pc, #80]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d063      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x2f0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d15f      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e2f7      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b10:	d106      	bne.n	8003b20 <HAL_RCC_OscConfig+0x24c>
 8003b12:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a0b      	ldr	r2, [pc, #44]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e025      	b.n	8003b6c <HAL_RCC_OscConfig+0x298>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b28:	d114      	bne.n	8003b54 <HAL_RCC_OscConfig+0x280>
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a05      	ldr	r2, [pc, #20]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	4b03      	ldr	r3, [pc, #12]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a02      	ldr	r2, [pc, #8]	@ (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e013      	b.n	8003b6c <HAL_RCC_OscConfig+0x298>
 8003b44:	40021000 	.word	0x40021000
 8003b48:	080090ac 	.word	0x080090ac
 8003b4c:	20000000 	.word	0x20000000
 8003b50:	20000004 	.word	0x20000004
 8003b54:	4ba0      	ldr	r3, [pc, #640]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a9f      	ldr	r2, [pc, #636]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b9d      	ldr	r3, [pc, #628]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a9c      	ldr	r2, [pc, #624]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003b66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d013      	beq.n	8003b9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fd fe5e 	bl	8001834 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7fd fe5a 	bl	8001834 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	@ 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e2b4      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b8e:	4b92      	ldr	r3, [pc, #584]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x2a8>
 8003b9a:	e014      	b.n	8003bc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fd fe4a 	bl	8001834 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fd fe46 	bl	8001834 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	@ 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e2a0      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bb6:	4b88      	ldr	r3, [pc, #544]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x2d0>
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d060      	beq.n	8003c94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_OscConfig+0x310>
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b0c      	cmp	r3, #12
 8003bdc:	d119      	bne.n	8003c12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d116      	bne.n	8003c12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be4:	4b7c      	ldr	r3, [pc, #496]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_OscConfig+0x328>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e27d      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfc:	4b76      	ldr	r3, [pc, #472]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	4973      	ldr	r1, [pc, #460]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c10:	e040      	b.n	8003c94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d023      	beq.n	8003c62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c1a:	4b6f      	ldr	r3, [pc, #444]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a6e      	ldr	r2, [pc, #440]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c26:	f7fd fe05 	bl	8001834 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2e:	f7fd fe01 	bl	8001834 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e25b      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c40:	4b65      	ldr	r3, [pc, #404]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4c:	4b62      	ldr	r3, [pc, #392]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	495f      	ldr	r1, [pc, #380]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
 8003c60:	e018      	b.n	8003c94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c62:	4b5d      	ldr	r3, [pc, #372]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a5c      	ldr	r2, [pc, #368]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fd fde1 	bl	8001834 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c76:	f7fd fddd 	bl	8001834 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e237      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c88:	4b53      	ldr	r3, [pc, #332]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1f0      	bne.n	8003c76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d03c      	beq.n	8003d1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01c      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cae:	4a4a      	ldr	r2, [pc, #296]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fd fdbc 	bl	8001834 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc0:	f7fd fdb8 	bl	8001834 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e212      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cd2:	4b41      	ldr	r3, [pc, #260]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ef      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x3ec>
 8003ce0:	e01b      	b.n	8003d1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce8:	4a3b      	ldr	r2, [pc, #236]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf2:	f7fd fd9f 	bl	8001834 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfa:	f7fd fd9b 	bl	8001834 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e1f5      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d0c:	4b32      	ldr	r3, [pc, #200]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1ef      	bne.n	8003cfa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80a6 	beq.w	8003e74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10d      	bne.n	8003d54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d38:	4b27      	ldr	r3, [pc, #156]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3c:	4a26      	ldr	r2, [pc, #152]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d44:	4b24      	ldr	r3, [pc, #144]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d50:	2301      	movs	r3, #1
 8003d52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d54:	4b21      	ldr	r3, [pc, #132]	@ (8003ddc <HAL_RCC_OscConfig+0x508>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d118      	bne.n	8003d92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d60:	4b1e      	ldr	r3, [pc, #120]	@ (8003ddc <HAL_RCC_OscConfig+0x508>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1d      	ldr	r2, [pc, #116]	@ (8003ddc <HAL_RCC_OscConfig+0x508>)
 8003d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6c:	f7fd fd62 	bl	8001834 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d74:	f7fd fd5e 	bl	8001834 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e1b8      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d86:	4b15      	ldr	r3, [pc, #84]	@ (8003ddc <HAL_RCC_OscConfig+0x508>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d108      	bne.n	8003dac <HAL_RCC_OscConfig+0x4d8>
 8003d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da0:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003daa:	e029      	b.n	8003e00 <HAL_RCC_OscConfig+0x52c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b05      	cmp	r3, #5
 8003db2:	d115      	bne.n	8003de0 <HAL_RCC_OscConfig+0x50c>
 8003db4:	4b08      	ldr	r3, [pc, #32]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dba:	4a07      	ldr	r2, [pc, #28]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003dbc:	f043 0304 	orr.w	r3, r3, #4
 8003dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dc4:	4b04      	ldr	r3, [pc, #16]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	4a03      	ldr	r2, [pc, #12]	@ (8003dd8 <HAL_RCC_OscConfig+0x504>)
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dd4:	e014      	b.n	8003e00 <HAL_RCC_OscConfig+0x52c>
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	4b9d      	ldr	r3, [pc, #628]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de6:	4a9c      	ldr	r2, [pc, #624]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003df0:	4b99      	ldr	r3, [pc, #612]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df6:	4a98      	ldr	r2, [pc, #608]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003df8:	f023 0304 	bic.w	r3, r3, #4
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d016      	beq.n	8003e36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fd fd14 	bl	8001834 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e10:	f7fd fd10 	bl	8001834 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e168      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e26:	4b8c      	ldr	r3, [pc, #560]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ed      	beq.n	8003e10 <HAL_RCC_OscConfig+0x53c>
 8003e34:	e015      	b.n	8003e62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e36:	f7fd fcfd 	bl	8001834 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fd fcf9 	bl	8001834 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e151      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e54:	4b80      	ldr	r3, [pc, #512]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1ed      	bne.n	8003e3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e62:	7ffb      	ldrb	r3, [r7, #31]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d105      	bne.n	8003e74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e68:	4b7b      	ldr	r3, [pc, #492]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6c:	4a7a      	ldr	r2, [pc, #488]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d03c      	beq.n	8003efa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d01c      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e88:	4b73      	ldr	r3, [pc, #460]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e8e:	4a72      	ldr	r2, [pc, #456]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e98:	f7fd fccc 	bl	8001834 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ea0:	f7fd fcc8 	bl	8001834 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e122      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eb2:	4b69      	ldr	r3, [pc, #420]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0ef      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x5cc>
 8003ec0:	e01b      	b.n	8003efa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ec2:	4b65      	ldr	r3, [pc, #404]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003ec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ec8:	4a63      	ldr	r2, [pc, #396]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fd fcaf 	bl	8001834 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eda:	f7fd fcab 	bl	8001834 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e105      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003eec:	4b5a      	ldr	r3, [pc, #360]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003eee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1ef      	bne.n	8003eda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80f9 	beq.w	80040f6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	f040 80cf 	bne.w	80040ac <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f0e:	4b52      	ldr	r3, [pc, #328]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f003 0203 	and.w	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d12c      	bne.n	8003f7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d123      	bne.n	8003f7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d11b      	bne.n	8003f7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d113      	bne.n	8003f7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	3b01      	subs	r3, #1
 8003f62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d109      	bne.n	8003f7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	3b01      	subs	r3, #1
 8003f76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d071      	beq.n	8004060 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b0c      	cmp	r3, #12
 8003f80:	d068      	beq.n	8004054 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f82:	4b35      	ldr	r3, [pc, #212]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f8e:	4b32      	ldr	r3, [pc, #200]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0ac      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003fa4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fa8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003faa:	f7fd fc43 	bl	8001834 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb2:	f7fd fc3f 	bl	8001834 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e099      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc4:	4b24      	ldr	r3, [pc, #144]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f0      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd0:	4b21      	ldr	r3, [pc, #132]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	4b21      	ldr	r3, [pc, #132]	@ (800405c <HAL_RCC_OscConfig+0x788>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fe0:	3a01      	subs	r2, #1
 8003fe2:	0112      	lsls	r2, r2, #4
 8003fe4:	4311      	orrs	r1, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fea:	0212      	lsls	r2, r2, #8
 8003fec:	4311      	orrs	r1, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ff2:	0852      	lsrs	r2, r2, #1
 8003ff4:	3a01      	subs	r2, #1
 8003ff6:	0552      	lsls	r2, r2, #21
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ffe:	0852      	lsrs	r2, r2, #1
 8004000:	3a01      	subs	r2, #1
 8004002:	0652      	lsls	r2, r2, #25
 8004004:	4311      	orrs	r1, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800400a:	06d2      	lsls	r2, r2, #27
 800400c:	430a      	orrs	r2, r1
 800400e:	4912      	ldr	r1, [pc, #72]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8004010:	4313      	orrs	r3, r2
 8004012:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004014:	4b10      	ldr	r3, [pc, #64]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0f      	ldr	r2, [pc, #60]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 800401a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800401e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004020:	4b0d      	ldr	r3, [pc, #52]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4a0c      	ldr	r2, [pc, #48]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8004026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800402a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800402c:	f7fd fc02 	bl	8001834 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fd fbfe 	bl	8001834 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e058      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004046:	4b04      	ldr	r3, [pc, #16]	@ (8004058 <HAL_RCC_OscConfig+0x784>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004052:	e050      	b.n	80040f6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e04f      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
 8004058:	40021000 	.word	0x40021000
 800405c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004060:	4b27      	ldr	r3, [pc, #156]	@ (8004100 <HAL_RCC_OscConfig+0x82c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d144      	bne.n	80040f6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800406c:	4b24      	ldr	r3, [pc, #144]	@ (8004100 <HAL_RCC_OscConfig+0x82c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a23      	ldr	r2, [pc, #140]	@ (8004100 <HAL_RCC_OscConfig+0x82c>)
 8004072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004076:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004078:	4b21      	ldr	r3, [pc, #132]	@ (8004100 <HAL_RCC_OscConfig+0x82c>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a20      	ldr	r2, [pc, #128]	@ (8004100 <HAL_RCC_OscConfig+0x82c>)
 800407e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004082:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004084:	f7fd fbd6 	bl	8001834 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408c:	f7fd fbd2 	bl	8001834 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e02c      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800409e:	4b18      	ldr	r3, [pc, #96]	@ (8004100 <HAL_RCC_OscConfig+0x82c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x7b8>
 80040aa:	e024      	b.n	80040f6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b0c      	cmp	r3, #12
 80040b0:	d01f      	beq.n	80040f2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b2:	4b13      	ldr	r3, [pc, #76]	@ (8004100 <HAL_RCC_OscConfig+0x82c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a12      	ldr	r2, [pc, #72]	@ (8004100 <HAL_RCC_OscConfig+0x82c>)
 80040b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040be:	f7fd fbb9 	bl	8001834 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c6:	f7fd fbb5 	bl	8001834 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e00f      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d8:	4b09      	ldr	r3, [pc, #36]	@ (8004100 <HAL_RCC_OscConfig+0x82c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1f0      	bne.n	80040c6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040e4:	4b06      	ldr	r3, [pc, #24]	@ (8004100 <HAL_RCC_OscConfig+0x82c>)
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	4905      	ldr	r1, [pc, #20]	@ (8004100 <HAL_RCC_OscConfig+0x82c>)
 80040ea:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <HAL_RCC_OscConfig+0x830>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	60cb      	str	r3, [r1, #12]
 80040f0:	e001      	b.n	80040f6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3720      	adds	r7, #32
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	feeefffc 	.word	0xfeeefffc

08004108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0e7      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800411c:	4b75      	ldr	r3, [pc, #468]	@ (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d910      	bls.n	800414c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412a:	4b72      	ldr	r3, [pc, #456]	@ (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f023 0207 	bic.w	r2, r3, #7
 8004132:	4970      	ldr	r1, [pc, #448]	@ (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800413a:	4b6e      	ldr	r3, [pc, #440]	@ (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d001      	beq.n	800414c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0cf      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d010      	beq.n	800417a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	4b66      	ldr	r3, [pc, #408]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004164:	429a      	cmp	r2, r3
 8004166:	d908      	bls.n	800417a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004168:	4b63      	ldr	r3, [pc, #396]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4960      	ldr	r1, [pc, #384]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d04c      	beq.n	8004220 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800418e:	4b5a      	ldr	r3, [pc, #360]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d121      	bne.n	80041de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e0a6      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041a6:	4b54      	ldr	r3, [pc, #336]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d115      	bne.n	80041de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e09a      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041be:	4b4e      	ldr	r3, [pc, #312]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e08e      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ce:	4b4a      	ldr	r3, [pc, #296]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e086      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041de:	4b46      	ldr	r3, [pc, #280]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f023 0203 	bic.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4943      	ldr	r1, [pc, #268]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f0:	f7fd fb20 	bl	8001834 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	e00a      	b.n	800420e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f8:	f7fd fb1c 	bl	8001834 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e06e      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	4b3a      	ldr	r3, [pc, #232]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 020c 	and.w	r2, r3, #12
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	429a      	cmp	r2, r3
 800421e:	d1eb      	bne.n	80041f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d010      	beq.n	800424e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4b31      	ldr	r3, [pc, #196]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004238:	429a      	cmp	r2, r3
 800423a:	d208      	bcs.n	800424e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b2e      	ldr	r3, [pc, #184]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	492b      	ldr	r1, [pc, #172]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800424e:	4b29      	ldr	r3, [pc, #164]	@ (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d210      	bcs.n	800427e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425c:	4b25      	ldr	r3, [pc, #148]	@ (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 0207 	bic.w	r2, r3, #7
 8004264:	4923      	ldr	r1, [pc, #140]	@ (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	4313      	orrs	r3, r2
 800426a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426c:	4b21      	ldr	r3, [pc, #132]	@ (80042f4 <HAL_RCC_ClockConfig+0x1ec>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d001      	beq.n	800427e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e036      	b.n	80042ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d008      	beq.n	800429c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800428a:	4b1b      	ldr	r3, [pc, #108]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	4918      	ldr	r1, [pc, #96]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004298:	4313      	orrs	r3, r2
 800429a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d009      	beq.n	80042bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a8:	4b13      	ldr	r3, [pc, #76]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4910      	ldr	r1, [pc, #64]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042bc:	f000 f824 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b0d      	ldr	r3, [pc, #52]	@ (80042f8 <HAL_RCC_ClockConfig+0x1f0>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	490b      	ldr	r1, [pc, #44]	@ (80042fc <HAL_RCC_ClockConfig+0x1f4>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
 80042d8:	4a09      	ldr	r2, [pc, #36]	@ (8004300 <HAL_RCC_ClockConfig+0x1f8>)
 80042da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042dc:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <HAL_RCC_ClockConfig+0x1fc>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fd f993 	bl	800160c <HAL_InitTick>
 80042e6:	4603      	mov	r3, r0
 80042e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80042ea:	7afb      	ldrb	r3, [r7, #11]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40022000 	.word	0x40022000
 80042f8:	40021000 	.word	0x40021000
 80042fc:	080090ac 	.word	0x080090ac
 8004300:	20000000 	.word	0x20000000
 8004304:	20000004 	.word	0x20000004

08004308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	@ 0x24
 800430c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	2300      	movs	r3, #0
 8004314:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004316:	4b3e      	ldr	r3, [pc, #248]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004320:	4b3b      	ldr	r3, [pc, #236]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x34>
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b0c      	cmp	r3, #12
 8004334:	d121      	bne.n	800437a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d11e      	bne.n	800437a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800433c:	4b34      	ldr	r3, [pc, #208]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d107      	bne.n	8004358 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004348:	4b31      	ldr	r3, [pc, #196]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 800434a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	e005      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004358:	4b2d      	ldr	r3, [pc, #180]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004364:	4a2b      	ldr	r2, [pc, #172]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10d      	bne.n	8004390 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004378:	e00a      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b04      	cmp	r3, #4
 800437e:	d102      	bne.n	8004386 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004380:	4b25      	ldr	r3, [pc, #148]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x110>)
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	e004      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d101      	bne.n	8004390 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800438c:	4b22      	ldr	r3, [pc, #136]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x110>)
 800438e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b0c      	cmp	r3, #12
 8004394:	d134      	bne.n	8004400 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004396:	4b1e      	ldr	r3, [pc, #120]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d003      	beq.n	80043ae <HAL_RCC_GetSysClockFreq+0xa6>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d003      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0xac>
 80043ac:	e005      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x110>)
 80043b0:	617b      	str	r3, [r7, #20]
      break;
 80043b2:	e005      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043b4:	4b18      	ldr	r3, [pc, #96]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x110>)
 80043b6:	617b      	str	r3, [r7, #20]
      break;
 80043b8:	e002      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	617b      	str	r3, [r7, #20]
      break;
 80043be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043c0:	4b13      	ldr	r3, [pc, #76]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	3301      	adds	r3, #1
 80043cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043ce:	4b10      	ldr	r3, [pc, #64]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	fb03 f202 	mul.w	r2, r3, r2
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	0e5b      	lsrs	r3, r3, #25
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	3301      	adds	r3, #1
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004400:	69bb      	ldr	r3, [r7, #24]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3724      	adds	r7, #36	@ 0x24
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000
 8004414:	080090c4 	.word	0x080090c4
 8004418:	00f42400 	.word	0x00f42400

0800441c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004420:	4b03      	ldr	r3, [pc, #12]	@ (8004430 <HAL_RCC_GetHCLKFreq+0x14>)
 8004422:	681b      	ldr	r3, [r3, #0]
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000000 	.word	0x20000000

08004434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004438:	f7ff fff0 	bl	800441c <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b06      	ldr	r3, [pc, #24]	@ (8004458 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	0adb      	lsrs	r3, r3, #11
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4904      	ldr	r1, [pc, #16]	@ (800445c <HAL_RCC_GetPCLK2Freq+0x28>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004454:	4618      	mov	r0, r3
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40021000 	.word	0x40021000
 800445c:	080090bc 	.word	0x080090bc

08004460 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	220f      	movs	r2, #15
 800446e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004470:	4b12      	ldr	r3, [pc, #72]	@ (80044bc <HAL_RCC_GetClockConfig+0x5c>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0203 	and.w	r2, r3, #3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800447c:	4b0f      	ldr	r3, [pc, #60]	@ (80044bc <HAL_RCC_GetClockConfig+0x5c>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004488:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <HAL_RCC_GetClockConfig+0x5c>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004494:	4b09      	ldr	r3, [pc, #36]	@ (80044bc <HAL_RCC_GetClockConfig+0x5c>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	08db      	lsrs	r3, r3, #3
 800449a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80044a2:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <HAL_RCC_GetClockConfig+0x60>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0207 	and.w	r2, r3, #7
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	601a      	str	r2, [r3, #0]
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40022000 	.word	0x40022000

080044c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044d0:	4b2a      	ldr	r3, [pc, #168]	@ (800457c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044dc:	f7ff f986 	bl	80037ec <HAL_PWREx_GetVoltageRange>
 80044e0:	6178      	str	r0, [r7, #20]
 80044e2:	e014      	b.n	800450e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044e4:	4b25      	ldr	r3, [pc, #148]	@ (800457c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e8:	4a24      	ldr	r2, [pc, #144]	@ (800457c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80044f0:	4b22      	ldr	r3, [pc, #136]	@ (800457c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044fc:	f7ff f976 	bl	80037ec <HAL_PWREx_GetVoltageRange>
 8004500:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004502:	4b1e      	ldr	r3, [pc, #120]	@ (800457c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004506:	4a1d      	ldr	r2, [pc, #116]	@ (800457c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800450c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004514:	d10b      	bne.n	800452e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b80      	cmp	r3, #128	@ 0x80
 800451a:	d919      	bls.n	8004550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004520:	d902      	bls.n	8004528 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004522:	2302      	movs	r3, #2
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	e013      	b.n	8004550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004528:	2301      	movs	r3, #1
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	e010      	b.n	8004550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b80      	cmp	r3, #128	@ 0x80
 8004532:	d902      	bls.n	800453a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004534:	2303      	movs	r3, #3
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	e00a      	b.n	8004550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b80      	cmp	r3, #128	@ 0x80
 800453e:	d102      	bne.n	8004546 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004540:	2302      	movs	r3, #2
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	e004      	b.n	8004550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b70      	cmp	r3, #112	@ 0x70
 800454a:	d101      	bne.n	8004550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800454c:	2301      	movs	r3, #1
 800454e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004550:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f023 0207 	bic.w	r2, r3, #7
 8004558:	4909      	ldr	r1, [pc, #36]	@ (8004580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004560:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	429a      	cmp	r2, r3
 800456c:	d001      	beq.n	8004572 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000
 8004580:	40022000 	.word	0x40022000

08004584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800458c:	2300      	movs	r3, #0
 800458e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004590:	2300      	movs	r3, #0
 8004592:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800459c:	2b00      	cmp	r3, #0
 800459e:	d041      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045a8:	d02a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045ae:	d824      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045b4:	d008      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045ba:	d81e      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045c4:	d010      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045c6:	e018      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045c8:	4b86      	ldr	r3, [pc, #536]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a85      	ldr	r2, [pc, #532]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d4:	e015      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3304      	adds	r3, #4
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 facd 	bl	8004b7c <RCCEx_PLLSAI1_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045e6:	e00c      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3320      	adds	r3, #32
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fbb6 	bl	8004d60 <RCCEx_PLLSAI2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045f8:	e003      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	74fb      	strb	r3, [r7, #19]
      break;
 80045fe:	e000      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004602:	7cfb      	ldrb	r3, [r7, #19]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004608:	4b76      	ldr	r3, [pc, #472]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004616:	4973      	ldr	r1, [pc, #460]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800461e:	e001      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d041      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004634:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004638:	d02a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800463a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800463e:	d824      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004640:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004644:	d008      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800464a:	d81e      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004654:	d010      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004656:	e018      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004658:	4b62      	ldr	r3, [pc, #392]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4a61      	ldr	r2, [pc, #388]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004662:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004664:	e015      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3304      	adds	r3, #4
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fa85 	bl	8004b7c <RCCEx_PLLSAI1_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004676:	e00c      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3320      	adds	r3, #32
 800467c:	2100      	movs	r1, #0
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fb6e 	bl	8004d60 <RCCEx_PLLSAI2_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004688:	e003      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	74fb      	strb	r3, [r7, #19]
      break;
 800468e:	e000      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004692:	7cfb      	ldrb	r3, [r7, #19]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10b      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004698:	4b52      	ldr	r3, [pc, #328]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a6:	494f      	ldr	r1, [pc, #316]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046ae:	e001      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b0:	7cfb      	ldrb	r3, [r7, #19]
 80046b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80a0 	beq.w	8004802 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046c6:	4b47      	ldr	r3, [pc, #284]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80046d6:	2300      	movs	r3, #0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00d      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046dc:	4b41      	ldr	r3, [pc, #260]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e0:	4a40      	ldr	r2, [pc, #256]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046e8:	4b3e      	ldr	r3, [pc, #248]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f4:	2301      	movs	r3, #1
 80046f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046f8:	4b3b      	ldr	r3, [pc, #236]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a3a      	ldr	r2, [pc, #232]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004704:	f7fd f896 	bl	8001834 <HAL_GetTick>
 8004708:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800470a:	e009      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470c:	f7fd f892 	bl	8001834 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d902      	bls.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	74fb      	strb	r3, [r7, #19]
        break;
 800471e:	e005      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004720:	4b31      	ldr	r3, [pc, #196]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ef      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800472c:	7cfb      	ldrb	r3, [r7, #19]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d15c      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004732:	4b2c      	ldr	r3, [pc, #176]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004738:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800473c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01f      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	429a      	cmp	r2, r3
 800474e:	d019      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004750:	4b24      	ldr	r3, [pc, #144]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004756:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800475a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800475c:	4b21      	ldr	r3, [pc, #132]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004762:	4a20      	ldr	r2, [pc, #128]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800476c:	4b1d      	ldr	r3, [pc, #116]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004772:	4a1c      	ldr	r2, [pc, #112]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800477c:	4a19      	ldr	r2, [pc, #100]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d016      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fd f851 	bl	8001834 <HAL_GetTick>
 8004792:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004794:	e00b      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004796:	f7fd f84d 	bl	8001834 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d902      	bls.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	74fb      	strb	r3, [r7, #19]
            break;
 80047ac:	e006      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ae:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0ec      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10c      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047c2:	4b08      	ldr	r3, [pc, #32]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d2:	4904      	ldr	r1, [pc, #16]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047da:	e009      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047dc:	7cfb      	ldrb	r3, [r7, #19]
 80047de:	74bb      	strb	r3, [r7, #18]
 80047e0:	e006      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ec:	7cfb      	ldrb	r3, [r7, #19]
 80047ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f0:	7c7b      	ldrb	r3, [r7, #17]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d105      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f6:	4ba6      	ldr	r3, [pc, #664]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047fa:	4aa5      	ldr	r2, [pc, #660]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004800:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800480e:	4ba0      	ldr	r3, [pc, #640]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004814:	f023 0203 	bic.w	r2, r3, #3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481c:	499c      	ldr	r1, [pc, #624]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004830:	4b97      	ldr	r3, [pc, #604]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004836:	f023 020c 	bic.w	r2, r3, #12
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483e:	4994      	ldr	r1, [pc, #592]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004852:	4b8f      	ldr	r3, [pc, #572]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004858:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004860:	498b      	ldr	r1, [pc, #556]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004874:	4b86      	ldr	r3, [pc, #536]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004882:	4983      	ldr	r1, [pc, #524]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004896:	4b7e      	ldr	r3, [pc, #504]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a4:	497a      	ldr	r1, [pc, #488]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048b8:	4b75      	ldr	r3, [pc, #468]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c6:	4972      	ldr	r1, [pc, #456]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048da:	4b6d      	ldr	r3, [pc, #436]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e8:	4969      	ldr	r1, [pc, #420]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048fc:	4b64      	ldr	r3, [pc, #400]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004902:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800490a:	4961      	ldr	r1, [pc, #388]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800491e:	4b5c      	ldr	r3, [pc, #368]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004924:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800492c:	4958      	ldr	r1, [pc, #352]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004940:	4b53      	ldr	r3, [pc, #332]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494e:	4950      	ldr	r1, [pc, #320]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004962:	4b4b      	ldr	r3, [pc, #300]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004968:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004970:	4947      	ldr	r1, [pc, #284]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004984:	4b42      	ldr	r3, [pc, #264]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004986:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800498a:	f023 0203 	bic.w	r2, r3, #3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004992:	493f      	ldr	r1, [pc, #252]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d028      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b4:	4936      	ldr	r1, [pc, #216]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049c4:	d106      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c6:	4b32      	ldr	r3, [pc, #200]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	4a31      	ldr	r2, [pc, #196]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049d0:	60d3      	str	r3, [r2, #12]
 80049d2:	e011      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3304      	adds	r3, #4
 80049e2:	2101      	movs	r1, #1
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 f8c9 	bl	8004b7c <RCCEx_PLLSAI1_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d028      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a04:	4b22      	ldr	r3, [pc, #136]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a12:	491f      	ldr	r1, [pc, #124]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a22:	d106      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a24:	4b1a      	ldr	r3, [pc, #104]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a19      	ldr	r2, [pc, #100]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a2e:	60d3      	str	r3, [r2, #12]
 8004a30:	e011      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a3a:	d10c      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	2101      	movs	r1, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f89a 	bl	8004b7c <RCCEx_PLLSAI1_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d02a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a62:	4b0b      	ldr	r3, [pc, #44]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a70:	4907      	ldr	r1, [pc, #28]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a80:	d108      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a82:	4b03      	ldr	r3, [pc, #12]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	4a02      	ldr	r2, [pc, #8]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a8c:	60d3      	str	r3, [r2, #12]
 8004a8e:	e013      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004a90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f869 	bl	8004b7c <RCCEx_PLLSAI1_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aae:	7cfb      	ldrb	r3, [r7, #19]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004ab4:	7cfb      	ldrb	r3, [r7, #19]
 8004ab6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d02f      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ac4:	4b2c      	ldr	r3, [pc, #176]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ad2:	4929      	ldr	r1, [pc, #164]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ade:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ae2:	d10d      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	2102      	movs	r1, #2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f846 	bl	8004b7c <RCCEx_PLLSAI1_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d014      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	74bb      	strb	r3, [r7, #18]
 8004afe:	e011      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3320      	adds	r3, #32
 8004b0e:	2102      	movs	r1, #2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 f925 	bl	8004d60 <RCCEx_PLLSAI2_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b1a:	7cfb      	ldrb	r3, [r7, #19]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b30:	4b11      	ldr	r3, [pc, #68]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b36:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b40:	490d      	ldr	r1, [pc, #52]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b54:	4b08      	ldr	r3, [pc, #32]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b64:	4904      	ldr	r1, [pc, #16]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40021000 	.word	0x40021000

08004b7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b8a:	4b74      	ldr	r3, [pc, #464]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d018      	beq.n	8004bc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b96:	4b71      	ldr	r3, [pc, #452]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0203 	and.w	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d10d      	bne.n	8004bc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
       ||
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bae:	4b6b      	ldr	r3, [pc, #428]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
       ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d047      	beq.n	8004c52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
 8004bc6:	e044      	b.n	8004c52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d018      	beq.n	8004c02 <RCCEx_PLLSAI1_Config+0x86>
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d825      	bhi.n	8004c20 <RCCEx_PLLSAI1_Config+0xa4>
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d002      	beq.n	8004bde <RCCEx_PLLSAI1_Config+0x62>
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d009      	beq.n	8004bf0 <RCCEx_PLLSAI1_Config+0x74>
 8004bdc:	e020      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bde:	4b5f      	ldr	r3, [pc, #380]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d11d      	bne.n	8004c26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bee:	e01a      	b.n	8004c26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bf0:	4b5a      	ldr	r3, [pc, #360]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d116      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c00:	e013      	b.n	8004c2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c02:	4b56      	ldr	r3, [pc, #344]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10f      	bne.n	8004c2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c0e:	4b53      	ldr	r3, [pc, #332]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c1e:	e006      	b.n	8004c2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
      break;
 8004c24:	e004      	b.n	8004c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c26:	bf00      	nop
 8004c28:	e002      	b.n	8004c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e000      	b.n	8004c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10d      	bne.n	8004c52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c36:	4b49      	ldr	r3, [pc, #292]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6819      	ldr	r1, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	4943      	ldr	r1, [pc, #268]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d17c      	bne.n	8004d52 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c58:	4b40      	ldr	r3, [pc, #256]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c64:	f7fc fde6 	bl	8001834 <HAL_GetTick>
 8004c68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c6a:	e009      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c6c:	f7fc fde2 	bl	8001834 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d902      	bls.n	8004c80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c7e:	e005      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c80:	4b36      	ldr	r3, [pc, #216]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1ef      	bne.n	8004c6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d15f      	bne.n	8004d52 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d110      	bne.n	8004cba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c98:	4b30      	ldr	r3, [pc, #192]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004ca0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6892      	ldr	r2, [r2, #8]
 8004ca8:	0211      	lsls	r1, r2, #8
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	68d2      	ldr	r2, [r2, #12]
 8004cae:	06d2      	lsls	r2, r2, #27
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	492a      	ldr	r1, [pc, #168]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	610b      	str	r3, [r1, #16]
 8004cb8:	e027      	b.n	8004d0a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d112      	bne.n	8004ce6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cc0:	4b26      	ldr	r3, [pc, #152]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004cc8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6892      	ldr	r2, [r2, #8]
 8004cd0:	0211      	lsls	r1, r2, #8
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6912      	ldr	r2, [r2, #16]
 8004cd6:	0852      	lsrs	r2, r2, #1
 8004cd8:	3a01      	subs	r2, #1
 8004cda:	0552      	lsls	r2, r2, #21
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	491f      	ldr	r1, [pc, #124]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	610b      	str	r3, [r1, #16]
 8004ce4:	e011      	b.n	8004d0a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004cee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6892      	ldr	r2, [r2, #8]
 8004cf6:	0211      	lsls	r1, r2, #8
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6952      	ldr	r2, [r2, #20]
 8004cfc:	0852      	lsrs	r2, r2, #1
 8004cfe:	3a01      	subs	r2, #1
 8004d00:	0652      	lsls	r2, r2, #25
 8004d02:	430a      	orrs	r2, r1
 8004d04:	4915      	ldr	r1, [pc, #84]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d0a:	4b14      	ldr	r3, [pc, #80]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a13      	ldr	r2, [pc, #76]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d16:	f7fc fd8d 	bl	8001834 <HAL_GetTick>
 8004d1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d1c:	e009      	b.n	8004d32 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d1e:	f7fc fd89 	bl	8001834 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d902      	bls.n	8004d32 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	73fb      	strb	r3, [r7, #15]
          break;
 8004d30:	e005      	b.n	8004d3e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d32:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0ef      	beq.n	8004d1e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d44:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	4903      	ldr	r1, [pc, #12]	@ (8004d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40021000 	.word	0x40021000

08004d60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d6e:	4b69      	ldr	r3, [pc, #420]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d018      	beq.n	8004dac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d7a:	4b66      	ldr	r3, [pc, #408]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f003 0203 	and.w	r2, r3, #3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d10d      	bne.n	8004da6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d009      	beq.n	8004da6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d92:	4b60      	ldr	r3, [pc, #384]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
       ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d047      	beq.n	8004e36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	73fb      	strb	r3, [r7, #15]
 8004daa:	e044      	b.n	8004e36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d018      	beq.n	8004de6 <RCCEx_PLLSAI2_Config+0x86>
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d825      	bhi.n	8004e04 <RCCEx_PLLSAI2_Config+0xa4>
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d002      	beq.n	8004dc2 <RCCEx_PLLSAI2_Config+0x62>
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d009      	beq.n	8004dd4 <RCCEx_PLLSAI2_Config+0x74>
 8004dc0:	e020      	b.n	8004e04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dc2:	4b54      	ldr	r3, [pc, #336]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d11d      	bne.n	8004e0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd2:	e01a      	b.n	8004e0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dd4:	4b4f      	ldr	r3, [pc, #316]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d116      	bne.n	8004e0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de4:	e013      	b.n	8004e0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004de6:	4b4b      	ldr	r3, [pc, #300]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10f      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004df2:	4b48      	ldr	r3, [pc, #288]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e02:	e006      	b.n	8004e12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
      break;
 8004e08:	e004      	b.n	8004e14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e12:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6819      	ldr	r1, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	4938      	ldr	r1, [pc, #224]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d166      	bne.n	8004f0a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e3c:	4b35      	ldr	r3, [pc, #212]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a34      	ldr	r2, [pc, #208]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e48:	f7fc fcf4 	bl	8001834 <HAL_GetTick>
 8004e4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e4e:	e009      	b.n	8004e64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e50:	f7fc fcf0 	bl	8001834 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d902      	bls.n	8004e64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	73fb      	strb	r3, [r7, #15]
        break;
 8004e62:	e005      	b.n	8004e70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e64:	4b2b      	ldr	r3, [pc, #172]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ef      	bne.n	8004e50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d149      	bne.n	8004f0a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d110      	bne.n	8004e9e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e7c:	4b25      	ldr	r3, [pc, #148]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004e84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6892      	ldr	r2, [r2, #8]
 8004e8c:	0211      	lsls	r1, r2, #8
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68d2      	ldr	r2, [r2, #12]
 8004e92:	06d2      	lsls	r2, r2, #27
 8004e94:	430a      	orrs	r2, r1
 8004e96:	491f      	ldr	r1, [pc, #124]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	614b      	str	r3, [r1, #20]
 8004e9c:	e011      	b.n	8004ec2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ea6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6892      	ldr	r2, [r2, #8]
 8004eae:	0211      	lsls	r1, r2, #8
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6912      	ldr	r2, [r2, #16]
 8004eb4:	0852      	lsrs	r2, r2, #1
 8004eb6:	3a01      	subs	r2, #1
 8004eb8:	0652      	lsls	r2, r2, #25
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	4915      	ldr	r1, [pc, #84]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ec2:	4b14      	ldr	r3, [pc, #80]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a13      	ldr	r2, [pc, #76]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ecc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ece:	f7fc fcb1 	bl	8001834 <HAL_GetTick>
 8004ed2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ed4:	e009      	b.n	8004eea <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ed6:	f7fc fcad 	bl	8001834 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d902      	bls.n	8004eea <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	73fb      	strb	r3, [r7, #15]
          break;
 8004ee8:	e005      	b.n	8004ef6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004eea:	4b0a      	ldr	r3, [pc, #40]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0ef      	beq.n	8004ed6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004efc:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	4903      	ldr	r1, [pc, #12]	@ (8004f14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40021000 	.word	0x40021000

08004f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e049      	b.n	8004fbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f841 	bl	8004fc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f000 fb4a 	bl	80055f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d001      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e04f      	b.n	8005094 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a23      	ldr	r2, [pc, #140]	@ (80050a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01d      	beq.n	8005052 <HAL_TIM_Base_Start_IT+0x76>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501e:	d018      	beq.n	8005052 <HAL_TIM_Base_Start_IT+0x76>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1f      	ldr	r2, [pc, #124]	@ (80050a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d013      	beq.n	8005052 <HAL_TIM_Base_Start_IT+0x76>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1e      	ldr	r2, [pc, #120]	@ (80050a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00e      	beq.n	8005052 <HAL_TIM_Base_Start_IT+0x76>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1c      	ldr	r2, [pc, #112]	@ (80050ac <HAL_TIM_Base_Start_IT+0xd0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d009      	beq.n	8005052 <HAL_TIM_Base_Start_IT+0x76>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1b      	ldr	r2, [pc, #108]	@ (80050b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d004      	beq.n	8005052 <HAL_TIM_Base_Start_IT+0x76>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a19      	ldr	r2, [pc, #100]	@ (80050b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d115      	bne.n	800507e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	4b17      	ldr	r3, [pc, #92]	@ (80050b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800505a:	4013      	ands	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b06      	cmp	r3, #6
 8005062:	d015      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0xb4>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800506a:	d011      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507c:	e008      	b.n	8005090 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0201 	orr.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e000      	b.n	8005092 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005090:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40000c00 	.word	0x40000c00
 80050b0:	40013400 	.word	0x40013400
 80050b4:	40014000 	.word	0x40014000
 80050b8:	00010007 	.word	0x00010007

080050bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e049      	b.n	8005162 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fc f97a 	bl	80013dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f000 fa78 	bl	80055f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d020      	beq.n	80051ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01b      	beq.n	80051ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f06f 0202 	mvn.w	r2, #2
 800519e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f9fd 	bl	80055b4 <HAL_TIM_IC_CaptureCallback>
 80051ba:	e005      	b.n	80051c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f9ef 	bl	80055a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fa00 	bl	80055c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d020      	beq.n	800521a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d01b      	beq.n	800521a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f06f 0204 	mvn.w	r2, #4
 80051ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f9d7 	bl	80055b4 <HAL_TIM_IC_CaptureCallback>
 8005206:	e005      	b.n	8005214 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f9c9 	bl	80055a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f9da 	bl	80055c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d020      	beq.n	8005266 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01b      	beq.n	8005266 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f06f 0208 	mvn.w	r2, #8
 8005236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2204      	movs	r2, #4
 800523c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f9b1 	bl	80055b4 <HAL_TIM_IC_CaptureCallback>
 8005252:	e005      	b.n	8005260 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f9a3 	bl	80055a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9b4 	bl	80055c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b00      	cmp	r3, #0
 800526e:	d020      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 0310 	and.w	r3, r3, #16
 8005276:	2b00      	cmp	r3, #0
 8005278:	d01b      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f06f 0210 	mvn.w	r2, #16
 8005282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2208      	movs	r2, #8
 8005288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f98b 	bl	80055b4 <HAL_TIM_IC_CaptureCallback>
 800529e:	e005      	b.n	80052ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f97d 	bl	80055a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f98e 	bl	80055c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00c      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f06f 0201 	mvn.w	r2, #1
 80052ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7fb fead 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d104      	bne.n	80052ea <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00c      	beq.n	8005304 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80052fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fd84 	bl	8005e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00c      	beq.n	8005328 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fd7c 	bl	8005e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00c      	beq.n	800534c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d007      	beq.n	800534c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f948 	bl	80055dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00c      	beq.n	8005370 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0220 	mvn.w	r2, #32
 8005368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fd44 	bl	8005df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005370:	bf00      	nop
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005392:	2302      	movs	r3, #2
 8005394:	e0ff      	b.n	8005596 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b14      	cmp	r3, #20
 80053a2:	f200 80f0 	bhi.w	8005586 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053a6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	08005401 	.word	0x08005401
 80053b0:	08005587 	.word	0x08005587
 80053b4:	08005587 	.word	0x08005587
 80053b8:	08005587 	.word	0x08005587
 80053bc:	08005441 	.word	0x08005441
 80053c0:	08005587 	.word	0x08005587
 80053c4:	08005587 	.word	0x08005587
 80053c8:	08005587 	.word	0x08005587
 80053cc:	08005483 	.word	0x08005483
 80053d0:	08005587 	.word	0x08005587
 80053d4:	08005587 	.word	0x08005587
 80053d8:	08005587 	.word	0x08005587
 80053dc:	080054c3 	.word	0x080054c3
 80053e0:	08005587 	.word	0x08005587
 80053e4:	08005587 	.word	0x08005587
 80053e8:	08005587 	.word	0x08005587
 80053ec:	08005505 	.word	0x08005505
 80053f0:	08005587 	.word	0x08005587
 80053f4:	08005587 	.word	0x08005587
 80053f8:	08005587 	.word	0x08005587
 80053fc:	08005545 	.word	0x08005545
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f998 	bl	800573c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0208 	orr.w	r2, r2, #8
 800541a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0204 	bic.w	r2, r2, #4
 800542a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6999      	ldr	r1, [r3, #24]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	619a      	str	r2, [r3, #24]
      break;
 800543e:	e0a5      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fa08 	bl	800585c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800545a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800546a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6999      	ldr	r1, [r3, #24]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	021a      	lsls	r2, r3, #8
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	619a      	str	r2, [r3, #24]
      break;
 8005480:	e084      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fa71 	bl	8005970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0208 	orr.w	r2, r2, #8
 800549c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0204 	bic.w	r2, r2, #4
 80054ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69d9      	ldr	r1, [r3, #28]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	61da      	str	r2, [r3, #28]
      break;
 80054c0:	e064      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fad9 	bl	8005a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69d9      	ldr	r1, [r3, #28]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	021a      	lsls	r2, r3, #8
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	61da      	str	r2, [r3, #28]
      break;
 8005502:	e043      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68b9      	ldr	r1, [r7, #8]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fb22 	bl	8005b54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0208 	orr.w	r2, r2, #8
 800551e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0204 	bic.w	r2, r2, #4
 800552e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005542:	e023      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fb66 	bl	8005c1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800555e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800556e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	021a      	lsls	r2, r3, #8
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005584:	e002      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	75fb      	strb	r3, [r7, #23]
      break;
 800558a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005594:	7dfb      	ldrb	r3, [r7, #23]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop

080055a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a46      	ldr	r2, [pc, #280]	@ (800571c <TIM_Base_SetConfig+0x12c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800560e:	d00f      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a43      	ldr	r2, [pc, #268]	@ (8005720 <TIM_Base_SetConfig+0x130>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00b      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a42      	ldr	r2, [pc, #264]	@ (8005724 <TIM_Base_SetConfig+0x134>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d007      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a41      	ldr	r2, [pc, #260]	@ (8005728 <TIM_Base_SetConfig+0x138>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_Base_SetConfig+0x40>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a40      	ldr	r2, [pc, #256]	@ (800572c <TIM_Base_SetConfig+0x13c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d108      	bne.n	8005642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a35      	ldr	r2, [pc, #212]	@ (800571c <TIM_Base_SetConfig+0x12c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d01f      	beq.n	800568a <TIM_Base_SetConfig+0x9a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005650:	d01b      	beq.n	800568a <TIM_Base_SetConfig+0x9a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a32      	ldr	r2, [pc, #200]	@ (8005720 <TIM_Base_SetConfig+0x130>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d017      	beq.n	800568a <TIM_Base_SetConfig+0x9a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a31      	ldr	r2, [pc, #196]	@ (8005724 <TIM_Base_SetConfig+0x134>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <TIM_Base_SetConfig+0x9a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a30      	ldr	r2, [pc, #192]	@ (8005728 <TIM_Base_SetConfig+0x138>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00f      	beq.n	800568a <TIM_Base_SetConfig+0x9a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a2f      	ldr	r2, [pc, #188]	@ (800572c <TIM_Base_SetConfig+0x13c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00b      	beq.n	800568a <TIM_Base_SetConfig+0x9a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a2e      	ldr	r2, [pc, #184]	@ (8005730 <TIM_Base_SetConfig+0x140>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d007      	beq.n	800568a <TIM_Base_SetConfig+0x9a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2d      	ldr	r2, [pc, #180]	@ (8005734 <TIM_Base_SetConfig+0x144>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d003      	beq.n	800568a <TIM_Base_SetConfig+0x9a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2c      	ldr	r2, [pc, #176]	@ (8005738 <TIM_Base_SetConfig+0x148>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d108      	bne.n	800569c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a16      	ldr	r2, [pc, #88]	@ (800571c <TIM_Base_SetConfig+0x12c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00f      	beq.n	80056e8 <TIM_Base_SetConfig+0xf8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a18      	ldr	r2, [pc, #96]	@ (800572c <TIM_Base_SetConfig+0x13c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00b      	beq.n	80056e8 <TIM_Base_SetConfig+0xf8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a17      	ldr	r2, [pc, #92]	@ (8005730 <TIM_Base_SetConfig+0x140>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <TIM_Base_SetConfig+0xf8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a16      	ldr	r2, [pc, #88]	@ (8005734 <TIM_Base_SetConfig+0x144>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_Base_SetConfig+0xf8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a15      	ldr	r2, [pc, #84]	@ (8005738 <TIM_Base_SetConfig+0x148>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d103      	bne.n	80056f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d105      	bne.n	800570e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f023 0201 	bic.w	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	611a      	str	r2, [r3, #16]
  }
}
 800570e:	bf00      	nop
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40012c00 	.word	0x40012c00
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40000c00 	.word	0x40000c00
 800572c:	40013400 	.word	0x40013400
 8005730:	40014000 	.word	0x40014000
 8005734:	40014400 	.word	0x40014400
 8005738:	40014800 	.word	0x40014800

0800573c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	f023 0201 	bic.w	r2, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800576a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800576e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0303 	bic.w	r3, r3, #3
 8005776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f023 0302 	bic.w	r3, r3, #2
 8005788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a2c      	ldr	r2, [pc, #176]	@ (8005848 <TIM_OC1_SetConfig+0x10c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00f      	beq.n	80057bc <TIM_OC1_SetConfig+0x80>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a2b      	ldr	r2, [pc, #172]	@ (800584c <TIM_OC1_SetConfig+0x110>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00b      	beq.n	80057bc <TIM_OC1_SetConfig+0x80>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005850 <TIM_OC1_SetConfig+0x114>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d007      	beq.n	80057bc <TIM_OC1_SetConfig+0x80>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a29      	ldr	r2, [pc, #164]	@ (8005854 <TIM_OC1_SetConfig+0x118>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC1_SetConfig+0x80>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a28      	ldr	r2, [pc, #160]	@ (8005858 <TIM_OC1_SetConfig+0x11c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d10c      	bne.n	80057d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 0308 	bic.w	r3, r3, #8
 80057c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f023 0304 	bic.w	r3, r3, #4
 80057d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005848 <TIM_OC1_SetConfig+0x10c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00f      	beq.n	80057fe <TIM_OC1_SetConfig+0xc2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a1a      	ldr	r2, [pc, #104]	@ (800584c <TIM_OC1_SetConfig+0x110>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00b      	beq.n	80057fe <TIM_OC1_SetConfig+0xc2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a19      	ldr	r2, [pc, #100]	@ (8005850 <TIM_OC1_SetConfig+0x114>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d007      	beq.n	80057fe <TIM_OC1_SetConfig+0xc2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a18      	ldr	r2, [pc, #96]	@ (8005854 <TIM_OC1_SetConfig+0x118>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d003      	beq.n	80057fe <TIM_OC1_SetConfig+0xc2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a17      	ldr	r2, [pc, #92]	@ (8005858 <TIM_OC1_SetConfig+0x11c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d111      	bne.n	8005822 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800580c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	621a      	str	r2, [r3, #32]
}
 800583c:	bf00      	nop
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40013400 	.word	0x40013400
 8005850:	40014000 	.word	0x40014000
 8005854:	40014400 	.word	0x40014400
 8005858:	40014800 	.word	0x40014800

0800585c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	f023 0210 	bic.w	r2, r3, #16
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800588a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800588e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f023 0320 	bic.w	r3, r3, #32
 80058aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a28      	ldr	r2, [pc, #160]	@ (800595c <TIM_OC2_SetConfig+0x100>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_OC2_SetConfig+0x6c>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a27      	ldr	r2, [pc, #156]	@ (8005960 <TIM_OC2_SetConfig+0x104>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d10d      	bne.n	80058e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a1d      	ldr	r2, [pc, #116]	@ (800595c <TIM_OC2_SetConfig+0x100>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00f      	beq.n	800590c <TIM_OC2_SetConfig+0xb0>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005960 <TIM_OC2_SetConfig+0x104>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00b      	beq.n	800590c <TIM_OC2_SetConfig+0xb0>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005964 <TIM_OC2_SetConfig+0x108>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d007      	beq.n	800590c <TIM_OC2_SetConfig+0xb0>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005968 <TIM_OC2_SetConfig+0x10c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d003      	beq.n	800590c <TIM_OC2_SetConfig+0xb0>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a19      	ldr	r2, [pc, #100]	@ (800596c <TIM_OC2_SetConfig+0x110>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d113      	bne.n	8005934 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005912:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800591a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	621a      	str	r2, [r3, #32]
}
 800594e:	bf00      	nop
 8005950:	371c      	adds	r7, #28
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40012c00 	.word	0x40012c00
 8005960:	40013400 	.word	0x40013400
 8005964:	40014000 	.word	0x40014000
 8005968:	40014400 	.word	0x40014400
 800596c:	40014800 	.word	0x40014800

08005970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800599e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0303 	bic.w	r3, r3, #3
 80059aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a27      	ldr	r2, [pc, #156]	@ (8005a6c <TIM_OC3_SetConfig+0xfc>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d003      	beq.n	80059da <TIM_OC3_SetConfig+0x6a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a26      	ldr	r2, [pc, #152]	@ (8005a70 <TIM_OC3_SetConfig+0x100>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d10d      	bne.n	80059f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	021b      	lsls	r3, r3, #8
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a6c <TIM_OC3_SetConfig+0xfc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00f      	beq.n	8005a1e <TIM_OC3_SetConfig+0xae>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a1b      	ldr	r2, [pc, #108]	@ (8005a70 <TIM_OC3_SetConfig+0x100>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00b      	beq.n	8005a1e <TIM_OC3_SetConfig+0xae>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a1a      	ldr	r2, [pc, #104]	@ (8005a74 <TIM_OC3_SetConfig+0x104>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d007      	beq.n	8005a1e <TIM_OC3_SetConfig+0xae>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a19      	ldr	r2, [pc, #100]	@ (8005a78 <TIM_OC3_SetConfig+0x108>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_OC3_SetConfig+0xae>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a18      	ldr	r2, [pc, #96]	@ (8005a7c <TIM_OC3_SetConfig+0x10c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d113      	bne.n	8005a46 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	621a      	str	r2, [r3, #32]
}
 8005a60:	bf00      	nop
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	40012c00 	.word	0x40012c00
 8005a70:	40013400 	.word	0x40013400
 8005a74:	40014000 	.word	0x40014000
 8005a78:	40014400 	.word	0x40014400
 8005a7c:	40014800 	.word	0x40014800

08005a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	031b      	lsls	r3, r3, #12
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a18      	ldr	r2, [pc, #96]	@ (8005b40 <TIM_OC4_SetConfig+0xc0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00f      	beq.n	8005b04 <TIM_OC4_SetConfig+0x84>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a17      	ldr	r2, [pc, #92]	@ (8005b44 <TIM_OC4_SetConfig+0xc4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00b      	beq.n	8005b04 <TIM_OC4_SetConfig+0x84>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a16      	ldr	r2, [pc, #88]	@ (8005b48 <TIM_OC4_SetConfig+0xc8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d007      	beq.n	8005b04 <TIM_OC4_SetConfig+0x84>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a15      	ldr	r2, [pc, #84]	@ (8005b4c <TIM_OC4_SetConfig+0xcc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_OC4_SetConfig+0x84>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a14      	ldr	r2, [pc, #80]	@ (8005b50 <TIM_OC4_SetConfig+0xd0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d109      	bne.n	8005b18 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	019b      	lsls	r3, r3, #6
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40012c00 	.word	0x40012c00
 8005b44:	40013400 	.word	0x40013400
 8005b48:	40014000 	.word	0x40014000
 8005b4c:	40014400 	.word	0x40014400
 8005b50:	40014800 	.word	0x40014800

08005b54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a17      	ldr	r2, [pc, #92]	@ (8005c08 <TIM_OC5_SetConfig+0xb4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00f      	beq.n	8005bce <TIM_OC5_SetConfig+0x7a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a16      	ldr	r2, [pc, #88]	@ (8005c0c <TIM_OC5_SetConfig+0xb8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00b      	beq.n	8005bce <TIM_OC5_SetConfig+0x7a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a15      	ldr	r2, [pc, #84]	@ (8005c10 <TIM_OC5_SetConfig+0xbc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d007      	beq.n	8005bce <TIM_OC5_SetConfig+0x7a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a14      	ldr	r2, [pc, #80]	@ (8005c14 <TIM_OC5_SetConfig+0xc0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d003      	beq.n	8005bce <TIM_OC5_SetConfig+0x7a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a13      	ldr	r2, [pc, #76]	@ (8005c18 <TIM_OC5_SetConfig+0xc4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d109      	bne.n	8005be2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	021b      	lsls	r3, r3, #8
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40012c00 	.word	0x40012c00
 8005c0c:	40013400 	.word	0x40013400
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40014400 	.word	0x40014400
 8005c18:	40014800 	.word	0x40014800

08005c1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	021b      	lsls	r3, r3, #8
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	051b      	lsls	r3, r3, #20
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a18      	ldr	r2, [pc, #96]	@ (8005cd4 <TIM_OC6_SetConfig+0xb8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00f      	beq.n	8005c98 <TIM_OC6_SetConfig+0x7c>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a17      	ldr	r2, [pc, #92]	@ (8005cd8 <TIM_OC6_SetConfig+0xbc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00b      	beq.n	8005c98 <TIM_OC6_SetConfig+0x7c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a16      	ldr	r2, [pc, #88]	@ (8005cdc <TIM_OC6_SetConfig+0xc0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d007      	beq.n	8005c98 <TIM_OC6_SetConfig+0x7c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a15      	ldr	r2, [pc, #84]	@ (8005ce0 <TIM_OC6_SetConfig+0xc4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <TIM_OC6_SetConfig+0x7c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a14      	ldr	r2, [pc, #80]	@ (8005ce4 <TIM_OC6_SetConfig+0xc8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d109      	bne.n	8005cac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	029b      	lsls	r3, r3, #10
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40013400 	.word	0x40013400
 8005cdc:	40014000 	.word	0x40014000
 8005ce0:	40014400 	.word	0x40014400
 8005ce4:	40014800 	.word	0x40014800

08005ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e068      	b.n	8005dd2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2e      	ldr	r2, [pc, #184]	@ (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d004      	beq.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d108      	bne.n	8005d46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1e      	ldr	r2, [pc, #120]	@ (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01d      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d72:	d018      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1b      	ldr	r2, [pc, #108]	@ (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d013      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1a      	ldr	r2, [pc, #104]	@ (8005dec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00e      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a18      	ldr	r2, [pc, #96]	@ (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d009      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a13      	ldr	r2, [pc, #76]	@ (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d004      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a14      	ldr	r2, [pc, #80]	@ (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d10c      	bne.n	8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800
 8005df0:	40000c00 	.word	0x40000c00
 8005df4:	40014000 	.word	0x40014000

08005df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e34:	b084      	sub	sp, #16
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	f107 001c 	add.w	r0, r7, #28
 8005e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f8e6 	bl	8006024 <USB_CoreReset>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005e5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e70:	e005      	b.n	8005e7e <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e8a:	b004      	add	sp, #16
 8005e8c:	4770      	bx	lr

08005e8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f023 0201 	bic.w	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d115      	bne.n	8005efe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ede:	200a      	movs	r0, #10
 8005ee0:	f7fb fcb4 	bl	800184c <HAL_Delay>
      ms += 10U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	330a      	adds	r3, #10
 8005ee8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f88c 	bl	8006008 <USB_GetMode>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d01e      	beq.n	8005f34 <USB_SetCurrentMode+0x84>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2bc7      	cmp	r3, #199	@ 0xc7
 8005efa:	d9f0      	bls.n	8005ede <USB_SetCurrentMode+0x2e>
 8005efc:	e01a      	b.n	8005f34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d115      	bne.n	8005f30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f10:	200a      	movs	r0, #10
 8005f12:	f7fb fc9b 	bl	800184c <HAL_Delay>
      ms += 10U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	330a      	adds	r3, #10
 8005f1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f873 	bl	8006008 <USB_GetMode>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <USB_SetCurrentMode+0x84>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f2c:	d9f0      	bls.n	8005f10 <USB_SetCurrentMode+0x60>
 8005f2e:	e001      	b.n	8005f34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e005      	b.n	8005f40 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2bc8      	cmp	r3, #200	@ 0xc8
 8005f38:	d101      	bne.n	8005f3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f62:	d901      	bls.n	8005f68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e01b      	b.n	8005fa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	daf2      	bge.n	8005f56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	019b      	lsls	r3, r3, #6
 8005f78:	f043 0220 	orr.w	r2, r3, #32
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f8c:	d901      	bls.n	8005f92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e006      	b.n	8005fa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d0f0      	beq.n	8005f80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fc4:	d901      	bls.n	8005fca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e018      	b.n	8005ffc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	daf2      	bge.n	8005fb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2210      	movs	r2, #16
 8005fda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fe8:	d901      	bls.n	8005fee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e006      	b.n	8005ffc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0310 	and.w	r3, r3, #16
 8005ff6:	2b10      	cmp	r3, #16
 8005ff8:	d0f0      	beq.n	8005fdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	f003 0301 	and.w	r3, r3, #1
}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800603c:	d901      	bls.n	8006042 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e01b      	b.n	800607a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	daf2      	bge.n	8006030 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f043 0201 	orr.w	r2, r3, #1
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3301      	adds	r3, #1
 800605e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006066:	d901      	bls.n	800606c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e006      	b.n	800607a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	d0f0      	beq.n	800605a <USB_CoreReset+0x36>

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006088:	b084      	sub	sp, #16
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060a8:	461a      	mov	r2, r3
 80060aa:	2300      	movs	r3, #0
 80060ac:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80060d4:	f023 0304 	bic.w	r3, r3, #4
 80060d8:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060da:	2110      	movs	r1, #16
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff ff33 	bl	8005f48 <USB_FlushTxFifo>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff ff5d 	bl	8005fac <USB_FlushRxFifo>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80060fc:	2300      	movs	r3, #0
 80060fe:	613b      	str	r3, [r7, #16]
 8006100:	e015      	b.n	800612e <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800610e:	461a      	mov	r2, r3
 8006110:	f04f 33ff 	mov.w	r3, #4294967295
 8006114:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4413      	add	r3, r2
 800611e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006122:	461a      	mov	r2, r3
 8006124:	2300      	movs	r3, #0
 8006126:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	3301      	adds	r3, #1
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006132:	461a      	mov	r2, r3
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4293      	cmp	r3, r2
 8006138:	d3e3      	bcc.n	8006102 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f04f 32ff 	mov.w	r2, #4294967295
 8006146:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2280      	movs	r2, #128	@ 0x80
 800614c:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a0c      	ldr	r2, [pc, #48]	@ (8006184 <USB_HostInit+0xfc>)
 8006152:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a0c      	ldr	r2, [pc, #48]	@ (8006188 <USB_HostInit+0x100>)
 8006158:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f043 0210 	orr.w	r2, r3, #16
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	699a      	ldr	r2, [r3, #24]
 800616c:	4b07      	ldr	r3, [pc, #28]	@ (800618c <USB_HostInit+0x104>)
 800616e:	4313      	orrs	r3, r2
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006174:	7dfb      	ldrb	r3, [r7, #23]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006180:	b004      	add	sp, #16
 8006182:	4770      	bx	lr
 8006184:	00600080 	.word	0x00600080
 8006188:	004000e0 	.word	0x004000e0
 800618c:	a3200008 	.word	0xa3200008

08006190 <__NVIC_SetPriority>:
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	6039      	str	r1, [r7, #0]
 800619a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800619c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	db0a      	blt.n	80061ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	490c      	ldr	r1, [pc, #48]	@ (80061dc <__NVIC_SetPriority+0x4c>)
 80061aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ae:	0112      	lsls	r2, r2, #4
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	440b      	add	r3, r1
 80061b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80061b8:	e00a      	b.n	80061d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	4908      	ldr	r1, [pc, #32]	@ (80061e0 <__NVIC_SetPriority+0x50>)
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	3b04      	subs	r3, #4
 80061c8:	0112      	lsls	r2, r2, #4
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	440b      	add	r3, r1
 80061ce:	761a      	strb	r2, [r3, #24]
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	e000e100 	.word	0xe000e100
 80061e0:	e000ed00 	.word	0xe000ed00

080061e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80061e8:	4b05      	ldr	r3, [pc, #20]	@ (8006200 <SysTick_Handler+0x1c>)
 80061ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80061ec:	f001 fd46 	bl	8007c7c <xTaskGetSchedulerState>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d001      	beq.n	80061fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80061f6:	f002 fb3f 	bl	8008878 <xPortSysTickHandler>
  }
}
 80061fa:	bf00      	nop
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	e000e010 	.word	0xe000e010

08006204 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006208:	2100      	movs	r1, #0
 800620a:	f06f 0004 	mvn.w	r0, #4
 800620e:	f7ff ffbf 	bl	8006190 <__NVIC_SetPriority>
#endif
}
 8006212:	bf00      	nop
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800621e:	f3ef 8305 	mrs	r3, IPSR
 8006222:	603b      	str	r3, [r7, #0]
  return(result);
 8006224:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800622a:	f06f 0305 	mvn.w	r3, #5
 800622e:	607b      	str	r3, [r7, #4]
 8006230:	e00c      	b.n	800624c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006232:	4b0a      	ldr	r3, [pc, #40]	@ (800625c <osKernelInitialize+0x44>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d105      	bne.n	8006246 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800623a:	4b08      	ldr	r3, [pc, #32]	@ (800625c <osKernelInitialize+0x44>)
 800623c:	2201      	movs	r2, #1
 800623e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006240:	2300      	movs	r3, #0
 8006242:	607b      	str	r3, [r7, #4]
 8006244:	e002      	b.n	800624c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006246:	f04f 33ff 	mov.w	r3, #4294967295
 800624a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800624c:	687b      	ldr	r3, [r7, #4]
}
 800624e:	4618      	mov	r0, r3
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	20000620 	.word	0x20000620

08006260 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006266:	f3ef 8305 	mrs	r3, IPSR
 800626a:	603b      	str	r3, [r7, #0]
  return(result);
 800626c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006272:	f06f 0305 	mvn.w	r3, #5
 8006276:	607b      	str	r3, [r7, #4]
 8006278:	e010      	b.n	800629c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800627a:	4b0b      	ldr	r3, [pc, #44]	@ (80062a8 <osKernelStart+0x48>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d109      	bne.n	8006296 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006282:	f7ff ffbf 	bl	8006204 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006286:	4b08      	ldr	r3, [pc, #32]	@ (80062a8 <osKernelStart+0x48>)
 8006288:	2202      	movs	r2, #2
 800628a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800628c:	f001 f892 	bl	80073b4 <vTaskStartScheduler>
      stat = osOK;
 8006290:	2300      	movs	r3, #0
 8006292:	607b      	str	r3, [r7, #4]
 8006294:	e002      	b.n	800629c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006296:	f04f 33ff 	mov.w	r3, #4294967295
 800629a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800629c:	687b      	ldr	r3, [r7, #4]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000620 	.word	0x20000620

080062ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08e      	sub	sp, #56	@ 0x38
 80062b0:	af04      	add	r7, sp, #16
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062bc:	f3ef 8305 	mrs	r3, IPSR
 80062c0:	617b      	str	r3, [r7, #20]
  return(result);
 80062c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d17e      	bne.n	80063c6 <osThreadNew+0x11a>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d07b      	beq.n	80063c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80062ce:	2380      	movs	r3, #128	@ 0x80
 80062d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80062d2:	2318      	movs	r3, #24
 80062d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80062da:	f04f 33ff 	mov.w	r3, #4294967295
 80062de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d045      	beq.n	8006372 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <osThreadNew+0x48>
        name = attr->name;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d008      	beq.n	800631a <osThreadNew+0x6e>
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	2b38      	cmp	r3, #56	@ 0x38
 800630c:	d805      	bhi.n	800631a <osThreadNew+0x6e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <osThreadNew+0x72>
        return (NULL);
 800631a:	2300      	movs	r3, #0
 800631c:	e054      	b.n	80063c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	089b      	lsrs	r3, r3, #2
 800632c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00e      	beq.n	8006354 <osThreadNew+0xa8>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	2ba7      	cmp	r3, #167	@ 0xa7
 800633c:	d90a      	bls.n	8006354 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006342:	2b00      	cmp	r3, #0
 8006344:	d006      	beq.n	8006354 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <osThreadNew+0xa8>
        mem = 1;
 800634e:	2301      	movs	r3, #1
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	e010      	b.n	8006376 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10c      	bne.n	8006376 <osThreadNew+0xca>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d108      	bne.n	8006376 <osThreadNew+0xca>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <osThreadNew+0xca>
          mem = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	e001      	b.n	8006376 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d110      	bne.n	800639e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006384:	9202      	str	r2, [sp, #8]
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	6a3a      	ldr	r2, [r7, #32]
 8006390:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 fe1a 	bl	8006fcc <xTaskCreateStatic>
 8006398:	4603      	mov	r3, r0
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	e013      	b.n	80063c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d110      	bne.n	80063c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	f107 0310 	add.w	r3, r7, #16
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 fe68 	bl	800708c <xTaskCreate>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d001      	beq.n	80063c6 <osThreadNew+0x11a>
            hTask = NULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063c6:	693b      	ldr	r3, [r7, #16]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3728      	adds	r7, #40	@ 0x28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063d8:	f3ef 8305 	mrs	r3, IPSR
 80063dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80063de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <osDelay+0x1c>
    stat = osErrorISR;
 80063e4:	f06f 0305 	mvn.w	r3, #5
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	e007      	b.n	80063fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 ffa6 	bl	8007348 <vTaskDelay>
    }
  }

  return (stat);
 80063fc:	68fb      	ldr	r3, [r7, #12]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a07      	ldr	r2, [pc, #28]	@ (8006434 <vApplicationGetIdleTaskMemory+0x2c>)
 8006418:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	4a06      	ldr	r2, [pc, #24]	@ (8006438 <vApplicationGetIdleTaskMemory+0x30>)
 800641e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2280      	movs	r2, #128	@ 0x80
 8006424:	601a      	str	r2, [r3, #0]
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20000624 	.word	0x20000624
 8006438:	200006cc 	.word	0x200006cc

0800643c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4a07      	ldr	r2, [pc, #28]	@ (8006468 <vApplicationGetTimerTaskMemory+0x2c>)
 800644c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4a06      	ldr	r2, [pc, #24]	@ (800646c <vApplicationGetTimerTaskMemory+0x30>)
 8006452:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800645a:	601a      	str	r2, [r3, #0]
}
 800645c:	bf00      	nop
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	200008cc 	.word	0x200008cc
 800646c:	20000974 	.word	0x20000974

08006470 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f103 0208 	add.w	r2, r3, #8
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f04f 32ff 	mov.w	r2, #4294967295
 8006488:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f103 0208 	add.w	r2, r3, #8
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f103 0208 	add.w	r2, r3, #8
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	601a      	str	r2, [r3, #0]
}
 8006506:	bf00      	nop
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006512:	b480      	push	{r7}
 8006514:	b085      	sub	sp, #20
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d103      	bne.n	8006532 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e00c      	b.n	800654c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3308      	adds	r3, #8
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	e002      	b.n	8006540 <vListInsert+0x2e>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	429a      	cmp	r2, r3
 800654a:	d2f6      	bcs.n	800653a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	601a      	str	r2, [r3, #0]
}
 8006578:	bf00      	nop
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6892      	ldr	r2, [r2, #8]
 800659a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6852      	ldr	r2, [r2, #4]
 80065a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d103      	bne.n	80065b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	1e5a      	subs	r2, r3, #1
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10b      	bne.n	8006604 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065fe:	bf00      	nop
 8006600:	bf00      	nop
 8006602:	e7fd      	b.n	8006600 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006604:	f002 f8a8 	bl	8008758 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006610:	68f9      	ldr	r1, [r7, #12]
 8006612:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006614:	fb01 f303 	mul.w	r3, r1, r3
 8006618:	441a      	add	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006634:	3b01      	subs	r3, #1
 8006636:	68f9      	ldr	r1, [r7, #12]
 8006638:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800663a:	fb01 f303 	mul.w	r3, r1, r3
 800663e:	441a      	add	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	22ff      	movs	r2, #255	@ 0xff
 8006648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	22ff      	movs	r2, #255	@ 0xff
 8006650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d114      	bne.n	8006684 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01a      	beq.n	8006698 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3310      	adds	r3, #16
 8006666:	4618      	mov	r0, r3
 8006668:	f001 f942 	bl	80078f0 <xTaskRemoveFromEventList>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d012      	beq.n	8006698 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006672:	4b0d      	ldr	r3, [pc, #52]	@ (80066a8 <xQueueGenericReset+0xd0>)
 8006674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	e009      	b.n	8006698 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3310      	adds	r3, #16
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fef1 	bl	8006470 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3324      	adds	r3, #36	@ 0x24
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff feec 	bl	8006470 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006698:	f002 f890 	bl	80087bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800669c:	2301      	movs	r3, #1
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08e      	sub	sp, #56	@ 0x38
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10b      	bne.n	80066d8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066d2:	bf00      	nop
 80066d4:	bf00      	nop
 80066d6:	e7fd      	b.n	80066d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10b      	bne.n	80066f6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	e7fd      	b.n	80066f2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <xQueueGenericCreateStatic+0x56>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <xQueueGenericCreateStatic+0x5a>
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <xQueueGenericCreateStatic+0x5c>
 8006706:	2300      	movs	r3, #0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	623b      	str	r3, [r7, #32]
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	e7fd      	b.n	8006720 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d102      	bne.n	8006730 <xQueueGenericCreateStatic+0x84>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <xQueueGenericCreateStatic+0x88>
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <xQueueGenericCreateStatic+0x8a>
 8006734:	2300      	movs	r3, #0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10b      	bne.n	8006752 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	61fb      	str	r3, [r7, #28]
}
 800674c:	bf00      	nop
 800674e:	bf00      	nop
 8006750:	e7fd      	b.n	800674e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006752:	2350      	movs	r3, #80	@ 0x50
 8006754:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b50      	cmp	r3, #80	@ 0x50
 800675a:	d00b      	beq.n	8006774 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	61bb      	str	r3, [r7, #24]
}
 800676e:	bf00      	nop
 8006770:	bf00      	nop
 8006772:	e7fd      	b.n	8006770 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006774:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800677a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00d      	beq.n	800679c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006788:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800678c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	4613      	mov	r3, r2
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 f805 	bl	80067a6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800679c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800679e:	4618      	mov	r0, r3
 80067a0:	3730      	adds	r7, #48	@ 0x30
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
 80067b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e002      	b.n	80067c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067d4:	2101      	movs	r1, #1
 80067d6:	69b8      	ldr	r0, [r7, #24]
 80067d8:	f7ff fefe 	bl	80065d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	78fa      	ldrb	r2, [r7, #3]
 80067e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067e4:	bf00      	nop
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08e      	sub	sp, #56	@ 0x38
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067fa:	2300      	movs	r3, #0
 80067fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10b      	bne.n	8006820 <xQueueGenericSend+0x34>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800681a:	bf00      	nop
 800681c:	bf00      	nop
 800681e:	e7fd      	b.n	800681c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d103      	bne.n	800682e <xQueueGenericSend+0x42>
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <xQueueGenericSend+0x46>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <xQueueGenericSend+0x48>
 8006832:	2300      	movs	r3, #0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10b      	bne.n	8006850 <xQueueGenericSend+0x64>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	e7fd      	b.n	800684c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	2b02      	cmp	r3, #2
 8006854:	d103      	bne.n	800685e <xQueueGenericSend+0x72>
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800685a:	2b01      	cmp	r3, #1
 800685c:	d101      	bne.n	8006862 <xQueueGenericSend+0x76>
 800685e:	2301      	movs	r3, #1
 8006860:	e000      	b.n	8006864 <xQueueGenericSend+0x78>
 8006862:	2300      	movs	r3, #0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <xQueueGenericSend+0x94>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	623b      	str	r3, [r7, #32]
}
 800687a:	bf00      	nop
 800687c:	bf00      	nop
 800687e:	e7fd      	b.n	800687c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006880:	f001 f9fc 	bl	8007c7c <xTaskGetSchedulerState>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d102      	bne.n	8006890 <xQueueGenericSend+0xa4>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <xQueueGenericSend+0xa8>
 8006890:	2301      	movs	r3, #1
 8006892:	e000      	b.n	8006896 <xQueueGenericSend+0xaa>
 8006894:	2300      	movs	r3, #0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10b      	bne.n	80068b2 <xQueueGenericSend+0xc6>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	61fb      	str	r3, [r7, #28]
}
 80068ac:	bf00      	nop
 80068ae:	bf00      	nop
 80068b0:	e7fd      	b.n	80068ae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068b2:	f001 ff51 	bl	8008758 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068be:	429a      	cmp	r2, r3
 80068c0:	d302      	bcc.n	80068c8 <xQueueGenericSend+0xdc>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d129      	bne.n	800691c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068ce:	f000 fa0f 	bl	8006cf0 <prvCopyDataToQueue>
 80068d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d010      	beq.n	80068fe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068de:	3324      	adds	r3, #36	@ 0x24
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 f805 	bl	80078f0 <xTaskRemoveFromEventList>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d013      	beq.n	8006914 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068ec:	4b3f      	ldr	r3, [pc, #252]	@ (80069ec <xQueueGenericSend+0x200>)
 80068ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	e00a      	b.n	8006914 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d007      	beq.n	8006914 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006904:	4b39      	ldr	r3, [pc, #228]	@ (80069ec <xQueueGenericSend+0x200>)
 8006906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006914:	f001 ff52 	bl	80087bc <vPortExitCritical>
				return pdPASS;
 8006918:	2301      	movs	r3, #1
 800691a:	e063      	b.n	80069e4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d103      	bne.n	800692a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006922:	f001 ff4b 	bl	80087bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006926:	2300      	movs	r3, #0
 8006928:	e05c      	b.n	80069e4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800692a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692c:	2b00      	cmp	r3, #0
 800692e:	d106      	bne.n	800693e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006930:	f107 0314 	add.w	r3, r7, #20
 8006934:	4618      	mov	r0, r3
 8006936:	f001 f83f 	bl	80079b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800693a:	2301      	movs	r3, #1
 800693c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800693e:	f001 ff3d 	bl	80087bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006942:	f000 fda7 	bl	8007494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006946:	f001 ff07 	bl	8008758 <vPortEnterCritical>
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006950:	b25b      	sxtb	r3, r3
 8006952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006956:	d103      	bne.n	8006960 <xQueueGenericSend+0x174>
 8006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006962:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006966:	b25b      	sxtb	r3, r3
 8006968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696c:	d103      	bne.n	8006976 <xQueueGenericSend+0x18a>
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006976:	f001 ff21 	bl	80087bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800697a:	1d3a      	adds	r2, r7, #4
 800697c:	f107 0314 	add.w	r3, r7, #20
 8006980:	4611      	mov	r1, r2
 8006982:	4618      	mov	r0, r3
 8006984:	f001 f82e 	bl	80079e4 <xTaskCheckForTimeOut>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d124      	bne.n	80069d8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800698e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006990:	f000 faa6 	bl	8006ee0 <prvIsQueueFull>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d018      	beq.n	80069cc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	3310      	adds	r3, #16
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	4611      	mov	r1, r2
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 ff52 	bl	800784c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069aa:	f000 fa31 	bl	8006e10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069ae:	f000 fd7f 	bl	80074b0 <xTaskResumeAll>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f47f af7c 	bne.w	80068b2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80069ba:	4b0c      	ldr	r3, [pc, #48]	@ (80069ec <xQueueGenericSend+0x200>)
 80069bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	e772      	b.n	80068b2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069ce:	f000 fa1f 	bl	8006e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069d2:	f000 fd6d 	bl	80074b0 <xTaskResumeAll>
 80069d6:	e76c      	b.n	80068b2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069da:	f000 fa19 	bl	8006e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069de:	f000 fd67 	bl	80074b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3738      	adds	r7, #56	@ 0x38
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	e000ed04 	.word	0xe000ed04

080069f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b090      	sub	sp, #64	@ 0x40
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10b      	bne.n	8006a20 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a1a:	bf00      	nop
 8006a1c:	bf00      	nop
 8006a1e:	e7fd      	b.n	8006a1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d103      	bne.n	8006a2e <xQueueGenericSendFromISR+0x3e>
 8006a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <xQueueGenericSendFromISR+0x42>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <xQueueGenericSendFromISR+0x44>
 8006a32:	2300      	movs	r3, #0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10b      	bne.n	8006a50 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a4a:	bf00      	nop
 8006a4c:	bf00      	nop
 8006a4e:	e7fd      	b.n	8006a4c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d103      	bne.n	8006a5e <xQueueGenericSendFromISR+0x6e>
 8006a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d101      	bne.n	8006a62 <xQueueGenericSendFromISR+0x72>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e000      	b.n	8006a64 <xQueueGenericSendFromISR+0x74>
 8006a62:	2300      	movs	r3, #0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	623b      	str	r3, [r7, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	e7fd      	b.n	8006a7c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a80:	f001 ff4a 	bl	8008918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a84:	f3ef 8211 	mrs	r2, BASEPRI
 8006a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	61fa      	str	r2, [r7, #28]
 8006a9a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a9e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d302      	bcc.n	8006ab2 <xQueueGenericSendFromISR+0xc2>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d12f      	bne.n	8006b12 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ab8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ac8:	f000 f912 	bl	8006cf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006acc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad4:	d112      	bne.n	8006afc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d016      	beq.n	8006b0c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae0:	3324      	adds	r3, #36	@ 0x24
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 ff04 	bl	80078f0 <xTaskRemoveFromEventList>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00e      	beq.n	8006b0c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	e007      	b.n	8006b0c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006afc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b00:	3301      	adds	r3, #1
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	b25a      	sxtb	r2, r3
 8006b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006b10:	e001      	b.n	8006b16 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b18:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3740      	adds	r7, #64	@ 0x40
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08c      	sub	sp, #48	@ 0x30
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10b      	bne.n	8006b5e <xQueueReceive+0x32>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	623b      	str	r3, [r7, #32]
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	e7fd      	b.n	8006b5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d103      	bne.n	8006b6c <xQueueReceive+0x40>
 8006b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <xQueueReceive+0x44>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <xQueueReceive+0x46>
 8006b70:	2300      	movs	r3, #0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10b      	bne.n	8006b8e <xQueueReceive+0x62>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	61fb      	str	r3, [r7, #28]
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	e7fd      	b.n	8006b8a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b8e:	f001 f875 	bl	8007c7c <xTaskGetSchedulerState>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d102      	bne.n	8006b9e <xQueueReceive+0x72>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <xQueueReceive+0x76>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e000      	b.n	8006ba4 <xQueueReceive+0x78>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10b      	bne.n	8006bc0 <xQueueReceive+0x94>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	61bb      	str	r3, [r7, #24]
}
 8006bba:	bf00      	nop
 8006bbc:	bf00      	nop
 8006bbe:	e7fd      	b.n	8006bbc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bc0:	f001 fdca 	bl	8008758 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01f      	beq.n	8006c10 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bd4:	f000 f8f6 	bl	8006dc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bda:	1e5a      	subs	r2, r3, #1
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00f      	beq.n	8006c08 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bea:	3310      	adds	r3, #16
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fe7f 	bl	80078f0 <xTaskRemoveFromEventList>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d007      	beq.n	8006c08 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8006cec <xQueueReceive+0x1c0>)
 8006bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c08:	f001 fdd8 	bl	80087bc <vPortExitCritical>
				return pdPASS;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e069      	b.n	8006ce4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d103      	bne.n	8006c1e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c16:	f001 fdd1 	bl	80087bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e062      	b.n	8006ce4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c24:	f107 0310 	add.w	r3, r7, #16
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fec5 	bl	80079b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c32:	f001 fdc3 	bl	80087bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c36:	f000 fc2d 	bl	8007494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c3a:	f001 fd8d 	bl	8008758 <vPortEnterCritical>
 8006c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c44:	b25b      	sxtb	r3, r3
 8006c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4a:	d103      	bne.n	8006c54 <xQueueReceive+0x128>
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c5a:	b25b      	sxtb	r3, r3
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d103      	bne.n	8006c6a <xQueueReceive+0x13e>
 8006c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c6a:	f001 fda7 	bl	80087bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c6e:	1d3a      	adds	r2, r7, #4
 8006c70:	f107 0310 	add.w	r3, r7, #16
 8006c74:	4611      	mov	r1, r2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 feb4 	bl	80079e4 <xTaskCheckForTimeOut>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d123      	bne.n	8006cca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c84:	f000 f916 	bl	8006eb4 <prvIsQueueEmpty>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d017      	beq.n	8006cbe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c90:	3324      	adds	r3, #36	@ 0x24
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4611      	mov	r1, r2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fdd8 	bl	800784c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c9e:	f000 f8b7 	bl	8006e10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ca2:	f000 fc05 	bl	80074b0 <xTaskResumeAll>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d189      	bne.n	8006bc0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006cac:	4b0f      	ldr	r3, [pc, #60]	@ (8006cec <xQueueReceive+0x1c0>)
 8006cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	e780      	b.n	8006bc0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cc0:	f000 f8a6 	bl	8006e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cc4:	f000 fbf4 	bl	80074b0 <xTaskResumeAll>
 8006cc8:	e77a      	b.n	8006bc0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ccc:	f000 f8a0 	bl	8006e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cd0:	f000 fbee 	bl	80074b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cd6:	f000 f8ed 	bl	8006eb4 <prvIsQueueEmpty>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f43f af6f 	beq.w	8006bc0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ce2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3730      	adds	r7, #48	@ 0x30
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	e000ed04 	.word	0xe000ed04

08006cf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10d      	bne.n	8006d2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d14d      	bne.n	8006db2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 ffcc 	bl	8007cb8 <xTaskPriorityDisinherit>
 8006d20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	609a      	str	r2, [r3, #8]
 8006d28:	e043      	b.n	8006db2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d119      	bne.n	8006d64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6858      	ldr	r0, [r3, #4]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d38:	461a      	mov	r2, r3
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	f002 f8a0 	bl	8008e80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d48:	441a      	add	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d32b      	bcc.n	8006db2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	605a      	str	r2, [r3, #4]
 8006d62:	e026      	b.n	8006db2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68d8      	ldr	r0, [r3, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	f002 f886 	bl	8008e80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7c:	425b      	negs	r3, r3
 8006d7e:	441a      	add	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d207      	bcs.n	8006da0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d98:	425b      	negs	r3, r3
 8006d9a:	441a      	add	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d105      	bne.n	8006db2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006dba:	697b      	ldr	r3, [r7, #20]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d018      	beq.n	8006e08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dde:	441a      	add	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d303      	bcc.n	8006df8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68d9      	ldr	r1, [r3, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e00:	461a      	mov	r2, r3
 8006e02:	6838      	ldr	r0, [r7, #0]
 8006e04:	f002 f83c 	bl	8008e80 <memcpy>
	}
}
 8006e08:	bf00      	nop
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e18:	f001 fc9e 	bl	8008758 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e24:	e011      	b.n	8006e4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d012      	beq.n	8006e54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3324      	adds	r3, #36	@ 0x24
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fd5c 	bl	80078f0 <xTaskRemoveFromEventList>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e3e:	f000 fe35 	bl	8007aac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	dce9      	bgt.n	8006e26 <prvUnlockQueue+0x16>
 8006e52:	e000      	b.n	8006e56 <prvUnlockQueue+0x46>
					break;
 8006e54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	22ff      	movs	r2, #255	@ 0xff
 8006e5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006e5e:	f001 fcad 	bl	80087bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e62:	f001 fc79 	bl	8008758 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e6e:	e011      	b.n	8006e94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d012      	beq.n	8006e9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	3310      	adds	r3, #16
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fd37 	bl	80078f0 <xTaskRemoveFromEventList>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e88:	f000 fe10 	bl	8007aac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dce9      	bgt.n	8006e70 <prvUnlockQueue+0x60>
 8006e9c:	e000      	b.n	8006ea0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	22ff      	movs	r2, #255	@ 0xff
 8006ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006ea8:	f001 fc88 	bl	80087bc <vPortExitCritical>
}
 8006eac:	bf00      	nop
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ebc:	f001 fc4c 	bl	8008758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d102      	bne.n	8006ece <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	e001      	b.n	8006ed2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ed2:	f001 fc73 	bl	80087bc <vPortExitCritical>

	return xReturn;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ee8:	f001 fc36 	bl	8008758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d102      	bne.n	8006efe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	e001      	b.n	8006f02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f02:	f001 fc5b 	bl	80087bc <vPortExitCritical>

	return xReturn;
 8006f06:	68fb      	ldr	r3, [r7, #12]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	e014      	b.n	8006f4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f20:	4a0f      	ldr	r2, [pc, #60]	@ (8006f60 <vQueueAddToRegistry+0x50>)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10b      	bne.n	8006f44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f2c:	490c      	ldr	r1, [pc, #48]	@ (8006f60 <vQueueAddToRegistry+0x50>)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f36:	4a0a      	ldr	r2, [pc, #40]	@ (8006f60 <vQueueAddToRegistry+0x50>)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	4413      	add	r3, r2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f42:	e006      	b.n	8006f52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3301      	adds	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b07      	cmp	r3, #7
 8006f4e:	d9e7      	bls.n	8006f20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	20000d74 	.word	0x20000d74

08006f64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f74:	f001 fbf0 	bl	8008758 <vPortEnterCritical>
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f7e:	b25b      	sxtb	r3, r3
 8006f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f84:	d103      	bne.n	8006f8e <vQueueWaitForMessageRestricted+0x2a>
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f94:	b25b      	sxtb	r3, r3
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9a:	d103      	bne.n	8006fa4 <vQueueWaitForMessageRestricted+0x40>
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fa4:	f001 fc0a 	bl	80087bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	3324      	adds	r3, #36	@ 0x24
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	68b9      	ldr	r1, [r7, #8]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 fc6d 	bl	8007898 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fbe:	6978      	ldr	r0, [r7, #20]
 8006fc0:	f7ff ff26 	bl	8006e10 <prvUnlockQueue>
	}
 8006fc4:	bf00      	nop
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08e      	sub	sp, #56	@ 0x38
 8006fd0:	af04      	add	r7, sp, #16
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10b      	bne.n	8006ff8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	623b      	str	r3, [r7, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	e7fd      	b.n	8006ff4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	61fb      	str	r3, [r7, #28]
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	e7fd      	b.n	8007012 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007016:	23a8      	movs	r3, #168	@ 0xa8
 8007018:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2ba8      	cmp	r3, #168	@ 0xa8
 800701e:	d00b      	beq.n	8007038 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	61bb      	str	r3, [r7, #24]
}
 8007032:	bf00      	nop
 8007034:	bf00      	nop
 8007036:	e7fd      	b.n	8007034 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007038:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800703a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01e      	beq.n	800707e <xTaskCreateStatic+0xb2>
 8007040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01b      	beq.n	800707e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007048:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800704a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800704e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007052:	2202      	movs	r2, #2
 8007054:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007058:	2300      	movs	r3, #0
 800705a:	9303      	str	r3, [sp, #12]
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	9302      	str	r3, [sp, #8]
 8007060:	f107 0314 	add.w	r3, r7, #20
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f851 	bl	8007118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007076:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007078:	f000 f8f6 	bl	8007268 <prvAddNewTaskToReadyList>
 800707c:	e001      	b.n	8007082 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007082:	697b      	ldr	r3, [r7, #20]
	}
 8007084:	4618      	mov	r0, r3
 8007086:	3728      	adds	r7, #40	@ 0x28
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08c      	sub	sp, #48	@ 0x30
 8007090:	af04      	add	r7, sp, #16
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	603b      	str	r3, [r7, #0]
 8007098:	4613      	mov	r3, r2
 800709a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800709c:	88fb      	ldrh	r3, [r7, #6]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 fc7b 	bl	800899c <pvPortMalloc>
 80070a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00e      	beq.n	80070cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070ae:	20a8      	movs	r0, #168	@ 0xa8
 80070b0:	f001 fc74 	bl	800899c <pvPortMalloc>
 80070b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80070c2:	e005      	b.n	80070d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070c4:	6978      	ldr	r0, [r7, #20]
 80070c6:	f001 fd37 	bl	8008b38 <vPortFree>
 80070ca:	e001      	b.n	80070d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d017      	beq.n	8007106 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070de:	88fa      	ldrh	r2, [r7, #6]
 80070e0:	2300      	movs	r3, #0
 80070e2:	9303      	str	r3, [sp, #12]
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	9302      	str	r3, [sp, #8]
 80070e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ea:	9301      	str	r3, [sp, #4]
 80070ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f80f 	bl	8007118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070fa:	69f8      	ldr	r0, [r7, #28]
 80070fc:	f000 f8b4 	bl	8007268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007100:	2301      	movs	r3, #1
 8007102:	61bb      	str	r3, [r7, #24]
 8007104:	e002      	b.n	800710c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007106:	f04f 33ff 	mov.w	r3, #4294967295
 800710a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800710c:	69bb      	ldr	r3, [r7, #24]
	}
 800710e:	4618      	mov	r0, r3
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	461a      	mov	r2, r3
 8007130:	21a5      	movs	r1, #165	@ 0xa5
 8007132:	f001 fe21 	bl	8008d78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007140:	3b01      	subs	r3, #1
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	f023 0307 	bic.w	r3, r3, #7
 800714e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00b      	beq.n	8007172 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	617b      	str	r3, [r7, #20]
}
 800716c:	bf00      	nop
 800716e:	bf00      	nop
 8007170:	e7fd      	b.n	800716e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d01f      	beq.n	80071b8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007178:	2300      	movs	r3, #0
 800717a:	61fb      	str	r3, [r7, #28]
 800717c:	e012      	b.n	80071a4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	4413      	add	r3, r2
 8007184:	7819      	ldrb	r1, [r3, #0]
 8007186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	4413      	add	r3, r2
 800718c:	3334      	adds	r3, #52	@ 0x34
 800718e:	460a      	mov	r2, r1
 8007190:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	4413      	add	r3, r2
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d006      	beq.n	80071ac <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	3301      	adds	r3, #1
 80071a2:	61fb      	str	r3, [r7, #28]
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b0f      	cmp	r3, #15
 80071a8:	d9e9      	bls.n	800717e <prvInitialiseNewTask+0x66>
 80071aa:	e000      	b.n	80071ae <prvInitialiseNewTask+0x96>
			{
				break;
 80071ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071b6:	e003      	b.n	80071c0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c2:	2b37      	cmp	r3, #55	@ 0x37
 80071c4:	d901      	bls.n	80071ca <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071c6:	2337      	movs	r3, #55	@ 0x37
 80071c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d8:	2200      	movs	r2, #0
 80071da:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	3304      	adds	r3, #4
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff f965 	bl	80064b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	3318      	adds	r3, #24
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff f960 	bl	80064b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007204:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007208:	2200      	movs	r2, #0
 800720a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800720e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007210:	2200      	movs	r2, #0
 8007212:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	3354      	adds	r3, #84	@ 0x54
 800721a:	224c      	movs	r2, #76	@ 0x4c
 800721c:	2100      	movs	r1, #0
 800721e:	4618      	mov	r0, r3
 8007220:	f001 fdaa 	bl	8008d78 <memset>
 8007224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007226:	4a0d      	ldr	r2, [pc, #52]	@ (800725c <prvInitialiseNewTask+0x144>)
 8007228:	659a      	str	r2, [r3, #88]	@ 0x58
 800722a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722c:	4a0c      	ldr	r2, [pc, #48]	@ (8007260 <prvInitialiseNewTask+0x148>)
 800722e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007232:	4a0c      	ldr	r2, [pc, #48]	@ (8007264 <prvInitialiseNewTask+0x14c>)
 8007234:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	68f9      	ldr	r1, [r7, #12]
 800723a:	69b8      	ldr	r0, [r7, #24]
 800723c:	f001 f95a 	bl	80084f4 <pxPortInitialiseStack>
 8007240:	4602      	mov	r2, r0
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800724c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007250:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007252:	bf00      	nop
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20002790 	.word	0x20002790
 8007260:	200027f8 	.word	0x200027f8
 8007264:	20002860 	.word	0x20002860

08007268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007270:	f001 fa72 	bl	8008758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007274:	4b2d      	ldr	r3, [pc, #180]	@ (800732c <prvAddNewTaskToReadyList+0xc4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3301      	adds	r3, #1
 800727a:	4a2c      	ldr	r2, [pc, #176]	@ (800732c <prvAddNewTaskToReadyList+0xc4>)
 800727c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800727e:	4b2c      	ldr	r3, [pc, #176]	@ (8007330 <prvAddNewTaskToReadyList+0xc8>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d109      	bne.n	800729a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007286:	4a2a      	ldr	r2, [pc, #168]	@ (8007330 <prvAddNewTaskToReadyList+0xc8>)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800728c:	4b27      	ldr	r3, [pc, #156]	@ (800732c <prvAddNewTaskToReadyList+0xc4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d110      	bne.n	80072b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007294:	f000 fc2e 	bl	8007af4 <prvInitialiseTaskLists>
 8007298:	e00d      	b.n	80072b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800729a:	4b26      	ldr	r3, [pc, #152]	@ (8007334 <prvAddNewTaskToReadyList+0xcc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072a2:	4b23      	ldr	r3, [pc, #140]	@ (8007330 <prvAddNewTaskToReadyList+0xc8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d802      	bhi.n	80072b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007330 <prvAddNewTaskToReadyList+0xc8>)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072b6:	4b20      	ldr	r3, [pc, #128]	@ (8007338 <prvAddNewTaskToReadyList+0xd0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3301      	adds	r3, #1
 80072bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007338 <prvAddNewTaskToReadyList+0xd0>)
 80072be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007338 <prvAddNewTaskToReadyList+0xd0>)
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072cc:	4b1b      	ldr	r3, [pc, #108]	@ (800733c <prvAddNewTaskToReadyList+0xd4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d903      	bls.n	80072dc <prvAddNewTaskToReadyList+0x74>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d8:	4a18      	ldr	r2, [pc, #96]	@ (800733c <prvAddNewTaskToReadyList+0xd4>)
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072e0:	4613      	mov	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4a15      	ldr	r2, [pc, #84]	@ (8007340 <prvAddNewTaskToReadyList+0xd8>)
 80072ea:	441a      	add	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	4619      	mov	r1, r3
 80072f2:	4610      	mov	r0, r2
 80072f4:	f7ff f8e9 	bl	80064ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072f8:	f001 fa60 	bl	80087bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007334 <prvAddNewTaskToReadyList+0xcc>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00e      	beq.n	8007322 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007304:	4b0a      	ldr	r3, [pc, #40]	@ (8007330 <prvAddNewTaskToReadyList+0xc8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730e:	429a      	cmp	r2, r3
 8007310:	d207      	bcs.n	8007322 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007312:	4b0c      	ldr	r3, [pc, #48]	@ (8007344 <prvAddNewTaskToReadyList+0xdc>)
 8007314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20001288 	.word	0x20001288
 8007330:	20000db4 	.word	0x20000db4
 8007334:	20001294 	.word	0x20001294
 8007338:	200012a4 	.word	0x200012a4
 800733c:	20001290 	.word	0x20001290
 8007340:	20000db8 	.word	0x20000db8
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d018      	beq.n	800738c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800735a:	4b14      	ldr	r3, [pc, #80]	@ (80073ac <vTaskDelay+0x64>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <vTaskDelay+0x32>
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	60bb      	str	r3, [r7, #8]
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop
 8007378:	e7fd      	b.n	8007376 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800737a:	f000 f88b 	bl	8007494 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800737e:	2100      	movs	r1, #0
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fd09 	bl	8007d98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007386:	f000 f893 	bl	80074b0 <xTaskResumeAll>
 800738a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d107      	bne.n	80073a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007392:	4b07      	ldr	r3, [pc, #28]	@ (80073b0 <vTaskDelay+0x68>)
 8007394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	200012b0 	.word	0x200012b0
 80073b0:	e000ed04 	.word	0xe000ed04

080073b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08a      	sub	sp, #40	@ 0x28
 80073b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073be:	2300      	movs	r3, #0
 80073c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073c2:	463a      	mov	r2, r7
 80073c4:	1d39      	adds	r1, r7, #4
 80073c6:	f107 0308 	add.w	r3, r7, #8
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff f81c 	bl	8006408 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	9202      	str	r2, [sp, #8]
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	2300      	movs	r3, #0
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	2300      	movs	r3, #0
 80073e0:	460a      	mov	r2, r1
 80073e2:	4924      	ldr	r1, [pc, #144]	@ (8007474 <vTaskStartScheduler+0xc0>)
 80073e4:	4824      	ldr	r0, [pc, #144]	@ (8007478 <vTaskStartScheduler+0xc4>)
 80073e6:	f7ff fdf1 	bl	8006fcc <xTaskCreateStatic>
 80073ea:	4603      	mov	r3, r0
 80073ec:	4a23      	ldr	r2, [pc, #140]	@ (800747c <vTaskStartScheduler+0xc8>)
 80073ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073f0:	4b22      	ldr	r3, [pc, #136]	@ (800747c <vTaskStartScheduler+0xc8>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073f8:	2301      	movs	r3, #1
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	e001      	b.n	8007402 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d102      	bne.n	800740e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007408:	f000 fd1a 	bl	8007e40 <xTimerCreateTimerTask>
 800740c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d11b      	bne.n	800744c <vTaskStartScheduler+0x98>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	613b      	str	r3, [r7, #16]
}
 8007426:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007428:	4b15      	ldr	r3, [pc, #84]	@ (8007480 <vTaskStartScheduler+0xcc>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3354      	adds	r3, #84	@ 0x54
 800742e:	4a15      	ldr	r2, [pc, #84]	@ (8007484 <vTaskStartScheduler+0xd0>)
 8007430:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007432:	4b15      	ldr	r3, [pc, #84]	@ (8007488 <vTaskStartScheduler+0xd4>)
 8007434:	f04f 32ff 	mov.w	r2, #4294967295
 8007438:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800743a:	4b14      	ldr	r3, [pc, #80]	@ (800748c <vTaskStartScheduler+0xd8>)
 800743c:	2201      	movs	r2, #1
 800743e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007440:	4b13      	ldr	r3, [pc, #76]	@ (8007490 <vTaskStartScheduler+0xdc>)
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007446:	f001 f8e3 	bl	8008610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800744a:	e00f      	b.n	800746c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	d10b      	bne.n	800746c <vTaskStartScheduler+0xb8>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	60fb      	str	r3, [r7, #12]
}
 8007466:	bf00      	nop
 8007468:	bf00      	nop
 800746a:	e7fd      	b.n	8007468 <vTaskStartScheduler+0xb4>
}
 800746c:	bf00      	nop
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	08008fbc 	.word	0x08008fbc
 8007478:	08007ac5 	.word	0x08007ac5
 800747c:	200012ac 	.word	0x200012ac
 8007480:	20000db4 	.word	0x20000db4
 8007484:	20000010 	.word	0x20000010
 8007488:	200012a8 	.word	0x200012a8
 800748c:	20001294 	.word	0x20001294
 8007490:	2000128c 	.word	0x2000128c

08007494 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007498:	4b04      	ldr	r3, [pc, #16]	@ (80074ac <vTaskSuspendAll+0x18>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3301      	adds	r3, #1
 800749e:	4a03      	ldr	r2, [pc, #12]	@ (80074ac <vTaskSuspendAll+0x18>)
 80074a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80074a2:	bf00      	nop
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	200012b0 	.word	0x200012b0

080074b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074be:	4b42      	ldr	r3, [pc, #264]	@ (80075c8 <xTaskResumeAll+0x118>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10b      	bne.n	80074de <xTaskResumeAll+0x2e>
	__asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	603b      	str	r3, [r7, #0]
}
 80074d8:	bf00      	nop
 80074da:	bf00      	nop
 80074dc:	e7fd      	b.n	80074da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074de:	f001 f93b 	bl	8008758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074e2:	4b39      	ldr	r3, [pc, #228]	@ (80075c8 <xTaskResumeAll+0x118>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	4a37      	ldr	r2, [pc, #220]	@ (80075c8 <xTaskResumeAll+0x118>)
 80074ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ec:	4b36      	ldr	r3, [pc, #216]	@ (80075c8 <xTaskResumeAll+0x118>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d162      	bne.n	80075ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074f4:	4b35      	ldr	r3, [pc, #212]	@ (80075cc <xTaskResumeAll+0x11c>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d05e      	beq.n	80075ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074fc:	e02f      	b.n	800755e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074fe:	4b34      	ldr	r3, [pc, #208]	@ (80075d0 <xTaskResumeAll+0x120>)
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3318      	adds	r3, #24
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff f83a 	bl	8006584 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3304      	adds	r3, #4
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff f835 	bl	8006584 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800751e:	4b2d      	ldr	r3, [pc, #180]	@ (80075d4 <xTaskResumeAll+0x124>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	429a      	cmp	r2, r3
 8007524:	d903      	bls.n	800752e <xTaskResumeAll+0x7e>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752a:	4a2a      	ldr	r2, [pc, #168]	@ (80075d4 <xTaskResumeAll+0x124>)
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007532:	4613      	mov	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4a27      	ldr	r2, [pc, #156]	@ (80075d8 <xTaskResumeAll+0x128>)
 800753c:	441a      	add	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3304      	adds	r3, #4
 8007542:	4619      	mov	r1, r3
 8007544:	4610      	mov	r0, r2
 8007546:	f7fe ffc0 	bl	80064ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800754e:	4b23      	ldr	r3, [pc, #140]	@ (80075dc <xTaskResumeAll+0x12c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	429a      	cmp	r2, r3
 8007556:	d302      	bcc.n	800755e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007558:	4b21      	ldr	r3, [pc, #132]	@ (80075e0 <xTaskResumeAll+0x130>)
 800755a:	2201      	movs	r2, #1
 800755c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800755e:	4b1c      	ldr	r3, [pc, #112]	@ (80075d0 <xTaskResumeAll+0x120>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1cb      	bne.n	80074fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800756c:	f000 fb66 	bl	8007c3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007570:	4b1c      	ldr	r3, [pc, #112]	@ (80075e4 <xTaskResumeAll+0x134>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d010      	beq.n	800759e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800757c:	f000 f846 	bl	800760c <xTaskIncrementTick>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007586:	4b16      	ldr	r3, [pc, #88]	@ (80075e0 <xTaskResumeAll+0x130>)
 8007588:	2201      	movs	r2, #1
 800758a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3b01      	subs	r3, #1
 8007590:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1f1      	bne.n	800757c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007598:	4b12      	ldr	r3, [pc, #72]	@ (80075e4 <xTaskResumeAll+0x134>)
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800759e:	4b10      	ldr	r3, [pc, #64]	@ (80075e0 <xTaskResumeAll+0x130>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075a6:	2301      	movs	r3, #1
 80075a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075aa:	4b0f      	ldr	r3, [pc, #60]	@ (80075e8 <xTaskResumeAll+0x138>)
 80075ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075ba:	f001 f8ff 	bl	80087bc <vPortExitCritical>

	return xAlreadyYielded;
 80075be:	68bb      	ldr	r3, [r7, #8]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	200012b0 	.word	0x200012b0
 80075cc:	20001288 	.word	0x20001288
 80075d0:	20001248 	.word	0x20001248
 80075d4:	20001290 	.word	0x20001290
 80075d8:	20000db8 	.word	0x20000db8
 80075dc:	20000db4 	.word	0x20000db4
 80075e0:	2000129c 	.word	0x2000129c
 80075e4:	20001298 	.word	0x20001298
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075f2:	4b05      	ldr	r3, [pc, #20]	@ (8007608 <xTaskGetTickCount+0x1c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075f8:	687b      	ldr	r3, [r7, #4]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	2000128c 	.word	0x2000128c

0800760c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007612:	2300      	movs	r3, #0
 8007614:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007616:	4b4f      	ldr	r3, [pc, #316]	@ (8007754 <xTaskIncrementTick+0x148>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	f040 8090 	bne.w	8007740 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007620:	4b4d      	ldr	r3, [pc, #308]	@ (8007758 <xTaskIncrementTick+0x14c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3301      	adds	r3, #1
 8007626:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007628:	4a4b      	ldr	r2, [pc, #300]	@ (8007758 <xTaskIncrementTick+0x14c>)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d121      	bne.n	8007678 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007634:	4b49      	ldr	r3, [pc, #292]	@ (800775c <xTaskIncrementTick+0x150>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <xTaskIncrementTick+0x4a>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	603b      	str	r3, [r7, #0]
}
 8007650:	bf00      	nop
 8007652:	bf00      	nop
 8007654:	e7fd      	b.n	8007652 <xTaskIncrementTick+0x46>
 8007656:	4b41      	ldr	r3, [pc, #260]	@ (800775c <xTaskIncrementTick+0x150>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	4b40      	ldr	r3, [pc, #256]	@ (8007760 <xTaskIncrementTick+0x154>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a3e      	ldr	r2, [pc, #248]	@ (800775c <xTaskIncrementTick+0x150>)
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	4a3e      	ldr	r2, [pc, #248]	@ (8007760 <xTaskIncrementTick+0x154>)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	4b3e      	ldr	r3, [pc, #248]	@ (8007764 <xTaskIncrementTick+0x158>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3301      	adds	r3, #1
 8007670:	4a3c      	ldr	r2, [pc, #240]	@ (8007764 <xTaskIncrementTick+0x158>)
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	f000 fae2 	bl	8007c3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007678:	4b3b      	ldr	r3, [pc, #236]	@ (8007768 <xTaskIncrementTick+0x15c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	429a      	cmp	r2, r3
 8007680:	d349      	bcc.n	8007716 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007682:	4b36      	ldr	r3, [pc, #216]	@ (800775c <xTaskIncrementTick+0x150>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d104      	bne.n	8007696 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800768c:	4b36      	ldr	r3, [pc, #216]	@ (8007768 <xTaskIncrementTick+0x15c>)
 800768e:	f04f 32ff 	mov.w	r2, #4294967295
 8007692:	601a      	str	r2, [r3, #0]
					break;
 8007694:	e03f      	b.n	8007716 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007696:	4b31      	ldr	r3, [pc, #196]	@ (800775c <xTaskIncrementTick+0x150>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d203      	bcs.n	80076b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076ae:	4a2e      	ldr	r2, [pc, #184]	@ (8007768 <xTaskIncrementTick+0x15c>)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076b4:	e02f      	b.n	8007716 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	3304      	adds	r3, #4
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fe ff62 	bl	8006584 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d004      	beq.n	80076d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	3318      	adds	r3, #24
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fe ff59 	bl	8006584 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d6:	4b25      	ldr	r3, [pc, #148]	@ (800776c <xTaskIncrementTick+0x160>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d903      	bls.n	80076e6 <xTaskIncrementTick+0xda>
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e2:	4a22      	ldr	r2, [pc, #136]	@ (800776c <xTaskIncrementTick+0x160>)
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ea:	4613      	mov	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007770 <xTaskIncrementTick+0x164>)
 80076f4:	441a      	add	r2, r3
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	3304      	adds	r3, #4
 80076fa:	4619      	mov	r1, r3
 80076fc:	4610      	mov	r0, r2
 80076fe:	f7fe fee4 	bl	80064ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007706:	4b1b      	ldr	r3, [pc, #108]	@ (8007774 <xTaskIncrementTick+0x168>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770c:	429a      	cmp	r2, r3
 800770e:	d3b8      	bcc.n	8007682 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007710:	2301      	movs	r3, #1
 8007712:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007714:	e7b5      	b.n	8007682 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007716:	4b17      	ldr	r3, [pc, #92]	@ (8007774 <xTaskIncrementTick+0x168>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800771c:	4914      	ldr	r1, [pc, #80]	@ (8007770 <xTaskIncrementTick+0x164>)
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d901      	bls.n	8007732 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800772e:	2301      	movs	r3, #1
 8007730:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007732:	4b11      	ldr	r3, [pc, #68]	@ (8007778 <xTaskIncrementTick+0x16c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d007      	beq.n	800774a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800773a:	2301      	movs	r3, #1
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	e004      	b.n	800774a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007740:	4b0e      	ldr	r3, [pc, #56]	@ (800777c <xTaskIncrementTick+0x170>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3301      	adds	r3, #1
 8007746:	4a0d      	ldr	r2, [pc, #52]	@ (800777c <xTaskIncrementTick+0x170>)
 8007748:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800774a:	697b      	ldr	r3, [r7, #20]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	200012b0 	.word	0x200012b0
 8007758:	2000128c 	.word	0x2000128c
 800775c:	20001240 	.word	0x20001240
 8007760:	20001244 	.word	0x20001244
 8007764:	200012a0 	.word	0x200012a0
 8007768:	200012a8 	.word	0x200012a8
 800776c:	20001290 	.word	0x20001290
 8007770:	20000db8 	.word	0x20000db8
 8007774:	20000db4 	.word	0x20000db4
 8007778:	2000129c 	.word	0x2000129c
 800777c:	20001298 	.word	0x20001298

08007780 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007786:	4b2b      	ldr	r3, [pc, #172]	@ (8007834 <vTaskSwitchContext+0xb4>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800778e:	4b2a      	ldr	r3, [pc, #168]	@ (8007838 <vTaskSwitchContext+0xb8>)
 8007790:	2201      	movs	r2, #1
 8007792:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007794:	e047      	b.n	8007826 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007796:	4b28      	ldr	r3, [pc, #160]	@ (8007838 <vTaskSwitchContext+0xb8>)
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800779c:	4b27      	ldr	r3, [pc, #156]	@ (800783c <vTaskSwitchContext+0xbc>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	e011      	b.n	80077c8 <vTaskSwitchContext+0x48>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10b      	bne.n	80077c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	607b      	str	r3, [r7, #4]
}
 80077bc:	bf00      	nop
 80077be:	bf00      	nop
 80077c0:	e7fd      	b.n	80077be <vTaskSwitchContext+0x3e>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	491d      	ldr	r1, [pc, #116]	@ (8007840 <vTaskSwitchContext+0xc0>)
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	440b      	add	r3, r1
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0e3      	beq.n	80077a4 <vTaskSwitchContext+0x24>
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4a16      	ldr	r2, [pc, #88]	@ (8007840 <vTaskSwitchContext+0xc0>)
 80077e8:	4413      	add	r3, r2
 80077ea:	60bb      	str	r3, [r7, #8]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	605a      	str	r2, [r3, #4]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	3308      	adds	r3, #8
 80077fe:	429a      	cmp	r2, r3
 8007800:	d104      	bne.n	800780c <vTaskSwitchContext+0x8c>
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	605a      	str	r2, [r3, #4]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	4a0c      	ldr	r2, [pc, #48]	@ (8007844 <vTaskSwitchContext+0xc4>)
 8007814:	6013      	str	r3, [r2, #0]
 8007816:	4a09      	ldr	r2, [pc, #36]	@ (800783c <vTaskSwitchContext+0xbc>)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800781c:	4b09      	ldr	r3, [pc, #36]	@ (8007844 <vTaskSwitchContext+0xc4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3354      	adds	r3, #84	@ 0x54
 8007822:	4a09      	ldr	r2, [pc, #36]	@ (8007848 <vTaskSwitchContext+0xc8>)
 8007824:	6013      	str	r3, [r2, #0]
}
 8007826:	bf00      	nop
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	200012b0 	.word	0x200012b0
 8007838:	2000129c 	.word	0x2000129c
 800783c:	20001290 	.word	0x20001290
 8007840:	20000db8 	.word	0x20000db8
 8007844:	20000db4 	.word	0x20000db4
 8007848:	20000010 	.word	0x20000010

0800784c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10b      	bne.n	8007874 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	60fb      	str	r3, [r7, #12]
}
 800786e:	bf00      	nop
 8007870:	bf00      	nop
 8007872:	e7fd      	b.n	8007870 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007874:	4b07      	ldr	r3, [pc, #28]	@ (8007894 <vTaskPlaceOnEventList+0x48>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3318      	adds	r3, #24
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7fe fe48 	bl	8006512 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007882:	2101      	movs	r1, #1
 8007884:	6838      	ldr	r0, [r7, #0]
 8007886:	f000 fa87 	bl	8007d98 <prvAddCurrentTaskToDelayedList>
}
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20000db4 	.word	0x20000db4

08007898 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10b      	bne.n	80078c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	617b      	str	r3, [r7, #20]
}
 80078bc:	bf00      	nop
 80078be:	bf00      	nop
 80078c0:	e7fd      	b.n	80078be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078c2:	4b0a      	ldr	r3, [pc, #40]	@ (80078ec <vTaskPlaceOnEventListRestricted+0x54>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3318      	adds	r3, #24
 80078c8:	4619      	mov	r1, r3
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f7fe fdfd 	bl	80064ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80078d6:	f04f 33ff 	mov.w	r3, #4294967295
 80078da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	68b8      	ldr	r0, [r7, #8]
 80078e0:	f000 fa5a 	bl	8007d98 <prvAddCurrentTaskToDelayedList>
	}
 80078e4:	bf00      	nop
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20000db4 	.word	0x20000db4

080078f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10b      	bne.n	800791e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	60fb      	str	r3, [r7, #12]
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	e7fd      	b.n	800791a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	3318      	adds	r3, #24
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe fe2e 	bl	8006584 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007928:	4b1d      	ldr	r3, [pc, #116]	@ (80079a0 <xTaskRemoveFromEventList+0xb0>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d11d      	bne.n	800796c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	3304      	adds	r3, #4
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe fe25 	bl	8006584 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800793e:	4b19      	ldr	r3, [pc, #100]	@ (80079a4 <xTaskRemoveFromEventList+0xb4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	429a      	cmp	r2, r3
 8007944:	d903      	bls.n	800794e <xTaskRemoveFromEventList+0x5e>
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794a:	4a16      	ldr	r2, [pc, #88]	@ (80079a4 <xTaskRemoveFromEventList+0xb4>)
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4a13      	ldr	r2, [pc, #76]	@ (80079a8 <xTaskRemoveFromEventList+0xb8>)
 800795c:	441a      	add	r2, r3
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	3304      	adds	r3, #4
 8007962:	4619      	mov	r1, r3
 8007964:	4610      	mov	r0, r2
 8007966:	f7fe fdb0 	bl	80064ca <vListInsertEnd>
 800796a:	e005      	b.n	8007978 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	3318      	adds	r3, #24
 8007970:	4619      	mov	r1, r3
 8007972:	480e      	ldr	r0, [pc, #56]	@ (80079ac <xTaskRemoveFromEventList+0xbc>)
 8007974:	f7fe fda9 	bl	80064ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800797c:	4b0c      	ldr	r3, [pc, #48]	@ (80079b0 <xTaskRemoveFromEventList+0xc0>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007982:	429a      	cmp	r2, r3
 8007984:	d905      	bls.n	8007992 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007986:	2301      	movs	r3, #1
 8007988:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800798a:	4b0a      	ldr	r3, [pc, #40]	@ (80079b4 <xTaskRemoveFromEventList+0xc4>)
 800798c:	2201      	movs	r2, #1
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	e001      	b.n	8007996 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007996:	697b      	ldr	r3, [r7, #20]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	200012b0 	.word	0x200012b0
 80079a4:	20001290 	.word	0x20001290
 80079a8:	20000db8 	.word	0x20000db8
 80079ac:	20001248 	.word	0x20001248
 80079b0:	20000db4 	.word	0x20000db4
 80079b4:	2000129c 	.word	0x2000129c

080079b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079c0:	4b06      	ldr	r3, [pc, #24]	@ (80079dc <vTaskInternalSetTimeOutState+0x24>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079c8:	4b05      	ldr	r3, [pc, #20]	@ (80079e0 <vTaskInternalSetTimeOutState+0x28>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	605a      	str	r2, [r3, #4]
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	200012a0 	.word	0x200012a0
 80079e0:	2000128c 	.word	0x2000128c

080079e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10b      	bne.n	8007a0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	613b      	str	r3, [r7, #16]
}
 8007a06:	bf00      	nop
 8007a08:	bf00      	nop
 8007a0a:	e7fd      	b.n	8007a08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	60fb      	str	r3, [r7, #12]
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	e7fd      	b.n	8007a26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007a2a:	f000 fe95 	bl	8008758 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8007aa4 <xTaskCheckForTimeOut+0xc0>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d102      	bne.n	8007a4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	e023      	b.n	8007a96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	4b15      	ldr	r3, [pc, #84]	@ (8007aa8 <xTaskCheckForTimeOut+0xc4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d007      	beq.n	8007a6a <xTaskCheckForTimeOut+0x86>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d302      	bcc.n	8007a6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a64:	2301      	movs	r3, #1
 8007a66:	61fb      	str	r3, [r7, #28]
 8007a68:	e015      	b.n	8007a96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d20b      	bcs.n	8007a8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	1ad2      	subs	r2, r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff ff99 	bl	80079b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a86:	2300      	movs	r3, #0
 8007a88:	61fb      	str	r3, [r7, #28]
 8007a8a:	e004      	b.n	8007a96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a92:	2301      	movs	r3, #1
 8007a94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a96:	f000 fe91 	bl	80087bc <vPortExitCritical>

	return xReturn;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3720      	adds	r7, #32
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	2000128c 	.word	0x2000128c
 8007aa8:	200012a0 	.word	0x200012a0

08007aac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ab0:	4b03      	ldr	r3, [pc, #12]	@ (8007ac0 <vTaskMissedYield+0x14>)
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]
}
 8007ab6:	bf00      	nop
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	2000129c 	.word	0x2000129c

08007ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007acc:	f000 f852 	bl	8007b74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ad0:	4b06      	ldr	r3, [pc, #24]	@ (8007aec <prvIdleTask+0x28>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d9f9      	bls.n	8007acc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ad8:	4b05      	ldr	r3, [pc, #20]	@ (8007af0 <prvIdleTask+0x2c>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ae8:	e7f0      	b.n	8007acc <prvIdleTask+0x8>
 8007aea:	bf00      	nop
 8007aec:	20000db8 	.word	0x20000db8
 8007af0:	e000ed04 	.word	0xe000ed04

08007af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007afa:	2300      	movs	r3, #0
 8007afc:	607b      	str	r3, [r7, #4]
 8007afe:	e00c      	b.n	8007b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4a12      	ldr	r2, [pc, #72]	@ (8007b54 <prvInitialiseTaskLists+0x60>)
 8007b0c:	4413      	add	r3, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe fcae 	bl	8006470 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3301      	adds	r3, #1
 8007b18:	607b      	str	r3, [r7, #4]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b37      	cmp	r3, #55	@ 0x37
 8007b1e:	d9ef      	bls.n	8007b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b20:	480d      	ldr	r0, [pc, #52]	@ (8007b58 <prvInitialiseTaskLists+0x64>)
 8007b22:	f7fe fca5 	bl	8006470 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b26:	480d      	ldr	r0, [pc, #52]	@ (8007b5c <prvInitialiseTaskLists+0x68>)
 8007b28:	f7fe fca2 	bl	8006470 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b2c:	480c      	ldr	r0, [pc, #48]	@ (8007b60 <prvInitialiseTaskLists+0x6c>)
 8007b2e:	f7fe fc9f 	bl	8006470 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b32:	480c      	ldr	r0, [pc, #48]	@ (8007b64 <prvInitialiseTaskLists+0x70>)
 8007b34:	f7fe fc9c 	bl	8006470 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b38:	480b      	ldr	r0, [pc, #44]	@ (8007b68 <prvInitialiseTaskLists+0x74>)
 8007b3a:	f7fe fc99 	bl	8006470 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b6c <prvInitialiseTaskLists+0x78>)
 8007b40:	4a05      	ldr	r2, [pc, #20]	@ (8007b58 <prvInitialiseTaskLists+0x64>)
 8007b42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b44:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <prvInitialiseTaskLists+0x7c>)
 8007b46:	4a05      	ldr	r2, [pc, #20]	@ (8007b5c <prvInitialiseTaskLists+0x68>)
 8007b48:	601a      	str	r2, [r3, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20000db8 	.word	0x20000db8
 8007b58:	20001218 	.word	0x20001218
 8007b5c:	2000122c 	.word	0x2000122c
 8007b60:	20001248 	.word	0x20001248
 8007b64:	2000125c 	.word	0x2000125c
 8007b68:	20001274 	.word	0x20001274
 8007b6c:	20001240 	.word	0x20001240
 8007b70:	20001244 	.word	0x20001244

08007b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b7a:	e019      	b.n	8007bb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b7c:	f000 fdec 	bl	8008758 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b80:	4b10      	ldr	r3, [pc, #64]	@ (8007bc4 <prvCheckTasksWaitingTermination+0x50>)
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fcf9 	bl	8006584 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b92:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc8 <prvCheckTasksWaitingTermination+0x54>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	4a0b      	ldr	r2, [pc, #44]	@ (8007bc8 <prvCheckTasksWaitingTermination+0x54>)
 8007b9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007bcc <prvCheckTasksWaitingTermination+0x58>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8007bcc <prvCheckTasksWaitingTermination+0x58>)
 8007ba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ba6:	f000 fe09 	bl	80087bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f810 	bl	8007bd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bb0:	4b06      	ldr	r3, [pc, #24]	@ (8007bcc <prvCheckTasksWaitingTermination+0x58>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e1      	bne.n	8007b7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	2000125c 	.word	0x2000125c
 8007bc8:	20001288 	.word	0x20001288
 8007bcc:	20001270 	.word	0x20001270

08007bd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3354      	adds	r3, #84	@ 0x54
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f001 f8d3 	bl	8008d88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d108      	bne.n	8007bfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 ffa1 	bl	8008b38 <vPortFree>
				vPortFree( pxTCB );
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 ff9e 	bl	8008b38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bfc:	e019      	b.n	8007c32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d103      	bne.n	8007c10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 ff95 	bl	8008b38 <vPortFree>
	}
 8007c0e:	e010      	b.n	8007c32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d00b      	beq.n	8007c32 <prvDeleteTCB+0x62>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	60fb      	str	r3, [r7, #12]
}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	e7fd      	b.n	8007c2e <prvDeleteTCB+0x5e>
	}
 8007c32:	bf00      	nop
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c42:	4b0c      	ldr	r3, [pc, #48]	@ (8007c74 <prvResetNextTaskUnblockTime+0x38>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c78 <prvResetNextTaskUnblockTime+0x3c>)
 8007c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c54:	e008      	b.n	8007c68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c56:	4b07      	ldr	r3, [pc, #28]	@ (8007c74 <prvResetNextTaskUnblockTime+0x38>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	4a04      	ldr	r2, [pc, #16]	@ (8007c78 <prvResetNextTaskUnblockTime+0x3c>)
 8007c66:	6013      	str	r3, [r2, #0]
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	20001240 	.word	0x20001240
 8007c78:	200012a8 	.word	0x200012a8

08007c7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c82:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb0 <xTaskGetSchedulerState+0x34>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d102      	bne.n	8007c90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	607b      	str	r3, [r7, #4]
 8007c8e:	e008      	b.n	8007ca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c90:	4b08      	ldr	r3, [pc, #32]	@ (8007cb4 <xTaskGetSchedulerState+0x38>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d102      	bne.n	8007c9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c98:	2302      	movs	r3, #2
 8007c9a:	607b      	str	r3, [r7, #4]
 8007c9c:	e001      	b.n	8007ca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ca2:	687b      	ldr	r3, [r7, #4]
	}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	20001294 	.word	0x20001294
 8007cb4:	200012b0 	.word	0x200012b0

08007cb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d058      	beq.n	8007d80 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cce:	4b2f      	ldr	r3, [pc, #188]	@ (8007d8c <xTaskPriorityDisinherit+0xd4>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d00b      	beq.n	8007cf0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	60fb      	str	r3, [r7, #12]
}
 8007cea:	bf00      	nop
 8007cec:	bf00      	nop
 8007cee:	e7fd      	b.n	8007cec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10b      	bne.n	8007d10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	60bb      	str	r3, [r7, #8]
}
 8007d0a:	bf00      	nop
 8007d0c:	bf00      	nop
 8007d0e:	e7fd      	b.n	8007d0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d14:	1e5a      	subs	r2, r3, #1
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d02c      	beq.n	8007d80 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d128      	bne.n	8007d80 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	3304      	adds	r3, #4
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe fc26 	bl	8006584 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d50:	4b0f      	ldr	r3, [pc, #60]	@ (8007d90 <xTaskPriorityDisinherit+0xd8>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d903      	bls.n	8007d60 <xTaskPriorityDisinherit+0xa8>
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8007d90 <xTaskPriorityDisinherit+0xd8>)
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d64:	4613      	mov	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4a09      	ldr	r2, [pc, #36]	@ (8007d94 <xTaskPriorityDisinherit+0xdc>)
 8007d6e:	441a      	add	r2, r3
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	f7fe fba7 	bl	80064ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d80:	697b      	ldr	r3, [r7, #20]
	}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000db4 	.word	0x20000db4
 8007d90:	20001290 	.word	0x20001290
 8007d94:	20000db8 	.word	0x20000db8

08007d98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007da2:	4b21      	ldr	r3, [pc, #132]	@ (8007e28 <prvAddCurrentTaskToDelayedList+0x90>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007da8:	4b20      	ldr	r3, [pc, #128]	@ (8007e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3304      	adds	r3, #4
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fe fbe8 	bl	8006584 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dba:	d10a      	bne.n	8007dd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d007      	beq.n	8007dd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4819      	ldr	r0, [pc, #100]	@ (8007e30 <prvAddCurrentTaskToDelayedList+0x98>)
 8007dcc:	f7fe fb7d 	bl	80064ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dd0:	e026      	b.n	8007e20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dda:	4b14      	ldr	r3, [pc, #80]	@ (8007e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d209      	bcs.n	8007dfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dea:	4b12      	ldr	r3, [pc, #72]	@ (8007e34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b0f      	ldr	r3, [pc, #60]	@ (8007e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3304      	adds	r3, #4
 8007df4:	4619      	mov	r1, r3
 8007df6:	4610      	mov	r0, r2
 8007df8:	f7fe fb8b 	bl	8006512 <vListInsert>
}
 8007dfc:	e010      	b.n	8007e20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8007e38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	4b0a      	ldr	r3, [pc, #40]	@ (8007e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	f7fe fb81 	bl	8006512 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e10:	4b0a      	ldr	r3, [pc, #40]	@ (8007e3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d202      	bcs.n	8007e20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e1a:	4a08      	ldr	r2, [pc, #32]	@ (8007e3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	6013      	str	r3, [r2, #0]
}
 8007e20:	bf00      	nop
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	2000128c 	.word	0x2000128c
 8007e2c:	20000db4 	.word	0x20000db4
 8007e30:	20001274 	.word	0x20001274
 8007e34:	20001244 	.word	0x20001244
 8007e38:	20001240 	.word	0x20001240
 8007e3c:	200012a8 	.word	0x200012a8

08007e40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b08a      	sub	sp, #40	@ 0x28
 8007e44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e4a:	f000 fb13 	bl	8008474 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ec4 <xTimerCreateTimerTask+0x84>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d021      	beq.n	8007e9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e5e:	1d3a      	adds	r2, r7, #4
 8007e60:	f107 0108 	add.w	r1, r7, #8
 8007e64:	f107 030c 	add.w	r3, r7, #12
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fe fae7 	bl	800643c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	9202      	str	r2, [sp, #8]
 8007e76:	9301      	str	r3, [sp, #4]
 8007e78:	2302      	movs	r3, #2
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	460a      	mov	r2, r1
 8007e80:	4911      	ldr	r1, [pc, #68]	@ (8007ec8 <xTimerCreateTimerTask+0x88>)
 8007e82:	4812      	ldr	r0, [pc, #72]	@ (8007ecc <xTimerCreateTimerTask+0x8c>)
 8007e84:	f7ff f8a2 	bl	8006fcc <xTaskCreateStatic>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	4a11      	ldr	r2, [pc, #68]	@ (8007ed0 <xTimerCreateTimerTask+0x90>)
 8007e8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e8e:	4b10      	ldr	r3, [pc, #64]	@ (8007ed0 <xTimerCreateTimerTask+0x90>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e96:	2301      	movs	r3, #1
 8007e98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10b      	bne.n	8007eb8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	613b      	str	r3, [r7, #16]
}
 8007eb2:	bf00      	nop
 8007eb4:	bf00      	nop
 8007eb6:	e7fd      	b.n	8007eb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007eb8:	697b      	ldr	r3, [r7, #20]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	200012e4 	.word	0x200012e4
 8007ec8:	08008fc4 	.word	0x08008fc4
 8007ecc:	0800800d 	.word	0x0800800d
 8007ed0:	200012e8 	.word	0x200012e8

08007ed4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08a      	sub	sp, #40	@ 0x28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10b      	bne.n	8007f04 <xTimerGenericCommand+0x30>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	623b      	str	r3, [r7, #32]
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f04:	4b19      	ldr	r3, [pc, #100]	@ (8007f6c <xTimerGenericCommand+0x98>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d02a      	beq.n	8007f62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b05      	cmp	r3, #5
 8007f1c:	dc18      	bgt.n	8007f50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f1e:	f7ff fead 	bl	8007c7c <xTaskGetSchedulerState>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d109      	bne.n	8007f3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f28:	4b10      	ldr	r3, [pc, #64]	@ (8007f6c <xTimerGenericCommand+0x98>)
 8007f2a:	6818      	ldr	r0, [r3, #0]
 8007f2c:	f107 0110 	add.w	r1, r7, #16
 8007f30:	2300      	movs	r3, #0
 8007f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f34:	f7fe fc5a 	bl	80067ec <xQueueGenericSend>
 8007f38:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f3a:	e012      	b.n	8007f62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f6c <xTimerGenericCommand+0x98>)
 8007f3e:	6818      	ldr	r0, [r3, #0]
 8007f40:	f107 0110 	add.w	r1, r7, #16
 8007f44:	2300      	movs	r3, #0
 8007f46:	2200      	movs	r2, #0
 8007f48:	f7fe fc50 	bl	80067ec <xQueueGenericSend>
 8007f4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f4e:	e008      	b.n	8007f62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f50:	4b06      	ldr	r3, [pc, #24]	@ (8007f6c <xTimerGenericCommand+0x98>)
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	f107 0110 	add.w	r1, r7, #16
 8007f58:	2300      	movs	r3, #0
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	f7fe fd48 	bl	80069f0 <xQueueGenericSendFromISR>
 8007f60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3728      	adds	r7, #40	@ 0x28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	200012e4 	.word	0x200012e4

08007f70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af02      	add	r7, sp, #8
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f7a:	4b23      	ldr	r3, [pc, #140]	@ (8008008 <prvProcessExpiredTimer+0x98>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	3304      	adds	r3, #4
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fe fafb 	bl	8006584 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d023      	beq.n	8007fe4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	699a      	ldr	r2, [r3, #24]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	18d1      	adds	r1, r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	6978      	ldr	r0, [r7, #20]
 8007faa:	f000 f8d5 	bl	8008158 <prvInsertTimerInActiveList>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d020      	beq.n	8007ff6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	6978      	ldr	r0, [r7, #20]
 8007fc0:	f7ff ff88 	bl	8007ed4 <xTimerGenericCommand>
 8007fc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d114      	bne.n	8007ff6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	60fb      	str	r3, [r7, #12]
}
 8007fde:	bf00      	nop
 8007fe0:	bf00      	nop
 8007fe2:	e7fd      	b.n	8007fe0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fea:	f023 0301 	bic.w	r3, r3, #1
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	6978      	ldr	r0, [r7, #20]
 8007ffc:	4798      	blx	r3
}
 8007ffe:	bf00      	nop
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	200012dc 	.word	0x200012dc

0800800c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008014:	f107 0308 	add.w	r3, r7, #8
 8008018:	4618      	mov	r0, r3
 800801a:	f000 f859 	bl	80080d0 <prvGetNextExpireTime>
 800801e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	4619      	mov	r1, r3
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f805 	bl	8008034 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800802a:	f000 f8d7 	bl	80081dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800802e:	bf00      	nop
 8008030:	e7f0      	b.n	8008014 <prvTimerTask+0x8>
	...

08008034 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800803e:	f7ff fa29 	bl	8007494 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008042:	f107 0308 	add.w	r3, r7, #8
 8008046:	4618      	mov	r0, r3
 8008048:	f000 f866 	bl	8008118 <prvSampleTimeNow>
 800804c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d130      	bne.n	80080b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <prvProcessTimerOrBlockTask+0x3c>
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	429a      	cmp	r2, r3
 8008060:	d806      	bhi.n	8008070 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008062:	f7ff fa25 	bl	80074b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008066:	68f9      	ldr	r1, [r7, #12]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff ff81 	bl	8007f70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800806e:	e024      	b.n	80080ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d008      	beq.n	8008088 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008076:	4b13      	ldr	r3, [pc, #76]	@ (80080c4 <prvProcessTimerOrBlockTask+0x90>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <prvProcessTimerOrBlockTask+0x50>
 8008080:	2301      	movs	r3, #1
 8008082:	e000      	b.n	8008086 <prvProcessTimerOrBlockTask+0x52>
 8008084:	2300      	movs	r3, #0
 8008086:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008088:	4b0f      	ldr	r3, [pc, #60]	@ (80080c8 <prvProcessTimerOrBlockTask+0x94>)
 800808a:	6818      	ldr	r0, [r3, #0]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	4619      	mov	r1, r3
 8008096:	f7fe ff65 	bl	8006f64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800809a:	f7ff fa09 	bl	80074b0 <xTaskResumeAll>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080a4:	4b09      	ldr	r3, [pc, #36]	@ (80080cc <prvProcessTimerOrBlockTask+0x98>)
 80080a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	f3bf 8f6f 	isb	sy
}
 80080b4:	e001      	b.n	80080ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080b6:	f7ff f9fb 	bl	80074b0 <xTaskResumeAll>
}
 80080ba:	bf00      	nop
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	200012e0 	.word	0x200012e0
 80080c8:	200012e4 	.word	0x200012e4
 80080cc:	e000ed04 	.word	0xe000ed04

080080d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008114 <prvGetNextExpireTime+0x44>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <prvGetNextExpireTime+0x16>
 80080e2:	2201      	movs	r2, #1
 80080e4:	e000      	b.n	80080e8 <prvGetNextExpireTime+0x18>
 80080e6:	2200      	movs	r2, #0
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d105      	bne.n	8008100 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080f4:	4b07      	ldr	r3, [pc, #28]	@ (8008114 <prvGetNextExpireTime+0x44>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	e001      	b.n	8008104 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008104:	68fb      	ldr	r3, [r7, #12]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	200012dc 	.word	0x200012dc

08008118 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008120:	f7ff fa64 	bl	80075ec <xTaskGetTickCount>
 8008124:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008126:	4b0b      	ldr	r3, [pc, #44]	@ (8008154 <prvSampleTimeNow+0x3c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	429a      	cmp	r2, r3
 800812e:	d205      	bcs.n	800813c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008130:	f000 f93a 	bl	80083a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	e002      	b.n	8008142 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008142:	4a04      	ldr	r2, [pc, #16]	@ (8008154 <prvSampleTimeNow+0x3c>)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008148:	68fb      	ldr	r3, [r7, #12]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	200012ec 	.word	0x200012ec

08008158 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008166:	2300      	movs	r3, #0
 8008168:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	429a      	cmp	r2, r3
 800817c:	d812      	bhi.n	80081a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	1ad2      	subs	r2, r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	429a      	cmp	r2, r3
 800818a:	d302      	bcc.n	8008192 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800818c:	2301      	movs	r3, #1
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	e01b      	b.n	80081ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008192:	4b10      	ldr	r3, [pc, #64]	@ (80081d4 <prvInsertTimerInActiveList+0x7c>)
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3304      	adds	r3, #4
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f7fe f9b8 	bl	8006512 <vListInsert>
 80081a2:	e012      	b.n	80081ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d206      	bcs.n	80081ba <prvInsertTimerInActiveList+0x62>
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d302      	bcc.n	80081ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081b4:	2301      	movs	r3, #1
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	e007      	b.n	80081ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081ba:	4b07      	ldr	r3, [pc, #28]	@ (80081d8 <prvInsertTimerInActiveList+0x80>)
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3304      	adds	r3, #4
 80081c2:	4619      	mov	r1, r3
 80081c4:	4610      	mov	r0, r2
 80081c6:	f7fe f9a4 	bl	8006512 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081ca:	697b      	ldr	r3, [r7, #20]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	200012e0 	.word	0x200012e0
 80081d8:	200012dc 	.word	0x200012dc

080081dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08e      	sub	sp, #56	@ 0x38
 80081e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081e2:	e0ce      	b.n	8008382 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	da19      	bge.n	800821e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081ea:	1d3b      	adds	r3, r7, #4
 80081ec:	3304      	adds	r3, #4
 80081ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10b      	bne.n	800820e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	61fb      	str	r3, [r7, #28]
}
 8008208:	bf00      	nop
 800820a:	bf00      	nop
 800820c:	e7fd      	b.n	800820a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800820e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008214:	6850      	ldr	r0, [r2, #4]
 8008216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008218:	6892      	ldr	r2, [r2, #8]
 800821a:	4611      	mov	r1, r2
 800821c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	f2c0 80ae 	blt.w	8008382 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800822a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d004      	beq.n	800823c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008234:	3304      	adds	r3, #4
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe f9a4 	bl	8006584 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800823c:	463b      	mov	r3, r7
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff ff6a 	bl	8008118 <prvSampleTimeNow>
 8008244:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b09      	cmp	r3, #9
 800824a:	f200 8097 	bhi.w	800837c <prvProcessReceivedCommands+0x1a0>
 800824e:	a201      	add	r2, pc, #4	@ (adr r2, 8008254 <prvProcessReceivedCommands+0x78>)
 8008250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008254:	0800827d 	.word	0x0800827d
 8008258:	0800827d 	.word	0x0800827d
 800825c:	0800827d 	.word	0x0800827d
 8008260:	080082f3 	.word	0x080082f3
 8008264:	08008307 	.word	0x08008307
 8008268:	08008353 	.word	0x08008353
 800826c:	0800827d 	.word	0x0800827d
 8008270:	0800827d 	.word	0x0800827d
 8008274:	080082f3 	.word	0x080082f3
 8008278:	08008307 	.word	0x08008307
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800827c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008282:	f043 0301 	orr.w	r3, r3, #1
 8008286:	b2da      	uxtb	r2, r3
 8008288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	18d1      	adds	r1, r2, r3
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800829a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800829c:	f7ff ff5c 	bl	8008158 <prvInsertTimerInActiveList>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d06c      	beq.n	8008380 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d061      	beq.n	8008380 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	441a      	add	r2, r3
 80082c4:	2300      	movs	r3, #0
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	2300      	movs	r3, #0
 80082ca:	2100      	movs	r1, #0
 80082cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082ce:	f7ff fe01 	bl	8007ed4 <xTimerGenericCommand>
 80082d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d152      	bne.n	8008380 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	61bb      	str	r3, [r7, #24]
}
 80082ec:	bf00      	nop
 80082ee:	bf00      	nop
 80082f0:	e7fd      	b.n	80082ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082f8:	f023 0301 	bic.w	r3, r3, #1
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008300:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008304:	e03d      	b.n	8008382 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800830c:	f043 0301 	orr.w	r3, r3, #1
 8008310:	b2da      	uxtb	r2, r3
 8008312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008314:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10b      	bne.n	800833e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	617b      	str	r3, [r7, #20]
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800833e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008344:	18d1      	adds	r1, r2, r3
 8008346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800834a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800834c:	f7ff ff04 	bl	8008158 <prvInsertTimerInActiveList>
					break;
 8008350:	e017      	b.n	8008382 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008358:	f003 0302 	and.w	r3, r3, #2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d103      	bne.n	8008368 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008362:	f000 fbe9 	bl	8008b38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008366:	e00c      	b.n	8008382 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800836e:	f023 0301 	bic.w	r3, r3, #1
 8008372:	b2da      	uxtb	r2, r3
 8008374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008376:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800837a:	e002      	b.n	8008382 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800837c:	bf00      	nop
 800837e:	e000      	b.n	8008382 <prvProcessReceivedCommands+0x1a6>
					break;
 8008380:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008382:	4b08      	ldr	r3, [pc, #32]	@ (80083a4 <prvProcessReceivedCommands+0x1c8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	1d39      	adds	r1, r7, #4
 8008388:	2200      	movs	r2, #0
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fbce 	bl	8006b2c <xQueueReceive>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	f47f af26 	bne.w	80081e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008398:	bf00      	nop
 800839a:	bf00      	nop
 800839c:	3730      	adds	r7, #48	@ 0x30
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	200012e4 	.word	0x200012e4

080083a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083ae:	e049      	b.n	8008444 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083b0:	4b2e      	ldr	r3, [pc, #184]	@ (800846c <prvSwitchTimerLists+0xc4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ba:	4b2c      	ldr	r3, [pc, #176]	@ (800846c <prvSwitchTimerLists+0xc4>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe f8db 	bl	8006584 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d02f      	beq.n	8008444 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	4413      	add	r3, r2
 80083ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d90e      	bls.n	8008414 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008402:	4b1a      	ldr	r3, [pc, #104]	@ (800846c <prvSwitchTimerLists+0xc4>)
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3304      	adds	r3, #4
 800840a:	4619      	mov	r1, r3
 800840c:	4610      	mov	r0, r2
 800840e:	f7fe f880 	bl	8006512 <vListInsert>
 8008412:	e017      	b.n	8008444 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008414:	2300      	movs	r3, #0
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	2300      	movs	r3, #0
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	2100      	movs	r1, #0
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff fd58 	bl	8007ed4 <xTimerGenericCommand>
 8008424:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10b      	bne.n	8008444 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	603b      	str	r3, [r7, #0]
}
 800843e:	bf00      	nop
 8008440:	bf00      	nop
 8008442:	e7fd      	b.n	8008440 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008444:	4b09      	ldr	r3, [pc, #36]	@ (800846c <prvSwitchTimerLists+0xc4>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1b0      	bne.n	80083b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800844e:	4b07      	ldr	r3, [pc, #28]	@ (800846c <prvSwitchTimerLists+0xc4>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008454:	4b06      	ldr	r3, [pc, #24]	@ (8008470 <prvSwitchTimerLists+0xc8>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a04      	ldr	r2, [pc, #16]	@ (800846c <prvSwitchTimerLists+0xc4>)
 800845a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800845c:	4a04      	ldr	r2, [pc, #16]	@ (8008470 <prvSwitchTimerLists+0xc8>)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	6013      	str	r3, [r2, #0]
}
 8008462:	bf00      	nop
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	200012dc 	.word	0x200012dc
 8008470:	200012e0 	.word	0x200012e0

08008474 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800847a:	f000 f96d 	bl	8008758 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800847e:	4b15      	ldr	r3, [pc, #84]	@ (80084d4 <prvCheckForValidListAndQueue+0x60>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d120      	bne.n	80084c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008486:	4814      	ldr	r0, [pc, #80]	@ (80084d8 <prvCheckForValidListAndQueue+0x64>)
 8008488:	f7fd fff2 	bl	8006470 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800848c:	4813      	ldr	r0, [pc, #76]	@ (80084dc <prvCheckForValidListAndQueue+0x68>)
 800848e:	f7fd ffef 	bl	8006470 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008492:	4b13      	ldr	r3, [pc, #76]	@ (80084e0 <prvCheckForValidListAndQueue+0x6c>)
 8008494:	4a10      	ldr	r2, [pc, #64]	@ (80084d8 <prvCheckForValidListAndQueue+0x64>)
 8008496:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008498:	4b12      	ldr	r3, [pc, #72]	@ (80084e4 <prvCheckForValidListAndQueue+0x70>)
 800849a:	4a10      	ldr	r2, [pc, #64]	@ (80084dc <prvCheckForValidListAndQueue+0x68>)
 800849c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800849e:	2300      	movs	r3, #0
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	4b11      	ldr	r3, [pc, #68]	@ (80084e8 <prvCheckForValidListAndQueue+0x74>)
 80084a4:	4a11      	ldr	r2, [pc, #68]	@ (80084ec <prvCheckForValidListAndQueue+0x78>)
 80084a6:	2110      	movs	r1, #16
 80084a8:	200a      	movs	r0, #10
 80084aa:	f7fe f8ff 	bl	80066ac <xQueueGenericCreateStatic>
 80084ae:	4603      	mov	r3, r0
 80084b0:	4a08      	ldr	r2, [pc, #32]	@ (80084d4 <prvCheckForValidListAndQueue+0x60>)
 80084b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084b4:	4b07      	ldr	r3, [pc, #28]	@ (80084d4 <prvCheckForValidListAndQueue+0x60>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d005      	beq.n	80084c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084bc:	4b05      	ldr	r3, [pc, #20]	@ (80084d4 <prvCheckForValidListAndQueue+0x60>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	490b      	ldr	r1, [pc, #44]	@ (80084f0 <prvCheckForValidListAndQueue+0x7c>)
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe fd24 	bl	8006f10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084c8:	f000 f978 	bl	80087bc <vPortExitCritical>
}
 80084cc:	bf00      	nop
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	200012e4 	.word	0x200012e4
 80084d8:	200012b4 	.word	0x200012b4
 80084dc:	200012c8 	.word	0x200012c8
 80084e0:	200012dc 	.word	0x200012dc
 80084e4:	200012e0 	.word	0x200012e0
 80084e8:	20001390 	.word	0x20001390
 80084ec:	200012f0 	.word	0x200012f0
 80084f0:	08008fcc 	.word	0x08008fcc

080084f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	3b04      	subs	r3, #4
 8008504:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800850c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3b04      	subs	r3, #4
 8008512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	f023 0201 	bic.w	r2, r3, #1
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3b04      	subs	r3, #4
 8008522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008524:	4a0c      	ldr	r2, [pc, #48]	@ (8008558 <pxPortInitialiseStack+0x64>)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3b14      	subs	r3, #20
 800852e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3b04      	subs	r3, #4
 800853a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f06f 0202 	mvn.w	r2, #2
 8008542:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3b20      	subs	r3, #32
 8008548:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800854a:	68fb      	ldr	r3, [r7, #12]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	0800855d 	.word	0x0800855d

0800855c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008566:	4b13      	ldr	r3, [pc, #76]	@ (80085b4 <prvTaskExitError+0x58>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856e:	d00b      	beq.n	8008588 <prvTaskExitError+0x2c>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	60fb      	str	r3, [r7, #12]
}
 8008582:	bf00      	nop
 8008584:	bf00      	nop
 8008586:	e7fd      	b.n	8008584 <prvTaskExitError+0x28>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	60bb      	str	r3, [r7, #8]
}
 800859a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800859c:	bf00      	nop
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0fc      	beq.n	800859e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	2000000c 	.word	0x2000000c
	...

080085c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085c0:	4b07      	ldr	r3, [pc, #28]	@ (80085e0 <pxCurrentTCBConst2>)
 80085c2:	6819      	ldr	r1, [r3, #0]
 80085c4:	6808      	ldr	r0, [r1, #0]
 80085c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ca:	f380 8809 	msr	PSP, r0
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f380 8811 	msr	BASEPRI, r0
 80085da:	4770      	bx	lr
 80085dc:	f3af 8000 	nop.w

080085e0 <pxCurrentTCBConst2>:
 80085e0:	20000db4 	.word	0x20000db4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop

080085e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085e8:	4808      	ldr	r0, [pc, #32]	@ (800860c <prvPortStartFirstTask+0x24>)
 80085ea:	6800      	ldr	r0, [r0, #0]
 80085ec:	6800      	ldr	r0, [r0, #0]
 80085ee:	f380 8808 	msr	MSP, r0
 80085f2:	f04f 0000 	mov.w	r0, #0
 80085f6:	f380 8814 	msr	CONTROL, r0
 80085fa:	b662      	cpsie	i
 80085fc:	b661      	cpsie	f
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	df00      	svc	0
 8008608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800860a:	bf00      	nop
 800860c:	e000ed08 	.word	0xe000ed08

08008610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008616:	4b47      	ldr	r3, [pc, #284]	@ (8008734 <xPortStartScheduler+0x124>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a47      	ldr	r2, [pc, #284]	@ (8008738 <xPortStartScheduler+0x128>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d10b      	bne.n	8008638 <xPortStartScheduler+0x28>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	613b      	str	r3, [r7, #16]
}
 8008632:	bf00      	nop
 8008634:	bf00      	nop
 8008636:	e7fd      	b.n	8008634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008638:	4b3e      	ldr	r3, [pc, #248]	@ (8008734 <xPortStartScheduler+0x124>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a3f      	ldr	r2, [pc, #252]	@ (800873c <xPortStartScheduler+0x12c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d10b      	bne.n	800865a <xPortStartScheduler+0x4a>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	60fb      	str	r3, [r7, #12]
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	e7fd      	b.n	8008656 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800865a:	4b39      	ldr	r3, [pc, #228]	@ (8008740 <xPortStartScheduler+0x130>)
 800865c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	22ff      	movs	r2, #255	@ 0xff
 800866a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800867c:	b2da      	uxtb	r2, r3
 800867e:	4b31      	ldr	r3, [pc, #196]	@ (8008744 <xPortStartScheduler+0x134>)
 8008680:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008682:	4b31      	ldr	r3, [pc, #196]	@ (8008748 <xPortStartScheduler+0x138>)
 8008684:	2207      	movs	r2, #7
 8008686:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008688:	e009      	b.n	800869e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800868a:	4b2f      	ldr	r3, [pc, #188]	@ (8008748 <xPortStartScheduler+0x138>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3b01      	subs	r3, #1
 8008690:	4a2d      	ldr	r2, [pc, #180]	@ (8008748 <xPortStartScheduler+0x138>)
 8008692:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	b2db      	uxtb	r3, r3
 800869c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a6:	2b80      	cmp	r3, #128	@ 0x80
 80086a8:	d0ef      	beq.n	800868a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086aa:	4b27      	ldr	r3, [pc, #156]	@ (8008748 <xPortStartScheduler+0x138>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f1c3 0307 	rsb	r3, r3, #7
 80086b2:	2b04      	cmp	r3, #4
 80086b4:	d00b      	beq.n	80086ce <xPortStartScheduler+0xbe>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	60bb      	str	r3, [r7, #8]
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	e7fd      	b.n	80086ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008748 <xPortStartScheduler+0x138>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008748 <xPortStartScheduler+0x138>)
 80086d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008748 <xPortStartScheduler+0x138>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80086e0:	4a19      	ldr	r2, [pc, #100]	@ (8008748 <xPortStartScheduler+0x138>)
 80086e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086ec:	4b17      	ldr	r3, [pc, #92]	@ (800874c <xPortStartScheduler+0x13c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a16      	ldr	r2, [pc, #88]	@ (800874c <xPortStartScheduler+0x13c>)
 80086f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086f8:	4b14      	ldr	r3, [pc, #80]	@ (800874c <xPortStartScheduler+0x13c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a13      	ldr	r2, [pc, #76]	@ (800874c <xPortStartScheduler+0x13c>)
 80086fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008704:	f000 f8da 	bl	80088bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008708:	4b11      	ldr	r3, [pc, #68]	@ (8008750 <xPortStartScheduler+0x140>)
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800870e:	f000 f8f9 	bl	8008904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008712:	4b10      	ldr	r3, [pc, #64]	@ (8008754 <xPortStartScheduler+0x144>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a0f      	ldr	r2, [pc, #60]	@ (8008754 <xPortStartScheduler+0x144>)
 8008718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800871c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800871e:	f7ff ff63 	bl	80085e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008722:	f7ff f82d 	bl	8007780 <vTaskSwitchContext>
	prvTaskExitError();
 8008726:	f7ff ff19 	bl	800855c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	e000ed00 	.word	0xe000ed00
 8008738:	410fc271 	.word	0x410fc271
 800873c:	410fc270 	.word	0x410fc270
 8008740:	e000e400 	.word	0xe000e400
 8008744:	200013e0 	.word	0x200013e0
 8008748:	200013e4 	.word	0x200013e4
 800874c:	e000ed20 	.word	0xe000ed20
 8008750:	2000000c 	.word	0x2000000c
 8008754:	e000ef34 	.word	0xe000ef34

08008758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	607b      	str	r3, [r7, #4]
}
 8008770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008772:	4b10      	ldr	r3, [pc, #64]	@ (80087b4 <vPortEnterCritical+0x5c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3301      	adds	r3, #1
 8008778:	4a0e      	ldr	r2, [pc, #56]	@ (80087b4 <vPortEnterCritical+0x5c>)
 800877a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800877c:	4b0d      	ldr	r3, [pc, #52]	@ (80087b4 <vPortEnterCritical+0x5c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d110      	bne.n	80087a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008784:	4b0c      	ldr	r3, [pc, #48]	@ (80087b8 <vPortEnterCritical+0x60>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00b      	beq.n	80087a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	603b      	str	r3, [r7, #0]
}
 80087a0:	bf00      	nop
 80087a2:	bf00      	nop
 80087a4:	e7fd      	b.n	80087a2 <vPortEnterCritical+0x4a>
	}
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	2000000c 	.word	0x2000000c
 80087b8:	e000ed04 	.word	0xe000ed04

080087bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087c2:	4b12      	ldr	r3, [pc, #72]	@ (800880c <vPortExitCritical+0x50>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10b      	bne.n	80087e2 <vPortExitCritical+0x26>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	607b      	str	r3, [r7, #4]
}
 80087dc:	bf00      	nop
 80087de:	bf00      	nop
 80087e0:	e7fd      	b.n	80087de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087e2:	4b0a      	ldr	r3, [pc, #40]	@ (800880c <vPortExitCritical+0x50>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	4a08      	ldr	r2, [pc, #32]	@ (800880c <vPortExitCritical+0x50>)
 80087ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087ec:	4b07      	ldr	r3, [pc, #28]	@ (800880c <vPortExitCritical+0x50>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d105      	bne.n	8008800 <vPortExitCritical+0x44>
 80087f4:	2300      	movs	r3, #0
 80087f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	f383 8811 	msr	BASEPRI, r3
}
 80087fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	2000000c 	.word	0x2000000c

08008810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008810:	f3ef 8009 	mrs	r0, PSP
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	4b15      	ldr	r3, [pc, #84]	@ (8008870 <pxCurrentTCBConst>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	f01e 0f10 	tst.w	lr, #16
 8008820:	bf08      	it	eq
 8008822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882a:	6010      	str	r0, [r2, #0]
 800882c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008834:	f380 8811 	msr	BASEPRI, r0
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f7fe ff9e 	bl	8007780 <vTaskSwitchContext>
 8008844:	f04f 0000 	mov.w	r0, #0
 8008848:	f380 8811 	msr	BASEPRI, r0
 800884c:	bc09      	pop	{r0, r3}
 800884e:	6819      	ldr	r1, [r3, #0]
 8008850:	6808      	ldr	r0, [r1, #0]
 8008852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008856:	f01e 0f10 	tst.w	lr, #16
 800885a:	bf08      	it	eq
 800885c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008860:	f380 8809 	msr	PSP, r0
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	f3af 8000 	nop.w

08008870 <pxCurrentTCBConst>:
 8008870:	20000db4 	.word	0x20000db4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop

08008878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	607b      	str	r3, [r7, #4]
}
 8008890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008892:	f7fe febb 	bl	800760c <xTaskIncrementTick>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800889c:	4b06      	ldr	r3, [pc, #24]	@ (80088b8 <xPortSysTickHandler+0x40>)
 800889e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	2300      	movs	r3, #0
 80088a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f383 8811 	msr	BASEPRI, r3
}
 80088ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	e000ed04 	.word	0xe000ed04

080088bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088c0:	4b0b      	ldr	r3, [pc, #44]	@ (80088f0 <vPortSetupTimerInterrupt+0x34>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088c6:	4b0b      	ldr	r3, [pc, #44]	@ (80088f4 <vPortSetupTimerInterrupt+0x38>)
 80088c8:	2200      	movs	r2, #0
 80088ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088cc:	4b0a      	ldr	r3, [pc, #40]	@ (80088f8 <vPortSetupTimerInterrupt+0x3c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a0a      	ldr	r2, [pc, #40]	@ (80088fc <vPortSetupTimerInterrupt+0x40>)
 80088d2:	fba2 2303 	umull	r2, r3, r2, r3
 80088d6:	099b      	lsrs	r3, r3, #6
 80088d8:	4a09      	ldr	r2, [pc, #36]	@ (8008900 <vPortSetupTimerInterrupt+0x44>)
 80088da:	3b01      	subs	r3, #1
 80088dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088de:	4b04      	ldr	r3, [pc, #16]	@ (80088f0 <vPortSetupTimerInterrupt+0x34>)
 80088e0:	2207      	movs	r2, #7
 80088e2:	601a      	str	r2, [r3, #0]
}
 80088e4:	bf00      	nop
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	e000e010 	.word	0xe000e010
 80088f4:	e000e018 	.word	0xe000e018
 80088f8:	20000000 	.word	0x20000000
 80088fc:	10624dd3 	.word	0x10624dd3
 8008900:	e000e014 	.word	0xe000e014

08008904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008904:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008914 <vPortEnableVFP+0x10>
 8008908:	6801      	ldr	r1, [r0, #0]
 800890a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800890e:	6001      	str	r1, [r0, #0]
 8008910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008912:	bf00      	nop
 8008914:	e000ed88 	.word	0xe000ed88

08008918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800891e:	f3ef 8305 	mrs	r3, IPSR
 8008922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2b0f      	cmp	r3, #15
 8008928:	d915      	bls.n	8008956 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800892a:	4a18      	ldr	r2, [pc, #96]	@ (800898c <vPortValidateInterruptPriority+0x74>)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4413      	add	r3, r2
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008934:	4b16      	ldr	r3, [pc, #88]	@ (8008990 <vPortValidateInterruptPriority+0x78>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	7afa      	ldrb	r2, [r7, #11]
 800893a:	429a      	cmp	r2, r3
 800893c:	d20b      	bcs.n	8008956 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	607b      	str	r3, [r7, #4]
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop
 8008954:	e7fd      	b.n	8008952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008956:	4b0f      	ldr	r3, [pc, #60]	@ (8008994 <vPortValidateInterruptPriority+0x7c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800895e:	4b0e      	ldr	r3, [pc, #56]	@ (8008998 <vPortValidateInterruptPriority+0x80>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d90b      	bls.n	800897e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	603b      	str	r3, [r7, #0]
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	e7fd      	b.n	800897a <vPortValidateInterruptPriority+0x62>
	}
 800897e:	bf00      	nop
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	e000e3f0 	.word	0xe000e3f0
 8008990:	200013e0 	.word	0x200013e0
 8008994:	e000ed0c 	.word	0xe000ed0c
 8008998:	200013e4 	.word	0x200013e4

0800899c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08a      	sub	sp, #40	@ 0x28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089a4:	2300      	movs	r3, #0
 80089a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089a8:	f7fe fd74 	bl	8007494 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008b20 <pvPortMalloc+0x184>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80089b4:	f000 f924 	bl	8008c00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008b24 <pvPortMalloc+0x188>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4013      	ands	r3, r2
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f040 8095 	bne.w	8008af0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01e      	beq.n	8008a0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80089cc:	2208      	movs	r2, #8
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4413      	add	r3, r2
 80089d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d015      	beq.n	8008a0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f023 0307 	bic.w	r3, r3, #7
 80089e4:	3308      	adds	r3, #8
 80089e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f003 0307 	and.w	r3, r3, #7
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00b      	beq.n	8008a0a <pvPortMalloc+0x6e>
	__asm volatile
 80089f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	617b      	str	r3, [r7, #20]
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	e7fd      	b.n	8008a06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d06f      	beq.n	8008af0 <pvPortMalloc+0x154>
 8008a10:	4b45      	ldr	r3, [pc, #276]	@ (8008b28 <pvPortMalloc+0x18c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d86a      	bhi.n	8008af0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a1a:	4b44      	ldr	r3, [pc, #272]	@ (8008b2c <pvPortMalloc+0x190>)
 8008a1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a1e:	4b43      	ldr	r3, [pc, #268]	@ (8008b2c <pvPortMalloc+0x190>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a24:	e004      	b.n	8008a30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d903      	bls.n	8008a42 <pvPortMalloc+0xa6>
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1f1      	bne.n	8008a26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a42:	4b37      	ldr	r3, [pc, #220]	@ (8008b20 <pvPortMalloc+0x184>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d051      	beq.n	8008af0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2208      	movs	r2, #8
 8008a52:	4413      	add	r3, r2
 8008a54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	685a      	ldr	r2, [r3, #4]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	1ad2      	subs	r2, r2, r3
 8008a66:	2308      	movs	r3, #8
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d920      	bls.n	8008ab0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4413      	add	r3, r2
 8008a74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	f003 0307 	and.w	r3, r3, #7
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00b      	beq.n	8008a98 <pvPortMalloc+0xfc>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	613b      	str	r3, [r7, #16]
}
 8008a92:	bf00      	nop
 8008a94:	bf00      	nop
 8008a96:	e7fd      	b.n	8008a94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	1ad2      	subs	r2, r2, r3
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008aaa:	69b8      	ldr	r0, [r7, #24]
 8008aac:	f000 f90a 	bl	8008cc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b28 <pvPortMalloc+0x18c>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	4a1b      	ldr	r2, [pc, #108]	@ (8008b28 <pvPortMalloc+0x18c>)
 8008abc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008abe:	4b1a      	ldr	r3, [pc, #104]	@ (8008b28 <pvPortMalloc+0x18c>)
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b30 <pvPortMalloc+0x194>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d203      	bcs.n	8008ad2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008aca:	4b17      	ldr	r3, [pc, #92]	@ (8008b28 <pvPortMalloc+0x18c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a18      	ldr	r2, [pc, #96]	@ (8008b30 <pvPortMalloc+0x194>)
 8008ad0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	4b13      	ldr	r3, [pc, #76]	@ (8008b24 <pvPortMalloc+0x188>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	431a      	orrs	r2, r3
 8008adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ade:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ae6:	4b13      	ldr	r3, [pc, #76]	@ (8008b34 <pvPortMalloc+0x198>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3301      	adds	r3, #1
 8008aec:	4a11      	ldr	r2, [pc, #68]	@ (8008b34 <pvPortMalloc+0x198>)
 8008aee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008af0:	f7fe fcde 	bl	80074b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00b      	beq.n	8008b16 <pvPortMalloc+0x17a>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	60fb      	str	r3, [r7, #12]
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	e7fd      	b.n	8008b12 <pvPortMalloc+0x176>
	return pvReturn;
 8008b16:	69fb      	ldr	r3, [r7, #28]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3728      	adds	r7, #40	@ 0x28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20002778 	.word	0x20002778
 8008b24:	2000278c 	.word	0x2000278c
 8008b28:	2000277c 	.word	0x2000277c
 8008b2c:	20002770 	.word	0x20002770
 8008b30:	20002780 	.word	0x20002780
 8008b34:	20002784 	.word	0x20002784

08008b38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d04f      	beq.n	8008bea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b4a:	2308      	movs	r3, #8
 8008b4c:	425b      	negs	r3, r3
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	4413      	add	r3, r2
 8008b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	4b25      	ldr	r3, [pc, #148]	@ (8008bf4 <vPortFree+0xbc>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4013      	ands	r3, r2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10b      	bne.n	8008b7e <vPortFree+0x46>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	60fb      	str	r3, [r7, #12]
}
 8008b78:	bf00      	nop
 8008b7a:	bf00      	nop
 8008b7c:	e7fd      	b.n	8008b7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00b      	beq.n	8008b9e <vPortFree+0x66>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	60bb      	str	r3, [r7, #8]
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	e7fd      	b.n	8008b9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	4b14      	ldr	r3, [pc, #80]	@ (8008bf4 <vPortFree+0xbc>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d01e      	beq.n	8008bea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d11a      	bne.n	8008bea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8008bf4 <vPortFree+0xbc>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	43db      	mvns	r3, r3
 8008bbe:	401a      	ands	r2, r3
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008bc4:	f7fe fc66 	bl	8007494 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf8 <vPortFree+0xc0>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	4a09      	ldr	r2, [pc, #36]	@ (8008bf8 <vPortFree+0xc0>)
 8008bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bd6:	6938      	ldr	r0, [r7, #16]
 8008bd8:	f000 f874 	bl	8008cc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008bdc:	4b07      	ldr	r3, [pc, #28]	@ (8008bfc <vPortFree+0xc4>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3301      	adds	r3, #1
 8008be2:	4a06      	ldr	r2, [pc, #24]	@ (8008bfc <vPortFree+0xc4>)
 8008be4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008be6:	f7fe fc63 	bl	80074b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008bea:	bf00      	nop
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	2000278c 	.word	0x2000278c
 8008bf8:	2000277c 	.word	0x2000277c
 8008bfc:	20002788 	.word	0x20002788

08008c00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008c0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c0c:	4b27      	ldr	r3, [pc, #156]	@ (8008cac <prvHeapInit+0xac>)
 8008c0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f003 0307 	and.w	r3, r3, #7
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00c      	beq.n	8008c34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3307      	adds	r3, #7
 8008c1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 0307 	bic.w	r3, r3, #7
 8008c26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8008cac <prvHeapInit+0xac>)
 8008c30:	4413      	add	r3, r2
 8008c32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c38:	4a1d      	ldr	r2, [pc, #116]	@ (8008cb0 <prvHeapInit+0xb0>)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8008cb0 <prvHeapInit+0xb0>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	4413      	add	r3, r2
 8008c4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c4c:	2208      	movs	r2, #8
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f023 0307 	bic.w	r3, r3, #7
 8008c5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4a15      	ldr	r2, [pc, #84]	@ (8008cb4 <prvHeapInit+0xb4>)
 8008c60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c62:	4b14      	ldr	r3, [pc, #80]	@ (8008cb4 <prvHeapInit+0xb4>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2200      	movs	r2, #0
 8008c68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c6a:	4b12      	ldr	r3, [pc, #72]	@ (8008cb4 <prvHeapInit+0xb4>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	1ad2      	subs	r2, r2, r3
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c80:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb4 <prvHeapInit+0xb4>)
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8008cb8 <prvHeapInit+0xb8>)
 8008c8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	4a09      	ldr	r2, [pc, #36]	@ (8008cbc <prvHeapInit+0xbc>)
 8008c96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c98:	4b09      	ldr	r3, [pc, #36]	@ (8008cc0 <prvHeapInit+0xc0>)
 8008c9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c9e:	601a      	str	r2, [r3, #0]
}
 8008ca0:	bf00      	nop
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	200013e8 	.word	0x200013e8
 8008cb0:	20002770 	.word	0x20002770
 8008cb4:	20002778 	.word	0x20002778
 8008cb8:	20002780 	.word	0x20002780
 8008cbc:	2000277c 	.word	0x2000277c
 8008cc0:	2000278c 	.word	0x2000278c

08008cc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ccc:	4b28      	ldr	r3, [pc, #160]	@ (8008d70 <prvInsertBlockIntoFreeList+0xac>)
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	e002      	b.n	8008cd8 <prvInsertBlockIntoFreeList+0x14>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d8f7      	bhi.n	8008cd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	4413      	add	r3, r2
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d108      	bne.n	8008d06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	441a      	add	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	441a      	add	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d118      	bne.n	8008d4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	4b15      	ldr	r3, [pc, #84]	@ (8008d74 <prvInsertBlockIntoFreeList+0xb0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d00d      	beq.n	8008d42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	441a      	add	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e008      	b.n	8008d54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d42:	4b0c      	ldr	r3, [pc, #48]	@ (8008d74 <prvInsertBlockIntoFreeList+0xb0>)
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	601a      	str	r2, [r3, #0]
 8008d4a:	e003      	b.n	8008d54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d002      	beq.n	8008d62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d62:	bf00      	nop
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	20002770 	.word	0x20002770
 8008d74:	20002778 	.word	0x20002778

08008d78 <memset>:
 8008d78:	4402      	add	r2, r0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d100      	bne.n	8008d82 <memset+0xa>
 8008d80:	4770      	bx	lr
 8008d82:	f803 1b01 	strb.w	r1, [r3], #1
 8008d86:	e7f9      	b.n	8008d7c <memset+0x4>

08008d88 <_reclaim_reent>:
 8008d88:	4b29      	ldr	r3, [pc, #164]	@ (8008e30 <_reclaim_reent+0xa8>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4283      	cmp	r3, r0
 8008d8e:	b570      	push	{r4, r5, r6, lr}
 8008d90:	4604      	mov	r4, r0
 8008d92:	d04b      	beq.n	8008e2c <_reclaim_reent+0xa4>
 8008d94:	69c3      	ldr	r3, [r0, #28]
 8008d96:	b1ab      	cbz	r3, 8008dc4 <_reclaim_reent+0x3c>
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	b16b      	cbz	r3, 8008db8 <_reclaim_reent+0x30>
 8008d9c:	2500      	movs	r5, #0
 8008d9e:	69e3      	ldr	r3, [r4, #28]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	5959      	ldr	r1, [r3, r5]
 8008da4:	2900      	cmp	r1, #0
 8008da6:	d13b      	bne.n	8008e20 <_reclaim_reent+0x98>
 8008da8:	3504      	adds	r5, #4
 8008daa:	2d80      	cmp	r5, #128	@ 0x80
 8008dac:	d1f7      	bne.n	8008d9e <_reclaim_reent+0x16>
 8008dae:	69e3      	ldr	r3, [r4, #28]
 8008db0:	4620      	mov	r0, r4
 8008db2:	68d9      	ldr	r1, [r3, #12]
 8008db4:	f000 f872 	bl	8008e9c <_free_r>
 8008db8:	69e3      	ldr	r3, [r4, #28]
 8008dba:	6819      	ldr	r1, [r3, #0]
 8008dbc:	b111      	cbz	r1, 8008dc4 <_reclaim_reent+0x3c>
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f000 f86c 	bl	8008e9c <_free_r>
 8008dc4:	6961      	ldr	r1, [r4, #20]
 8008dc6:	b111      	cbz	r1, 8008dce <_reclaim_reent+0x46>
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f000 f867 	bl	8008e9c <_free_r>
 8008dce:	69e1      	ldr	r1, [r4, #28]
 8008dd0:	b111      	cbz	r1, 8008dd8 <_reclaim_reent+0x50>
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 f862 	bl	8008e9c <_free_r>
 8008dd8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008dda:	b111      	cbz	r1, 8008de2 <_reclaim_reent+0x5a>
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f000 f85d 	bl	8008e9c <_free_r>
 8008de2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008de4:	b111      	cbz	r1, 8008dec <_reclaim_reent+0x64>
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 f858 	bl	8008e9c <_free_r>
 8008dec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008dee:	b111      	cbz	r1, 8008df6 <_reclaim_reent+0x6e>
 8008df0:	4620      	mov	r0, r4
 8008df2:	f000 f853 	bl	8008e9c <_free_r>
 8008df6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008df8:	b111      	cbz	r1, 8008e00 <_reclaim_reent+0x78>
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f000 f84e 	bl	8008e9c <_free_r>
 8008e00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008e02:	b111      	cbz	r1, 8008e0a <_reclaim_reent+0x82>
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 f849 	bl	8008e9c <_free_r>
 8008e0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008e0c:	b111      	cbz	r1, 8008e14 <_reclaim_reent+0x8c>
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 f844 	bl	8008e9c <_free_r>
 8008e14:	6a23      	ldr	r3, [r4, #32]
 8008e16:	b14b      	cbz	r3, 8008e2c <_reclaim_reent+0xa4>
 8008e18:	4620      	mov	r0, r4
 8008e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e1e:	4718      	bx	r3
 8008e20:	680e      	ldr	r6, [r1, #0]
 8008e22:	4620      	mov	r0, r4
 8008e24:	f000 f83a 	bl	8008e9c <_free_r>
 8008e28:	4631      	mov	r1, r6
 8008e2a:	e7bb      	b.n	8008da4 <_reclaim_reent+0x1c>
 8008e2c:	bd70      	pop	{r4, r5, r6, pc}
 8008e2e:	bf00      	nop
 8008e30:	20000010 	.word	0x20000010

08008e34 <__libc_init_array>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	4d0d      	ldr	r5, [pc, #52]	@ (8008e6c <__libc_init_array+0x38>)
 8008e38:	4c0d      	ldr	r4, [pc, #52]	@ (8008e70 <__libc_init_array+0x3c>)
 8008e3a:	1b64      	subs	r4, r4, r5
 8008e3c:	10a4      	asrs	r4, r4, #2
 8008e3e:	2600      	movs	r6, #0
 8008e40:	42a6      	cmp	r6, r4
 8008e42:	d109      	bne.n	8008e58 <__libc_init_array+0x24>
 8008e44:	4d0b      	ldr	r5, [pc, #44]	@ (8008e74 <__libc_init_array+0x40>)
 8008e46:	4c0c      	ldr	r4, [pc, #48]	@ (8008e78 <__libc_init_array+0x44>)
 8008e48:	f000 f87e 	bl	8008f48 <_init>
 8008e4c:	1b64      	subs	r4, r4, r5
 8008e4e:	10a4      	asrs	r4, r4, #2
 8008e50:	2600      	movs	r6, #0
 8008e52:	42a6      	cmp	r6, r4
 8008e54:	d105      	bne.n	8008e62 <__libc_init_array+0x2e>
 8008e56:	bd70      	pop	{r4, r5, r6, pc}
 8008e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e5c:	4798      	blx	r3
 8008e5e:	3601      	adds	r6, #1
 8008e60:	e7ee      	b.n	8008e40 <__libc_init_array+0xc>
 8008e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e66:	4798      	blx	r3
 8008e68:	3601      	adds	r6, #1
 8008e6a:	e7f2      	b.n	8008e52 <__libc_init_array+0x1e>
 8008e6c:	080090f4 	.word	0x080090f4
 8008e70:	080090f4 	.word	0x080090f4
 8008e74:	080090f4 	.word	0x080090f4
 8008e78:	080090fc 	.word	0x080090fc

08008e7c <__retarget_lock_acquire_recursive>:
 8008e7c:	4770      	bx	lr

08008e7e <__retarget_lock_release_recursive>:
 8008e7e:	4770      	bx	lr

08008e80 <memcpy>:
 8008e80:	440a      	add	r2, r1
 8008e82:	4291      	cmp	r1, r2
 8008e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e88:	d100      	bne.n	8008e8c <memcpy+0xc>
 8008e8a:	4770      	bx	lr
 8008e8c:	b510      	push	{r4, lr}
 8008e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e96:	4291      	cmp	r1, r2
 8008e98:	d1f9      	bne.n	8008e8e <memcpy+0xe>
 8008e9a:	bd10      	pop	{r4, pc}

08008e9c <_free_r>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	2900      	cmp	r1, #0
 8008ea2:	d041      	beq.n	8008f28 <_free_r+0x8c>
 8008ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ea8:	1f0c      	subs	r4, r1, #4
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	bfb8      	it	lt
 8008eae:	18e4      	addlt	r4, r4, r3
 8008eb0:	f000 f83e 	bl	8008f30 <__malloc_lock>
 8008eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8008f2c <_free_r+0x90>)
 8008eb6:	6813      	ldr	r3, [r2, #0]
 8008eb8:	b933      	cbnz	r3, 8008ec8 <_free_r+0x2c>
 8008eba:	6063      	str	r3, [r4, #4]
 8008ebc:	6014      	str	r4, [r2, #0]
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ec4:	f000 b83a 	b.w	8008f3c <__malloc_unlock>
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	d908      	bls.n	8008ede <_free_r+0x42>
 8008ecc:	6820      	ldr	r0, [r4, #0]
 8008ece:	1821      	adds	r1, r4, r0
 8008ed0:	428b      	cmp	r3, r1
 8008ed2:	bf01      	itttt	eq
 8008ed4:	6819      	ldreq	r1, [r3, #0]
 8008ed6:	685b      	ldreq	r3, [r3, #4]
 8008ed8:	1809      	addeq	r1, r1, r0
 8008eda:	6021      	streq	r1, [r4, #0]
 8008edc:	e7ed      	b.n	8008eba <_free_r+0x1e>
 8008ede:	461a      	mov	r2, r3
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	b10b      	cbz	r3, 8008ee8 <_free_r+0x4c>
 8008ee4:	42a3      	cmp	r3, r4
 8008ee6:	d9fa      	bls.n	8008ede <_free_r+0x42>
 8008ee8:	6811      	ldr	r1, [r2, #0]
 8008eea:	1850      	adds	r0, r2, r1
 8008eec:	42a0      	cmp	r0, r4
 8008eee:	d10b      	bne.n	8008f08 <_free_r+0x6c>
 8008ef0:	6820      	ldr	r0, [r4, #0]
 8008ef2:	4401      	add	r1, r0
 8008ef4:	1850      	adds	r0, r2, r1
 8008ef6:	4283      	cmp	r3, r0
 8008ef8:	6011      	str	r1, [r2, #0]
 8008efa:	d1e0      	bne.n	8008ebe <_free_r+0x22>
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	6053      	str	r3, [r2, #4]
 8008f02:	4408      	add	r0, r1
 8008f04:	6010      	str	r0, [r2, #0]
 8008f06:	e7da      	b.n	8008ebe <_free_r+0x22>
 8008f08:	d902      	bls.n	8008f10 <_free_r+0x74>
 8008f0a:	230c      	movs	r3, #12
 8008f0c:	602b      	str	r3, [r5, #0]
 8008f0e:	e7d6      	b.n	8008ebe <_free_r+0x22>
 8008f10:	6820      	ldr	r0, [r4, #0]
 8008f12:	1821      	adds	r1, r4, r0
 8008f14:	428b      	cmp	r3, r1
 8008f16:	bf04      	itt	eq
 8008f18:	6819      	ldreq	r1, [r3, #0]
 8008f1a:	685b      	ldreq	r3, [r3, #4]
 8008f1c:	6063      	str	r3, [r4, #4]
 8008f1e:	bf04      	itt	eq
 8008f20:	1809      	addeq	r1, r1, r0
 8008f22:	6021      	streq	r1, [r4, #0]
 8008f24:	6054      	str	r4, [r2, #4]
 8008f26:	e7ca      	b.n	8008ebe <_free_r+0x22>
 8008f28:	bd38      	pop	{r3, r4, r5, pc}
 8008f2a:	bf00      	nop
 8008f2c:	200028cc 	.word	0x200028cc

08008f30 <__malloc_lock>:
 8008f30:	4801      	ldr	r0, [pc, #4]	@ (8008f38 <__malloc_lock+0x8>)
 8008f32:	f7ff bfa3 	b.w	8008e7c <__retarget_lock_acquire_recursive>
 8008f36:	bf00      	nop
 8008f38:	200028c8 	.word	0x200028c8

08008f3c <__malloc_unlock>:
 8008f3c:	4801      	ldr	r0, [pc, #4]	@ (8008f44 <__malloc_unlock+0x8>)
 8008f3e:	f7ff bf9e 	b.w	8008e7e <__retarget_lock_release_recursive>
 8008f42:	bf00      	nop
 8008f44:	200028c8 	.word	0x200028c8

08008f48 <_init>:
 8008f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4a:	bf00      	nop
 8008f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f4e:	bc08      	pop	{r3}
 8008f50:	469e      	mov	lr, r3
 8008f52:	4770      	bx	lr

08008f54 <_fini>:
 8008f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f56:	bf00      	nop
 8008f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f5a:	bc08      	pop	{r3}
 8008f5c:	469e      	mov	lr, r3
 8008f5e:	4770      	bx	lr
